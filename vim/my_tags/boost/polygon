!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ATR	/usr/include/boost/polygon/transform.hpp	/^  enum ATR {$/;"	g	class:boost::polygon::axis_transformation	access:public
ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail();$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:()
ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail(PolyLine<Unit>* active, ActiveTail* otherTailp);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(PolyLine<Unit>* active, ActiveTail* otherTailp)
ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail(const ActiveTail& that);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& that)
ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail(orientation_2d orient, Unit coord, Side solidToRight, ActiveTail* otherTailp);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(orientation_2d orient, Unit coord, Side solidToRight, ActiveTail* otherTailp)
ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  class ActiveTail {$/;"	c	namespace:boost::polygon::polygon_formation
ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>::ActiveTail() : tailp_(0), otherTailp_(0), holesList_() {}$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:()
ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>::ActiveTail(PolyLine<Unit>* active, ActiveTail<Unit>* otherTailp) :$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(PolyLine<Unit>* active, ActiveTail<Unit>* otherTailp)
ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>::ActiveTail(const ActiveTail<Unit>& that) : tailp_(that.tailp_), otherTailp_(that.otherTailp_), holesList_() {}$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& that)
ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>::ActiveTail(orientation_2d orient, Unit coord, Side solidToRight, ActiveTail* otherTailp) :$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(orientation_2d orient, Unit coord, Side solidToRight, ActiveTail* otherTailp)
ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45() : tailp_(0), otherTailp_(0), holesList_(), head_(0) {}$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:()
ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45(ActiveTail45* otherTailp) :$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(ActiveTail45* otherTailp)
ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45(Point point, ActiveTail45* otherTailp, bool head = true) :$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(Point point, ActiveTail45* otherTailp, bool head = true)
ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45(const ActiveTail45& that) :$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(const ActiveTail45& that)
ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45(const Vertex45& vertex, ActiveTail45* otherTailp = 0) :$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(const Vertex45& vertex, ActiveTail45* otherTailp = 0)
ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class ActiveTail45 {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename polygon_45_formation<Unit>::ActiveTail45 ActiveTail45;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename polygon_45_formation<Unit>::ActiveTail45 ActiveTail45;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
BEGIN_TRANSFORM	/usr/include/boost/polygon/transform.hpp	/^    BEGIN_TRANSFORM = 0,$/;"	e	enum:boost::polygon::axis_transformation::ATR
BITS_MASK	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_MASK = 0x1F$/;"	e	enum:boost::polygon::voronoi_cell::Bits
BITS_MASK	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_MASK = 0x1F$/;"	e	enum:boost::polygon::voronoi_edge::Bits
BITS_MASK	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_MASK = 0x1F$/;"	e	enum:boost::polygon::voronoi_vertex::Bits
BITS_SHIFT	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_SHIFT = 0x5,$/;"	e	enum:boost::polygon::voronoi_cell::Bits
BITS_SHIFT	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_SHIFT = 0x5,$/;"	e	enum:boost::polygon::voronoi_edge::Bits
BITS_SHIFT	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_SHIFT = 0x5,$/;"	e	enum:boost::polygon::voronoi_vertex::Bits
BIT_IS_LINEAR	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BIT_IS_LINEAR = 0x1,  \/\/ linear is opposite to curved$/;"	e	enum:boost::polygon::voronoi_edge::Bits
BIT_IS_PRIMARY	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BIT_IS_PRIMARY = 0x2,  \/\/ primary is opposite to secondary$/;"	e	enum:boost::polygon::voronoi_edge::Bits
BOOLEAN_AND	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      BOOLEAN_AND = 1,$/;"	e	enum:boost::polygon::arbitrary_boolean_op::BOOLEAN_OP_TYPE
BOOLEAN_NOT	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      BOOLEAN_NOT = 3$/;"	e	enum:boost::polygon::arbitrary_boolean_op::BOOLEAN_OP_TYPE
BOOLEAN_OP_TYPE	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    enum BOOLEAN_OP_TYPE {$/;"	g	class:boost::polygon::arbitrary_boolean_op	access:public
BOOLEAN_OR	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      BOOLEAN_OR = 0,$/;"	e	enum:boost::polygon::arbitrary_boolean_op::BOOLEAN_OP_TYPE
BOOLEAN_XOR	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      BOOLEAN_XOR = 2,$/;"	e	enum:boost::polygon::arbitrary_boolean_op::BOOLEAN_OP_TYPE
BOOST_POLYGON_BOOLEAN_OP_45_HPP	/usr/include/boost/polygon/detail/boolean_op_45.hpp	9;"	d
BOOST_POLYGON_BOOLEAN_OP_HPP	/usr/include/boost/polygon/detail/boolean_op.hpp	9;"	d
BOOST_POLYGON_DETAIL_SIMPLIFY_HPP	/usr/include/boost/polygon/detail/polygon_simplify.hpp	7;"	d
BOOST_POLYGON_DETAIL_VORONOI_CTYPES	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	11;"	d
BOOST_POLYGON_DETAIL_VORONOI_PREDICATES	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	11;"	d
BOOST_POLYGON_DETAIL_VORONOI_ROBUST_FPT	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	11;"	d
BOOST_POLYGON_DETAIL_VORONOI_STRUCTURES	/usr/include/boost/polygon/detail/voronoi_structures.hpp	11;"	d
BOOST_POLYGON_GMP_OVERRIDE_HPP	/usr/include/boost/polygon/gmp_override.hpp	9;"	d
BOOST_POLYGON_ICC	/usr/include/boost/polygon/isotropy.hpp	34;"	d
BOOST_POLYGON_ICC	/usr/include/boost/polygon/isotropy.hpp	55;"	d
BOOST_POLYGON_INTERVAL_CONCEPT_HPP	/usr/include/boost/polygon/interval_concept.hpp	13;"	d
BOOST_POLYGON_INTERVAL_DATA_HPP	/usr/include/boost/polygon/interval_data.hpp	13;"	d
BOOST_POLYGON_INTERVAL_TRAITS_HPP	/usr/include/boost/polygon/interval_traits.hpp	13;"	d
BOOST_POLYGON_ISOTROPY_HPP	/usr/include/boost/polygon/isotropy.hpp	10;"	d
BOOST_POLYGON_ITERATOR_COMPACT_TO_POINTS_HPP	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	9;"	d
BOOST_POLYGON_ITERATOR_GEOMETRY_TO_SET_HPP	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	9;"	d
BOOST_POLYGON_ITERATOR_POINTS_TO_COMPACT_HPP	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	9;"	d
BOOST_POLYGON_MAX_COVER_HPP	/usr/include/boost/polygon/detail/max_cover.hpp	9;"	d
BOOST_POLYGON_MSVC	/usr/include/boost/polygon/isotropy.hpp	31;"	d
BOOST_POLYGON_MSVC	/usr/include/boost/polygon/isotropy.hpp	52;"	d
BOOST_POLYGON_NO_DEPS	/usr/include/boost/polygon/gtl.hpp	20;"	d
BOOST_POLYGON_POINT_CONCEPT_HPP	/usr/include/boost/polygon/point_concept.hpp	13;"	d
BOOST_POLYGON_POINT_DATA_HPP	/usr/include/boost/polygon/point_data.hpp	13;"	d
BOOST_POLYGON_POINT_TRAITS_HPP	/usr/include/boost/polygon/point_traits.hpp	13;"	d
BOOST_POLYGON_POLYGON_45_DATA_HPP	/usr/include/boost/polygon/polygon_45_data.hpp	9;"	d
BOOST_POLYGON_POLYGON_45_FORMATION_HPP	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	9;"	d
BOOST_POLYGON_POLYGON_45_SET_CONCEPT_HPP	/usr/include/boost/polygon/polygon_45_set_concept.hpp	9;"	d
BOOST_POLYGON_POLYGON_45_SET_DATA_HPP	/usr/include/boost/polygon/polygon_45_set_data.hpp	9;"	d
BOOST_POLYGON_POLYGON_45_SET_TRAITS_HPP	/usr/include/boost/polygon/polygon_45_set_traits.hpp	9;"	d
BOOST_POLYGON_POLYGON_45_SET_VIEW_HPP	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	9;"	d
BOOST_POLYGON_POLYGON_45_TOUCH_HPP	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	9;"	d
BOOST_POLYGON_POLYGON_45_WITH_HOLES_DATA_HPP	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	9;"	d
BOOST_POLYGON_POLYGON_90_DATA_HPP	/usr/include/boost/polygon/polygon_90_data.hpp	9;"	d
BOOST_POLYGON_POLYGON_90_SET_CONCEPT_HPP	/usr/include/boost/polygon/polygon_90_set_concept.hpp	9;"	d
BOOST_POLYGON_POLYGON_90_SET_DATA_HPP	/usr/include/boost/polygon/polygon_90_set_data.hpp	9;"	d
BOOST_POLYGON_POLYGON_90_SET_TRAITS_HPP	/usr/include/boost/polygon/polygon_90_set_traits.hpp	9;"	d
BOOST_POLYGON_POLYGON_90_SET_VIEW_HPP	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	9;"	d
BOOST_POLYGON_POLYGON_90_TOUCH_HPP	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	9;"	d
BOOST_POLYGON_POLYGON_90_WITH_HOLES_DATA_HPP	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	9;"	d
BOOST_POLYGON_POLYGON_ARBITRARY_FORMATION_HPP	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	9;"	d
BOOST_POLYGON_POLYGON_DATA_HPP	/usr/include/boost/polygon/polygon_data.hpp	9;"	d
BOOST_POLYGON_POLYGON_FORMATION_HPP	/usr/include/boost/polygon/detail/polygon_formation.hpp	9;"	d
BOOST_POLYGON_POLYGON_HPP	/usr/include/boost/polygon/polygon.hpp	9;"	d
BOOST_POLYGON_POLYGON_SET_CONCEPT_HPP	/usr/include/boost/polygon/polygon_set_concept.hpp	9;"	d
BOOST_POLYGON_POLYGON_SET_DATA_HPP	/usr/include/boost/polygon/polygon_set_data.hpp	9;"	d
BOOST_POLYGON_POLYGON_SET_TRAITS_HPP	/usr/include/boost/polygon/polygon_set_traits.hpp	9;"	d
BOOST_POLYGON_POLYGON_SET_VIEW_HPP	/usr/include/boost/polygon/detail/polygon_set_view.hpp	9;"	d
BOOST_POLYGON_POLYGON_TRAITS_HPP	/usr/include/boost/polygon/polygon_traits.hpp	9;"	d
BOOST_POLYGON_POLYGON_WITH_HOLES_DATA_HPP	/usr/include/boost/polygon/polygon_with_holes_data.hpp	9;"	d
BOOST_POLYGON_PROPERTY_MERGE_45_HPP	/usr/include/boost/polygon/detail/property_merge_45.hpp	9;"	d
BOOST_POLYGON_PROPERTY_MERGE_HPP	/usr/include/boost/polygon/detail/property_merge.hpp	9;"	d
BOOST_POLYGON_RECTANGLE_CONCEPT_HPP	/usr/include/boost/polygon/rectangle_concept.hpp	9;"	d
BOOST_POLYGON_RECTANGLE_DATA_HPP	/usr/include/boost/polygon/rectangle_data.hpp	9;"	d
BOOST_POLYGON_RECTANGLE_FORMATION_HPP	/usr/include/boost/polygon/detail/rectangle_formation.hpp	9;"	d
BOOST_POLYGON_RECTANGLE_TRAITS_HPP	/usr/include/boost/polygon/rectangle_traits.hpp	9;"	d
BOOST_POLYGON_SCAN_ARBITRARY_HPP	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	9;"	d
BOOST_POLYGON_SEGMENT_CONCEPT_HPP	/usr/include/boost/polygon/segment_concept.hpp	13;"	d
BOOST_POLYGON_SEGMENT_DATA_HPP	/usr/include/boost/polygon/segment_data.hpp	13;"	d
BOOST_POLYGON_SEGMENT_TRAITS_HPP	/usr/include/boost/polygon/segment_traits.hpp	13;"	d
BOOST_POLYGON_SEGMENT_UTILS_HPP	/usr/include/boost/polygon/segment_utils.hpp	10;"	d
BOOST_POLYGON_SORT_ADAPTOR_HPP	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	9;"	d
BOOST_POLYGON_TRANSFORM_HPP	/usr/include/boost/polygon/transform.hpp	13;"	d
BOOST_POLYGON_USE_LONG_LONG	/usr/include/boost/polygon/isotropy.hpp	37;"	d
BOOST_POLYGON_USE_LONG_LONG	/usr/include/boost/polygon/isotropy.hpp	57;"	d
BOOST_POLYGON_VERSION	/usr/include/boost/polygon/polygon.hpp	10;"	d
BOOST_POLYGON_VORONOI	/usr/include/boost/polygon/voronoi.hpp	11;"	d
BOOST_POLYGON_VORONOI_BUILDER	/usr/include/boost/polygon/voronoi_builder.hpp	11;"	d
BOOST_POLYGON_VORONOI_DIAGRAM	/usr/include/boost/polygon/voronoi_diagram.hpp	11;"	d
BOOST_POLYGON_VORONOI_GEOMETRY_TYPE	/usr/include/boost/polygon/voronoi_geometry_type.hpp	11;"	d
BinaryAnd	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryAnd() {}$/;"	f	class:boost::polygon::boolean_op::BinaryAnd	access:public	signature:()
BinaryAnd	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BinaryAnd {$/;"	c	namespace:boost::polygon::boolean_op
BinaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount()$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:()
BinaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount(const BinaryCount& that)$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that)
BinaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount(int countL, int countR)$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(int countL, int countR)
BinaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BinaryCount {$/;"	c	namespace:boost::polygon::boolean_op
BinaryNot	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryNot() {}$/;"	f	class:boost::polygon::boolean_op::BinaryNot	access:public	signature:()
BinaryNot	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BinaryNot {$/;"	c	namespace:boost::polygon::boolean_op
BinaryOr	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryOr() {}$/;"	f	class:boost::polygon::boolean_op::BinaryOr	access:public	signature:()
BinaryOr	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BinaryOr {$/;"	c	namespace:boost::polygon::boolean_op
BinaryXor	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryXor() {}$/;"	f	class:boost::polygon::boolean_op::BinaryXor	access:public	signature:()
BinaryXor	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BinaryXor {$/;"	c	namespace:boost::polygon::boolean_op
Bits	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  enum Bits {$/;"	g	class:boost::polygon::detail::site_event	access:private
Bits	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  enum Bits {$/;"	g	class:boost::polygon::voronoi_cell	access:private
Bits	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  enum Bits {$/;"	g	class:boost::polygon::voronoi_edge	access:private
Bits	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  enum Bits {$/;"	g	class:boost::polygon::voronoi_vertex	access:private
BooleanOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BooleanOp () : scanData_(), nextItr_(), nullT_() { nextItr_ = scanData_.end(); nullT_ = 0; }$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:()
BooleanOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BooleanOp (T nullT) : scanData_(), nextItr_(), nullT_(nullT) { nextItr_ = scanData_.end(); }$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:(T nullT)
BooleanOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BooleanOp (const BooleanOp& that) : scanData_(that.scanData_), nextItr_(),$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:(const BooleanOp& that)
BooleanOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BooleanOp {$/;"	c	namespace:boost::polygon::boolean_op
CLOCKWISE	/usr/include/boost/polygon/isotropy.hpp	/^                           CLOCKWISE = 0, COUNTERCLOCKWISE = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
CLOSEST	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	e	enum:boost::polygon::RoundingOption
COLLINEAR	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      COLLINEAR = 0,$/;"	e	enum:boost::polygon::detail::voronoi_predicates::orientation_test::Orientation
COORDINATE_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    COORDINATE_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
COUNTERCLOCKWISE	/usr/include/boost/polygon/isotropy.hpp	/^                           CLOCKWISE = 0, COUNTERCLOCKWISE = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
CornerOption	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum CornerOption { INTERSECTION = 0, ORTHOGONAL = 1, UNFILLED = 2 };$/;"	g	namespace:boost::polygon
Count1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1() : count_(0) { }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:()
Count1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1(const Count1& count) : count_(count.count_) { }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count)
Count1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1(int count) : count_(count) { }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(int count)
Count1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Count1 {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
Count2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2()$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:()
Count2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2(const Count2& count)$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count)
Count2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2(int count1, int count2)$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(int count1, int count2)
Count2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Count2 {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
Count2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename boolean_op_45<Unit>::Count2 Count2;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
CountMerge	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge() : counts() {}$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:()
CountMerge	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge(const CountMerge& count) : counts(count.counts) {}$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count)
CountMerge	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    class CountMerge {$/;"	c	struct:boost::polygon::polygon_45_property_merge	access:public
CountTouch	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch() : counts() {}$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:()
CountTouch	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch(const CountTouch& count) : counts(count.counts) {}$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count)
CountTouch	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    class CountTouch {$/;"	c	struct:boost::polygon::polygon_45_touch	access:public
CrossQueue	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef std::set<Point, lessScan45Point> CrossQueue;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
DOWN	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_3d_enum { DOWN = 4, UP = 5 };$/;"	e	enum:boost::polygon::direction_3d_enum
EAST	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_2d_enum { WEST = 0, EAST = 1, SOUTH = 2, NORTH = 3 };$/;"	e	enum:boost::polygon::direction_2d_enum
EAST_NORTH	/usr/include/boost/polygon/transform.hpp	/^      EN = 0, EAST_NORTH = 0,$/;"	e	enum:boost::polygon::axis_transformation::ATR
EAST_SOUTH	/usr/include/boost/polygon/transform.hpp	/^      ES = 2, EAST_SOUTH = 2, FLIP_Y       = 2,$/;"	e	enum:boost::polygon::axis_transformation::ATR
EN	/usr/include/boost/polygon/transform.hpp	/^      EN = 0, EAST_NORTH = 0,$/;"	e	enum:boost::polygon::axis_transformation::ATR
END_TRANSFORM	/usr/include/boost/polygon/transform.hpp	/^    END_TRANSFORM = 7$/;"	e	enum:boost::polygon::axis_transformation::ATR
EQUAL	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^    EQUAL = 0,$/;"	e	enum:boost::polygon::detail::ulp_comparison::Result
ES	/usr/include/boost/polygon/transform.hpp	/^      ES = 2, EAST_SOUTH = 2, FLIP_Y       = 2,$/;"	e	enum:boost::polygon::axis_transformation::ATR
EdgeAssociation	/usr/include/boost/polygon/detail/max_cover.hpp	/^    typedef std::pair<std::pair<Unit, Interval>, Node* > EdgeAssociation;$/;"	t	struct:boost::polygon::MaxCover	access:public
ElementType	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    typedef std::pair<Unit, T> ElementType;$/;"	t	class:boost::polygon::boolean_op::BooleanOp	access:public
ElementType	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      typedef std::pair<Unit, std::set<int> > ElementType;$/;"	t	class:boost::polygon::touch_90_operation::TouchOp	access:public
End	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  typedef bool End;$/;"	t	namespace:boost::polygon::polygon_formation
EventData	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      typedef std::map<Unit, std::set<int> > EventData;$/;"	t	class:boost::polygon::touch_90_operation::TouchScanEvent	access:private
FLIP_SWAP_XY	/usr/include/boost/polygon/transform.hpp	/^      SW = 7, SOUTH_WEST = 7, FLIP_SWAP_XY = 7,$/;"	e	enum:boost::polygon::axis_transformation::ATR
FLIP_X	/usr/include/boost/polygon/transform.hpp	/^      WN = 1, WEST_NORTH = 1, FLIP_X       = 1,$/;"	e	enum:boost::polygon::axis_transformation::ATR
FLIP_XY	/usr/include/boost/polygon/transform.hpp	/^      WS = 3, WEST_SOUTH = 3, FLIP_XY      = 3,$/;"	e	enum:boost::polygon::axis_transformation::ATR
FLIP_Y	/usr/include/boost/polygon/transform.hpp	/^      ES = 2, EAST_SOUTH = 2, FLIP_Y       = 2,$/;"	e	enum:boost::polygon::axis_transformation::ATR
FORWARD	/usr/include/boost/polygon/isotropy.hpp	/^                           REVERSE = 0, FORWARD = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_type	access:public
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_with_holes_type	access:public
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_type	access:public
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_with_holes_type	access:public
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_type	access:public
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_with_holes_type	access:public
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_45_type	access:public
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_45_with_holes_type	access:public
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_90_type	access:public
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_90_with_holes_type	access:public
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_type	access:public
GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_with_holes_type	access:public
GEOMETRY_CATEGORY_POINT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  GEOMETRY_CATEGORY_POINT = 0x0,$/;"	e	enum:boost::polygon::GeometryCategory
GEOMETRY_CATEGORY_SEGMENT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  GEOMETRY_CATEGORY_SEGMENT = 0x1$/;"	e	enum:boost::polygon::GeometryCategory
GEOMETRY_CONCEPT_ID	/usr/include/boost/polygon/isotropy.hpp	/^  enum GEOMETRY_CONCEPT_ID {$/;"	g	namespace:boost::polygon
GTL_GTL_HPP	/usr/include/boost/polygon/gtl.hpp	9;"	d
GeometryCategory	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^enum GeometryCategory {$/;"	g	namespace:boost::polygon
HEAD	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const End HEAD = false;$/;"	m	namespace:boost::polygon::polygon_formation
HEAD_TO_TAIL	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const int VERTICAL_HEAD = 1, HEAD_TO_TAIL = 2, TAIL_TO_TAIL = 4, SOLID_TO_RIGHT = 8;$/;"	m	namespace:boost::polygon::polygon_formation
HIGH	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_1d_enum { LOW = 0, HIGH = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
HORIZONTAL	/usr/include/boost/polygon/isotropy.hpp	/^  enum orientation_2d_enum { HORIZONTAL = 0, VERTICAL = 1 };$/;"	e	enum:boost::polygon::orientation_2d_enum
INDIVIDUAL_AXIS	/usr/include/boost/polygon/transform.hpp	/^  enum INDIVIDUAL_AXIS {$/;"	g	class:boost::polygon::axis_transformation	access:public
INTERSECTION	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum CornerOption { INTERSECTION = 0, ORTHOGONAL = 1, UNFILLED = 2 };$/;"	e	enum:boost::polygon::CornerOption
INTERVAL_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    INTERVAL_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
IS_INVERSE	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^    IS_INVERSE = 0x20  \/\/ 32$/;"	e	enum:boost::polygon::detail::site_event::Bits
Interval	/usr/include/boost/polygon/detail/max_cover.hpp	/^    typedef interval_data<Unit> Interval;$/;"	t	struct:boost::polygon::MaxCover	access:public
Interval	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    typedef interval_data<Unit> Interval;$/;"	t	struct:boost::polygon::touch_90_operation	access:public
LEFT	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const Side LEFT = false;$/;"	m	namespace:boost::polygon::polygon_formation
LEFT	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      LEFT = 1$/;"	e	enum:boost::polygon::detail::voronoi_predicates::orientation_test::Orientation
LEFT	/usr/include/boost/polygon/isotropy.hpp	/^                           LEFT = 0, RIGHT = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
LESS	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^    LESS = -1,$/;"	e	enum:boost::polygon::detail::ulp_comparison::Result
LESS	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      LESS = -1,$/;"	e	enum:boost::polygon::detail::voronoi_predicates::distance_predicate::kPredicateResult
LOW	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_1d_enum { LOW = 0, HIGH = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
LongUnit	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    typedef typename coordinate_traits<Unit>::manhattan_area_type LongUnit;$/;"	t	struct:boost::polygon::boolean_op_45	access:public
LongUnit	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    typedef typename coordinate_traits<Unit>::manhattan_area_type LongUnit;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
LongUnit	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    typedef typename coordinate_traits<Unit>::manhattan_area_type LongUnit;$/;"	t	struct:boost::polygon::polygon_45_property_merge	access:public
MAX_RELATIVE_ERROR	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  enum MAX_RELATIVE_ERROR {$/;"	g	class:boost::polygon::detail::robust_sqrt_expr	access:public
MAX_RELATIVE_ERROR_EVAL1	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^    MAX_RELATIVE_ERROR_EVAL1 = 4,$/;"	e	enum:boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR
MAX_RELATIVE_ERROR_EVAL2	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^    MAX_RELATIVE_ERROR_EVAL2 = 7,$/;"	e	enum:boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR
MAX_RELATIVE_ERROR_EVAL3	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^    MAX_RELATIVE_ERROR_EVAL3 = 16,$/;"	e	enum:boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR
MAX_RELATIVE_ERROR_EVAL4	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^    MAX_RELATIVE_ERROR_EVAL4 = 25$/;"	e	enum:boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR
MAX_SIGNIFICANT_EXP_DIF	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^    MAX_SIGNIFICANT_EXP_DIF = 54$/;"	e	enum:boost::polygon::detail::extened_exponent_fpt_traits::__anon1
MORE	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^    MORE = 1$/;"	e	enum:boost::polygon::detail::ulp_comparison::Result
MORE	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      MORE = 1$/;"	e	enum:boost::polygon::detail::voronoi_predicates::distance_predicate::kPredicateResult
MaxCover	/usr/include/boost/polygon/detail/max_cover.hpp	/^  struct MaxCover {$/;"	s	namespace:boost::polygon
MergeSetData	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    typedef std::vector<Vertex45Compact> MergeSetData;$/;"	t	struct:boost::polygon::polygon_45_property_merge	access:public
NE	/usr/include/boost/polygon/transform.hpp	/^      NE = 4, NORTH_EAST = 4, SWAP_XY      = 4,$/;"	e	enum:boost::polygon::axis_transformation::ATR
NEGATIVE	/usr/include/boost/polygon/isotropy.hpp	/^                           NEGATIVE = 0, POSITIVE = 1 };$/;"	e	enum:boost::polygon::direction_1d_enum
NORTH	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_2d_enum { WEST = 0, EAST = 1, SOUTH = 2, NORTH = 3 };$/;"	e	enum:boost::polygon::direction_2d_enum
NORTH_EAST	/usr/include/boost/polygon/transform.hpp	/^      NE = 4, NORTH_EAST = 4, SWAP_XY      = 4,$/;"	e	enum:boost::polygon::axis_transformation::ATR
NORTH_WEST	/usr/include/boost/polygon/transform.hpp	/^      NW = 6, NORTH_WEST = 6, ROTATE_RIGHT = 6,$/;"	e	enum:boost::polygon::axis_transformation::ATR
NULL_TRANSFORM	/usr/include/boost/polygon/transform.hpp	/^    NULL_TRANSFORM = 0,$/;"	e	enum:boost::polygon::axis_transformation::ATR
NW	/usr/include/boost/polygon/transform.hpp	/^      NW = 6, NORTH_WEST = 6, ROTATE_RIGHT = 6,$/;"	e	enum:boost::polygon::axis_transformation::ATR
NX	/usr/include/boost/polygon/transform.hpp	/^    NX = 1,$/;"	e	enum:boost::polygon::axis_transformation::INDIVIDUAL_AXIS
NY	/usr/include/boost/polygon/transform.hpp	/^    NY = 3$/;"	e	enum:boost::polygon::axis_transformation::INDIVIDUAL_AXIS
Node	/usr/include/boost/polygon/detail/max_cover.hpp	/^      Node() : children_(), tracedPaths_(), rect() {}$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:()
Node	/usr/include/boost/polygon/detail/max_cover.hpp	/^      Node(const Rectangle rectIn) : children_(), tracedPaths_(), rect(rectIn) {}$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:(const Rectangle rectIn)
Node	/usr/include/boost/polygon/detail/max_cover.hpp	/^    class Node {$/;"	c	struct:boost::polygon::MaxCover	access:public
ORTHOGONAL	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum CornerOption { INTERSECTION = 0, ORTHOGONAL = 1, UNFILLED = 2 };$/;"	e	enum:boost::polygon::CornerOption
OVERSIZE	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	e	enum:boost::polygon::RoundingOption
Orientation	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    enum Orientation {$/;"	g	struct:boost::polygon::detail::voronoi_predicates::orientation_test	access:public
POINT_3D_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POINT_3D_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
POINT_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POINT_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
POLYGON_45_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_45_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
POLYGON_45_SET_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_45_SET_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
POLYGON_45_WITH_HOLES_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_45_WITH_HOLES_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
POLYGON_90_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_90_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
POLYGON_90_SET_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_90_SET_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
POLYGON_90_WITH_HOLES_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_90_WITH_HOLES_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
POLYGON_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
POLYGON_SET_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_SET_CONCEPT$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
POLYGON_WITH_HOLES_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_WITH_HOLES_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
POSITIVE	/usr/include/boost/polygon/isotropy.hpp	/^                           NEGATIVE = 0, POSITIVE = 1 };$/;"	e	enum:boost::polygon::direction_1d_enum
PROXIMAL	/usr/include/boost/polygon/isotropy.hpp	/^  enum orientation_3d_enum { PROXIMAL = 2 };$/;"	e	enum:boost::polygon::orientation_3d_enum
PX	/usr/include/boost/polygon/transform.hpp	/^    PX = 0,$/;"	e	enum:boost::polygon::axis_transformation::INDIVIDUAL_AXIS
PY	/usr/include/boost/polygon/transform.hpp	/^    PY = 2,$/;"	e	enum:boost::polygon::axis_transformation::INDIVIDUAL_AXIS
Point	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::boolean_op_45	access:public
Point	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
Point	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
Point	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
Point	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
Point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:public
Point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
Point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::scanline_base	access:public
Point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
Point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
Point	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::polygon_45_property_merge	access:public
Point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
Point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
Point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::line_intersection	access:private
Point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::property_merge	access:protected
Point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::scanline	access:public
Point	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::edge_utils	access:public
PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine();$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:()
PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine(const PolyLine& pline);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(const PolyLine& pline)
PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine(orientation_2d orient, Unit coord, Side side);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(orientation_2d orient, Unit coord, Side side)
PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  class PolyLine {$/;"	c	namespace:boost::polygon::polygon_formation
PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>::PolyLine() : ptdata_() ,headp_(0), tailp_(0), state_(-1) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:()
PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>::PolyLine(const PolyLine<Unit>& pline) : ptdata_(pline.ptdata_),$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(const PolyLine<Unit>& pline)
PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>::PolyLine(orientation_2d orient, Unit coord, Side side) :$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(orientation_2d orient, Unit coord, Side side)
PolyLine45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45() : points() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:()
PolyLine45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45(const PolyLine45& that) : points(that.points) {}$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:(const PolyLine45& that)
PolyLine45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class PolyLine45 {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
PolyLine45HoleData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45HoleData() : p_(0) {}$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:()
PolyLine45HoleData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45HoleData(ActiveTail45* p) : p_(p) {}$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:(ActiveTail45* p)
PolyLine45HoleData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  class PolyLine45HoleData {$/;"	c	namespace:boost::polygon
PolyLine45PolygonData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45PolygonData() : p_(0) {}$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:()
PolyLine45PolygonData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45PolygonData(ActiveTail45* p) : p_(p) {}$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:(ActiveTail45* p)
PolyLine45PolygonData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  class PolyLine45PolygonData {$/;"	c	namespace:boost::polygon
PolyLineArbitraryByConcept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct PolyLineArbitraryByConcept {};$/;"	s	namespace:boost::polygon
PolyLineArbitraryByConcept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct PolyLineArbitraryByConcept<T, polygon_concept> { typedef poly_line_arbitrary_hole_data<T> type; };$/;"	s	namespace:boost::polygon
PolyLineArbitraryByConcept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct PolyLineArbitraryByConcept<T, polygon_with_holes_concept> { typedef poly_line_arbitrary_polygon_data<T> type; };$/;"	s	namespace:boost::polygon
PolyLineByConcept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept {};$/;"	s	namespace:boost::polygon
PolyLineByConcept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_45_concept> { typedef PolyLine45HoleData<T> type; };$/;"	s	namespace:boost::polygon
PolyLineByConcept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_45_with_holes_concept> { typedef PolyLine45PolygonData<T> type; };$/;"	s	namespace:boost::polygon
PolyLineByConcept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_concept> { typedef PolyLine45HoleData<T> type; };$/;"	s	namespace:boost::polygon
PolyLineByConcept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_with_holes_concept> { typedef PolyLine45PolygonData<T> type; };$/;"	s	namespace:boost::polygon
PolyLineHoleData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLineHoleData() : p_(0) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:()
PolyLineHoleData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLineHoleData(ActiveTail<Unit>* p) : p_(p) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:(ActiveTail<Unit>* p)
PolyLineHoleData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  class PolyLineHoleData {$/;"	c	namespace:boost::polygon::polygon_formation
PolyLinePolygonData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename PolyLineType<orientT, Unit, polygon_concept_type>::type PolyLinePolygonData;$/;"	t	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:private
PolyLinePolygonWithHolesData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLinePolygonWithHolesData() : p_(0) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:()
PolyLinePolygonWithHolesData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLinePolygonWithHolesData(ActiveTail<Unit>* p) : p_(p) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:(ActiveTail<Unit>* p)
PolyLinePolygonWithHolesData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  class PolyLinePolygonWithHolesData {$/;"	c	namespace:boost::polygon::polygon_formation
PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType { };$/;"	s	namespace:boost::polygon::polygon_formation
PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_45_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_45_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_90_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_90_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
Polygon45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef polygon_45_data<Unit> Polygon45;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
Polygon45Formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Formation() : scanData_(), x_((std::numeric_limits<Unit>::min)()), justBefore_(false), fractureHoles_(0) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:public	signature:()
Polygon45Formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Formation(bool fractureHoles) : scanData_(), x_((std::numeric_limits<Unit>::min)()), justBefore_(false), fractureHoles_(fractureHoles) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:public	signature:(bool fractureHoles)
Polygon45Formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Formation(const Polygon45Formation& that) :$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:public	signature:(const Polygon45Formation& that)
Polygon45Formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class Polygon45Formation {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
Polygon45FormationData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef std::map<Vertex45, ActiveTail45*, lessVertex45> Polygon45FormationData;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
Polygon45FormationData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef std::map<Vertex45, ActiveTail45*, lessVertex45> Polygon45FormationData;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
Polygon45Tiling	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Tiling() : scanData_(), x_((std::numeric_limits<Unit>::min)()), justBefore_(false) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:public	signature:()
Polygon45Tiling	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Tiling(const Polygon45Tiling& that) :$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:public	signature:(const Polygon45Tiling& that)
Polygon45Tiling	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class Polygon45Tiling {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
Polygon45VertexData	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef std::vector<Vertex45Compact> Polygon45VertexData;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
Polygon45WithHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef polygon_45_with_holes_data<Unit> Polygon45WithHoles;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
RECTANGLE_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    RECTANGLE_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
REVERSE	/usr/include/boost/polygon/isotropy.hpp	/^                           REVERSE = 0, FORWARD = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
RIGHT	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const Side RIGHT = true;$/;"	m	namespace:boost::polygon::polygon_formation
RIGHT	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      RIGHT = -1,$/;"	e	enum:boost::polygon::detail::voronoi_predicates::orientation_test::Orientation
RIGHT	/usr/include/boost/polygon/isotropy.hpp	/^                           LEFT = 0, RIGHT = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
ROTATE_LEFT	/usr/include/boost/polygon/transform.hpp	/^      SE = 5, SOUTH_EAST = 5, ROTATE_LEFT  = 5,$/;"	e	enum:boost::polygon::axis_transformation::ATR
ROTATE_RIGHT	/usr/include/boost/polygon/transform.hpp	/^      NW = 6, NORTH_WEST = 6, ROTATE_RIGHT = 6,$/;"	e	enum:boost::polygon::axis_transformation::ATR
ROUNDING_ERROR	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^    ROUNDING_ERROR = 1$/;"	e	enum:boost::polygon::detail::robust_fpt::__anon3
Rectangle	/usr/include/boost/polygon/detail/max_cover.hpp	/^    typedef rectangle_data<Unit> Rectangle;$/;"	t	struct:boost::polygon::MaxCover	access:public
Result	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  enum Result {$/;"	g	struct:boost::polygon::detail::ulp_comparison	access:public
RoundingOption	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	g	namespace:boost::polygon
SE	/usr/include/boost/polygon/transform.hpp	/^      SE = 5, SOUTH_EAST = 5, ROTATE_LEFT  = 5,$/;"	e	enum:boost::polygon::axis_transformation::ATR
SOLID_TO_RIGHT	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const int VERTICAL_HEAD = 1, HEAD_TO_TAIL = 2, TAIL_TO_TAIL = 4, SOLID_TO_RIGHT = 8;$/;"	m	namespace:boost::polygon::polygon_formation
SOURCE_CATEGORY_BITMASK	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_BITMASK = 0x1F$/;"	e	enum:boost::polygon::SourceCategory
SOURCE_CATEGORY_GEOMETRY_SHIFT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_GEOMETRY_SHIFT = 0x3,$/;"	e	enum:boost::polygon::SourceCategory
SOURCE_CATEGORY_INITIAL_SEGMENT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_INITIAL_SEGMENT = 0x8,$/;"	e	enum:boost::polygon::SourceCategory
SOURCE_CATEGORY_REVERSE_SEGMENT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_REVERSE_SEGMENT = 0x9,$/;"	e	enum:boost::polygon::SourceCategory
SOURCE_CATEGORY_SEGMENT_END_POINT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_SEGMENT_END_POINT = 0x2,$/;"	e	enum:boost::polygon::SourceCategory
SOURCE_CATEGORY_SEGMENT_START_POINT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_SEGMENT_START_POINT = 0x1,$/;"	e	enum:boost::polygon::SourceCategory
SOURCE_CATEGORY_SINGLE_POINT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_SINGLE_POINT = 0x0,$/;"	e	enum:boost::polygon::SourceCategory
SOUTH	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_2d_enum { WEST = 0, EAST = 1, SOUTH = 2, NORTH = 3 };$/;"	e	enum:boost::polygon::direction_2d_enum
SOUTH_EAST	/usr/include/boost/polygon/transform.hpp	/^      SE = 5, SOUTH_EAST = 5, ROTATE_LEFT  = 5,$/;"	e	enum:boost::polygon::axis_transformation::ATR
SOUTH_WEST	/usr/include/boost/polygon/transform.hpp	/^      SW = 7, SOUTH_WEST = 7, FLIP_SWAP_XY = 7,$/;"	e	enum:boost::polygon::axis_transformation::ATR
SQRT1OVER2	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	e	enum:boost::polygon::RoundingOption
SQRT2	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	e	enum:boost::polygon::RoundingOption
SW	/usr/include/boost/polygon/transform.hpp	/^      SW = 7, SOUTH_WEST = 7, FLIP_SWAP_XY = 7,$/;"	e	enum:boost::polygon::axis_transformation::ATR
SWAP_XY	/usr/include/boost/polygon/transform.hpp	/^      NE = 4, NORTH_EAST = 4, SWAP_XY      = 4,$/;"	e	enum:boost::polygon::axis_transformation::ATR
Scan45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45() : scanData_(), crossQueue_(), crossVector_(),$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:public	signature:()
Scan45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45(const Scan45& that) : scanData_(), crossQueue_(), crossVector_(),$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:public	signature:(const Scan45& that)
Scan45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Scan45 {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
Scan45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    Scan45<Count2, typename boolean_op_45<Unit>::template boolean_op_45_output_functor<0> > Scan45;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
Scan45Count	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef Scan45CountT<CountType> Scan45Count;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
Scan45Count	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    typedef Scan45CountT<Count2> Scan45Count;$/;"	t	struct:boost::polygon::boolean_op_45	access:public
Scan45Count	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename boolean_op_45<Unit>::Scan45Count Scan45Count;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
Scan45CountT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT() : counts() {} \/\/counts[0] = counts[1] = counts[2] = counts[3] = 0; }$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:()
Scan45CountT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT(CountType count) : counts() { counts[0] = counts[1] = counts[2] = counts[3] = count; }$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(CountType count)
Scan45CountT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT(const CountType& count1, const CountType& count2, const CountType& count3,$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const CountType& count1, const CountType& count2, const CountType& count3, const CountType& count4)
Scan45CountT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT(const Scan45CountT& count) : counts() {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count)
Scan45CountT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Scan45CountT {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
Scan45Data	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef std::set<Scan45ElementT<CountType>, lessScan45Element<CountType> > Scan45Data;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
Scan45Element	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    typedef Scan45ElementT<Count2> Scan45Element;$/;"	t	struct:boost::polygon::boolean_op_45	access:public
Scan45ElementT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45ElementT() : x(), y(), rise(), count() {}$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:()
Scan45ElementT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45ElementT(Unit xIn, Unit yIn, int riseIn, CountType countIn = CountType()) :$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:(Unit xIn, Unit yIn, int riseIn, CountType countIn = CountType())
Scan45ElementT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45ElementT(const Scan45ElementT& that) :$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:(const Scan45ElementT& that)
Scan45ElementT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Scan45ElementT {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
Scan45Vector	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef std::vector<Scan45Vertex> Scan45Vector;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
Scan45Vertex	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef std::pair<Point, Scan45Count> Scan45Vertex;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
Scan45Vertex	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef std::pair<Point, Scan45Count> Scan45Vertex;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
ScanData	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    typedef std::map<Unit, T> ScanData;$/;"	t	class:boost::polygon::boolean_op::BooleanOp	access:public
ScanData	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      typedef std::map<Unit, std::set<int> > ScanData;$/;"	t	class:boost::polygon::touch_90_operation::TouchOp	access:public
ScanData	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef std::set<scan_rect_type, less_rectangle_concept<scan_rect_type, scan_rect_type> > ScanData;$/;"	t	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
ScanLineToPolygonItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline ScanLineToPolygonItrs() : tailMap_(), outputPolygons_(), fractureHoles_(false)  {}$/;"	f	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:public	signature:()
ScanLineToPolygonItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline ScanLineToPolygonItrs(bool fractureHoles) : tailMap_(), outputPolygons_(), fractureHoles_(fractureHoles) {}$/;"	f	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:public	signature:(bool fractureHoles)
ScanLineToPolygonItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  class ScanLineToPolygonItrs {$/;"	c	namespace:boost::polygon::polygon_formation
ScanLineToRects	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    inline ScanLineToRects() : scanData_(), haveCurrentRect_(), currentRect_(), orient_(), currentCoordinate_() {}$/;"	f	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public	signature:()
ScanLineToRects	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    inline ScanLineToRects(orientation_2d orient, rectangle_type model) :$/;"	f	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public	signature:(orientation_2d orient, rectangle_type model)
ScanLineToRects	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  class ScanLineToRects {$/;"	c	namespace:boost::polygon::rectangle_formation
Side	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  typedef bool Side;$/;"	t	namespace:boost::polygon::polygon_formation
SourceCategory	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^enum SourceCategory {$/;"	g	namespace:boost::polygon
TAIL	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const End TAIL = true;$/;"	m	namespace:boost::polygon::polygon_formation
TAIL_TO_TAIL	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const int VERTICAL_HEAD = 1, HEAD_TO_TAIL = 2, TAIL_TO_TAIL = 4, SOLID_TO_RIGHT = 8;$/;"	m	namespace:boost::polygon::polygon_formation
TouchOp	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchOp () : scanData_(), nextItr_() { nextItr_ = scanData_.end(); }$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:public	signature:()
TouchOp	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchOp (const TouchOp& that) : scanData_(that.scanData_), nextItr_() { nextItr_ = scanData_.begin(); }$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:public	signature:(const TouchOp& that)
TouchOp	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    class TouchOp {$/;"	c	struct:boost::polygon::touch_90_operation	access:public
TouchScanEvent	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchScanEvent() : eventData_() {}$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:()
TouchScanEvent	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchScanEvent(const TouchScanEvent& that) : eventData_(that.eventData_) {}$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(const TouchScanEvent& that)
TouchScanEvent	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchScanEvent(iT begin, iT end) : eventData_() {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(iT begin, iT end)
TouchScanEvent	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    class TouchScanEvent {$/;"	c	struct:boost::polygon::touch_90_operation	access:public
TouchSetData	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    typedef std::vector<Vertex45Compact> TouchSetData;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
TouchSetData	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    typedef std::pair<std::map<Unit, TouchScanEvent>, std::map<Unit, TouchScanEvent> > TouchSetData;$/;"	t	struct:boost::polygon::touch_90_operation	access:public
ULPS	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    ULPS = 64,$/;"	e	enum:boost::polygon::detail::voronoi_predicates::__anon2
ULPS	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    enum { ULPS = 128 };$/;"	e	enum:boost::polygon::voronoi_diagram_traits::__anon5::__anon6
ULPSx2	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    ULPSx2 = 128$/;"	e	enum:boost::polygon::detail::voronoi_predicates::__anon2
UNDEFINED	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      UNDEFINED = 0,$/;"	e	enum:boost::polygon::detail::voronoi_predicates::distance_predicate::kPredicateResult
UNDERSIZE	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	e	enum:boost::polygon::RoundingOption
UNFILLED	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum CornerOption { INTERSECTION = 0, ORTHOGONAL = 1, UNFILLED = 2 };$/;"	e	enum:boost::polygon::CornerOption
UP	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_3d_enum { DOWN = 4, UP = 5 };$/;"	e	enum:boost::polygon::direction_3d_enum
UnaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount() : count_(0) {}$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:()
UnaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount(const UnaryCount& that) : count_(that.count_) {}$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that)
UnaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline explicit UnaryCount(int count) : count_(count) {}$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(int count)
UnaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class UnaryCount {$/;"	c	namespace:boost::polygon::boolean_op
VERTICAL	/usr/include/boost/polygon/isotropy.hpp	/^  enum orientation_2d_enum { HORIZONTAL = 0, VERTICAL = 1 };$/;"	e	enum:boost::polygon::orientation_2d_enum
VERTICAL_HEAD	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const int VERTICAL_HEAD = 1, HEAD_TO_TAIL = 2, TAIL_TO_TAIL = 4, SOLID_TO_RIGHT = 8;$/;"	m	namespace:boost::polygon::polygon_formation
Vertex45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    typedef Vertex45T<int> Vertex45;$/;"	t	struct:boost::polygon::boolean_op_45	access:public
Vertex45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename boolean_op_45<Unit>::Vertex45 Vertex45;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
Vertex45Compact	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Vertex45CompactT<Vertex45Count> Vertex45Compact;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
Vertex45Compact	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^                               typename boolean_op_45<Unit>::template Scan45CountT<CountTouch> > Vertex45Compact;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
Vertex45Compact	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^                               typename boolean_op_45<Unit>::template Scan45CountT<CountMerge> > Vertex45Compact;$/;"	t	struct:boost::polygon::polygon_45_property_merge	access:public
Vertex45Compact	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename polygon_45_formation<Unit>::Vertex45Compact Vertex45Compact;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
Vertex45CompactT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CompactT() : pt(), count() {}$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:()
Vertex45CompactT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CompactT(const Point& point, int riseIn, int countIn) : pt(point), count() {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Point& point, int riseIn, int countIn)
Vertex45CompactT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CompactT(const Vertex45CompactT& vertex) : pt(vertex.pt), count(vertex.count) {}$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex)
Vertex45CompactT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CompactT(const typename boolean_op_45<Unit>::template Vertex45T<ct2>& vertex) : pt(vertex.pt), count() {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const typename boolean_op_45<Unit>::template Vertex45T<ct2>& vertex)
Vertex45CompactT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class Vertex45CompactT {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
Vertex45Count	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Vertex45CountT<int> Vertex45Count;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
Vertex45CountT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT()$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:()
Vertex45CountT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT(const Vertex45& vertex)$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45& vertex)
Vertex45CountT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT(const Vertex45CountT& count)$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count)
Vertex45CountT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT(const ct& count1, const ct& count2, const ct& count3,$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const ct& count1, const ct& count2, const ct& count3, const ct& count4)
Vertex45CountT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class Vertex45CountT {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
Vertex45T	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T() : pt(), rise(), count() {}$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:()
Vertex45T	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T(const Point& point, int riseIn, ct countIn) : pt(point), rise(riseIn), count(countIn) {}$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Point& point, int riseIn, ct countIn)
Vertex45T	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T(const Vertex45T& vertex) : pt(vertex.pt), rise(vertex.rise), count(vertex.count) {}$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex)
Vertex45T	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T(const std::pair<Point, Point>& vertex) : pt(), rise(), count() {}$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const std::pair<Point, Point>& vertex)
Vertex45T	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Vertex45T {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
Vertex45T	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename boolean_op_45<Unit>::template Vertex45T<typename ct::count_type> Vertex45T;$/;"	t	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public
WEST	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_2d_enum { WEST = 0, EAST = 1, SOUTH = 2, NORTH = 3 };$/;"	e	enum:boost::polygon::direction_2d_enum
WEST_NORTH	/usr/include/boost/polygon/transform.hpp	/^      WN = 1, WEST_NORTH = 1, FLIP_X       = 1,$/;"	e	enum:boost::polygon::axis_transformation::ATR
WEST_SOUTH	/usr/include/boost/polygon/transform.hpp	/^      WS = 3, WEST_SOUTH = 3, FLIP_XY      = 3,$/;"	e	enum:boost::polygon::axis_transformation::ATR
WN	/usr/include/boost/polygon/transform.hpp	/^      WN = 1, WEST_NORTH = 1, FLIP_X       = 1,$/;"	e	enum:boost::polygon::axis_transformation::ATR
WS	/usr/include/boost/polygon/transform.hpp	/^      WS = 3, WEST_SOUTH = 3, FLIP_XY      = 3,$/;"	e	enum:boost::polygon::axis_transformation::ATR
_build	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void _build() {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:()
_insert_new_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  std::pair<void*, void*> _insert_new_edge($/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:( const detail::site_event<CT1>& site1, const detail::site_event<CT1>& site3, const detail::circle_event<CT2>& circle, void* data12, void* data23)
_insert_new_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  std::pair<void*, void*> _insert_new_edge($/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:( const detail::site_event<CT>& site1, const detail::site_event<CT>& site2)
_process_single_site	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void _process_single_site(const detail::site_event<CT>& site) {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:(const detail::site_event<CT>& site)
_reserve	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void _reserve(int num_sites) {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:(int num_sites)
abuts	/usr/include/boost/polygon/interval_concept.hpp	/^>::type abuts($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2)
abuts	/usr/include/boost/polygon/interval_concept.hpp	/^>::type abuts($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2, direction_1d dir)
abuts	/usr/include/boost/polygon/rectangle_concept.hpp	/^  abuts(const rectangle_type_1& rectangle, const rectangle_type_2& b) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type_1& rectangle, const rectangle_type_2& b)
abuts	/usr/include/boost/polygon/rectangle_concept.hpp	/^  abuts(const rectangle_type_1& rectangle, const rectangle_type_2& b,$/;"	f	namespace:boost::polygon	signature:(const rectangle_type_1& rectangle, const rectangle_type_2& b, direction_2d dir)
abuts	/usr/include/boost/polygon/rectangle_concept.hpp	/^  abuts(const rectangle_type_1& rectangle, const rectangle_type_2& b,$/;"	f	namespace:boost::polygon	signature:(const rectangle_type_1& rectangle, const rectangle_type_2& b, orientation_2d orient)
abuts	/usr/include/boost/polygon/segment_concept.hpp	/^bool>::type abuts(const Segment1& segment1, const Segment2& segment2) {$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2)
abuts	/usr/include/boost/polygon/segment_concept.hpp	/^bool>::type abuts(const Segment1& segment1,$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2, direction_1d dir)
activate_circle_event	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void activate_circle_event(const site_event_type& site1,$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(const site_event_type& site1, const site_event_type& site2, const site_event_type& site3, beach_line_iterator bisector_node)
active	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool active() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
active	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::active() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary() : tailp_(), otherTailp_(), holesList_(), head_() {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:()
active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary(Point point, active_tail_arbitrary* otherTailp, bool head = true) :$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(Point point, active_tail_arbitrary* otherTailp, bool head = true)
active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary(active_tail_arbitrary* otherTailp) :$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(active_tail_arbitrary* otherTailp)
active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary(const active_tail_arbitrary& that) :$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(const active_tail_arbitrary& that)
active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary(const vertex_half_edge& vertex, active_tail_arbitrary* otherTailp = 0) : tailp_(), otherTailp_(), holesList_(), head_() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(const vertex_half_edge& vertex, active_tail_arbitrary* otherTailp = 0)
active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class active_tail_arbitrary {$/;"	c	class:boost::polygon::polygon_arbitrary_formation	access:public
active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::active_tail_arbitrary active_tail_arbitrary;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:private
active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::active_tail_arbitrary active_tail_arbitrary;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:private
active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::active_tail_arbitrary active_tail_arbitrary;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
add	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline void add(Node* child) { children_.push_back(child); }$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:(Node* child)
add	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void add(const extended_int& e1, const extended_int& e2) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& e1, const extended_int& e2)
add	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void add(const uint32* c1, std::size_t sz1,$/;"	f	class:boost::polygon::detail::extended_int	access:private	signature:(const uint32* c1, std::size_t sz1, const uint32* c2, std::size_t sz2)
addHole	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45* addHole(ActiveTail45* hole) {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(ActiveTail45* hole)
addHole	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary* addHole(active_tail_arbitrary* hole) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(active_tail_arbitrary* hole)
addHole	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail* addHole(ActiveTail* hole, bool fractureHoles);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(ActiveTail* hole, bool fractureHoles)
addHole	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>* ActiveTail<Unit>::addHole(ActiveTail<Unit>* hole, bool fractureHoles) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(ActiveTail<Unit>* hole, bool fractureHoles)
addPath	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline void addPath(const Interval& ivl) {$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:(const Interval& ivl)
advanceScan	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline void advanceScan() { nextItr_ = scanData_.begin(); }$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:()
advanceScan	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void advanceScan() { nextItr_ = scanData_.begin(); }$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:public	signature:()
advance_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline void advance_(cT& output) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(cT& output)
anisotropic_scale_factor	/usr/include/boost/polygon/transform.hpp	/^  anisotropic_scale_factor() {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:()
anisotropic_scale_factor	/usr/include/boost/polygon/transform.hpp	/^  anisotropic_scale_factor(scale_factor_type xscale,$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(scale_factor_type xscale, scale_factor_type yscale)
anisotropic_scale_factor	/usr/include/boost/polygon/transform.hpp	/^class anisotropic_scale_factor {$/;"	c	namespace:boost::polygon
applyAdaptiveBoolean_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void applyAdaptiveBoolean_(const polygon_45_set_data& rvalue) const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& rvalue) const
applyAdaptiveBoolean_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void applyAdaptiveBoolean_(polygon_45_set_data& result, const polygon_45_set_data& rvalue) const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(polygon_45_set_data& result, const polygon_45_set_data& rvalue) const
applyAdaptiveBoolean_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::applyAdaptiveBoolean_(const polygon_45_set_data<Unit>& rvalue) const {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& rvalue) const
applyAdaptiveBoolean_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::applyAdaptiveBoolean_(polygon_45_set_data<Unit>& result,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(polygon_45_set_data<Unit>& result, const polygon_45_set_data<Unit>& rvalue) const
applyAdaptiveUnary_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void applyAdaptiveUnary_() const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
applyAdaptiveUnary_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::applyAdaptiveUnary_() const {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:() const
applyBoolean45OpOnVectors	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  bool applyBoolean45OpOnVectors(std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& result_data,$/;"	f	namespace:boost::polygon	signature:(std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& result_data, std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& lvalue_data, std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& rvalue_data )
applyBooleanBinaryOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline void applyBooleanBinaryOp(std::vector<std::pair<Unit, std::pair<Unit, int> > >& inputOutput,$/;"	f	namespace:boost::polygon::boolean_op	signature:(std::vector<std::pair<Unit, std::pair<Unit, int> > >& inputOutput, const std::vector<std::pair<Unit, std::pair<Unit, int> > >& input2, T defaultCount)
applyBooleanBinaryOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline void applyBooleanBinaryOp(std::vector<std::pair<Unit, std::pair<Unit, int> > >& output,$/;"	f	namespace:boost::polygon::boolean_op	signature:(std::vector<std::pair<Unit, std::pair<Unit, int> > >& output, iterator_type_1 itr1, iterator_type_1 itr1_end, iterator_type_2 itr2, iterator_type_2 itr2_end, T defaultCount)
applyBooleanBinaryOp	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void applyBooleanBinaryOp(iterator_type_1 itr1, iterator_type_1 itr1_end,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(iterator_type_1 itr1, iterator_type_1 itr1_end, iterator_type_2 itr2, iterator_type_2 itr2_end, T2 defaultCount)
applyBooleanOr	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    static inline void applyBooleanOr(std::vector<std::pair<Unit, std::pair<Unit, int> > >& input) {$/;"	f	struct:boost::polygon::boolean_op::default_arg_workaround	access:public	signature:(std::vector<std::pair<Unit, std::pair<Unit, int> > >& input)
applyLogic	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static bool applyLogic(Count1 count) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(Count1 count)
applyLogic	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static bool applyLogic(Count2 count) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(Count2 count)
applyLogic	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static int applyLogic(CountType count1, CountType count2){$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(CountType count1, CountType count2)
applyUnary45OpOnVectors	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  bool applyUnary45OpOnVectors(std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& result_data,$/;"	f	namespace:boost::polygon	signature:(std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& result_data, std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& lvalue_data )
applyUnaryXOr	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline void applyUnaryXOr(std::vector<std::pair<Unit, std::pair<Unit, int> > >& input) {$/;"	f	namespace:boost::polygon::boolean_op	signature:(std::vector<std::pair<Unit, std::pair<Unit, int> > >& input)
arbitrary_boolean_op	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_boolean_op() : pmd(), evalAtXforYPack_() {}$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:public	signature:()
arbitrary_boolean_op	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_boolean_op(const arbitrary_boolean_op& pm) : pmd(pm.pmd), evalAtXforYPack_(pm.evalAtXforYPack_) {}$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:public	signature:(const arbitrary_boolean_op& pm)
arbitrary_boolean_op	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class arbitrary_boolean_op : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
arbitrary_connectivity_extraction	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_connectivity_extraction$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:(const arbitrary_connectivity_extraction& pm)
arbitrary_connectivity_extraction	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_connectivity_extraction() : pmd(), evalAtXforYPack_() {}$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:()
arbitrary_connectivity_extraction	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class arbitrary_connectivity_extraction : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
are_not_both_rectangle_concept	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct are_not_both_rectangle_concept { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
are_not_both_rectangle_concept	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct are_not_both_rectangle_concept<rectangle_concept, rectangle_concept> { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
area	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  area(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
area	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  area(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
area	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  area(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
area	/usr/include/boost/polygon/polygon_traits.hpp	/^  area(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
area	/usr/include/boost/polygon/rectangle_concept.hpp	/^  area(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
area_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename coordinate_traits<Unit>::area_type area_type;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
area_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename coordinate_traits<Unit>::area_type area_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
area_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename coordinate_traits<Unit>::coordinate_distance area_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
area_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename coordinate_traits<Unit>::area_type area_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
area_type	/usr/include/boost/polygon/polygon_45_data.hpp	/^  typedef typename coordinate_traits<T>::coordinate_distance area_type;$/;"	t	class:boost::polygon::polygon_45_data	access:public
area_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef typename coordinate_traits<T>::coordinate_distance area_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
area_type	/usr/include/boost/polygon/polygon_90_data.hpp	/^  typedef typename coordinate_traits<T>::area_type area_type;$/;"	t	class:boost::polygon::polygon_90_data	access:public
area_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef typename coordinate_traits<T>::area_type area_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
area_type	/usr/include/boost/polygon/polygon_data.hpp	/^  typedef typename coordinate_traits<T>::coordinate_distance area_type;$/;"	t	class:boost::polygon::polygon_data	access:public
area_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef typename coordinate_traits<T>::coordinate_distance area_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
area_type_by_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct area_type_by_domain { typedef typename coordinate_traits<coordinate_type>::area_type type; };$/;"	s	namespace:boost::polygon
area_type_by_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct area_type_by_domain<manhattan_domain, coordinate_type> {$/;"	s	namespace:boost::polygon
assertRedundant	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline int assertRedundant(T& t) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(T& t)
assign	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& assign(IntervalType1& lvalue, const IntervalType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(IntervalType1& lvalue, const IntervalType2& rvalue)
assign	/usr/include/boost/polygon/point_concept.hpp	/^PointType1>::type& assign(PointType1& lvalue, const PointType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(PointType1& lvalue, const PointType2& rvalue)
assign	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  assign(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
assign	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  assign(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
assign	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  assign(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
assign	/usr/include/boost/polygon/polygon_traits.hpp	/^  assign(T1& lvalue, const T2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(T1& lvalue, const T2& rvalue)
assign	/usr/include/boost/polygon/polygon_traits.hpp	/^  assign(T1& polygon, const T2& rect) {$/;"	f	namespace:boost::polygon	signature:(T1& polygon, const T2& rect)
assign	/usr/include/boost/polygon/rectangle_concept.hpp	/^  assign(rectangle_type_1& lvalue, const rectangle_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& lvalue, const rectangle_type_2& rvalue)
assign	/usr/include/boost/polygon/segment_concept.hpp	/^Segment1>::type& assign(Segment1& segment1, const Segment2& segment2) {$/;"	f	namespace:boost::polygon	signature:(Segment1& segment1, const Segment2& segment2)
atr_	/usr/include/boost/polygon/transform.hpp	/^  ATR atr_;$/;"	m	class:boost::polygon::axis_transformation	access:private
atr_	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation atr_;$/;"	m	class:boost::polygon::transformation	access:private
axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation() : atr_(NULL_TRANSFORM) {}$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:()
axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation(const axis_transformation& atr) : atr_(atr.atr_) {}$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& atr)
axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit axis_transformation(ATR atr) : atr_(atr) {}$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(ATR atr)
axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit axis_transformation(const direction_2d& dir) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const direction_2d& dir)
axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit axis_transformation(const orientation_2d& orient) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const orientation_2d& orient)
axis_transformation	/usr/include/boost/polygon/transform.hpp	/^class axis_transformation {$/;"	c	namespace:boost::polygon
backward	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_1d& backward() { val_ ^= 1; return *this; }$/;"	f	class:boost::polygon::direction_1d	access:public	signature:()
backward	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d backward() const {$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
backward	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d backward() const {$/;"	f	class:boost::polygon::direction_3d	access:public	signature:() const
beach_line_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  beach_line_type beach_line_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
beach_line_iterator	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef typename beach_line_type::iterator beach_line_iterator;$/;"	t	class:boost::polygon::voronoi_builder	access:private
beach_line_node_data	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  explicit beach_line_node_data(Edge* new_edge) :$/;"	f	class:boost::polygon::detail::beach_line_node_data	access:public	signature:(Edge* new_edge)
beach_line_node_data	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class beach_line_node_data {$/;"	c	namespace:boost::polygon::detail
beach_line_node_key	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  beach_line_node_key(const site_type &left_site,$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:(const site_type &left_site, const site_type &right_site)
beach_line_node_key	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  explicit beach_line_node_key(const site_type &new_site) :$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:(const site_type &new_site)
beach_line_node_key	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class beach_line_node_key {$/;"	c	namespace:boost::polygon::detail
beach_line_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef std::map< key_type, value_type, node_comparer_type > beach_line_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
begin	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline iterator begin() { return children_.begin(); }$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:()
begin	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iterator begin() const { return points.begin(); }$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iterator begin() const { return p_->getTail()->begin(); }$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iterator begin() const { return p_->getTail()->begin(); }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    iterator_type begin() const { return value().begin(); }$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static inline iterator_type begin(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set);$/;"	p	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
begin	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  begin(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set) {$/;"	f	class:boost::polygon::polygon_45_set_traits	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
begin	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    iterator_type begin() const { return value().begin(); }$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    static inline iterator_type begin(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
begin	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  begin(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_traits	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
begin	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline iterator begin() const {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator begin() const { return points.begin(); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator begin() const { return p_->getTail()->begin(); }$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator_type begin() const { return p_->getTail()->begin(); }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iterator_type begin() const { return iterator_type(begin_compact(), end_compact()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iterator_type begin() const { return iterator_type(begin_compact(), end_compact()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    iterator begin(bool isHole, orientation_2d orient) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(bool isHole, orientation_2d orient) const
begin	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline typename ActiveTail<Unit>::iterator ActiveTail<Unit>::begin(bool isHole, orientation_2d orient) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(bool isHole, orientation_2d orient) const
begin	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    iterator_type begin() const { return value().begin(); }$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
begin	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    static inline iterator_type begin(const polygon_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
begin	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  begin(const polygon_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_set_traits	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
begin	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline iterator_type begin() const { return coords_.begin(); }$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:() const
begin	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline iterator_type begin() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
begin	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static inline iterator_type begin(const view_of<polygon_90_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const view_of<polygon_90_set_concept, T>& polygon_set)
begin	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static type begin(const view_of<polygon_90_set_concept, T>& t) { return t.begin(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const view_of<polygon_90_set_concept, T>& t)
begin	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
begin	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline iterator_type begin(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const T& polygon_set)
begin	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline iterator_type begin(const polygon_45_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_data<T>& polygon_set)
begin	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline const iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
begin	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline iterator_type begin() const { return iterator_type(coords_.begin(), coords_.end()); }$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:() const
begin	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
begin	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline iterator_type begin(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const T& polygon_set)
begin	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline iterator_type begin(const polygon_90_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_data<T>& polygon_set)
begin	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type begin(const T& t) { return &t; }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const T& t)
begin	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type begin(const T& t) { return indirect_type::begin(t); }$/;"	f	struct:boost::polygon::get_iterator_type	access:public	signature:(const T& t)
begin	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type begin(const T& t) { return t.begin(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const T& t)
begin	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
begin	/usr/include/boost/polygon/polygon_data.hpp	/^  inline iterator_type begin() const { return coords_.begin(); }$/;"	f	class:boost::polygon::polygon_data	access:public	signature:() const
begin	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline iterator_type begin() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
begin	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static inline iterator_type begin(const view_of<polygon_45_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const view_of<polygon_45_set_concept, T>& polygon_set)
begin	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static type begin(const view_of<polygon_45_set_concept, T>& t) { return t.begin(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const view_of<polygon_45_set_concept, T>& t)
begin	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
begin	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline iterator_type begin(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const T& polygon_set)
begin	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline iterator_type begin(const polygon_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_data<T>& polygon_set)
begin	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline iterator_type begin() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
begin	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline const iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
beginHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    iteratorHoles beginHoles() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
beginHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline typename ActiveTail<Unit>::iteratorHoles ActiveTail<Unit>::beginHoles() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
begin_45_set_data	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  begin_45_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
begin_90_set_data	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  begin_90_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
begin_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline compact_iterator_type begin_compact() const { return p_->begin(false, (orientT ? VERTICAL : HORIZONTAL)); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
begin_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline compact_iterator_type begin_compact() const { return p_->begin(true, (orientT ? VERTICAL : HORIZONTAL)); }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:() const
begin_compact	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline compact_iterator_type begin_compact() const { return coords_.begin(); }$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:() const
begin_compact	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const compact_iterator_type begin_compact() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
begin_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline compact_iterator_type begin_compact() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
begin_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline compact_iterator_type begin_compact(const T& t) {$/;"	f	struct:boost::polygon::polygon_90_traits	access:public	signature:(const T& t)
begin_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^  begin_compact(const T& polygon,$/;"	f	namespace:boost::polygon	signature:(const T& polygon, typename enable_if< typename gtl_and <typename is_polygon_with_holes_type<T>::type, typename gtl_same_type<typename geometry_domain<typename geometry_concept<T>::type>::type, manhattan_domain>::type>::type>::type * = 0 )
begin_holes	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iteratorHoles begin_holes() const { return iteratorHoles(p_->getHoles().begin()); }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
begin_holes	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator_holes_type begin_holes() const { return iterator_holes_type(p_->getHoles().begin()); }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
begin_holes	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iteratorHoles begin_holes() const { return iteratorHoles(p_->beginHoles()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
begin_holes	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline const iterator_holes_type begin_holes() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
begin_holes	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const iterator_holes_type begin_holes() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
begin_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline iterator_holes_type begin_holes() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
begin_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_holes_type begin_holes(const T& t) {$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const T& t)
begin_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_holes_type begin_holes(const hole_type& t) { return &t; }$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const hole_type& t)
begin_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^  begin_holes(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
begin_holes	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline const iterator_holes_type begin_holes() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
begin_points	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_type begin_points(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_90	access:public	signature:(const T& t)
begin_points	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_type begin_points(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_general	access:public	signature:(const T& t)
begin_points	/usr/include/boost/polygon/polygon_traits.hpp	/^  begin_points(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
begin_polygon_set_data	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  begin_polygon_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
belongs	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^inline bool belongs($/;"	f	namespace:boost::polygon	signature:( SourceCategory source_category, GeometryCategory geometry_category)
between	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool between(Point pt, Point pt1, Point pt2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Point pt, Point pt1, Point pt2)
between	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline bool between(Point pt, Point pt1, Point pt2) {$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(Point pt, Point pt1, Point pt2)
big_coord	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename coordinate_traits<coordinate_type>::manhattan_area_type big_coord;$/;"	t	class:boost::polygon::connectivity_extraction_45	access:private
big_coord	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename coordinate_traits<coordinate_type>::manhattan_area_type big_coord;$/;"	t	class:boost::polygon::property_merge_45	access:private
big_int_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef extended_int<64> big_int_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
big_int_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::big_int_type big_int_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
bloat	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& bloat($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, direction_1d dir, typename interval_coordinate_type<IntervalType>::type bloating)
bloat	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& bloat($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type bloating)
bloat	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
bloat	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set, direction_2d dir,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, direction_2d dir, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
bloat	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
bloat	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type low_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type high_bloating)
bloat	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
bloat	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type west_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type east_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type south_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type north_bloating)
bloat	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    bloat(direction_2d dir, typename coordinate_traits<coordinate_type>::unsigned_area_type shrinking) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(direction_2d dir, typename coordinate_traits<coordinate_type>::unsigned_area_type shrinking)
bloat	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    bloat(typename coordinate_traits<coordinate_type>::unsigned_area_type west_bloating,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type west_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type east_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type south_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type north_bloating)
bloat	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
bloat	/usr/include/boost/polygon/polygon_set_data.hpp	/^    bloat(typename coordinate_traits<coordinate_type>::unsigned_area_type distance) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type distance)
bloat	/usr/include/boost/polygon/rectangle_concept.hpp	/^  bloat(rectangle_type& rectangle, direction_2d dir,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, direction_2d dir, typename rectangle_coordinate_type<rectangle_type>::type bloating)
bloat	/usr/include/boost/polygon/rectangle_concept.hpp	/^  bloat(rectangle_type& rectangle, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, orientation_2d orient, typename rectangle_coordinate_type<rectangle_type>::type bloating)
bloat	/usr/include/boost/polygon/rectangle_concept.hpp	/^  bloat(rectangle_type& rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type bloating)
bloat2	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    bloat2(typename coordinate_traits<coordinate_type>::unsigned_area_type west_bloating,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type west_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type east_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type south_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type north_bloating)
bloatVertexInDirWithOptions	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline point_data<Unit> bloatVertexInDirWithOptions(const point_data<Unit>& point, unsigned int dir,$/;"	f	namespace:boost::polygon	signature:(const point_data<Unit>& point, unsigned int dir, Unit bloating, RoundingOption rounding)
bloatVertexInDirWithSQRT1OVER2	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline point_data<Unit> bloatVertexInDirWithSQRT1OVER2(int edge1, int normal1, const point_data<Unit>& second, Unit bloating,$/;"	f	namespace:boost::polygon	signature:(int edge1, int normal1, const point_data<Unit>& second, Unit bloating, bool first)
boolean_op	/usr/include/boost/polygon/detail/boolean_op.hpp	/^namespace boolean_op {$/;"	n	namespace:boost::polygon
boolean_op_45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^  struct boolean_op_45 {$/;"	s	namespace:boost::polygon
boolean_op_45_output_functor	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    struct boolean_op_45_output_functor {$/;"	s	struct:boost::polygon::boolean_op_45	access:public
boolean_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      boolean_output_functor() {}$/;"	f	class:boost::polygon::arbitrary_boolean_op::boolean_output_functor	access:public	signature:()
boolean_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class boolean_output_functor {$/;"	c	class:boost::polygon::arbitrary_boolean_op	access:private
boost	/usr/include/boost/polygon/detail/boolean_op.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/max_cover.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/minkowski.hpp	/^namespace boost { namespace polygon { namespace detail {$/;"	n
boost	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/polygon_simplify.hpp	/^namespace boost { namespace polygon { namespace detail { namespace simplify_detail {$/;"	n
boost	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/detail/property_merge.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/gmp_override.hpp	/^namespace boost { namespace polygon {$/;"	n
boost	/usr/include/boost/polygon/interval_concept.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/interval_data.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/interval_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/isotropy.hpp	/^  namespace boost {$/;"	n
boost	/usr/include/boost/polygon/isotropy.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/point_concept.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/point_data.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/point_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/polygon_45_data.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_90_data.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_data.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_set_concept.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_set_data.hpp	/^namespace boost { namespace polygon {$/;"	n
boost	/usr/include/boost/polygon/polygon_set_traits.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_traits.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/rectangle_concept.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/rectangle_data.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/rectangle_traits.hpp	/^namespace boost { namespace polygon{$/;"	n
boost	/usr/include/boost/polygon/segment_concept.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/segment_data.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/segment_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/segment_utils.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/transform.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/voronoi.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/voronoi_builder.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/voronoi_diagram.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^namespace boost {$/;"	n
boost::disable_if	/usr/include/boost/polygon/isotropy.hpp	/^    struct disable_if : public disable_if_c<Cond::value, T> {};$/;"	s	namespace:boost	inherits:disable_if_c
boost::disable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct disable_if_c {$/;"	s	namespace:boost
boost::disable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct disable_if_c<true, T> {};$/;"	s	namespace:boost
boost::disable_if_c::type	/usr/include/boost/polygon/isotropy.hpp	/^      typedef T type;$/;"	t	struct:boost::disable_if_c	access:public
boost::enable_if	/usr/include/boost/polygon/isotropy.hpp	/^    struct enable_if : public enable_if_c<Cond::value, T> {};$/;"	s	namespace:boost	inherits:enable_if_c
boost::enable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct enable_if_c {$/;"	s	namespace:boost
boost::enable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct enable_if_c<false, T> {};$/;"	s	namespace:boost
boost::enable_if_c::type	/usr/include/boost/polygon/isotropy.hpp	/^      typedef T type;$/;"	t	struct:boost::enable_if_c	access:public
boost::lazy_disable_if	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_disable_if : public lazy_disable_if_c<Cond::value, T> {};$/;"	s	namespace:boost	inherits:lazy_disable_if_c
boost::lazy_disable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_disable_if_c {$/;"	s	namespace:boost
boost::lazy_disable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_disable_if_c<true, T> {};$/;"	s	namespace:boost
boost::lazy_disable_if_c::type	/usr/include/boost/polygon/isotropy.hpp	/^      typedef typename T::type type;$/;"	t	struct:boost::lazy_disable_if_c	access:public
boost::lazy_enable_if	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_enable_if : public lazy_enable_if_c<Cond::value, T> {};$/;"	s	namespace:boost	inherits:lazy_enable_if_c
boost::lazy_enable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_enable_if_c {$/;"	s	namespace:boost
boost::lazy_enable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_enable_if_c<false, T> {};$/;"	s	namespace:boost
boost::lazy_enable_if_c::type	/usr/include/boost/polygon/isotropy.hpp	/^      typedef typename T::type type;$/;"	t	struct:boost::lazy_enable_if_c	access:public
boost::polygon	/usr/include/boost/polygon/detail/boolean_op.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/max_cover.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/minkowski.hpp	/^namespace boost { namespace polygon { namespace detail {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/polygon_simplify.hpp	/^namespace boost { namespace polygon { namespace detail { namespace simplify_detail {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^  namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/property_merge.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/gmp_override.hpp	/^namespace boost { namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/interval_concept.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/interval_data.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/interval_traits.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/isotropy.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/point_concept.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/point_data.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/point_traits.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_45_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_90_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_set_concept.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_set_data.hpp	/^namespace boost { namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_set_traits.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_traits.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/rectangle_concept.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/rectangle_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/rectangle_traits.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/segment_concept.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/segment_data.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/segment_traits.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/segment_utils.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/transform.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/voronoi.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/voronoi_builder.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/voronoi_diagram.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^namespace polygon {$/;"	n	namespace:boost
boost::polygon::CLOCKWISE	/usr/include/boost/polygon/isotropy.hpp	/^                           CLOCKWISE = 0, COUNTERCLOCKWISE = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
boost::polygon::CLOSEST	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	e	enum:boost::polygon::RoundingOption
boost::polygon::COORDINATE_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    COORDINATE_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::COUNTERCLOCKWISE	/usr/include/boost/polygon/isotropy.hpp	/^                           CLOCKWISE = 0, COUNTERCLOCKWISE = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
boost::polygon::CornerOption	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum CornerOption { INTERSECTION = 0, ORTHOGONAL = 1, UNFILLED = 2 };$/;"	g	namespace:boost::polygon
boost::polygon::DOWN	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_3d_enum { DOWN = 4, UP = 5 };$/;"	e	enum:boost::polygon::direction_3d_enum
boost::polygon::EAST	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_2d_enum { WEST = 0, EAST = 1, SOUTH = 2, NORTH = 3 };$/;"	e	enum:boost::polygon::direction_2d_enum
boost::polygon::FORWARD	/usr/include/boost/polygon/isotropy.hpp	/^                           REVERSE = 0, FORWARD = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
boost::polygon::GEOMETRY_CATEGORY_POINT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  GEOMETRY_CATEGORY_POINT = 0x0,$/;"	e	enum:boost::polygon::GeometryCategory
boost::polygon::GEOMETRY_CATEGORY_SEGMENT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  GEOMETRY_CATEGORY_SEGMENT = 0x1$/;"	e	enum:boost::polygon::GeometryCategory
boost::polygon::GEOMETRY_CONCEPT_ID	/usr/include/boost/polygon/isotropy.hpp	/^  enum GEOMETRY_CONCEPT_ID {$/;"	g	namespace:boost::polygon
boost::polygon::GeometryCategory	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^enum GeometryCategory {$/;"	g	namespace:boost::polygon
boost::polygon::HIGH	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_1d_enum { LOW = 0, HIGH = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
boost::polygon::HORIZONTAL	/usr/include/boost/polygon/isotropy.hpp	/^  enum orientation_2d_enum { HORIZONTAL = 0, VERTICAL = 1 };$/;"	e	enum:boost::polygon::orientation_2d_enum
boost::polygon::INTERSECTION	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum CornerOption { INTERSECTION = 0, ORTHOGONAL = 1, UNFILLED = 2 };$/;"	e	enum:boost::polygon::CornerOption
boost::polygon::INTERVAL_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    INTERVAL_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::LEFT	/usr/include/boost/polygon/isotropy.hpp	/^                           LEFT = 0, RIGHT = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
boost::polygon::LOW	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_1d_enum { LOW = 0, HIGH = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
boost::polygon::MaxCover	/usr/include/boost/polygon/detail/max_cover.hpp	/^  struct MaxCover {$/;"	s	namespace:boost::polygon
boost::polygon::MaxCover::EdgeAssociation	/usr/include/boost/polygon/detail/max_cover.hpp	/^    typedef std::pair<std::pair<Unit, Interval>, Node* > EdgeAssociation;$/;"	t	struct:boost::polygon::MaxCover	access:public
boost::polygon::MaxCover::Interval	/usr/include/boost/polygon/detail/max_cover.hpp	/^    typedef interval_data<Unit> Interval;$/;"	t	struct:boost::polygon::MaxCover	access:public
boost::polygon::MaxCover::Node	/usr/include/boost/polygon/detail/max_cover.hpp	/^    class Node {$/;"	c	struct:boost::polygon::MaxCover	access:public
boost::polygon::MaxCover::Node::Node	/usr/include/boost/polygon/detail/max_cover.hpp	/^      Node() : children_(), tracedPaths_(), rect() {}$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:()
boost::polygon::MaxCover::Node::Node	/usr/include/boost/polygon/detail/max_cover.hpp	/^      Node(const Rectangle rectIn) : children_(), tracedPaths_(), rect(rectIn) {}$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:(const Rectangle rectIn)
boost::polygon::MaxCover::Node::add	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline void add(Node* child) { children_.push_back(child); }$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:(Node* child)
boost::polygon::MaxCover::Node::addPath	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline void addPath(const Interval& ivl) {$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:(const Interval& ivl)
boost::polygon::MaxCover::Node::begin	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline iterator begin() { return children_.begin(); }$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:()
boost::polygon::MaxCover::Node::children_	/usr/include/boost/polygon/detail/max_cover.hpp	/^      std::vector<Node*> children_;$/;"	m	class:boost::polygon::MaxCover::Node	access:private
boost::polygon::MaxCover::Node::end	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline iterator end() { return children_.end(); }$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:()
boost::polygon::MaxCover::Node::iterator	/usr/include/boost/polygon/detail/max_cover.hpp	/^      typedef typename std::vector<Node*>::iterator iterator;$/;"	t	class:boost::polygon::MaxCover::Node	access:public
boost::polygon::MaxCover::Node::rect	/usr/include/boost/polygon/detail/max_cover.hpp	/^      Rectangle rect;$/;"	m	class:boost::polygon::MaxCover::Node	access:public
boost::polygon::MaxCover::Node::tracedPath	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline bool tracedPath(const Interval& ivl) const {$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:(const Interval& ivl) const
boost::polygon::MaxCover::Node::tracedPaths_	/usr/include/boost/polygon/detail/max_cover.hpp	/^      std::set<Interval> tracedPaths_;$/;"	m	class:boost::polygon::MaxCover::Node	access:private
boost::polygon::MaxCover::Rectangle	/usr/include/boost/polygon/detail/max_cover.hpp	/^    typedef rectangle_data<Unit> Rectangle;$/;"	t	struct:boost::polygon::MaxCover	access:public
boost::polygon::MaxCover::computeDag	/usr/include/boost/polygon/detail/max_cover.hpp	/^    static inline void computeDag(iT beginNode, iT endNode, orientation_2d orient,$/;"	f	struct:boost::polygon::MaxCover	access:public	signature:(iT beginNode, iT endNode, orientation_2d orient, std::size_t size)
boost::polygon::MaxCover::getMaxCover	/usr/include/boost/polygon/detail/max_cover.hpp	/^    static inline void getMaxCover(cT& outputContainer, Node* node, orientation_2d orient) {$/;"	f	struct:boost::polygon::MaxCover	access:public	signature:(cT& outputContainer, Node* node, orientation_2d orient)
boost::polygon::MaxCover::getMaxCover	/usr/include/boost/polygon/detail/max_cover.hpp	/^    static inline void getMaxCover(cT& outputContainer, Node* node, orientation_2d orient,$/;"	f	struct:boost::polygon::MaxCover	access:public	signature:(cT& outputContainer, Node* node, orientation_2d orient, Rectangle rect)
boost::polygon::MaxCover::getMaxCover	/usr/include/boost/polygon/detail/max_cover.hpp	/^    static inline void getMaxCover(cT& outputContainer,$/;"	f	struct:boost::polygon::MaxCover	access:public	signature:(cT& outputContainer, const std::vector<Rectangle>& rects, orientation_2d orient)
boost::polygon::MaxCover::lessEdgeAssociation	/usr/include/boost/polygon/detail/max_cover.hpp	/^    class lessEdgeAssociation : public std::binary_function<const EdgeAssociation&, const EdgeAssociation&, bool> {$/;"	c	struct:boost::polygon::MaxCover	inherits:std::binary_function	access:public
boost::polygon::MaxCover::lessEdgeAssociation::lessEdgeAssociation	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline lessEdgeAssociation() {}$/;"	f	class:boost::polygon::MaxCover::lessEdgeAssociation	access:public	signature:()
boost::polygon::MaxCover::lessEdgeAssociation::operator ()	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline bool operator () (const EdgeAssociation& elem1, const EdgeAssociation& elem2) const {$/;"	f	class:boost::polygon::MaxCover::lessEdgeAssociation	access:public	signature:(const EdgeAssociation& elem1, const EdgeAssociation& elem2) const
boost::polygon::MaxCover::stack_element	/usr/include/boost/polygon/detail/max_cover.hpp	/^    struct stack_element {$/;"	s	struct:boost::polygon::MaxCover	access:public
boost::polygon::MaxCover::stack_element::itr	/usr/include/boost/polygon/detail/max_cover.hpp	/^      typename Node::iterator itr;$/;"	m	struct:boost::polygon::MaxCover::stack_element	access:public
boost::polygon::MaxCover::stack_element::node	/usr/include/boost/polygon/detail/max_cover.hpp	/^      Node* node;$/;"	m	struct:boost::polygon::MaxCover::stack_element	access:public
boost::polygon::MaxCover::stack_element::rect	/usr/include/boost/polygon/detail/max_cover.hpp	/^      Rectangle rect;$/;"	m	struct:boost::polygon::MaxCover::stack_element	access:public
boost::polygon::MaxCover::stack_element::stack_element	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline stack_element() :$/;"	f	struct:boost::polygon::MaxCover::stack_element	access:public	signature:()
boost::polygon::MaxCover::stack_element::stack_element	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline stack_element(Node* n,$/;"	f	struct:boost::polygon::MaxCover::stack_element	access:public	signature:(Node* n, const Rectangle& r, typename Node::iterator i)
boost::polygon::NEGATIVE	/usr/include/boost/polygon/isotropy.hpp	/^                           NEGATIVE = 0, POSITIVE = 1 };$/;"	e	enum:boost::polygon::direction_1d_enum
boost::polygon::NORTH	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_2d_enum { WEST = 0, EAST = 1, SOUTH = 2, NORTH = 3 };$/;"	e	enum:boost::polygon::direction_2d_enum
boost::polygon::ORTHOGONAL	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum CornerOption { INTERSECTION = 0, ORTHOGONAL = 1, UNFILLED = 2 };$/;"	e	enum:boost::polygon::CornerOption
boost::polygon::OVERSIZE	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	e	enum:boost::polygon::RoundingOption
boost::polygon::POINT_3D_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POINT_3D_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::POINT_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POINT_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::POLYGON_45_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_45_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::POLYGON_45_SET_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_45_SET_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::POLYGON_45_WITH_HOLES_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_45_WITH_HOLES_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::POLYGON_90_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_90_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::POLYGON_90_SET_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_90_SET_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::POLYGON_90_WITH_HOLES_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_90_WITH_HOLES_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::POLYGON_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::POLYGON_SET_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_SET_CONCEPT$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::POLYGON_WITH_HOLES_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    POLYGON_WITH_HOLES_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::POSITIVE	/usr/include/boost/polygon/isotropy.hpp	/^                           NEGATIVE = 0, POSITIVE = 1 };$/;"	e	enum:boost::polygon::direction_1d_enum
boost::polygon::PROXIMAL	/usr/include/boost/polygon/isotropy.hpp	/^  enum orientation_3d_enum { PROXIMAL = 2 };$/;"	e	enum:boost::polygon::orientation_3d_enum
boost::polygon::PolyLine45HoleData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  class PolyLine45HoleData {$/;"	c	namespace:boost::polygon
boost::polygon::PolyLine45HoleData::ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename polygon_45_formation<Unit>::ActiveTail45 ActiveTail45;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
boost::polygon::PolyLine45HoleData::Point	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
boost::polygon::PolyLine45HoleData::PolyLine45HoleData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45HoleData() : p_(0) {}$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:()
boost::polygon::PolyLine45HoleData::PolyLine45HoleData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45HoleData(ActiveTail45* p) : p_(p) {}$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:(ActiveTail45* p)
boost::polygon::PolyLine45HoleData::area_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename coordinate_traits<Unit>::area_type area_type;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
boost::polygon::PolyLine45HoleData::begin	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iterator begin() const { return p_->getTail()->begin(); }$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:() const
boost::polygon::PolyLine45HoleData::coordinate_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
boost::polygon::PolyLine45HoleData::end	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iterator end() const { return p_->getTail()->end(); }$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:() const
boost::polygon::PolyLine45HoleData::geometry_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef polygon_45_concept geometry_type;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
boost::polygon::PolyLine45HoleData::iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename ActiveTail45::iterator iterator;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
boost::polygon::PolyLine45HoleData::iterator_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef iterator iterator_type;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
boost::polygon::PolyLine45HoleData::p_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    ActiveTail45* p_;$/;"	m	class:boost::polygon::PolyLine45HoleData	access:private
boost::polygon::PolyLine45HoleData::point_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Point point_type;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
boost::polygon::PolyLine45HoleData::set	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45HoleData& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::PolyLine45HoleData::size	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:() const
boost::polygon::PolyLine45PolygonData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  class PolyLine45PolygonData {$/;"	c	namespace:boost::polygon
boost::polygon::PolyLine45PolygonData::ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename polygon_45_formation<Unit>::ActiveTail45 ActiveTail45;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::Point	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::PolyLine45PolygonData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45PolygonData() : p_(0) {}$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:()
boost::polygon::PolyLine45PolygonData::PolyLine45PolygonData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45PolygonData(ActiveTail45* p) : p_(p) {}$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:(ActiveTail45* p)
boost::polygon::PolyLine45PolygonData::area_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename coordinate_traits<Unit>::area_type area_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::begin	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iterator begin() const { return p_->getTail()->begin(); }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
boost::polygon::PolyLine45PolygonData::begin_holes	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iteratorHoles begin_holes() const { return iteratorHoles(p_->getHoles().begin()); }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
boost::polygon::PolyLine45PolygonData::coordinate_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::end	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iterator end() const { return p_->getTail()->end(); }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
boost::polygon::PolyLine45PolygonData::end_holes	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iteratorHoles end_holes() const { return iteratorHoles(p_->getHoles().end()); }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
boost::polygon::PolyLine45PolygonData::geometry_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef polygon_45_with_holes_concept geometry_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::holeType	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef PolyLine45HoleData<Unit> holeType;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::hole_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef holeType hole_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename ActiveTail45::iterator iterator;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::iteratorHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class iteratorHoles {$/;"	c	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::iteratorHoles::difference_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
boost::polygon::PolyLine45PolygonData::iteratorHoles::holeType	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef PolyLine45HoleData<Unit> holeType;$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
boost::polygon::PolyLine45PolygonData::iteratorHoles::iteratorHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iteratorHoles() : itr_() {}$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:()
boost::polygon::PolyLine45PolygonData::iteratorHoles::iteratorHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iteratorHoles(const iteratorHoles& that) : itr_(that.itr_) {}$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(const iteratorHoles& that)
boost::polygon::PolyLine45PolygonData::iteratorHoles::iteratorHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iteratorHoles(typename ActiveTail45::iteratorHoles itr) : itr_(itr) {}$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(typename ActiveTail45::iteratorHoles itr)
boost::polygon::PolyLine45PolygonData::iteratorHoles::iterator_category	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
boost::polygon::PolyLine45PolygonData::iteratorHoles::itr_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typename ActiveTail45::iteratorHoles itr_;$/;"	m	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:private
boost::polygon::PolyLine45PolygonData::iteratorHoles::operator !=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator!=(const iteratorHoles& that) { return itr_ != that.itr_; }$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(const iteratorHoles& that)
boost::polygon::PolyLine45PolygonData::iteratorHoles::operator *	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline holeType operator*() {$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:()
boost::polygon::PolyLine45PolygonData::iteratorHoles::operator ++	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline const iteratorHoles operator++(int) {$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(int)
boost::polygon::PolyLine45PolygonData::iteratorHoles::operator ++	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iteratorHoles& operator++() {$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:()
boost::polygon::PolyLine45PolygonData::iteratorHoles::operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iteratorHoles& operator=(const iteratorHoles& that) {$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(const iteratorHoles& that)
boost::polygon::PolyLine45PolygonData::iteratorHoles::operator ==	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator==(const iteratorHoles& that) { return itr_ == that.itr_; }$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(const iteratorHoles& that)
boost::polygon::PolyLine45PolygonData::iteratorHoles::pointer	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef const value_type* pointer; \/\/immutable$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
boost::polygon::PolyLine45PolygonData::iteratorHoles::reference	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef const value_type& reference; \/\/immutable$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
boost::polygon::PolyLine45PolygonData::iteratorHoles::value_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef holeType value_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
boost::polygon::PolyLine45PolygonData::iterator_holes_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef iteratorHoles iterator_holes_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::iterator_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef iterator iterator_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::p_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    ActiveTail45* p_;$/;"	m	class:boost::polygon::PolyLine45PolygonData	access:private
boost::polygon::PolyLine45PolygonData::point_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Point point_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
boost::polygon::PolyLine45PolygonData::set	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45PolygonData& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::PolyLine45PolygonData::set_holes	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45PolygonData& set_holes(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::PolyLine45PolygonData::size	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
boost::polygon::PolyLine45PolygonData::size_holes	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline std::size_t size_holes() const { return 0; }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
boost::polygon::PolyLine45PolygonData::yield	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline ActiveTail45* yield() { return p_; }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:()
boost::polygon::PolyLineArbitraryByConcept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct PolyLineArbitraryByConcept {};$/;"	s	namespace:boost::polygon
boost::polygon::PolyLineArbitraryByConcept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct PolyLineArbitraryByConcept<T, polygon_concept> { typedef poly_line_arbitrary_hole_data<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::PolyLineArbitraryByConcept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct PolyLineArbitraryByConcept<T, polygon_with_holes_concept> { typedef poly_line_arbitrary_polygon_data<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::PolyLineArbitraryByConcept::type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct PolyLineArbitraryByConcept<T, polygon_concept> { typedef poly_line_arbitrary_hole_data<T> type; };$/;"	t	struct:boost::polygon::PolyLineArbitraryByConcept	access:public
boost::polygon::PolyLineArbitraryByConcept::type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct PolyLineArbitraryByConcept<T, polygon_with_holes_concept> { typedef poly_line_arbitrary_polygon_data<T> type; };$/;"	t	struct:boost::polygon::PolyLineArbitraryByConcept	access:public
boost::polygon::PolyLineByConcept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept {};$/;"	s	namespace:boost::polygon
boost::polygon::PolyLineByConcept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_45_concept> { typedef PolyLine45HoleData<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::PolyLineByConcept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_45_with_holes_concept> { typedef PolyLine45PolygonData<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::PolyLineByConcept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_concept> { typedef PolyLine45HoleData<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::PolyLineByConcept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_with_holes_concept> { typedef PolyLine45PolygonData<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::PolyLineByConcept::type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_45_concept> { typedef PolyLine45HoleData<T> type; };$/;"	t	struct:boost::polygon::PolyLineByConcept	access:public
boost::polygon::PolyLineByConcept::type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_45_with_holes_concept> { typedef PolyLine45PolygonData<T> type; };$/;"	t	struct:boost::polygon::PolyLineByConcept	access:public
boost::polygon::PolyLineByConcept::type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_concept> { typedef PolyLine45HoleData<T> type; };$/;"	t	struct:boost::polygon::PolyLineByConcept	access:public
boost::polygon::PolyLineByConcept::type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_with_holes_concept> { typedef PolyLine45PolygonData<T> type; };$/;"	t	struct:boost::polygon::PolyLineByConcept	access:public
boost::polygon::RECTANGLE_CONCEPT	/usr/include/boost/polygon/isotropy.hpp	/^    RECTANGLE_CONCEPT,$/;"	e	enum:boost::polygon::GEOMETRY_CONCEPT_ID
boost::polygon::REVERSE	/usr/include/boost/polygon/isotropy.hpp	/^                           REVERSE = 0, FORWARD = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
boost::polygon::RIGHT	/usr/include/boost/polygon/isotropy.hpp	/^                           LEFT = 0, RIGHT = 1,$/;"	e	enum:boost::polygon::direction_1d_enum
boost::polygon::RoundingOption	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	g	namespace:boost::polygon
boost::polygon::SOURCE_CATEGORY_BITMASK	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_BITMASK = 0x1F$/;"	e	enum:boost::polygon::SourceCategory
boost::polygon::SOURCE_CATEGORY_GEOMETRY_SHIFT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_GEOMETRY_SHIFT = 0x3,$/;"	e	enum:boost::polygon::SourceCategory
boost::polygon::SOURCE_CATEGORY_INITIAL_SEGMENT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_INITIAL_SEGMENT = 0x8,$/;"	e	enum:boost::polygon::SourceCategory
boost::polygon::SOURCE_CATEGORY_REVERSE_SEGMENT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_REVERSE_SEGMENT = 0x9,$/;"	e	enum:boost::polygon::SourceCategory
boost::polygon::SOURCE_CATEGORY_SEGMENT_END_POINT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_SEGMENT_END_POINT = 0x2,$/;"	e	enum:boost::polygon::SourceCategory
boost::polygon::SOURCE_CATEGORY_SEGMENT_START_POINT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_SEGMENT_START_POINT = 0x1,$/;"	e	enum:boost::polygon::SourceCategory
boost::polygon::SOURCE_CATEGORY_SINGLE_POINT	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^  SOURCE_CATEGORY_SINGLE_POINT = 0x0,$/;"	e	enum:boost::polygon::SourceCategory
boost::polygon::SOUTH	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_2d_enum { WEST = 0, EAST = 1, SOUTH = 2, NORTH = 3 };$/;"	e	enum:boost::polygon::direction_2d_enum
boost::polygon::SQRT1OVER2	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	e	enum:boost::polygon::RoundingOption
boost::polygon::SQRT2	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	e	enum:boost::polygon::RoundingOption
boost::polygon::SourceCategory	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^enum SourceCategory {$/;"	g	namespace:boost::polygon
boost::polygon::UNDERSIZE	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum RoundingOption { CLOSEST = 0, OVERSIZE = 1, UNDERSIZE = 2, SQRT2 = 3, SQRT1OVER2 = 4 };$/;"	e	enum:boost::polygon::RoundingOption
boost::polygon::UNFILLED	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  enum CornerOption { INTERSECTION = 0, ORTHOGONAL = 1, UNFILLED = 2 };$/;"	e	enum:boost::polygon::CornerOption
boost::polygon::UP	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_3d_enum { DOWN = 4, UP = 5 };$/;"	e	enum:boost::polygon::direction_3d_enum
boost::polygon::VERTICAL	/usr/include/boost/polygon/isotropy.hpp	/^  enum orientation_2d_enum { HORIZONTAL = 0, VERTICAL = 1 };$/;"	e	enum:boost::polygon::orientation_2d_enum
boost::polygon::WEST	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_2d_enum { WEST = 0, EAST = 1, SOUTH = 2, NORTH = 3 };$/;"	e	enum:boost::polygon::direction_2d_enum
boost::polygon::abuts	/usr/include/boost/polygon/interval_concept.hpp	/^>::type abuts($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2)
boost::polygon::abuts	/usr/include/boost/polygon/interval_concept.hpp	/^>::type abuts($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2, direction_1d dir)
boost::polygon::abuts	/usr/include/boost/polygon/rectangle_concept.hpp	/^  abuts(const rectangle_type_1& rectangle, const rectangle_type_2& b) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type_1& rectangle, const rectangle_type_2& b)
boost::polygon::abuts	/usr/include/boost/polygon/rectangle_concept.hpp	/^  abuts(const rectangle_type_1& rectangle, const rectangle_type_2& b,$/;"	f	namespace:boost::polygon	signature:(const rectangle_type_1& rectangle, const rectangle_type_2& b, direction_2d dir)
boost::polygon::abuts	/usr/include/boost/polygon/rectangle_concept.hpp	/^  abuts(const rectangle_type_1& rectangle, const rectangle_type_2& b,$/;"	f	namespace:boost::polygon	signature:(const rectangle_type_1& rectangle, const rectangle_type_2& b, orientation_2d orient)
boost::polygon::abuts	/usr/include/boost/polygon/segment_concept.hpp	/^bool>::type abuts(const Segment1& segment1, const Segment2& segment2) {$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2)
boost::polygon::abuts	/usr/include/boost/polygon/segment_concept.hpp	/^bool>::type abuts(const Segment1& segment1,$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2, direction_1d dir)
boost::polygon::anisotropic_scale_factor	/usr/include/boost/polygon/transform.hpp	/^class anisotropic_scale_factor {$/;"	c	namespace:boost::polygon
boost::polygon::anisotropic_scale_factor::anisotropic_scale_factor	/usr/include/boost/polygon/transform.hpp	/^  anisotropic_scale_factor() {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:()
boost::polygon::anisotropic_scale_factor::anisotropic_scale_factor	/usr/include/boost/polygon/transform.hpp	/^  anisotropic_scale_factor(scale_factor_type xscale,$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(scale_factor_type xscale, scale_factor_type yscale)
boost::polygon::anisotropic_scale_factor::get	/usr/include/boost/polygon/transform.hpp	/^  scale_factor_type get(orientation_2d orient) const {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(orientation_2d orient) const
boost::polygon::anisotropic_scale_factor::invert	/usr/include/boost/polygon/transform.hpp	/^  anisotropic_scale_factor& invert() {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:()
boost::polygon::anisotropic_scale_factor::operator +	/usr/include/boost/polygon/transform.hpp	/^  anisotropic_scale_factor operator+(const anisotropic_scale_factor& s) const {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(const anisotropic_scale_factor& s) const
boost::polygon::anisotropic_scale_factor::operator +=	/usr/include/boost/polygon/transform.hpp	/^  const anisotropic_scale_factor& operator+=($/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:( const anisotropic_scale_factor& s)
boost::polygon::anisotropic_scale_factor::scale	/usr/include/boost/polygon/transform.hpp	/^  void scale(coordinate_type& x, coordinate_type& y) const {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(coordinate_type& x, coordinate_type& y) const
boost::polygon::anisotropic_scale_factor::scale_	/usr/include/boost/polygon/transform.hpp	/^  scale_factor_type scale_[2];$/;"	m	class:boost::polygon::anisotropic_scale_factor	access:private
boost::polygon::anisotropic_scale_factor::set	/usr/include/boost/polygon/transform.hpp	/^  void set(orientation_2d orient, scale_factor_type value) {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(orientation_2d orient, scale_factor_type value)
boost::polygon::anisotropic_scale_factor::transform	/usr/include/boost/polygon/transform.hpp	/^  anisotropic_scale_factor& transform(axis_transformation atr) {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(axis_transformation atr)
boost::polygon::anisotropic_scale_factor::x	/usr/include/boost/polygon/transform.hpp	/^  scale_factor_type x() const {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:() const
boost::polygon::anisotropic_scale_factor::x	/usr/include/boost/polygon/transform.hpp	/^  void x(scale_factor_type value) {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(scale_factor_type value)
boost::polygon::anisotropic_scale_factor::y	/usr/include/boost/polygon/transform.hpp	/^  scale_factor_type y() const {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:() const
boost::polygon::anisotropic_scale_factor::y	/usr/include/boost/polygon/transform.hpp	/^  void y(scale_factor_type value) {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(scale_factor_type value)
boost::polygon::applyBoolean45OpOnVectors	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  bool applyBoolean45OpOnVectors(std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& result_data,$/;"	f	namespace:boost::polygon	signature:(std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& result_data, std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& lvalue_data, std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& rvalue_data )
boost::polygon::applyUnary45OpOnVectors	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  bool applyUnary45OpOnVectors(std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& result_data,$/;"	f	namespace:boost::polygon	signature:(std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& result_data, std::vector<typename polygon_45_formation<Unit2>::Vertex45Compact>& lvalue_data )
boost::polygon::arbitrary_boolean_op	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class arbitrary_boolean_op : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
boost::polygon::arbitrary_boolean_op::BOOLEAN_AND	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      BOOLEAN_AND = 1,$/;"	e	enum:boost::polygon::arbitrary_boolean_op::BOOLEAN_OP_TYPE
boost::polygon::arbitrary_boolean_op::BOOLEAN_NOT	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      BOOLEAN_NOT = 3$/;"	e	enum:boost::polygon::arbitrary_boolean_op::BOOLEAN_OP_TYPE
boost::polygon::arbitrary_boolean_op::BOOLEAN_OP_TYPE	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    enum BOOLEAN_OP_TYPE {$/;"	g	class:boost::polygon::arbitrary_boolean_op	access:public
boost::polygon::arbitrary_boolean_op::BOOLEAN_OR	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      BOOLEAN_OR = 0,$/;"	e	enum:boost::polygon::arbitrary_boolean_op::BOOLEAN_OP_TYPE
boost::polygon::arbitrary_boolean_op::BOOLEAN_XOR	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      BOOLEAN_XOR = 2,$/;"	e	enum:boost::polygon::arbitrary_boolean_op::BOOLEAN_OP_TYPE
boost::polygon::arbitrary_boolean_op::Point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::arbitrary_boolean_op	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_boolean_op() : pmd(), evalAtXforYPack_() {}$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:public	signature:()
boost::polygon::arbitrary_boolean_op::arbitrary_boolean_op	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_boolean_op(const arbitrary_boolean_op& pm) : pmd(pm.pmd), evalAtXforYPack_(pm.evalAtXforYPack_) {}$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:public	signature:(const arbitrary_boolean_op& pm)
boost::polygon::arbitrary_boolean_op::boolean_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class boolean_output_functor {$/;"	c	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::boolean_output_functor::boolean_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      boolean_output_functor() {}$/;"	f	class:boost::polygon::arbitrary_boolean_op::boolean_output_functor	access:public	signature:()
boost::polygon::arbitrary_boolean_op::boolean_output_functor::operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      void operator()(result_type& result, const half_edge& edge, const key_type& left, const key_type& right) {$/;"	f	class:boost::polygon::arbitrary_boolean_op::boolean_output_functor	access:public	signature:(result_type& result, const half_edge& edge, const key_type& left, const key_type& right)
boost::polygon::arbitrary_boolean_op::clear	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void clear() {*this = arbitrary_boolean_op();}$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:public	signature:()
boost::polygon::arbitrary_boolean_op::evalAtXforYPack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typename scanline_base<Unit>::evalAtXforYPack evalAtXforYPack_;$/;"	m	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::execute	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void execute(result_type& result, iT1 b1, iT1 e1, iT2 b2, iT2 e2, int op) {$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:public	signature:(result_type& result, iT1 b1, iT1 e1, iT2 b2, iT2 e2, int op)
boost::polygon::arbitrary_boolean_op::half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::insert	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void insert(iT b, iT e, int id) {$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:private	signature:(iT b, iT e, int id)
boost::polygon::arbitrary_boolean_op::less_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_half_edge less_half_edge;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::less_point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_point less_point;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class less_vertex_data {$/;"	c	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::less_vertex_data::less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data() : pack_() {}$/;"	f	class:boost::polygon::arbitrary_boolean_op::less_vertex_data	access:public	signature:()
boost::polygon::arbitrary_boolean_op::less_vertex_data::less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data(typename scanline_base<Unit>::evalAtXforYPack* pack) : pack_(pack) {}$/;"	f	class:boost::polygon::arbitrary_boolean_op::less_vertex_data	access:public	signature:(typename scanline_base<Unit>::evalAtXforYPack* pack)
boost::polygon::arbitrary_boolean_op::less_vertex_data::operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      bool operator()(const vertex_data_type& lvalue, const vertex_data_type& rvalue) const {$/;"	f	class:boost::polygon::arbitrary_boolean_op::less_vertex_data	access:public	signature:(const vertex_data_type& lvalue, const vertex_data_type& rvalue) const
boost::polygon::arbitrary_boolean_op::less_vertex_data::pack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      typename scanline_base<Unit>::evalAtXforYPack* pack_;$/;"	m	class:boost::polygon::arbitrary_boolean_op::less_vertex_data	access:private
boost::polygon::arbitrary_boolean_op::operator =	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_boolean_op& operator=(const arbitrary_boolean_op& pm) { pmd = pm.pmd; return *this; }$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:public	signature:(const arbitrary_boolean_op& pm)
boost::polygon::arbitrary_boolean_op::pmd	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    property_merge_data pmd;$/;"	m	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::property_map	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<std::pair<property_type, int> > property_map;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<vertex_property> property_merge_data;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::property_type	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef int property_type;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::sort_property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void sort_property_merge_data() {$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:private	signature:()
boost::polygon::arbitrary_boolean_op::vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, property_map> vertex_data;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_boolean_op::vertex_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::pair<property_type, int> > vertex_property;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
boost::polygon::arbitrary_connectivity_extraction	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class arbitrary_connectivity_extraction : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
boost::polygon::arbitrary_connectivity_extraction::Point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::arbitrary_connectivity_extraction::arbitrary_connectivity_extraction	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_connectivity_extraction$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:(const arbitrary_connectivity_extraction& pm)
boost::polygon::arbitrary_connectivity_extraction::arbitrary_connectivity_extraction	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_connectivity_extraction() : pmd(), evalAtXforYPack_() {}$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:()
boost::polygon::arbitrary_connectivity_extraction::clear	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void clear() {*this = arbitrary_connectivity_extraction();}$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:()
boost::polygon::arbitrary_connectivity_extraction::connectivity_extraction_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class connectivity_extraction_output_functor {$/;"	c	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::arbitrary_connectivity_extraction::connectivity_extraction_output_functor::connectivity_extraction_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      connectivity_extraction_output_functor() {}$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction::connectivity_extraction_output_functor	access:public	signature:()
boost::polygon::arbitrary_connectivity_extraction::connectivity_extraction_output_functor::operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      void operator()(result_type& result, const half_edge& edge, const key_type& left, const key_type& right) {$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction::connectivity_extraction_output_functor	access:public	signature:(result_type& result, const half_edge& edge, const key_type& left, const key_type& right)
boost::polygon::arbitrary_connectivity_extraction::evalAtXforYPack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typename scanline_base<Unit>::evalAtXforYPack evalAtXforYPack_;$/;"	m	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::arbitrary_connectivity_extraction::execute	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void execute(result_type& result) {$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:(result_type& result)
boost::polygon::arbitrary_connectivity_extraction::half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::arbitrary_connectivity_extraction::less_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_half_edge less_half_edge;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::arbitrary_connectivity_extraction::less_point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_point less_point;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::arbitrary_connectivity_extraction::less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class less_vertex_data {$/;"	c	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::arbitrary_connectivity_extraction::less_vertex_data::less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data() : pack_() {}$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction::less_vertex_data	access:public	signature:()
boost::polygon::arbitrary_connectivity_extraction::less_vertex_data::less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data(typename scanline_base<Unit>::evalAtXforYPack* pack) : pack_(pack) {}$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction::less_vertex_data	access:public	signature:(typename scanline_base<Unit>::evalAtXforYPack* pack)
boost::polygon::arbitrary_connectivity_extraction::less_vertex_data::operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      bool operator()(const vertex_data_type& lvalue, const vertex_data_type& rvalue) const {$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction::less_vertex_data	access:public	signature:(const vertex_data_type& lvalue, const vertex_data_type& rvalue) const
boost::polygon::arbitrary_connectivity_extraction::less_vertex_data::pack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      typename scanline_base<Unit>::evalAtXforYPack* pack_;$/;"	m	class:boost::polygon::arbitrary_connectivity_extraction::less_vertex_data	access:private
boost::polygon::arbitrary_connectivity_extraction::operator =	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_connectivity_extraction& operator=$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:(const arbitrary_connectivity_extraction& pm)
boost::polygon::arbitrary_connectivity_extraction::pmd	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    property_merge_data pmd;$/;"	m	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::arbitrary_connectivity_extraction::populateTouchSetData	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void populateTouchSetData(iT begin, iT end,$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:(iT begin, iT end, property_type property)
boost::polygon::arbitrary_connectivity_extraction::process_previous_x	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static void process_previous_x(cT& output) {$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:private	signature:(cT& output)
boost::polygon::arbitrary_connectivity_extraction::property_map	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<std::pair<property_type, int> > property_map;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::arbitrary_connectivity_extraction::property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<vertex_property> property_merge_data;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::arbitrary_connectivity_extraction::sort_property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void sort_property_merge_data() {$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:private	signature:()
boost::polygon::arbitrary_connectivity_extraction::vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, property_map> vertex_data;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::arbitrary_connectivity_extraction::vertex_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::pair<property_type, int> > vertex_property;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
boost::polygon::are_not_both_rectangle_concept	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct are_not_both_rectangle_concept { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::are_not_both_rectangle_concept	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct are_not_both_rectangle_concept<rectangle_concept, rectangle_concept> { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
boost::polygon::are_not_both_rectangle_concept::type	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct are_not_both_rectangle_concept { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::are_not_both_rectangle_concept	access:public
boost::polygon::are_not_both_rectangle_concept::type	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct are_not_both_rectangle_concept<rectangle_concept, rectangle_concept> { typedef gtl_no type; };$/;"	t	struct:boost::polygon::are_not_both_rectangle_concept	access:public
boost::polygon::area	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  area(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::area	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  area(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::area	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  area(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::area	/usr/include/boost/polygon/polygon_traits.hpp	/^  area(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
boost::polygon::area	/usr/include/boost/polygon/rectangle_concept.hpp	/^  area(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boost::polygon::area_type_by_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct area_type_by_domain { typedef typename coordinate_traits<coordinate_type>::area_type type; };$/;"	s	namespace:boost::polygon
boost::polygon::area_type_by_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct area_type_by_domain<manhattan_domain, coordinate_type> {$/;"	s	namespace:boost::polygon
boost::polygon::area_type_by_domain::type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef typename coordinate_traits<coordinate_type>::manhattan_area_type type; };$/;"	t	struct:boost::polygon::area_type_by_domain	access:public
boost::polygon::area_type_by_domain::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct area_type_by_domain { typedef typename coordinate_traits<coordinate_type>::area_type type; };$/;"	t	struct:boost::polygon::area_type_by_domain	access:public
boost::polygon::assign	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& assign(IntervalType1& lvalue, const IntervalType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(IntervalType1& lvalue, const IntervalType2& rvalue)
boost::polygon::assign	/usr/include/boost/polygon/point_concept.hpp	/^PointType1>::type& assign(PointType1& lvalue, const PointType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(PointType1& lvalue, const PointType2& rvalue)
boost::polygon::assign	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  assign(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
boost::polygon::assign	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  assign(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
boost::polygon::assign	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  assign(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
boost::polygon::assign	/usr/include/boost/polygon/polygon_traits.hpp	/^  assign(T1& lvalue, const T2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(T1& lvalue, const T2& rvalue)
boost::polygon::assign	/usr/include/boost/polygon/polygon_traits.hpp	/^  assign(T1& polygon, const T2& rect) {$/;"	f	namespace:boost::polygon	signature:(T1& polygon, const T2& rect)
boost::polygon::assign	/usr/include/boost/polygon/rectangle_concept.hpp	/^  assign(rectangle_type_1& lvalue, const rectangle_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& lvalue, const rectangle_type_2& rvalue)
boost::polygon::assign	/usr/include/boost/polygon/segment_concept.hpp	/^Segment1>::type& assign(Segment1& segment1, const Segment2& segment2) {$/;"	f	namespace:boost::polygon	signature:(Segment1& segment1, const Segment2& segment2)
boost::polygon::axis_transformation	/usr/include/boost/polygon/transform.hpp	/^class axis_transformation {$/;"	c	namespace:boost::polygon
boost::polygon::axis_transformation::ATR	/usr/include/boost/polygon/transform.hpp	/^  enum ATR {$/;"	g	class:boost::polygon::axis_transformation	access:public
boost::polygon::axis_transformation::BEGIN_TRANSFORM	/usr/include/boost/polygon/transform.hpp	/^    BEGIN_TRANSFORM = 0,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::EAST_NORTH	/usr/include/boost/polygon/transform.hpp	/^      EN = 0, EAST_NORTH = 0,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::EAST_SOUTH	/usr/include/boost/polygon/transform.hpp	/^      ES = 2, EAST_SOUTH = 2, FLIP_Y       = 2,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::EN	/usr/include/boost/polygon/transform.hpp	/^      EN = 0, EAST_NORTH = 0,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::END_TRANSFORM	/usr/include/boost/polygon/transform.hpp	/^    END_TRANSFORM = 7$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::ES	/usr/include/boost/polygon/transform.hpp	/^      ES = 2, EAST_SOUTH = 2, FLIP_Y       = 2,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::FLIP_SWAP_XY	/usr/include/boost/polygon/transform.hpp	/^      SW = 7, SOUTH_WEST = 7, FLIP_SWAP_XY = 7,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::FLIP_X	/usr/include/boost/polygon/transform.hpp	/^      WN = 1, WEST_NORTH = 1, FLIP_X       = 1,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::FLIP_XY	/usr/include/boost/polygon/transform.hpp	/^      WS = 3, WEST_SOUTH = 3, FLIP_XY      = 3,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::FLIP_Y	/usr/include/boost/polygon/transform.hpp	/^      ES = 2, EAST_SOUTH = 2, FLIP_Y       = 2,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::INDIVIDUAL_AXIS	/usr/include/boost/polygon/transform.hpp	/^  enum INDIVIDUAL_AXIS {$/;"	g	class:boost::polygon::axis_transformation	access:public
boost::polygon::axis_transformation::NE	/usr/include/boost/polygon/transform.hpp	/^      NE = 4, NORTH_EAST = 4, SWAP_XY      = 4,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::NORTH_EAST	/usr/include/boost/polygon/transform.hpp	/^      NE = 4, NORTH_EAST = 4, SWAP_XY      = 4,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::NORTH_WEST	/usr/include/boost/polygon/transform.hpp	/^      NW = 6, NORTH_WEST = 6, ROTATE_RIGHT = 6,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::NULL_TRANSFORM	/usr/include/boost/polygon/transform.hpp	/^    NULL_TRANSFORM = 0,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::NW	/usr/include/boost/polygon/transform.hpp	/^      NW = 6, NORTH_WEST = 6, ROTATE_RIGHT = 6,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::NX	/usr/include/boost/polygon/transform.hpp	/^    NX = 1,$/;"	e	enum:boost::polygon::axis_transformation::INDIVIDUAL_AXIS
boost::polygon::axis_transformation::NY	/usr/include/boost/polygon/transform.hpp	/^    NY = 3$/;"	e	enum:boost::polygon::axis_transformation::INDIVIDUAL_AXIS
boost::polygon::axis_transformation::PX	/usr/include/boost/polygon/transform.hpp	/^    PX = 0,$/;"	e	enum:boost::polygon::axis_transformation::INDIVIDUAL_AXIS
boost::polygon::axis_transformation::PY	/usr/include/boost/polygon/transform.hpp	/^    PY = 2,$/;"	e	enum:boost::polygon::axis_transformation::INDIVIDUAL_AXIS
boost::polygon::axis_transformation::ROTATE_LEFT	/usr/include/boost/polygon/transform.hpp	/^      SE = 5, SOUTH_EAST = 5, ROTATE_LEFT  = 5,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::ROTATE_RIGHT	/usr/include/boost/polygon/transform.hpp	/^      NW = 6, NORTH_WEST = 6, ROTATE_RIGHT = 6,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::SE	/usr/include/boost/polygon/transform.hpp	/^      SE = 5, SOUTH_EAST = 5, ROTATE_LEFT  = 5,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::SOUTH_EAST	/usr/include/boost/polygon/transform.hpp	/^      SE = 5, SOUTH_EAST = 5, ROTATE_LEFT  = 5,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::SOUTH_WEST	/usr/include/boost/polygon/transform.hpp	/^      SW = 7, SOUTH_WEST = 7, FLIP_SWAP_XY = 7,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::SW	/usr/include/boost/polygon/transform.hpp	/^      SW = 7, SOUTH_WEST = 7, FLIP_SWAP_XY = 7,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::SWAP_XY	/usr/include/boost/polygon/transform.hpp	/^      NE = 4, NORTH_EAST = 4, SWAP_XY      = 4,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::WEST_NORTH	/usr/include/boost/polygon/transform.hpp	/^      WN = 1, WEST_NORTH = 1, FLIP_X       = 1,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::WEST_SOUTH	/usr/include/boost/polygon/transform.hpp	/^      WS = 3, WEST_SOUTH = 3, FLIP_XY      = 3,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::WN	/usr/include/boost/polygon/transform.hpp	/^      WN = 1, WEST_NORTH = 1, FLIP_X       = 1,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::WS	/usr/include/boost/polygon/transform.hpp	/^      WS = 3, WEST_SOUTH = 3, FLIP_XY      = 3,$/;"	e	enum:boost::polygon::axis_transformation::ATR
boost::polygon::axis_transformation::atr_	/usr/include/boost/polygon/transform.hpp	/^  ATR atr_;$/;"	m	class:boost::polygon::axis_transformation	access:private
boost::polygon::axis_transformation::axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation() : atr_(NULL_TRANSFORM) {}$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:()
boost::polygon::axis_transformation::axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation(const axis_transformation& atr) : atr_(atr.atr_) {}$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& atr)
boost::polygon::axis_transformation::axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit axis_transformation(ATR atr) : atr_(atr) {}$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(ATR atr)
boost::polygon::axis_transformation::axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit axis_transformation(const direction_2d& dir) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const direction_2d& dir)
boost::polygon::axis_transformation::axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit axis_transformation(const orientation_2d& orient) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const orientation_2d& orient)
boost::polygon::axis_transformation::combine_axis_arrays	/usr/include/boost/polygon/transform.hpp	/^  static void combine_axis_arrays(INDIVIDUAL_AXIS this_array[],$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(INDIVIDUAL_AXIS this_array[], const INDIVIDUAL_AXIS that_array[])
boost::polygon::axis_transformation::get_directions	/usr/include/boost/polygon/transform.hpp	/^  void get_directions(direction_2d& horizontal_dir,$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(direction_2d& horizontal_dir, direction_2d& vertical_dir) const
boost::polygon::axis_transformation::inverse	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation inverse() const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:() const
boost::polygon::axis_transformation::invert	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation& invert() {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:()
boost::polygon::axis_transformation::operator !=	/usr/include/boost/polygon/transform.hpp	/^  bool operator!=(const axis_transformation& a) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a) const
boost::polygon::axis_transformation::operator +	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation operator+(const axis_transformation& a) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a) const
boost::polygon::axis_transformation::operator +=	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation& operator+=(const axis_transformation& a) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a)
boost::polygon::axis_transformation::operator <	/usr/include/boost/polygon/transform.hpp	/^  bool operator<(const axis_transformation& a) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a) const
boost::polygon::axis_transformation::operator =	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation& operator=(const ATR& atr) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const ATR& atr)
boost::polygon::axis_transformation::operator =	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation& operator=(const axis_transformation& a) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a)
boost::polygon::axis_transformation::operator ==	/usr/include/boost/polygon/transform.hpp	/^  bool operator==(const axis_transformation& a) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a) const
boost::polygon::axis_transformation::populate_axis_array	/usr/include/boost/polygon/transform.hpp	/^  void populate_axis_array(INDIVIDUAL_AXIS axis_array[]) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(INDIVIDUAL_AXIS axis_array[]) const
boost::polygon::axis_transformation::set_directions	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation& set_directions(const direction_2d& horizontal_dir,$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const direction_2d& horizontal_dir, const direction_2d& vertical_dir)
boost::polygon::axis_transformation::transform	/usr/include/boost/polygon/transform.hpp	/^  void transform(coordinate_type& x, coordinate_type& y) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(coordinate_type& x, coordinate_type& y) const
boost::polygon::axis_transformation::write_back_axis_array	/usr/include/boost/polygon/transform.hpp	/^  void write_back_axis_array(const INDIVIDUAL_AXIS this_array[]) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const INDIVIDUAL_AXIS this_array[])
boost::polygon::begin_45_set_data	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  begin_45_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::begin_90_set_data	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  begin_90_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::begin_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^  begin_compact(const T& polygon,$/;"	f	namespace:boost::polygon	signature:(const T& polygon, typename enable_if< typename gtl_and <typename is_polygon_with_holes_type<T>::type, typename gtl_same_type<typename geometry_domain<typename geometry_concept<T>::type>::type, manhattan_domain>::type>::type>::type * = 0 )
boost::polygon::begin_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^  begin_holes(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
boost::polygon::begin_points	/usr/include/boost/polygon/polygon_traits.hpp	/^  begin_points(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
boost::polygon::begin_polygon_set_data	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  begin_polygon_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::belongs	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^inline bool belongs($/;"	f	namespace:boost::polygon	signature:( SourceCategory source_category, GeometryCategory geometry_category)
boost::polygon::bloat	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& bloat($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, direction_1d dir, typename interval_coordinate_type<IntervalType>::type bloating)
boost::polygon::bloat	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& bloat($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type bloating)
boost::polygon::bloat	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
boost::polygon::bloat	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set, direction_2d dir,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, direction_2d dir, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
boost::polygon::bloat	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
boost::polygon::bloat	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type low_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type high_bloating)
boost::polygon::bloat	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
boost::polygon::bloat	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type west_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type east_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type south_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type north_bloating)
boost::polygon::bloat	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  bloat(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
boost::polygon::bloat	/usr/include/boost/polygon/rectangle_concept.hpp	/^  bloat(rectangle_type& rectangle, direction_2d dir,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, direction_2d dir, typename rectangle_coordinate_type<rectangle_type>::type bloating)
boost::polygon::bloat	/usr/include/boost/polygon/rectangle_concept.hpp	/^  bloat(rectangle_type& rectangle, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, orientation_2d orient, typename rectangle_coordinate_type<rectangle_type>::type bloating)
boost::polygon::bloat	/usr/include/boost/polygon/rectangle_concept.hpp	/^  bloat(rectangle_type& rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type bloating)
boost::polygon::bloatVertexInDirWithOptions	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline point_data<Unit> bloatVertexInDirWithOptions(const point_data<Unit>& point, unsigned int dir,$/;"	f	namespace:boost::polygon	signature:(const point_data<Unit>& point, unsigned int dir, Unit bloating, RoundingOption rounding)
boost::polygon::bloatVertexInDirWithSQRT1OVER2	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline point_data<Unit> bloatVertexInDirWithSQRT1OVER2(int edge1, int normal1, const point_data<Unit>& second, Unit bloating,$/;"	f	namespace:boost::polygon	signature:(int edge1, int normal1, const point_data<Unit>& second, Unit bloating, bool first)
boost::polygon::boolean_op	/usr/include/boost/polygon/detail/boolean_op.hpp	/^namespace boolean_op {$/;"	n	namespace:boost::polygon
boost::polygon::boolean_op::BinaryAnd	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BinaryAnd {$/;"	c	namespace:boost::polygon::boolean_op
boost::polygon::boolean_op::BinaryAnd::BinaryAnd	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryAnd() {}$/;"	f	class:boost::polygon::boolean_op::BinaryAnd	access:public	signature:()
boost::polygon::boolean_op::BinaryAnd::operator ()	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator()(int a, int b) { return (a > 0) & (b > 0); }$/;"	f	class:boost::polygon::boolean_op::BinaryAnd	access:public	signature:(int a, int b)
boost::polygon::boolean_op::BinaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BinaryCount {$/;"	c	namespace:boost::polygon::boolean_op
boost::polygon::boolean_op::BinaryCount::BinaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount()$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:()
boost::polygon::boolean_op::BinaryCount::BinaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount(const BinaryCount& that)$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that)
boost::polygon::boolean_op::BinaryCount::BinaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount(int countL, int countR)$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(int countL, int countR)
boost::polygon::boolean_op::BinaryCount::counts_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    int counts_[2];$/;"	m	class:boost::polygon::boolean_op::BinaryCount	access:private
boost::polygon::boolean_op::BinaryCount::operator !=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator!=(const BinaryCount& that) const { return !((*this) == that);}$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that) const
boost::polygon::boolean_op::BinaryCount::operator +	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount operator+(const BinaryCount& that) const;$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that) const
boost::polygon::boolean_op::BinaryCount::operator +	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T> BinaryCount<T>::operator+(const BinaryCount<T>& that) const {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that) const
boost::polygon::boolean_op::BinaryCount::operator +=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount& operator+=(const BinaryCount& that);$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that)
boost::polygon::boolean_op::BinaryCount::operator +=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T>& BinaryCount<T>::operator+=(const BinaryCount<T>& that) {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that)
boost::polygon::boolean_op::BinaryCount::operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount operator-() const;$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:() const
boost::polygon::boolean_op::BinaryCount::operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount operator-(const BinaryCount& that) const;$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that) const
boost::polygon::boolean_op::BinaryCount::operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T> BinaryCount<T>::operator-() const {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:() const
boost::polygon::boolean_op::BinaryCount::operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T> BinaryCount<T>::operator-(const BinaryCount<T>& that) const {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that) const
boost::polygon::boolean_op::BinaryCount::operator -=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount& operator-=(const BinaryCount& that);$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that)
boost::polygon::boolean_op::BinaryCount::operator -=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T>& BinaryCount<T>::operator-=(const BinaryCount<T>& that) {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that)
boost::polygon::boolean_op::BinaryCount::operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount& operator=(const BinaryCount& that);$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that)
boost::polygon::boolean_op::BinaryCount::operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount& operator=(int count) { counts_[0] = count, counts_[1] = count; return *this; }$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(int count)
boost::polygon::boolean_op::BinaryCount::operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T>& BinaryCount<T>::operator=(const BinaryCount<T>& that) {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that)
boost::polygon::boolean_op::BinaryCount::operator ==	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator==(const BinaryCount& that) const;$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that) const
boost::polygon::boolean_op::BinaryCount::operator ==	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline bool BinaryCount<T>::operator==(const BinaryCount<T>& that) const {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that) const
boost::polygon::boolean_op::BinaryCount::operator []	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline int& operator[](bool index) { return counts_[index]; }$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(bool index)
boost::polygon::boolean_op::BinaryCount::operator int	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline operator int() const { return T()(counts_[0], counts_[1]); }$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:() const
boost::polygon::boolean_op::BinaryNot	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BinaryNot {$/;"	c	namespace:boost::polygon::boolean_op
boost::polygon::boolean_op::BinaryNot::BinaryNot	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryNot() {}$/;"	f	class:boost::polygon::boolean_op::BinaryNot	access:public	signature:()
boost::polygon::boolean_op::BinaryNot::operator ()	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator()(int a, int b) { return (a > 0) & !(b > 0); }$/;"	f	class:boost::polygon::boolean_op::BinaryNot	access:public	signature:(int a, int b)
boost::polygon::boolean_op::BinaryOr	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BinaryOr {$/;"	c	namespace:boost::polygon::boolean_op
boost::polygon::boolean_op::BinaryOr::BinaryOr	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryOr() {}$/;"	f	class:boost::polygon::boolean_op::BinaryOr	access:public	signature:()
boost::polygon::boolean_op::BinaryOr::operator ()	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator()(int a, int b) { return (a > 0) | (b > 0); }$/;"	f	class:boost::polygon::boolean_op::BinaryOr	access:public	signature:(int a, int b)
boost::polygon::boolean_op::BinaryXor	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BinaryXor {$/;"	c	namespace:boost::polygon::boolean_op
boost::polygon::boolean_op::BinaryXor::BinaryXor	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryXor() {}$/;"	f	class:boost::polygon::boolean_op::BinaryXor	access:public	signature:()
boost::polygon::boolean_op::BinaryXor::operator ()	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator()(int a, int b) { return (a > 0) ^ (b > 0); }$/;"	f	class:boost::polygon::boolean_op::BinaryXor	access:public	signature:(int a, int b)
boost::polygon::boolean_op::BooleanOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class BooleanOp {$/;"	c	namespace:boost::polygon::boolean_op
boost::polygon::boolean_op::BooleanOp::BooleanOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BooleanOp () : scanData_(), nextItr_(), nullT_() { nextItr_ = scanData_.end(); nullT_ = 0; }$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:()
boost::polygon::boolean_op::BooleanOp::BooleanOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BooleanOp (T nullT) : scanData_(), nextItr_(), nullT_(nullT) { nextItr_ = scanData_.end(); }$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:(T nullT)
boost::polygon::boolean_op::BooleanOp::BooleanOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BooleanOp (const BooleanOp& that) : scanData_(that.scanData_), nextItr_(),$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:(const BooleanOp& that)
boost::polygon::boolean_op::BooleanOp::ElementType	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    typedef std::pair<Unit, T> ElementType;$/;"	t	class:boost::polygon::boolean_op::BooleanOp	access:public
boost::polygon::boolean_op::BooleanOp::ScanData	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    typedef std::map<Unit, T> ScanData;$/;"	t	class:boost::polygon::boolean_op::BooleanOp	access:public
boost::polygon::boolean_op::BooleanOp::advanceScan	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline void advanceScan() { nextItr_ = scanData_.begin(); }$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:()
boost::polygon::boolean_op::BooleanOp::evaluateInterval_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline void evaluateInterval_(cT& outputContainer, interval_data<Unit> ivl, T beforeCount, T afterCount);$/;"	p	class:boost::polygon::boolean_op::BooleanOp	access:private	signature:(cT& outputContainer, interval_data<Unit> ivl, T beforeCount, T afterCount)
boost::polygon::boolean_op::BooleanOp::evaluateInterval_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline void BooleanOp<T, Unit>::evaluateInterval_(cT& outputContainer, interval_data<Unit> ivl,$/;"	f	class:boost::polygon::boolean_op::BooleanOp	signature:(cT& outputContainer, interval_data<Unit> ivl, T beforeCount, T afterCount)
boost::polygon::boolean_op::BooleanOp::insert_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline typename ScanData::iterator insert_(Unit pos, T count){$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:private	signature:(Unit pos, T count)
boost::polygon::boolean_op::BooleanOp::lookup_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline typename ScanData::iterator lookup_(Unit pos){$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:private	signature:(Unit pos)
boost::polygon::boolean_op::BooleanOp::nextItr_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    typename ScanData::iterator nextItr_;$/;"	m	class:boost::polygon::boolean_op::BooleanOp	access:protected
boost::polygon::boolean_op::BooleanOp::nullT_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    T nullT_;$/;"	m	class:boost::polygon::boolean_op::BooleanOp	access:protected
boost::polygon::boolean_op::BooleanOp::operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BooleanOp& operator=(const BooleanOp& that);$/;"	p	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:(const BooleanOp& that)
boost::polygon::boolean_op::BooleanOp::operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BooleanOp<T, Unit>& BooleanOp<T, Unit>::operator=(const BooleanOp& that) {$/;"	f	class:boost::polygon::boolean_op::BooleanOp	signature:(const BooleanOp& that)
boost::polygon::boolean_op::BooleanOp::processInterval	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline void processInterval(cT& outputContainer, interval_data<Unit> ivl, T deltaCount);$/;"	p	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:(cT& outputContainer, interval_data<Unit> ivl, T deltaCount)
boost::polygon::boolean_op::BooleanOp::processInterval	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline void BooleanOp<T, Unit>::processInterval(cT& outputContainer, interval_data<Unit> ivl, T deltaCount) {$/;"	f	class:boost::polygon::boolean_op::BooleanOp	signature:(cT& outputContainer, interval_data<Unit> ivl, T deltaCount)
boost::polygon::boolean_op::BooleanOp::scanData_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    ScanData scanData_;$/;"	m	class:boost::polygon::boolean_op::BooleanOp	access:protected
boost::polygon::boolean_op::UnaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  class UnaryCount {$/;"	c	namespace:boost::polygon::boolean_op
boost::polygon::boolean_op::UnaryCount::UnaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount() : count_(0) {}$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:()
boost::polygon::boolean_op::UnaryCount::UnaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount(const UnaryCount& that) : count_(that.count_) {}$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that)
boost::polygon::boolean_op::UnaryCount::UnaryCount	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline explicit UnaryCount(int count) : count_(count) {}$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(int count)
boost::polygon::boolean_op::UnaryCount::count_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    int count_;$/;"	m	class:boost::polygon::boolean_op::UnaryCount	access:private
boost::polygon::boolean_op::UnaryCount::operator !=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator!=(const UnaryCount& that) const { return !((*this) == that);}$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that) const
boost::polygon::boolean_op::UnaryCount::operator +	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount operator+(const UnaryCount& that) const { UnaryCount tmp(*this); tmp += that; return tmp; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that) const
boost::polygon::boolean_op::UnaryCount::operator +=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount& operator+=(const UnaryCount& that) { count_ += that.count_; return *this; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that)
boost::polygon::boolean_op::UnaryCount::operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount operator-() const { UnaryCount tmp; return tmp - *this; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:() const
boost::polygon::boolean_op::UnaryCount::operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount operator-(const UnaryCount& that) const { UnaryCount tmp(*this); tmp -= that; return tmp; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that) const
boost::polygon::boolean_op::UnaryCount::operator -=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount& operator-=(const UnaryCount& that) { count_ -= that.count_; return *this; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that)
boost::polygon::boolean_op::UnaryCount::operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount& operator=(const UnaryCount& that) { count_ = that.count_; return *this; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that)
boost::polygon::boolean_op::UnaryCount::operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount& operator=(int count) { count_ = count; return *this; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(int count)
boost::polygon::boolean_op::UnaryCount::operator ==	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator==(const UnaryCount& that) const { return count_ == that.count_; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that) const
boost::polygon::boolean_op::UnaryCount::operator int	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline operator int() const { return count_ % 2; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:() const
boost::polygon::boolean_op::applyBooleanBinaryOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline void applyBooleanBinaryOp(std::vector<std::pair<Unit, std::pair<Unit, int> > >& inputOutput,$/;"	f	namespace:boost::polygon::boolean_op	signature:(std::vector<std::pair<Unit, std::pair<Unit, int> > >& inputOutput, const std::vector<std::pair<Unit, std::pair<Unit, int> > >& input2, T defaultCount)
boost::polygon::boolean_op::applyBooleanBinaryOp	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline void applyBooleanBinaryOp(std::vector<std::pair<Unit, std::pair<Unit, int> > >& output,$/;"	f	namespace:boost::polygon::boolean_op	signature:(std::vector<std::pair<Unit, std::pair<Unit, int> > >& output, iterator_type_1 itr1, iterator_type_1 itr1_end, iterator_type_2 itr2, iterator_type_2 itr2_end, T defaultCount)
boost::polygon::boolean_op::applyUnaryXOr	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline void applyUnaryXOr(std::vector<std::pair<Unit, std::pair<Unit, int> > >& input) {$/;"	f	namespace:boost::polygon::boolean_op	signature:(std::vector<std::pair<Unit, std::pair<Unit, int> > >& input)
boost::polygon::boolean_op::default_arg_workaround	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  struct default_arg_workaround {$/;"	s	namespace:boost::polygon::boolean_op
boost::polygon::boolean_op::default_arg_workaround::applyBooleanOr	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    static inline void applyBooleanOr(std::vector<std::pair<Unit, std::pair<Unit, int> > >& input) {$/;"	f	struct:boost::polygon::boolean_op::default_arg_workaround	access:public	signature:(std::vector<std::pair<Unit, std::pair<Unit, int> > >& input)
boost::polygon::boolean_op_45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^  struct boolean_op_45 {$/;"	s	namespace:boost::polygon
boost::polygon::boolean_op_45::Count1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Count1 {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::Count1::Count1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1() : count_(0) { }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:()
boost::polygon::boolean_op_45::Count1::Count1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1(const Count1& count) : count_(count.count_) { }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count)
boost::polygon::boolean_op_45::Count1::Count1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1(int count) : count_(count) { }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(int count)
boost::polygon::boolean_op_45::Count1::count_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int count_;$/;"	m	class:boost::polygon::boolean_op_45::Count1	access:public
boost::polygon::boolean_op_45::Count1::invert	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1 invert() const {$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:() const
boost::polygon::boolean_op_45::Count1::operator !=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator!=(const Count1& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count) const
boost::polygon::boolean_op_45::Count1::operator +	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1 operator+(const Count1& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count) const
boost::polygon::boolean_op_45::Count1::operator +=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1& operator+=(const Count1& count){$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count)
boost::polygon::boolean_op_45::Count1::operator -	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1 operator-(const Count1& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count) const
boost::polygon::boolean_op_45::Count1::operator -=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1& operator-=(const Count1& count){$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count)
boost::polygon::boolean_op_45::Count1::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1& operator=(const Count1& count) { count_ = count.count_; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count)
boost::polygon::boolean_op_45::Count1::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1& operator=(int count) { count_ = count; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(int count)
boost::polygon::boolean_op_45::Count1::operator ==	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator==(const Count1& count) const { return count_ == count.count_; }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count) const
boost::polygon::boolean_op_45::Count2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Count2 {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::Count2::Count2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2()$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:()
boost::polygon::boolean_op_45::Count2::Count2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2(const Count2& count)$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count)
boost::polygon::boolean_op_45::Count2::Count2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2(int count1, int count2)$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(int count1, int count2)
boost::polygon::boolean_op_45::Count2::counts	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int counts[2];$/;"	m	class:boost::polygon::boolean_op_45::Count2	access:private
boost::polygon::boolean_op_45::Count2::invert	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2 invert() const {$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:() const
boost::polygon::boolean_op_45::Count2::operator !=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator!=(const Count2& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count) const
boost::polygon::boolean_op_45::Count2::operator +	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2 operator+(const Count2& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count) const
boost::polygon::boolean_op_45::Count2::operator +=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2& operator+=(const Count2& count){$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count)
boost::polygon::boolean_op_45::Count2::operator -	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2 operator-(const Count2& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count) const
boost::polygon::boolean_op_45::Count2::operator -=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2& operator-=(const Count2& count){$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count)
boost::polygon::boolean_op_45::Count2::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2& operator=(const Count2& count) { counts[0] = count.counts[0]; counts[1] = count.counts[1]; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count)
boost::polygon::boolean_op_45::Count2::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2& operator=(int count) { counts[0] = counts[1] = count; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(int count)
boost::polygon::boolean_op_45::Count2::operator ==	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator==(const Count2& count) const { return counts[0] == count.counts[0] && counts[1] == count.counts[1]; }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count) const
boost::polygon::boolean_op_45::Count2::operator []	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline int operator[](bool index) const {return counts[index]; }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(bool index) const
boost::polygon::boolean_op_45::Count2::operator []	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline int& operator[](bool index) { return counts[index]; }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(bool index)
boost::polygon::boolean_op_45::LongUnit	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    typedef typename coordinate_traits<Unit>::manhattan_area_type LongUnit;$/;"	t	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::Point	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::Scan45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Scan45 {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::Scan45::CrossQueue	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef std::set<Point, lessScan45Point> CrossQueue;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45::Scan45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45() : scanData_(), crossQueue_(), crossVector_(),$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:public	signature:()
boost::polygon::boolean_op_45::Scan45::Scan45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45(const Scan45& that) : scanData_(), crossQueue_(), crossVector_(),$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:public	signature:(const Scan45& that)
boost::polygon::boolean_op_45::Scan45::Scan45Count	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef Scan45CountT<CountType> Scan45Count;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45::Scan45Data	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef std::set<Scan45ElementT<CountType>, lessScan45Element<CountType> > Scan45Data;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45::Scan45Vector	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef std::vector<Scan45Vertex> Scan45Vector;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45::Scan45Vertex	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef std::pair<Point, Scan45Count> Scan45Vertex;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45::advance_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline void advance_(cT& output) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(cT& output)
boost::polygon::boolean_op_45::Scan45::const_iterator	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef typename Scan45Data::const_iterator const_iterator;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45::crossQueue_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      CrossQueue crossQueue_;$/;"	m	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45::crossVector_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Scan45Vector crossVector_;$/;"	m	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45::findCross_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline void findCross_(iterator iter) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(iterator iter)
boost::polygon::boolean_op_45::Scan45::getElement	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      static inline Scan45Element getElement(const Scan45Vertex& vertex, int index) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:public	signature:(const Scan45Vertex& vertex, int index)
boost::polygon::boolean_op_45::Scan45::iterator	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef typename Scan45Data::iterator iterator;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45::justBefore_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int justBefore_;$/;"	m	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45::lessScan45Point	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      class lessScan45Point : public std::binary_function<Point, Point, bool> {$/;"	c	class:boost::polygon::boolean_op_45::Scan45	inherits:std::binary_function	access:public
boost::polygon::boolean_op_45::Scan45::lessScan45Point::lessScan45Point	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^        inline lessScan45Point() {} \/\/default constructor is only constructor$/;"	f	class:boost::polygon::boolean_op_45::Scan45::lessScan45Point	access:public	signature:()
boost::polygon::boolean_op_45::Scan45::lessScan45Point::operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^        inline bool operator () (const Point& v1, const Point& v2) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45::lessScan45Point	access:public	signature:(const Point& v1, const Point& v2) const
boost::polygon::boolean_op_45::Scan45::lookUp_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline iterator lookUp_(Unit y){$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(Unit y)
boost::polygon::boolean_op_45::Scan45::mergeCross_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline iT mergeCross_(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(iT inputBegin, iT inputEnd)
boost::polygon::boolean_op_45::Scan45::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45& operator=(const Scan45& that) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:public	signature:(const Scan45& that)
boost::polygon::boolean_op_45::Scan45::processEvent_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline iT processEvent_(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(cT& output, iT inputBegin, iT inputEnd)
boost::polygon::boolean_op_45::Scan45::scan	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      void scan(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:public	signature:(cT& output, iT inputBegin, iT inputEnd)
boost::polygon::boolean_op_45::Scan45::scanData_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Scan45Data scanData_;$/;"	m	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45::scheduleCross0_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline void scheduleCross0_(iterator iter1, iterator iter2) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(iterator iter1, iterator iter2)
boost::polygon::boolean_op_45::Scan45::scheduleCross1_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline void scheduleCross1_(iterator iter1, iterator iter2) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(iterator iter1, iterator iter2)
boost::polygon::boolean_op_45::Scan45::x_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Unit x_;$/;"	m	class:boost::polygon::boolean_op_45::Scan45	access:public
boost::polygon::boolean_op_45::Scan45Count	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    typedef Scan45CountT<Count2> Scan45Count;$/;"	t	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::Scan45CountT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Scan45CountT {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::Scan45CountT::Scan45CountT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT() : counts() {} \/\/counts[0] = counts[1] = counts[2] = counts[3] = 0; }$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:()
boost::polygon::boolean_op_45::Scan45CountT::Scan45CountT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT(CountType count) : counts() { counts[0] = counts[1] = counts[2] = counts[3] = count; }$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(CountType count)
boost::polygon::boolean_op_45::Scan45CountT::Scan45CountT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT(const CountType& count1, const CountType& count2, const CountType& count3,$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const CountType& count1, const CountType& count2, const CountType& count3, const CountType& count4)
boost::polygon::boolean_op_45::Scan45CountT::Scan45CountT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT(const Scan45CountT& count) : counts() {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count)
boost::polygon::boolean_op_45::Scan45CountT::counts	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      CountType counts[4];$/;"	m	class:boost::polygon::boolean_op_45::Scan45CountT	access:private
boost::polygon::boolean_op_45::Scan45CountT::invert	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT invert() const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:() const
boost::polygon::boolean_op_45::Scan45CountT::operator !=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator!=(const Scan45CountT& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count) const
boost::polygon::boolean_op_45::Scan45CountT::operator +	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT operator+(const Scan45CountT& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count) const
boost::polygon::boolean_op_45::Scan45CountT::operator +=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT& operator+=(const Scan45CountT& count){$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count)
boost::polygon::boolean_op_45::Scan45CountT::operator +=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT& operator+=(const Scan45ElementT<CountType>& element){$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45ElementT<CountType>& element)
boost::polygon::boolean_op_45::Scan45CountT::operator -	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT operator-(const Scan45CountT& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count) const
boost::polygon::boolean_op_45::Scan45CountT::operator -=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT& operator-=(const Scan45CountT& count){$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count)
boost::polygon::boolean_op_45::Scan45CountT::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT& operator=(CountType count) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(CountType count)
boost::polygon::boolean_op_45::Scan45CountT::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT& operator=(const Scan45CountT& count) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count)
boost::polygon::boolean_op_45::Scan45CountT::operator ==	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator==(const Scan45CountT& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count) const
boost::polygon::boolean_op_45::Scan45CountT::operator []	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline CountType operator[](int index) const {return counts[index]; }$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(int index) const
boost::polygon::boolean_op_45::Scan45CountT::operator []	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline CountType& operator[](int index) { return counts[index]; }$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(int index)
boost::polygon::boolean_op_45::Scan45Element	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    typedef Scan45ElementT<Count2> Scan45Element;$/;"	t	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::Scan45ElementT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Scan45ElementT {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::Scan45ElementT::Scan45ElementT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45ElementT() : x(), y(), rise(), count() {}$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:()
boost::polygon::boolean_op_45::Scan45ElementT::Scan45ElementT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45ElementT(Unit xIn, Unit yIn, int riseIn, CountType countIn = CountType()) :$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:(Unit xIn, Unit yIn, int riseIn, CountType countIn = CountType())
boost::polygon::boolean_op_45::Scan45ElementT::Scan45ElementT	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45ElementT(const Scan45ElementT& that) :$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:(const Scan45ElementT& that)
boost::polygon::boolean_op_45::Scan45ElementT::count	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      mutable CountType count;$/;"	m	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public
boost::polygon::boolean_op_45::Scan45ElementT::cross	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool cross(Point& crossPoint, const Scan45ElementT& edge, Unit currentX) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:(Point& crossPoint, const Scan45ElementT& edge, Unit currentX) const
boost::polygon::boolean_op_45::Scan45ElementT::evalAtX	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Unit evalAtX(Unit xIn) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:(Unit xIn) const
boost::polygon::boolean_op_45::Scan45ElementT::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45ElementT& operator=(const Scan45ElementT& that) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:(const Scan45ElementT& that)
boost::polygon::boolean_op_45::Scan45ElementT::rise	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int rise; \/\/-1, 0, +1$/;"	m	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public
boost::polygon::boolean_op_45::Scan45ElementT::x	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Unit x;$/;"	m	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public
boost::polygon::boolean_op_45::Scan45ElementT::y	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Unit y;$/;"	m	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public
boost::polygon::boolean_op_45::Vertex45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    typedef Vertex45T<int> Vertex45;$/;"	t	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::Vertex45T	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class Vertex45T {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::Vertex45T::Vertex45T	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T() : pt(), rise(), count() {}$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:()
boost::polygon::boolean_op_45::Vertex45T::Vertex45T	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T(const Point& point, int riseIn, ct countIn) : pt(point), rise(riseIn), count(countIn) {}$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Point& point, int riseIn, ct countIn)
boost::polygon::boolean_op_45::Vertex45T::Vertex45T	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T(const Vertex45T& vertex) : pt(vertex.pt), rise(vertex.rise), count(vertex.count) {}$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex)
boost::polygon::boolean_op_45::Vertex45T::Vertex45T	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T(const std::pair<Point, Point>& vertex) : pt(), rise(), count() {}$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const std::pair<Point, Point>& vertex)
boost::polygon::boolean_op_45::Vertex45T::count	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      ct count; \/\/dxdydTheta$/;"	m	class:boost::polygon::boolean_op_45::Vertex45T	access:public
boost::polygon::boolean_op_45::Vertex45T::evalAtX	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Unit evalAtX(Unit xIn) const { return pt.y() + rise * (xIn - pt.x()); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(Unit xIn) const
boost::polygon::boolean_op_45::Vertex45T::operator !=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator!=(const Vertex45T& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
boost::polygon::boolean_op_45::Vertex45T::operator !=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator!=(const std::pair<Point, Point>& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const std::pair<Point, Point>& vertex) const
boost::polygon::boolean_op_45::Vertex45T::operator <	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator<(const Vertex45T& vertex) const {$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
boost::polygon::boolean_op_45::Vertex45T::operator <=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator<=(const Vertex45T& vertex) const { return !((*this) > vertex); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
boost::polygon::boolean_op_45::Vertex45T::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T& operator=(const Vertex45T& vertex){$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex)
boost::polygon::boolean_op_45::Vertex45T::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T& operator=(const std::pair<Point, Point>& vertex){ return *this; }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const std::pair<Point, Point>& vertex)
boost::polygon::boolean_op_45::Vertex45T::operator ==	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator==(const Vertex45T& vertex) const {$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
boost::polygon::boolean_op_45::Vertex45T::operator ==	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator==(const std::pair<Point, Point>& vertex) const { return false; }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const std::pair<Point, Point>& vertex) const
boost::polygon::boolean_op_45::Vertex45T::operator >	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator>(const Vertex45T& vertex) const { return vertex < (*this); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
boost::polygon::boolean_op_45::Vertex45T::operator >=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator>=(const Vertex45T& vertex) const { return !((*this) < vertex); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
boost::polygon::boolean_op_45::Vertex45T::pt	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Point pt;$/;"	m	class:boost::polygon::boolean_op_45::Vertex45T	access:public
boost::polygon::boolean_op_45::Vertex45T::rise	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int rise; \/\/ 1, 0 or -1$/;"	m	class:boost::polygon::boolean_op_45::Vertex45T	access:public
boost::polygon::boolean_op_45::applyLogic	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static bool applyLogic(Count1 count) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(Count1 count)
boost::polygon::boolean_op_45::applyLogic	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static bool applyLogic(Count2 count) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(Count2 count)
boost::polygon::boolean_op_45::applyLogic	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static int applyLogic(CountType count1, CountType count2){$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(CountType count1, CountType count2)
boost::polygon::boolean_op_45::boolean_op_45_output_functor	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    struct boolean_op_45_output_functor {$/;"	s	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::boolean_op_45_output_functor::operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      void operator()(cT& output, const Count2& count1, const Count2& count2,$/;"	f	struct:boost::polygon::boolean_op_45::boolean_op_45_output_functor	access:public	signature:(cT& output, const Count2& count1, const Count2& count2, const Point& pt, int rise, direction_1d end)
boost::polygon::boolean_op_45::classifyEdge45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline int classifyEdge45(const Point& prevPt, const Point& nextPt) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(const Point& prevPt, const Point& nextPt)
boost::polygon::boolean_op_45::lessScan45Element	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class lessScan45Element {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::lessScan45Element::justBefore_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int *justBefore_;$/;"	m	class:boost::polygon::boolean_op_45::lessScan45Element	access:private
boost::polygon::boolean_op_45::lessScan45Element::lessScan45Element	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45Element() : x_(0), justBefore_(0) {}$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Element	access:public	signature:()
boost::polygon::boolean_op_45::lessScan45Element::lessScan45Element	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45Element(Unit *x, int *justBefore) : x_(x), justBefore_(justBefore) {}$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Element	access:public	signature:(Unit *x, int *justBefore)
boost::polygon::boolean_op_45::lessScan45Element::lessScan45Element	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45Element(const lessScan45Element& that) : x_(that.x_), justBefore_(that.justBefore_) {}$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Element	access:public	signature:(const lessScan45Element& that)
boost::polygon::boolean_op_45::lessScan45Element::operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator () (const Scan45ElementT<CountType>& elm1,$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Element	access:public	signature:(const Scan45ElementT<CountType>& elm1, const Scan45ElementT<CountType>& elm2) const
boost::polygon::boolean_op_45::lessScan45Element::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45Element& operator=(const lessScan45Element& that) { x_ = that.x_; justBefore_ = that.justBefore_; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Element	access:public	signature:(const lessScan45Element& that)
boost::polygon::boolean_op_45::lessScan45Element::x_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Unit *x_; \/\/x value at which to apply comparison$/;"	m	class:boost::polygon::boolean_op_45::lessScan45Element	access:private
boost::polygon::boolean_op_45::lessScan45ElementRise	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class lessScan45ElementRise : public std::binary_function<Scan45Element, Scan45Element, bool> {$/;"	c	struct:boost::polygon::boolean_op_45	inherits:std::binary_function	access:public
boost::polygon::boolean_op_45::lessScan45ElementRise::lessScan45ElementRise	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45ElementRise() {} \/\/default constructor is only constructor$/;"	f	class:boost::polygon::boolean_op_45::lessScan45ElementRise	access:public	signature:()
boost::polygon::boolean_op_45::lessScan45ElementRise::operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator () (Scan45Element elm1, Scan45Element elm2) const {$/;"	f	class:boost::polygon::boolean_op_45::lessScan45ElementRise	access:public	signature:(Scan45Element elm1, Scan45Element elm2) const
boost::polygon::boolean_op_45::lessScan45Vertex	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class lessScan45Vertex {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::lessScan45Vertex::lessScan45Vertex	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45Vertex() {} \/\/default constructor is only constructor$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Vertex	access:public	signature:()
boost::polygon::boolean_op_45::lessScan45Vertex::operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator () (const Scan45Vertex& v1, const Scan45Vertex& v2) const {$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Vertex	access:public	signature:(const Scan45Vertex& v1, const Scan45Vertex& v2) const
boost::polygon::boolean_op_45::lessVertex45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class lessVertex45 {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::lessVertex45::justBefore_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int *justBefore_;$/;"	m	class:boost::polygon::boolean_op_45::lessVertex45	access:private
boost::polygon::boolean_op_45::lessVertex45::lessVertex45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessVertex45() : x_(0), justBefore_() {}$/;"	f	class:boost::polygon::boolean_op_45::lessVertex45	access:public	signature:()
boost::polygon::boolean_op_45::lessVertex45::lessVertex45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessVertex45(Unit *x, int *justBefore) : x_(x), justBefore_(justBefore) {}$/;"	f	class:boost::polygon::boolean_op_45::lessVertex45	access:public	signature:(Unit *x, int *justBefore)
boost::polygon::boolean_op_45::lessVertex45::lessVertex45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessVertex45(const lessVertex45& that) : x_(that.x_), justBefore_(that.justBefore_) {}$/;"	f	class:boost::polygon::boolean_op_45::lessVertex45	access:public	signature:(const lessVertex45& that)
boost::polygon::boolean_op_45::lessVertex45::operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator () (const Vertex45T<ct>& elm1, const Vertex45T<ct>& elm2) const {$/;"	f	class:boost::polygon::boolean_op_45::lessVertex45	access:public	signature:(const Vertex45T<ct>& elm1, const Vertex45T<ct>& elm2) const
boost::polygon::boolean_op_45::lessVertex45::operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessVertex45& operator=(const lessVertex45& that) { x_ = that.x_; justBefore_ = that.justBefore_; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::lessVertex45	access:public	signature:(const lessVertex45& that)
boost::polygon::boolean_op_45::lessVertex45::x_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Unit *x_; \/\/x value at which to apply comparison$/;"	m	class:boost::polygon::boolean_op_45::lessVertex45	access:private
boost::polygon::boolean_op_45::sortScan45Vector	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline void sortScan45Vector(S45V& vec) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(S45V& vec)
boost::polygon::boolean_op_45::testScan45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
boost::polygon::boolean_op_45::testScan45And	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45And(streamtype& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(streamtype& stdcout)
boost::polygon::boolean_op_45::testScan45Data	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Data(streamtype& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(streamtype& stdcout)
boost::polygon::boolean_op_45::testScan45P1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45P1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
boost::polygon::boolean_op_45::testScan45P2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45P2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
boost::polygon::boolean_op_45::testScan45Rect	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Rect(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
boost::polygon::boolean_op_45::testScan45Star1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Star1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
boost::polygon::boolean_op_45::testScan45Star2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Star2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
boost::polygon::boolean_op_45::testScan45Star3	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Star3(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
boost::polygon::boolean_op_45::testScan45Star4	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Star4(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
boost::polygon::boolean_op_45::unary_op_45_output_functor	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    struct unary_op_45_output_functor {$/;"	s	struct:boost::polygon::boolean_op_45	access:public
boost::polygon::boolean_op_45::unary_op_45_output_functor::operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      void operator()(cT& output, const Count1& count1, const Count1& count2,$/;"	f	struct:boost::polygon::boolean_op_45::unary_op_45_output_functor	access:public	signature:(cT& output, const Count1& count1, const Count1& count2, const Point& pt, int rise, direction_1d end)
boost::polygon::boundaries_intersect	/usr/include/boost/polygon/interval_concept.hpp	/^>::type boundaries_intersect($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2, bool consider_touch = true)
boost::polygon::boundaries_intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  boundaries_intersect(const rectangle_type_1& rectangle, const rectangle_type_2& b,$/;"	f	namespace:boost::polygon	signature:(const rectangle_type_1& rectangle, const rectangle_type_2& b, bool consider_touch = true)
boost::polygon::by_value_binary_operator	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct by_value_binary_operator {$/;"	s	namespace:boost::polygon
boost::polygon::by_value_binary_operator::type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef type_1 type;$/;"	t	struct:boost::polygon::by_value_binary_operator	access:public
boost::polygon::center	/usr/include/boost/polygon/interval_concept.hpp	/^>::type center(const IntervalType& interval) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval)
boost::polygon::center	/usr/include/boost/polygon/polygon_traits.hpp	/^  center(T1& center_point, const T2& polygon) {$/;"	f	namespace:boost::polygon	signature:(T1& center_point, const T2& polygon)
boost::polygon::center	/usr/include/boost/polygon/rectangle_concept.hpp	/^  center(point_type& center_point, const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(point_type& center_point, const rectangle_type& rectangle)
boost::polygon::center	/usr/include/boost/polygon/segment_concept.hpp	/^center(const Segment& segment) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment)
boost::polygon::characterizeEdge45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline std::pair<int, int> characterizeEdge45(const point_data<Unit>& pt1, const point_data<Unit>& pt2) {$/;"	f	namespace:boost::polygon	signature:(const point_data<Unit>& pt1, const point_data<Unit>& pt2)
boost::polygon::clean	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  clean(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::clean	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  clean(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::clean	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  clean(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::clear	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  clear(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
boost::polygon::clear	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  clear(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
boost::polygon::clear	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  clear(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
boost::polygon::clockwise_winding	/usr/include/boost/polygon/isotropy.hpp	/^    clockwise_winding = 0,$/;"	e	enum:boost::polygon::winding_direction
boost::polygon::compute_45_set_value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct compute_45_set_value {$/;"	s	namespace:boost::polygon
boost::polygon::compute_45_set_value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct compute_45_set_value<value_type, ltype, polygon_45_set_data<rcoord>, op_type> {$/;"	s	namespace:boost::polygon
boost::polygon::compute_45_set_value::value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    void value(value_type& output_, const ltype& lvalue_, const polygon_45_set_data<rcoord>& rvalue_) {$/;"	f	struct:boost::polygon::compute_45_set_value	access:public	signature:(value_type& output_, const ltype& lvalue_, const polygon_45_set_data<rcoord>& rvalue_)
boost::polygon::compute_45_set_value::value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    void value(value_type& output_, const ltype& lvalue_, const rtype& rvalue_) {$/;"	f	struct:boost::polygon::compute_45_set_value	access:public	signature:(value_type& output_, const ltype& lvalue_, const rtype& rvalue_)
boost::polygon::compute_90_set_value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    struct compute_90_set_value {$/;"	s	namespace:boost::polygon
boost::polygon::compute_90_set_value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    struct compute_90_set_value<value_type, ltype, polygon_90_set_data<rcoord>, op_type> {$/;"	s	namespace:boost::polygon
boost::polygon::compute_90_set_value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    struct compute_90_set_value<value_type, polygon_90_set_data<lcoord>, polygon_90_set_data<rcoord>, op_type> {$/;"	s	namespace:boost::polygon
boost::polygon::compute_90_set_value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    struct compute_90_set_value<value_type, polygon_90_set_data<lcoord>, rtype, op_type> {$/;"	s	namespace:boost::polygon
boost::polygon::compute_90_set_value::value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^      void value(value_type& output_, const ltype& lvalue_, const rtype& rvalue_, orientation_2d orient_) {$/;"	f	struct:boost::polygon::compute_90_set_value	access:public	signature:(value_type& output_, const ltype& lvalue_, const rtype& rvalue_, orientation_2d orient_)
boost::polygon::compute_90_set_value::value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^      void value(value_type& output_, const ltype& lvalue_,$/;"	f	struct:boost::polygon::compute_90_set_value	access:public	signature:(value_type& output_, const ltype& lvalue_, const polygon_90_set_data<rcoord>& rvalue_, orientation_2d orient_)
boost::polygon::compute_90_set_value::value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^      void value(value_type& output_, const polygon_90_set_data<lcoord>& lvalue_,$/;"	f	struct:boost::polygon::compute_90_set_value	access:public	signature:(value_type& output_, const polygon_90_set_data<lcoord>& lvalue_, const polygon_90_set_data<rcoord>& rvalue_, orientation_2d orient_)
boost::polygon::compute_90_set_value::value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^      void value(value_type& output_, const polygon_90_set_data<lcoord>& lvalue_,$/;"	f	struct:boost::polygon::compute_90_set_value	access:public	signature:(value_type& output_, const polygon_90_set_data<lcoord>& lvalue_, const rtype& rvalue_, orientation_2d orient_)
boost::polygon::connectivity_extraction	/usr/include/boost/polygon/polygon_set_data.hpp	/^  class connectivity_extraction{$/;"	c	namespace:boost::polygon
boost::polygon::connectivity_extraction::ce	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef arbitrary_connectivity_extraction<coordinate_type, int> ce;$/;"	t	class:boost::polygon::connectivity_extraction	access:private
boost::polygon::connectivity_extraction::ce_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    ce ce_;$/;"	m	class:boost::polygon::connectivity_extraction	access:private
boost::polygon::connectivity_extraction::connectivity_extraction	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline connectivity_extraction() : ce_(), nodeCount_(0) {}$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:()
boost::polygon::connectivity_extraction::connectivity_extraction	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline connectivity_extraction(const connectivity_extraction& that) : ce_(that.ce_),$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:(const connectivity_extraction& that)
boost::polygon::connectivity_extraction::extract	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void extract(GraphT& graph) {$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:(GraphT& graph)
boost::polygon::connectivity_extraction::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline unsigned int insert(const GeoObjT& geoObj) {$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:(const GeoObjT& geoObj)
boost::polygon::connectivity_extraction::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline unsigned int insert(const polygon_set_data<coordinate_type>& ps) {$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:(const polygon_set_data<coordinate_type>& ps)
boost::polygon::connectivity_extraction::nodeCount_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    unsigned int nodeCount_;$/;"	m	class:boost::polygon::connectivity_extraction	access:private
boost::polygon::connectivity_extraction::operator =	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline connectivity_extraction& operator=(const connectivity_extraction& that) {$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:(const connectivity_extraction& that)
boost::polygon::connectivity_extraction_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  class connectivity_extraction_45 {$/;"	c	namespace:boost::polygon
boost::polygon::connectivity_extraction_45::big_coord	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename coordinate_traits<coordinate_type>::manhattan_area_type big_coord;$/;"	t	class:boost::polygon::connectivity_extraction_45	access:private
boost::polygon::connectivity_extraction_45::connectivity_extraction_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline connectivity_extraction_45() : tsd_(), nodeCount_(0) {}$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:()
boost::polygon::connectivity_extraction_45::connectivity_extraction_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline connectivity_extraction_45(const connectivity_extraction_45& that) : tsd_(that.tsd_),$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:(const connectivity_extraction_45& that)
boost::polygon::connectivity_extraction_45::extract	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void extract(GraphT& graph) {$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:(GraphT& graph)
boost::polygon::connectivity_extraction_45::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline unsigned int insert(const GeoObjT& geoObj) {$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:(const GeoObjT& geoObj)
boost::polygon::connectivity_extraction_45::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline unsigned int insert(const polygon_45_set_data<coordinate_type>& ps) {$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:(const polygon_45_set_data<coordinate_type>& ps)
boost::polygon::connectivity_extraction_45::nodeCount_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    unsigned int nodeCount_;$/;"	m	class:boost::polygon::connectivity_extraction_45	access:private
boost::polygon::connectivity_extraction_45::operator =	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline connectivity_extraction_45& operator=(const connectivity_extraction_45& that) {$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:(const connectivity_extraction_45& that)
boost::polygon::connectivity_extraction_45::tsd	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename polygon_45_touch<big_coord>::TouchSetData tsd;$/;"	t	class:boost::polygon::connectivity_extraction_45	access:private
boost::polygon::connectivity_extraction_45::tsd_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    tsd tsd_;$/;"	m	class:boost::polygon::connectivity_extraction_45	access:private
boost::polygon::connectivity_extraction_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^  class connectivity_extraction_90 {$/;"	c	namespace:boost::polygon
boost::polygon::connectivity_extraction_90::connectivity_extraction_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline connectivity_extraction_90() : tsd_(), nodeCount_(0) {}$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:()
boost::polygon::connectivity_extraction_90::connectivity_extraction_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline connectivity_extraction_90(const connectivity_extraction_90& that) : tsd_(that.tsd_),$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:(const connectivity_extraction_90& that)
boost::polygon::connectivity_extraction_90::extract	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void extract(GraphT& graph) {$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:(GraphT& graph)
boost::polygon::connectivity_extraction_90::insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline unsigned int insert(const GeoObjT& geoObj) {$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:(const GeoObjT& geoObj)
boost::polygon::connectivity_extraction_90::insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline unsigned int insert(const polygon_90_set_data<coordinate_type>& ps) {$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:(const polygon_90_set_data<coordinate_type>& ps)
boost::polygon::connectivity_extraction_90::nodeCount_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    unsigned int nodeCount_;$/;"	m	class:boost::polygon::connectivity_extraction_90	access:private
boost::polygon::connectivity_extraction_90::operator =	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline connectivity_extraction_90& operator=(const connectivity_extraction_90& that) {$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:(const connectivity_extraction_90& that)
boost::polygon::connectivity_extraction_90::tsd	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    typedef typename touch_90_operation<coordinate_type>::TouchSetData tsd;$/;"	t	class:boost::polygon::connectivity_extraction_90	access:private
boost::polygon::connectivity_extraction_90::tsd_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    tsd tsd_;$/;"	m	class:boost::polygon::connectivity_extraction_90	access:private
boost::polygon::construct	/usr/include/boost/polygon/interval_concept.hpp	/^>::type construct($/;"	f	namespace:boost::polygon	signature:( typename interval_mutable_traits<IntervalType>::coordinate_type low, typename interval_mutable_traits<IntervalType>::coordinate_type high)
boost::polygon::construct	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type construct($/;"	f	namespace:boost::polygon	signature:( typename point_mutable_traits<PointType>::coordinate_type x, typename point_mutable_traits<PointType>::coordinate_type y)
boost::polygon::construct	/usr/include/boost/polygon/rectangle_concept.hpp	/^  construct(const T2& interval_horizontal,$/;"	f	namespace:boost::polygon	signature:(const T2& interval_horizontal, const T3& interval_vertical)
boost::polygon::construct	/usr/include/boost/polygon/rectangle_concept.hpp	/^  construct(coord_type xl, coord_type yl, coord_type xh, coord_type yh) {$/;"	f	namespace:boost::polygon	signature:(coord_type xl, coord_type yl, coord_type xh, coord_type yh)
boost::polygon::construct	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type construct(const Point1& low, const Point2& high) {$/;"	f	namespace:boost::polygon	signature:(const Point1& low, const Point2& high)
boost::polygon::construct_voronoi	/usr/include/boost/polygon/voronoi.hpp	/^construct_voronoi(PointIterator first, PointIterator last, VD* vd) {$/;"	f	namespace:boost::polygon	signature:(PointIterator first, PointIterator last, VD* vd)
boost::polygon::construct_voronoi	/usr/include/boost/polygon/voronoi.hpp	/^construct_voronoi(PointIterator p_first, PointIterator p_last,$/;"	f	namespace:boost::polygon	signature:(PointIterator p_first, PointIterator p_last, SegmentIterator s_first, SegmentIterator s_last, VD* vd)
boost::polygon::construct_voronoi	/usr/include/boost/polygon/voronoi.hpp	/^construct_voronoi(SegmentIterator first, SegmentIterator last, VD* vd) {$/;"	f	namespace:boost::polygon	signature:(SegmentIterator first, SegmentIterator last, VD* vd)
boost::polygon::contains	/usr/include/boost/polygon/interval_concept.hpp	/^>::type contains($/;"	f	namespace:boost::polygon	signature:( const IntervalType& interval, typename interval_coordinate_type<IntervalType>::type value, bool consider_touch = true )
boost::polygon::contains	/usr/include/boost/polygon/interval_concept.hpp	/^>::type contains($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2, bool consider_touch = true)
boost::polygon::contains	/usr/include/boost/polygon/polygon_traits.hpp	/^  contains(const T& polygon, const input_point_type& point, bool consider_touch = true) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon, const input_point_type& point, bool consider_touch = true)
boost::polygon::contains	/usr/include/boost/polygon/rectangle_concept.hpp	/^  contains(const rectangle_type& rectangle, const point_type point_contained,$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle, const point_type point_contained, bool consider_touch = true)
boost::polygon::contains	/usr/include/boost/polygon/rectangle_concept.hpp	/^  contains(const rectangle_type& rectangle, const rectangle_type_2 rectangle_contained,$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle, const rectangle_type_2 rectangle_contained, bool consider_touch = true)
boost::polygon::contains	/usr/include/boost/polygon/segment_concept.hpp	/^bool>::type contains(const Segment& segment,$/;"	f	namespace:boost::polygon	signature:(const Segment& segment, const Point& point, bool consider_touch = true )
boost::polygon::contains	/usr/include/boost/polygon/segment_concept.hpp	/^bool>::type contains(const Segment1& segment1,$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2, bool consider_touch = true)
boost::polygon::convert_high_precision_type	/usr/include/boost/polygon/gmp_override.hpp	/^  int convert_high_precision_type<int>(const mpq_class& v) {$/;"	f	namespace:boost::polygon	signature:(const mpq_class& v)
boost::polygon::convert_high_precision_type	/usr/include/boost/polygon/isotropy.hpp	/^  T convert_high_precision_type(const typename high_precision_type<T>::type& v) {$/;"	f	namespace:boost::polygon	signature:(const typename high_precision_type<T>::type& v)
boost::polygon::convolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& convolve($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type value)
boost::polygon::convolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& convolve(IntervalType1& lvalue, const IntervalType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(IntervalType1& lvalue, const IntervalType2& rvalue)
boost::polygon::convolve	/usr/include/boost/polygon/point_concept.hpp	/^PointType1>::type& convolve(PointType1& lvalue, const PointType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(PointType1& lvalue, const PointType2& rvalue)
boost::polygon::convolve	/usr/include/boost/polygon/polygon_traits.hpp	/^  convolve(polygon_type& polygon, const point_type& point) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, const point_type& point)
boost::polygon::convolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  convolve(rectangle_type& rectangle, const point_type& convolution_point) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const point_type& convolution_point)
boost::polygon::convolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  convolve(rectangle_type_1& rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle)
boost::polygon::convolve	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& convolve(Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Point& point)
boost::polygon::coordinate_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits {};$/;"	s	namespace:boost::polygon
boost::polygon::coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits<double> {$/;"	s	namespace:boost::polygon
boost::polygon::coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits<float> {$/;"	s	namespace:boost::polygon
boost::polygon::coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits<int> {$/;"	s	namespace:boost::polygon
boost::polygon::coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits<long double> {$/;"	s	namespace:boost::polygon
boost::polygon::coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits<polygon_long_long_type> {$/;"	s	namespace:boost::polygon
boost::polygon::coordinate_traits::area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_difference	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double coordinate_difference;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_difference	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float coordinate_difference;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_difference	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long coordinate_difference;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_difference	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double coordinate_difference;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_difference	/usr/include/boost/polygon/isotropy.hpp	/^    typedef polygon_long_long_type coordinate_difference;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_distance	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double coordinate_distance;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_distance	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float coordinate_distance;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_distance	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double coordinate_distance;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double coordinate_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float coordinate_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef int coordinate_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double coordinate_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::coordinate_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef polygon_long_long_type coordinate_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::manhattan_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double manhattan_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::manhattan_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float manhattan_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::manhattan_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double manhattan_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::manhattan_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long manhattan_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::manhattan_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef polygon_long_long_type manhattan_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::unsigned_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double unsigned_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::unsigned_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float unsigned_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::unsigned_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double unsigned_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::unsigned_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef polygon_ulong_long_type unsigned_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::coordinate_traits::unsigned_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef unsigned long unsigned_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
boost::polygon::copy_construct	/usr/include/boost/polygon/interval_concept.hpp	/^>::type copy_construct(const IntervalType2& interval) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType2& interval)
boost::polygon::copy_construct	/usr/include/boost/polygon/rectangle_concept.hpp	/^  copy_construct(const T2& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const T2& rectangle)
boost::polygon::copy_construct	/usr/include/boost/polygon/segment_concept.hpp	/^Segment1>::type copy_construct(const Segment2& segment) {$/;"	f	namespace:boost::polygon	signature:(const Segment2& segment)
boost::polygon::counterclockwise_winding	/usr/include/boost/polygon/isotropy.hpp	/^    counterclockwise_winding = 1,$/;"	e	enum:boost::polygon::winding_direction
boost::polygon::deconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& deconvolve($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type value)
boost::polygon::deconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& deconvolve(IntervalType1& lvalue, const IntervalType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(IntervalType1& lvalue, const IntervalType2& rvalue)
boost::polygon::deconvolve	/usr/include/boost/polygon/point_concept.hpp	/^PointType1>::type& deconvolve(PointType1& lvalue, const PointType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(PointType1& lvalue, const PointType2& rvalue)
boost::polygon::deconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  deconvolve(rectangle_type& rectangle, const point_type& convolution_point) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const point_type& convolution_point)
boost::polygon::deconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  deconvolve(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle)
boost::polygon::deconvolve	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& deconvolve(Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Point& point)
boost::polygon::default_voronoi_builder	/usr/include/boost/polygon/voronoi_builder.hpp	/^typedef voronoi_builder<detail::int32> default_voronoi_builder;$/;"	t	namespace:boost::polygon
boost::polygon::delta	/usr/include/boost/polygon/interval_concept.hpp	/^>::type delta(const IntervalType& interval) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval)
boost::polygon::delta	/usr/include/boost/polygon/rectangle_concept.hpp	/^  delta(const rectangle_type& rectangle, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle, orientation_2d orient)
boost::polygon::detail	/usr/include/boost/polygon/detail/minkowski.hpp	/^namespace boost { namespace polygon { namespace detail {$/;"	n	namespace:boost::polygon
boost::polygon::detail	/usr/include/boost/polygon/detail/polygon_simplify.hpp	/^namespace boost { namespace polygon { namespace detail { namespace simplify_detail {$/;"	n	namespace:boost::polygon
boost::polygon::detail	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^namespace detail {$/;"	n	namespace:boost::polygon
boost::polygon::detail	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^namespace detail {$/;"	n	namespace:boost::polygon
boost::polygon::detail	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^namespace detail {$/;"	n	namespace:boost::polygon
boost::polygon::detail	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^namespace detail {$/;"	n	namespace:boost::polygon
boost::polygon::detail::beach_line_node_data	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class beach_line_node_data {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::beach_line_node_data::beach_line_node_data	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  explicit beach_line_node_data(Edge* new_edge) :$/;"	f	class:boost::polygon::detail::beach_line_node_data	access:public	signature:(Edge* new_edge)
boost::polygon::detail::beach_line_node_data::circle_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  Circle* circle_event() const {$/;"	f	class:boost::polygon::detail::beach_line_node_data	access:public	signature:() const
boost::polygon::detail::beach_line_node_data::circle_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  beach_line_node_data& circle_event(Circle* circle_event) {$/;"	f	class:boost::polygon::detail::beach_line_node_data	access:public	signature:(Circle* circle_event)
boost::polygon::detail::beach_line_node_data::circle_event_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  Circle* circle_event_;$/;"	m	class:boost::polygon::detail::beach_line_node_data	access:private
boost::polygon::detail::beach_line_node_data::edge	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  Edge* edge() const {$/;"	f	class:boost::polygon::detail::beach_line_node_data	access:public	signature:() const
boost::polygon::detail::beach_line_node_data::edge	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  beach_line_node_data& edge(Edge* new_edge) {$/;"	f	class:boost::polygon::detail::beach_line_node_data	access:public	signature:(Edge* new_edge)
boost::polygon::detail::beach_line_node_data::edge_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  Edge* edge_;$/;"	m	class:boost::polygon::detail::beach_line_node_data	access:private
boost::polygon::detail::beach_line_node_key	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class beach_line_node_key {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::beach_line_node_key::beach_line_node_key	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  beach_line_node_key(const site_type &left_site,$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:(const site_type &left_site, const site_type &right_site)
boost::polygon::detail::beach_line_node_key::beach_line_node_key	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  explicit beach_line_node_key(const site_type &new_site) :$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:(const site_type &new_site)
boost::polygon::detail::beach_line_node_key::left_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  beach_line_node_key& left_site(const site_type &site) {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:(const site_type &site)
boost::polygon::detail::beach_line_node_key::left_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  const site_type &left_site() const {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:() const
boost::polygon::detail::beach_line_node_key::left_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_type &left_site() {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:()
boost::polygon::detail::beach_line_node_key::left_site_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_type left_site_;$/;"	m	class:boost::polygon::detail::beach_line_node_key	access:private
boost::polygon::detail::beach_line_node_key::right_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  beach_line_node_key& right_site(const site_type &site) {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:(const site_type &site)
boost::polygon::detail::beach_line_node_key::right_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  const site_type &right_site() const {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:() const
boost::polygon::detail::beach_line_node_key::right_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_type &right_site() {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:()
boost::polygon::detail::beach_line_node_key::right_site_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_type right_site_;$/;"	m	class:boost::polygon::detail::beach_line_node_key	access:private
boost::polygon::detail::beach_line_node_key::site_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef Site site_type;$/;"	t	class:boost::polygon::detail::beach_line_node_key	access:public
boost::polygon::detail::circle_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class circle_event {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::circle_event::center_x_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type center_x_;$/;"	m	class:boost::polygon::detail::circle_event	access:private
boost::polygon::detail::circle_event::center_y_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type center_y_;$/;"	m	class:boost::polygon::detail::circle_event	access:private
boost::polygon::detail::circle_event::circle_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event() : is_active_(true) {}$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:()
boost::polygon::detail::circle_event::circle_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event(coordinate_type c_x,$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:(coordinate_type c_x, coordinate_type c_y, coordinate_type lower_x)
boost::polygon::detail::circle_event::coordinate_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::detail::circle_event	access:public
boost::polygon::detail::circle_event::deactivate	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event& deactivate() {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:()
boost::polygon::detail::circle_event::is_active	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool is_active() const {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:() const
boost::polygon::detail::circle_event::is_active_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool is_active_;$/;"	m	class:boost::polygon::detail::circle_event	access:private
boost::polygon::detail::circle_event::lower_x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event& lower_x(coordinate_type lower_x) {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:(coordinate_type lower_x)
boost::polygon::detail::circle_event::lower_x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type lower_x() const {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:() const
boost::polygon::detail::circle_event::lower_x_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type lower_x_;$/;"	m	class:boost::polygon::detail::circle_event	access:private
boost::polygon::detail::circle_event::lower_y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type lower_y() const {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:() const
boost::polygon::detail::circle_event::x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event& x(coordinate_type center_x) {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:(coordinate_type center_x)
boost::polygon::detail::circle_event::x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x() const {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:() const
boost::polygon::detail::circle_event::y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event& y(coordinate_type center_y) {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:(coordinate_type center_y)
boost::polygon::detail::circle_event::y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y() const {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:() const
boost::polygon::detail::efpt64	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef extended_exponent_fpt<double> efpt64;$/;"	t	namespace:boost::polygon::detail
boost::polygon::detail::extended_exponent_fpt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^class extended_exponent_fpt {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::extended_exponent_fpt::d	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt_type d() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
boost::polygon::detail::extended_exponent_fpt::exp_	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  exp_type exp_;$/;"	m	class:boost::polygon::detail::extended_exponent_fpt	access:private
boost::polygon::detail::extended_exponent_fpt::exp_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef typename _traits::exp_type exp_type;$/;"	t	class:boost::polygon::detail::extended_exponent_fpt	access:public
boost::polygon::detail::extended_exponent_fpt::extended_exponent_fpt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  explicit extended_exponent_fpt(fpt_type val) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(fpt_type val)
boost::polygon::detail::extended_exponent_fpt::extended_exponent_fpt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt(fpt_type val, exp_type exp) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(fpt_type val, exp_type exp)
boost::polygon::detail::extended_exponent_fpt::fpt_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef _fpt fpt_type;$/;"	t	class:boost::polygon::detail::extended_exponent_fpt	access:public
boost::polygon::detail::extended_exponent_fpt::is_neg	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_neg() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
boost::polygon::detail::extended_exponent_fpt::is_pos	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_pos() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
boost::polygon::detail::extended_exponent_fpt::is_zero	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_zero() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
boost::polygon::detail::extended_exponent_fpt::operator *	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt operator*(const extended_exponent_fpt& that) const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that) const
boost::polygon::detail::extended_exponent_fpt::operator *=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt& operator*=(const extended_exponent_fpt& that) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that)
boost::polygon::detail::extended_exponent_fpt::operator +	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt operator+(const extended_exponent_fpt& that) const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that) const
boost::polygon::detail::extended_exponent_fpt::operator +=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt& operator+=(const extended_exponent_fpt& that) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that)
boost::polygon::detail::extended_exponent_fpt::operator -	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt operator-() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
boost::polygon::detail::extended_exponent_fpt::operator -	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt operator-(const extended_exponent_fpt& that) const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that) const
boost::polygon::detail::extended_exponent_fpt::operator -=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt& operator-=(const extended_exponent_fpt& that) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that)
boost::polygon::detail::extended_exponent_fpt::operator /	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt operator\/(const extended_exponent_fpt& that) const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that) const
boost::polygon::detail::extended_exponent_fpt::operator /=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt& operator\/=(const extended_exponent_fpt& that) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that)
boost::polygon::detail::extended_exponent_fpt::sqrt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt sqrt() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
boost::polygon::detail::extended_exponent_fpt::val_	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt_type val_;$/;"	m	class:boost::polygon::detail::extended_exponent_fpt	access:private
boost::polygon::detail::extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^class extended_int {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::extended_int::add	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void add(const extended_int& e1, const extended_int& e2) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& e1, const extended_int& e2)
boost::polygon::detail::extended_int::add	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void add(const uint32* c1, std::size_t sz1,$/;"	f	class:boost::polygon::detail::extended_int	access:private	signature:(const uint32* c1, std::size_t sz1, const uint32* c2, std::size_t sz2)
boost::polygon::detail::extended_int::chunks	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  const uint32* chunks() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
boost::polygon::detail::extended_int::chunks_	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  uint32 chunks_[N];$/;"	m	class:boost::polygon::detail::extended_int	access:private
boost::polygon::detail::extended_int::count	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  int32 count() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
boost::polygon::detail::extended_int::count_	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  int32 count_;$/;"	m	class:boost::polygon::detail::extended_int	access:private
boost::polygon::detail::extended_int::d	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt64 d() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
boost::polygon::detail::extended_int::dif	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void dif(const extended_int& e1, const extended_int& e2) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& e1, const extended_int& e2)
boost::polygon::detail::extended_int::dif	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void dif(const uint32* c1, std::size_t sz1,$/;"	f	class:boost::polygon::detail::extended_int	access:private	signature:(const uint32* c1, std::size_t sz1, const uint32* c2, std::size_t sz2, bool rec = false)
boost::polygon::detail::extended_int::extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int() {}$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:()
boost::polygon::detail::extended_int::extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int(const extended_int<M>& that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int<M>& that)
boost::polygon::detail::extended_int::extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int(const std::vector<uint32>& chunks, bool plus = true) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const std::vector<uint32>& chunks, bool plus = true)
boost::polygon::detail::extended_int::extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int(int32 that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int32 that)
boost::polygon::detail::extended_int::extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int(int64 that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int64 that)
boost::polygon::detail::extended_int::is_neg	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_neg() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
boost::polygon::detail::extended_int::is_pos	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_pos() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
boost::polygon::detail::extended_int::is_zero	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_zero() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
boost::polygon::detail::extended_int::mul	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void mul(const extended_int& e1, const extended_int& e2) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& e1, const extended_int& e2)
boost::polygon::detail::extended_int::mul	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void mul(const uint32* c1, std::size_t sz1,$/;"	f	class:boost::polygon::detail::extended_int	access:private	signature:(const uint32* c1, std::size_t sz1, const uint32* c2, std::size_t sz2)
boost::polygon::detail::extended_int::neg	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void neg() {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:()
boost::polygon::detail::extended_int::operator !=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator!=(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
boost::polygon::detail::extended_int::operator *	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator*(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
boost::polygon::detail::extended_int::operator *	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator*(int32 that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int32 that) const
boost::polygon::detail::extended_int::operator *	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator*(int64 that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int64 that) const
boost::polygon::detail::extended_int::operator +	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator+(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
boost::polygon::detail::extended_int::operator -	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator-() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
boost::polygon::detail::extended_int::operator -	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator-(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
boost::polygon::detail::extended_int::operator <	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator<(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
boost::polygon::detail::extended_int::operator <=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator<=(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
boost::polygon::detail::extended_int::operator =	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int& operator=(const extended_int<M>& that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int<M>& that)
boost::polygon::detail::extended_int::operator =	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int& operator=(int32 that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int32 that)
boost::polygon::detail::extended_int::operator =	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int& operator=(int64 that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int64 that)
boost::polygon::detail::extended_int::operator ==	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator==(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
boost::polygon::detail::extended_int::operator >	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator>(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
boost::polygon::detail::extended_int::operator >=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator>=(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
boost::polygon::detail::extended_int::p	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  std::pair<fpt64, int> p() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
boost::polygon::detail::extended_int::size	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  std::size_t size() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
boost::polygon::detail::extened_exponent_fpt_traits	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^class extened_exponent_fpt_traits<fpt64> {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::extened_exponent_fpt_traits::MAX_SIGNIFICANT_EXP_DIF	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^    MAX_SIGNIFICANT_EXP_DIF = 54$/;"	e	enum:boost::polygon::detail::extened_exponent_fpt_traits::__anon1
boost::polygon::detail::extened_exponent_fpt_traits::exp_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef int exp_type;$/;"	t	class:boost::polygon::detail::extened_exponent_fpt_traits	access:public
boost::polygon::detail::fpt64	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef double fpt64;$/;"	t	namespace:boost::polygon::detail
boost::polygon::detail::get_sqrt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^extended_exponent_fpt<_fpt> get_sqrt(const extended_exponent_fpt<_fpt>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_exponent_fpt<_fpt>& that)
boost::polygon::detail::get_sqrt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^T get_sqrt(const T& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& that)
boost::polygon::detail::get_sqrt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_fpt<T> get_sqrt(const robust_fpt<T>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_fpt<T>& that)
boost::polygon::detail::int32	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef boost::int32_t int32;$/;"	t	namespace:boost::polygon::detail
boost::polygon::detail::int64	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef boost::int64_t int64;$/;"	t	namespace:boost::polygon::detail
boost::polygon::detail::is_neg	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_neg(const extended_exponent_fpt<_fpt>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_exponent_fpt<_fpt>& that)
boost::polygon::detail::is_neg	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_neg(const extended_int<N>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_int<N>& that)
boost::polygon::detail::is_neg	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_neg(const T& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& that)
boost::polygon::detail::is_neg	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_neg(const robust_fpt<T>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_fpt<T>& that)
boost::polygon::detail::is_pos	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_pos(const extended_exponent_fpt<_fpt>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_exponent_fpt<_fpt>& that)
boost::polygon::detail::is_pos	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_pos(const extended_int<N>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_int<N>& that)
boost::polygon::detail::is_pos	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_pos(const T& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& that)
boost::polygon::detail::is_pos	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_pos(const robust_fpt<T>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_fpt<T>& that)
boost::polygon::detail::is_zero	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_zero(const extended_exponent_fpt<_fpt>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_exponent_fpt<_fpt>& that)
boost::polygon::detail::is_zero	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_zero(const extended_int<N>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_int<N>& that)
boost::polygon::detail::is_zero	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_zero(const T& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& that)
boost::polygon::detail::is_zero	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_zero(const robust_fpt<T>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_fpt<T>& that)
boost::polygon::detail::minkowski_offset	/usr/include/boost/polygon/detail/minkowski.hpp	/^struct minkowski_offset {$/;"	s	namespace:boost::polygon::detail
boost::polygon::detail::minkowski_offset::convolve_point_sequence_with_polygons	/usr/include/boost/polygon/detail/minkowski.hpp	/^  static void convolve_point_sequence_with_polygons(polygon_set& result, itrT b, itrT e, const std::vector<polygon>& polygons) {$/;"	f	struct:boost::polygon::detail::minkowski_offset	access:public	signature:(polygon_set& result, itrT b, itrT e, const std::vector<polygon>& polygons)
boost::polygon::detail::minkowski_offset::convolve_two_point_sequences	/usr/include/boost/polygon/detail/minkowski.hpp	/^  static void convolve_two_point_sequences(polygon_set& result, itrT1 ab, itrT1 ae, itrT2 bb, itrT2 be) {$/;"	f	struct:boost::polygon::detail::minkowski_offset	access:public	signature:(polygon_set& result, itrT1 ab, itrT1 ae, itrT2 bb, itrT2 be)
boost::polygon::detail::minkowski_offset::convolve_two_polygon_sets	/usr/include/boost/polygon/detail/minkowski.hpp	/^  static void convolve_two_polygon_sets(polygon_set& result, const polygon_set& a, const polygon_set& b) {$/;"	f	struct:boost::polygon::detail::minkowski_offset	access:public	signature:(polygon_set& result, const polygon_set& a, const polygon_set& b)
boost::polygon::detail::minkowski_offset::convolve_two_segments	/usr/include/boost/polygon/detail/minkowski.hpp	/^  static void convolve_two_segments(std::vector<point>& figure, const edge& a, const edge& b) {$/;"	f	struct:boost::polygon::detail::minkowski_offset	access:public	signature:(std::vector<point>& figure, const edge& a, const edge& b)
boost::polygon::detail::minkowski_offset::edge	/usr/include/boost/polygon/detail/minkowski.hpp	/^  typedef std::pair<point, point> edge;$/;"	t	struct:boost::polygon::detail::minkowski_offset	access:public
boost::polygon::detail::minkowski_offset::point	/usr/include/boost/polygon/detail/minkowski.hpp	/^  typedef point_data<coordinate_type> point;$/;"	t	struct:boost::polygon::detail::minkowski_offset	access:public
boost::polygon::detail::minkowski_offset::polygon	/usr/include/boost/polygon/detail/minkowski.hpp	/^  typedef polygon_with_holes_data<coordinate_type> polygon;$/;"	t	struct:boost::polygon::detail::minkowski_offset	access:public
boost::polygon::detail::minkowski_offset::polygon_set	/usr/include/boost/polygon/detail/minkowski.hpp	/^  typedef polygon_set_data<coordinate_type> polygon_set;$/;"	t	struct:boost::polygon::detail::minkowski_offset	access:public
boost::polygon::detail::operator *	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator*(const T& val, const robust_dif<T>& rhs) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& val, const robust_dif<T>& rhs)
boost::polygon::detail::operator *	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator*(const robust_dif<T>& lhs, const T& val) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const T& val)
boost::polygon::detail::operator *	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator*(const robust_dif<T>& lhs,$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const robust_dif<T>& rhs)
boost::polygon::detail::operator +	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator+(const T& lhs, const robust_dif<T>& rhs) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& lhs, const robust_dif<T>& rhs)
boost::polygon::detail::operator +	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator+(const robust_dif<T>& lhs, const T& rhs) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const T& rhs)
boost::polygon::detail::operator +	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator+(const robust_dif<T>& lhs,$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const robust_dif<T>& rhs)
boost::polygon::detail::operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator-(const T& lhs, const robust_dif<T>& rhs) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& lhs, const robust_dif<T>& rhs)
boost::polygon::detail::operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator-(const robust_dif<T>& lhs, const T& rhs) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const T& rhs)
boost::polygon::detail::operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator-(const robust_dif<T>& lhs,$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const robust_dif<T>& rhs)
boost::polygon::detail::operator /	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator\/(const robust_dif<T>& lhs, const T& val) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const T& val)
boost::polygon::detail::ordered_queue	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class ordered_queue {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::ordered_queue::c_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^                       comparison > c_;$/;"	m	class:boost::polygon::detail::ordered_queue	access:private
boost::polygon::detail::ordered_queue::c_list_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::list<T> c_list_;$/;"	m	class:boost::polygon::detail::ordered_queue	access:private
boost::polygon::detail::ordered_queue::clear	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  void clear() {$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:()
boost::polygon::detail::ordered_queue::comparison	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  struct comparison {$/;"	s	class:boost::polygon::detail::ordered_queue	access:private
boost::polygon::detail::ordered_queue::comparison::cmp_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^    Predicate cmp_;$/;"	m	struct:boost::polygon::detail::ordered_queue::comparison	access:public
boost::polygon::detail::ordered_queue::comparison::operator ()	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^    bool operator() (const list_iterator_type &it1,$/;"	f	struct:boost::polygon::detail::ordered_queue::comparison	access:public	signature:(const list_iterator_type &it1, const list_iterator_type &it2) const
boost::polygon::detail::ordered_queue::empty	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool empty() const {$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:() const
boost::polygon::detail::ordered_queue::list_iterator_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef typename std::list<T>::iterator list_iterator_type;$/;"	t	class:boost::polygon::detail::ordered_queue	access:private
boost::polygon::detail::ordered_queue::operator =	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  void operator=(const ordered_queue&);$/;"	p	class:boost::polygon::detail::ordered_queue	access:private	signature:(const ordered_queue&)
boost::polygon::detail::ordered_queue::ordered_queue	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  ordered_queue() {}$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:()
boost::polygon::detail::ordered_queue::ordered_queue	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  ordered_queue(const ordered_queue&);$/;"	p	class:boost::polygon::detail::ordered_queue	access:private	signature:(const ordered_queue&)
boost::polygon::detail::ordered_queue::pop	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  void pop() {$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:()
boost::polygon::detail::ordered_queue::push	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  T &push(const T &e) {$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:(const T &e)
boost::polygon::detail::ordered_queue::top	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  const T &top() const {$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:() const
boost::polygon::detail::point_2d	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class point_2d {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::point_2d::coordinate_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::detail::point_2d	access:public
boost::polygon::detail::point_2d::operator !=	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool operator!=(const point_2d& that) const {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:(const point_2d& that) const
boost::polygon::detail::point_2d::operator ==	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool operator==(const point_2d& that) const {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:(const point_2d& that) const
boost::polygon::detail::point_2d::point_2d	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_2d() {}$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:()
boost::polygon::detail::point_2d::point_2d	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_2d(coordinate_type x, coordinate_type y) :$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:(coordinate_type x, coordinate_type y)
boost::polygon::detail::point_2d::x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x() const {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:() const
boost::polygon::detail::point_2d::x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_2d& x(coordinate_type x) {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:(coordinate_type x)
boost::polygon::detail::point_2d::x_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x_;$/;"	m	class:boost::polygon::detail::point_2d	access:private
boost::polygon::detail::point_2d::y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y() const {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:() const
boost::polygon::detail::point_2d::y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_2d& y(coordinate_type y) {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:(coordinate_type y)
boost::polygon::detail::point_2d::y_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y_;$/;"	m	class:boost::polygon::detail::point_2d	access:private
boost::polygon::detail::robust_dif	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^class robust_dif {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::robust_dif::dif	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  T dif() const {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:() const
boost::polygon::detail::robust_dif::neg	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  T neg() const {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:() const
boost::polygon::detail::robust_dif::negative_sum_	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  T negative_sum_;$/;"	m	class:boost::polygon::detail::robust_dif	access:private
boost::polygon::detail::robust_dif::operator *=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator*=(const T& val) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& val)
boost::polygon::detail::robust_dif::operator *=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator*=(const robust_dif<T>& that) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const robust_dif<T>& that)
boost::polygon::detail::robust_dif::operator +=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator+=(const T& val) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& val)
boost::polygon::detail::robust_dif::operator +=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator+=(const robust_dif<T>& that) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const robust_dif<T>& that)
boost::polygon::detail::robust_dif::operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T> operator-() const {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:() const
boost::polygon::detail::robust_dif::operator -=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator-=(const T& val) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& val)
boost::polygon::detail::robust_dif::operator -=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator-=(const robust_dif<T>& that) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const robust_dif<T>& that)
boost::polygon::detail::robust_dif::operator /=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator\/=(const T& val) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& val)
boost::polygon::detail::robust_dif::pos	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  T pos() const {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:() const
boost::polygon::detail::robust_dif::positive_sum_	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  T positive_sum_;$/;"	m	class:boost::polygon::detail::robust_dif	access:private
boost::polygon::detail::robust_dif::robust_dif	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  explicit robust_dif(const T& value) :$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& value)
boost::polygon::detail::robust_dif::robust_dif	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif() :$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:()
boost::polygon::detail::robust_dif::robust_dif	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif(const T& pos, const T& neg) :$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& pos, const T& neg)
boost::polygon::detail::robust_dif::swap	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  void swap() {$/;"	f	class:boost::polygon::detail::robust_dif	access:private	signature:()
boost::polygon::detail::robust_fpt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^class robust_fpt {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::robust_fpt::ROUNDING_ERROR	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^    ROUNDING_ERROR = 1$/;"	e	enum:boost::polygon::detail::robust_fpt::__anon3
boost::polygon::detail::robust_fpt::floating_point_type	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  typedef _fpt floating_point_type;$/;"	t	class:boost::polygon::detail::robust_fpt	access:public
boost::polygon::detail::robust_fpt::fpv	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  floating_point_type fpv() const { return fpv_; }$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
boost::polygon::detail::robust_fpt::fpv_	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  floating_point_type fpv_;$/;"	m	class:boost::polygon::detail::robust_fpt	access:private
boost::polygon::detail::robust_fpt::has_neg_value	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  bool has_neg_value() const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
boost::polygon::detail::robust_fpt::has_pos_value	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  bool has_pos_value() const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
boost::polygon::detail::robust_fpt::has_zero_value	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  bool has_zero_value() const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
boost::polygon::detail::robust_fpt::operator *	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt operator*(const robust_fpt& that) const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that) const
boost::polygon::detail::robust_fpt::operator *=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt& operator*=(const robust_fpt& that) {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that)
boost::polygon::detail::robust_fpt::operator +	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt operator+(const robust_fpt& that) const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that) const
boost::polygon::detail::robust_fpt::operator +=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt& operator+=(const robust_fpt& that) {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that)
boost::polygon::detail::robust_fpt::operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt operator-() const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
boost::polygon::detail::robust_fpt::operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt operator-(const robust_fpt& that) const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that) const
boost::polygon::detail::robust_fpt::operator -=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt& operator-=(const robust_fpt& that) {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that)
boost::polygon::detail::robust_fpt::operator /	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt operator\/(const robust_fpt& that) const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that) const
boost::polygon::detail::robust_fpt::operator /=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt& operator\/=(const robust_fpt& that) {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that)
boost::polygon::detail::robust_fpt::operator =	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt& operator=(const robust_fpt& that) {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that)
boost::polygon::detail::robust_fpt::re	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  relative_error_type re() const { return re_; }$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
boost::polygon::detail::robust_fpt::re_	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  relative_error_type re_;$/;"	m	class:boost::polygon::detail::robust_fpt	access:private
boost::polygon::detail::robust_fpt::relative_error_type	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  typedef _fpt relative_error_type;$/;"	t	class:boost::polygon::detail::robust_fpt	access:public
boost::polygon::detail::robust_fpt::robust_fpt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  explicit robust_fpt(floating_point_type fpv) :$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(floating_point_type fpv)
boost::polygon::detail::robust_fpt::robust_fpt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt() : fpv_(0.0), re_(0.0) {}$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:()
boost::polygon::detail::robust_fpt::robust_fpt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt(floating_point_type fpv, relative_error_type error) :$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(floating_point_type fpv, relative_error_type error)
boost::polygon::detail::robust_fpt::sqrt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt sqrt() const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
boost::polygon::detail::robust_fpt::ulp	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  relative_error_type ulp() const { return re_; }$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
boost::polygon::detail::robust_sqrt_expr	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^class robust_sqrt_expr {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  enum MAX_RELATIVE_ERROR {$/;"	g	class:boost::polygon::detail::robust_sqrt_expr	access:public
boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR_EVAL1	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^    MAX_RELATIVE_ERROR_EVAL1 = 4,$/;"	e	enum:boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR
boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR_EVAL2	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^    MAX_RELATIVE_ERROR_EVAL2 = 7,$/;"	e	enum:boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR
boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR_EVAL3	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^    MAX_RELATIVE_ERROR_EVAL3 = 16,$/;"	e	enum:boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR
boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR_EVAL4	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^    MAX_RELATIVE_ERROR_EVAL4 = 25$/;"	e	enum:boost::polygon::detail::robust_sqrt_expr::MAX_RELATIVE_ERROR
boost::polygon::detail::robust_sqrt_expr::convert	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _converter convert;$/;"	m	class:boost::polygon::detail::robust_sqrt_expr	access:private
boost::polygon::detail::robust_sqrt_expr::eval1	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _fpt eval1(_int* A, _int* B) {$/;"	f	class:boost::polygon::detail::robust_sqrt_expr	access:public	signature:(_int* A, _int* B)
boost::polygon::detail::robust_sqrt_expr::eval2	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _fpt eval2(_int* A, _int* B) {$/;"	f	class:boost::polygon::detail::robust_sqrt_expr	access:public	signature:(_int* A, _int* B)
boost::polygon::detail::robust_sqrt_expr::eval3	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _fpt eval3(_int* A, _int* B) {$/;"	f	class:boost::polygon::detail::robust_sqrt_expr	access:public	signature:(_int* A, _int* B)
boost::polygon::detail::robust_sqrt_expr::eval4	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _fpt eval4(_int* A, _int* B) {$/;"	f	class:boost::polygon::detail::robust_sqrt_expr	access:public	signature:(_int* A, _int* B)
boost::polygon::detail::robust_sqrt_expr::tA	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _int tA[5];$/;"	m	class:boost::polygon::detail::robust_sqrt_expr	access:private
boost::polygon::detail::robust_sqrt_expr::tB	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _int tB[5];$/;"	m	class:boost::polygon::detail::robust_sqrt_expr	access:private
boost::polygon::detail::simplify_detail	/usr/include/boost/polygon/detail/polygon_simplify.hpp	/^namespace boost { namespace polygon { namespace detail { namespace simplify_detail {$/;"	n	namespace:boost::polygon::detail
boost::polygon::detail::simplify_detail::simplify	/usr/include/boost/polygon/detail/polygon_simplify.hpp	/^  std::size_t simplify(std::vector<T>& dst, const std::vector<T>& src,$/;"	f	namespace:boost::polygon::detail::simplify_detail	signature:(std::vector<T>& dst, const std::vector<T>& src, typename coordinate_traits< typename point_traits<T>::coordinate_type >::coordinate_distance len)
boost::polygon::detail::site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class site_event {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::site_event::Bits	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  enum Bits {$/;"	g	class:boost::polygon::detail::site_event	access:private
boost::polygon::detail::site_event::IS_INVERSE	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^    IS_INVERSE = 0x20  \/\/ 32$/;"	e	enum:boost::polygon::detail::site_event::Bits
boost::polygon::detail::site_event::coordinate_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::detail::site_event	access:public
boost::polygon::detail::site_event::flags_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::size_t flags_;$/;"	m	class:boost::polygon::detail::site_event	access:private
boost::polygon::detail::site_event::initial_index	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event& initial_index(std::size_t index) {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(std::size_t index)
boost::polygon::detail::site_event::initial_index	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::size_t initial_index() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
boost::polygon::detail::site_event::initial_index_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::size_t initial_index_;$/;"	m	class:boost::polygon::detail::site_event	access:private
boost::polygon::detail::site_event::inverse	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event& inverse() {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:()
boost::polygon::detail::site_event::is_inverse	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool is_inverse() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
boost::polygon::detail::site_event::is_point	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool is_point() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
boost::polygon::detail::site_event::is_segment	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool is_segment() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
boost::polygon::detail::site_event::operator !=	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool operator!=(const site_event& that) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(const site_event& that) const
boost::polygon::detail::site_event::operator ==	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool operator==(const site_event& that) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(const site_event& that) const
boost::polygon::detail::site_event::point0	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  const point_type& point0(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
boost::polygon::detail::site_event::point0_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_type point0_;$/;"	m	class:boost::polygon::detail::site_event	access:private
boost::polygon::detail::site_event::point1	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  const point_type& point1(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
boost::polygon::detail::site_event::point1_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_type point1_;$/;"	m	class:boost::polygon::detail::site_event	access:private
boost::polygon::detail::site_event::point_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef point_2d<T> point_type;$/;"	t	class:boost::polygon::detail::site_event	access:public
boost::polygon::detail::site_event::site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  explicit site_event(const point_type& point) :$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(const point_type& point)
boost::polygon::detail::site_event::site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event() :$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:()
boost::polygon::detail::site_event::site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event(const point_type& point1, const point_type& point2) :$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(const point_type& point1, const point_type& point2)
boost::polygon::detail::site_event::site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event(coordinate_type x, coordinate_type y) :$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(coordinate_type x, coordinate_type y)
boost::polygon::detail::site_event::site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event(coordinate_type x1, coordinate_type y1,$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(coordinate_type x1, coordinate_type y1, coordinate_type x2, coordinate_type y2)
boost::polygon::detail::site_event::sorted_index	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event& sorted_index(std::size_t index) {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(std::size_t index)
boost::polygon::detail::site_event::sorted_index	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::size_t sorted_index() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
boost::polygon::detail::site_event::sorted_index_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::size_t sorted_index_;$/;"	m	class:boost::polygon::detail::site_event	access:private
boost::polygon::detail::site_event::source_category	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  SourceCategory source_category() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
boost::polygon::detail::site_event::source_category	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event& source_category(SourceCategory source_category) {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(SourceCategory source_category)
boost::polygon::detail::site_event::x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
boost::polygon::detail::site_event::x0	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x0(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
boost::polygon::detail::site_event::x1	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x1(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
boost::polygon::detail::site_event::y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
boost::polygon::detail::site_event::y0	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y0(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
boost::polygon::detail::site_event::y1	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y1(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
boost::polygon::detail::type_converter_efpt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^struct type_converter_efpt {$/;"	s	namespace:boost::polygon::detail
boost::polygon::detail::type_converter_efpt::operator ()	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt<fpt64> operator()(const extended_int<N>& that) const {$/;"	f	struct:boost::polygon::detail::type_converter_efpt	access:public	signature:(const extended_int<N>& that) const
boost::polygon::detail::type_converter_fpt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^struct type_converter_fpt {$/;"	s	namespace:boost::polygon::detail
boost::polygon::detail::type_converter_fpt::operator ()	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt64 operator()(const T& that) const {$/;"	f	struct:boost::polygon::detail::type_converter_fpt	access:public	signature:(const T& that) const
boost::polygon::detail::type_converter_fpt::operator ()	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt64 operator()(const extended_exponent_fpt<fpt64>& that) const {$/;"	f	struct:boost::polygon::detail::type_converter_fpt	access:public	signature:(const extended_exponent_fpt<fpt64>& that) const
boost::polygon::detail::type_converter_fpt::operator ()	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt64 operator()(const extended_int<N>& that) const {$/;"	f	struct:boost::polygon::detail::type_converter_fpt	access:public	signature:(const extended_int<N>& that) const
boost::polygon::detail::uint32	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef boost::uint32_t uint32;$/;"	t	namespace:boost::polygon::detail
boost::polygon::detail::uint64	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef boost::uint64_t uint64;$/;"	t	namespace:boost::polygon::detail
boost::polygon::detail::ulp_comparison	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^struct ulp_comparison<fpt64> {$/;"	s	namespace:boost::polygon::detail
boost::polygon::detail::ulp_comparison::EQUAL	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^    EQUAL = 0,$/;"	e	enum:boost::polygon::detail::ulp_comparison::Result
boost::polygon::detail::ulp_comparison::LESS	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^    LESS = -1,$/;"	e	enum:boost::polygon::detail::ulp_comparison::Result
boost::polygon::detail::ulp_comparison::MORE	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^    MORE = 1$/;"	e	enum:boost::polygon::detail::ulp_comparison::Result
boost::polygon::detail::ulp_comparison::Result	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  enum Result {$/;"	g	struct:boost::polygon::detail::ulp_comparison	access:public
boost::polygon::detail::ulp_comparison::operator ()	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  Result operator()(fpt64 a, fpt64 b, unsigned int maxUlps) const {$/;"	f	struct:boost::polygon::detail::ulp_comparison	access:public	signature:(fpt64 a, fpt64 b, unsigned int maxUlps) const
boost::polygon::detail::voronoi_ctype_traits	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^struct voronoi_ctype_traits<int32> {$/;"	s	namespace:boost::polygon::detail
boost::polygon::detail::voronoi_ctype_traits::big_int_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef extended_int<64> big_int_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
boost::polygon::detail::voronoi_ctype_traits::efpt_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef extended_exponent_fpt<fpt_type> efpt_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
boost::polygon::detail::voronoi_ctype_traits::fpt_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef fpt64 fpt_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
boost::polygon::detail::voronoi_ctype_traits::int_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef int32 int_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
boost::polygon::detail::voronoi_ctype_traits::int_x2_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef int64 int_x2_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
boost::polygon::detail::voronoi_ctype_traits::to_efpt_converter_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef type_converter_efpt to_efpt_converter_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
boost::polygon::detail::voronoi_ctype_traits::to_fpt_converter_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef type_converter_fpt to_fpt_converter_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
boost::polygon::detail::voronoi_ctype_traits::uint_x2_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef uint64 uint_x2_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
boost::polygon::detail::voronoi_ctype_traits::ulp_cmp_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef ulp_comparison<fpt_type> ulp_cmp_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
boost::polygon::detail::voronoi_predicates	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^class voronoi_predicates {$/;"	c	namespace:boost::polygon::detail
boost::polygon::detail::voronoi_predicates::ULPS	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    ULPS = 64,$/;"	e	enum:boost::polygon::detail::voronoi_predicates::__anon2
boost::polygon::detail::voronoi_predicates::ULPSx2	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    ULPSx2 = 128$/;"	e	enum:boost::polygon::detail::voronoi_predicates::__anon2
boost::polygon::detail::voronoi_predicates::big_int_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::big_int_type big_int_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::circle_existence_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class circle_existence_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::circle_existence_predicate::point_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename Site::point_type point_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public
boost::polygon::detail::voronoi_predicates::circle_existence_predicate::ppp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool ppp(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3) const
boost::polygon::detail::voronoi_predicates::circle_existence_predicate::pps	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool pps(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int segment_index) const
boost::polygon::detail::voronoi_predicates::circle_existence_predicate::pss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool pss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int point_index) const
boost::polygon::detail::voronoi_predicates::circle_existence_predicate::site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public
boost::polygon::detail::voronoi_predicates::circle_existence_predicate::sss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool sss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3) const
boost::polygon::detail::voronoi_predicates::circle_formation_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class circle_formation_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::circle_formation_predicate::circle_existence_predicate_	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    circle_existence_predicate_type circle_existence_predicate_;$/;"	m	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:private
boost::polygon::detail::voronoi_predicates::circle_formation_predicate::circle_existence_predicate_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef CEP circle_existence_predicate_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:public
boost::polygon::detail::voronoi_predicates::circle_formation_predicate::circle_formation_functor_	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    circle_formation_functor_type circle_formation_functor_;$/;"	m	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:private
boost::polygon::detail::voronoi_predicates::circle_formation_predicate::circle_formation_functor_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef CFF circle_formation_functor_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:public
boost::polygon::detail::voronoi_predicates::circle_formation_predicate::circle_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Circle circle_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:public
boost::polygon::detail::voronoi_predicates::circle_formation_predicate::operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const site_type& site1, const site_type& site2,$/;"	f	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, circle_type& circle)
boost::polygon::detail::voronoi_predicates::circle_formation_predicate::site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:public
boost::polygon::detail::voronoi_predicates::distance_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class distance_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::distance_predicate::LESS	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      LESS = -1,$/;"	e	enum:boost::polygon::detail::voronoi_predicates::distance_predicate::kPredicateResult
boost::polygon::detail::voronoi_predicates::distance_predicate::MORE	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      MORE = 1$/;"	e	enum:boost::polygon::detail::voronoi_predicates::distance_predicate::kPredicateResult
boost::polygon::detail::voronoi_predicates::distance_predicate::UNDEFINED	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      UNDEFINED = 0,$/;"	e	enum:boost::polygon::detail::voronoi_predicates::distance_predicate::kPredicateResult
boost::polygon::detail::voronoi_predicates::distance_predicate::fast_ps	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    kPredicateResult fast_ps($/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:( const site_type& left_site, const site_type& right_site, const site_type& new_site, bool reverse_order) const
boost::polygon::detail::voronoi_predicates::distance_predicate::find_distance_to_point_arc	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    fpt_type find_distance_to_point_arc($/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:( const site_type& site, const point_type& point) const
boost::polygon::detail::voronoi_predicates::distance_predicate::find_distance_to_segment_arc	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    fpt_type find_distance_to_segment_arc($/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:( const site_type& site, const point_type& point) const
boost::polygon::detail::voronoi_predicates::distance_predicate::kPredicateResult	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    enum kPredicateResult {$/;"	g	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private
boost::polygon::detail::voronoi_predicates::distance_predicate::operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const site_type& left_site,$/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:public	signature:(const site_type& left_site, const site_type& right_site, const site_type& new_site) const
boost::polygon::detail::voronoi_predicates::distance_predicate::point_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename Site::point_type point_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private
boost::polygon::detail::voronoi_predicates::distance_predicate::pp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool pp(const site_type& left_site,$/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:(const site_type& left_site, const site_type& right_site, const site_type& new_site) const
boost::polygon::detail::voronoi_predicates::distance_predicate::ps	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool ps(const site_type& left_site, const site_type& right_site,$/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:(const site_type& left_site, const site_type& right_site, const site_type& new_site, bool reverse_order) const
boost::polygon::detail::voronoi_predicates::distance_predicate::site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:public
boost::polygon::detail::voronoi_predicates::distance_predicate::ss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool ss(const site_type& left_site,$/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:(const site_type& left_site, const site_type& right_site, const site_type& new_site) const
boost::polygon::detail::voronoi_predicates::distance_predicate::to_fpt	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    to_fpt_converter to_fpt;$/;"	m	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private
boost::polygon::detail::voronoi_predicates::distance_predicate::ulp_cmp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    ulp_cmp_type ulp_cmp;$/;"	m	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private
boost::polygon::detail::voronoi_predicates::efpt_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::efpt_type efpt_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::event_comparison_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class event_comparison_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::event_comparison_predicate::circle_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Circle circle_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public
boost::polygon::detail::voronoi_predicates::event_comparison_predicate::operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const circle_type& lhs, const circle_type& rhs) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public	signature:(const circle_type& lhs, const circle_type& rhs) const
boost::polygon::detail::voronoi_predicates::event_comparison_predicate::operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const circle_type& lhs, const site_type& rhs) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public	signature:(const circle_type& lhs, const site_type& rhs) const
boost::polygon::detail::voronoi_predicates::event_comparison_predicate::operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const site_type& lhs, const circle_type& rhs) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public	signature:(const site_type& lhs, const circle_type& rhs) const
boost::polygon::detail::voronoi_predicates::event_comparison_predicate::operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const site_type& lhs, const site_type& rhs) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public	signature:(const site_type& lhs, const site_type& rhs) const
boost::polygon::detail::voronoi_predicates::event_comparison_predicate::site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public
boost::polygon::detail::voronoi_predicates::event_comparison_predicate::to_fpt	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    to_fpt_converter to_fpt;$/;"	m	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:private
boost::polygon::detail::voronoi_predicates::event_comparison_predicate::ulp_cmp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    ulp_cmp_type ulp_cmp;$/;"	m	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:private
boost::polygon::detail::voronoi_predicates::fpt_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::fpt_type fpt_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::int_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::int_type int_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::int_x2_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::int_x2_type int_x2_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::is_vertical	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  static bool is_vertical(const Point& point1, const Point& point2) {$/;"	f	class:boost::polygon::detail::voronoi_predicates	access:public	signature:(const Point& point1, const Point& point2)
boost::polygon::detail::voronoi_predicates::is_vertical	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  static bool is_vertical(const Site& site) {$/;"	f	class:boost::polygon::detail::voronoi_predicates	access:public	signature:(const Site& site)
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class lazy_circle_formation_functor {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::circle_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Circle circle_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::exact_circle_formation_functor_	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    exact_circle_formation_functor_type exact_circle_formation_functor_;$/;"	m	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:private
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::exact_circle_formation_functor_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^        exact_circle_formation_functor_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::point_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename Site::point_type point_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::ppp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void ppp(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, circle_type& c_event)
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::pps	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void pps(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int segment_index, circle_type& c_event)
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::pss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void pss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int point_index, circle_type& c_event)
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::robust_dif_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef robust_dif<robust_fpt_type> robust_dif_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::robust_fpt_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef robust_fpt<fpt_type> robust_fpt_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::sss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void sss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, circle_type& c_event)
boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor::to_fpt	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    to_fpt_converter to_fpt;$/;"	m	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:private
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class mp_circle_formation_functor {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::circle_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Circle circle_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::point_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename Site::point_type point_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::ppp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void ppp(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, circle_type& circle, bool recompute_c_x = true, bool recompute_c_y = true, bool recompute_lower_x = true)
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::pps	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void pps(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int segment_index, circle_type& c_event, bool recompute_c_x = true, bool recompute_c_y = true, bool recompute_lower_x = true)
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::pss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void pss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int point_index, circle_type& c_event, bool recompute_c_x = true, bool recompute_c_y = true, bool recompute_lower_x = true)
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::robust_sqrt_expr_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^        robust_sqrt_expr_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::sqrt_expr_	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    robust_sqrt_expr_type sqrt_expr_;$/;"	m	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:private
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::sqrt_expr_evaluator_pss3	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    _fpt sqrt_expr_evaluator_pss3(_int *A, _int *B) {$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:private	signature:(_int *A, _int *B)
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::sqrt_expr_evaluator_pss4	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    _fpt sqrt_expr_evaluator_pss4(_int *A, _int *B) {$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:private	signature:(_int *A, _int *B)
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::sss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void sss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, circle_type& c_event, bool recompute_c_x = true, bool recompute_c_y = true, bool recompute_lower_x = true)
boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor::to_fpt	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    to_fpt_converter to_fpt;$/;"	m	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:private
boost::polygon::detail::voronoi_predicates::node_comparison_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class node_comparison_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::node_comparison_predicate::coordinate_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename site_type::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:public
boost::polygon::detail::voronoi_predicates::node_comparison_predicate::distance_predicate_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef distance_predicate<site_type> distance_predicate_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:public
boost::polygon::detail::voronoi_predicates::node_comparison_predicate::get_comparison_site	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    const site_type& get_comparison_site(const node_type& node) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:private	signature:(const node_type& node) const
boost::polygon::detail::voronoi_predicates::node_comparison_predicate::get_comparison_y	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    std::pair<coordinate_type, int> get_comparison_y($/;"	f	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:private	signature:( const node_type& node, bool is_new_node = true) const
boost::polygon::detail::voronoi_predicates::node_comparison_predicate::node_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Node node_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:public
boost::polygon::detail::voronoi_predicates::node_comparison_predicate::operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator() (const node_type& node1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:public	signature:(const node_type& node1, const node_type& node2) const
boost::polygon::detail::voronoi_predicates::node_comparison_predicate::predicate_	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    distance_predicate_type predicate_;$/;"	m	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:private
boost::polygon::detail::voronoi_predicates::node_comparison_predicate::site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename Node::site_type site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:public
boost::polygon::detail::voronoi_predicates::orientation_test	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef struct orientation_test {$/;"	s	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::orientation_test::COLLINEAR	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      COLLINEAR = 0,$/;"	e	enum:boost::polygon::detail::voronoi_predicates::orientation_test::Orientation
boost::polygon::detail::voronoi_predicates::orientation_test::LEFT	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      LEFT = 1$/;"	e	enum:boost::polygon::detail::voronoi_predicates::orientation_test::Orientation
boost::polygon::detail::voronoi_predicates::orientation_test::Orientation	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    enum Orientation {$/;"	g	struct:boost::polygon::detail::voronoi_predicates::orientation_test	access:public
boost::polygon::detail::voronoi_predicates::orientation_test::RIGHT	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^      RIGHT = -1,$/;"	e	enum:boost::polygon::detail::voronoi_predicates::orientation_test::Orientation
boost::polygon::detail::voronoi_predicates::orientation_test::eval	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    static Orientation eval(T value) {$/;"	f	struct:boost::polygon::detail::voronoi_predicates::orientation_test	access:public	signature:(T value)
boost::polygon::detail::voronoi_predicates::orientation_test::eval	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    static Orientation eval(const Point& point1,$/;"	f	struct:boost::polygon::detail::voronoi_predicates::orientation_test	access:public	signature:(const Point& point1, const Point& point2, const Point& point3)
boost::polygon::detail::voronoi_predicates::orientation_test::eval	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    static Orientation eval(int_x2_type dif_x1_,$/;"	f	struct:boost::polygon::detail::voronoi_predicates::orientation_test	access:public	signature:(int_x2_type dif_x1_, int_x2_type dif_y1_, int_x2_type dif_x2_, int_x2_type dif_y2_)
boost::polygon::detail::voronoi_predicates::ot	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  } ot;$/;"	t	class:boost::polygon::detail::voronoi_predicates	typeref:struct:boost::polygon::detail::voronoi_predicates::orientation_test	access:public
boost::polygon::detail::voronoi_predicates::point_comparison_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class point_comparison_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::point_comparison_predicate::operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const point_type& lhs, const point_type& rhs) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::point_comparison_predicate	access:public	signature:(const point_type& lhs, const point_type& rhs) const
boost::polygon::detail::voronoi_predicates::point_comparison_predicate::point_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Point point_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::point_comparison_predicate	access:public
boost::polygon::detail::voronoi_predicates::robust_cross_product	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  static fpt_type robust_cross_product(int_x2_type a1_,$/;"	f	class:boost::polygon::detail::voronoi_predicates	access:public	signature:(int_x2_type a1_, int_x2_type b1_, int_x2_type a2_, int_x2_type b2_)
boost::polygon::detail::voronoi_predicates::to_efpt_converter	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::to_efpt_converter_type to_efpt_converter;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::to_fpt_converter	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::to_fpt_converter_type to_fpt_converter;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::uint_x2_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::uint_x2_type uint_x2_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::detail::voronoi_predicates::ulp_cmp_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::ulp_cmp_type ulp_cmp_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
boost::polygon::direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^  class direction_1d {$/;"	c	namespace:boost::polygon
boost::polygon::direction_1d::backward	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_1d& backward() { val_ ^= 1; return *this; }$/;"	f	class:boost::polygon::direction_1d	access:public	signature:()
boost::polygon::direction_1d::direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit direction_1d(int d);$/;"	p	class:boost::polygon::direction_1d	access:private	signature:(int d)
boost::polygon::direction_1d::direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline direction_1d(const direction_2d& that);$/;"	p	class:boost::polygon::direction_1d	access:public	signature:(const direction_2d& that)
boost::polygon::direction_1d::direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline direction_1d(const direction_3d& that);$/;"	p	class:boost::polygon::direction_1d	access:public	signature:(const direction_3d& that)
boost::polygon::direction_1d::direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_1d() : val_(LOW) {}$/;"	f	class:boost::polygon::direction_1d	access:public	signature:()
boost::polygon::direction_1d::direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_1d(const direction_1d& that) : val_(that.val_) {}$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(const direction_1d& that)
boost::polygon::direction_1d::direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_1d(const direction_1d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(const direction_1d_enum val)
boost::polygon::direction_1d::direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^  direction_1d::direction_1d(const direction_2d& that) : val_(that.to_int() & 1) {}$/;"	f	class:boost::polygon::direction_1d	signature:(const direction_2d& that)
boost::polygon::direction_1d::direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^  direction_1d::direction_1d(const direction_3d& that) : val_(that.to_int() & 1) {}$/;"	f	class:boost::polygon::direction_1d	signature:(const direction_3d& that)
boost::polygon::direction_1d::get_sign	/usr/include/boost/polygon/isotropy.hpp	/^    inline int get_sign() const { return val_ * 2 - 1; }$/;"	f	class:boost::polygon::direction_1d	access:public	signature:() const
boost::polygon::direction_1d::operator !=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator!=(direction_1d d) const { return !((*this) == d); }$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(direction_1d d) const
boost::polygon::direction_1d::operator =	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_1d& operator = (const direction_1d& d) {$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(const direction_1d& d)
boost::polygon::direction_1d::operator ==	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator==(direction_1d d) const { return (val_ == d.val_); }$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(direction_1d d) const
boost::polygon::direction_1d::to_int	/usr/include/boost/polygon/isotropy.hpp	/^    inline unsigned int to_int(void) const { return val_; }$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(void) const
boost::polygon::direction_1d::val_	/usr/include/boost/polygon/isotropy.hpp	/^    unsigned int val_;$/;"	m	class:boost::polygon::direction_1d	access:private
boost::polygon::direction_1d_enum	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_1d_enum { LOW = 0, HIGH = 1,$/;"	g	namespace:boost::polygon
boost::polygon::direction_2d	/usr/include/boost/polygon/isotropy.hpp	/^  class direction_2d {$/;"	c	namespace:boost::polygon
boost::polygon::direction_2d::backward	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d backward() const {$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
boost::polygon::direction_2d::direction_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d() : val_(WEST) {}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:()
boost::polygon::direction_2d::direction_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d(const direction_2d& that) : val_(that.val_) {}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(const direction_2d& that)
boost::polygon::direction_2d::direction_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d(const direction_2d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(const direction_2d_enum val)
boost::polygon::direction_2d::get_sign	/usr/include/boost/polygon/isotropy.hpp	/^    inline int get_sign() const {return ((is_positive()) << 1) -1;}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
boost::polygon::direction_2d::is_negative	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool is_negative() const {return !is_positive();}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
boost::polygon::direction_2d::is_positive	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool is_positive() const {return (val_ & 1);}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
boost::polygon::direction_2d::left	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d left() const {return turn(HIGH);}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
boost::polygon::direction_2d::operator !=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator!=(direction_2d d) const { return !((*this) == d); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
boost::polygon::direction_2d::operator <	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator< (direction_2d d) const { return (val_ < d.val_); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
boost::polygon::direction_2d::operator <=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator<=(direction_2d d) const { return (val_ <= d.val_); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
boost::polygon::direction_2d::operator =	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d& operator=(const direction_2d& d) {$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(const direction_2d& d)
boost::polygon::direction_2d::operator ==	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator==(direction_2d d) const { return (val_ == d.val_); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
boost::polygon::direction_2d::operator >	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator> (direction_2d d) const { return (val_ > d.val_); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
boost::polygon::direction_2d::operator >=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator>=(direction_2d d) const { return (val_ >= d.val_); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
boost::polygon::direction_2d::right	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d right() const {return turn(LOW);}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
boost::polygon::direction_2d::to_int	/usr/include/boost/polygon/isotropy.hpp	/^    inline unsigned int to_int(void) const { return val_; }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(void) const
boost::polygon::direction_2d::turn	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d turn(direction_1d t) const {$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_1d t) const
boost::polygon::direction_2d::val_	/usr/include/boost/polygon/isotropy.hpp	/^    int val_;$/;"	m	class:boost::polygon::direction_2d	access:private
boost::polygon::direction_2d::~direction_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline ~direction_2d() { }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:()
boost::polygon::direction_2d_enum	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_2d_enum { WEST = 0, EAST = 1, SOUTH = 2, NORTH = 3 };$/;"	g	namespace:boost::polygon
boost::polygon::direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^  class direction_3d {$/;"	c	namespace:boost::polygon
boost::polygon::direction_3d::backward	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d backward() const {$/;"	f	class:boost::polygon::direction_3d	access:public	signature:() const
boost::polygon::direction_3d::direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d() : val_(WEST) {}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:()
boost::polygon::direction_3d::direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d(const direction_2d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(const direction_2d_enum val)
boost::polygon::direction_3d::direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d(const direction_3d& that) : val_(that.val_) {}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(const direction_3d& that)
boost::polygon::direction_3d::direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d(const direction_3d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(const direction_3d_enum val)
boost::polygon::direction_3d::direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d(direction_2d that) : val_(that.to_int()) {}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_2d that)
boost::polygon::direction_3d::get_sign	/usr/include/boost/polygon/isotropy.hpp	/^    inline int get_sign() const {return ((is_positive()) << 1) -1;}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:() const
boost::polygon::direction_3d::is_negative	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool is_negative() const {return !is_positive();}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:() const
boost::polygon::direction_3d::is_positive	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool is_positive() const {return (val_ & 1);}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:() const
boost::polygon::direction_3d::operator !=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator!=(direction_3d d) const { return !((*this) == d); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
boost::polygon::direction_3d::operator <	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator< (direction_3d d) const { return (val_ < d.val_); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
boost::polygon::direction_3d::operator <=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator<=(direction_3d d) const { return (val_ <= d.val_); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
boost::polygon::direction_3d::operator =	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d& operator=(direction_3d d) {$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d)
boost::polygon::direction_3d::operator ==	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator==(direction_3d d) const { return (val_ == d.val_); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
boost::polygon::direction_3d::operator >	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator> (direction_3d d) const { return (val_ > d.val_); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
boost::polygon::direction_3d::operator >=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator>=(direction_3d d) const { return (val_ >= d.val_); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
boost::polygon::direction_3d::to_int	/usr/include/boost/polygon/isotropy.hpp	/^    inline unsigned int to_int(void) const { return val_; }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(void) const
boost::polygon::direction_3d::val_	/usr/include/boost/polygon/isotropy.hpp	/^    int val_;$/;"	m	class:boost::polygon::direction_3d	access:private
boost::polygon::direction_3d::~direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline ~direction_3d() { }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:()
boost::polygon::direction_3d_enum	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_3d_enum { DOWN = 4, UP = 5 };$/;"	g	namespace:boost::polygon
boost::polygon::distance_squared	/usr/include/boost/polygon/point_concept.hpp	/^distance_squared(const PointType1& point1, const PointType2& point2) {$/;"	f	namespace:boost::polygon	signature:(const PointType1& point1, const PointType2& point2)
boost::polygon::distance_type_by_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct distance_type_by_domain { typedef typename coordinate_traits<coordinate_type>::coordinate_distance type; };$/;"	s	namespace:boost::polygon
boost::polygon::distance_type_by_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct distance_type_by_domain<manhattan_domain, coordinate_type> {$/;"	s	namespace:boost::polygon
boost::polygon::distance_type_by_domain::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename coordinate_traits<coordinate_type>::coordinate_difference type; };$/;"	t	struct:boost::polygon::distance_type_by_domain	access:public
boost::polygon::distance_type_by_domain::type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct distance_type_by_domain { typedef typename coordinate_traits<coordinate_type>::coordinate_distance type; };$/;"	t	struct:boost::polygon::distance_type_by_domain	access:public
boost::polygon::dummy_to_delay_instantiation	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^    struct dummy_to_delay_instantiation{$/;"	s	namespace:boost::polygon
boost::polygon::dummy_to_delay_instantiation::unit_type	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^      typedef int unit_type; \/\/ default GTL unit$/;"	t	struct:boost::polygon::dummy_to_delay_instantiation	access:public
boost::polygon::edge_utils	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct edge_utils {$/;"	s	namespace:boost::polygon
boost::polygon::edge_utils::Point	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::edge_utils	access:public
boost::polygon::edge_utils::between	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline bool between(Point pt, Point pt1, Point pt2) {$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(Point pt, Point pt1, Point pt2)
boost::polygon::edge_utils::equal_slope	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline bool equal_slope(area_type dx1, area_type dy1, area_type dx2, area_type dy2) {$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(area_type dx1, area_type dy1, area_type dx2, area_type dy2)
boost::polygon::edge_utils::equal_slope	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline bool equal_slope(const Unit& x, const Unit& y,$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(const Unit& x, const Unit& y, const Point& pt1, const Point& pt2)
boost::polygon::edge_utils::half_edge	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef std::pair<Point, Point> half_edge;$/;"	t	struct:boost::polygon::edge_utils	access:public
boost::polygon::edge_utils::less_point	/usr/include/boost/polygon/polygon_traits.hpp	/^    class less_point : public std::binary_function<Point, Point, bool> {$/;"	c	struct:boost::polygon::edge_utils	inherits:std::binary_function	access:public
boost::polygon::edge_utils::less_point::less_point	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline less_point() {}$/;"	f	class:boost::polygon::edge_utils::less_point	access:public	signature:()
boost::polygon::edge_utils::less_point::operator ()	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline bool operator () (const Point& pt1, const Point& pt2) const {$/;"	f	class:boost::polygon::edge_utils::less_point	access:public	signature:(const Point& pt1, const Point& pt2) const
boost::polygon::edge_utils::less_slope	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline bool less_slope(area_type dx1, area_type dy1, area_type dx2, area_type dy2) {$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(area_type dx1, area_type dy1, area_type dx2, area_type dy2)
boost::polygon::edge_utils::less_slope	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline bool less_slope(const Unit& x, const Unit& y,$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(const Unit& x, const Unit& y, const Point& pt1, const Point& pt2)
boost::polygon::edge_utils::on_above_or_below	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline int on_above_or_below(Point pt, const half_edge& he) {$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(Point pt, const half_edge& he)
boost::polygon::empty	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  empty(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::empty	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  empty(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::empty	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  empty(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::encompass	/usr/include/boost/polygon/interval_concept.hpp	/^>::type encompass($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type value)
boost::polygon::encompass	/usr/include/boost/polygon/interval_concept.hpp	/^>::type encompass(IntervalType1& interval1, const IntervalType2& interval2) {$/;"	f	namespace:boost::polygon	signature:(IntervalType1& interval1, const IntervalType2& interval2)
boost::polygon::encompass	/usr/include/boost/polygon/rectangle_concept.hpp	/^  encompass(rectangle_type& rectangle, const interval_type& b, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const interval_type& b, orientation_2d orient)
boost::polygon::encompass	/usr/include/boost/polygon/rectangle_concept.hpp	/^  encompass(rectangle_type_1& rectangle, const point_type& b) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const point_type& b)
boost::polygon::encompass	/usr/include/boost/polygon/rectangle_concept.hpp	/^  encompass(rectangle_type_1& rectangle, const rectangle_type_2& b) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& b)
boost::polygon::end_45_set_data	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  end_45_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::end_90_set_data	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  end_90_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::end_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^  end_compact(const T& polygon,$/;"	f	namespace:boost::polygon	signature:(const T& polygon, typename enable_if< typename gtl_and <typename is_polygon_with_holes_type<T>::type, typename gtl_same_type<typename geometry_domain<typename geometry_concept<T>::type>::type, manhattan_domain>::type>::type>::type * = 0 )
boost::polygon::end_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^  end_holes(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
boost::polygon::end_points	/usr/include/boost/polygon/polygon_traits.hpp	/^  end_points(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
boost::polygon::end_polygon_set_data	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  end_polygon_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::envelope_segments	/usr/include/boost/polygon/segment_utils.hpp	/^envelope_segments($/;"	f	namespace:boost::polygon	signature:( Rectangle& rect, SegmentIterator first, SegmentIterator last)
boost::polygon::equivalence	/usr/include/boost/polygon/interval_concept.hpp	/^>::type equivalence($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2)
boost::polygon::equivalence	/usr/include/boost/polygon/point_concept.hpp	/^bool>::type equivalence($/;"	f	namespace:boost::polygon	signature:( const PointType1& point1, const PointType2& point2)
boost::polygon::equivalence	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  equivalence(const polygon_set_type_1& lvalue,$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
boost::polygon::equivalence	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  equivalence(const polygon_set_type_1& lvalue,$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
boost::polygon::equivalence	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  equivalence(const polygon_set_type_1& lvalue,$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
boost::polygon::equivalence	/usr/include/boost/polygon/rectangle_concept.hpp	/^  equivalence(const T& rect1, const T2& rect2) {$/;"	f	namespace:boost::polygon	signature:(const T& rect1, const T2& rect2)
boost::polygon::equivalence	/usr/include/boost/polygon/segment_concept.hpp	/^bool>::type equivalence(const Segment1& segment1, const Segment2& segment2) {$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2)
boost::polygon::euclidean_distance	/usr/include/boost/polygon/interval_concept.hpp	/^>::type euclidean_distance($/;"	f	namespace:boost::polygon	signature:( const IntervalType& interval, typename interval_coordinate_type<IntervalType>::type position)
boost::polygon::euclidean_distance	/usr/include/boost/polygon/interval_concept.hpp	/^>::type euclidean_distance($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2)
boost::polygon::euclidean_distance	/usr/include/boost/polygon/isotropy.hpp	/^  euclidean_distance(const coordinate_type_1& lvalue, const coordinate_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(const coordinate_type_1& lvalue, const coordinate_type_2& rvalue)
boost::polygon::euclidean_distance	/usr/include/boost/polygon/point_concept.hpp	/^euclidean_distance($/;"	f	namespace:boost::polygon	signature:( const PointType1& point1, const PointType2& point2, orientation_2d orient)
boost::polygon::euclidean_distance	/usr/include/boost/polygon/point_concept.hpp	/^euclidean_distance(const PointType1& point1, const PointType2& point2) {$/;"	f	namespace:boost::polygon	signature:(const PointType1& point1, const PointType2& point2)
boost::polygon::euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  euclidean_distance(const rectangle_type& lvalue, const point_type& rvalue, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& lvalue, const point_type& rvalue, orientation_2d orient)
boost::polygon::euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  euclidean_distance(const rectangle_type& lvalue, const rectangle_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& lvalue, const rectangle_type_2& rvalue)
boost::polygon::euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  euclidean_distance(const rectangle_type& lvalue, const rectangle_type_2& rvalue, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& lvalue, const rectangle_type_2& rvalue, orientation_2d orient)
boost::polygon::euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  euclidean_distance(rectangle_type& lvalue, const point_type& rvalue) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& lvalue, const point_type& rvalue)
boost::polygon::euclidean_distance	/usr/include/boost/polygon/segment_concept.hpp	/^euclidean_distance(const Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment, const Point& point)
boost::polygon::euclidean_distance	/usr/include/boost/polygon/segment_concept.hpp	/^euclidean_distance(const Segment1& segment1, const Segment2& segment2) {$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2)
boost::polygon::execute_boolean_op	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  void execute_boolean_op(value_type& output_, const geometry_type_1& lvalue_, const geometry_type_2& rvalue_) {$/;"	f	namespace:boost::polygon	signature:(value_type& output_, const geometry_type_1& lvalue_, const geometry_type_2& rvalue_)
boost::polygon::extents	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  extents(rectangle_type& extents_rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& extents_rectangle, const polygon_set_type& polygon_set)
boost::polygon::extents	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  extents(rectangle_type& extents_rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& extents_rectangle, const polygon_set_type& polygon_set)
boost::polygon::extents	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  extents(rectangle_type& extents_rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& extents_rectangle, const polygon_set_type& polygon_set)
boost::polygon::extents	/usr/include/boost/polygon/polygon_traits.hpp	/^  extents(T1& bounding_box, const T2& polygon) {$/;"	f	namespace:boost::polygon	signature:(T1& bounding_box, const T2& polygon)
boost::polygon::flip	/usr/include/boost/polygon/interval_concept.hpp	/^IntervalType>::type& flip($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type axis = 0)
boost::polygon::form_rectangles	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  void form_rectangles(output_container& output, iterator_type begin, iterator_type end,$/;"	f	namespace:boost::polygon	signature:(output_container& output, iterator_type begin, iterator_type end, orientation_2d orient, rectangle_concept )
boost::polygon::forty_five_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct forty_five_domain {};$/;"	s	namespace:boost::polygon
boost::polygon::fracture_holes_45_by_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  bool fracture_holes_45_by_concept() { return false; }$/;"	f	namespace:boost::polygon	signature:()
boost::polygon::fracture_holes_45_by_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  inline bool fracture_holes_45_by_concept<polygon_45_concept>() { return true; }$/;"	f	namespace:boost::polygon	signature:()
boost::polygon::fracture_holes_option_by_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct fracture_holes_option_by_type {$/;"	s	namespace:boost::polygon
boost::polygon::fracture_holes_option_by_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct fracture_holes_option_by_type<polygon_45_with_holes_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::fracture_holes_option_by_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct fracture_holes_option_by_type<polygon_with_holes_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::fracture_holes_option_by_type::value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static const bool value = false;$/;"	m	struct:boost::polygon::fracture_holes_option_by_type	access:public
boost::polygon::fracture_holes_option_by_type::value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static const bool value = true;$/;"	m	struct:boost::polygon::fracture_holes_option_by_type	access:public
boost::polygon::general_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct general_domain {};$/;"	s	namespace:boost::polygon
boost::polygon::generalized_intersect	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& generalized_intersect($/;"	f	namespace:boost::polygon	signature:( IntervalType1& lvalue, const IntervalType2& rvalue)
boost::polygon::generalized_intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  generalized_intersect(rectangle_type_1& rectangle, const rectangle_type_2& b) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& b)
boost::polygon::geometry_concept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct geometry_concept<PolyLine45HoleData<T> > { typedef polygon_45_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct geometry_concept<PolyLine45PolygonData<T> > { typedef polygon_45_with_holes_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct geometry_concept<polygon_45_set_view<ltype, rtype, op_type> > { typedef polygon_45_set_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct geometry_concept<polygon_90_set_view<ltype, rtype, op_type> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct geometry_concept<poly_line_arbitrary_hole_data<T> > { typedef polygon_45_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct geometry_concept<poly_line_arbitrary_polygon_data<T> > { typedef polygon_45_with_holes_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct geometry_concept<polygon_formation::PolyLineHoleData<orientT, Unit> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct geometry_concept<polygon_formation::PolyLinePolygonWithHolesData<orientT, Unit> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  struct geometry_concept<polygon_set_view<ltype, rtype, op_type> > { typedef polygon_set_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/interval_data.hpp	/^struct geometry_concept< interval_data<CType> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept { typedef undefined_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<double> { typedef coordinate_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<float> { typedef coordinate_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<int> { typedef coordinate_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<long double> { typedef coordinate_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<polygon_long_long_type> { typedef coordinate_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/point_data.hpp	/^struct geometry_concept< point_data<CType> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct geometry_concept<view_of<polygon_90_set_concept, T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  struct geometry_concept<polygon_45_set_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct geometry_concept<polygon_90_set_data<T> > { typedef polygon_90_set_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct geometry_concept<view_of<polygon_45_set_concept, T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_set_data.hpp	/^  struct geometry_concept<polygon_set_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_45_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_45_with_holes_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_90_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_90_with_holes_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_with_holes_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<polygon_45_concept, T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<polygon_45_with_holes_concept, T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<polygon_90_concept, T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<polygon_90_with_holes_concept, T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<polygon_concept, T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<rectangle_concept, T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct geometry_concept<rectangle_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept	/usr/include/boost/polygon/segment_data.hpp	/^struct geometry_concept<segment_data<CType> > {$/;"	s	namespace:boost::polygon
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct geometry_concept<PolyLine45HoleData<T> > { typedef polygon_45_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct geometry_concept<PolyLine45PolygonData<T> > { typedef polygon_45_with_holes_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct geometry_concept<polygon_45_set_view<ltype, rtype, op_type> > { typedef polygon_45_set_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef polygon_90_set_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct geometry_concept<poly_line_arbitrary_hole_data<T> > { typedef polygon_45_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct geometry_concept<poly_line_arbitrary_polygon_data<T> > { typedef polygon_45_with_holes_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef polygon_90_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef polygon_90_with_holes_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  struct geometry_concept<polygon_set_view<ltype, rtype, op_type> > { typedef polygon_set_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/interval_data.hpp	/^  typedef interval_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept { typedef undefined_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<double> { typedef coordinate_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<float> { typedef coordinate_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<int> { typedef coordinate_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<long double> { typedef coordinate_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<polygon_long_long_type> { typedef coordinate_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/point_data.hpp	/^  typedef point_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef polygon_90_set_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef polygon_45_set_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct geometry_concept<polygon_90_set_data<T> > { typedef polygon_90_set_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef polygon_45_set_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef polygon_set_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_45_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_45_with_holes_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_90_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_90_with_holes_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_with_holes_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef rectangle_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^    typedef rectangle_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_concept::type	/usr/include/boost/polygon/segment_data.hpp	/^  typedef segment_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
boost::polygon::geometry_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_domain { typedef general_domain type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_45_concept> { typedef forty_five_domain type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_45_with_holes_concept> { typedef forty_five_domain type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_90_concept> { typedef manhattan_domain type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_90_with_holes_concept> { typedef manhattan_domain type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_domain	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct geometry_domain<rectangle_concept> { typedef manhattan_domain type; };$/;"	s	namespace:boost::polygon
boost::polygon::geometry_domain::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_domain { typedef general_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
boost::polygon::geometry_domain::type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_45_concept> { typedef forty_five_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
boost::polygon::geometry_domain::type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_45_with_holes_concept> { typedef forty_five_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
boost::polygon::geometry_domain::type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_90_concept> { typedef manhattan_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
boost::polygon::geometry_domain::type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_90_with_holes_concept> { typedef manhattan_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
boost::polygon::geometry_domain::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct geometry_domain<rectangle_concept> { typedef manhattan_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
boost::polygon::get	/usr/include/boost/polygon/interval_concept.hpp	/^>::type get(const IntervalType& interval, direction_1d dir) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval, direction_1d dir)
boost::polygon::get	/usr/include/boost/polygon/point_concept.hpp	/^>::type get(const PointType& point, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(const PointType& point, orientation_2d orient)
boost::polygon::get	/usr/include/boost/polygon/rectangle_concept.hpp	/^  get(const T& rectangle, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(const T& rectangle, orientation_2d orient)
boost::polygon::get	/usr/include/boost/polygon/rectangle_concept.hpp	/^  get(const rectangle_type& rectangle, orientation_2d orient, direction_1d dir) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle, orientation_2d orient, direction_1d dir)
boost::polygon::get	/usr/include/boost/polygon/segment_concept.hpp	/^get(const Segment& segment, direction_1d dir) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment, direction_1d dir)
boost::polygon::getEdge45Direction	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline unsigned int getEdge45Direction(const point_data<Unit>& pt1, const point_data<Unit>& pt2) {$/;"	f	namespace:boost::polygon	signature:(const point_data<Unit>& pt1, const point_data<Unit>& pt2)
boost::polygon::getEdge45NormalDirection	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline unsigned int getEdge45NormalDirection(unsigned int dir, int multiplier) {$/;"	f	namespace:boost::polygon	signature:(unsigned int dir, int multiplier)
boost::polygon::getIntersectionPoint	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline point_data<Unit> getIntersectionPoint(const point_data<Unit>& pt1, unsigned int slope1,$/;"	f	namespace:boost::polygon	signature:(const point_data<Unit>& pt1, unsigned int slope1, const point_data<Unit>& pt2, unsigned int slope2)
boost::polygon::get_45_polygons_T	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  void get_45_polygons_T(T& t, iT begin, iT end) {$/;"	f	namespace:boost::polygon	signature:(T& t, iT begin, iT end)
boost::polygon::get_90_dispatch	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  void get_90_dispatch(output_container_type& output, const pst& ps,$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const pst& ps, orientation_2d orient, polygon_90_concept tag)
boost::polygon::get_90_dispatch	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  void get_90_dispatch(output_container_type& output, const pst& ps,$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const pst& ps, orientation_2d orient, polygon_90_with_holes_concept tag)
boost::polygon::get_90_dispatch	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  void get_90_dispatch(output_container_type& output, const pst& ps,$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const pst& ps, orientation_2d orient, rectangle_concept )
boost::polygon::get_coordinate_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct get_coordinate_type<view_of<polygon_90_set_concept, T>, polygon_90_set_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::get_coordinate_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_coordinate_type {$/;"	s	namespace:boost::polygon
boost::polygon::get_coordinate_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_coordinate_type<T, undefined_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::get_coordinate_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct get_coordinate_type<view_of<polygon_45_set_concept, T>, polygon_45_set_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::get_coordinate_type::traits_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename traits_by_concept<T, T2>::type traits_type;$/;"	t	struct:boost::polygon::get_coordinate_type	access:public
boost::polygon::get_coordinate_type::type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename view_of<polygon_90_set_concept, T>::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type	access:public
boost::polygon::get_coordinate_type::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^                                                                     <typename T::iterator>::value_type>::type>::type type; };$/;"	t	struct:boost::polygon::get_coordinate_type	access:public
boost::polygon::get_coordinate_type::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename traits_type::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type	access:public
boost::polygon::get_coordinate_type::type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename view_of<polygon_45_set_concept, T>::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type	access:public
boost::polygon::get_coordinate_type_2	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_coordinate_type_2 {$/;"	s	namespace:boost::polygon
boost::polygon::get_coordinate_type_2::traits_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename traits_by_concept<T, T2>::type traits_type;$/;"	t	struct:boost::polygon::get_coordinate_type_2	access:public
boost::polygon::get_coordinate_type_2::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename traits_type::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type_2	access:public
boost::polygon::get_coordinate_type_for_rectangles	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  struct get_coordinate_type_for_rectangles {$/;"	s	namespace:boost::polygon
boost::polygon::get_coordinate_type_for_rectangles	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  struct get_coordinate_type_for_rectangles<T, rectangle_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::get_coordinate_type_for_rectangles::type	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef typename polygon_traits<T>::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type_for_rectangles	access:public
boost::polygon::get_coordinate_type_for_rectangles::type	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef typename rectangle_traits<T>::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type_for_rectangles	access:public
boost::polygon::get_corner	/usr/include/boost/polygon/rectangle_concept.hpp	/^  get_corner(point_type& corner_point, const rectangle_type& rectangle, direction_2d direction_facing, direction_1d direction_turning) {$/;"	f	namespace:boost::polygon	signature:(point_type& corner_point, const rectangle_type& rectangle, direction_2d direction_facing, direction_1d direction_turning)
boost::polygon::get_error_rects	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void get_error_rects(cT& posE, cT& negE, const pT& p) {$/;"	f	namespace:boost::polygon	signature:(cT& posE, cT& negE, const pT& p)
boost::polygon::get_error_rects_shell	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void get_error_rects_shell(cT& posE, cT& negE, iT beginr, iT endr) {$/;"	f	namespace:boost::polygon	signature:(cT& posE, cT& negE, iT beginr, iT endr)
boost::polygon::get_half	/usr/include/boost/polygon/interval_concept.hpp	/^>::type get_half(const IntervalType& interval, direction_1d dir) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval, direction_1d dir)
boost::polygon::get_half	/usr/include/boost/polygon/rectangle_concept.hpp	/^  get_half(const rectangle_type& rectangle, direction_2d dir) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle, direction_2d dir)
boost::polygon::get_iterator_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_iterator_type {$/;"	s	namespace:boost::polygon
boost::polygon::get_iterator_type::begin	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type begin(const T& t) { return indirect_type::begin(t); }$/;"	f	struct:boost::polygon::get_iterator_type	access:public	signature:(const T& t)
boost::polygon::get_iterator_type::end	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type end(const T& t) { return indirect_type::end(t); }$/;"	f	struct:boost::polygon::get_iterator_type	access:public	signature:(const T& t)
boost::polygon::get_iterator_type::indirect_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef get_iterator_type_2<T, typename geometry_concept<T>::type> indirect_type;$/;"	t	struct:boost::polygon::get_iterator_type	access:public
boost::polygon::get_iterator_type::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename indirect_type::type type;$/;"	t	struct:boost::polygon::get_iterator_type	access:public
boost::polygon::get_iterator_type_2	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct get_iterator_type_2<view_of<polygon_90_set_concept, T>, polygon_90_set_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::get_iterator_type_2	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_iterator_type_2 {$/;"	s	namespace:boost::polygon
boost::polygon::get_iterator_type_2	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_iterator_type_2<T, undefined_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::get_iterator_type_2	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct get_iterator_type_2<view_of<polygon_45_set_concept, T>, polygon_45_set_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::get_iterator_type_2::begin	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static type begin(const view_of<polygon_90_set_concept, T>& t) { return t.begin(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const view_of<polygon_90_set_concept, T>& t)
boost::polygon::get_iterator_type_2::begin	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type begin(const T& t) { return &t; }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const T& t)
boost::polygon::get_iterator_type_2::begin	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type begin(const T& t) { return t.begin(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const T& t)
boost::polygon::get_iterator_type_2::begin	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static type begin(const view_of<polygon_45_set_concept, T>& t) { return t.begin(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const view_of<polygon_45_set_concept, T>& t)
boost::polygon::get_iterator_type_2::end	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static type end(const view_of<polygon_90_set_concept, T>& t) { return t.end(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const view_of<polygon_90_set_concept, T>& t)
boost::polygon::get_iterator_type_2::end	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type end(const T& t) { const T* tp = &t; ++tp; return tp; }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const T& t)
boost::polygon::get_iterator_type_2::end	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type end(const T& t) { return t.end(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const T& t)
boost::polygon::get_iterator_type_2::end	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static type end(const view_of<polygon_45_set_concept, T>& t) { return t.end(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const view_of<polygon_45_set_concept, T>& t)
boost::polygon::get_iterator_type_2::type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename view_of<polygon_90_set_concept, T>::iterator_type type;$/;"	t	struct:boost::polygon::get_iterator_type_2	access:public
boost::polygon::get_iterator_type_2::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef const T* type;$/;"	t	struct:boost::polygon::get_iterator_type_2	access:public
boost::polygon::get_iterator_type_2::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename T::const_iterator type;$/;"	t	struct:boost::polygon::get_iterator_type_2	access:public
boost::polygon::get_iterator_type_2::type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename view_of<polygon_45_set_concept, T>::iterator_type type;$/;"	t	struct:boost::polygon::get_iterator_type_2	access:public
boost::polygon::get_max_rectangles	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  get_max_rectangles(output_container_type& output, const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set)
boost::polygon::get_polygons	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  unsigned int get_polygons(output_container& container, iterator_type begin, iterator_type end,$/;"	f	namespace:boost::polygon	signature:(output_container& container, iterator_type begin, iterator_type end, orientation_2d orient, bool fracture_holes, concept_type )
boost::polygon::get_rectangles	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  get_rectangles(output_container_type& output, const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set)
boost::polygon::get_rectangles	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  get_rectangles(output_container_type& output, const polygon_set_type& polygon_set, orientation_2d slicing_orientation) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set, orientation_2d slicing_orientation)
boost::polygon::get_trapezoids	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  get_trapezoids(output_container_type& output, const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set)
boost::polygon::get_trapezoids	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  get_trapezoids(output_container_type& output, const polygon_set_type& polygon_set, orientation_2d slicing_orientation) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set, orientation_2d slicing_orientation)
boost::polygon::get_trapezoids	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  get_trapezoids(output_container_type& output, const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set)
boost::polygon::get_trapezoids	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  get_trapezoids(output_container_type& output, const polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set, orientation_2d orient)
boost::polygon::get_void	/usr/include/boost/polygon/polygon_traits.hpp	/^  template <> struct get_void<gtl_yes> { typedef void type; };$/;"	s	namespace:boost::polygon
boost::polygon::get_void	/usr/include/boost/polygon/polygon_traits.hpp	/^  template <typename T> struct get_void {};$/;"	s	namespace:boost::polygon
boost::polygon::get_void::type	/usr/include/boost/polygon/polygon_traits.hpp	/^  template <> struct get_void<gtl_yes> { typedef void type; };$/;"	t	struct:boost::polygon::get_void	access:public
boost::polygon::gmp_int	/usr/include/boost/polygon/gmp_override.hpp	/^  class gmp_int {$/;"	c	namespace:boost::polygon
boost::polygon::gmp_int::get_d	/usr/include/boost/polygon/gmp_override.hpp	/^    inline double get_d() const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:() const
boost::polygon::gmp_int::get_den	/usr/include/boost/polygon/gmp_override.hpp	/^    inline int get_den() const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:() const
boost::polygon::gmp_int::get_num	/usr/include/boost/polygon/gmp_override.hpp	/^    inline int get_num() const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:() const
boost::polygon::gmp_int::gmp_int	/usr/include/boost/polygon/gmp_override.hpp	/^    explicit inline gmp_int(long input) : v_(input) {}$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(long input)
boost::polygon::gmp_int::gmp_int	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int() {}$/;"	f	class:boost::polygon::gmp_int	access:public	signature:()
boost::polygon::gmp_int::gmp_int	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int(const gmp_int& input) : v_(input.v_) {}$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& input)
boost::polygon::gmp_int::gmp_int	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int(const mpq_class& input) : v_(input) {}$/;"	f	class:boost::polygon::gmp_int	access:private	signature:(const mpq_class& input)
boost::polygon::gmp_int::operator !=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator!=(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
boost::polygon::gmp_int::operator *	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator*(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
boost::polygon::gmp_int::operator *=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator*=(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
boost::polygon::gmp_int::operator +	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator+(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
boost::polygon::gmp_int::operator ++	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator++(int) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(int)
boost::polygon::gmp_int::operator ++	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator++() {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:()
boost::polygon::gmp_int::operator +=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator+=(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
boost::polygon::gmp_int::operator -	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator-(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
boost::polygon::gmp_int::operator --	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator--(int) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(int)
boost::polygon::gmp_int::operator --	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator--() {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:()
boost::polygon::gmp_int::operator -=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator-=(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
boost::polygon::gmp_int::operator /	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator\/(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
boost::polygon::gmp_int::operator /=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator\/=(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
boost::polygon::gmp_int::operator <	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator<(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
boost::polygon::gmp_int::operator <=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator<=(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
boost::polygon::gmp_int::operator =	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator=(const gmp_int& that) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that)
boost::polygon::gmp_int::operator =	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator=(long that) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(long that)
boost::polygon::gmp_int::operator ==	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator==(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
boost::polygon::gmp_int::operator >	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator>(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
boost::polygon::gmp_int::operator >=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator>=(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
boost::polygon::gmp_int::operator int	/usr/include/boost/polygon/gmp_override.hpp	/^    inline operator int() const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:() const
boost::polygon::gmp_int::v_	/usr/include/boost/polygon/gmp_override.hpp	/^    mpq_class v_;$/;"	m	class:boost::polygon::gmp_int	access:private
boost::polygon::grow_and	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
boost::polygon::grow_and	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set, direction_2d dir,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, direction_2d dir, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
boost::polygon::grow_and	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
boost::polygon::grow_and	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type low_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type high_bloating)
boost::polygon::grow_and	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
boost::polygon::grow_and	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type west_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type east_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type south_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type north_bloating)
boost::polygon::gtl_and	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and : gtl_and_c<T::value, T2::value> {};$/;"	s	namespace:boost::polygon	inherits:gtl_and_c
boost::polygon::gtl_and	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and : mpl::and_<T, T2> {};$/;"	s	namespace:boost::polygon	inherits:mpl::and_
boost::polygon::gtl_and_3	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_3 : mpl::and_<T, T2, T3> {};$/;"	s	namespace:boost::polygon	inherits:mpl::and_
boost::polygon::gtl_and_3	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_3 { typedef typename gtl_and<$/;"	s	namespace:boost::polygon
boost::polygon::gtl_and_3::type	/usr/include/boost/polygon/isotropy.hpp	/^                       T, typename gtl_and<T2, T3>::type>::type type; };$/;"	t	struct:boost::polygon::gtl_and_3	access:public
boost::polygon::gtl_and_4	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_4 : mpl::and_<T, T2, T3, T4> {};$/;"	s	namespace:boost::polygon	inherits:mpl::and_
boost::polygon::gtl_and_4	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_4 { typedef typename gtl_and_3<$/;"	s	namespace:boost::polygon
boost::polygon::gtl_and_4::type	/usr/include/boost/polygon/isotropy.hpp	/^                       T, T2, typename gtl_and<T3, T4>::type>::type type; };$/;"	t	struct:boost::polygon::gtl_and_4	access:public
boost::polygon::gtl_and_c	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_c { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
boost::polygon::gtl_and_c	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_c<true, true> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::gtl_and_c::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_c { typedef gtl_no type; };$/;"	t	struct:boost::polygon::gtl_and_c	access:public
boost::polygon::gtl_and_c::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_c<true, true> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::gtl_and_c	access:public
boost::polygon::gtl_different_type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_different_type { typedef typename gtl_not<typename gtl_same_type<T, T2>::type>::type type; };$/;"	s	namespace:boost::polygon
boost::polygon::gtl_different_type::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_different_type { typedef typename gtl_not<typename gtl_same_type<T, T2>::type>::type type; };$/;"	t	struct:boost::polygon::gtl_different_type	access:public
boost::polygon::gtl_if	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_if {$/;"	s	namespace:boost::polygon
boost::polygon::gtl_if	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_if<gtl_yes> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::gtl_if::type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef gtl_no type;$/;"	t	struct:boost::polygon::gtl_if	access:public
boost::polygon::gtl_if::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_if<gtl_yes> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::gtl_if	access:public
boost::polygon::gtl_ifelse	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct gtl_ifelse {};$/;"	s	namespace:boost::polygon
boost::polygon::gtl_ifelse	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct gtl_ifelse<gtl_no, T_IF, T_ELSE> {$/;"	s	namespace:boost::polygon
boost::polygon::gtl_ifelse	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct gtl_ifelse<gtl_yes, T_IF, T_ELSE> {$/;"	s	namespace:boost::polygon
boost::polygon::gtl_ifelse::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef T_ELSE type;$/;"	t	struct:boost::polygon::gtl_ifelse	access:public
boost::polygon::gtl_ifelse::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef T_IF type;$/;"	t	struct:boost::polygon::gtl_ifelse	access:public
boost::polygon::gtl_no	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_no : mpl::bool_<false> {};$/;"	s	namespace:boost::polygon	inherits:mpl::bool_
boost::polygon::gtl_no	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_no { static const bool value = false; };$/;"	s	namespace:boost::polygon
boost::polygon::gtl_no::value	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_no { static const bool value = false; };$/;"	m	struct:boost::polygon::gtl_no	access:public
boost::polygon::gtl_not	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_not { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
boost::polygon::gtl_not	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_not<gtl_no> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::gtl_not::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_not { typedef gtl_no type; };$/;"	t	struct:boost::polygon::gtl_not	access:public
boost::polygon::gtl_not::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_not<gtl_no> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::gtl_not	access:public
boost::polygon::gtl_or	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::gtl_or	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or<T, T> { typedef T type; };$/;"	s	namespace:boost::polygon
boost::polygon::gtl_or::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::gtl_or	access:public
boost::polygon::gtl_or::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or<T, T> { typedef T type; };$/;"	t	struct:boost::polygon::gtl_or	access:public
boost::polygon::gtl_or_3	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or_3 { typedef typename gtl_or<$/;"	s	namespace:boost::polygon
boost::polygon::gtl_or_3::type	/usr/include/boost/polygon/isotropy.hpp	/^                      T, typename gtl_or<T2, T3>::type>::type type; };$/;"	t	struct:boost::polygon::gtl_or_3	access:public
boost::polygon::gtl_or_4	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or_4 { typedef typename gtl_or<$/;"	s	namespace:boost::polygon
boost::polygon::gtl_or_4::type	/usr/include/boost/polygon/isotropy.hpp	/^                      T, typename gtl_or_3<T2, T3, T4>::type>::type type; };$/;"	t	struct:boost::polygon::gtl_or_4	access:public
boost::polygon::gtl_same_type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_same_type { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
boost::polygon::gtl_same_type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_same_type<T, T> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::gtl_same_type::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_same_type { typedef gtl_no type; };$/;"	t	struct:boost::polygon::gtl_same_type	access:public
boost::polygon::gtl_same_type::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_same_type<T, T> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::gtl_same_type	access:public
boost::polygon::gtl_yes	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_yes : mpl::bool_<true> {};$/;"	s	namespace:boost::polygon	inherits:mpl::bool_
boost::polygon::gtl_yes	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_yes { typedef gtl_yes type;$/;"	s	namespace:boost::polygon
boost::polygon::gtl_yes::type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_yes { typedef gtl_yes type;$/;"	t	struct:boost::polygon::gtl_yes	access:public
boost::polygon::gtl_yes::value	/usr/include/boost/polygon/isotropy.hpp	/^    static const bool value = true; };$/;"	m	struct:boost::polygon::gtl_yes	access:public
boost::polygon::guess_orientation	/usr/include/boost/polygon/rectangle_concept.hpp	/^  guess_orientation(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boost::polygon::half_perimeter	/usr/include/boost/polygon/rectangle_concept.hpp	/^  half_perimeter(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boost::polygon::handleResizingEdge45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void handleResizingEdge45(polygon_45_set_data<Unit>& sizingSet, point_data<Unit> first,$/;"	f	namespace:boost::polygon	signature:(polygon_45_set_data<Unit>& sizingSet, point_data<Unit> first, point_data<Unit> second, Unit resizing, RoundingOption rounding)
boost::polygon::handleResizingEdge45_SQRT1OVER2	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void handleResizingEdge45_SQRT1OVER2(polygon_45_set_data<Unit>& sizingSet, point_data<Unit> first,$/;"	f	namespace:boost::polygon	signature:(polygon_45_set_data<Unit>& sizingSet, point_data<Unit> first, point_data<Unit> second, Unit resizing, CornerOption corner)
boost::polygon::handleResizingVertex45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void handleResizingVertex45(polygon_45_set_data<Unit>& sizingSet, const point_data<Unit>& first,$/;"	f	namespace:boost::polygon	signature:(polygon_45_set_data<Unit>& sizingSet, const point_data<Unit>& first, const point_data<Unit>& second, const point_data<Unit>& third, Unit resizing, RoundingOption rounding, CornerOption corner, int multiplier)
boost::polygon::high	/usr/include/boost/polygon/interval_concept.hpp	/^>::type high(IntervalType& interval,$/;"	f	namespace:boost::polygon	signature:(IntervalType& interval, typename interval_mutable_traits<IntervalType>::coordinate_type value)
boost::polygon::high	/usr/include/boost/polygon/interval_concept.hpp	/^>::type high(const IntervalType& interval) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval)
boost::polygon::high	/usr/include/boost/polygon/segment_concept.hpp	/^typename segment_point_type<Segment>::type>::type high(const Segment& segment) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment)
boost::polygon::high	/usr/include/boost/polygon/segment_concept.hpp	/^void>::type high(Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Point& point)
boost::polygon::high_precision_type	/usr/include/boost/polygon/gmp_override.hpp	/^  struct high_precision_type<int> {$/;"	s	namespace:boost::polygon
boost::polygon::high_precision_type	/usr/include/boost/polygon/isotropy.hpp	/^  struct high_precision_type {$/;"	s	namespace:boost::polygon
boost::polygon::high_precision_type::type	/usr/include/boost/polygon/gmp_override.hpp	/^    typedef mpq_class type;$/;"	t	struct:boost::polygon::high_precision_type	access:public
boost::polygon::high_precision_type::type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double type;$/;"	t	struct:boost::polygon::high_precision_type	access:public
boost::polygon::horizontal	/usr/include/boost/polygon/rectangle_concept.hpp	/^  horizontal(T& rectangle, const T2& interval) {$/;"	f	namespace:boost::polygon	signature:(T& rectangle, const T2& interval)
boost::polygon::horizontal	/usr/include/boost/polygon/rectangle_concept.hpp	/^  horizontal(const T& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const T& rectangle)
boost::polygon::insert	/usr/include/boost/polygon/voronoi.hpp	/^insert(PointIterator first, const PointIterator last, VB* vb) {$/;"	f	namespace:boost::polygon	signature:(PointIterator first, const PointIterator last, VB* vb)
boost::polygon::insert	/usr/include/boost/polygon/voronoi.hpp	/^insert(SegmentIterator first, SegmentIterator last, VB* vb) {$/;"	f	namespace:boost::polygon	signature:(SegmentIterator first, SegmentIterator last, VB* vb)
boost::polygon::insert	/usr/include/boost/polygon/voronoi.hpp	/^insert(const Point& point, VB* vb) {$/;"	f	namespace:boost::polygon	signature:(const Point& point, VB* vb)
boost::polygon::insert	/usr/include/boost/polygon/voronoi.hpp	/^insert(const Segment& segment, VB* vb) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment, VB* vb)
boost::polygon::insert_into_view_arg	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  inline void insert_into_view_arg(value_type& dest, const arg_type& arg, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(value_type& dest, const arg_type& arg, orientation_2d orient)
boost::polygon::insert_into_view_arg	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  inline void insert_into_view_arg(value_type& dest, const arg_type& arg, orientation_2d orient);$/;"	p	namespace:boost::polygon	signature:(value_type& dest, const arg_type& arg, orientation_2d orient)
boost::polygon::insert_into_view_arg	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  inline void insert_into_view_arg(value_type& dest, const arg_type& arg) {$/;"	f	namespace:boost::polygon	signature:(value_type& dest, const arg_type& arg)
boost::polygon::insert_into_view_arg	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  inline void insert_into_view_arg(value_type& dest, const arg_type& arg);$/;"	p	namespace:boost::polygon	signature:(value_type& dest, const arg_type& arg)
boost::polygon::insert_rectangle_into_vector_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void insert_rectangle_into_vector_45(cT& output, const rT& rect, bool is_hole) {$/;"	f	namespace:boost::polygon	signature:(cT& output, const rT& rect, bool is_hole)
boost::polygon::insert_vertex_half_edge_45_pair_into_vector	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  bool insert_vertex_half_edge_45_pair_into_vector(cT& output,$/;"	f	namespace:boost::polygon	signature:(cT& output, const pT& pt1, pT& pt2, const pT& pt3, direction_1d wdir)
boost::polygon::interact	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  interact(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2)
boost::polygon::interact	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  interact(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2)
boost::polygon::interact	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  interact(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2)
boost::polygon::intersect	/usr/include/boost/polygon/interval_concept.hpp	/^>::type intersect($/;"	f	namespace:boost::polygon	signature:( IntervalType1& lvalue, const IntervalType2& rvalue, bool consider_touch = true)
boost::polygon::intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  intersect(rectangle_type& rectangle, const interval_type& b,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const interval_type& b, orientation_2d orient, bool consider_touch = true)
boost::polygon::intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  intersect(rectangle_type_1& rectangle, const rectangle_type_2& b, bool consider_touch = true) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& b, bool consider_touch = true)
boost::polygon::intersect_segments	/usr/include/boost/polygon/segment_utils.hpp	/^intersect_segments($/;"	f	namespace:boost::polygon	signature:( SegmentContainer& result, SegmentIterator first, SegmentIterator last)
boost::polygon::intersect_segments	/usr/include/boost/polygon/segment_utils.hpp	/^intersect_segments($/;"	f	namespace:boost::polygon	signature:( std::vector<std::pair<std::size_t, Segment> >& result, SegmentIterator first, SegmentIterator last)
boost::polygon::intersects	/usr/include/boost/polygon/interval_concept.hpp	/^>::type intersects($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2, bool consider_touch = true)
boost::polygon::intersects	/usr/include/boost/polygon/rectangle_concept.hpp	/^  intersects(const rectangle_type_1& rectangle, const rectangle_type_2& b, bool consider_touch = true) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type_1& rectangle, const rectangle_type_2& b, bool consider_touch = true)
boost::polygon::intersects	/usr/include/boost/polygon/segment_concept.hpp	/^>::type intersects(const Segment1& segment1, const Segment2& segment2,$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2, bool consider_touch = true)
boost::polygon::interval_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::interval_coordinate_type	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_coordinate_type {$/;"	s	namespace:boost::polygon
boost::polygon::interval_coordinate_type::type	/usr/include/boost/polygon/interval_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::interval_coordinate_type	access:public
boost::polygon::interval_coordinate_type_by_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_coordinate_type_by_concept {$/;"	s	namespace:boost::polygon
boost::polygon::interval_coordinate_type_by_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_coordinate_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
boost::polygon::interval_coordinate_type_by_concept::type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef typename interval_traits<GeometryType>::coordinate_type type;$/;"	t	struct:boost::polygon::interval_coordinate_type_by_concept	access:public
boost::polygon::interval_coordinate_type_by_concept::type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::interval_coordinate_type_by_concept	access:public
boost::polygon::interval_data	/usr/include/boost/polygon/interval_data.hpp	/^class interval_data {$/;"	c	namespace:boost::polygon
boost::polygon::interval_data::coordinate_type	/usr/include/boost/polygon/interval_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::interval_data	access:public
boost::polygon::interval_data::coords_	/usr/include/boost/polygon/interval_data.hpp	/^  coordinate_type coords_[2];$/;"	m	class:boost::polygon::interval_data	access:private
boost::polygon::interval_data::get	/usr/include/boost/polygon/interval_data.hpp	/^  coordinate_type get(direction_1d dir) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(direction_1d dir) const
boost::polygon::interval_data::high	/usr/include/boost/polygon/interval_data.hpp	/^  coordinate_type high() const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:() const
boost::polygon::interval_data::high	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data& high(coordinate_type value) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(coordinate_type value)
boost::polygon::interval_data::interval_data	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data()$/;"	f	class:boost::polygon::interval_data	access:public	signature:()
boost::polygon::interval_data::interval_data	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data(const interval_data& that) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that)
boost::polygon::interval_data::interval_data	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data(coordinate_type low, coordinate_type high) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(coordinate_type low, coordinate_type high)
boost::polygon::interval_data::low	/usr/include/boost/polygon/interval_data.hpp	/^  coordinate_type low() const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:() const
boost::polygon::interval_data::low	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data& low(coordinate_type value) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(coordinate_type value)
boost::polygon::interval_data::operator !=	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator!=(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
boost::polygon::interval_data::operator <	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator<(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
boost::polygon::interval_data::operator <=	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator<=(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
boost::polygon::interval_data::operator =	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data& operator=(const IntervalType& that) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const IntervalType& that)
boost::polygon::interval_data::operator =	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data& operator=(const interval_data& that) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that)
boost::polygon::interval_data::operator ==	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator==(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
boost::polygon::interval_data::operator >	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator>(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
boost::polygon::interval_data::operator >=	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator>=(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
boost::polygon::interval_data::set	/usr/include/boost/polygon/interval_data.hpp	/^  void set(direction_1d dir, coordinate_type value) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(direction_1d dir, coordinate_type value)
boost::polygon::interval_difference_type	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_difference_type {$/;"	s	namespace:boost::polygon
boost::polygon::interval_difference_type::type	/usr/include/boost/polygon/interval_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::interval_difference_type	access:public
boost::polygon::interval_difference_type_by_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_difference_type_by_concept {$/;"	s	namespace:boost::polygon
boost::polygon::interval_difference_type_by_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_difference_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
boost::polygon::interval_difference_type_by_concept::type	/usr/include/boost/polygon/interval_concept.hpp	/^  >::coordinate_difference type;$/;"	t	struct:boost::polygon::interval_difference_type_by_concept	access:public
boost::polygon::interval_difference_type_by_concept::type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::interval_difference_type_by_concept	access:public
boost::polygon::interval_mutable_traits	/usr/include/boost/polygon/interval_traits.hpp	/^struct interval_mutable_traits {$/;"	s	namespace:boost::polygon
boost::polygon::interval_mutable_traits::construct	/usr/include/boost/polygon/interval_traits.hpp	/^  static interval_type construct(coordinate_type low, coordinate_type high) {$/;"	f	struct:boost::polygon::interval_mutable_traits	access:public	signature:(coordinate_type low, coordinate_type high)
boost::polygon::interval_mutable_traits::coordinate_type	/usr/include/boost/polygon/interval_traits.hpp	/^  typedef typename interval_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::interval_mutable_traits	access:public
boost::polygon::interval_mutable_traits::interval_type	/usr/include/boost/polygon/interval_traits.hpp	/^  typedef Interval interval_type;$/;"	t	struct:boost::polygon::interval_mutable_traits	access:public
boost::polygon::interval_mutable_traits::set	/usr/include/boost/polygon/interval_traits.hpp	/^  static void set($/;"	f	struct:boost::polygon::interval_mutable_traits	access:public	signature:( interval_type& interval, direction_1d dir, coordinate_type value)
boost::polygon::interval_traits	/usr/include/boost/polygon/interval_traits.hpp	/^struct interval_traits {$/;"	s	namespace:boost::polygon
boost::polygon::interval_traits::coordinate_type	/usr/include/boost/polygon/interval_traits.hpp	/^  typedef typename interval_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::interval_traits	access:public
boost::polygon::interval_traits::get	/usr/include/boost/polygon/interval_traits.hpp	/^  static coordinate_type get(const interval_type& interval, direction_1d dir) {$/;"	f	struct:boost::polygon::interval_traits	access:public	signature:(const interval_type& interval, direction_1d dir)
boost::polygon::interval_traits::interval_type	/usr/include/boost/polygon/interval_traits.hpp	/^  typedef Interval interval_type;$/;"	t	struct:boost::polygon::interval_traits	access:public
boost::polygon::is_45	/usr/include/boost/polygon/polygon_traits.hpp	/^  is_45(const polygon_type& polygon) {$/;"	f	namespace:boost::polygon	signature:(const polygon_type& polygon)
boost::polygon::is_45_polygonal_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_45_polygonal_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_45_polygonal_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_set_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_45_polygonal_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_with_holes_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_45_polygonal_concept::type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_45_polygonal_concept	access:public
boost::polygon::is_45_polygonal_concept::type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_45_polygonal_concept	access:public
boost::polygon::is_45_polygonal_concept::type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_set_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_45_polygonal_concept	access:public
boost::polygon::is_45_polygonal_concept::type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_with_holes_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_45_polygonal_concept	access:public
boost::polygon::is_any_mutable_polygon_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_any_mutable_polygon_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_any_mutable_polygon_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^                            typename is_any_mutable_polygon_without_holes_type<T>::type>::type type;$/;"	t	struct:boost::polygon::is_any_mutable_polygon_type	access:public
boost::polygon::is_any_mutable_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_any_mutable_polygon_with_holes_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_any_mutable_polygon_with_holes_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^                              typename is_mutable_polygon_with_holes_type<T>::type>::type type;$/;"	t	struct:boost::polygon::is_any_mutable_polygon_with_holes_type	access:public
boost::polygon::is_any_mutable_polygon_without_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_any_mutable_polygon_without_holes_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_any_mutable_polygon_without_holes_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^      typename is_mutable_polygon_type<T>::type>::type type; };$/;"	t	struct:boost::polygon::is_any_mutable_polygon_without_holes_type	access:public
boost::polygon::is_any_polygon_set_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct is_any_polygon_set_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_any_polygon_set_type::type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename gtl_or<typename is_polygon_45_or_90_set_type<T>::type, typename is_polygon_set_type<T>::type >::type type;$/;"	t	struct:boost::polygon::is_any_polygon_set_type	access:public
boost::polygon::is_either_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct is_either_polygon_45_set_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_either_polygon_45_set_type::type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename gtl_or<typename is_polygon_45_set_type<T>::type, typename is_polygon_45_set_type<T2>::type >::type type;$/;"	t	struct:boost::polygon::is_either_polygon_45_set_type	access:public
boost::polygon::is_either_polygon_set_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct is_either_polygon_set_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_either_polygon_set_type::type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename gtl_or<typename is_polygon_set_type<T>::type, typename is_polygon_set_type<T2>::type >::type type;$/;"	t	struct:boost::polygon::is_either_polygon_set_type	access:public
boost::polygon::is_interval_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct is_interval_concept {$/;"	s	namespace:boost::polygon
boost::polygon::is_interval_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct is_interval_concept<interval_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::is_interval_concept::type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_interval_concept	access:public
boost::polygon::is_interval_concept::type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_interval_concept	access:public
boost::polygon::is_manhattan_polygonal_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_manhattan_polygonal_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_manhattan_polygonal_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_manhattan_polygonal_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_with_holes_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_manhattan_polygonal_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_manhattan_polygonal_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_manhattan_polygonal_concept	access:public
boost::polygon::is_manhattan_polygonal_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_manhattan_polygonal_concept	access:public
boost::polygon::is_manhattan_polygonal_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_manhattan_polygonal_concept	access:public
boost::polygon::is_manhattan_polygonal_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_with_holes_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_manhattan_polygonal_concept	access:public
boost::polygon::is_manhattan_polygonal_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_manhattan_polygonal_concept	access:public
boost::polygon::is_mutable_interval_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct is_mutable_interval_concept {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_interval_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct is_mutable_interval_concept<interval_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_interval_concept::type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_mutable_interval_concept	access:public
boost::polygon::is_mutable_interval_concept::type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_mutable_interval_concept	access:public
boost::polygon::is_mutable_point_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct is_mutable_point_concept {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_point_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct is_mutable_point_concept<point_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_point_concept::type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_mutable_point_concept	access:public
boost::polygon::is_mutable_point_concept::type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_mutable_point_concept	access:public
boost::polygon::is_mutable_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_mutable_polygon_45_set_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_mutable_polygon_45_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_mutable_polygon_45_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_45_set_type::type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^      typename is_45_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_set_type	access:public
boost::polygon::is_mutable_polygon_45_set_type::type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^      typename is_45_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_set_type	access:public
boost::polygon::is_mutable_polygon_45_set_type::type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename gtl_same_type<polygon_45_set_concept, typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_set_type	access:public
boost::polygon::is_mutable_polygon_45_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_45_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_45_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_type	access:public
boost::polygon::is_mutable_polygon_45_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_45_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_type	access:public
boost::polygon::is_mutable_polygon_45_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_45_with_holes_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_45_with_holes_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_with_holes_type	access:public
boost::polygon::is_mutable_polygon_45_with_holes_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_45_with_holes_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_with_holes_type	access:public
boost::polygon::is_mutable_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_90_set_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_mutable_polygon_90_set_concept	access:public
boost::polygon::is_mutable_polygon_90_set_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_mutable_polygon_90_set_concept	access:public
boost::polygon::is_mutable_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_90_set_type::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^      typename is_manhattan_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_set_type	access:public
boost::polygon::is_mutable_polygon_90_set_type::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^      typename is_manhattan_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_set_type	access:public
boost::polygon::is_mutable_polygon_90_set_type::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename gtl_same_type<polygon_90_set_concept, typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_set_type	access:public
boost::polygon::is_mutable_polygon_90_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_90_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_90_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_type	access:public
boost::polygon::is_mutable_polygon_90_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_90_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_type	access:public
boost::polygon::is_mutable_polygon_90_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_90_with_holes_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_90_with_holes_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_with_holes_type	access:public
boost::polygon::is_mutable_polygon_90_with_holes_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_90_with_holes_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_with_holes_type	access:public
boost::polygon::is_mutable_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_mutable_polygon_set_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_mutable_polygon_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_mutable_polygon_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_set_type::type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^      typename is_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_set_type	access:public
boost::polygon::is_mutable_polygon_set_type::type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^      typename is_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_set_type	access:public
boost::polygon::is_mutable_polygon_set_type::type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename gtl_same_type<polygon_set_concept, typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_set_type	access:public
boost::polygon::is_mutable_polygon_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_type	access:public
boost::polygon::is_mutable_polygon_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_type	access:public
boost::polygon::is_mutable_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_with_holes_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_polygon_with_holes_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_mutable_polygon_with_holes_type	access:public
boost::polygon::is_mutable_polygon_with_holes_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_with_holes_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_with_holes_type	access:public
boost::polygon::is_mutable_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_mutable_rectangle_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_mutable_rectangle_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_rectangle_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_mutable_rectangle_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_mutable_rectangle_concept	access:public
boost::polygon::is_mutable_rectangle_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_mutable_rectangle_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_mutable_rectangle_concept	access:public
boost::polygon::is_mutable_segment_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct is_mutable_segment_concept {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_segment_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct is_mutable_segment_concept<segment_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::is_mutable_segment_concept::type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_mutable_segment_concept	access:public
boost::polygon::is_mutable_segment_concept::type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_mutable_segment_concept	access:public
boost::polygon::is_point_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct is_point_concept {$/;"	s	namespace:boost::polygon
boost::polygon::is_point_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct is_point_concept<point_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::is_point_concept::type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_point_concept	access:public
boost::polygon::is_point_concept::type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_point_concept	access:public
boost::polygon::is_polygon_45_or_90_set_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct is_polygon_45_or_90_set_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_45_or_90_set_type::type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename gtl_or<typename is_polygon_45_set_type<T>::type, typename is_polygon_90_set_type<T>::type >::type type;$/;"	t	struct:boost::polygon::is_polygon_45_or_90_set_type	access:public
boost::polygon::is_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_polygon_45_set_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_polygon_45_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_polygon_45_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_45_set_type::type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^      typename is_45_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_45_set_type	access:public
boost::polygon::is_polygon_45_set_type::type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^      typename is_45_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_45_set_type	access:public
boost::polygon::is_polygon_45_set_type::type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename is_45_polygonal_concept<typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_45_set_type	access:public
boost::polygon::is_polygon_45_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_45_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_45_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_45_type	access:public
boost::polygon::is_polygon_45_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^                            typename gtl_same_type<polygon_45_concept, GC>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_45_type	access:public
boost::polygon::is_polygon_45_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_45_with_holes_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_45_with_holes_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_45_with_holes_type	access:public
boost::polygon::is_polygon_45_with_holes_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^                              typename gtl_same_type<polygon_45_with_holes_concept, GC>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_45_with_holes_type	access:public
boost::polygon::is_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept { };$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_with_holes_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_90_set_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygon_90_set_concept	access:public
boost::polygon::is_polygon_90_set_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygon_90_set_concept	access:public
boost::polygon::is_polygon_90_set_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_with_holes_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygon_90_set_concept	access:public
boost::polygon::is_polygon_90_set_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygon_90_set_concept	access:public
boost::polygon::is_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_90_set_type::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^      typename is_manhattan_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_90_set_type	access:public
boost::polygon::is_polygon_90_set_type::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^      typename is_manhattan_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_90_set_type	access:public
boost::polygon::is_polygon_90_set_type::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename is_manhattan_polygonal_concept<typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_90_set_type	access:public
boost::polygon::is_polygon_90_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_90_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_90_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_90_type	access:public
boost::polygon::is_polygon_90_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_90_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_polygon_90_type	access:public
boost::polygon::is_polygon_90_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_90_with_holes_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_90_with_holes_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_90_with_holes_type	access:public
boost::polygon::is_polygon_90_with_holes_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^                            typename gtl_same_type<polygon_90_with_holes_concept, GC>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_90_with_holes_type	access:public
boost::polygon::is_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygon_set_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygon_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygon_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_set_type::type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^      typename is_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_set_type	access:public
boost::polygon::is_polygon_set_type::type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^      typename is_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_set_type	access:public
boost::polygon::is_polygon_set_type::type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename is_polygonal_concept<typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_set_type	access:public
boost::polygon::is_polygon_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_type	access:public
boost::polygon::is_polygon_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^                            typename gtl_same_type<polygon_concept, GC>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_type	access:public
boost::polygon::is_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_with_holes_type {$/;"	s	namespace:boost::polygon
boost::polygon::is_polygon_with_holes_type::GC	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename geometry_concept<T>::type GC;$/;"	t	struct:boost::polygon::is_polygon_with_holes_type	access:public
boost::polygon::is_polygon_with_holes_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^                              typename gtl_same_type<polygon_with_holes_concept, GC>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_with_holes_type	access:public
boost::polygon::is_polygonal_concept	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_polygonal_concept	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_polygonal_concept	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_set_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_polygonal_concept	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_with_holes_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_polygonal_concept::type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_polygonal_concept	access:public
boost::polygon::is_polygonal_concept::type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygonal_concept	access:public
boost::polygon::is_polygonal_concept::type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_set_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygonal_concept	access:public
boost::polygon::is_polygonal_concept::type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_with_holes_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygonal_concept	access:public
boost::polygon::is_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_rectangle_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_rectangle_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
boost::polygon::is_rectangle_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_rectangle_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_rectangle_concept	access:public
boost::polygon::is_rectangle_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_rectangle_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_rectangle_concept	access:public
boost::polygon::is_segment_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct is_segment_concept {$/;"	s	namespace:boost::polygon
boost::polygon::is_segment_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct is_segment_concept<segment_concept> {$/;"	s	namespace:boost::polygon
boost::polygon::is_segment_concept::type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_segment_concept	access:public
boost::polygon::is_segment_concept::type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_segment_concept	access:public
boost::polygon::iterator_compact_to_points	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^class iterator_compact_to_points {$/;"	c	namespace:boost::polygon
boost::polygon::iterator_compact_to_points::difference_type	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::polygon::iterator_compact_to_points	access:public
boost::polygon::iterator_compact_to_points::firstX_	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typename point_traits<point_type>::coordinate_type firstX_;$/;"	m	class:boost::polygon::iterator_compact_to_points	access:private
boost::polygon::iterator_compact_to_points::iter_	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  iterator_type iter_;$/;"	m	class:boost::polygon::iterator_compact_to_points	access:private
boost::polygon::iterator_compact_to_points::iter_end_	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  iterator_type iter_end_;$/;"	m	class:boost::polygon::iterator_compact_to_points	access:private
boost::polygon::iterator_compact_to_points::iterator_category	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::polygon::iterator_compact_to_points	access:public
boost::polygon::iterator_compact_to_points::iterator_compact_to_points	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline iterator_compact_to_points() : iter_(), iter_end_(), pt_(), firstX_(), orient_() {}$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:()
boost::polygon::iterator_compact_to_points::iterator_compact_to_points	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline iterator_compact_to_points(iterator_type iter, iterator_type iter_end) :$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:(iterator_type iter, iterator_type iter_end)
boost::polygon::iterator_compact_to_points::operator !=	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline bool operator!=(const iterator_compact_to_points& that) const {$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:(const iterator_compact_to_points& that) const
boost::polygon::iterator_compact_to_points::operator *	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline reference operator*() const { return pt_; }$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:() const
boost::polygon::iterator_compact_to_points::operator ++	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline const iterator_compact_to_points operator++(int) {$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:(int)
boost::polygon::iterator_compact_to_points::operator ++	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline iterator_compact_to_points& operator++() {$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:()
boost::polygon::iterator_compact_to_points::operator ==	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline bool operator==(const iterator_compact_to_points& that) const {$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:(const iterator_compact_to_points& that) const
boost::polygon::iterator_compact_to_points::orient_	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  orientation_2d orient_;$/;"	m	class:boost::polygon::iterator_compact_to_points	access:private
boost::polygon::iterator_compact_to_points::pointer	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typedef const point_type* pointer; \/\/immutable$/;"	t	class:boost::polygon::iterator_compact_to_points	access:public
boost::polygon::iterator_compact_to_points::pt_	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  point_type pt_;$/;"	m	class:boost::polygon::iterator_compact_to_points	access:private
boost::polygon::iterator_compact_to_points::reference	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typedef const point_type& reference; \/\/immutable$/;"	t	class:boost::polygon::iterator_compact_to_points	access:public
boost::polygon::iterator_compact_to_points::value_type	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typedef point_type value_type;$/;"	t	class:boost::polygon::iterator_compact_to_points	access:public
boost::polygon::iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^class iterator_geometry_to_set {};$/;"	c	namespace:boost::polygon
boost::polygon::iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^class iterator_geometry_to_set<polygon_90_concept, polygon_type> {$/;"	c	namespace:boost::polygon
boost::polygon::iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^class iterator_geometry_to_set<polygon_90_with_holes_concept, polygon_with_holes_type> {$/;"	c	namespace:boost::polygon
boost::polygon::iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^class iterator_geometry_to_set<rectangle_concept, rectangle_type> {$/;"	c	namespace:boost::polygon
boost::polygon::iterator_geometry_to_set::coord_iterator_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef typename polygon_traits<polygon_type>::iterator_type coord_iterator_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
boost::polygon::iterator_geometry_to_set::coordinate_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef typename polygon_90_traits<polygon_with_holes_type>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
boost::polygon::iterator_geometry_to_set::coordinate_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef typename polygon_traits<polygon_type>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
boost::polygon::iterator_geometry_to_set::coordinate_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef typename rectangle_traits<rectangle_type>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
boost::polygon::iterator_geometry_to_set::corner_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  unsigned int corner_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::difference_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
boost::polygon::iterator_geometry_to_set::evaluate_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline void evaluate_() {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:()
boost::polygon::iterator_geometry_to_set::first_pt	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  point_data<coordinate_type> first_pt, second_pt, pts[3];$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::is_hole_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  bool is_hole_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::iterator_category	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
boost::polygon::iterator_geometry_to_set::iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set() : itrb(), itre(), itrhib(), itrhie(), itrhb(), itrhe(), orient_(), is_hole_(), started_holes() {}$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:()
boost::polygon::iterator_geometry_to_set::iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set() : rectangle_(), vertex_(), corner_(4), orient_(), is_hole_() {}$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:()
boost::polygon::iterator_geometry_to_set::iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set() : vertex_(), itrb(), itre(), last_vertex_(), is_hole_(), multiplier_(), first_pt(), second_pt(), pts(), use_wrap(), orient_(), polygon_index(-1) {}$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:()
boost::polygon::iterator_geometry_to_set::iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set(const iterator_geometry_to_set& that) :$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const iterator_geometry_to_set& that)
boost::polygon::iterator_geometry_to_set::iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set(const polygon_type& polygon, direction_1d dir, orientation_2d orient = HORIZONTAL, bool is_hole = false, bool winding_override = false, direction_1d w = CLOCKWISE) :$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const polygon_type& polygon, direction_1d dir, orientation_2d orient = HORIZONTAL, bool is_hole = false, bool winding_override = false, direction_1d w = CLOCKWISE)
boost::polygon::iterator_geometry_to_set::iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set(const polygon_with_holes_type& polygon, direction_1d dir,$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const polygon_with_holes_type& polygon, direction_1d dir, orientation_2d orient = HORIZONTAL, bool is_hole = false, bool = false, direction_1d = CLOCKWISE)
boost::polygon::iterator_geometry_to_set::iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set(const rectangle_type& rectangle, direction_1d dir,$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const rectangle_type& rectangle, direction_1d dir, orientation_2d orient = HORIZONTAL, bool is_hole = false, bool = false, direction_1d = CLOCKWISE)
boost::polygon::iterator_geometry_to_set::itrb	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set<polygon_90_concept, polygon_with_holes_type> itrb, itre;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::itrb	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typename polygon_traits<polygon_type>::iterator_type itrb, itre;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::itre	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set<polygon_90_concept, polygon_with_holes_type> itrb, itre;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::itre	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typename polygon_traits<polygon_type>::iterator_type itrb, itre;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::itrhb	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typename polygon_with_holes_traits<polygon_with_holes_type>::iterator_holes_type itrhb, itrhe;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::itrhe	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typename polygon_with_holes_traits<polygon_with_holes_type>::iterator_holes_type itrhb, itrhe;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::itrhib	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set<polygon_90_concept, typename polygon_with_holes_traits<polygon_with_holes_type>::hole_type> itrhib, itrhie;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::itrhie	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set<polygon_90_concept, typename polygon_with_holes_traits<polygon_with_holes_type>::hole_type> itrhib, itrhie;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::last_vertex_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  bool last_vertex_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::multiplier_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  int multiplier_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::operator !=	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline bool operator!=(const iterator_geometry_to_set& that) const {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const iterator_geometry_to_set& that) const
boost::polygon::iterator_geometry_to_set::operator *	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline reference operator*() const {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:() const
boost::polygon::iterator_geometry_to_set::operator ++	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline const iterator_geometry_to_set operator++(int) {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(int)
boost::polygon::iterator_geometry_to_set::operator ++	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline iterator_geometry_to_set& operator++() {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:()
boost::polygon::iterator_geometry_to_set::operator ==	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline bool operator==(const iterator_geometry_to_set& that) const {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const iterator_geometry_to_set& that) const
boost::polygon::iterator_geometry_to_set::orient_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  orientation_2d orient_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::pointer	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef const value_type* pointer; \/\/immutable$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
boost::polygon::iterator_geometry_to_set::polygon_index	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  int polygon_index;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::pts	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  point_data<coordinate_type> first_pt, second_pt, pts[3];$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::rectangle_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  rectangle_data<coordinate_type> rectangle_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::reference	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef const value_type& reference; \/\/immutable$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
boost::polygon::iterator_geometry_to_set::second_pt	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  point_data<coordinate_type> first_pt, second_pt, pts[3];$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::started_holes	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  bool started_holes;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::use_wrap	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  bool use_wrap;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::value_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef std::pair<coordinate_type, std::pair<coordinate_type, int> > value_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
boost::polygon::iterator_geometry_to_set::vertex_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  mutable value_type vertex_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_geometry_to_set::vertex_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  value_type vertex_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
boost::polygon::iterator_points_to_compact	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^class iterator_points_to_compact {$/;"	c	namespace:boost::polygon
boost::polygon::iterator_points_to_compact::coord_	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  mutable typename point_traits<point_type>::coordinate_type coord_;$/;"	m	class:boost::polygon::iterator_points_to_compact	access:private
boost::polygon::iterator_points_to_compact::coordinate_type	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef typename point_traits<point_type>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
boost::polygon::iterator_points_to_compact::difference_type	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
boost::polygon::iterator_points_to_compact::iterEnd_	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  iT iter_, iterEnd_;$/;"	m	class:boost::polygon::iterator_points_to_compact	access:private
boost::polygon::iterator_points_to_compact::iter_	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  iT iter_, iterEnd_;$/;"	m	class:boost::polygon::iterator_points_to_compact	access:private
boost::polygon::iterator_points_to_compact::iterator_category	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
boost::polygon::iterator_points_to_compact::iterator_points_to_compact	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline iterator_points_to_compact() : iter_(), iterEnd_(), orient_(), coord_() {}$/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:()
boost::polygon::iterator_points_to_compact::iterator_points_to_compact	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline iterator_points_to_compact(const iterator_points_to_compact& that) : $/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:(const iterator_points_to_compact& that)
boost::polygon::iterator_points_to_compact::iterator_points_to_compact	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline iterator_points_to_compact(iT iter, iT iterEnd) : $/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:(iT iter, iT iterEnd)
boost::polygon::iterator_points_to_compact::operator !=	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline bool operator!=(const iterator_points_to_compact& that) const {$/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:(const iterator_points_to_compact& that) const
boost::polygon::iterator_points_to_compact::operator *	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline reference operator*() const { coord_ = get(*iter_, orient_); $/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:() const
boost::polygon::iterator_points_to_compact::operator ++	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline const iterator_points_to_compact operator++(int) {$/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:(int)
boost::polygon::iterator_points_to_compact::operator ++	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline iterator_points_to_compact& operator++() {$/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:()
boost::polygon::iterator_points_to_compact::operator ==	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline bool operator==(const iterator_points_to_compact& that) const {$/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:(const iterator_points_to_compact& that) const
boost::polygon::iterator_points_to_compact::orient_	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  orientation_2d orient_;$/;"	m	class:boost::polygon::iterator_points_to_compact	access:private
boost::polygon::iterator_points_to_compact::pointer	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef const coordinate_type* pointer; \/\/immutable$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
boost::polygon::iterator_points_to_compact::reference	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef const coordinate_type& reference; \/\/immutable$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
boost::polygon::iterator_points_to_compact::value_type	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef coordinate_type value_type;$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
boost::polygon::join_with	/usr/include/boost/polygon/interval_concept.hpp	/^>::type join_with(IntervalType1& interval1, const IntervalType2& interval2) {$/;"	f	namespace:boost::polygon	signature:(IntervalType1& interval1, const IntervalType2& interval2)
boost::polygon::join_with	/usr/include/boost/polygon/rectangle_concept.hpp	/^  join_with(rectangle_type_1& rectangle, const rectangle_type_2& b) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& b)
boost::polygon::keep	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  keep(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::area_type min_area, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::area_type max_area, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_width, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_width, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_height, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_height)
boost::polygon::keep	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  keep(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_area, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_area, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_width, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_width, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_height, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_height)
boost::polygon::keep	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  keep(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::area_type min_area, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::area_type max_area, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_width, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_width, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_height, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_height)
boost::polygon::length	/usr/include/boost/polygon/segment_concept.hpp	/^length(const Segment& segment) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment)
boost::polygon::less_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  class less_rectangle_concept {$/;"	c	namespace:boost::polygon
boost::polygon::less_rectangle_concept::less_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^    inline less_rectangle_concept(orientation_2d orient = VERTICAL) : orient_(orient) {}$/;"	f	class:boost::polygon::less_rectangle_concept	access:public	signature:(orientation_2d orient = VERTICAL)
boost::polygon::less_rectangle_concept::operator ()	/usr/include/boost/polygon/rectangle_concept.hpp	/^    operator () (const rectangle_type_1& a,$/;"	f	class:boost::polygon::less_rectangle_concept	access:public	signature:(const rectangle_type_1& a, const rectangle_type_2& b) const
boost::polygon::less_rectangle_concept::orient_	/usr/include/boost/polygon/rectangle_concept.hpp	/^    orientation_2d orient_;$/;"	m	class:boost::polygon::less_rectangle_concept	access:private
boost::polygon::line_intersection	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class line_intersection : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
boost::polygon::line_intersection::Point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::line_intersection	access:private
boost::polygon::line_intersection::compute_histogram_in_y	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void compute_histogram_in_y(iT begin, iT end, std::size_t size, std::vector<std::pair<Unit, std::pair<std::size_t, std::size_t> > >& histogram) {$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(iT begin, iT end, std::size_t size, std::vector<std::pair<Unit, std::pair<std::size_t, std::size_t> > >& histogram)
boost::polygon::line_intersection::compute_y_cuts	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void compute_y_cuts(std::vector<Unit>& y_cuts, iT begin, iT end, std::size_t size) {$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<Unit>& y_cuts, iT begin, iT end, std::size_t size)
boost::polygon::line_intersection::edge_scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::map<half_edge, std::set<segment_id>, less_half_edge> edge_scanline;$/;"	t	class:boost::polygon::line_intersection	access:private
boost::polygon::line_intersection::half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::line_intersection	access:private
boost::polygon::line_intersection::iterator	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename edge_scanline::iterator iterator;$/;"	t	class:boost::polygon::line_intersection	access:private
boost::polygon::line_intersection::less_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_half_edge less_half_edge;$/;"	t	class:boost::polygon::line_intersection	access:private
boost::polygon::line_intersection::less_point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_point less_point;$/;"	t	class:boost::polygon::line_intersection	access:private
boost::polygon::line_intersection::less_point_down_slope	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class less_point_down_slope : public std::binary_function<Point, Point, bool> {$/;"	c	class:boost::polygon::line_intersection	inherits:std::binary_function	access:public
boost::polygon::line_intersection::less_point_down_slope::less_point_down_slope	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      inline less_point_down_slope() {}$/;"	f	class:boost::polygon::line_intersection::less_point_down_slope	access:public	signature:()
boost::polygon::line_intersection::less_point_down_slope::operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      inline bool operator () (const Point& pt1, const Point& pt2) const {$/;"	f	class:boost::polygon::line_intersection::less_point_down_slope	access:public	signature:(const Point& pt1, const Point& pt2) const
boost::polygon::line_intersection::print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static void print(const std::vector<std::pair<half_edge, segment_id> >& vec) {$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(const std::vector<std::pair<half_edge, segment_id> >& vec)
boost::polygon::line_intersection::scanline_element	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::set<segment_id> > scanline_element;$/;"	t	class:boost::polygon::line_intersection	access:private
boost::polygon::line_intersection::segment_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void segment_edge(std::vector<std::pair<half_edge, int> >& output_segments,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::pair<half_edge, int> >& output_segments, const half_edge& , segment_id id, iT begin, iT end)
boost::polygon::line_intersection::segment_id	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef int segment_id;$/;"	t	class:boost::polygon::line_intersection	access:private
boost::polygon::line_intersection::segment_intersections	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void segment_intersections(std::vector<std::pair<half_edge, int> >& output_segments,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::pair<half_edge, int> >& output_segments, std::vector<std::set<Point> >& intersection_points, iT begin, iT end)
boost::polygon::line_intersection::test_validate_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_validate_scan(stream_type& stdcout) {$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(stream_type& stdcout)
boost::polygon::line_intersection::test_verify_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_verify_scan(stream_type& stdcout) {$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(stream_type& stdcout)
boost::polygon::line_intersection::validate_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void validate_scan(std::vector<std::pair<half_edge, int> >& output_segments,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::pair<half_edge, int> >& output_segments, iT begin, iT end)
boost::polygon::line_intersection::validate_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void validate_scan(std::vector<std::pair<half_edge, std::pair<property_type, int> > >& output_segments,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::pair<half_edge, std::pair<property_type, int> > >& output_segments, iT begin, iT end)
boost::polygon::line_intersection::validate_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void validate_scan(std::vector<std::set<Point> >& intersection_points,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::set<Point> >& intersection_points, iT begin, iT end)
boost::polygon::line_intersection::validate_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void validate_scan(std::vector<std::set<Point> >& intersection_points,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::set<Point> >& intersection_points, iT begin, iT end, Unit min_y)
boost::polygon::line_intersection::validate_scan_divide_and_conquer	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void validate_scan_divide_and_conquer(std::vector<std::set<Point> >& intersection_points,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::set<Point> >& intersection_points, iT begin, iT end)
boost::polygon::line_intersection::verify_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool verify_scan(std::pair<segment_id, segment_id>& offenders,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::pair<segment_id, segment_id>& offenders, iT begin, iT end)
boost::polygon::ll	/usr/include/boost/polygon/rectangle_concept.hpp	/^  ll(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boost::polygon::local_abs	/usr/include/boost/polygon/polygon_traits.hpp	/^  Unit local_abs(Unit value) { return value < 0 ? (Unit)-value : value; }$/;"	f	namespace:boost::polygon	signature:(Unit value)
boost::polygon::low	/usr/include/boost/polygon/interval_concept.hpp	/^>::type low(IntervalType& interval,$/;"	f	namespace:boost::polygon	signature:(IntervalType& interval, typename interval_mutable_traits<IntervalType>::coordinate_type value)
boost::polygon::low	/usr/include/boost/polygon/interval_concept.hpp	/^>::type low(const IntervalType& interval) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval)
boost::polygon::low	/usr/include/boost/polygon/segment_concept.hpp	/^typename segment_point_type<Segment>::type>::type low(const Segment& segment) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment)
boost::polygon::low	/usr/include/boost/polygon/segment_concept.hpp	/^void>::type low(Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Point& point)
boost::polygon::lr	/usr/include/boost/polygon/rectangle_concept.hpp	/^  lr(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boost::polygon::make_arc	/usr/include/boost/polygon/polygon_set_data.hpp	/^  inline int  make_arc(std::vector<point_data< T> >& return_points,$/;"	f	namespace:boost::polygon	signature:(std::vector<point_data< T> >& return_points, point_data< double> start, point_data< double> end, point_data< double> center, double r, unsigned int num_circle_segments)
boost::polygon::make_resizing_vertex_list	/usr/include/boost/polygon/polygon_set_data.hpp	/^  inline int make_resizing_vertex_list(std::vector<std::vector<point_data< T> > >& return_points,$/;"	f	namespace:boost::polygon	signature:(std::vector<std::vector<point_data< T> > >& return_points, point_data<T>& curr_prev, bool ignore_prev_point, point_data< T> start, point_data<T> middle, point_data< T> end, double sizing_distance, unsigned int num_circle_segments, bool corner_fill_arc)
boost::polygon::manhattan_distance	/usr/include/boost/polygon/point_concept.hpp	/^manhattan_distance(const PointType1& point1, const PointType2& point2) {$/;"	f	namespace:boost::polygon	signature:(const PointType1& point1, const PointType2& point2)
boost::polygon::manhattan_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  manhattan_distance(const rectangle_type& lvalue, const rectangle_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& lvalue, const rectangle_type_2& rvalue)
boost::polygon::manhattan_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  manhattan_distance(rectangle_type& lvalue, const point_type& rvalue) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& lvalue, const point_type& rvalue)
boost::polygon::manhattan_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct manhattan_domain {};$/;"	s	namespace:boost::polygon
boost::polygon::merge_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class merge_output_functor {$/;"	c	namespace:boost::polygon
boost::polygon::merge_output_functor::half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::merge_output_functor	access:public
boost::polygon::merge_output_functor::merge_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    merge_output_functor() {}$/;"	f	class:boost::polygon::merge_output_functor	access:public	signature:()
boost::polygon::merge_output_functor::operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void operator()(result_type& result, const half_edge& edge, const key_type& left, const key_type& right) {$/;"	f	class:boost::polygon::merge_output_functor	access:public	signature:(result_type& result, const half_edge& edge, const key_type& left, const key_type& right)
boost::polygon::merge_scanline	/usr/include/boost/polygon/detail/property_merge.hpp	/^class merge_scanline {$/;"	c	namespace:boost::polygon
boost::polygon::merge_scanline::assertRedundant	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline int assertRedundant(T& t) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(T& t)
boost::polygon::merge_scanline::countFromBelow	/usr/include/boost/polygon/detail/property_merge.hpp	/^  property_map countFromBelow;$/;"	m	class:boost::polygon::merge_scanline	access:private
boost::polygon::merge_scanline::currentVertex	/usr/include/boost/polygon/detail/property_merge.hpp	/^  vertex_data currentVertex;$/;"	m	class:boost::polygon::merge_scanline	access:private
boost::polygon::merge_scanline::edge_property	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::pair<property_merge_interval<coordinate_type>, std::pair<property_set, property_set> > edge_property;$/;"	t	class:boost::polygon::merge_scanline	access:public
boost::polygon::merge_scanline::edge_property_vector	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::vector<edge_property> edge_property_vector;$/;"	t	class:boost::polygon::merge_scanline	access:public
boost::polygon::merge_scanline::insertEdges	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void insertEdges(T& graph, property_set& p1, property_set& p2) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(T& graph, property_set& p1, property_set& p2)
boost::polygon::merge_scanline::lessPropertyCount	/usr/include/boost/polygon/detail/property_merge.hpp	/^  struct lessPropertyCount {$/;"	s	class:boost::polygon::merge_scanline	access:private
boost::polygon::merge_scanline::lessPropertyCount::lessPropertyCount	/usr/include/boost/polygon/detail/property_merge.hpp	/^    lessPropertyCount() {}$/;"	f	struct:boost::polygon::merge_scanline::lessPropertyCount	access:public	signature:()
boost::polygon::merge_scanline::lessPropertyCount::operator ()	/usr/include/boost/polygon/detail/property_merge.hpp	/^    bool operator()(const T& a, const T& b) {$/;"	f	struct:boost::polygon::merge_scanline::lessPropertyCount	access:public	signature:(const T& a, const T& b)
boost::polygon::merge_scanline::less_vertex_data	/usr/include/boost/polygon/detail/property_merge.hpp	/^  class less_vertex_data {$/;"	c	class:boost::polygon::merge_scanline	access:private
boost::polygon::merge_scanline::less_vertex_data::less_vertex_data	/usr/include/boost/polygon/detail/property_merge.hpp	/^    less_vertex_data() {}$/;"	f	class:boost::polygon::merge_scanline::less_vertex_data	access:public	signature:()
boost::polygon::merge_scanline::less_vertex_data::operator ()	/usr/include/boost/polygon/detail/property_merge.hpp	/^    bool operator()(const T& lvalue, const T& rvalue) const {$/;"	f	class:boost::polygon::merge_scanline::less_vertex_data	access:public	signature:(const T& lvalue, const T& rvalue) const
boost::polygon::merge_scanline::mergeCount	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void mergeCount(property_map& lvalue, property_map& rvalue) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(property_map& lvalue, property_map& rvalue)
boost::polygon::merge_scanline::mergeProperty	/usr/include/boost/polygon/detail/property_merge.hpp	/^  static inline void mergeProperty(property_map& lvalue, std::pair<property_type, int>& rvalue) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(property_map& lvalue, std::pair<property_type, int>& rvalue)
boost::polygon::merge_scanline::merge_scanline	/usr/include/boost/polygon/detail/property_merge.hpp	/^  merge_scanline() : output(), scanline(), currentVertex(), tmpVector(), previousY(), countFromBelow(), scanlinePosition() {}$/;"	f	class:boost::polygon::merge_scanline	access:public	signature:()
boost::polygon::merge_scanline::merge_scanline	/usr/include/boost/polygon/detail/property_merge.hpp	/^  merge_scanline(const merge_scanline& that) :$/;"	f	class:boost::polygon::merge_scanline	access:public	signature:(const merge_scanline& that)
boost::polygon::merge_scanline::operator =	/usr/include/boost/polygon/detail/property_merge.hpp	/^  merge_scanline& operator=(const merge_scanline& that) {$/;"	f	class:boost::polygon::merge_scanline	access:public	signature:(const merge_scanline& that)
boost::polygon::merge_scanline::output	/usr/include/boost/polygon/detail/property_merge.hpp	/^  edge_property_vector output;$/;"	m	class:boost::polygon::merge_scanline	access:private
boost::polygon::merge_scanline::performExtract	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void performExtract(T& result, property_merge_data& data) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(T& result, property_merge_data& data)
boost::polygon::merge_scanline::perform_merge	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void perform_merge(result_type& result, property_merge_data& data) {$/;"	f	class:boost::polygon::merge_scanline	access:public	signature:(result_type& result, property_merge_data& data)
boost::polygon::merge_scanline::populate_property_merge_data	/usr/include/boost/polygon/detail/property_merge.hpp	/^  populate_property_merge_data(property_merge_data& pmd, iT input_begin, iT input_end,$/;"	f	class:boost::polygon::merge_scanline	access:public	signature:(property_merge_data& pmd, iT input_begin, iT input_end, const property_type& property, orientation_2d_type orient)
boost::polygon::merge_scanline::previousY	/usr/include/boost/polygon/detail/property_merge.hpp	/^  coordinate_type previousY;$/;"	m	class:boost::polygon::merge_scanline	access:private
boost::polygon::merge_scanline::processVertex	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void processVertex(edge_property_vector& output) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(edge_property_vector& output)
boost::polygon::merge_scanline::propertySetAbove	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void propertySetAbove(coordinate_type y, property_set& ps, T& scanline) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(coordinate_type y, property_set& ps, T& scanline)
boost::polygon::merge_scanline::propertySetBelow	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void propertySetBelow(coordinate_type y, property_set& ps, T& scanline) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(coordinate_type y, property_set& ps, T& scanline)
boost::polygon::merge_scanline::property_map	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::vector<std::pair<property_type, int> > property_map;$/;"	t	class:boost::polygon::merge_scanline	access:public
boost::polygon::merge_scanline::property_merge_data	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::vector<vertex_property> property_merge_data;$/;"	t	class:boost::polygon::merge_scanline	access:public
boost::polygon::merge_scanline::property_set	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef keytype property_set;$/;"	t	class:boost::polygon::merge_scanline	access:public
boost::polygon::merge_scanline::scanline	/usr/include/boost/polygon/detail/property_merge.hpp	/^  scanline_type scanline;$/;"	m	class:boost::polygon::merge_scanline	access:private
boost::polygon::merge_scanline::scanlinePosition	/usr/include/boost/polygon/detail/property_merge.hpp	/^  scanline_iterator scanlinePosition;$/;"	m	class:boost::polygon::merge_scanline	access:private
boost::polygon::merge_scanline::scanline_iterator	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef typename scanline_type::iterator scanline_iterator;$/;"	t	class:boost::polygon::merge_scanline	access:public
boost::polygon::merge_scanline::scanline_type	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::map<coordinate_type, property_map> scanline_type;$/;"	t	class:boost::polygon::merge_scanline	access:public
boost::polygon::merge_scanline::setProperty	/usr/include/boost/polygon/detail/property_merge.hpp	/^  static inline void setProperty(property_set& pset, property_map& pmap) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(property_set& pset, property_map& pmap)
boost::polygon::merge_scanline::tmpVector	/usr/include/boost/polygon/detail/property_merge.hpp	/^  property_map tmpVector;$/;"	m	class:boost::polygon::merge_scanline	access:private
boost::polygon::merge_scanline::vertex_data	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::pair<property_merge_point<coordinate_type>, property_map> vertex_data;$/;"	t	class:boost::polygon::merge_scanline	access:public
boost::polygon::merge_scanline::vertex_property	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::pair<property_merge_point<coordinate_type>, std::pair<property_type, int> > vertex_property;$/;"	t	class:boost::polygon::merge_scanline	access:public
boost::polygon::merge_scanline::writeGraph	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void writeGraph(coordinate_type x, T& graph, edge_property_vector& output, T2& scanline) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(coordinate_type x, T& graph, edge_property_vector& output, T2& scanline)
boost::polygon::merge_scanline::writeOutput	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void writeOutput(coordinate_type x, Result& result, edge_property_vector& output) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(coordinate_type x, Result& result, edge_property_vector& output)
boost::polygon::move	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& move($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_difference_type<IntervalType>::type displacement)
boost::polygon::move	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type& move(PointType& point, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(PointType& point, orientation_2d orient, typename point_coordinate_type<PointType>::type displacement)
boost::polygon::move	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  move(polygon_set_type& polygon_set, typename polygon_90_set_traits<polygon_set_type>::coordinate_type x_displacement,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename polygon_90_set_traits<polygon_set_type>::coordinate_type x_displacement, typename polygon_90_set_traits<polygon_set_type>::coordinate_type y_displacement)
boost::polygon::move	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  move(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename polygon_90_set_traits<polygon_set_type>::coordinate_type displacement)
boost::polygon::move	/usr/include/boost/polygon/polygon_traits.hpp	/^  move(T& polygon, orientation_2d orient, typename polygon_traits<T>::coordinate_type displacement) {$/;"	f	namespace:boost::polygon	signature:(T& polygon, orientation_2d orient, typename polygon_traits<T>::coordinate_type displacement)
boost::polygon::move	/usr/include/boost/polygon/rectangle_concept.hpp	/^  move(rectangle_type& rectangle, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, orientation_2d orient, typename coordinate_traits<typename rectangle_coordinate_type<rectangle_type>::type>::coordinate_difference delta)
boost::polygon::move	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& move(Segment& segment, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(Segment& segment, orientation_2d orient, typename segment_coordinate_type<Segment>::type displacement)
boost::polygon::operator_provides_storage	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct operator_provides_storage {};$/;"	s	namespace:boost::polygon
boost::polygon::operator_requires_copy	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct operator_requires_copy {};$/;"	s	namespace:boost::polygon
boost::polygon::operators	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  namespace operators {$/;"	n	namespace:boost::polygon
boost::polygon::operators	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  namespace operators {$/;"	n	namespace:boost::polygon
boost::polygon::operators	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  namespace operators {$/;"	n	namespace:boost::polygon
boost::polygon::operators::operator &	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator&(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator &	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator&(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator &	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator&(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator &=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator&=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator &=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator&=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator &=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator&=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator *	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator*(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator *	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator*(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator *	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator*(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator *=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator*=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator *=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator*=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator *=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator*=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator +	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator+(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator +	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator+(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator +	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator+(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator +	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator+(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator +	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator+(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator +	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator+(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator +=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator+=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator +=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator+=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator +=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator+=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator +=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator+=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator +=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator+=(polygon_90_set_data<coordinate_type_1>& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(polygon_90_set_data<coordinate_type_1>& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator +=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator+=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator +=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator+=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator -	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator-(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator -	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator-(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator -	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator-(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator -	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator-(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator -	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator-(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator -	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator-(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator -=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator-=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator -=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator-=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator -=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator-=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator -=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator-=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator -=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator-=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator -=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator-=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
boost::polygon::operators::operator ^	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator^(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator ^	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator^(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator ^	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator^(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator ^=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator^=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator ^=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator^=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator ^=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator^=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator |	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator|(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator |	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator|(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator |	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator|(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator |=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator|=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator |=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator|=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator |=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator|=(polygon_90_set_data<coordinate_type_1>& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(polygon_90_set_data<coordinate_type_1>& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::operator |=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator|=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
boost::polygon::operators::y_ps45_a	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_a : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_ae	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_ae : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_b	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_b : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_be	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_be : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_m	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_m : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_me	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_me : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_p	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_p : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_pe	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_pe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_rm	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_rm : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_rme	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_rme : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_rp	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_rp : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_rpe	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_rpe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_s	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_s : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_se	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_se : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_x	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_x : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps45_xe	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_xe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_a	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_a : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_ae	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_ae : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_b	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_b : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_be	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_be : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_be2	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_be2 : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_m	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_m : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_me	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_me : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_p	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_p : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_pe	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_pe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_pe2	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_pe2 : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_rm	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_rm : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_rme	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_rme : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_rp	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_rp : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_rpe	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_rpe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_s	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_s : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_se	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_se : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_x	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_x : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps90_xe	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_xe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps_rm	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct y_ps_rm : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps_rme	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct y_ps_rme : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps_rp	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct y_ps_rp : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::y_ps_rpe	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct y_ps_rpe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_oa	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_oa : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_oae	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_oae : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_ob	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_ob : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_obe	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_obe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_om	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_om : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_ome	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_ome : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_op	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_op : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_ope	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_ope : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_os	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_os : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_ose	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_ose : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_ox	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_ox : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::operators::yes_ps_oxe	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_oxe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
boost::polygon::orientation	/usr/include/boost/polygon/segment_concept.hpp	/^int>::type orientation(const Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment, const Point& point)
boost::polygon::orientation	/usr/include/boost/polygon/segment_concept.hpp	/^int>::type orientation(const Segment1& segment1, const Segment2& segment2) {$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2)
boost::polygon::orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^  class orientation_2d {$/;"	c	namespace:boost::polygon
boost::polygon::orientation_2d::get_direction	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d get_direction(direction_1d dir) const;$/;"	p	class:boost::polygon::orientation_2d	access:public	signature:(direction_1d dir) const
boost::polygon::orientation_2d::get_direction	/usr/include/boost/polygon/isotropy.hpp	/^  direction_2d orientation_2d::get_direction(direction_1d dir) const {$/;"	f	class:boost::polygon::orientation_2d	signature:(direction_1d dir) const
boost::polygon::orientation_2d::get_perpendicular	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_2d get_perpendicular() const {$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:() const
boost::polygon::orientation_2d::operator !=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator!=(orientation_2d that) const { return (val_ != that.val_); }$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:(orientation_2d that) const
boost::polygon::orientation_2d::operator =	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_2d& operator=(const orientation_2d& ori) {$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:(const orientation_2d& ori)
boost::polygon::orientation_2d::operator ==	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator==(orientation_2d that) const { return (val_ == that.val_); }$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:(orientation_2d that) const
boost::polygon::orientation_2d::orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline orientation_2d(const direction_2d& that);$/;"	p	class:boost::polygon::orientation_2d	access:public	signature:(const direction_2d& that)
boost::polygon::orientation_2d::orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline orientation_2d(int o);$/;"	p	class:boost::polygon::orientation_2d	access:private	signature:(int o)
boost::polygon::orientation_2d::orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_2d() : val_(HORIZONTAL) {}$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:()
boost::polygon::orientation_2d::orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_2d(const orientation_2d& ori) : val_(ori.val_) {}$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:(const orientation_2d& ori)
boost::polygon::orientation_2d::orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_2d(const orientation_2d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:(const orientation_2d_enum val)
boost::polygon::orientation_2d::orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^  orientation_2d::orientation_2d(const direction_2d& that) : val_(that.to_int() >> 1) {}$/;"	f	class:boost::polygon::orientation_2d	signature:(const direction_2d& that)
boost::polygon::orientation_2d::to_int	/usr/include/boost/polygon/isotropy.hpp	/^    inline unsigned int to_int() const { return (val_); }$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:() const
boost::polygon::orientation_2d::turn_90	/usr/include/boost/polygon/isotropy.hpp	/^    inline void turn_90() { val_ = val_^ 1; }$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:()
boost::polygon::orientation_2d::val_	/usr/include/boost/polygon/isotropy.hpp	/^    unsigned int val_;$/;"	m	class:boost::polygon::orientation_2d	access:private
boost::polygon::orientation_2d_enum	/usr/include/boost/polygon/isotropy.hpp	/^  enum orientation_2d_enum { HORIZONTAL = 0, VERTICAL = 1 };$/;"	g	namespace:boost::polygon
boost::polygon::orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^  class orientation_3d {$/;"	c	namespace:boost::polygon
boost::polygon::orientation_3d::get_direction	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d get_direction(direction_1d dir) const;$/;"	p	class:boost::polygon::orientation_3d	access:public	signature:(direction_1d dir) const
boost::polygon::orientation_3d::get_direction	/usr/include/boost/polygon/isotropy.hpp	/^  direction_3d orientation_3d::get_direction(direction_1d dir) const {$/;"	f	class:boost::polygon::orientation_3d	signature:(direction_1d dir) const
boost::polygon::orientation_3d::operator !=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator!=(orientation_3d that) const { return (val_ != that.val_); }$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(orientation_3d that) const
boost::polygon::orientation_3d::operator =	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_3d& operator=(const orientation_3d& ori) {$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(const orientation_3d& ori)
boost::polygon::orientation_3d::operator ==	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator==(orientation_3d that) const { return (val_ == that.val_); }$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(orientation_3d that) const
boost::polygon::orientation_3d::orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline orientation_3d(const direction_2d& that);$/;"	p	class:boost::polygon::orientation_3d	access:public	signature:(const direction_2d& that)
boost::polygon::orientation_3d::orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline orientation_3d(const direction_3d& that);$/;"	p	class:boost::polygon::orientation_3d	access:public	signature:(const direction_3d& that)
boost::polygon::orientation_3d::orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline orientation_3d(int o);$/;"	p	class:boost::polygon::orientation_3d	access:private	signature:(int o)
boost::polygon::orientation_3d::orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_3d() : val_((int)HORIZONTAL) {}$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:()
boost::polygon::orientation_3d::orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_3d(const orientation_3d& ori) : val_(ori.val_) {}$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(const orientation_3d& ori)
boost::polygon::orientation_3d::orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_3d(const orientation_3d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(const orientation_3d_enum val)
boost::polygon::orientation_3d::orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_3d(orientation_2d ori) : val_(ori.to_int()) {}$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(orientation_2d ori)
boost::polygon::orientation_3d::orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^  orientation_3d::orientation_3d(const direction_2d& that) : val_(that.to_int() >> 1) {}$/;"	f	class:boost::polygon::orientation_3d	signature:(const direction_2d& that)
boost::polygon::orientation_3d::orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^  orientation_3d::orientation_3d(const direction_3d& that) : val_(that.to_int() >> 1) {}$/;"	f	class:boost::polygon::orientation_3d	signature:(const direction_3d& that)
boost::polygon::orientation_3d::to_int	/usr/include/boost/polygon/isotropy.hpp	/^    inline unsigned int to_int() const { return (val_); }$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:() const
boost::polygon::orientation_3d::val_	/usr/include/boost/polygon/isotropy.hpp	/^    unsigned int val_;$/;"	m	class:boost::polygon::orientation_3d	access:private
boost::polygon::orientation_3d::~orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline ~orientation_3d() {  }$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:()
boost::polygon::orientation_3d_enum	/usr/include/boost/polygon/isotropy.hpp	/^  enum orientation_3d_enum { PROXIMAL = 2 };$/;"	g	namespace:boost::polygon
boost::polygon::perimeter	/usr/include/boost/polygon/polygon_traits.hpp	/^  perimeter(const T& polygon,$/;"	f	namespace:boost::polygon	signature:(const T& polygon, typename enable_if< typename is_polygon_with_holes_type<T>::type>::type * = 0 )
boost::polygon::perimeter	/usr/include/boost/polygon/rectangle_concept.hpp	/^  perimeter(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boost::polygon::point_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::point_coordinate_type	/usr/include/boost/polygon/point_concept.hpp	/^struct point_coordinate_type {$/;"	s	namespace:boost::polygon
boost::polygon::point_coordinate_type::type	/usr/include/boost/polygon/point_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::point_coordinate_type	access:public
boost::polygon::point_coordinate_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_coordinate_type_by_concept {$/;"	s	namespace:boost::polygon
boost::polygon::point_coordinate_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_coordinate_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
boost::polygon::point_coordinate_type_by_concept::type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef typename point_traits<GeometryType>::coordinate_type type;$/;"	t	struct:boost::polygon::point_coordinate_type_by_concept	access:public
boost::polygon::point_coordinate_type_by_concept::type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::point_coordinate_type_by_concept	access:public
boost::polygon::point_data	/usr/include/boost/polygon/point_data.hpp	/^class point_data {$/;"	c	namespace:boost::polygon
boost::polygon::point_data::coordinate_type	/usr/include/boost/polygon/point_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::point_data	access:public
boost::polygon::point_data::coords_	/usr/include/boost/polygon/point_data.hpp	/^  coordinate_type coords_[2];$/;"	m	class:boost::polygon::point_data	access:private
boost::polygon::point_data::get	/usr/include/boost/polygon/point_data.hpp	/^  coordinate_type get(orientation_2d orient) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(orientation_2d orient) const
boost::polygon::point_data::operator !=	/usr/include/boost/polygon/point_data.hpp	/^  bool operator!=(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
boost::polygon::point_data::operator <	/usr/include/boost/polygon/point_data.hpp	/^  bool operator<(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
boost::polygon::point_data::operator <=	/usr/include/boost/polygon/point_data.hpp	/^  bool operator<=(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
boost::polygon::point_data::operator =	/usr/include/boost/polygon/point_data.hpp	/^  point_data& operator=(const PointType& that) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const PointType& that)
boost::polygon::point_data::operator =	/usr/include/boost/polygon/point_data.hpp	/^  point_data& operator=(const point_data& that) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that)
boost::polygon::point_data::operator ==	/usr/include/boost/polygon/point_data.hpp	/^  bool operator==(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
boost::polygon::point_data::operator >	/usr/include/boost/polygon/point_data.hpp	/^  bool operator>(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
boost::polygon::point_data::operator >=	/usr/include/boost/polygon/point_data.hpp	/^  bool operator>=(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
boost::polygon::point_data::point_data	/usr/include/boost/polygon/point_data.hpp	/^  explicit point_data(const PointType& that) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const PointType& that)
boost::polygon::point_data::point_data	/usr/include/boost/polygon/point_data.hpp	/^  explicit point_data(const point_data& that) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that)
boost::polygon::point_data::point_data	/usr/include/boost/polygon/point_data.hpp	/^  point_data()$/;"	f	class:boost::polygon::point_data	access:public	signature:()
boost::polygon::point_data::point_data	/usr/include/boost/polygon/point_data.hpp	/^  point_data(const point_data<CT>& that) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data<CT>& that)
boost::polygon::point_data::point_data	/usr/include/boost/polygon/point_data.hpp	/^  point_data(coordinate_type x, coordinate_type y) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(coordinate_type x, coordinate_type y)
boost::polygon::point_data::set	/usr/include/boost/polygon/point_data.hpp	/^  void set(orientation_2d orient, coordinate_type value) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(orientation_2d orient, coordinate_type value)
boost::polygon::point_data::x	/usr/include/boost/polygon/point_data.hpp	/^  coordinate_type x() const {$/;"	f	class:boost::polygon::point_data	access:public	signature:() const
boost::polygon::point_data::x	/usr/include/boost/polygon/point_data.hpp	/^  point_data& x(coordinate_type value) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(coordinate_type value)
boost::polygon::point_data::y	/usr/include/boost/polygon/point_data.hpp	/^  coordinate_type y() const {$/;"	f	class:boost::polygon::point_data	access:public	signature:() const
boost::polygon::point_data::y	/usr/include/boost/polygon/point_data.hpp	/^  point_data& y(coordinate_type value) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(coordinate_type value)
boost::polygon::point_difference_type	/usr/include/boost/polygon/point_concept.hpp	/^struct point_difference_type {$/;"	s	namespace:boost::polygon
boost::polygon::point_difference_type::type	/usr/include/boost/polygon/point_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::point_difference_type	access:public
boost::polygon::point_difference_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_difference_type_by_concept {$/;"	s	namespace:boost::polygon
boost::polygon::point_difference_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_difference_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
boost::polygon::point_difference_type_by_concept::type	/usr/include/boost/polygon/point_concept.hpp	/^  >::coordinate_difference type;$/;"	t	struct:boost::polygon::point_difference_type_by_concept	access:public
boost::polygon::point_difference_type_by_concept::type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::point_difference_type_by_concept	access:public
boost::polygon::point_distance_type	/usr/include/boost/polygon/point_concept.hpp	/^struct point_distance_type {$/;"	s	namespace:boost::polygon
boost::polygon::point_distance_type::type	/usr/include/boost/polygon/point_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::point_distance_type	access:public
boost::polygon::point_distance_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_distance_type_by_concept {$/;"	s	namespace:boost::polygon
boost::polygon::point_distance_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_distance_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
boost::polygon::point_distance_type_by_concept::type	/usr/include/boost/polygon/point_concept.hpp	/^  >::coordinate_distance type;$/;"	t	struct:boost::polygon::point_distance_type_by_concept	access:public
boost::polygon::point_distance_type_by_concept::type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::point_distance_type_by_concept	access:public
boost::polygon::point_mutable_traits	/usr/include/boost/polygon/point_traits.hpp	/^struct point_mutable_traits {$/;"	s	namespace:boost::polygon
boost::polygon::point_mutable_traits::construct	/usr/include/boost/polygon/point_traits.hpp	/^  static point_type construct(coordinate_type x, coordinate_type y) {$/;"	f	struct:boost::polygon::point_mutable_traits	access:public	signature:(coordinate_type x, coordinate_type y)
boost::polygon::point_mutable_traits::coordinate_type	/usr/include/boost/polygon/point_traits.hpp	/^  typedef typename point_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::point_mutable_traits	access:public
boost::polygon::point_mutable_traits::point_type	/usr/include/boost/polygon/point_traits.hpp	/^  typedef PointType point_type;$/;"	t	struct:boost::polygon::point_mutable_traits	access:public
boost::polygon::point_mutable_traits::set	/usr/include/boost/polygon/point_traits.hpp	/^  static void set($/;"	f	struct:boost::polygon::point_mutable_traits	access:public	signature:( point_type& point, orientation_2d orient, coordinate_type value)
boost::polygon::point_sequence_area	/usr/include/boost/polygon/polygon_traits.hpp	/^  point_sequence_area(iterator_type begin_range, iterator_type end_range) {$/;"	f	namespace:boost::polygon	signature:(iterator_type begin_range, iterator_type end_range)
boost::polygon::point_sequence_distance	/usr/include/boost/polygon/polygon_traits.hpp	/^  distance_type point_sequence_distance(iterator_type itr, iterator_type itr_end) {$/;"	f	namespace:boost::polygon	signature:(iterator_type itr, iterator_type itr_end)
boost::polygon::point_sequence_is_45	/usr/include/boost/polygon/polygon_traits.hpp	/^  bool point_sequence_is_45(iT itr, iT itr_end) {$/;"	f	namespace:boost::polygon	signature:(iT itr, iT itr_end)
boost::polygon::point_traits	/usr/include/boost/polygon/point_traits.hpp	/^struct point_traits {$/;"	s	namespace:boost::polygon
boost::polygon::point_traits::coordinate_type	/usr/include/boost/polygon/point_traits.hpp	/^  typedef typename point_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::point_traits	access:public
boost::polygon::point_traits::get	/usr/include/boost/polygon/point_traits.hpp	/^  static coordinate_type get($/;"	f	struct:boost::polygon::point_traits	access:public	signature:( const point_type& point, orientation_2d orient)
boost::polygon::point_traits::point_type	/usr/include/boost/polygon/point_traits.hpp	/^  typedef PointType point_type;$/;"	t	struct:boost::polygon::point_traits	access:public
boost::polygon::poly_line_arbitrary_hole_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  class poly_line_arbitrary_hole_data {$/;"	c	namespace:boost::polygon
boost::polygon::poly_line_arbitrary_hole_data::Point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:public
boost::polygon::poly_line_arbitrary_hole_data::active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::active_tail_arbitrary active_tail_arbitrary;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:private
boost::polygon::poly_line_arbitrary_hole_data::begin	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator begin() const { return p_->getTail()->begin(); }$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:() const
boost::polygon::poly_line_arbitrary_hole_data::coordinate_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:public
boost::polygon::poly_line_arbitrary_hole_data::end	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator end() const { return p_->getTail()->end(); }$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:() const
boost::polygon::poly_line_arbitrary_hole_data::iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef iterator_type iterator;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:public
boost::polygon::poly_line_arbitrary_hole_data::iterator_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename active_tail_arbitrary::iterator iterator_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:public
boost::polygon::poly_line_arbitrary_hole_data::p_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    active_tail_arbitrary* p_;$/;"	m	class:boost::polygon::poly_line_arbitrary_hole_data	access:private
boost::polygon::poly_line_arbitrary_hole_data::point_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef Point point_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:public
boost::polygon::poly_line_arbitrary_hole_data::poly_line_arbitrary_hole_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_hole_data() : p_(0) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:()
boost::polygon::poly_line_arbitrary_hole_data::poly_line_arbitrary_hole_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_hole_data(active_tail_arbitrary* p) : p_(p) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:(active_tail_arbitrary* p)
boost::polygon::poly_line_arbitrary_hole_data::set	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_hole_data& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::poly_line_arbitrary_hole_data::set_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_hole_data& set_compact(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::poly_line_arbitrary_hole_data::size	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:() const
boost::polygon::poly_line_arbitrary_polygon_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  class poly_line_arbitrary_polygon_data {$/;"	c	namespace:boost::polygon
boost::polygon::poly_line_arbitrary_polygon_data::Point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
boost::polygon::poly_line_arbitrary_polygon_data::active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::active_tail_arbitrary active_tail_arbitrary;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:private
boost::polygon::poly_line_arbitrary_polygon_data::area_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename coordinate_traits<Unit>::coordinate_distance area_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
boost::polygon::poly_line_arbitrary_polygon_data::begin	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator_type begin() const { return p_->getTail()->begin(); }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
boost::polygon::poly_line_arbitrary_polygon_data::begin_holes	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator_holes_type begin_holes() const { return iterator_holes_type(p_->getHoles().begin()); }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
boost::polygon::poly_line_arbitrary_polygon_data::coordinate_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
boost::polygon::poly_line_arbitrary_polygon_data::end	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator_type end() const { return p_->getTail()->end(); }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
boost::polygon::poly_line_arbitrary_polygon_data::end_holes	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator_holes_type end_holes() const { return iterator_holes_type(p_->getHoles().end()); }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
boost::polygon::poly_line_arbitrary_polygon_data::hole_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef poly_line_arbitrary_hole_data<Unit> hole_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class iterator_holes_type {$/;"	c	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::difference_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::holeType	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef poly_line_arbitrary_hole_data<Unit> holeType;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:private
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::hole_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      mutable holeType hole_;$/;"	m	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:private
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::iterator_category	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::iterator_holes_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator_holes_type() : hole_(), itr_() {}$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:()
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::iterator_holes_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator_holes_type(const iterator_holes_type& that) : hole_(that.hole_), itr_(that.itr_) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(const iterator_holes_type& that)
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::iterator_holes_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator_holes_type(typename active_tail_arbitrary::iteratorHoles itr) : hole_(), itr_(itr) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(typename active_tail_arbitrary::iteratorHoles itr)
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::itr_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typename active_tail_arbitrary::iteratorHoles itr_;$/;"	m	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:private
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::operator !=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator!=(const iterator_holes_type& that) { return itr_ != that.itr_; }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(const iterator_holes_type& that)
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::operator *	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline reference operator*() {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:()
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::operator ++	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline const iterator_holes_type operator++(int) {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(int)
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::operator ++	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator_holes_type& operator++() {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:()
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator_holes_type& operator=(const iterator_holes_type& that) {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(const iterator_holes_type& that)
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const iterator_holes_type& that) { return itr_ == that.itr_; }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(const iterator_holes_type& that)
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::pointer	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef const holeType* pointer; \/\/immutable$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::reference	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef const holeType& reference; \/\/immutable$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public
boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type::value_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef holeType value_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public
boost::polygon::poly_line_arbitrary_polygon_data::iterator_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename active_tail_arbitrary::iterator iterator_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
boost::polygon::poly_line_arbitrary_polygon_data::p_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    active_tail_arbitrary* p_;$/;"	m	class:boost::polygon::poly_line_arbitrary_polygon_data	access:private
boost::polygon::poly_line_arbitrary_polygon_data::point_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef Point point_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
boost::polygon::poly_line_arbitrary_polygon_data::poly_line_arbitrary_polygon_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_polygon_data() : p_(0) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:()
boost::polygon::poly_line_arbitrary_polygon_data::poly_line_arbitrary_polygon_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_polygon_data(active_tail_arbitrary* p) : p_(p) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:(active_tail_arbitrary* p)
boost::polygon::poly_line_arbitrary_polygon_data::set	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_polygon_data& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::poly_line_arbitrary_polygon_data::set_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_polygon_data& set_compact(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::poly_line_arbitrary_polygon_data::set_holes	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_polygon_data& set_holes(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::poly_line_arbitrary_polygon_data::size	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
boost::polygon::poly_line_arbitrary_polygon_data::size_holes	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline std::size_t size_holes() const { return 0; }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
boost::polygon::poly_line_arbitrary_polygon_data::yield	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline active_tail_arbitrary* yield() { return p_; }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:()
boost::polygon::polygon_45_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_45_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_data	/usr/include/boost/polygon/polygon_45_data.hpp	/^class polygon_45_data {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_45_data::area_type	/usr/include/boost/polygon/polygon_45_data.hpp	/^  typedef typename coordinate_traits<T>::coordinate_distance area_type;$/;"	t	class:boost::polygon::polygon_45_data	access:public
boost::polygon::polygon_45_data::begin	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline iterator_type begin() const { return coords_.begin(); }$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:() const
boost::polygon::polygon_45_data::coordinate_type	/usr/include/boost/polygon/polygon_45_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_45_data	access:public
boost::polygon::polygon_45_data::coords_	/usr/include/boost/polygon/polygon_45_data.hpp	/^  std::vector<point_data<coordinate_type> > coords_;$/;"	m	class:boost::polygon::polygon_45_data	access:public
boost::polygon::polygon_45_data::end	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline iterator_type end() const { return coords_.end(); }$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:() const
boost::polygon::polygon_45_data::geometry_type	/usr/include/boost/polygon/polygon_45_data.hpp	/^  typedef polygon_45_concept geometry_type;$/;"	t	class:boost::polygon::polygon_45_data	access:public
boost::polygon::polygon_45_data::iterator_type	/usr/include/boost/polygon/polygon_45_data.hpp	/^  typedef typename std::vector<point_data<coordinate_type> >::const_iterator iterator_type;$/;"	t	class:boost::polygon::polygon_45_data	access:public
boost::polygon::polygon_45_data::operator !=	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline bool operator!=(const polygon_45_data& that) const { return !((*this) == that); }$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(const polygon_45_data& that) const
boost::polygon::polygon_45_data::operator =	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_45_data	access:public	signature:(const T2& rvalue)
boost::polygon::polygon_45_data::operator =	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data& operator=(const polygon_45_data& that) {$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(const polygon_45_data& that)
boost::polygon::polygon_45_data::operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_45_data<T>& polygon_45_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_45_data	signature:(const T2& rvalue)
boost::polygon::polygon_45_data::operator ==	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline bool operator==(const polygon_45_data& that) const {$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(const polygon_45_data& that) const
boost::polygon::polygon_45_data::point_type	/usr/include/boost/polygon/polygon_45_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_45_data	access:public
boost::polygon::polygon_45_data::polygon_45_data	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data() : coords_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:()
boost::polygon::polygon_45_data::polygon_45_data	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data(const polygon_45_data& that) : coords_(that.coords_) {}$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(const polygon_45_data& that)
boost::polygon::polygon_45_data::polygon_45_data	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data(iT input_begin, iT input_end) : coords_(input_begin, input_end) {}$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_45_data::set	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data& set(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_45_data::size	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline std::size_t size() const { return coords_.size(); }$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:() const
boost::polygon::polygon_45_formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct polygon_45_formation : public boolean_op_45<Unit> {$/;"	s	namespace:boost::polygon	inherits:boolean_op_45
boost::polygon::polygon_45_formation::ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class ActiveTail45 {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::ActiveTail45::ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45() : tailp_(0), otherTailp_(0), holesList_(), head_(0) {}$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:()
boost::polygon::polygon_45_formation::ActiveTail45::ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45(ActiveTail45* otherTailp) :$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(ActiveTail45* otherTailp)
boost::polygon::polygon_45_formation::ActiveTail45::ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45(Point point, ActiveTail45* otherTailp, bool head = true) :$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(Point point, ActiveTail45* otherTailp, bool head = true)
boost::polygon::polygon_45_formation::ActiveTail45::ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45(const ActiveTail45& that) :$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(const ActiveTail45& that)
boost::polygon::polygon_45_formation::ActiveTail45::ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45(const Vertex45& vertex, ActiveTail45* otherTailp = 0) :$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(const Vertex45& vertex, ActiveTail45* otherTailp = 0)
boost::polygon::polygon_45_formation::ActiveTail45::addHole	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45* addHole(ActiveTail45* hole) {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(ActiveTail45* hole)
boost::polygon::polygon_45_formation::ActiveTail45::copyHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline void copyHoles(ActiveTail45& that) { holesList_.splice(holesList_.end(), that.holesList_); }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(ActiveTail45& that)
boost::polygon::polygon_45_formation::ActiveTail45::createActiveTail45sAsPair	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      static inline std::pair<ActiveTail45*, ActiveTail45*> createActiveTail45sAsPair(Point point, bool solid,$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(Point point, bool solid, ActiveTail45* phole, bool fractureHoles)
boost::polygon::polygon_45_formation::ActiveTail45::destroyContents	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline void destroyContents() {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:()
boost::polygon::polygon_45_formation::ActiveTail45::getHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline const std::list<ActiveTail45*>& getHoles() const { return holesList_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
boost::polygon::polygon_45_formation::ActiveTail45::getOtherActiveTail	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45* getOtherActiveTail() const { return otherTailp_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
boost::polygon::polygon_45_formation::ActiveTail45::getOtherTail	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45* getOtherTail() const { return otherTailp_->tailp_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
boost::polygon::polygon_45_formation::ActiveTail45::getPoint	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Point getPoint() const {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
boost::polygon::polygon_45_formation::ActiveTail45::getTail	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45* getTail() const { return tailp_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
boost::polygon::polygon_45_formation::ActiveTail45::head_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      bool head_;$/;"	m	class:boost::polygon::polygon_45_formation::ActiveTail45	access:private
boost::polygon::polygon_45_formation::ActiveTail45::holesList_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      std::list<ActiveTail45*> holesList_;$/;"	m	class:boost::polygon::polygon_45_formation::ActiveTail45	access:private
boost::polygon::polygon_45_formation::ActiveTail45::isOtherTail	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool isOtherTail(const ActiveTail45& b) const { return &b == otherTailp_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(const ActiveTail45& b) const
boost::polygon::polygon_45_formation::ActiveTail45::iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename PolyLine45::iterator iterator;$/;"	t	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public
boost::polygon::polygon_45_formation::ActiveTail45::iteratorHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename std::list<ActiveTail45*>::const_iterator iteratorHoles;$/;"	t	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public
boost::polygon::polygon_45_formation::ActiveTail45::join	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool join(ActiveTail45* tail) {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(ActiveTail45* tail)
boost::polygon::polygon_45_formation::ActiveTail45::joinChains	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      static inline ActiveTail45* joinChains(Point point, ActiveTail45* at1, ActiveTail45* at2, bool solid,$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(Point point, ActiveTail45* at1, ActiveTail45* at2, bool solid, cT& output)
boost::polygon::polygon_45_formation::ActiveTail45::operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45& operator=(const ActiveTail45& that) {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(const ActiveTail45& that)
boost::polygon::polygon_45_formation::ActiveTail45::operator ==	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator==(const ActiveTail45& b) const {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(const ActiveTail45& b) const
boost::polygon::polygon_45_formation::ActiveTail45::otherTailp_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      ActiveTail45 *otherTailp_;$/;"	m	class:boost::polygon::polygon_45_formation::ActiveTail45	access:private
boost::polygon::polygon_45_formation::ActiveTail45::pushPoint	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline void pushPoint(Point point) {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(Point point)
boost::polygon::polygon_45_formation::ActiveTail45::solidToLeft	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool solidToLeft() const { return head_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
boost::polygon::polygon_45_formation::ActiveTail45::solidToRight	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool solidToRight() const { return !head_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
boost::polygon::polygon_45_formation::ActiveTail45::tailp_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      PolyLine45* tailp_;$/;"	m	class:boost::polygon::polygon_45_formation::ActiveTail45	access:private
boost::polygon::polygon_45_formation::ActiveTail45::updateTail	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45& updateTail(PolyLine45* newTail) { tailp_ = newTail; return *this; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(PolyLine45* newTail)
boost::polygon::polygon_45_formation::ActiveTail45::~ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ~ActiveTail45() {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:()
boost::polygon::polygon_45_formation::Count2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename boolean_op_45<Unit>::Count2 Count2;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Point	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::PolyLine45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class PolyLine45 {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::PolyLine45::PolyLine45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45() : points() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:()
boost::polygon::polygon_45_formation::PolyLine45::PolyLine45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45(const PolyLine45& that) : points(that.points) {}$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:(const PolyLine45& that)
boost::polygon::polygon_45_formation::PolyLine45::begin	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iterator begin() const { return points.begin(); }$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:() const
boost::polygon::polygon_45_formation::PolyLine45::end	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iterator end() const { return points.end(); }$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:() const
boost::polygon::polygon_45_formation::PolyLine45::iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename std::list<Point>::const_iterator iterator;$/;"	t	class:boost::polygon::polygon_45_formation::PolyLine45	access:public
boost::polygon::polygon_45_formation::PolyLine45::operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45& operator=(const PolyLine45& that) {$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:(const PolyLine45& that)
boost::polygon::polygon_45_formation::PolyLine45::points	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      std::list<Point> points;$/;"	m	class:boost::polygon::polygon_45_formation::PolyLine45	access:public
boost::polygon::polygon_45_formation::PolyLine45::set	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::polygon_45_formation::PolyLine45::size	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline std::size_t size() const { return points.size(); }$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:() const
boost::polygon::polygon_45_formation::Polygon45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef polygon_45_data<Unit> Polygon45;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Polygon45Formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class Polygon45Formation {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Polygon45Formation::Polygon45Formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Formation() : scanData_(), x_((std::numeric_limits<Unit>::min)()), justBefore_(false), fractureHoles_(0) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:public	signature:()
boost::polygon::polygon_45_formation::Polygon45Formation::Polygon45Formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Formation(bool fractureHoles) : scanData_(), x_((std::numeric_limits<Unit>::min)()), justBefore_(false), fractureHoles_(fractureHoles) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:public	signature:(bool fractureHoles)
boost::polygon::polygon_45_formation::Polygon45Formation::Polygon45Formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Formation(const Polygon45Formation& that) :$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:public	signature:(const Polygon45Formation& that)
boost::polygon::polygon_45_formation::Polygon45Formation::Polygon45FormationData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef std::map<Vertex45, ActiveTail45*, lessVertex45> Polygon45FormationData;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
boost::polygon::polygon_45_formation::Polygon45Formation::const_iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename Polygon45FormationData::const_iterator const_iterator;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
boost::polygon::polygon_45_formation::Polygon45Formation::fractureHoles_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      int fractureHoles_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
boost::polygon::polygon_45_formation::Polygon45Formation::iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename Polygon45FormationData::iterator iterator;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
boost::polygon::polygon_45_formation::Polygon45Formation::justBefore_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      int justBefore_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
boost::polygon::polygon_45_formation::Polygon45Formation::lookUp_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iterator lookUp_(Unit y){$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private	signature:(Unit y)
boost::polygon::polygon_45_formation::Polygon45Formation::operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Formation& operator=(const Polygon45Formation& that) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:public	signature:(const Polygon45Formation& that)
boost::polygon::polygon_45_formation::Polygon45Formation::processEvent_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iT processEvent_(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private	signature:(cT& output, iT inputBegin, iT inputEnd)
boost::polygon::polygon_45_formation::Polygon45Formation::processPoint_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline std::pair<int, ActiveTail45*> processPoint_(cT& output, cT2& elements, Point point,$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private	signature:(cT& output, cT2& elements, Point point, Vertex45Count& counts, ActiveTail45** tails, Vertex45Count& incoming)
boost::polygon::polygon_45_formation::Polygon45Formation::scan	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      void scan(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:public	signature:(cT& output, iT inputBegin, iT inputEnd)
boost::polygon::polygon_45_formation::Polygon45Formation::scanData_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      Polygon45FormationData scanData_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
boost::polygon::polygon_45_formation::Polygon45Formation::x_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      Unit x_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
boost::polygon::polygon_45_formation::Polygon45Tiling	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class Polygon45Tiling {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Polygon45Tiling::Polygon45FormationData	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef std::map<Vertex45, ActiveTail45*, lessVertex45> Polygon45FormationData;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
boost::polygon::polygon_45_formation::Polygon45Tiling::Polygon45Tiling	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Tiling() : scanData_(), x_((std::numeric_limits<Unit>::min)()), justBefore_(false) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:public	signature:()
boost::polygon::polygon_45_formation::Polygon45Tiling::Polygon45Tiling	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Tiling(const Polygon45Tiling& that) :$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:public	signature:(const Polygon45Tiling& that)
boost::polygon::polygon_45_formation::Polygon45Tiling::const_iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename Polygon45FormationData::const_iterator const_iterator;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
boost::polygon::polygon_45_formation::Polygon45Tiling::getVerticalPair_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline void getVerticalPair_(std::pair<ActiveTail45*, ActiveTail45*>& verticalPair,$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private	signature:(std::pair<ActiveTail45*, ActiveTail45*>& verticalPair, iterator previter)
boost::polygon::polygon_45_formation::Polygon45Tiling::iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename Polygon45FormationData::iterator iterator;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
boost::polygon::polygon_45_formation::Polygon45Tiling::justBefore_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      int justBefore_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
boost::polygon::polygon_45_formation::Polygon45Tiling::lookUp_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iterator lookUp_(Unit y){$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private	signature:(Unit y)
boost::polygon::polygon_45_formation::Polygon45Tiling::operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Tiling& operator=(const Polygon45Tiling& that) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:public	signature:(const Polygon45Tiling& that)
boost::polygon::polygon_45_formation::Polygon45Tiling::processEvent_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iT processEvent_(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private	signature:(cT& output, iT inputBegin, iT inputEnd)
boost::polygon::polygon_45_formation::Polygon45Tiling::processPoint_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline std::pair<int, ActiveTail45*> processPoint_(cT& output, cT2& elements,$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private	signature:(cT& output, cT2& elements, std::pair<ActiveTail45*, ActiveTail45*>& verticalPair, iterator previter, Point point, Vertex45Count& counts, ActiveTail45** tails, Vertex45Count& incoming)
boost::polygon::polygon_45_formation::Polygon45Tiling::scan	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      void scan(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:public	signature:(cT& output, iT inputBegin, iT inputEnd)
boost::polygon::polygon_45_formation::Polygon45Tiling::scanData_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      Polygon45FormationData scanData_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
boost::polygon::polygon_45_formation::Polygon45Tiling::x_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      Unit x_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
boost::polygon::polygon_45_formation::Polygon45WithHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef polygon_45_with_holes_data<Unit> Polygon45WithHoles;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Scan45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    Scan45<Count2, typename boolean_op_45<Unit>::template boolean_op_45_output_functor<0> > Scan45;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Scan45Count	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename boolean_op_45<Unit>::Scan45Count Scan45Count;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Scan45Vertex	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef std::pair<Point, Scan45Count> Scan45Vertex;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Vertex45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename boolean_op_45<Unit>::Vertex45 Vertex45;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Vertex45Compact	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Vertex45CompactT<Vertex45Count> Vertex45Compact;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Vertex45CompactT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class Vertex45CompactT {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Vertex45CompactT::Vertex45CompactT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CompactT() : pt(), count() {}$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:()
boost::polygon::polygon_45_formation::Vertex45CompactT::Vertex45CompactT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CompactT(const Point& point, int riseIn, int countIn) : pt(point), count() {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Point& point, int riseIn, int countIn)
boost::polygon::polygon_45_formation::Vertex45CompactT::Vertex45CompactT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CompactT(const Vertex45CompactT& vertex) : pt(vertex.pt), count(vertex.count) {}$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex)
boost::polygon::polygon_45_formation::Vertex45CompactT::Vertex45CompactT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CompactT(const typename boolean_op_45<Unit>::template Vertex45T<ct2>& vertex) : pt(vertex.pt), count() {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const typename boolean_op_45<Unit>::template Vertex45T<ct2>& vertex)
boost::polygon::polygon_45_formation::Vertex45CompactT::Vertex45T	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename boolean_op_45<Unit>::template Vertex45T<typename ct::count_type> Vertex45T;$/;"	t	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public
boost::polygon::polygon_45_formation::Vertex45CompactT::count	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      ct count;$/;"	m	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public
boost::polygon::polygon_45_formation::Vertex45CompactT::haveVertex45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool haveVertex45(int index) const { return count[index]; }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(int index) const
boost::polygon::polygon_45_formation::Vertex45CompactT::operator !=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator!=(const Vertex45CompactT& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
boost::polygon::polygon_45_formation::Vertex45CompactT::operator !=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator!=(const std::pair<Point, Point>& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const std::pair<Point, Point>& vertex) const
boost::polygon::polygon_45_formation::Vertex45CompactT::operator <	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator<(const Vertex45CompactT& vertex) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
boost::polygon::polygon_45_formation::Vertex45CompactT::operator <=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator<=(const Vertex45CompactT& vertex) const { return !((*this) > vertex); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
boost::polygon::polygon_45_formation::Vertex45CompactT::operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CompactT& operator=(const Vertex45CompactT& vertex){$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex)
boost::polygon::polygon_45_formation::Vertex45CompactT::operator ==	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator==(const Vertex45CompactT& vertex) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
boost::polygon::polygon_45_formation::Vertex45CompactT::operator ==	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator==(const std::pair<Point, Point>& vertex) const { return false; }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const std::pair<Point, Point>& vertex) const
boost::polygon::polygon_45_formation::Vertex45CompactT::operator >	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator>(const Vertex45CompactT& vertex) const { return vertex < (*this); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
boost::polygon::polygon_45_formation::Vertex45CompactT::operator >=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator>=(const Vertex45CompactT& vertex) const { return !((*this) < vertex); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
boost::polygon::polygon_45_formation::Vertex45CompactT::operator []	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45T operator[](int index) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(int index) const
boost::polygon::polygon_45_formation::Vertex45CompactT::pt	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      Point pt;$/;"	m	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public
boost::polygon::polygon_45_formation::Vertex45Count	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Vertex45CountT<int> Vertex45Count;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Vertex45CountT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class Vertex45CountT {$/;"	c	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::Vertex45CountT::Vertex45CountT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT()$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:()
boost::polygon::polygon_45_formation::Vertex45CountT::Vertex45CountT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT(const Vertex45& vertex)$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45& vertex)
boost::polygon::polygon_45_formation::Vertex45CountT::Vertex45CountT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT(const Vertex45CountT& count)$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count)
boost::polygon::polygon_45_formation::Vertex45CountT::Vertex45CountT	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT(const ct& count1, const ct& count2, const ct& count3,$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const ct& count1, const ct& count2, const ct& count3, const ct& count4)
boost::polygon::polygon_45_formation::Vertex45CountT::count_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef ct count_type;$/;"	t	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public
boost::polygon::polygon_45_formation::Vertex45CountT::counts	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      ct counts[4];$/;"	m	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:private
boost::polygon::polygon_45_formation::Vertex45CountT::invert	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT invert() const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:() const
boost::polygon::polygon_45_formation::Vertex45CountT::is_45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool is_45() const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:() const
boost::polygon::polygon_45_formation::Vertex45CountT::operator !=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator!=(const Vertex45CountT& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count) const
boost::polygon::polygon_45_formation::Vertex45CountT::operator +	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT operator+(const Vertex45CountT& count) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count) const
boost::polygon::polygon_45_formation::Vertex45CountT::operator +=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT& operator+=(const Vertex45& element){$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45& element)
boost::polygon::polygon_45_formation::Vertex45CountT::operator +=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT& operator+=(const Vertex45CountT& count){$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count)
boost::polygon::polygon_45_formation::Vertex45CountT::operator -	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT operator-(const Vertex45CountT& count) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count) const
boost::polygon::polygon_45_formation::Vertex45CountT::operator -=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT& operator-=(const Vertex45CountT& count){$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count)
boost::polygon::polygon_45_formation::Vertex45CountT::operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT& operator=(const Vertex45CountT& count) {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count)
boost::polygon::polygon_45_formation::Vertex45CountT::operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT& operator=(ct count) {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(ct count)
boost::polygon::polygon_45_formation::Vertex45CountT::operator ==	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator==(const Vertex45CountT& count) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count) const
boost::polygon::polygon_45_formation::Vertex45CountT::operator []	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ct operator[](int index) const {return counts[index]; }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(int index) const
boost::polygon::polygon_45_formation::Vertex45CountT::operator []	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ct& operator[](int index) { return counts[index]; }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(int index)
boost::polygon::polygon_45_formation::lessVertex45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename boolean_op_45<Unit>::lessVertex45 lessVertex45;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
boost::polygon::polygon_45_formation::testPolygon45Formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45Formation(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45FormationP1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationP1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45FormationP2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationP2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45FormationRect	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationRect(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45FormationStar1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationStar1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45FormationStar2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationStar2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45FormationStarHole1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationStarHole1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45FormationStarHole2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationStarHole2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45Tiling	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45Tiling(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45TilingP1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45TilingP2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45TilingP3	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP3(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45TilingP4	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP4(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45TilingP5	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP5(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45TilingP6	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP6(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45TilingRect	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingRect(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45TilingStar1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingStar1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45TilingStar2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingStar2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45TilingStarHole1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingStarHole1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_formation::testPolygon45TilingStarHole2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingStarHole2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_45_property_merge	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^  struct polygon_45_property_merge {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_property_merge::CountMerge	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    class CountMerge {$/;"	c	struct:boost::polygon::polygon_45_property_merge	access:public
boost::polygon::polygon_45_property_merge::CountMerge::CountMerge	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge() : counts() {}$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:()
boost::polygon::polygon_45_property_merge::CountMerge::CountMerge	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge(const CountMerge& count) : counts(count.counts) {}$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count)
boost::polygon::polygon_45_property_merge::CountMerge::counts	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      std::vector<std::pair<property_type, int> > counts;$/;"	m	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public
boost::polygon::polygon_45_property_merge::CountMerge::invert	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge invert() const {$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:() const
boost::polygon::polygon_45_property_merge::CountMerge::operator !=	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline bool operator!=(const CountMerge& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count) const
boost::polygon::polygon_45_property_merge::CountMerge::operator +	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge operator+(const CountMerge& count) const {$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count) const
boost::polygon::polygon_45_property_merge::CountMerge::operator +=	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge& operator+=(const CountMerge& count){$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count)
boost::polygon::polygon_45_property_merge::CountMerge::operator -	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge operator-(const CountMerge& count) const {$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count) const
boost::polygon::polygon_45_property_merge::CountMerge::operator -=	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge& operator-=(const CountMerge& count){$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count)
boost::polygon::polygon_45_property_merge::CountMerge::operator =	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge& operator=(const CountMerge& count) { counts = count.counts; return *this; }$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count)
boost::polygon::polygon_45_property_merge::CountMerge::operator ==	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline bool operator==(const CountMerge& count) const { return counts == count.counts; }$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count) const
boost::polygon::polygon_45_property_merge::CountMerge::operator []	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline int& operator[](property_type index) {$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(property_type index)
boost::polygon::polygon_45_property_merge::LongUnit	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    typedef typename coordinate_traits<Unit>::manhattan_area_type LongUnit;$/;"	t	struct:boost::polygon::polygon_45_property_merge	access:public
boost::polygon::polygon_45_property_merge::MergeSetData	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    typedef std::vector<Vertex45Compact> MergeSetData;$/;"	t	struct:boost::polygon::polygon_45_property_merge	access:public
boost::polygon::polygon_45_property_merge::Point	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::polygon_45_property_merge	access:public
boost::polygon::polygon_45_property_merge::Vertex45Compact	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^                               typename boolean_op_45<Unit>::template Scan45CountT<CountMerge> > Vertex45Compact;$/;"	t	struct:boost::polygon::polygon_45_property_merge	access:public
boost::polygon::polygon_45_property_merge::lessVertex45Compact	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    struct lessVertex45Compact {$/;"	s	struct:boost::polygon::polygon_45_property_merge	access:public
boost::polygon::polygon_45_property_merge::lessVertex45Compact::operator ()	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      bool operator()(const Vertex45Compact& l, const Vertex45Compact& r) {$/;"	f	struct:boost::polygon::polygon_45_property_merge::lessVertex45Compact	access:public	signature:(const Vertex45Compact& l, const Vertex45Compact& r)
boost::polygon::polygon_45_property_merge::merge_45_output_functor	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    struct merge_45_output_functor {$/;"	s	struct:boost::polygon::polygon_45_property_merge	access:public
boost::polygon::polygon_45_property_merge::merge_45_output_functor::operator ()	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      void operator()(cT& output, const CountMerge& count1, const CountMerge& count2,$/;"	f	struct:boost::polygon::polygon_45_property_merge::merge_45_output_functor	access:public	signature:(cT& output, const CountMerge& count1, const CountMerge& count2, const Point& pt, int rise, direction_1d end)
boost::polygon::polygon_45_property_merge::merge_property_maps	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    static inline void merge_property_maps(property_map& mp, const property_map& mp2, bool subtract = false) {$/;"	f	struct:boost::polygon::polygon_45_property_merge	access:public	signature:(property_map& mp, const property_map& mp2, bool subtract = false)
boost::polygon::polygon_45_property_merge::performMerge	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    static void performMerge(output_type& result, MergeSetData& tsd) {$/;"	f	struct:boost::polygon::polygon_45_property_merge	access:public	signature:(output_type& result, MergeSetData& tsd)
boost::polygon::polygon_45_property_merge::populateMergeSetData	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    static void populateMergeSetData(MergeSetData& tsd, iT begin, iT end, property_type property) {$/;"	f	struct:boost::polygon::polygon_45_property_merge	access:public	signature:(MergeSetData& tsd, iT begin, iT end, property_type property)
boost::polygon::polygon_45_set_concept	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  struct polygon_45_set_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  class polygon_45_set_data {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_45_set_data::Polygon45VertexData	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef std::vector<Vertex45Compact> Polygon45VertexData;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
boost::polygon::polygon_45_set_data::Vertex45Compact	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename polygon_45_formation<Unit>::Vertex45Compact Vertex45Compact;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
boost::polygon::polygon_45_set_data::applyAdaptiveBoolean_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void applyAdaptiveBoolean_(const polygon_45_set_data& rvalue) const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& rvalue) const
boost::polygon::polygon_45_set_data::applyAdaptiveBoolean_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void applyAdaptiveBoolean_(polygon_45_set_data& result, const polygon_45_set_data& rvalue) const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(polygon_45_set_data& result, const polygon_45_set_data& rvalue) const
boost::polygon::polygon_45_set_data::applyAdaptiveBoolean_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::applyAdaptiveBoolean_(const polygon_45_set_data<Unit>& rvalue) const {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& rvalue) const
boost::polygon::polygon_45_set_data::applyAdaptiveBoolean_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::applyAdaptiveBoolean_(polygon_45_set_data<Unit>& result,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(polygon_45_set_data<Unit>& result, const polygon_45_set_data<Unit>& rvalue) const
boost::polygon::polygon_45_set_data::applyAdaptiveUnary_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void applyAdaptiveUnary_() const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::applyAdaptiveUnary_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::applyAdaptiveUnary_() const {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:() const
boost::polygon::polygon_45_set_data::begin	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::capacity	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline std::size_t capacity() const { return data_.capacity(); }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::clean	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    bool clean() const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::clean	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline bool polygon_45_set_data<Unit>::clean() const {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:() const
boost::polygon::polygon_45_set_data::clear	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void clear() { data_.clear(); error_data_.clear(); dirty_ = unsorted_ = false; is_manhattan_ = true; }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:()
boost::polygon::polygon_45_set_data::coordinate_type	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
boost::polygon::polygon_45_set_data::data_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    mutable value_type data_;$/;"	m	class:boost::polygon::polygon_45_set_data	access:private
boost::polygon::polygon_45_set_data::dirty	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool dirty() const { return dirty_; }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::dirty_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    mutable bool dirty_;$/;"	m	class:boost::polygon::polygon_45_set_data	access:private
boost::polygon::polygon_45_set_data::empty	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool empty() const { return data_.empty(); }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::end	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline iterator_type end() const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::error_count	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline std::size_t error_count() const { return error_data_.size() \/ 4; }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::error_data_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    mutable value_type error_data_;$/;"	m	class:boost::polygon::polygon_45_set_data	access:private
boost::polygon::polygon_45_set_data::extents	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    bool extents(rectangle_type& rect) const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(rectangle_type& rect) const
boost::polygon::polygon_45_set_data::extents	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline bool polygon_45_set_data<Unit>::extents(rectangle_type& rect) const{$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(rectangle_type& rect) const
boost::polygon::polygon_45_set_data::get	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void get(output_container& output) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(output_container& output) const
boost::polygon::polygon_45_set_data::get_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_45_concept tag) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(output_container& output, polygon_45_concept tag) const
boost::polygon::polygon_45_set_data::get_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_45_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(output_container& output, polygon_45_with_holes_concept tag) const
boost::polygon::polygon_45_set_data::get_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_concept tag) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(output_container& output, polygon_concept tag) const
boost::polygon::polygon_45_set_data::get_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(output_container& output, polygon_with_holes_concept tag) const
boost::polygon::polygon_45_set_data::get_error_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void get_error_data(polygon_45_set_data& p) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(polygon_45_set_data& p) const
boost::polygon::polygon_45_set_data::get_fracture	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_fracture(output_container& container, bool fracture_holes, concept_type ) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(output_container& container, bool fracture_holes, concept_type ) const
boost::polygon::polygon_45_set_data::get_polygons	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_polygons(cT& container) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(cT& container) const
boost::polygon::polygon_45_set_data::get_polygons_with_holes	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_polygons_with_holes(cT& container) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(cT& container) const
boost::polygon::polygon_45_set_data::get_trapezoids	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_trapezoids(cT& container) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(cT& container) const
boost::polygon::polygon_45_set_data::get_trapezoids	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_trapezoids(cT& container, orientation_2d slicing_orientation) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(cT& container, orientation_2d slicing_orientation) const
boost::polygon::polygon_45_set_data::has_error_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool has_error_data() const { return !error_data_.empty(); }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const Vertex45Compact& vertex_45, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const Vertex45Compact& vertex_45, bool is_hole = false)
boost::polygon::polygon_45_set_data::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const geometry_type& geometry_object, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const geometry_type& geometry_object, bool is_hole = false)
boost::polygon::polygon_45_set_data::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const polygon_45_set_data& polygon_set, bool is_hole = false);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& polygon_set, bool is_hole = false)
boost::polygon::polygon_45_set_data::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const polygon_45_set_data<coord_type>& polygon_set, bool is_hole = false);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data<coord_type>& polygon_set, bool is_hole = false)
boost::polygon::polygon_45_set_data::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const polygon_90_set_data<coordinate_type_2>& polygon_set, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_90_set_data<coordinate_type_2>& polygon_set, bool is_hole = false)
boost::polygon::polygon_45_set_data::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(iT input_begin, iT input_end, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(iT input_begin, iT input_end, bool is_hole = false)
boost::polygon::polygon_45_set_data::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(iterator_type input_begin, iterator_type input_end, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(iterator_type input_begin, iterator_type input_end, bool is_hole = false)
boost::polygon::polygon_45_set_data::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::insert(const polygon_45_set_data<Unit>& polygon_set, bool is_hole) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& polygon_set, bool is_hole)
boost::polygon::polygon_45_set_data::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::insert(const polygon_45_set_data<coord_type>& polygon_set, bool is_hole) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<coord_type>& polygon_set, bool is_hole)
boost::polygon::polygon_45_set_data::insert_clean	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert_clean(const Vertex45Compact& vertex_45, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const Vertex45Compact& vertex_45, bool is_hole = false)
boost::polygon::polygon_45_set_data::insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_45_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_45_concept )
boost::polygon::polygon_45_set_data::insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_45_set_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_45_set_concept )
boost::polygon::polygon_45_set_data::insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_45_with_holes_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_45_with_holes_concept )
boost::polygon::polygon_45_set_data::insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_90_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_90_concept )
boost::polygon::polygon_45_set_data::insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_90_set_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_90_set_concept )
boost::polygon::polygon_45_set_data::insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_90_with_holes_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_90_with_holes_concept )
boost::polygon::polygon_45_set_data::insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, rectangle_concept tag);$/;"	p	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, rectangle_concept tag)
boost::polygon::polygon_45_set_data::insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, undefined_concept) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, undefined_concept)
boost::polygon::polygon_45_set_data::insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::insert_dispatch(const geometry_type& geometry_object,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const geometry_type& geometry_object, bool is_hole, rectangle_concept )
boost::polygon::polygon_45_set_data::insert_vertex_half_edge_45_pair	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_vertex_half_edge_45_pair(const point_data<Unit>& pt1, point_data<Unit>& pt2,$/;"	p	class:boost::polygon::polygon_45_set_data	access:private	signature:(const point_data<Unit>& pt1, point_data<Unit>& pt2, const point_data<Unit>& pt3, direction_1d wdir)
boost::polygon::polygon_45_set_data::insert_vertex_half_edge_45_pair	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::insert_vertex_half_edge_45_pair(const point_data<Unit>& pt1, point_data<Unit>& pt2,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const point_data<Unit>& pt1, point_data<Unit>& pt2, const point_data<Unit>& pt3, direction_1d wdir)
boost::polygon::polygon_45_set_data::insert_vertex_sequence	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_vertex_sequence(iT begin_vertex, iT end_vertex,$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(iT begin_vertex, iT end_vertex, direction_1d winding, bool is_hole = false)
boost::polygon::polygon_45_set_data::insert_vertex_sequence	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::insert_vertex_sequence(iT begin_vertex, iT end_vertex,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(iT begin_vertex, iT end_vertex, direction_1d winding, bool is_hole)
boost::polygon::polygon_45_set_data::insert_with_resize	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& insert_with_resize(const geometry_type& poly,$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const geometry_type& poly, coordinate_type resizing, RoundingOption rounding = CLOSEST, CornerOption corner = INTERSECTION, bool hole = false)
boost::polygon::polygon_45_set_data::insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& insert_with_resize_dispatch(const geometry_type& poly,$/;"	p	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& poly, coordinate_type resizing, RoundingOption rounding, CornerOption corner, bool hole, polygon_45_concept tag)
boost::polygon::polygon_45_set_data::insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& insert_with_resize_dispatch(const geometry_type& poly,$/;"	p	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& poly, coordinate_type resizing, RoundingOption rounding, CornerOption corner, bool hole, polygon_45_with_holes_concept tag)
boost::polygon::polygon_45_set_data::insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  polygon_45_set_data<Unit>::insert_with_resize_dispatch(const geometry_type& poly,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const geometry_type& poly, coordinate_type resizing, RoundingOption rounding, CornerOption corner, bool hole, polygon_45_concept )
boost::polygon::polygon_45_set_data::insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  polygon_45_set_data<Unit>::insert_with_resize_dispatch(const geometry_type& poly,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const geometry_type& poly, coordinate_type resizing, RoundingOption rounding, CornerOption corner, bool hole, polygon_45_with_holes_concept )
boost::polygon::polygon_45_set_data::is_manhattan	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool is_manhattan() const { return is_manhattan_; }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::is_manhattan_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    mutable bool is_manhattan_;$/;"	m	class:boost::polygon::polygon_45_set_data	access:private
boost::polygon::polygon_45_set_data::iterator_type	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename value_type::const_iterator iterator_type;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
boost::polygon::polygon_45_set_data::operator !=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool operator!=(const polygon_45_set_data& p) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& p) const
boost::polygon::polygon_45_set_data::operator &=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator&=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
boost::polygon::polygon_45_set_data::operator &=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator&=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
boost::polygon::polygon_45_set_data::operator *=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator*=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
boost::polygon::polygon_45_set_data::operator *=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator*=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
boost::polygon::polygon_45_set_data::operator +=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator+=(Unit delta);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(Unit delta)
boost::polygon::polygon_45_set_data::operator +=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator+=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
boost::polygon::polygon_45_set_data::operator +=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator+=(Unit delta) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(Unit delta)
boost::polygon::polygon_45_set_data::operator +=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator+=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
boost::polygon::polygon_45_set_data::operator -=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator-=(Unit delta);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(Unit delta)
boost::polygon::polygon_45_set_data::operator -=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator-=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
boost::polygon::polygon_45_set_data::operator -=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator-=(Unit delta) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(Unit delta)
boost::polygon::polygon_45_set_data::operator -=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator-=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
boost::polygon::polygon_45_set_data::operator =	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data& operator=(const geometry_object& geometry) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const geometry_object& geometry)
boost::polygon::polygon_45_set_data::operator =	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data& operator=(const polygon_45_set_data& that) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& that)
boost::polygon::polygon_45_set_data::operator =	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data& operator=(const polygon_45_set_view<ltype, rtype, op_type>& that) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_view<ltype, rtype, op_type>& that)
boost::polygon::polygon_45_set_data::operator ==	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool operator==(const polygon_45_set_data& p) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& p) const
boost::polygon::polygon_45_set_data::operator ^=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator^=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
boost::polygon::polygon_45_set_data::operator ^=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator^=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
boost::polygon::polygon_45_set_data::operator |=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator|=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
boost::polygon::polygon_45_set_data::operator |=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator|=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
boost::polygon::polygon_45_set_data::operator_arg_type	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef polygon_45_set_data operator_arg_type;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
boost::polygon::polygon_45_set_data::polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data() : error_data_(), data_(), dirty_(false), unsorted_(false), is_manhattan_(true) {}$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:()
boost::polygon::polygon_45_set_data::polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data(const geometry_type& that) : error_data_(), data_(), dirty_(false), unsorted_(false), is_manhattan_(true) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const geometry_type& that)
boost::polygon::polygon_45_set_data::polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data(const polygon_45_set_data& that) :$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& that)
boost::polygon::polygon_45_set_data::polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data(const polygon_45_set_view<ltype, rtype, op_type>& that) :$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_view<ltype, rtype, op_type>& that)
boost::polygon::polygon_45_set_data::reserve	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void reserve(std::size_t size) { return data_.reserve(size); }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(std::size_t size)
boost::polygon::polygon_45_set_data::resize	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& resize(coordinate_type resizing, RoundingOption rounding = CLOSEST,$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(coordinate_type resizing, RoundingOption rounding = CLOSEST, CornerOption corner = INTERSECTION)
boost::polygon::polygon_45_set_data::resize	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  polygon_45_set_data<Unit>::resize(Unit resizing, RoundingOption rounding, CornerOption corner) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(Unit resizing, RoundingOption rounding, CornerOption corner)
boost::polygon::polygon_45_set_data::scale	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& scale(double scaling);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(double scaling)
boost::polygon::polygon_45_set_data::scale	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::scale(double factor) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(double factor)
boost::polygon::polygon_45_set_data::scale_down	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& scale_down(typename coordinate_traits<Unit>::unsigned_area_type factor);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(typename coordinate_traits<Unit>::unsigned_area_type factor)
boost::polygon::polygon_45_set_data::scale_down	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::scale_down(typename coordinate_traits<Unit>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(typename coordinate_traits<Unit>::unsigned_area_type factor)
boost::polygon::polygon_45_set_data::scale_up	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& scale_up(typename coordinate_traits<Unit>::unsigned_area_type factor);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(typename coordinate_traits<Unit>::unsigned_area_type factor)
boost::polygon::polygon_45_set_data::scale_up	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::scale_up(typename coordinate_traits<Unit>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(typename coordinate_traits<Unit>::unsigned_area_type factor)
boost::polygon::polygon_45_set_data::self_intersect	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& self_intersect() {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:()
boost::polygon::polygon_45_set_data::self_xor	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& self_xor() {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:()
boost::polygon::polygon_45_set_data::set	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void set(const value_type& value) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const value_type& value)
boost::polygon::polygon_45_set_data::set	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void set(input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(input_iterator_type input_begin, input_iterator_type input_end)
boost::polygon::polygon_45_set_data::set_clean	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void set_clean(const value_type& value) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const value_type& value)
boost::polygon::polygon_45_set_data::size	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline std::size_t size() const { clean(); return data_.size(); }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::snap	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void snap() const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::snap	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::snap() const {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:() const
boost::polygon::polygon_45_set_data::snap_vertex_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    static void snap_vertex_45(Vertex45Compact& vertex);$/;"	p	class:boost::polygon::polygon_45_set_data	access:private	signature:(Vertex45Compact& vertex)
boost::polygon::polygon_45_set_data::snap_vertex_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::snap_vertex_45(typename polygon_45_set_data<Unit>::Vertex45Compact& vertex) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(typename polygon_45_set_data<Unit>::Vertex45Compact& vertex)
boost::polygon::polygon_45_set_data::sort	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void sort() const{$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::sorted	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool sorted() const { return !unsorted_; }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::transform	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& transform(const transformation_type& tr);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const transformation_type& tr)
boost::polygon::polygon_45_set_data::transform	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::transform(const transformation_type& tr){$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const transformation_type& tr)
boost::polygon::polygon_45_set_data::unsorted_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    mutable bool unsorted_;$/;"	m	class:boost::polygon::polygon_45_set_data	access:private
boost::polygon::polygon_45_set_data::value	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
boost::polygon::polygon_45_set_data::value_type	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef Polygon45VertexData value_type;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
boost::polygon::polygon_45_set_data::~polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline ~polygon_45_set_data() {}$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:()
boost::polygon::polygon_45_set_mutable_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_mutable_traits {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_set_mutable_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_mutable_traits<polygon_45_set_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_set_mutable_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_mutable_traits<std::list<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_set_mutable_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_mutable_traits<std::vector<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_set_mutable_traits::set	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline void set(polygon_45_set_data<T>& polygon_set,$/;"	f	struct:boost::polygon::polygon_45_set_mutable_traits	access:public	signature:(polygon_45_set_data<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
boost::polygon::polygon_45_set_mutable_traits::set	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline void set(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	struct:boost::polygon::polygon_45_set_mutable_traits	access:public	signature:(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
boost::polygon::polygon_45_set_mutable_traits::set	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline void set(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	struct:boost::polygon::polygon_45_set_mutable_traits	access:public	signature:(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
boost::polygon::polygon_45_set_traits	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct polygon_45_set_traits<polygon_45_set_view<ltype, rtype, op_type> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_set_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_traits {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_set_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_traits<polygon_45_set_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_set_traits	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct polygon_45_set_traits<view_of<polygon_45_set_concept, T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_set_traits::begin	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static inline iterator_type begin(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set);$/;"	p	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
boost::polygon::polygon_45_set_traits::begin	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  begin(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set) {$/;"	f	class:boost::polygon::polygon_45_set_traits	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
boost::polygon::polygon_45_set_traits::begin	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline iterator_type begin(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const T& polygon_set)
boost::polygon::polygon_45_set_traits::begin	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline iterator_type begin(const polygon_45_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_data<T>& polygon_set)
boost::polygon::polygon_45_set_traits::begin	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static inline iterator_type begin(const view_of<polygon_45_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const view_of<polygon_45_set_concept, T>& polygon_set)
boost::polygon::polygon_45_set_traits::clean	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static inline bool clean(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set);$/;"	p	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
boost::polygon::polygon_45_set_traits::clean	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  clean(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set) {$/;"	f	class:boost::polygon::polygon_45_set_traits	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
boost::polygon::polygon_45_set_traits::clean	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline bool clean(const T& ) { return false; }$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const T& )
boost::polygon::polygon_45_set_traits::clean	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline bool clean(const polygon_45_set_data<T>& polygon_set) { polygon_set.clean(); return true; }$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_data<T>& polygon_set)
boost::polygon::polygon_45_set_traits::clean	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static inline bool clean(const view_of<polygon_45_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const view_of<polygon_45_set_concept, T>& polygon_set)
boost::polygon::polygon_45_set_traits::coordinate_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef typename polygon_45_set_view<ltype, rtype, op_type>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::coordinate_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename get_coordinate_type<T, typename geometry_concept<T>::type >::type coordinate_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::coordinate_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename polygon_45_set_data<T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::coordinate_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename view_of<polygon_45_set_concept, T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::end	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static inline iterator_type end(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set);$/;"	p	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
boost::polygon::polygon_45_set_traits::end	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  end(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set) {$/;"	f	class:boost::polygon::polygon_45_set_traits	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
boost::polygon::polygon_45_set_traits::end	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline iterator_type end(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const T& polygon_set)
boost::polygon::polygon_45_set_traits::end	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline iterator_type end(const polygon_45_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_data<T>& polygon_set)
boost::polygon::polygon_45_set_traits::end	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static inline iterator_type end(const view_of<polygon_45_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const view_of<polygon_45_set_concept, T>& polygon_set)
boost::polygon::polygon_45_set_traits::iterator_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef typename polygon_45_set_view<ltype, rtype, op_type>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::iterator_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename get_iterator_type<T>::type iterator_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::iterator_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename polygon_45_set_data<T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::iterator_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename view_of<polygon_45_set_concept, T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::operator_arg_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef typename polygon_45_set_view<ltype, rtype, op_type>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::operator_arg_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef T operator_arg_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::operator_arg_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename polygon_45_set_data<T>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::operator_arg_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef view_of<polygon_45_set_concept, T> operator_arg_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
boost::polygon::polygon_45_set_traits::orient	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static inline orientation_2d orient(const view_of<polygon_45_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const view_of<polygon_45_set_concept, T>& polygon_set)
boost::polygon::polygon_45_set_traits::set	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static inline void set(polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set,$/;"	p	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set, input_iterator_type input_begin, input_iterator_type input_end)
boost::polygon::polygon_45_set_traits::sorted	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline bool sorted(const T& ) { return false; }$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const T& )
boost::polygon::polygon_45_set_traits::sorted	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline bool sorted(const polygon_45_set_data<T>& polygon_set) { polygon_set.sort(); return true; }$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_data<T>& polygon_set)
boost::polygon::polygon_45_set_traits::sorted	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static inline bool sorted(const view_of<polygon_45_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const view_of<polygon_45_set_concept, T>& polygon_set)
boost::polygon::polygon_45_set_view	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  class polygon_45_set_view {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_45_set_view::begin	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    iterator_type begin() const { return value().begin(); }$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:() const
boost::polygon::polygon_45_set_view::coordinate_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef typename polygon_45_set_traits<ltype>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::polygon_45_set_view	access:public
boost::polygon::polygon_45_set_view::dirty	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    bool dirty() const { return value().dirty(); } \/\/result of a boolean is clean$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:() const
boost::polygon::polygon_45_set_view::end	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    iterator_type end() const { return value().end(); }$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:() const
boost::polygon::polygon_45_set_view::evaluated_	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    mutable bool evaluated_;$/;"	m	class:boost::polygon::polygon_45_set_view	access:private
boost::polygon::polygon_45_set_view::iterator_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef typename value_type::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_45_set_view	access:public
boost::polygon::polygon_45_set_view::lvalue_	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    const ltype& lvalue_;$/;"	m	class:boost::polygon::polygon_45_set_view	access:private
boost::polygon::polygon_45_set_view::operator =	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    polygon_45_set_view& operator=(const polygon_45_set_view&);$/;"	p	class:boost::polygon::polygon_45_set_view	access:private	signature:(const polygon_45_set_view&)
boost::polygon::polygon_45_set_view::operator_arg_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef polygon_45_set_view operator_arg_type;$/;"	t	class:boost::polygon::polygon_45_set_view	access:public
boost::polygon::polygon_45_set_view::output_	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    mutable value_type output_;$/;"	m	class:boost::polygon::polygon_45_set_view	access:private
boost::polygon::polygon_45_set_view::polygon_45_set_view	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    polygon_45_set_view(const ltype& lvalue,$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:(const ltype& lvalue, const rtype& rvalue )
boost::polygon::polygon_45_set_view::rvalue_	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    const rtype& rvalue_;$/;"	m	class:boost::polygon::polygon_45_set_view	access:private
boost::polygon::polygon_45_set_view::sorted	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    bool sorted() const { return value().sorted(); } \/\/result of a boolean is sorted$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:() const
boost::polygon::polygon_45_set_view::value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:() const
boost::polygon::polygon_45_set_view::value_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef polygon_45_set_data<coordinate_type> value_type;$/;"	t	class:boost::polygon::polygon_45_set_view	access:public
boost::polygon::polygon_45_touch	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^  struct polygon_45_touch {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_touch::CountTouch	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    class CountTouch {$/;"	c	struct:boost::polygon::polygon_45_touch	access:public
boost::polygon::polygon_45_touch::CountTouch::CountTouch	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch() : counts() {}$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:()
boost::polygon::polygon_45_touch::CountTouch::CountTouch	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch(const CountTouch& count) : counts(count.counts) {}$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count)
boost::polygon::polygon_45_touch::CountTouch::counts	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      std::vector<std::pair<int, int> > counts;$/;"	m	class:boost::polygon::polygon_45_touch::CountTouch	access:public
boost::polygon::polygon_45_touch::CountTouch::invert	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch invert() const {$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:() const
boost::polygon::polygon_45_touch::CountTouch::operator !=	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline bool operator!=(const CountTouch& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count) const
boost::polygon::polygon_45_touch::CountTouch::operator +	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch operator+(const CountTouch& count) const {$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count) const
boost::polygon::polygon_45_touch::CountTouch::operator +=	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch& operator+=(const CountTouch& count){$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count)
boost::polygon::polygon_45_touch::CountTouch::operator -	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch operator-(const CountTouch& count) const {$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count) const
boost::polygon::polygon_45_touch::CountTouch::operator -=	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch& operator-=(const CountTouch& count){$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count)
boost::polygon::polygon_45_touch::CountTouch::operator =	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch& operator=(const CountTouch& count) { counts = count.counts; return *this; }$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count)
boost::polygon::polygon_45_touch::CountTouch::operator ==	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline bool operator==(const CountTouch& count) const { return counts == count.counts; }$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count) const
boost::polygon::polygon_45_touch::CountTouch::operator []	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline int& operator[](int index) {$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(int index)
boost::polygon::polygon_45_touch::LongUnit	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    typedef typename coordinate_traits<Unit>::manhattan_area_type LongUnit;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
boost::polygon::polygon_45_touch::Point	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
boost::polygon::polygon_45_touch::TouchSetData	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    typedef std::vector<Vertex45Compact> TouchSetData;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
boost::polygon::polygon_45_touch::Vertex45Compact	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^                               typename boolean_op_45<Unit>::template Scan45CountT<CountTouch> > Vertex45Compact;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
boost::polygon::polygon_45_touch::lessVertex45Compact	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    struct lessVertex45Compact {$/;"	s	struct:boost::polygon::polygon_45_touch	access:public
boost::polygon::polygon_45_touch::lessVertex45Compact::operator ()	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      bool operator()(const Vertex45Compact& l, const Vertex45Compact& r) {$/;"	f	struct:boost::polygon::polygon_45_touch::lessVertex45Compact	access:public	signature:(const Vertex45Compact& l, const Vertex45Compact& r)
boost::polygon::polygon_45_touch::map_graph_o	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    typedef std::pair<std::pair<Unit, std::map<Unit, std::set<int> > >, std::map<int, std::set<int> > > map_graph_o;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
boost::polygon::polygon_45_touch::merge_property_maps	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    static inline void merge_property_maps(property_map& mp, const property_map& mp2, bool subtract = false) {$/;"	f	struct:boost::polygon::polygon_45_touch	access:public	signature:(property_map& mp, const property_map& mp2, bool subtract = false)
boost::polygon::polygon_45_touch::performTouch	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    static void performTouch(graph_type& graph, TouchSetData& tsd) {$/;"	f	struct:boost::polygon::polygon_45_touch	access:public	signature:(graph_type& graph, TouchSetData& tsd)
boost::polygon::polygon_45_touch::populateTouchSetData	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    static void populateTouchSetData(TouchSetData& tsd, iT begin, iT end, int nodeCount) {$/;"	f	struct:boost::polygon::polygon_45_touch	access:public	signature:(TouchSetData& tsd, iT begin, iT end, int nodeCount)
boost::polygon::polygon_45_touch::process_previous_x	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    static void process_previous_x(cT& output) {$/;"	f	struct:boost::polygon::polygon_45_touch	access:public	signature:(cT& output)
boost::polygon::polygon_45_touch::touch_45_output_functor	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    struct touch_45_output_functor {$/;"	s	struct:boost::polygon::polygon_45_touch	access:public
boost::polygon::polygon_45_touch::touch_45_output_functor::operator ()	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      void operator()(cT& output, const CountTouch& count1, const CountTouch& count2,$/;"	f	struct:boost::polygon::polygon_45_touch::touch_45_output_functor	access:public	signature:(cT& output, const CountTouch& count1, const CountTouch& count2, const Point& pt, int , direction_1d )
boost::polygon::polygon_45_touch::vector_graph_o	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    typedef std::pair<std::pair<Unit, std::map<Unit, std::set<int> > >, std::vector<std::set<int> > > vector_graph_o;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
boost::polygon::polygon_45_with_holes_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_45_with_holes_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_45_with_holes_data	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^class polygon_45_with_holes_data {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_45_with_holes_data::area_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef typename coordinate_traits<T>::coordinate_distance area_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
boost::polygon::polygon_45_with_holes_data::begin	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline const iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
boost::polygon::polygon_45_with_holes_data::begin_holes	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline const iterator_holes_type begin_holes() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
boost::polygon::polygon_45_with_holes_data::coordinate_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
boost::polygon::polygon_45_with_holes_data::end	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline const iterator_type end() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
boost::polygon::polygon_45_with_holes_data::end_holes	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline const iterator_holes_type end_holes() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
boost::polygon::polygon_45_with_holes_data::geometry_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef polygon_45_with_holes_concept geometry_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
boost::polygon::polygon_45_with_holes_data::hole_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef polygon_45_data<coordinate_type> hole_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
boost::polygon::polygon_45_with_holes_data::holes_	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  std::list<hole_type> holes_;$/;"	m	class:boost::polygon::polygon_45_with_holes_data	access:public
boost::polygon::polygon_45_with_holes_data::iterator_holes_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef typename std::list<polygon_45_data<coordinate_type> >::const_iterator iterator_holes_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
boost::polygon::polygon_45_with_holes_data::iterator_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef typename polygon_45_data<T>::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
boost::polygon::polygon_45_with_holes_data::operator =	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(const T2& rvalue)
boost::polygon::polygon_45_with_holes_data::operator =	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data& operator=(const polygon_45_with_holes_data& that) {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(const polygon_45_with_holes_data& that)
boost::polygon::polygon_45_with_holes_data::operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_45_with_holes_data<T>& polygon_45_with_holes_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	signature:(const T2& rvalue)
boost::polygon::polygon_45_with_holes_data::point_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
boost::polygon::polygon_45_with_holes_data::polygon_45_with_holes_data	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data() : self_(), holes_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:()
boost::polygon::polygon_45_with_holes_data::polygon_45_with_holes_data	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data(const polygon_45_with_holes_data& that) : self_(that.self_),$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(const polygon_45_with_holes_data& that)
boost::polygon::polygon_45_with_holes_data::polygon_45_with_holes_data	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data(iT input_begin, iT input_end) : self_(), holes_() {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_45_with_holes_data::polygon_45_with_holes_data	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data(iT input_begin, iT input_end, hiT holes_begin, hiT holes_end) : self_(), holes_() {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(iT input_begin, iT input_end, hiT holes_begin, hiT holes_end)
boost::polygon::polygon_45_with_holes_data::self_	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  polygon_45_data<coordinate_type> self_;$/;"	m	class:boost::polygon::polygon_45_with_holes_data	access:public
boost::polygon::polygon_45_with_holes_data::set	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data& set(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_45_with_holes_data::set_holes	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data& set_holes(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_45_with_holes_data::size	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline std::size_t size() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
boost::polygon::polygon_45_with_holes_data::size_holes	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline std::size_t size_holes() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
boost::polygon::polygon_90_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_90_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_data	/usr/include/boost/polygon/polygon_90_data.hpp	/^class polygon_90_data {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_90_data::area_type	/usr/include/boost/polygon/polygon_90_data.hpp	/^  typedef typename coordinate_traits<T>::area_type area_type;$/;"	t	class:boost::polygon::polygon_90_data	access:public
boost::polygon::polygon_90_data::begin	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline iterator_type begin() const { return iterator_type(coords_.begin(), coords_.end()); }$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:() const
boost::polygon::polygon_90_data::begin_compact	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline compact_iterator_type begin_compact() const { return coords_.begin(); }$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:() const
boost::polygon::polygon_90_data::compact_iterator_type	/usr/include/boost/polygon/polygon_90_data.hpp	/^  typedef typename std::vector<coordinate_type>::const_iterator compact_iterator_type;$/;"	t	class:boost::polygon::polygon_90_data	access:public
boost::polygon::polygon_90_data::coordinate_type	/usr/include/boost/polygon/polygon_90_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_90_data	access:public
boost::polygon::polygon_90_data::coords_	/usr/include/boost/polygon/polygon_90_data.hpp	/^  std::vector<coordinate_type> coords_;$/;"	m	class:boost::polygon::polygon_90_data	access:private
boost::polygon::polygon_90_data::end	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline iterator_type end() const { return iterator_type(coords_.end(), coords_.end()); }$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:() const
boost::polygon::polygon_90_data::end_compact	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline compact_iterator_type end_compact() const { return coords_.end(); }$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:() const
boost::polygon::polygon_90_data::geometry_type	/usr/include/boost/polygon/polygon_90_data.hpp	/^  typedef polygon_90_concept geometry_type;$/;"	t	class:boost::polygon::polygon_90_data	access:public
boost::polygon::polygon_90_data::iterator_type	/usr/include/boost/polygon/polygon_90_data.hpp	/^  typedef iterator_compact_to_points<compact_iterator_type, point_data<coordinate_type> > iterator_type;$/;"	t	class:boost::polygon::polygon_90_data	access:public
boost::polygon::polygon_90_data::operator =	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_90_data	access:public	signature:(const T2& rvalue)
boost::polygon::polygon_90_data::operator =	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data& operator=(const polygon_90_data& that) {$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:(const polygon_90_data& that)
boost::polygon::polygon_90_data::operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_90_data<T>& polygon_90_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_90_data	signature:(const T2& rvalue)
boost::polygon::polygon_90_data::operator ==	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline bool operator==(const polygon_90_data& that) const {$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:(const polygon_90_data& that) const
boost::polygon::polygon_90_data::polygon_90_data	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data() : coords_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:()
boost::polygon::polygon_90_data::polygon_90_data	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data(const polygon_90_data& that) : coords_(that.coords_) {}$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:(const polygon_90_data& that)
boost::polygon::polygon_90_data::set	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data& set(iT begin_point, iT end_point) {$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:(iT begin_point, iT end_point)
boost::polygon::polygon_90_data::set_compact	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data& set_compact(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_90_data::size	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline std::size_t size() const { return coords_.size(); }$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:() const
boost::polygon::polygon_90_mutable_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_90_mutable_traits {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_mutable_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_90_mutable_traits<T, typename gtl_same_type<polygon_concept, typename geometry_concept<T>::type>::type> {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_mutable_traits::set_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline T& set_compact(T& t, iT input_begin, iT input_end) {$/;"	f	struct:boost::polygon::polygon_90_mutable_traits	access:public	signature:(T& t, iT input_begin, iT input_end)
boost::polygon::polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^  class polygon_90_set_data {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_90_set_data::applyBooleanBinaryOp	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void applyBooleanBinaryOp(iterator_type_1 itr1, iterator_type_1 itr1_end,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(iterator_type_1 itr1, iterator_type_1 itr1_end, iterator_type_2 itr2, iterator_type_2 itr2_end, T2 defaultCount)
boost::polygon::polygon_90_set_data::begin	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
boost::polygon::polygon_90_set_data::bloat	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    bloat(direction_2d dir, typename coordinate_traits<coordinate_type>::unsigned_area_type shrinking) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(direction_2d dir, typename coordinate_traits<coordinate_type>::unsigned_area_type shrinking)
boost::polygon::polygon_90_set_data::bloat	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    bloat(typename coordinate_traits<coordinate_type>::unsigned_area_type west_bloating,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type west_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type east_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type south_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type north_bloating)
boost::polygon::polygon_90_set_data::bloat2	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    bloat2(typename coordinate_traits<coordinate_type>::unsigned_area_type west_bloating,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type west_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type east_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type south_bloating, typename coordinate_traits<coordinate_type>::unsigned_area_type north_bloating)
boost::polygon::polygon_90_set_data::capacity	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline std::size_t capacity() const { return data_.capacity(); }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
boost::polygon::polygon_90_set_data::clean	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void clean() const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
boost::polygon::polygon_90_set_data::clear	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void clear() { data_.clear(); dirty_ = unsorted_ = false; }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:()
boost::polygon::polygon_90_set_data::coordinate_type	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_90_set_data	access:public
boost::polygon::polygon_90_set_data::data_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    mutable value_type data_;$/;"	m	class:boost::polygon::polygon_90_set_data	access:private
boost::polygon::polygon_90_set_data::dirty	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline bool dirty() const { return dirty_; }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
boost::polygon::polygon_90_set_data::dirty_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    mutable bool dirty_;$/;"	m	class:boost::polygon::polygon_90_set_data	access:private
boost::polygon::polygon_90_set_data::empty	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline bool empty() const { clean(); return data_.empty(); }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
boost::polygon::polygon_90_set_data::end	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline iterator_type end() const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
boost::polygon::polygon_90_set_data::extents	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    extents(rectangle_type& extents_rectangle) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(rectangle_type& extents_rectangle) const
boost::polygon::polygon_90_set_data::get	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void get(output_container& output) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(output_container& output) const
boost::polygon::polygon_90_set_data::get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_45_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_45_concept tag) const
boost::polygon::polygon_90_set_data::get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_45_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_45_with_holes_concept tag) const
boost::polygon::polygon_90_set_data::get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_90_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_90_concept tag) const
boost::polygon::polygon_90_set_data::get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_90_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_90_with_holes_concept tag) const
boost::polygon::polygon_90_set_data::get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_concept tag) const
boost::polygon::polygon_90_set_data::get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_with_holes_concept tag) const
boost::polygon::polygon_90_set_data::get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, rectangle_concept ) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, rectangle_concept ) const
boost::polygon::polygon_90_set_data::get_fracture	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_fracture(output_container& container, bool fracture_holes, concept_type tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& container, bool fracture_holes, concept_type tag) const
boost::polygon::polygon_90_set_data::get_polygons	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void get_polygons(output_container& output) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(output_container& output) const
boost::polygon::polygon_90_set_data::get_rectangles	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void get_rectangles(output_container& output) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(output_container& output) const
boost::polygon::polygon_90_set_data::get_rectangles	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void get_rectangles(output_container& output, orientation_2d slicing_orientation) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(output_container& output, orientation_2d slicing_orientation) const
boost::polygon::polygon_90_set_data::insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const geometry_type& geometry_object, bool is_hole = false, orientation_2d = HORIZONTAL) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const geometry_type& geometry_object, bool is_hole = false, orientation_2d = HORIZONTAL)
boost::polygon::polygon_90_set_data::insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const polygon_90_set_data& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& polygon_set)
boost::polygon::polygon_90_set_data::insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const std::pair<coordinate_type, std::pair<coordinate_type, int> >& vertex, bool is_hole = false,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const std::pair<coordinate_type, std::pair<coordinate_type, int> >& vertex, bool is_hole = false, orientation_2d orient = HORIZONTAL)
boost::polygon::polygon_90_set_data::insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const std::pair<std::pair<point_data<coordinate_type>, point_data<coordinate_type> >, int>& edge, bool is_hole = false,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const std::pair<std::pair<point_data<coordinate_type>, point_data<coordinate_type> >, int>& edge, bool is_hole = false, orientation_2d orient = HORIZONTAL)
boost::polygon::polygon_90_set_data::insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(coordinate_type major_coordinate, const std::pair<interval_data<coordinate_type>, int>& edge) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(coordinate_type major_coordinate, const std::pair<interval_data<coordinate_type>, int>& edge)
boost::polygon::polygon_90_set_data::insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(iT input_begin, iT input_end, orientation_2d orient = HORIZONTAL) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(iT input_begin, iT input_end, orientation_2d orient = HORIZONTAL)
boost::polygon::polygon_90_set_data::insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(iterator_type input_begin, iterator_type input_end, orientation_2d orient = HORIZONTAL) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(iterator_type input_begin, iterator_type input_end, orientation_2d orient = HORIZONTAL)
boost::polygon::polygon_90_set_data::interact	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data& interact(const polygon_90_set_data& that) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& that)
boost::polygon::polygon_90_set_data::iterator_type	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    typedef typename std::vector<std::pair<coordinate_type, std::pair<coordinate_type, int> > >::const_iterator iterator_type;$/;"	t	class:boost::polygon::polygon_90_set_data	access:public
boost::polygon::polygon_90_set_data::modify_pt	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    static void modify_pt(point_data<coordinate_type>& pt, const point_data<coordinate_type>&  prev_pt,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(point_data<coordinate_type>& pt, const point_data<coordinate_type>& prev_pt, const point_data<coordinate_type>& current_pt, const point_data<coordinate_type>& next_pt, coordinate_type west_bloating, coordinate_type east_bloating, coordinate_type south_bloating, coordinate_type north_bloating)
boost::polygon::polygon_90_set_data::move	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& move(coordinate_type x_delta, coordinate_type y_delta) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(coordinate_type x_delta, coordinate_type y_delta)
boost::polygon::polygon_90_set_data::operator !=	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline bool operator!=(const polygon_90_set_data& p) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& p) const
boost::polygon::polygon_90_set_data::operator =	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  inline polygon_90_set_data<T>& polygon_90_set_data<T>::operator=(const polygon_90_set_view<ltype, rtype, op_type>& that) {$/;"	f	class:boost::polygon::polygon_90_set_data	signature:(const polygon_90_set_view<ltype, rtype, op_type>& that)
boost::polygon::polygon_90_set_data::operator =	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data& operator=(const geometry_object& geometry) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const geometry_object& geometry)
boost::polygon::polygon_90_set_data::operator =	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data& operator=(const polygon_90_set_data& that) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& that)
boost::polygon::polygon_90_set_data::operator =	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data& operator=(const polygon_90_set_view<ltype, rtype, op_type>& that);$/;"	p	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& that)
boost::polygon::polygon_90_set_data::operator ==	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline bool operator==(const polygon_90_set_data& p) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& p) const
boost::polygon::polygon_90_set_data::operator_arg_type	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    typedef polygon_90_set_data operator_arg_type;$/;"	t	class:boost::polygon::polygon_90_set_data	access:public
boost::polygon::polygon_90_set_data::orient	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline orientation_2d orient() const { return orient_; }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
boost::polygon::polygon_90_set_data::orient_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    orientation_2d orient_;$/;"	m	class:boost::polygon::polygon_90_set_data	access:private
boost::polygon::polygon_90_set_data::polygon_90_set_data	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  inline polygon_90_set_data<T>::polygon_90_set_data(const polygon_90_set_view<ltype, rtype, op_type>& that) :$/;"	f	class:boost::polygon::polygon_90_set_data	signature:(const polygon_90_set_view<ltype, rtype, op_type>& that)
boost::polygon::polygon_90_set_data::polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data() : orient_(HORIZONTAL), data_(), dirty_(false), unsorted_(false) {}$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:()
boost::polygon::polygon_90_set_data::polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data(const polygon_90_set_data& that) :$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& that)
boost::polygon::polygon_90_set_data::polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data(const polygon_90_set_view<ltype, rtype, op_type>& that);$/;"	p	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& that)
boost::polygon::polygon_90_set_data::polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data(orientation_2d orient) : orient_(orient), data_(), dirty_(false), unsorted_(false) {}$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(orientation_2d orient)
boost::polygon::polygon_90_set_data::polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data(orientation_2d orient, const polygon_90_set_data& that) :$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(orientation_2d orient, const polygon_90_set_data& that)
boost::polygon::polygon_90_set_data::polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data(orientation_2d orient, iT input_begin, iT input_end) :$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(orientation_2d orient, iT input_begin, iT input_end)
boost::polygon::polygon_90_set_data::remove_colinear_pts	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    static bool remove_colinear_pts(std::vector<point_data<coordinate_type> >& poly) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(std::vector<point_data<coordinate_type> >& poly)
boost::polygon::polygon_90_set_data::reserve	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void reserve(std::size_t size) { return data_.reserve(size); }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(std::size_t size)
boost::polygon::polygon_90_set_data::resize	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    resize(coordinate_type west, coordinate_type east, coordinate_type south, coordinate_type north);$/;"	p	class:boost::polygon::polygon_90_set_data	access:public	signature:(coordinate_type west, coordinate_type east, coordinate_type south, coordinate_type north)
boost::polygon::polygon_90_set_data::resize	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^  polygon_90_set_data<coordinate_type>::resize(coordinate_type west,$/;"	f	class:boost::polygon::polygon_90_set_data	signature:(coordinate_type west, coordinate_type east, coordinate_type south, coordinate_type north)
boost::polygon::polygon_90_set_data::resize_poly_down	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    static bool resize_poly_down(std::vector<point_data<coordinate_type> >& poly,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(std::vector<point_data<coordinate_type> >& poly, coordinate_type west_shrinking, coordinate_type east_shrinking, coordinate_type south_shrinking, coordinate_type north_shrinking)
boost::polygon::polygon_90_set_data::resize_poly_up	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    static void resize_poly_up(std::vector<point_data<coordinate_type> >& poly,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(std::vector<point_data<coordinate_type> >& poly, coordinate_type west_bloating, coordinate_type east_bloating, coordinate_type south_bloating, coordinate_type north_bloating)
boost::polygon::polygon_90_set_data::scale	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& scale(const anisotropic_scale_factor<scaling_type>& scaling) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const anisotropic_scale_factor<scaling_type>& scaling)
boost::polygon::polygon_90_set_data::scale	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& scale(double factor) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(double factor)
boost::polygon::polygon_90_set_data::scale_down	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& scale_down(typename coordinate_traits<coordinate_type>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type factor)
boost::polygon::polygon_90_set_data::scale_up	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& scale_up(typename coordinate_traits<coordinate_type>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type factor)
boost::polygon::polygon_90_set_data::scale_with	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& scale_with(const scaling_type& scaling) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const scaling_type& scaling)
boost::polygon::polygon_90_set_data::self_intersect	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& self_intersect() {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:()
boost::polygon::polygon_90_set_data::self_xor	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& self_xor() {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:()
boost::polygon::polygon_90_set_data::set	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void set(const value_type& value, orientation_2d orient) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const value_type& value, orientation_2d orient)
boost::polygon::polygon_90_set_data::set	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void set(input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient)
boost::polygon::polygon_90_set_data::shrink	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    shrink(direction_2d dir, typename coordinate_traits<coordinate_type>::unsigned_area_type shrinking) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(direction_2d dir, typename coordinate_traits<coordinate_type>::unsigned_area_type shrinking)
boost::polygon::polygon_90_set_data::shrink	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    shrink(typename coordinate_traits<coordinate_type>::unsigned_area_type west_shrinking,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type west_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type east_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type south_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type north_shrinking)
boost::polygon::polygon_90_set_data::shrink2	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    shrink2(typename coordinate_traits<coordinate_type>::unsigned_area_type west_shrinking,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type west_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type east_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type south_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type north_shrinking)
boost::polygon::polygon_90_set_data::size	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline std::size_t size() const { clean(); return data_.size(); }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
boost::polygon::polygon_90_set_data::sort	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void sort() const{$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
boost::polygon::polygon_90_set_data::sorted	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline bool sorted() const { return !unsorted_; }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
boost::polygon::polygon_90_set_data::transform	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& transform(const transformation_type& transformation) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const transformation_type& transformation)
boost::polygon::polygon_90_set_data::unsorted_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    mutable bool unsorted_;$/;"	m	class:boost::polygon::polygon_90_set_data	access:private
boost::polygon::polygon_90_set_data::value	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
boost::polygon::polygon_90_set_data::value_type	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    typedef std::vector<std::pair<coordinate_type, std::pair<coordinate_type, int> > > value_type;$/;"	t	class:boost::polygon::polygon_90_set_data	access:public
boost::polygon::polygon_90_set_data::~polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline ~polygon_90_set_data() {}$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:()
boost::polygon::polygon_90_set_mutable_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_mutable_traits {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_set_mutable_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_mutable_traits<polygon_90_set_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_set_mutable_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_mutable_traits<std::list<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_set_mutable_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_mutable_traits<std::vector<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_set_mutable_traits::concept_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename geometry_concept<T>::type concept_type;$/;"	t	struct:boost::polygon::polygon_90_set_mutable_traits	access:public
boost::polygon::polygon_90_set_mutable_traits::set	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline void set(polygon_90_set_data<T>& polygon_set,$/;"	f	struct:boost::polygon::polygon_90_set_mutable_traits	access:public	signature:(polygon_90_set_data<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient)
boost::polygon::polygon_90_set_mutable_traits::set	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline void set(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient) {$/;"	f	struct:boost::polygon::polygon_90_set_mutable_traits	access:public	signature:(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient)
boost::polygon::polygon_90_set_mutable_traits::set	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline void set(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient) {$/;"	f	struct:boost::polygon::polygon_90_set_mutable_traits	access:public	signature:(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient)
boost::polygon::polygon_90_set_traits	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct polygon_90_set_traits<polygon_90_set_view<ltype, rtype, op_type> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_set_traits	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct polygon_90_set_traits<view_of<polygon_90_set_concept, T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_set_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_traits {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_set_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_traits<polygon_90_set_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_set_traits::begin	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    static inline iterator_type begin(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_90_set_traits::begin	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  begin(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_traits	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_90_set_traits::begin	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static inline iterator_type begin(const view_of<polygon_90_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const view_of<polygon_90_set_concept, T>& polygon_set)
boost::polygon::polygon_90_set_traits::begin	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline iterator_type begin(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const T& polygon_set)
boost::polygon::polygon_90_set_traits::begin	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline iterator_type begin(const polygon_90_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_data<T>& polygon_set)
boost::polygon::polygon_90_set_traits::clean	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    static inline bool clean(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_90_set_traits::clean	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  clean(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_traits	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_90_set_traits::clean	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static inline bool clean(const view_of<polygon_90_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const view_of<polygon_90_set_concept, T>& polygon_set)
boost::polygon::polygon_90_set_traits::clean	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline bool clean(const T&) { return false; }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const T&)
boost::polygon::polygon_90_set_traits::clean	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline bool clean(const polygon_90_set_data<T>& polygon_set) { polygon_set.clean(); return true; }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_data<T>& polygon_set)
boost::polygon::polygon_90_set_traits::coordinate_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef typename polygon_90_set_view<ltype, rtype, op_type>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::coordinate_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename view_of<polygon_90_set_concept, T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::coordinate_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename get_coordinate_type<T, typename geometry_concept<T>::type >::type coordinate_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::coordinate_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename polygon_90_set_data<T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::end	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    static inline iterator_type end(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_90_set_traits::end	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  end(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_traits	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_90_set_traits::end	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static inline iterator_type end(const view_of<polygon_90_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const view_of<polygon_90_set_concept, T>& polygon_set)
boost::polygon::polygon_90_set_traits::end	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline iterator_type end(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const T& polygon_set)
boost::polygon::polygon_90_set_traits::end	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline iterator_type end(const polygon_90_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_data<T>& polygon_set)
boost::polygon::polygon_90_set_traits::indirection_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef get_iterator_type<T> indirection_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::iterator_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef typename polygon_90_set_view<ltype, rtype, op_type>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::iterator_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename view_of<polygon_90_set_concept, T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::iterator_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename get_iterator_type<T>::type iterator_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::iterator_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename polygon_90_set_data<T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::operator_arg_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef typename polygon_90_set_view<ltype, rtype, op_type>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::operator_arg_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef view_of<polygon_90_set_concept, T> operator_arg_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::operator_arg_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef T operator_arg_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::operator_arg_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename polygon_90_set_data<T>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
boost::polygon::polygon_90_set_traits::orient	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    static inline orientation_2d orient(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_90_set_traits::orient	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  orient(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_traits	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_90_set_traits::orient	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static inline orientation_2d orient(const view_of<polygon_90_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const view_of<polygon_90_set_concept, T>& polygon_set)
boost::polygon::polygon_90_set_traits::orient	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline orientation_2d orient(const T&) { return HORIZONTAL; }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const T&)
boost::polygon::polygon_90_set_traits::orient	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline orientation_2d orient(const polygon_90_set_data<T>& polygon_set) { return polygon_set.orient(); }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_data<T>& polygon_set)
boost::polygon::polygon_90_set_traits::sorted	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    static inline bool sorted(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_90_set_traits::sorted	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  sorted(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_traits	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_90_set_traits::sorted	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static inline bool sorted(const view_of<polygon_90_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const view_of<polygon_90_set_concept, T>& polygon_set)
boost::polygon::polygon_90_set_traits::sorted	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline bool sorted(const T&) { return false; }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const T&)
boost::polygon::polygon_90_set_traits::sorted	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline bool sorted(const polygon_90_set_data<T>& polygon_set) { polygon_set.sort(); return true; }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_data<T>& polygon_set)
boost::polygon::polygon_90_set_view	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  class polygon_90_set_view {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_90_set_view::begin	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    iterator_type begin() const { return value().begin(); }$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
boost::polygon::polygon_90_set_view::coordinate_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef typename polygon_90_set_traits<ltype>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::polygon_90_set_view	access:public
boost::polygon::polygon_90_set_view::dirty	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    bool dirty() const { return false; } \/\/result of a boolean is clean$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
boost::polygon::polygon_90_set_view::end	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    iterator_type end() const { return value().end(); }$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
boost::polygon::polygon_90_set_view::evaluated_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    mutable bool evaluated_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
boost::polygon::polygon_90_set_view::iterator_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef typename value_type::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_90_set_view	access:public
boost::polygon::polygon_90_set_view::lvalue_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    const ltype& lvalue_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
boost::polygon::polygon_90_set_view::op_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    op_type op_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
boost::polygon::polygon_90_set_view::operator =	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    polygon_90_set_view& operator=(const polygon_90_set_view&);$/;"	p	class:boost::polygon::polygon_90_set_view	access:private	signature:(const polygon_90_set_view&)
boost::polygon::polygon_90_set_view::operator_arg_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef polygon_90_set_view operator_arg_type;$/;"	t	class:boost::polygon::polygon_90_set_view	access:public
boost::polygon::polygon_90_set_view::orient	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    orientation_2d orient() const { return orient_; }$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
boost::polygon::polygon_90_set_view::orient_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    orientation_2d orient_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
boost::polygon::polygon_90_set_view::output_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    mutable value_type output_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
boost::polygon::polygon_90_set_view::polygon_90_set_view	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    polygon_90_set_view(const ltype& lvalue,$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:(const ltype& lvalue, const rtype& rvalue, orientation_2d orient, op_type op)
boost::polygon::polygon_90_set_view::rvalue_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    const rtype& rvalue_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
boost::polygon::polygon_90_set_view::sort	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    void sort() const {} \/\/is always sorted$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
boost::polygon::polygon_90_set_view::sorted	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    bool sorted() const { return true; } \/\/result of a boolean is sorted$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
boost::polygon::polygon_90_set_view::value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_90_set_view	access:private	signature:() const
boost::polygon::polygon_90_set_view::value_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef polygon_90_set_data<coordinate_type> value_type;$/;"	t	class:boost::polygon::polygon_90_set_view	access:public
boost::polygon::polygon_90_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_90_traits {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_traits::begin_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline compact_iterator_type begin_compact(const T& t) {$/;"	f	struct:boost::polygon::polygon_90_traits	access:public	signature:(const T& t)
boost::polygon::polygon_90_traits::compact_iterator_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::compact_iterator_type compact_iterator_type;$/;"	t	struct:boost::polygon::polygon_90_traits	access:public
boost::polygon::polygon_90_traits::coordinate_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_90_traits	access:public
boost::polygon::polygon_90_traits::end_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline compact_iterator_type end_compact(const T& t) {$/;"	f	struct:boost::polygon::polygon_90_traits	access:public	signature:(const T& t)
boost::polygon::polygon_90_traits::size	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline std::size_t size(const T& t) {$/;"	f	struct:boost::polygon::polygon_90_traits	access:public	signature:(const T& t)
boost::polygon::polygon_90_traits::winding	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline winding_direction winding(const T&) {$/;"	f	struct:boost::polygon::polygon_90_traits	access:public	signature:(const T&)
boost::polygon::polygon_90_with_holes_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_90_with_holes_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_90_with_holes_data	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^class polygon_90_with_holes_data {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_90_with_holes_data::area_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef typename coordinate_traits<T>::area_type area_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
boost::polygon::polygon_90_with_holes_data::begin	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
boost::polygon::polygon_90_with_holes_data::begin_compact	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const compact_iterator_type begin_compact() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
boost::polygon::polygon_90_with_holes_data::begin_holes	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const iterator_holes_type begin_holes() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
boost::polygon::polygon_90_with_holes_data::compact_iterator_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef typename polygon_90_data<T>::compact_iterator_type compact_iterator_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
boost::polygon::polygon_90_with_holes_data::coordinate_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
boost::polygon::polygon_90_with_holes_data::end	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const iterator_type end() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
boost::polygon::polygon_90_with_holes_data::end_compact	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const compact_iterator_type end_compact() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
boost::polygon::polygon_90_with_holes_data::end_holes	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const iterator_holes_type end_holes() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
boost::polygon::polygon_90_with_holes_data::geometry_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef polygon_90_with_holes_concept geometry_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
boost::polygon::polygon_90_with_holes_data::hole_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef polygon_90_data<coordinate_type> hole_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
boost::polygon::polygon_90_with_holes_data::holes_	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  std::list<hole_type> holes_;$/;"	m	class:boost::polygon::polygon_90_with_holes_data	access:private
boost::polygon::polygon_90_with_holes_data::iterator_holes_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef typename std::list<polygon_90_data<coordinate_type> >::const_iterator iterator_holes_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
boost::polygon::polygon_90_with_holes_data::iterator_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef typename polygon_90_data<T>::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
boost::polygon::polygon_90_with_holes_data::operator =	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(const T2& rvalue)
boost::polygon::polygon_90_with_holes_data::operator =	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data& operator=(const polygon_90_with_holes_data& that) {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(const polygon_90_with_holes_data& that)
boost::polygon::polygon_90_with_holes_data::operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_90_with_holes_data<T>& polygon_90_with_holes_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	signature:(const T2& rvalue)
boost::polygon::polygon_90_with_holes_data::point_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
boost::polygon::polygon_90_with_holes_data::polygon_90_with_holes_data	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data() : self_(), holes_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:()
boost::polygon::polygon_90_with_holes_data::polygon_90_with_holes_data	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data(const polygon_90_with_holes_data& that) : self_(that.self_),$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(const polygon_90_with_holes_data& that)
boost::polygon::polygon_90_with_holes_data::self_	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  polygon_90_data<coordinate_type> self_;$/;"	m	class:boost::polygon::polygon_90_with_holes_data	access:private
boost::polygon::polygon_90_with_holes_data::set	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data& set(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_90_with_holes_data::set_compact	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data& set_compact(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_90_with_holes_data::set_holes	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data& set_holes(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_90_with_holes_data::size	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline std::size_t size() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
boost::polygon::polygon_90_with_holes_data::size_holes	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline std::size_t size_holes() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
boost::polygon::polygon_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  class polygon_arbitrary_formation : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
boost::polygon::polygon_arbitrary_formation::Point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class active_tail_arbitrary {$/;"	c	class:boost::polygon::polygon_arbitrary_formation	access:public
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary() : tailp_(), otherTailp_(), holesList_(), head_() {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:()
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary(Point point, active_tail_arbitrary* otherTailp, bool head = true) :$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(Point point, active_tail_arbitrary* otherTailp, bool head = true)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary(active_tail_arbitrary* otherTailp) :$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(active_tail_arbitrary* otherTailp)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary(const active_tail_arbitrary& that) :$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(const active_tail_arbitrary& that)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary(const vertex_half_edge& vertex, active_tail_arbitrary* otherTailp = 0) : tailp_(), otherTailp_(), holesList_(), head_() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(const vertex_half_edge& vertex, active_tail_arbitrary* otherTailp = 0)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::addHole	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary* addHole(active_tail_arbitrary* hole) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(active_tail_arbitrary* hole)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::copyHoles	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline void copyHoles(active_tail_arbitrary& that) { holesList_.splice(holesList_.end(), that.holesList_); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(active_tail_arbitrary& that)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::createActiveTailsAsPair	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      static inline std::pair<active_tail_arbitrary*, active_tail_arbitrary*> createActiveTailsAsPair(Point point, bool solid,$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(Point point, bool solid, active_tail_arbitrary* phole, bool fractureHoles)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::destroyContents	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline void destroyContents() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:()
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::getHoles	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline const std::list<active_tail_arbitrary*>& getHoles() const { return holesList_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::getOtherActiveTail	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary* getOtherActiveTail() const { return otherTailp_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::getOtherTail	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary* getOtherTail() const { return otherTailp_->tailp_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::getPoint	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline Point getPoint() const {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::getTail	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary* getTail() const { return tailp_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::head_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      bool head_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:protected
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::holesList_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      std::list<active_tail_arbitrary*> holesList_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:protected
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::isOtherTail	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool isOtherTail(const active_tail_arbitrary& b) const { return &b == otherTailp_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(const active_tail_arbitrary& b) const
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef typename poly_line_arbitrary::iterator iterator;$/;"	t	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::iteratorHoles	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef typename std::list<active_tail_arbitrary*>::const_iterator iteratorHoles;$/;"	t	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::join	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool join(active_tail_arbitrary* tail) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(active_tail_arbitrary* tail)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::joinChains	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      static inline active_tail_arbitrary* joinChains(Point point, active_tail_arbitrary* at1, active_tail_arbitrary* at2, bool solid,$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(Point point, active_tail_arbitrary* at1, active_tail_arbitrary* at2, bool solid, cT& output)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary& operator=(const active_tail_arbitrary& that) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(const active_tail_arbitrary& that)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const active_tail_arbitrary& b) const {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(const active_tail_arbitrary& b) const
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::otherTailp_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      active_tail_arbitrary *otherTailp_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:protected
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::print	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline void print() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:()
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::pushPoint	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline void pushPoint(Point point) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(Point point)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::solidToLeft	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool solidToLeft() const { return head_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::solidToRight	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool solidToRight() const { return !head_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::tailp_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      poly_line_arbitrary* tailp_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:protected
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::updateTail	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary& updateTail(poly_line_arbitrary* newTail) { tailp_ = newTail; return *this; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(poly_line_arbitrary* newTail)
boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary::~active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline ~active_tail_arbitrary() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:()
boost::polygon::polygon_arbitrary_formation::compact_vertex_arbitrary_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void compact_vertex_arbitrary_count(const Point& pt, vertex_arbitrary_count &count) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(const Point& pt, vertex_arbitrary_count &count)
boost::polygon::polygon_arbitrary_formation::const_iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_data::const_iterator const_iterator;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:protected
boost::polygon::polygon_arbitrary_formation::fractureHoles_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    int fractureHoles_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation	access:protected
boost::polygon::polygon_arbitrary_formation::half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
boost::polygon::polygon_arbitrary_formation::incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::vector<std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*> > incoming_count;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
boost::polygon::polygon_arbitrary_formation::iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_data::iterator iterator;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:protected
boost::polygon::polygon_arbitrary_formation::justBefore_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    int justBefore_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation	access:protected
boost::polygon::polygon_arbitrary_formation::less_half_edge_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class less_half_edge_count : public std::binary_function<vertex_half_edge, vertex_half_edge, bool> {$/;"	c	class:boost::polygon::polygon_arbitrary_formation	inherits:std::binary_function	access:public
boost::polygon::polygon_arbitrary_formation::less_half_edge_count::less_half_edge_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge_count() : pt_() {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_half_edge_count	access:public	signature:()
boost::polygon::polygon_arbitrary_formation::less_half_edge_count::less_half_edge_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge_count(Point point) : pt_(point) {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_half_edge_count	access:public	signature:(Point point)
boost::polygon::polygon_arbitrary_formation::less_half_edge_count::operator ()	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator () (const std::pair<Point, int>& elm1, const std::pair<Point, int>& elm2) const {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_half_edge_count	access:public	signature:(const std::pair<Point, int>& elm1, const std::pair<Point, int>& elm2) const
boost::polygon::polygon_arbitrary_formation::less_half_edge_count::pt_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Point pt_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::less_half_edge_count	access:private
boost::polygon::polygon_arbitrary_formation::less_incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class less_incoming_count : public std::binary_function<std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*>,$/;"	c	class:boost::polygon::polygon_arbitrary_formation	inherits:std::binary_function	access:public
boost::polygon::polygon_arbitrary_formation::less_incoming_count::less_incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_incoming_count() : pt_() {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_incoming_count	access:public	signature:()
boost::polygon::polygon_arbitrary_formation::less_incoming_count::less_incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_incoming_count(Point point) : pt_(point) {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_incoming_count	access:public	signature:(Point point)
boost::polygon::polygon_arbitrary_formation::less_incoming_count::operator ()	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator () (const std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*>& elm1,$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_incoming_count	access:public	signature:(const std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*>& elm1, const std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*>& elm2) const
boost::polygon::polygon_arbitrary_formation::less_incoming_count::pt_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Point pt_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::less_incoming_count	access:private
boost::polygon::polygon_arbitrary_formation::less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::less_vertex_half_edge less_vertex_half_edge;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
boost::polygon::polygon_arbitrary_formation::lookUp_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator lookUp_(Unit y){$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:protected	signature:(Unit y)
boost::polygon::polygon_arbitrary_formation::operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline polygon_arbitrary_formation& operator=(const polygon_arbitrary_formation& that) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(const polygon_arbitrary_formation& that)
boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class poly_line_arbitrary {$/;"	c	class:boost::polygon::polygon_arbitrary_formation	access:public
boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary::begin	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator begin() const { return points.begin(); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:() const
boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary::end	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator end() const { return points.end(); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:() const
boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary::iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef typename std::list<Point>::const_iterator iterator;$/;"	t	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public
boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary::operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary& operator=(const poly_line_arbitrary& that) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:(const poly_line_arbitrary& that)
boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary::points	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      std::list<Point> points;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public
boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary::poly_line_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary() : points() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:()
boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary::poly_line_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary(const poly_line_arbitrary& that) : points(that.points) {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:(const poly_line_arbitrary& that)
boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary::set	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary::size	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline std::size_t size() const { return points.size(); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:() const
boost::polygon::polygon_arbitrary_formation::polygon_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline polygon_arbitrary_formation() :$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:()
boost::polygon::polygon_arbitrary_formation::polygon_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline polygon_arbitrary_formation(bool fractureHoles) :$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(bool fractureHoles)
boost::polygon::polygon_arbitrary_formation::polygon_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline polygon_arbitrary_formation(const polygon_arbitrary_formation& that) :$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(const polygon_arbitrary_formation& that)
boost::polygon::polygon_arbitrary_formation::print	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void print(const scanline_data& data) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:protected	signature:(const scanline_data& data)
boost::polygon::polygon_arbitrary_formation::print	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void print(const vertex_arbitrary_count& count) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:protected	signature:(const vertex_arbitrary_count& count)
boost::polygon::polygon_arbitrary_formation::processEvent_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iT processEvent_(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:protected	signature:(cT& output, iT inputBegin, iT inputEnd)
boost::polygon::polygon_arbitrary_formation::processPoint_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline std::pair<std::pair<Point, int>, active_tail_arbitrary*> processPoint_(cT& output, cT2& elements, Point point,$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:protected	signature:(cT& output, cT2& elements, Point point, incoming_count& counts_from_scanline, vertex_arbitrary_count& incoming_count)
boost::polygon::polygon_arbitrary_formation::scan	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    void scan(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(cT& output, iT inputBegin, iT inputEnd)
boost::polygon::polygon_arbitrary_formation::scanData_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    scanline_data scanData_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation	access:protected
boost::polygon::polygon_arbitrary_formation::scanline_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::map<vertex_half_edge, active_tail_arbitrary*, less_vertex_half_edge> scanline_data;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:protected
boost::polygon::polygon_arbitrary_formation::sort_incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void sort_incoming_count(incoming_count& count, const Point& pt) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(incoming_count& count, const Point& pt)
boost::polygon::polygon_arbitrary_formation::sort_vertex_arbitrary_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void sort_vertex_arbitrary_count(vertex_arbitrary_count& count, const Point& pt) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(vertex_arbitrary_count& count, const Point& pt)
boost::polygon::polygon_arbitrary_formation::testPolygonArbitraryFormationColinear	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationColinear(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_arbitrary_formation::testPolygonArbitraryFormationP1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationP1(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_arbitrary_formation::testPolygonArbitraryFormationP2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationP2(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_arbitrary_formation::testPolygonArbitraryFormationPolys	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationPolys(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_arbitrary_formation::testPolygonArbitraryFormationRect	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationRect(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_arbitrary_formation::testPolygonArbitraryFormationSelfTouch1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationSelfTouch1(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_arbitrary_formation::testPolygonArbitraryFormationSelfTouch2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationSelfTouch2(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_arbitrary_formation::testPolygonArbitraryFormationSelfTouch3	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationSelfTouch3(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_arbitrary_formation::testSegmentIntersection	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testSegmentIntersection(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class vertex_arbitrary_compact {$/;"	c	class:boost::polygon::polygon_arbitrary_formation	access:public
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      vertex_arbitrary_count count;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::have_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool have_vertex_half_edge(int index) const { return count[index]; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(int index) const
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::operator !=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator!=(const std::pair<Point, Point>& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const std::pair<Point, Point>& vertex) const
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::operator !=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator!=(const vertex_arbitrary_compact& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::operator <	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator<(const vertex_arbitrary_compact& vertex) const {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::operator <=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator<=(const vertex_arbitrary_compact& vertex) const { return !((*this) > vertex); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact& operator=(const std::pair<Point, Point>& vertex){ return *this; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const std::pair<Point, Point>& vertex)
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact& operator=(const vertex_arbitrary_compact& vertex){$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex)
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const std::pair<Point, Point>& vertex) const { return false; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const std::pair<Point, Point>& vertex) const
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const vertex_arbitrary_compact& vertex) const {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::operator >	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator>(const vertex_arbitrary_compact& vertex) const { return vertex < (*this); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::operator >=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator>=(const vertex_arbitrary_compact& vertex) const { return !((*this) < vertex); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::operator []	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge operator[](int index) const { return vertex_half_edge(pt, count[index]); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(int index) const
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::pt	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Point pt;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact() : pt(), count() {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:()
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact(const Point& point, const Point& other_point, int countIn) : pt(point), count() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const Point& point, const Point& other_point, int countIn)
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact(const vertex_arbitrary_compact& vertex) : pt(vertex.pt), count(vertex.count) {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex)
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact::vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact(const vertex_half_edge& vertex) : pt(vertex.pt), count() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_half_edge& vertex)
boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::vector<std::pair<Point, int> > vertex_arbitrary_count;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
boost::polygon::polygon_arbitrary_formation::vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::vertex_half_edge vertex_half_edge;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
boost::polygon::polygon_arbitrary_formation::x_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    Unit x_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation	access:protected
boost::polygon::polygon_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_data	/usr/include/boost/polygon/polygon_data.hpp	/^class polygon_data {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_data::area_type	/usr/include/boost/polygon/polygon_data.hpp	/^  typedef typename coordinate_traits<T>::coordinate_distance area_type;$/;"	t	class:boost::polygon::polygon_data	access:public
boost::polygon::polygon_data::begin	/usr/include/boost/polygon/polygon_data.hpp	/^  inline iterator_type begin() const { return coords_.begin(); }$/;"	f	class:boost::polygon::polygon_data	access:public	signature:() const
boost::polygon::polygon_data::coordinate_type	/usr/include/boost/polygon/polygon_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_data	access:public
boost::polygon::polygon_data::coords_	/usr/include/boost/polygon/polygon_data.hpp	/^  std::vector<point_data<coordinate_type> > coords_;$/;"	m	class:boost::polygon::polygon_data	access:public
boost::polygon::polygon_data::end	/usr/include/boost/polygon/polygon_data.hpp	/^  inline iterator_type end() const { return coords_.end(); }$/;"	f	class:boost::polygon::polygon_data	access:public	signature:() const
boost::polygon::polygon_data::geometry_type	/usr/include/boost/polygon/polygon_data.hpp	/^  typedef polygon_concept geometry_type;$/;"	t	class:boost::polygon::polygon_data	access:public
boost::polygon::polygon_data::iterator_type	/usr/include/boost/polygon/polygon_data.hpp	/^  typedef typename std::vector<point_data<coordinate_type> >::const_iterator iterator_type;$/;"	t	class:boost::polygon::polygon_data	access:public
boost::polygon::polygon_data::operator !=	/usr/include/boost/polygon/polygon_data.hpp	/^  inline bool operator!=(const polygon_data& that) const { return !((*this) == that); }$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(const polygon_data& that) const
boost::polygon::polygon_data::operator =	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_data	access:public	signature:(const T2& rvalue)
boost::polygon::polygon_data::operator =	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data& operator=(const polygon_data& that) {$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(const polygon_data& that)
boost::polygon::polygon_data::operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_data<T>& polygon_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_data	signature:(const T2& rvalue)
boost::polygon::polygon_data::operator ==	/usr/include/boost/polygon/polygon_data.hpp	/^  inline bool operator==(const polygon_data& that) const {$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(const polygon_data& that) const
boost::polygon::polygon_data::point_type	/usr/include/boost/polygon/polygon_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_data	access:public
boost::polygon::polygon_data::polygon_data	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data() : coords_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_data	access:public	signature:()
boost::polygon::polygon_data::polygon_data	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data(const polygon_data& that) : coords_(that.coords_) {}$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(const polygon_data& that)
boost::polygon::polygon_data::polygon_data	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data(iT input_begin, iT input_end) : coords_(input_begin, input_end) {}$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_data::set	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data& set(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_data::size	/usr/include/boost/polygon/polygon_data.hpp	/^  inline std::size_t size() const { return coords_.size(); }$/;"	f	class:boost::polygon::polygon_data	access:public	signature:() const
boost::polygon::polygon_formation	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^namespace polygon_formation {$/;"	n	namespace:boost::polygon
boost::polygon::polygon_formation::ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  class ActiveTail {$/;"	c	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::ActiveTail::ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail();$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:()
boost::polygon::polygon_formation::ActiveTail::ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail(PolyLine<Unit>* active, ActiveTail* otherTailp);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(PolyLine<Unit>* active, ActiveTail* otherTailp)
boost::polygon::polygon_formation::ActiveTail::ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail(const ActiveTail& that);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& that)
boost::polygon::polygon_formation::ActiveTail::ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail(orientation_2d orient, Unit coord, Side solidToRight, ActiveTail* otherTailp);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(orientation_2d orient, Unit coord, Side solidToRight, ActiveTail* otherTailp)
boost::polygon::polygon_formation::ActiveTail::ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>::ActiveTail() : tailp_(0), otherTailp_(0), holesList_() {}$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:()
boost::polygon::polygon_formation::ActiveTail::ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>::ActiveTail(PolyLine<Unit>* active, ActiveTail<Unit>* otherTailp) :$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(PolyLine<Unit>* active, ActiveTail<Unit>* otherTailp)
boost::polygon::polygon_formation::ActiveTail::ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>::ActiveTail(const ActiveTail<Unit>& that) : tailp_(that.tailp_), otherTailp_(that.otherTailp_), holesList_() {}$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& that)
boost::polygon::polygon_formation::ActiveTail::ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>::ActiveTail(orientation_2d orient, Unit coord, Side solidToRight, ActiveTail* otherTailp) :$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(orientation_2d orient, Unit coord, Side solidToRight, ActiveTail* otherTailp)
boost::polygon::polygon_formation::ActiveTail::addHole	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail* addHole(ActiveTail* hole, bool fractureHoles);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(ActiveTail* hole, bool fractureHoles)
boost::polygon::polygon_formation::ActiveTail::addHole	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>* ActiveTail<Unit>::addHole(ActiveTail<Unit>* hole, bool fractureHoles) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(ActiveTail<Unit>* hole, bool fractureHoles)
boost::polygon::polygon_formation::ActiveTail::begin	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    iterator begin(bool isHole, orientation_2d orient) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(bool isHole, orientation_2d orient) const
boost::polygon::polygon_formation::ActiveTail::begin	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline typename ActiveTail<Unit>::iterator ActiveTail<Unit>::begin(bool isHole, orientation_2d orient) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(bool isHole, orientation_2d orient) const
boost::polygon::polygon_formation::ActiveTail::beginHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    iteratorHoles beginHoles() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
boost::polygon::polygon_formation::ActiveTail::beginHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline typename ActiveTail<Unit>::iteratorHoles ActiveTail<Unit>::beginHoles() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
boost::polygon::polygon_formation::ActiveTail::copyHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void copyHoles(ActiveTail& that);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(ActiveTail& that)
boost::polygon::polygon_formation::ActiveTail::copyHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::copyHoles(ActiveTail<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(ActiveTail<Unit>& that)
boost::polygon::polygon_formation::ActiveTail::destroyContents	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void destroyContents();$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:()
boost::polygon::polygon_formation::ActiveTail::destroyContents	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::destroyContents() {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:()
boost::polygon::polygon_formation::ActiveTail::destroyOutBuffer	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    static void destroyOutBuffer();$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:()
boost::polygon::polygon_formation::ActiveTail::end	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    iterator end() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
boost::polygon::polygon_formation::ActiveTail::end	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline typename ActiveTail<Unit>::iterator ActiveTail<Unit>::end() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
boost::polygon::polygon_formation::ActiveTail::endHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    iteratorHoles endHoles() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
boost::polygon::polygon_formation::ActiveTail::endHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline typename ActiveTail<Unit>::iteratorHoles ActiveTail<Unit>::endHoles() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
boost::polygon::polygon_formation::ActiveTail::getCoord	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    Unit getCoord() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
boost::polygon::polygon_formation::ActiveTail::getCoord	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline Unit ActiveTail<Unit>::getCoord() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
boost::polygon::polygon_formation::ActiveTail::getCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    Unit getCoordinate() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
boost::polygon::polygon_formation::ActiveTail::getCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline Unit ActiveTail<Unit>::getCoordinate() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
boost::polygon::polygon_formation::ActiveTail::getHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    const std::list<ActiveTail*>& getHoles() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
boost::polygon::polygon_formation::ActiveTail::getHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline const std::list<ActiveTail<Unit>*>& ActiveTail<Unit>::getHoles() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
boost::polygon::polygon_formation::ActiveTail::getOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    orientation_2d getOrient() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
boost::polygon::polygon_formation::ActiveTail::getOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline orientation_2d ActiveTail<Unit>::getOrient() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
boost::polygon::polygon_formation::ActiveTail::getOtherActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail* getOtherActiveTail() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
boost::polygon::polygon_formation::ActiveTail::getOtherActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>* ActiveTail<Unit>::getOtherActiveTail() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
boost::polygon::polygon_formation::ActiveTail::getOtherTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine<Unit>* getOtherTail() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
boost::polygon::polygon_formation::ActiveTail::getOtherTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>* ActiveTail<Unit>::getOtherTail() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
boost::polygon::polygon_formation::ActiveTail::getTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine<Unit>* getTail() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
boost::polygon::polygon_formation::ActiveTail::getTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>* ActiveTail<Unit>::getTail() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
boost::polygon::polygon_formation::ActiveTail::holesList_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    std::list<ActiveTail*> holesList_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail	access:private
boost::polygon::polygon_formation::ActiveTail::isOtherTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool isOtherTail(const ActiveTail& b);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b)
boost::polygon::polygon_formation::ActiveTail::isOtherTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::isOtherTail(const ActiveTail<Unit>& b) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b)
boost::polygon::polygon_formation::ActiveTail::iterator	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    class iterator {$/;"	c	class:boost::polygon::polygon_formation::ActiveTail	access:public
boost::polygon::polygon_formation::ActiveTail::iterator::indexEnd_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      unsigned int indexEnd_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:private
boost::polygon::polygon_formation::ActiveTail::iterator::index_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      unsigned int index_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:private
boost::polygon::polygon_formation::ActiveTail::iterator::iterator	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iterator() : pLine_(), pLineEnd_(), index_(), indexEnd_(), startEnd_() {}$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:()
boost::polygon::polygon_formation::ActiveTail::iterator::iterator	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iterator(const ActiveTail* at, bool isHole, orientation_2d orient) :$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:(const ActiveTail* at, bool isHole, orientation_2d orient)
boost::polygon::polygon_formation::ActiveTail::iterator::operator !=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline bool operator!=(const iterator& that) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:(const iterator& that) const
boost::polygon::polygon_formation::ActiveTail::iterator::operator *	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline Unit operator*() { return (*pLine_)[index_]; }$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:()
boost::polygon::polygon_formation::ActiveTail::iterator::operator ++	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline const iterator operator++(int) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:(int)
boost::polygon::polygon_formation::ActiveTail::iterator::operator ++	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iterator& operator++() {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:()
boost::polygon::polygon_formation::ActiveTail::iterator::operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline bool operator==(const iterator& that) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:(const iterator& that) const
boost::polygon::polygon_formation::ActiveTail::iterator::pLineEnd_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      const PolyLine<Unit>* pLineEnd_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:private
boost::polygon::polygon_formation::ActiveTail::iterator::pLine_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      const PolyLine<Unit>* pLine_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:private
boost::polygon::polygon_formation::ActiveTail::iterator::startEnd_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      End startEnd_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:private
boost::polygon::polygon_formation::ActiveTail::iteratorHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename std::list<ActiveTail*>::const_iterator iteratorHoles;$/;"	t	class:boost::polygon::polygon_formation::ActiveTail	access:public
boost::polygon::polygon_formation::ActiveTail::joinChains	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    static ActiveTail* joinChains(ActiveTail* at1, ActiveTail* at2, bool solid, std::vector<Unit>& outBufferTmp);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(ActiveTail* at1, ActiveTail* at2, bool solid, std::vector<Unit>& outBufferTmp)
boost::polygon::polygon_formation::ActiveTail::joinChains	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    static ActiveTail* joinChains(ActiveTail* at1, ActiveTail* at2, bool solid, typename std::vector<PolygonT>& outBufferTmp);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(ActiveTail* at1, ActiveTail* at2, bool solid, typename std::vector<PolygonT>& outBufferTmp)
boost::polygon::polygon_formation::ActiveTail::joinChains	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>* ActiveTail<Unit>::joinChains(ActiveTail<Unit>* at1, ActiveTail<Unit>* at2, bool solid, std::vector<Unit>& outBufferTmp)$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(ActiveTail<Unit>* at1, ActiveTail<Unit>* at2, bool solid, std::vector<Unit>& outBufferTmp)
boost::polygon::polygon_formation::ActiveTail::joinChains	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>* ActiveTail<Unit>::joinChains(ActiveTail<Unit>* at1, ActiveTail<Unit>* at2, bool solid,$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(ActiveTail<Unit>* at1, ActiveTail<Unit>* at2, bool solid, std::vector<PolygonT>& outBufferTmp)
boost::polygon::polygon_formation::ActiveTail::operator <	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator<(const ActiveTail& b) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b) const
boost::polygon::polygon_formation::ActiveTail::operator <	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::operator<(const ActiveTail<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b) const
boost::polygon::polygon_formation::ActiveTail::operator <=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator<=(const ActiveTail& b) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b) const
boost::polygon::polygon_formation::ActiveTail::operator <=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::operator<=(const ActiveTail<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b) const
boost::polygon::polygon_formation::ActiveTail::operator =	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail& operator=(const ActiveTail& that);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& that)
boost::polygon::polygon_formation::ActiveTail::operator =	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>& ActiveTail<Unit>::operator=(const ActiveTail<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& that)
boost::polygon::polygon_formation::ActiveTail::operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator==(const ActiveTail& b) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b) const
boost::polygon::polygon_formation::ActiveTail::operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::operator==(const ActiveTail<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b) const
boost::polygon::polygon_formation::ActiveTail::operator >	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator>(const ActiveTail& b) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b) const
boost::polygon::polygon_formation::ActiveTail::operator >	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::operator>(const ActiveTail<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b) const
boost::polygon::polygon_formation::ActiveTail::operator >=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator>=(const ActiveTail& b) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b) const
boost::polygon::polygon_formation::ActiveTail::operator >=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::operator>=(const ActiveTail<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b) const
boost::polygon::polygon_formation::ActiveTail::otherTailp_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail *otherTailp_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail	access:private
boost::polygon::polygon_formation::ActiveTail::pushCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void pushCoordinate(Unit coord);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(Unit coord)
boost::polygon::polygon_formation::ActiveTail::pushCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::pushCoordinate(Unit coord) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(Unit coord)
boost::polygon::polygon_formation::ActiveTail::solidToRight	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool solidToRight() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
boost::polygon::polygon_formation::ActiveTail::solidToRight	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::solidToRight() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
boost::polygon::polygon_formation::ActiveTail::tailp_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine<Unit>* tailp_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail	access:private
boost::polygon::polygon_formation::ActiveTail::updateTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail& updateTail(PolyLine<Unit>* newTail);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(PolyLine<Unit>* newTail)
boost::polygon::polygon_formation::ActiveTail::updateTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>& ActiveTail<Unit>::updateTail(PolyLine<Unit>* newTail) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(PolyLine<Unit>* newTail)
boost::polygon::polygon_formation::ActiveTail::writeOutFigure	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void writeOutFigure(std::vector<Unit>& outVec, bool isHole = false) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(std::vector<Unit>& outVec, bool isHole = false) const
boost::polygon::polygon_formation::ActiveTail::writeOutFigure	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::writeOutFigure(std::vector<Unit>& outVec, bool isHole) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(std::vector<Unit>& outVec, bool isHole) const
boost::polygon::polygon_formation::ActiveTail::writeOutFigureHoleItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void writeOutFigureHoleItrs(iteratorHoles& beginOut, iteratorHoles& endOut) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(iteratorHoles& beginOut, iteratorHoles& endOut) const
boost::polygon::polygon_formation::ActiveTail::writeOutFigureHoleItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::writeOutFigureHoleItrs(iteratorHoles& beginOut, iteratorHoles& endOut) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(iteratorHoles& beginOut, iteratorHoles& endOut) const
boost::polygon::polygon_formation::ActiveTail::writeOutFigureItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void writeOutFigureItrs(iterator& beginOut, iterator& endOut, bool isHole = false, orientation_2d orient = VERTICAL) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(iterator& beginOut, iterator& endOut, bool isHole = false, orientation_2d orient = VERTICAL) const
boost::polygon::polygon_formation::ActiveTail::writeOutFigureItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::writeOutFigureItrs(iterator& beginOut, iterator& endOut, bool isHole, orientation_2d orient) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(iterator& beginOut, iterator& endOut, bool isHole, orientation_2d orient) const
boost::polygon::polygon_formation::ActiveTail::~ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ~ActiveTail();$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:()
boost::polygon::polygon_formation::ActiveTail::~ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>::~ActiveTail() {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:()
boost::polygon::polygon_formation::End	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  typedef bool End;$/;"	t	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::HEAD	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const End HEAD = false;$/;"	m	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::HEAD_TO_TAIL	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const int VERTICAL_HEAD = 1, HEAD_TO_TAIL = 2, TAIL_TO_TAIL = 4, SOLID_TO_RIGHT = 8;$/;"	m	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::LEFT	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const Side LEFT = false;$/;"	m	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  class PolyLine {$/;"	c	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::PolyLine::PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine();$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:()
boost::polygon::polygon_formation::PolyLine::PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine(const PolyLine& pline);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(const PolyLine& pline)
boost::polygon::polygon_formation::PolyLine::PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine(orientation_2d orient, Unit coord, Side side);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(orientation_2d orient, Unit coord, Side side)
boost::polygon::polygon_formation::PolyLine::PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>::PolyLine() : ptdata_() ,headp_(0), tailp_(0), state_(-1) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:()
boost::polygon::polygon_formation::PolyLine::PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>::PolyLine(const PolyLine<Unit>& pline) : ptdata_(pline.ptdata_),$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(const PolyLine<Unit>& pline)
boost::polygon::polygon_formation::PolyLine::PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>::PolyLine(orientation_2d orient, Unit coord, Side side) :$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(orientation_2d orient, Unit coord, Side side)
boost::polygon::polygon_formation::PolyLine::active	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool active() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::active	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::active() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::disconnectTails	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& disconnectTails();$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:()
boost::polygon::polygon_formation::PolyLine::disconnectTails	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::disconnectTails() {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:()
boost::polygon::polygon_formation::PolyLine::endConnectivity	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    End endConnectivity(End end) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(End end) const
boost::polygon::polygon_formation::PolyLine::endConnectivity	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline End PolyLine<Unit>::endConnectivity(End end) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End end) const
boost::polygon::polygon_formation::PolyLine::extendTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& extendTail(Unit delta);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(Unit delta)
boost::polygon::polygon_formation::PolyLine::extendTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::extendTail(Unit delta) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(Unit delta)
boost::polygon::polygon_formation::PolyLine::getEndCoord	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    Unit getEndCoord(End end = TAIL) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(End end = TAIL) const
boost::polygon::polygon_formation::PolyLine::getEndCoord	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline Unit PolyLine<Unit>::getEndCoord(End end) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End end) const
boost::polygon::polygon_formation::PolyLine::getEndPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    point_data<Unit> getEndPoint(End end = TAIL) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(End end = TAIL) const
boost::polygon::polygon_formation::PolyLine::getEndPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline point_data<Unit> PolyLine<Unit>::getEndPoint(End end) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End end) const
boost::polygon::polygon_formation::PolyLine::getPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    point_data<Unit> getPoint(unsigned int index) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(unsigned int index) const
boost::polygon::polygon_formation::PolyLine::getPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline point_data<Unit> PolyLine<Unit>::getPoint(unsigned int index) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(unsigned int index) const
boost::polygon::polygon_formation::PolyLine::headOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    orientation_2d headOrient() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::headOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline orientation_2d PolyLine<Unit>::headOrient() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::headToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool headToHead() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::headToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::headToHead() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::headToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool headToTail() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::headToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::headToTail() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::headp_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine* headp_;$/;"	m	class:boost::polygon::polygon_formation::PolyLine	access:private
boost::polygon::polygon_formation::PolyLine::isValid	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool isValid() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::isValid	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::isValid() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::joinHeadToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinHeadToHead(PolyLine& that);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that)
boost::polygon::polygon_formation::PolyLine::joinHeadToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinHeadToHead(PolyLine<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that)
boost::polygon::polygon_formation::PolyLine::joinHeadToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinHeadToTail(PolyLine& that);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that)
boost::polygon::polygon_formation::PolyLine::joinHeadToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinHeadToTail(PolyLine<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that)
boost::polygon::polygon_formation::PolyLine::joinTailToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinTailToHead(PolyLine& that);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that)
boost::polygon::polygon_formation::PolyLine::joinTailToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinTailToHead(PolyLine<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that)
boost::polygon::polygon_formation::PolyLine::joinTailToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinTailToTail(PolyLine& that);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that)
boost::polygon::polygon_formation::PolyLine::joinTailToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinTailToTail(PolyLine<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that)
boost::polygon::polygon_formation::PolyLine::joinTo	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinTo(End thisEnd, PolyLine& that, End end);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(End thisEnd, PolyLine& that, End end)
boost::polygon::polygon_formation::PolyLine::joinTo	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinTo(End thisEnd, PolyLine<Unit>& that, End end) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End thisEnd, PolyLine<Unit>& that, End end)
boost::polygon::polygon_formation::PolyLine::joinToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinToHead(PolyLine& that, End end);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that, End end)
boost::polygon::polygon_formation::PolyLine::joinToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinToHead(PolyLine<Unit>& that, End end) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that, End end)
boost::polygon::polygon_formation::PolyLine::joinToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinToTail(PolyLine& that, End end);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that, End end)
boost::polygon::polygon_formation::PolyLine::joinToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinToTail(PolyLine<Unit>& that, End end) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that, End end)
boost::polygon::polygon_formation::PolyLine::joinTo_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinTo_(End thisEnd, PolyLine& that, End end);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:private	signature:(End thisEnd, PolyLine& that, End end)
boost::polygon::polygon_formation::PolyLine::joinTo_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinTo_(End thisEnd, PolyLine<Unit>& that, End end) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End thisEnd, PolyLine<Unit>& that, End end)
boost::polygon::polygon_formation::PolyLine::next	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine* next(End end) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(End end) const
boost::polygon::polygon_formation::PolyLine::next	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>* PolyLine<Unit>::next(End end) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End end) const
boost::polygon::polygon_formation::PolyLine::numSegments	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    unsigned int numSegments() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::numSegments	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline unsigned int PolyLine<Unit>::numSegments() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::oddLength	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool oddLength() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::oddLength	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::oddLength() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::operator =	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& operator=(const PolyLine& that);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(const PolyLine& that)
boost::polygon::polygon_formation::PolyLine::operator =	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::operator=(const PolyLine<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(const PolyLine<Unit>& that)
boost::polygon::polygon_formation::PolyLine::operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator==(const PolyLine& b) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(const PolyLine& b) const
boost::polygon::polygon_formation::PolyLine::operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::operator==(const PolyLine<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(const PolyLine<Unit>& b) const
boost::polygon::polygon_formation::PolyLine::operator []	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    Unit operator[] (unsigned int index) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(unsigned int index) const
boost::polygon::polygon_formation::PolyLine::operator []	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline Unit PolyLine<Unit>::operator[] (unsigned int index) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(unsigned int index) const
boost::polygon::polygon_formation::PolyLine::popCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& popCoordinate();$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:()
boost::polygon::polygon_formation::PolyLine::popCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::popCoordinate() {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:()
boost::polygon::polygon_formation::PolyLine::ptdata_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    std::vector<Unit> ptdata_;$/;"	m	class:boost::polygon::polygon_formation::PolyLine	access:private
boost::polygon::polygon_formation::PolyLine::pushCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& pushCoordinate(Unit coord);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(Unit coord)
boost::polygon::polygon_formation::PolyLine::pushCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::pushCoordinate(Unit coord) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(Unit coord)
boost::polygon::polygon_formation::PolyLine::pushPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& pushPoint(const point_data<Unit>& point);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(const point_data<Unit>& point)
boost::polygon::polygon_formation::PolyLine::pushPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::pushPoint(const point_data<Unit>& point) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(const point_data<Unit>& point)
boost::polygon::polygon_formation::PolyLine::segmentOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    orientation_2d segmentOrient(unsigned int index = 0) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(unsigned int index = 0) const
boost::polygon::polygon_formation::PolyLine::segmentOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline orientation_2d PolyLine<Unit>::segmentOrient(unsigned int index) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(unsigned int index) const
boost::polygon::polygon_formation::PolyLine::solidSide	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    Side solidSide() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::solidSide	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline Side PolyLine<Unit>::solidSide() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::solidToRight	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool solidToRight() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::solidToRight	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::solidToRight() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::state_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    int state_;$/;"	m	class:boost::polygon::polygon_formation::PolyLine	access:private
boost::polygon::polygon_formation::PolyLine::tailOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    orientation_2d tailOrient() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::tailOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline orientation_2d PolyLine<Unit>::tailOrient() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::tailToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool tailToHead() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::tailToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::tailToHead() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::tailToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool tailToTail() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::tailToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::tailToTail() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::tailp_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine* tailp_;$/;"	m	class:boost::polygon::polygon_formation::PolyLine	access:private
boost::polygon::polygon_formation::PolyLine::verticalHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool verticalHead() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::verticalHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::verticalHead() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::verticalTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool verticalTail() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
boost::polygon::polygon_formation::PolyLine::verticalTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::verticalTail() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
boost::polygon::polygon_formation::PolyLine::writeOut	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine* writeOut(std::vector<Unit>& outVec, End startEnd = TAIL) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(std::vector<Unit>& outVec, End startEnd = TAIL) const
boost::polygon::polygon_formation::PolyLine::writeOut	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>* PolyLine<Unit>::writeOut(std::vector<Unit>& outVec, End startEnd) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(std::vector<Unit>& outVec, End startEnd) const
boost::polygon::polygon_formation::PolyLine::~PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ~PolyLine();$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:()
boost::polygon::polygon_formation::PolyLine::~PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>::~PolyLine() {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:()
boost::polygon::polygon_formation::PolyLineHoleData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  class PolyLineHoleData {$/;"	c	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::PolyLineHoleData::PolyLineHoleData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLineHoleData() : p_(0) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:()
boost::polygon::polygon_formation::PolyLineHoleData::PolyLineHoleData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLineHoleData(ActiveTail<Unit>* p) : p_(p) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:(ActiveTail<Unit>* p)
boost::polygon::polygon_formation::PolyLineHoleData::begin	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iterator_type begin() const { return iterator_type(begin_compact(), end_compact()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLineHoleData::begin_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline compact_iterator_type begin_compact() const { return p_->begin(true, (orientT ? VERTICAL : HORIZONTAL)); }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLineHoleData::compact_iterator_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename ActiveTail<Unit>::iterator compact_iterator_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public
boost::polygon::polygon_formation::PolyLineHoleData::coordinate_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public
boost::polygon::polygon_formation::PolyLineHoleData::end	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iterator_type end() const { return iterator_type(end_compact(), end_compact()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLineHoleData::end_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline compact_iterator_type end_compact() const { return p_->end(); }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLineHoleData::iterator_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef iterator_compact_to_points<compact_iterator_type, point_data<coordinate_type> > iterator_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public
boost::polygon::polygon_formation::PolyLineHoleData::p_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail<Unit>* p_;$/;"	m	class:boost::polygon::polygon_formation::PolyLineHoleData	access:private
boost::polygon::polygon_formation::PolyLineHoleData::set	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLineHoleData& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::polygon_formation::PolyLineHoleData::set_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLineHoleData& set_compact(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::polygon_formation::PolyLineHoleData::size	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLineHoleData::yield	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline ActiveTail<Unit>* yield() { return p_; }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:()
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  class PolyLinePolygonWithHolesData {$/;"	c	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::PolyLinePolygonWithHolesData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLinePolygonWithHolesData() : p_(0) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:()
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::PolyLinePolygonWithHolesData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLinePolygonWithHolesData(ActiveTail<Unit>* p) : p_(p) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:(ActiveTail<Unit>* p)
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::area_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename coordinate_traits<Unit>::area_type area_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::begin	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iterator_type begin() const { return iterator_type(begin_compact(), end_compact()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::begin_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline compact_iterator_type begin_compact() const { return p_->begin(false, (orientT ? VERTICAL : HORIZONTAL)); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::begin_holes	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iteratorHoles begin_holes() const { return iteratorHoles(p_->beginHoles()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::compact_iterator_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename ActiveTail<Unit>::iterator compact_iterator_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::coordinate_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::end	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iterator_type end() const { return iterator_type(end_compact(), end_compact()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::end_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline compact_iterator_type end_compact() const { return p_->end(); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::end_holes	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iteratorHoles end_holes() const { return iteratorHoles(p_->endHoles()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::hole_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef PolyLineHoleData<orientT, Unit> hole_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    class iteratorHoles {$/;"	c	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles::iteratorHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iteratorHoles() : itr_() {}$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:()
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles::iteratorHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iteratorHoles(typename ActiveTail<Unit>::iteratorHoles itr) : itr_(itr) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:(typename ActiveTail<Unit>::iteratorHoles itr)
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles::itr_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      typename ActiveTail<Unit>::iteratorHoles itr_;$/;"	m	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:private
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles::operator !=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline bool operator!=(const iteratorHoles& that) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:(const iteratorHoles& that) const
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles::operator *	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline PolyLineHoleData<orientT, Unit> operator*() { return PolyLineHoleData<orientT, Unit>(*itr_);}$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:()
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles::operator ++	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline const iteratorHoles operator++(int) {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:(int)
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles::operator ++	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iteratorHoles& operator++() {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:()
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles::operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline bool operator==(const iteratorHoles& that) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:(const iteratorHoles& that) const
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iterator_holes_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef iteratorHoles iterator_holes_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iterator_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef iterator_compact_to_points<compact_iterator_type, point_data<coordinate_type> > iterator_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::p_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail<Unit>* p_;$/;"	m	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:private
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::set	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLinePolygonWithHolesData& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::set_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLinePolygonWithHolesData& set_compact(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::set_holes	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLinePolygonWithHolesData& set_holes(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:(iT inputBegin, iT inputEnd)
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::size	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::size_holes	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline std::size_t size_holes() const { return 0; }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::yield	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline ActiveTail<Unit>* yield() { return p_; }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:()
boost::polygon::polygon_formation::PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType { };$/;"	s	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_45_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_45_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_90_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_90_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::PolyLineType	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	s	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::PolyLineType::type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_45_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
boost::polygon::polygon_formation::PolyLineType::type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_45_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
boost::polygon::polygon_formation::PolyLineType::type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_90_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
boost::polygon::polygon_formation::PolyLineType::type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_90_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
boost::polygon::polygon_formation::PolyLineType::type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
boost::polygon::polygon_formation::PolyLineType::type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
boost::polygon::polygon_formation::RIGHT	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const Side RIGHT = true;$/;"	m	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::SOLID_TO_RIGHT	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const int VERTICAL_HEAD = 1, HEAD_TO_TAIL = 2, TAIL_TO_TAIL = 4, SOLID_TO_RIGHT = 8;$/;"	m	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::ScanLineToPolygonItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  class ScanLineToPolygonItrs {$/;"	c	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::ScanLineToPolygonItrs::PolyLinePolygonData	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename PolyLineType<orientT, Unit, polygon_concept_type>::type PolyLinePolygonData;$/;"	t	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:private
boost::polygon::polygon_formation::ScanLineToPolygonItrs::ScanLineToPolygonItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline ScanLineToPolygonItrs() : tailMap_(), outputPolygons_(), fractureHoles_(false)  {}$/;"	f	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:public	signature:()
boost::polygon::polygon_formation::ScanLineToPolygonItrs::ScanLineToPolygonItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline ScanLineToPolygonItrs(bool fractureHoles) : tailMap_(), outputPolygons_(), fractureHoles_(fractureHoles) {}$/;"	f	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:public	signature:(bool fractureHoles)
boost::polygon::polygon_formation::ScanLineToPolygonItrs::clearOutput_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void clearOutput_();$/;"	p	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:private	signature:()
boost::polygon::polygon_formation::ScanLineToPolygonItrs::clearOutput_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ScanLineToPolygonItrs<orientT, Unit, polygon_concept_type>::clearOutput_() {$/;"	f	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	signature:()
boost::polygon::polygon_formation::ScanLineToPolygonItrs::fractureHoles_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool fractureHoles_;$/;"	m	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:private
boost::polygon::polygon_formation::ScanLineToPolygonItrs::iterator	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename std::vector<PolyLinePolygonData>::iterator iterator;$/;"	t	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:public
boost::polygon::polygon_formation::ScanLineToPolygonItrs::outputPolygons_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    std::vector<PolyLinePolygonData> outputPolygons_;$/;"	m	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:private
boost::polygon::polygon_formation::ScanLineToPolygonItrs::processEdges	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void processEdges(iterator& beginOutput, iterator& endOutput,$/;"	p	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:public	signature:(iterator& beginOutput, iterator& endOutput, Unit currentX, std::vector<interval_data<Unit> >& leftEdges, std::vector<interval_data<Unit> >& rightEdges)
boost::polygon::polygon_formation::ScanLineToPolygonItrs::processEdges	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  processEdges(iterator& beginOutput, iterator& endOutput,$/;"	f	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	signature:(iterator& beginOutput, iterator& endOutput, Unit currentX, std::vector<interval_data<Unit> >& leftEdges, std::vector<interval_data<Unit> >& rightEdges)
boost::polygon::polygon_formation::ScanLineToPolygonItrs::tailMap_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    std::map<Unit, ActiveTail<Unit>*> tailMap_;$/;"	m	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:private
boost::polygon::polygon_formation::ScanLineToPolygonItrs::~ScanLineToPolygonItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ~ScanLineToPolygonItrs() { clearOutput_(); }$/;"	f	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:public	signature:()
boost::polygon::polygon_formation::Side	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  typedef bool Side;$/;"	t	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::TAIL	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const End TAIL = true;$/;"	m	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::TAIL_TO_TAIL	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const int VERTICAL_HEAD = 1, HEAD_TO_TAIL = 2, TAIL_TO_TAIL = 4, SOLID_TO_RIGHT = 8;$/;"	m	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::VERTICAL_HEAD	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  const int VERTICAL_HEAD = 1, HEAD_TO_TAIL = 2, TAIL_TO_TAIL = 4, SOLID_TO_RIGHT = 8;$/;"	m	namespace:boost::polygon::polygon_formation
boost::polygon::polygon_formation::createActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  ActiveTail<Unit>* createActiveTail();$/;"	p	namespace:boost::polygon::polygon_formation	signature:()
boost::polygon::polygon_formation::createActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>* createActiveTail() {$/;"	f	namespace:boost::polygon::polygon_formation	signature:()
boost::polygon::polygon_formation::createActiveTailsAsPair	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline std::pair<ActiveTail<Unit>*, ActiveTail<Unit>*> createActiveTailsAsPair(Unit x, Unit y, bool solid, ActiveTail<Unit>* phole, bool fractureHoles) {$/;"	f	namespace:boost::polygon::polygon_formation	signature:(Unit x, Unit y, bool solid, ActiveTail<Unit>* phole, bool fractureHoles)
boost::polygon::polygon_formation::createPolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  PolyLine<Unit>* createPolyLine(orientation_2d orient, Unit coord, Side side);$/;"	p	namespace:boost::polygon::polygon_formation	signature:(orientation_2d orient, Unit coord, Side side)
boost::polygon::polygon_formation::createPolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>* createPolyLine(orientation_2d orient, Unit coord, Side side) {$/;"	f	namespace:boost::polygon::polygon_formation	signature:(orientation_2d orient, Unit coord, Side side)
boost::polygon::polygon_formation::destroyActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void destroyActiveTail(ActiveTail<Unit>* aTail) {$/;"	f	namespace:boost::polygon::polygon_formation	signature:(ActiveTail<Unit>* aTail)
boost::polygon::polygon_formation::destroyActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  void destroyActiveTail(ActiveTail<Unit>* aTail);$/;"	p	namespace:boost::polygon::polygon_formation	signature:(ActiveTail<Unit>* aTail)
boost::polygon::polygon_formation::destroyPolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void destroyPolyLine(PolyLine<Unit>* pLine) {$/;"	f	namespace:boost::polygon::polygon_formation	signature:(PolyLine<Unit>* pLine)
boost::polygon::polygon_formation::destroyPolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  void destroyPolyLine(PolyLine<Unit>* pLine);$/;"	p	namespace:boost::polygon::polygon_formation	signature:(PolyLine<Unit>* pLine)
boost::polygon::polygon_formation::findAtNext	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  template <class TKey, class T> inline typename std::map<TKey, T>::iterator findAtNext(std::map<TKey, T>& theMap,$/;"	f	namespace:boost::polygon::polygon_formation	signature:(std::map<TKey, T>& theMap, typename std::map<TKey, T>::iterator pos, const TKey& key)
boost::polygon::polygon_formation::to_bool	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool to_bool(const T& val) { return val != 0; }$/;"	f	namespace:boost::polygon::polygon_formation	signature:(const T& val)
boost::polygon::polygon_from_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_from_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_45_with_holes_concept> { typedef polygon_45_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::polygon_from_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_90_with_holes_concept> { typedef polygon_90_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::polygon_from_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_with_holes_concept> { typedef polygon_concept type; };$/;"	s	namespace:boost::polygon
boost::polygon::polygon_from_polygon_with_holes_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_45_with_holes_concept> { typedef polygon_45_concept type; };$/;"	t	struct:boost::polygon::polygon_from_polygon_with_holes_type	access:public
boost::polygon::polygon_from_polygon_with_holes_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_90_with_holes_concept> { typedef polygon_90_concept type; };$/;"	t	struct:boost::polygon::polygon_from_polygon_with_holes_type	access:public
boost::polygon::polygon_from_polygon_with_holes_type::type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_with_holes_concept> { typedef polygon_concept type; };$/;"	t	struct:boost::polygon::polygon_from_polygon_with_holes_type	access:public
boost::polygon::polygon_mutable_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_mutable_traits {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_mutable_traits::set_points	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline T& set_points(T& t, iT input_begin, iT input_end) {$/;"	f	struct:boost::polygon::polygon_mutable_traits	access:public	signature:(T& t, iT input_begin, iT input_end)
boost::polygon::polygon_set_concept	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^  class polygon_set_data {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_set_data::begin	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
boost::polygon::polygon_set_data::bloat	/usr/include/boost/polygon/polygon_set_data.hpp	/^    bloat(typename coordinate_traits<coordinate_type>::unsigned_area_type distance) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type distance)
boost::polygon::polygon_set_data::capacity	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline std::size_t capacity() const { return data_.capacity(); }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
boost::polygon::polygon_set_data::clean	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  inline void polygon_set_data<coordinate_type>::clean() const {$/;"	f	class:boost::polygon::polygon_set_data	signature:() const
boost::polygon::polygon_set_data::clean	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  inline void polygon_set_data<double>::clean() const {$/;"	f	class:boost::polygon::polygon_set_data	signature:() const
boost::polygon::polygon_set_data::clean	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void clean() const;$/;"	p	class:boost::polygon::polygon_set_data	access:public	signature:() const
boost::polygon::polygon_set_data::clear	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void clear() { data_.clear(); dirty_ = unsorted_ = false; }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:()
boost::polygon::polygon_set_data::compute_offset_edge	/usr/include/boost/polygon/polygon_set_data.hpp	/^    static inline void compute_offset_edge(point_data<long double>& pt1, point_data<long double>& pt2,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(point_data<long double>& pt1, point_data<long double>& pt2, const point_data<long double>& prev_pt, const point_data<long double>& current_pt, long double distance, int multiplier)
boost::polygon::polygon_set_data::concept_downcast	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline GEOMETRY_CONCEPT_ID concept_downcast() const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
boost::polygon::polygon_set_data::coordinate_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
boost::polygon::polygon_set_data::data_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    mutable value_type data_;$/;"	m	class:boost::polygon::polygon_set_data	access:private
boost::polygon::polygon_set_data::dirty	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool dirty() const { return dirty_; }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
boost::polygon::polygon_set_data::dirty_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    mutable bool dirty_;$/;"	m	class:boost::polygon::polygon_set_data	access:private
boost::polygon::polygon_set_data::downcast	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool downcast(polygon_45_set_data<coordinate_type>& result) const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(polygon_45_set_data<coordinate_type>& result) const
boost::polygon::polygon_set_data::edge_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef std::pair<point_type, point_type> edge_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
boost::polygon::polygon_set_data::element_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef std::pair<edge_type, int> element_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
boost::polygon::polygon_set_data::empty	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool empty() const { return data_.empty(); }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
boost::polygon::polygon_set_data::end	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline iterator_type end() const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
boost::polygon::polygon_set_data::extents	/usr/include/boost/polygon/polygon_set_data.hpp	/^    bool extents(rectangle_type& rect) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(rectangle_type& rect)
boost::polygon::polygon_set_data::get	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void get(output_container& output) const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(output_container& output) const
boost::polygon::polygon_set_data::get_dispatch	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_concept tag) const {$/;"	f	class:boost::polygon::polygon_set_data	access:private	signature:(output_container& output, polygon_concept tag) const
boost::polygon::polygon_set_data::get_dispatch	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_set_data	access:private	signature:(output_container& output, polygon_with_holes_concept tag) const
boost::polygon::polygon_set_data::get_fracture	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void get_fracture(output_container& container, bool fracture_holes, concept_type ) const {$/;"	f	class:boost::polygon::polygon_set_data	access:private	signature:(output_container& container, bool fracture_holes, concept_type ) const
boost::polygon::polygon_set_data::get_trapezoids	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void get_trapezoids(cT& container) const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(cT& container) const
boost::polygon::polygon_set_data::get_trapezoids	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void get_trapezoids(cT& container, orientation_2d slicing_orientation) const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(cT& container, orientation_2d slicing_orientation) const
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const element_type& edge, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const element_type& edge, bool is_hole = false)
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const geometry_type& geometry_object, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const geometry_type& geometry_object, bool is_hole = false)
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_45_set_type& ps, bool is_hole, polygon_45_set_concept) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_45_set_type& ps, bool is_hole, polygon_45_set_concept)
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_90_set_type& ps, bool is_hole, polygon_90_set_concept) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_90_set_type& ps, bool is_hole, polygon_90_set_concept)
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_set_data& ps, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& ps, bool is_hole = false)
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_type& polygon_object, bool is_hole, polygon_45_concept ) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_type& polygon_object, bool is_hole, polygon_45_concept )
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_type& polygon_object, bool is_hole, polygon_90_concept ) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_type& polygon_object, bool is_hole, polygon_90_concept )
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_type& polygon_object, bool is_hole, polygon_concept ) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_type& polygon_object, bool is_hole, polygon_concept )
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole, polygon_45_with_holes_concept )
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole, polygon_90_with_holes_concept )
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole, polygon_with_holes_concept )
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const rectangle_type& rectangle_object, bool is_hole, rectangle_concept ) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const rectangle_type& rectangle_object, bool is_hole, rectangle_concept )
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(iT input_begin, iT input_end, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(iT input_begin, iT input_end, bool is_hole = false)
boost::polygon::polygon_set_data::insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(iterator_type input_begin, iterator_type input_end, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(iterator_type input_begin, iterator_type input_end, bool is_hole = false)
boost::polygon::polygon_set_data::insert_clean	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert_clean(const element_type& edge, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const element_type& edge, bool is_hole = false)
boost::polygon::polygon_set_data::insert_vertex_sequence	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert_vertex_sequence(iT begin_vertex, iT end_vertex, direction_1d winding, bool is_hole) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(iT begin_vertex, iT end_vertex, direction_1d winding, bool is_hole)
boost::polygon::polygon_set_data::insert_with_resize	/usr/include/boost/polygon/polygon_set_data.hpp	/^    insert_with_resize(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc=false, unsigned int num_circle_segments=0, bool hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc=false, unsigned int num_circle_segments=0, bool hole = false)
boost::polygon::polygon_set_data::insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_set_data.hpp	/^    insert_with_resize_dispatch(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments, bool hole,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments, bool hole, polygon_concept tag)
boost::polygon::polygon_set_data::insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_set_data.hpp	/^    insert_with_resize_dispatch(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments, bool hole,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments, bool hole, polygon_with_holes_concept tag)
boost::polygon::polygon_set_data::interact	/usr/include/boost/polygon/polygon_set_data.hpp	/^    interact(const polygon_set_data& that);$/;"	p	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& that)
boost::polygon::polygon_set_data::interact	/usr/include/boost/polygon/polygon_set_data.hpp	/^  polygon_set_data<T>::interact(const polygon_set_data<T>& that) {$/;"	f	class:boost::polygon::polygon_set_data	signature:(const polygon_set_data<T>& that)
boost::polygon::polygon_set_data::is_45_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    mutable bool is_45_;$/;"	m	class:boost::polygon::polygon_set_data	access:private
boost::polygon::polygon_set_data::iterator_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef typename value_type::const_iterator iterator_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
boost::polygon::polygon_set_data::modify_pt	/usr/include/boost/polygon/polygon_set_data.hpp	/^    static inline void modify_pt(point_data<coordinate_type>& pt, const point_data<coordinate_type>&  prev_pt,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(point_data<coordinate_type>& pt, const point_data<coordinate_type>& prev_pt, const point_data<coordinate_type>& current_pt, const point_data<coordinate_type>& next_pt, coordinate_type distance, coordinate_type multiplier)
boost::polygon::polygon_set_data::operator !=	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool operator!=(const polygon_set_data& p) const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& p) const
boost::polygon::polygon_set_data::operator =	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data& operator=(const geometry_object& geometry) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const geometry_object& geometry)
boost::polygon::polygon_set_data::operator =	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data& operator=(const polygon_set_data& that) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& that)
boost::polygon::polygon_set_data::operator =	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data& operator=(const polygon_set_view<ltype, rtype, op_type>& geometry) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& geometry)
boost::polygon::polygon_set_data::operator ==	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  inline bool polygon_set_data<coordinate_type>::operator==(const polygon_set_data<coordinate_type>& p) const {$/;"	f	class:boost::polygon::polygon_set_data	signature:(const polygon_set_data<coordinate_type>& p) const
boost::polygon::polygon_set_data::operator ==	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool operator==(const polygon_set_data& p) const;$/;"	p	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& p) const
boost::polygon::polygon_set_data::operator_arg_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef polygon_set_data operator_arg_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
boost::polygon::polygon_set_data::point_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
boost::polygon::polygon_set_data::polygon_set_data	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  polygon_set_data<coordinate_type>::polygon_set_data(const polygon_set_view<ltype, rtype, op_type>& that) :$/;"	f	class:boost::polygon::polygon_set_data	signature:(const polygon_set_view<ltype, rtype, op_type>& that)
boost::polygon::polygon_set_data::polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data() : data_(), dirty_(false), unsorted_(false), is_45_(true) {}$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:()
boost::polygon::polygon_set_data::polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data(const polygon_set_data& that) :$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& that)
boost::polygon::polygon_set_data::polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data(const polygon_set_view<ltype, rtype, op_type>& that);$/;"	p	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& that)
boost::polygon::polygon_set_data::polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data(iT input_begin, iT input_end) : data_(), dirty_(false), unsorted_(false), is_45_(true) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_set_data::reserve	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void reserve(std::size_t size) { return data_.reserve(size); }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(std::size_t size)
boost::polygon::polygon_set_data::resize	/usr/include/boost/polygon/detail/minkowski.hpp	/^  polygon_set_data<T>::resize(coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments) {$/;"	f	class:boost::polygon::polygon_set_data	signature:(coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments)
boost::polygon::polygon_set_data::resize	/usr/include/boost/polygon/polygon_set_data.hpp	/^    resize(coordinate_type resizing, bool corner_fill_arc = false, unsigned int num_circle_segments=0);$/;"	p	class:boost::polygon::polygon_set_data	access:public	signature:(coordinate_type resizing, bool corner_fill_arc = false, unsigned int num_circle_segments=0)
boost::polygon::polygon_set_data::resize_poly_down	/usr/include/boost/polygon/polygon_set_data.hpp	/^    static bool resize_poly_down(std::vector<point_data<coordinate_type> >& poly, coordinate_type distance, coordinate_type multiplier) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(std::vector<point_data<coordinate_type> >& poly, coordinate_type distance, coordinate_type multiplier)
boost::polygon::polygon_set_data::resize_poly_up	/usr/include/boost/polygon/polygon_set_data.hpp	/^    static void resize_poly_up(std::vector<point_data<coordinate_type> >& poly, coordinate_type distance, coordinate_type multiplier) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(std::vector<point_data<coordinate_type> >& poly, coordinate_type distance, coordinate_type multiplier)
boost::polygon::polygon_set_data::scale	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data& scale(polygon_set_data& polygon_set,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(polygon_set_data& polygon_set, const scaling_type& scaling)
boost::polygon::polygon_set_data::scale_down	/usr/include/boost/polygon/polygon_set_data.hpp	/^    scale_down(typename coordinate_traits<coordinate_type>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type factor)
boost::polygon::polygon_set_data::scale_up	/usr/include/boost/polygon/polygon_set_data.hpp	/^    scale_up(typename coordinate_traits<coordinate_type>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type factor)
boost::polygon::polygon_set_data::set	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void set(const value_type& value) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const value_type& value)
boost::polygon::polygon_set_data::set	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void set(input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(input_iterator_type input_begin, input_iterator_type input_end)
boost::polygon::polygon_set_data::shrink	/usr/include/boost/polygon/polygon_set_data.hpp	/^    shrink(typename coordinate_traits<coordinate_type>::unsigned_area_type distance) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type distance)
boost::polygon::polygon_set_data::size	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline std::size_t size() const { clean(); return data_.size(); }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
boost::polygon::polygon_set_data::sort	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void sort() const{$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
boost::polygon::polygon_set_data::sorted	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool sorted() const { return !unsorted_; }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
boost::polygon::polygon_set_data::transform	/usr/include/boost/polygon/polygon_set_data.hpp	/^    transform(const transform_type& tr) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const transform_type& tr)
boost::polygon::polygon_set_data::unsorted_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    mutable bool unsorted_;$/;"	m	class:boost::polygon::polygon_set_data	access:private
boost::polygon::polygon_set_data::value	/usr/include/boost/polygon/polygon_set_data.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
boost::polygon::polygon_set_data::value_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef std::vector<element_type> value_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
boost::polygon::polygon_set_data::~polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline ~polygon_set_data() {}$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:()
boost::polygon::polygon_set_mutable_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_mutable_traits {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_set_mutable_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_mutable_traits<polygon_set_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_set_mutable_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_mutable_traits<std::list<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_set_mutable_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_mutable_traits<std::vector<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_set_mutable_traits::set	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline void set(polygon_set_data<T>& polygon_set,$/;"	f	struct:boost::polygon::polygon_set_mutable_traits	access:public	signature:(polygon_set_data<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
boost::polygon::polygon_set_mutable_traits::set	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline void set(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	struct:boost::polygon::polygon_set_mutable_traits	access:public	signature:(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
boost::polygon::polygon_set_mutable_traits::set	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline void set(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	struct:boost::polygon::polygon_set_mutable_traits	access:public	signature:(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
boost::polygon::polygon_set_traits	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  struct polygon_set_traits<polygon_set_view<ltype, rtype, op_type> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_set_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_traits {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_set_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_traits<polygon_set_data<T> > {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_set_traits::begin	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    static inline iterator_type begin(const polygon_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_set_traits::begin	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  begin(const polygon_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_set_traits	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_set_traits::begin	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline iterator_type begin(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const T& polygon_set)
boost::polygon::polygon_set_traits::begin	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline iterator_type begin(const polygon_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_data<T>& polygon_set)
boost::polygon::polygon_set_traits::clean	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    static inline bool clean(const polygon_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_set_traits::clean	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  clean(const polygon_set_view<ltype, rtype, op_type>& ) {$/;"	f	class:boost::polygon::polygon_set_traits	signature:(const polygon_set_view<ltype, rtype, op_type>& )
boost::polygon::polygon_set_traits::clean	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline bool clean(const T& ) { return false; }$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const T& )
boost::polygon::polygon_set_traits::clean	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline bool clean(const polygon_set_data<T>& polygon_set) { polygon_set.clean(); return true; }$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_data<T>& polygon_set)
boost::polygon::polygon_set_traits::coordinate_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef typename polygon_set_view<ltype, rtype, op_type>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
boost::polygon::polygon_set_traits::coordinate_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename get_coordinate_type<T, typename geometry_concept<T>::type >::type coordinate_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
boost::polygon::polygon_set_traits::coordinate_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename polygon_set_data<T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
boost::polygon::polygon_set_traits::end	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    static inline iterator_type end(const polygon_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_set_traits::end	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  end(const polygon_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_set_traits	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_set_traits::end	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline iterator_type end(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const T& polygon_set)
boost::polygon::polygon_set_traits::end	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline iterator_type end(const polygon_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_data<T>& polygon_set)
boost::polygon::polygon_set_traits::iterator_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef typename polygon_set_view<ltype, rtype, op_type>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
boost::polygon::polygon_set_traits::iterator_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename get_iterator_type<T>::type iterator_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
boost::polygon::polygon_set_traits::iterator_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename polygon_set_data<T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
boost::polygon::polygon_set_traits::operator_arg_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef typename polygon_set_view<ltype, rtype, op_type>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
boost::polygon::polygon_set_traits::operator_arg_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef T operator_arg_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
boost::polygon::polygon_set_traits::operator_arg_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename polygon_set_data<T>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
boost::polygon::polygon_set_traits::sort	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    static inline bool sort(const polygon_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
boost::polygon::polygon_set_traits::sort	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  sort(const polygon_set_view<ltype, rtype, op_type>& ) {$/;"	f	class:boost::polygon::polygon_set_traits	signature:(const polygon_set_view<ltype, rtype, op_type>& )
boost::polygon::polygon_set_traits::sorted	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline bool sorted(const T& ) { return false; }$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const T& )
boost::polygon::polygon_set_traits::sorted	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline bool sorted(const polygon_set_data<T>& polygon_set) { polygon_set.sort(); return true; }$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_data<T>& polygon_set)
boost::polygon::polygon_set_view	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  class polygon_set_view {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_set_view::begin	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    iterator_type begin() const { return value().begin(); }$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
boost::polygon::polygon_set_view::coordinate_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef typename polygon_set_traits<ltype>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::polygon_set_view	access:public
boost::polygon::polygon_set_view::dirty	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    bool dirty() const { return false; } \/\/result of a boolean is clean$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
boost::polygon::polygon_set_view::end	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    iterator_type end() const { return value().end(); }$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
boost::polygon::polygon_set_view::evaluated_	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    mutable bool evaluated_;$/;"	m	class:boost::polygon::polygon_set_view	access:private
boost::polygon::polygon_set_view::iterator_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef typename value_type::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_set_view	access:public
boost::polygon::polygon_set_view::lvalue_	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    const ltype& lvalue_;$/;"	m	class:boost::polygon::polygon_set_view	access:private
boost::polygon::polygon_set_view::operator =	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    polygon_set_view& operator=(const polygon_set_view&);$/;"	p	class:boost::polygon::polygon_set_view	access:private	signature:(const polygon_set_view&)
boost::polygon::polygon_set_view::operator_arg_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef polygon_set_view operator_arg_type;$/;"	t	class:boost::polygon::polygon_set_view	access:public
boost::polygon::polygon_set_view::output_	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    mutable value_type output_;$/;"	m	class:boost::polygon::polygon_set_view	access:private
boost::polygon::polygon_set_view::polygon_set_view	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    polygon_set_view(const ltype& lvalue,$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:(const ltype& lvalue, const rtype& rvalue )
boost::polygon::polygon_set_view::rvalue_	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    const rtype& rvalue_;$/;"	m	class:boost::polygon::polygon_set_view	access:private
boost::polygon::polygon_set_view::sort	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    void sort() const {} \/\/is always sorted$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
boost::polygon::polygon_set_view::sorted	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    bool sorted() const { return true; } \/\/result of a boolean is sorted$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
boost::polygon::polygon_set_view::value	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
boost::polygon::polygon_set_view::value_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef polygon_set_data<coordinate_type> value_type;$/;"	t	class:boost::polygon::polygon_set_view	access:public
boost::polygon::polygon_sort	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^    void polygon_sort(iter_type _b_, iter_type _e_)$/;"	f	namespace:boost::polygon	signature:(iter_type _b_, iter_type _e_)
boost::polygon::polygon_sort	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^    void polygon_sort(iter_type _b_, iter_type _e_, const pred_type& _pred_)$/;"	f	namespace:boost::polygon	signature:(iter_type _b_, iter_type _e_, const pred_type& _pred_)
boost::polygon::polygon_sort	/usr/include/boost/polygon/isotropy.hpp	/^  void polygon_sort(iter_type _b_, iter_type _e_);$/;"	p	namespace:boost::polygon	signature:(iter_type _b_, iter_type _e_)
boost::polygon::polygon_sort	/usr/include/boost/polygon/isotropy.hpp	/^  void polygon_sort(iter_type _b_, iter_type _e_, const pred_type& _pred_);$/;"	p	namespace:boost::polygon	signature:(iter_type _b_, iter_type _e_, const pred_type& _pred_)
boost::polygon::polygon_sort_adaptor	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^    struct polygon_sort_adaptor {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_sort_adaptor::sort	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^      static void sort(RandomAccessIterator_Type _First,$/;"	f	struct:boost::polygon::polygon_sort_adaptor	access:public	signature:(RandomAccessIterator_Type _First, RandomAccessIterator_Type _Last)
boost::polygon::polygon_sort_adaptor::sort	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^      static void sort(RandomAccessIterator_Type _First,$/;"	f	struct:boost::polygon::polygon_sort_adaptor	access:public	signature:(RandomAccessIterator_Type _First, RandomAccessIterator_Type _Last, const Pred_Type& _Comp)
boost::polygon::polygon_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits< T,$/;"	s	namespace:boost::polygon	inherits:polygon_traits_90
boost::polygon::polygon_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits<T, typename gtl_or<typename gtl_or_4<$/;"	s	namespace:boost::polygon	inherits:gtl_ifelse::type
boost::polygon::polygon_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits<T,$/;"	s	namespace:boost::polygon	inherits:polygon_traits_general
boost::polygon::polygon_traits_90	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits_90 {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_traits_90::begin_points	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_type begin_points(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_90	access:public	signature:(const T& t)
boost::polygon::polygon_traits_90::coordinate_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename polygon_90_traits<T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_traits_90	access:public
boost::polygon::polygon_traits_90::end_points	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_type end_points(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_90	access:public	signature:(const T& t)
boost::polygon::polygon_traits_90::iterator_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef iterator_compact_to_points<typename polygon_90_traits<T>::compact_iterator_type, point_data<coordinate_type> > iterator_type;$/;"	t	struct:boost::polygon::polygon_traits_90	access:public
boost::polygon::polygon_traits_90::point_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef point_data<coordinate_type> point_type;$/;"	t	struct:boost::polygon::polygon_traits_90	access:public
boost::polygon::polygon_traits_90::size	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline std::size_t size(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_90	access:public	signature:(const T& t)
boost::polygon::polygon_traits_90::winding	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline winding_direction winding(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_90	access:public	signature:(const T& t)
boost::polygon::polygon_traits_general	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits_general {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_traits_general::begin_points	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_type begin_points(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_general	access:public	signature:(const T& t)
boost::polygon::polygon_traits_general::coordinate_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_traits_general	access:public
boost::polygon::polygon_traits_general::end_points	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_type end_points(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_general	access:public	signature:(const T& t)
boost::polygon::polygon_traits_general::iterator_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_traits_general	access:public
boost::polygon::polygon_traits_general::point_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::point_type point_type;$/;"	t	struct:boost::polygon::polygon_traits_general	access:public
boost::polygon::polygon_traits_general::size	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline std::size_t size(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_general	access:public	signature:(const T& t)
boost::polygon::polygon_traits_general::winding	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline winding_direction winding(const T&) {$/;"	f	struct:boost::polygon::polygon_traits_general	access:public	signature:(const T&)
boost::polygon::polygon_with_holes_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_with_holes_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::polygon_with_holes_data	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  class polygon_with_holes_data {$/;"	c	namespace:boost::polygon
boost::polygon::polygon_with_holes_data::area_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef typename coordinate_traits<T>::coordinate_distance area_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
boost::polygon::polygon_with_holes_data::begin	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline const iterator_type begin() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
boost::polygon::polygon_with_holes_data::begin_holes	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline const iterator_holes_type begin_holes() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
boost::polygon::polygon_with_holes_data::coordinate_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
boost::polygon::polygon_with_holes_data::end	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline const iterator_type end() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
boost::polygon::polygon_with_holes_data::end_holes	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline const iterator_holes_type end_holes() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
boost::polygon::polygon_with_holes_data::geometry_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef polygon_with_holes_concept geometry_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
boost::polygon::polygon_with_holes_data::hole_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef polygon_data<coordinate_type> hole_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
boost::polygon::polygon_with_holes_data::holes_	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  std::list<hole_type> holes_;$/;"	m	class:boost::polygon::polygon_with_holes_data	access:public
boost::polygon::polygon_with_holes_data::iterator_holes_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef typename std::list<polygon_data<coordinate_type> >::const_iterator iterator_holes_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
boost::polygon::polygon_with_holes_data::iterator_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef typename polygon_data<T>::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
boost::polygon::polygon_with_holes_data::operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_with_holes_data<T>& polygon_with_holes_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_with_holes_data	signature:(const T2& rvalue)
boost::polygon::polygon_with_holes_data::operator =	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_with_holes_data	access:public	signature:(const T2& rvalue)
boost::polygon::polygon_with_holes_data::operator =	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data& operator=(const polygon_with_holes_data& that) {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(const polygon_with_holes_data& that)
boost::polygon::polygon_with_holes_data::point_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
boost::polygon::polygon_with_holes_data::polygon_with_holes_data	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data() : self_(), holes_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:()
boost::polygon::polygon_with_holes_data::polygon_with_holes_data	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data(const polygon_with_holes_data& that) : self_(that.self_),$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(const polygon_with_holes_data& that)
boost::polygon::polygon_with_holes_data::polygon_with_holes_data	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data(iT input_begin, iT input_end) : self_(), holes_() {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_with_holes_data::polygon_with_holes_data	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data(iT input_begin, iT input_end, hiT holes_begin, hiT holes_end) : self_(), holes_() {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(iT input_begin, iT input_end, hiT holes_begin, hiT holes_end)
boost::polygon::polygon_with_holes_data::self_	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  polygon_data<coordinate_type> self_;$/;"	m	class:boost::polygon::polygon_with_holes_data	access:public
boost::polygon::polygon_with_holes_data::set	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data& set(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_with_holes_data::set_holes	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data& set_holes(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
boost::polygon::polygon_with_holes_data::size	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline std::size_t size() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
boost::polygon::polygon_with_holes_data::size_holes	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline std::size_t size_holes() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
boost::polygon::polygon_with_holes_mutable_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_with_holes_mutable_traits {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_with_holes_mutable_traits::set_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline T& set_holes(T& t, iT inputBegin, iT inputEnd) {$/;"	f	struct:boost::polygon::polygon_with_holes_mutable_traits	access:public	signature:(T& t, iT inputBegin, iT inputEnd)
boost::polygon::polygon_with_holes_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_with_holes_traits {$/;"	s	namespace:boost::polygon
boost::polygon::polygon_with_holes_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  template <typename T> struct polygon_with_holes_traits<$/;"	s	namespace:boost::polygon
boost::polygon::polygon_with_holes_traits::begin_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_holes_type begin_holes(const T& t) {$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const T& t)
boost::polygon::polygon_with_holes_traits::begin_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_holes_type begin_holes(const hole_type& t) { return &t; }$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const hole_type& t)
boost::polygon::polygon_with_holes_traits::end_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_holes_type end_holes(const T& t) {$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const T& t)
boost::polygon::polygon_with_holes_traits::end_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_holes_type end_holes(const hole_type& t) { return &t; }$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const hole_type& t)
boost::polygon::polygon_with_holes_traits::hole_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef T hole_type;$/;"	t	struct:boost::polygon::polygon_with_holes_traits	access:public
boost::polygon::polygon_with_holes_traits::hole_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::hole_type hole_type;$/;"	t	struct:boost::polygon::polygon_with_holes_traits	access:public
boost::polygon::polygon_with_holes_traits::iterator_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef const hole_type* iterator_holes_type;$/;"	t	struct:boost::polygon::polygon_with_holes_traits	access:public
boost::polygon::polygon_with_holes_traits::iterator_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::iterator_holes_type iterator_holes_type;$/;"	t	struct:boost::polygon::polygon_with_holes_traits	access:public
boost::polygon::polygon_with_holes_traits::size_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline std::size_t size_holes(const T& t) {$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const T& t)
boost::polygon::polygon_with_holes_traits::size_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline std::size_t size_holes(const hole_type& t) { return 0; }$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const hole_type& t)
boost::polygon::predicated_swap	/usr/include/boost/polygon/isotropy.hpp	/^  inline bool predicated_swap(const bool& pred,$/;"	f	namespace:boost::polygon	signature:(const bool& pred, T& a, T& b)
boost::polygon::property_merge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class property_merge : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
boost::polygon::property_merge::Point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::property_merge	access:protected
boost::polygon::property_merge::check_rectangle_trio	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool check_rectangle_trio(rectangle_data<Unit> rect1, rectangle_data<Unit> rect2, rectangle_data<Unit> rect3, stream_type& stdcout) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(rectangle_data<Unit> rect1, rectangle_data<Unit> rect2, rectangle_data<Unit> rect3, stream_type& stdcout)
boost::polygon::property_merge::clear	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void clear() {*this = property_merge();}$/;"	f	class:boost::polygon::property_merge	access:public	signature:()
boost::polygon::property_merge::create_vertex	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void create_vertex(property_merge_data& pmd,$/;"	f	class:boost::polygon::property_merge	access:public	signature:(property_merge_data& pmd, const Point& current_point, const Point& next_point, direction_1d winding, bool is_hole, const property_type& property)
boost::polygon::property_merge::evalAtXforYPack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typename scanline_base<Unit>::evalAtXforYPack evalAtXforYPack_;$/;"	m	class:boost::polygon::property_merge	access:protected
boost::polygon::property_merge::get_property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline property_merge_data& get_property_merge_data() { return pmd; }$/;"	f	class:boost::polygon::property_merge	access:public	signature:()
boost::polygon::property_merge::half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::property_merge	access:protected
boost::polygon::property_merge::insert	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void insert(const polygon_type& polygon_object, const property_type& property_value, bool is_hole = false) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(const polygon_type& polygon_object, const property_type& property_value, bool is_hole = false)
boost::polygon::property_merge::insert	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void insert(const polygon_type& polygon_object, const property_type& property_value, bool is_hole,$/;"	f	class:boost::polygon::property_merge	access:protected	signature:(const polygon_type& polygon_object, const property_type& property_value, bool is_hole, polygon_concept )
boost::polygon::property_merge::insert	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void insert(const polygon_with_holes_type& polygon_with_holes_object, const property_type& property_value, bool is_hole,$/;"	f	class:boost::polygon::property_merge	access:protected	signature:(const polygon_with_holes_type& polygon_with_holes_object, const property_type& property_value, bool is_hole, polygon_with_holes_concept tag)
boost::polygon::property_merge::insert	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void insert(const rectangle_type& rectangle_object, const property_type& property_value, bool is_hole,$/;"	f	class:boost::polygon::property_merge	access:protected	signature:(const rectangle_type& rectangle_object, const property_type& property_value, bool is_hole, rectangle_concept )
boost::polygon::property_merge::less_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_half_edge less_half_edge;$/;"	t	class:boost::polygon::property_merge	access:protected
boost::polygon::property_merge::less_half_edge_pair	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class less_half_edge_pair {$/;"	c	class:boost::polygon::property_merge	access:public
boost::polygon::property_merge::less_half_edge_pair::less_half_edge_pair	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_half_edge_pair(const Point& pt) : pt_(pt) {}$/;"	f	class:boost::polygon::property_merge::less_half_edge_pair	access:public	signature:(const Point& pt)
boost::polygon::property_merge::less_half_edge_pair::operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      bool operator()(const half_edge& e1, const half_edge& e2) {$/;"	f	class:boost::polygon::property_merge::less_half_edge_pair	access:public	signature:(const half_edge& e1, const half_edge& e2)
boost::polygon::property_merge::less_half_edge_pair::pt_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      Point pt_;$/;"	m	class:boost::polygon::property_merge::less_half_edge_pair	access:private
boost::polygon::property_merge::less_point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_point less_point;$/;"	t	class:boost::polygon::property_merge	access:protected
boost::polygon::property_merge::less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class less_vertex_data {$/;"	c	class:boost::polygon::property_merge	access:protected
boost::polygon::property_merge::less_vertex_data::less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data() : pack_() {}$/;"	f	class:boost::polygon::property_merge::less_vertex_data	access:public	signature:()
boost::polygon::property_merge::less_vertex_data::less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data(typename scanline_base<Unit>::evalAtXforYPack* pack) : pack_(pack) {}$/;"	f	class:boost::polygon::property_merge::less_vertex_data	access:public	signature:(typename scanline_base<Unit>::evalAtXforYPack* pack)
boost::polygon::property_merge::less_vertex_data::operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      bool operator() (const vertex_data_type& lvalue, const vertex_data_type& rvalue) const {$/;"	f	class:boost::polygon::property_merge::less_vertex_data	access:public	signature:(const vertex_data_type& lvalue, const vertex_data_type& rvalue) const
boost::polygon::property_merge::less_vertex_data::pack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      typename scanline_base<Unit>::evalAtXforYPack* pack_;$/;"	m	class:boost::polygon::property_merge::less_vertex_data	access:private
boost::polygon::property_merge::merge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void merge(result_type& result) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(result_type& result)
boost::polygon::property_merge::operator =	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline property_merge& operator=(const property_merge& pm) { pmd = pm.pmd; return *this; }$/;"	f	class:boost::polygon::property_merge	access:public	signature:(const property_merge& pm)
boost::polygon::property_merge::pmd	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    property_merge_data pmd;$/;"	m	class:boost::polygon::property_merge	access:protected
boost::polygon::property_merge::print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const half_edge& he)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const half_edge& he)
boost::polygon::property_merge::print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const property_map& c)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const property_map& c)
boost::polygon::property_merge::print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const std::vector<half_edge>& hev)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const std::vector<half_edge>& hev)
boost::polygon::property_merge::print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const std::vector<vertex_data>& vv)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const std::vector<vertex_data>& vv)
boost::polygon::property_merge::print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const std::vector<vertex_property>& hev)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const std::vector<vertex_property>& hev)
boost::polygon::property_merge::print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const vertex_data& v)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const vertex_data& v)
boost::polygon::property_merge::print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const vertex_property& c)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const vertex_property& c)
boost::polygon::property_merge::property_map	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<std::pair<property_type, int> > property_map;$/;"	t	class:boost::polygon::property_merge	access:protected
boost::polygon::property_merge::property_merge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline property_merge() : pmd(), evalAtXforYPack_() {}$/;"	f	class:boost::polygon::property_merge	access:public	signature:()
boost::polygon::property_merge::property_merge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline property_merge(const property_merge& pm) : pmd(pm.pmd), evalAtXforYPack_(pm.evalAtXforYPack_) {}$/;"	f	class:boost::polygon::property_merge	access:public	signature:(const property_merge& pm)
boost::polygon::property_merge::property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<vertex_property> property_merge_data;$/;"	t	class:boost::polygon::property_merge	access:protected
boost::polygon::property_merge::sort_property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void sort_property_merge_data() {$/;"	f	class:boost::polygon::property_merge	access:protected	signature:()
boost::polygon::property_merge::sort_vertex_half_edges	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void sort_vertex_half_edges(vertex_data& vertex) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(vertex_data& vertex)
boost::polygon::property_merge::test_insertion	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_insertion(stream_type& stdcout) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& stdcout)
boost::polygon::property_merge::test_intersection	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_intersection(stream_type& stdcout) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& stdcout)
boost::polygon::property_merge::test_manhattan_intersection	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_manhattan_intersection(stream_type& stdcout) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& stdcout)
boost::polygon::property_merge::test_merge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_merge(stream_type& stdcout) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& stdcout)
boost::polygon::property_merge::verify1	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline bool verify1() {$/;"	f	class:boost::polygon::property_merge	access:public	signature:()
boost::polygon::property_merge::vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, property_map> vertex_data;$/;"	t	class:boost::polygon::property_merge	access:protected
boost::polygon::property_merge::vertex_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::pair<property_type, int> > vertex_property;$/;"	t	class:boost::polygon::property_merge	access:protected
boost::polygon::property_merge_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  class property_merge_45 {$/;"	c	namespace:boost::polygon
boost::polygon::property_merge_45::big_coord	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename coordinate_traits<coordinate_type>::manhattan_area_type big_coord;$/;"	t	class:boost::polygon::property_merge_45	access:private
boost::polygon::property_merge_45::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const GeoObjT& geoObj, property_type property) {$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:(const GeoObjT& geoObj, property_type property)
boost::polygon::property_merge_45::insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const polygon_45_set_data<coordinate_type>& ps, property_type property) {$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:(const polygon_45_set_data<coordinate_type>& ps, property_type property)
boost::polygon::property_merge_45::merge	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void merge(result_type& result) {$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:(result_type& result)
boost::polygon::property_merge_45::operator =	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline property_merge_45& operator=(const property_merge_45& that) {$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:(const property_merge_45& that)
boost::polygon::property_merge_45::property_merge_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline property_merge_45() : tsd_() {}$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:()
boost::polygon::property_merge_45::property_merge_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline property_merge_45(const property_merge_45& that) : tsd_(that.tsd_) {}$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:(const property_merge_45& that)
boost::polygon::property_merge_45::tsd	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename polygon_45_property_merge<big_coord, property_type>::MergeSetData tsd;$/;"	t	class:boost::polygon::property_merge_45	access:private
boost::polygon::property_merge_45::tsd_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    tsd tsd_;$/;"	m	class:boost::polygon::property_merge_45	access:private
boost::polygon::property_merge_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^  class property_merge_90 {$/;"	c	namespace:boost::polygon
boost::polygon::property_merge_90::insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const GeoObjT& geoObj, const property_type& property) {$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:(const GeoObjT& geoObj, const property_type& property)
boost::polygon::property_merge_90::insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const polygon_90_set_data<coordinate_type>& ps, const property_type& property) {$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:(const polygon_90_set_data<coordinate_type>& ps, const property_type& property)
boost::polygon::property_merge_90::merge	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void merge(ResultType& result) {$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:(ResultType& result)
boost::polygon::property_merge_90::operator =	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline property_merge_90& operator=(const property_merge_90& that) { pmd_ = that.pmd_; return *this; }$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:(const property_merge_90& that)
boost::polygon::property_merge_90::pmd_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    std::vector<std::pair<property_merge_point<coordinate_type>, std::pair<property_type, int> > > pmd_;$/;"	m	class:boost::polygon::property_merge_90	access:private
boost::polygon::property_merge_90::property_merge_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline property_merge_90() : pmd_() {}$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:()
boost::polygon::property_merge_90::property_merge_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline property_merge_90(const property_merge_90& that) : pmd_(that.pmd_) {}$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:(const property_merge_90& that)
boost::polygon::property_merge_interval	/usr/include/boost/polygon/detail/property_merge.hpp	/^class property_merge_interval {$/;"	c	namespace:boost::polygon
boost::polygon::property_merge_interval::high	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline coordinate_type high() const { return high_; }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:() const
boost::polygon::property_merge_interval::high	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void high(coordinate_type value) { high_ = value; }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(coordinate_type value)
boost::polygon::property_merge_interval::high_	/usr/include/boost/polygon/detail/property_merge.hpp	/^  coordinate_type low_, high_;$/;"	m	class:boost::polygon::property_merge_interval	access:private
boost::polygon::property_merge_interval::low	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline coordinate_type low() const { return low_; }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:() const
boost::polygon::property_merge_interval::low	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void low(coordinate_type value) { low_ = value; }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(coordinate_type value)
boost::polygon::property_merge_interval::low_	/usr/include/boost/polygon/detail/property_merge.hpp	/^  coordinate_type low_, high_;$/;"	m	class:boost::polygon::property_merge_interval	access:private
boost::polygon::property_merge_interval::operator !=	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator!=(const property_merge_interval& that) const { return !((*this) == that); }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(const property_merge_interval& that) const
boost::polygon::property_merge_interval::operator <	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator<(const property_merge_interval& that) const {$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(const property_merge_interval& that) const
boost::polygon::property_merge_interval::operator ==	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator==(const property_merge_interval& that) const { return low_ == that.low_ && high_ == that.high_; }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(const property_merge_interval& that) const
boost::polygon::property_merge_interval::property_merge_interval	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline property_merge_interval() : low_(), high_() {}$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:()
boost::polygon::property_merge_interval::property_merge_interval	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline property_merge_interval(coordinate_type low, coordinate_type high) : low_(low), high_(high) {}$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(coordinate_type low, coordinate_type high)
boost::polygon::property_merge_point	/usr/include/boost/polygon/detail/property_merge.hpp	/^class property_merge_point {$/;"	c	namespace:boost::polygon
boost::polygon::property_merge_point::operator !=	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator!=(const property_merge_point& that) const { return !((*this) == that); }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(const property_merge_point& that) const
boost::polygon::property_merge_point::operator <	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator<(const property_merge_point& that) const {$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(const property_merge_point& that) const
boost::polygon::property_merge_point::operator ==	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator==(const property_merge_point& that) const { return x_ == that.x_ && y_ == that.y_; }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(const property_merge_point& that) const
boost::polygon::property_merge_point::property_merge_point	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline property_merge_point() : x_(), y_() {}$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:()
boost::polygon::property_merge_point::property_merge_point	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline property_merge_point(coordinate_type x, coordinate_type y) : x_(x), y_(y) {}$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(coordinate_type x, coordinate_type y)
boost::polygon::property_merge_point::x	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline coordinate_type x() const { return x_; }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:() const
boost::polygon::property_merge_point::x	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void x(coordinate_type value) { x_ = value; }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(coordinate_type value)
boost::polygon::property_merge_point::x_	/usr/include/boost/polygon/detail/property_merge.hpp	/^  coordinate_type x_, y_;$/;"	m	class:boost::polygon::property_merge_point	access:private
boost::polygon::property_merge_point::y	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline coordinate_type y() const { return y_; }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:() const
boost::polygon::property_merge_point::y	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void y(coordinate_type value) { y_ = value; }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(coordinate_type value)
boost::polygon::property_merge_point::y_	/usr/include/boost/polygon/detail/property_merge.hpp	/^  coordinate_type x_, y_;$/;"	m	class:boost::polygon::property_merge_point	access:private
boost::polygon::rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_coordinate_type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_coordinate_type {$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_coordinate_type::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^      typedef typename rectangle_coordinate_type_by_concept<T, typename is_rectangle_concept<typename geometry_concept<T>::type>::type>::type type;$/;"	t	struct:boost::polygon::rectangle_coordinate_type	access:public
boost::polygon::rectangle_coordinate_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_coordinate_type_by_concept { typedef void type; };$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_coordinate_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_coordinate_type_by_concept<T, gtl_yes> { typedef typename rectangle_traits<T>::coordinate_type type; };$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_coordinate_type_by_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_coordinate_type_by_concept { typedef void type; };$/;"	t	struct:boost::polygon::rectangle_coordinate_type_by_concept	access:public
boost::polygon::rectangle_coordinate_type_by_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_coordinate_type_by_concept<T, gtl_yes> { typedef typename rectangle_traits<T>::coordinate_type type; };$/;"	t	struct:boost::polygon::rectangle_coordinate_type_by_concept	access:public
boost::polygon::rectangle_data	/usr/include/boost/polygon/rectangle_data.hpp	/^class rectangle_data {$/;"	c	namespace:boost::polygon
boost::polygon::rectangle_data::coordinate_type	/usr/include/boost/polygon/rectangle_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::rectangle_data	access:public
boost::polygon::rectangle_data::get	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline coordinate_type get(direction_2d dir) const {$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(direction_2d dir) const
boost::polygon::rectangle_data::get	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline interval_data<coordinate_type> get(orientation_2d orient) const {$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(orientation_2d orient) const
boost::polygon::rectangle_data::interval_type	/usr/include/boost/polygon/rectangle_data.hpp	/^  typedef interval_data<T> interval_type;$/;"	t	class:boost::polygon::rectangle_data	access:public
boost::polygon::rectangle_data::operator !=	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline bool operator!=(const T2& rvalue) const { return !((*this) == rvalue); }$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(const T2& rvalue) const
boost::polygon::rectangle_data::operator =	/usr/include/boost/polygon/rectangle_concept.hpp	/^  rectangle_data<T>& rectangle_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::rectangle_data	signature:(const T2& rvalue)
boost::polygon::rectangle_data::operator =	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::rectangle_data	access:public	signature:(const T2& rvalue)
boost::polygon::rectangle_data::operator =	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data& operator=(const rectangle_data& that) {$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(const rectangle_data& that)
boost::polygon::rectangle_data::operator ==	/usr/include/boost/polygon/rectangle_concept.hpp	/^  bool rectangle_data<T>::operator==(const T2& rvalue) const {$/;"	f	class:boost::polygon::rectangle_data	signature:(const T2& rvalue) const
boost::polygon::rectangle_data::operator ==	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline bool operator==(const T2& rvalue) const;$/;"	p	class:boost::polygon::rectangle_data	access:public	signature:(const T2& rvalue) const
boost::polygon::rectangle_data::ranges_	/usr/include/boost/polygon/rectangle_data.hpp	/^  interval_data<coordinate_type> ranges_[2];$/;"	m	class:boost::polygon::rectangle_data	access:private
boost::polygon::rectangle_data::rectangle_data	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data():ranges_() {}$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:()
boost::polygon::rectangle_data::rectangle_data	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data(T xl, T yl, T xh, T yh):ranges_() {$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(T xl, T yl, T xh, T yh)
boost::polygon::rectangle_data::rectangle_data	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data(const interval_type_1& hrange,$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(const interval_type_1& hrange, const interval_type_2& vrange)
boost::polygon::rectangle_data::rectangle_data	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data(const rectangle_data& that):ranges_() { (*this) = that; }$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(const rectangle_data& that)
boost::polygon::rectangle_data::set	/usr/include/boost/polygon/rectangle_concept.hpp	/^  inline void rectangle_data<T>::set(orientation_2d orient, const interval_type_1& interval) {$/;"	f	class:boost::polygon::rectangle_data	signature:(orientation_2d orient, const interval_type_1& interval)
boost::polygon::rectangle_data::set	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline void set(direction_2d dir, coordinate_type value) {$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(direction_2d dir, coordinate_type value)
boost::polygon::rectangle_data::set	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline void set(orientation_2d orient, const interval_type_1& interval);$/;"	p	class:boost::polygon::rectangle_data	access:public	signature:(orientation_2d orient, const interval_type_1& interval)
boost::polygon::rectangle_difference_type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_difference_type {$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_difference_type::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^      T, typename is_rectangle_concept<typename geometry_concept<T>::type>::type>::type type;$/;"	t	struct:boost::polygon::rectangle_difference_type	access:public
boost::polygon::rectangle_difference_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_difference_type_by_concept { typedef void type; };$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_difference_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_difference_type_by_concept<T, gtl_yes> {$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_difference_type_by_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^     typedef typename coordinate_traits<typename rectangle_traits<T>::coordinate_type>::coordinate_difference type; };$/;"	t	struct:boost::polygon::rectangle_difference_type_by_concept	access:public
boost::polygon::rectangle_difference_type_by_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_difference_type_by_concept { typedef void type; };$/;"	t	struct:boost::polygon::rectangle_difference_type_by_concept	access:public
boost::polygon::rectangle_distance_type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_distance_type {$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_distance_type::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^      T, typename is_rectangle_concept<typename geometry_concept<T>::type>::type>::type type;$/;"	t	struct:boost::polygon::rectangle_distance_type	access:public
boost::polygon::rectangle_distance_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_distance_type_by_concept { typedef void type; };$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_distance_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_distance_type_by_concept<T, gtl_yes> {$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_distance_type_by_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^    typedef typename coordinate_traits<typename rectangle_coordinate_type<T>::type>::coordinate_distance type; };$/;"	t	struct:boost::polygon::rectangle_distance_type_by_concept	access:public
boost::polygon::rectangle_distance_type_by_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_distance_type_by_concept { typedef void type; };$/;"	t	struct:boost::polygon::rectangle_distance_type_by_concept	access:public
boost::polygon::rectangle_formation	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^namespace rectangle_formation {$/;"	n	namespace:boost::polygon
boost::polygon::rectangle_formation::ScanLineToRects	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  class ScanLineToRects {$/;"	c	namespace:boost::polygon::rectangle_formation
boost::polygon::rectangle_formation::ScanLineToRects::ScanData	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef std::set<scan_rect_type, less_rectangle_concept<scan_rect_type, scan_rect_type> > ScanData;$/;"	t	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
boost::polygon::rectangle_formation::ScanLineToRects::ScanLineToRects	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    inline ScanLineToRects() : scanData_(), haveCurrentRect_(), currentRect_(), orient_(), currentCoordinate_() {}$/;"	f	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public	signature:()
boost::polygon::rectangle_formation::ScanLineToRects::ScanLineToRects	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    inline ScanLineToRects(orientation_2d orient, rectangle_type model) :$/;"	f	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public	signature:(orientation_2d orient, rectangle_type model)
boost::polygon::rectangle_formation::ScanLineToRects::coordinate_type	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef typename rectangle_traits<T>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public
boost::polygon::rectangle_formation::ScanLineToRects::currentCoordinate_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typename rectangle_traits<T>::coordinate_type currentCoordinate_;$/;"	m	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
boost::polygon::rectangle_formation::ScanLineToRects::currentRect_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    scan_rect_type currentRect_;$/;"	m	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
boost::polygon::rectangle_formation::ScanLineToRects::haveCurrentRect_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    bool haveCurrentRect_;$/;"	m	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
boost::polygon::rectangle_formation::ScanLineToRects::nextMajorCoordinate	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    inline ScanLineToRects& nextMajorCoordinate(coordinate_type currentCoordinate) {$/;"	f	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public	signature:(coordinate_type currentCoordinate)
boost::polygon::rectangle_formation::ScanLineToRects::orient_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    orientation_2d orient_;$/;"	m	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
boost::polygon::rectangle_formation::ScanLineToRects::processEdge	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    inline ScanLineToRects& processEdge(CT& rectangles, const interval_data<coordinate_type>& edge);$/;"	p	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public	signature:(CT& rectangles, const interval_data<coordinate_type>& edge)
boost::polygon::rectangle_formation::ScanLineToRects::processEdge	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  ScanLineToRects<T>& ScanLineToRects<T>::processEdge(CT& rectangles, const interval_data<coordinate_type>& edge)$/;"	f	class:boost::polygon::rectangle_formation::ScanLineToRects	signature:(CT& rectangles, const interval_data<coordinate_type>& edge)
boost::polygon::rectangle_formation::ScanLineToRects::rectangle_type	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef T rectangle_type;$/;"	t	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public
boost::polygon::rectangle_formation::ScanLineToRects::scanData_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    ScanData scanData_;$/;"	m	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
boost::polygon::rectangle_formation::ScanLineToRects::scan_rect_type	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef rectangle_data<coordinate_type> scan_rect_type;$/;"	t	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public
boost::polygon::rectangle_formation::processEdge_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  processEdge_(CT& rectangles, ST& scanData, const interval_type& edge,$/;"	f	namespace:boost::polygon::rectangle_formation	signature:(CT& rectangles, ST& scanData, const interval_type& edge, bool& haveCurrentRect, rectangle_type& currentRect, coordinate_type currentCoordinate, orientation_2d orient)
boost::polygon::rectangle_interval_type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_interval_type {$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_interval_type::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^      typedef typename rectangle_interval_type_by_concept<T, typename is_rectangle_concept<typename geometry_concept<T>::type>::type>::type type;$/;"	t	struct:boost::polygon::rectangle_interval_type	access:public
boost::polygon::rectangle_interval_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_interval_type_by_concept { typedef void type; };$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_interval_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_interval_type_by_concept<T, gtl_yes> { typedef typename rectangle_traits<T>::interval_type type; };$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_interval_type_by_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_interval_type_by_concept { typedef void type; };$/;"	t	struct:boost::polygon::rectangle_interval_type_by_concept	access:public
boost::polygon::rectangle_interval_type_by_concept::type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_interval_type_by_concept<T, gtl_yes> { typedef typename rectangle_traits<T>::interval_type type; };$/;"	t	struct:boost::polygon::rectangle_interval_type_by_concept	access:public
boost::polygon::rectangle_mutable_traits	/usr/include/boost/polygon/rectangle_traits.hpp	/^  struct rectangle_mutable_traits {$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_mutable_traits::construct	/usr/include/boost/polygon/rectangle_traits.hpp	/^    static inline T construct(const T2& interval_horizontal,$/;"	f	struct:boost::polygon::rectangle_mutable_traits	access:public	signature:(const T2& interval_horizontal, const T3& interval_vertical)
boost::polygon::rectangle_mutable_traits::set	/usr/include/boost/polygon/rectangle_traits.hpp	/^    static inline void set(T& rectangle, orientation_2d orient, const T2& interval) {$/;"	f	struct:boost::polygon::rectangle_mutable_traits	access:public	signature:(T& rectangle, orientation_2d orient, const T2& interval)
boost::polygon::rectangle_traits	/usr/include/boost/polygon/rectangle_traits.hpp	/^  struct rectangle_traits {};$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_traits	/usr/include/boost/polygon/rectangle_traits.hpp	/^  struct rectangle_traits<T, gtl_no> {};$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_traits	/usr/include/boost/polygon/rectangle_traits.hpp	/^  struct rectangle_traits<T, typename gtl_same_type<typename T::interval_type, typename T::interval_type>::type> {$/;"	s	namespace:boost::polygon
boost::polygon::rectangle_traits::coordinate_type	/usr/include/boost/polygon/rectangle_traits.hpp	/^    typedef typename T::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::rectangle_traits	access:public
boost::polygon::rectangle_traits::get	/usr/include/boost/polygon/rectangle_traits.hpp	/^    static inline interval_type get(const T& rectangle, orientation_2d orient) {$/;"	f	struct:boost::polygon::rectangle_traits	access:public	signature:(const T& rectangle, orientation_2d orient)
boost::polygon::rectangle_traits::interval_type	/usr/include/boost/polygon/rectangle_traits.hpp	/^    typedef typename T::interval_type interval_type;$/;"	t	struct:boost::polygon::rectangle_traits	access:public
boost::polygon::reflected_convolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& reflected_convolve($/;"	f	namespace:boost::polygon	signature:( IntervalType1& lvalue, const IntervalType2& rvalue)
boost::polygon::reflected_convolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  reflected_convolve(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle)
boost::polygon::reflected_deconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& reflected_deconvolve($/;"	f	namespace:boost::polygon	signature:( IntervalType1& lvalue, const IntervalType2& rvalue)
boost::polygon::reflected_deconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  reflected_deconvolve(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle)
boost::polygon::resize	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  resize(polygon_set_type& polygon_set, coord_type resizing,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, coord_type resizing, RoundingOption rounding = CLOSEST, CornerOption corner = INTERSECTION)
boost::polygon::resize	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  resize(polygon_set_type& polygon_set, coord_type resizing) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, coord_type resizing)
boost::polygon::resize	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  resize(polygon_set_type& polygon_set, coord_type west, coord_type east, coord_type south, coord_type north) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, coord_type west, coord_type east, coord_type south, coord_type north)
boost::polygon::resize	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  resize(polygon_set_type& polygon_set, coord_type resizing, bool corner_fill_arcs = false, int num_circle_segments = 0) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, coord_type resizing, bool corner_fill_arcs = false, int num_circle_segments = 0)
boost::polygon::roundClosest	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline int roundClosest(double distance) {$/;"	f	namespace:boost::polygon	signature:(double distance)
boost::polygon::roundWithOptions	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline Unit roundWithOptions(double distance, RoundingOption rounding) {$/;"	f	namespace:boost::polygon	signature:(double distance, RoundingOption rounding)
boost::polygon::round_down	/usr/include/boost/polygon/polygon_set_data.hpp	/^  static inline T round_down(double val) {$/;"	f	namespace:boost::polygon	signature:(double val)
boost::polygon::round_down	/usr/include/boost/polygon/polygon_set_data.hpp	/^  static inline point_data<T> round_down(point_data<double> v) {$/;"	f	namespace:boost::polygon	signature:(point_data<double> v)
boost::polygon::scale	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& scale(IntervalType& interval, double factor) {$/;"	f	namespace:boost::polygon	signature:(IntervalType& interval, double factor)
boost::polygon::scale	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type& scale(PointType& point, const ScaleType& scaling) {$/;"	f	namespace:boost::polygon	signature:(PointType& point, const ScaleType& scaling)
boost::polygon::scale	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  scale(polygon_set_type& polygon_set, double factor) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, double factor)
boost::polygon::scale	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  scale(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, const scaling_type& scaling)
boost::polygon::scale	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale(T& polygon, double factor,$/;"	f	namespace:boost::polygon	signature:(T& polygon, double factor, typename enable_if< typename is_any_mutable_polygon_with_holes_type<T>::type>::type * = 0 )
boost::polygon::scale	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale(polygon_type& polygon, double factor) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, double factor)
boost::polygon::scale	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale(polygon_type& polygon, double factor,$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, double factor, typename enable_if< typename gtl_and< typename is_any_mutable_polygon_without_holes_type<polygon_type>::type, typename gtl_same_type < forty_five_domain, typename geometry_domain<typename geometry_concept<polygon_type>::type>::type>::type>::type>::type * = 0 )
boost::polygon::scale	/usr/include/boost/polygon/rectangle_concept.hpp	/^  scale(rectangle_type& rectangle, const scaling_type& scaling) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const scaling_type& scaling)
boost::polygon::scale	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& scale(Segment& segment, const Scale& sc) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Scale& sc)
boost::polygon::scale_down	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& scale_down($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type factor)
boost::polygon::scale_down	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type& scale_down(PointType& point, CType factor) {$/;"	f	namespace:boost::polygon	signature:(PointType& point, CType factor)
boost::polygon::scale_down	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  scale_down(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type factor)
boost::polygon::scale_down	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  scale_down(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type> ::unsigned_area_type factor)
boost::polygon::scale_down	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  scale_down(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type factor)
boost::polygon::scale_down	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale_down(T& polygon, typename coordinate_traits<typename polygon_traits<T>::coordinate_type>::unsigned_area_type factor) {$/;"	f	namespace:boost::polygon	signature:(T& polygon, typename coordinate_traits<typename polygon_traits<T>::coordinate_type>::unsigned_area_type factor)
boost::polygon::scale_down	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale_down(polygon_type& polygon, typename coordinate_traits<typename polygon_traits<polygon_type>::coordinate_type>::unsigned_area_type factor) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, typename coordinate_traits<typename polygon_traits<polygon_type>::coordinate_type>::unsigned_area_type factor)
boost::polygon::scale_down	/usr/include/boost/polygon/rectangle_concept.hpp	/^  scale_down(rectangle_type& rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename coordinate_traits<typename rectangle_coordinate_type<rectangle_type>::type>::unsigned_area_type factor)
boost::polygon::scale_down	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& scale_down(Segment& segment,$/;"	f	namespace:boost::polygon	signature:(Segment& segment, typename coordinate_traits< typename segment_coordinate_type<Segment>::type >::unsigned_area_type factor)
boost::polygon::scale_down_vertex_45_compact_range_blindly	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void scale_down_vertex_45_compact_range_blindly(iT beginr, iT endr, T factor) {$/;"	f	namespace:boost::polygon	signature:(iT beginr, iT endr, T factor)
boost::polygon::scale_up	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& scale_up($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type factor)
boost::polygon::scale_up	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type& scale_up(PointType& point, CType factor) {$/;"	f	namespace:boost::polygon	signature:(PointType& point, CType factor)
boost::polygon::scale_up	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  scale_up(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type factor)
boost::polygon::scale_up	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  scale_up(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type> ::unsigned_area_type factor)
boost::polygon::scale_up	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  scale_up(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type factor)
boost::polygon::scale_up	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale_up(T& polygon, typename coordinate_traits<typename polygon_traits<T>::coordinate_type>::unsigned_area_type factor) {$/;"	f	namespace:boost::polygon	signature:(T& polygon, typename coordinate_traits<typename polygon_traits<T>::coordinate_type>::unsigned_area_type factor)
boost::polygon::scale_up	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale_up(polygon_type& polygon, typename coordinate_traits<typename polygon_traits<polygon_type>::coordinate_type>::unsigned_area_type factor) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, typename coordinate_traits<typename polygon_traits<polygon_type>::coordinate_type>::unsigned_area_type factor)
boost::polygon::scale_up	/usr/include/boost/polygon/rectangle_concept.hpp	/^  scale_up(rectangle_type& rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename coordinate_traits<typename rectangle_coordinate_type<rectangle_type>::type>::unsigned_area_type factor)
boost::polygon::scale_up	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& scale_up(Segment& segment,$/;"	f	namespace:boost::polygon	signature:(Segment& segment, typename coordinate_traits< typename segment_coordinate_type<Segment>::type >::unsigned_area_type factor)
boost::polygon::scale_up_vertex_45_compact_range	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void scale_up_vertex_45_compact_range(iT beginr, iT endr, T factor) {$/;"	f	namespace:boost::polygon	signature:(iT beginr, iT endr, T factor)
boost::polygon::scaling_policy	/usr/include/boost/polygon/isotropy.hpp	/^  struct scaling_policy {$/;"	s	namespace:boost::polygon
boost::polygon::scaling_policy::round	/usr/include/boost/polygon/isotropy.hpp	/^    static inline T round(T t2) {$/;"	f	struct:boost::polygon::scaling_policy	access:public	signature:(T t2)
boost::polygon::scaling_policy::round	/usr/include/boost/polygon/isotropy.hpp	/^    static inline T round(T2 t2) {$/;"	f	struct:boost::polygon::scaling_policy	access:public	signature:(T2 t2)
boost::polygon::scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class scanline : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
boost::polygon::scanline::Point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::common_vertex	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool common_vertex(const half_edge& he1, const half_edge& he2) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(const half_edge& he1, const half_edge& he2)
boost::polygon::scanline::const_iterator	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_type::const_iterator const_iterator;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::convert_segments_to_vertex_half_edges	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void convert_segments_to_vertex_half_edges(std::vector<vertex_half_edge>& output, iT begin, iT end) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(std::vector<vertex_half_edge>& output, iT begin, iT end)
boost::polygon::scanline::end_point_queue	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::set<Point, less_point> end_point_queue;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::end_point_queue_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    end_point_queue end_point_queue_;$/;"	m	class:boost::polygon::scanline	access:public
boost::polygon::scanline::erase_end_events	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void erase_end_events(typename end_point_queue::iterator epqi) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(typename end_point_queue::iterator epqi)
boost::polygon::scanline::evalAtXforYPack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typename scanline_base<Unit>::evalAtXforYPack evalAtXforYPack_;$/;"	m	class:boost::polygon::scanline	access:public
boost::polygon::scanline::half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::half_edge_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::pair<property_set, property_set> > half_edge_property;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::handle_input_events	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    iT handle_input_events(result_type& result, result_functor rf, iT begin, iT end) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(result_type& result, result_functor rf, iT begin, iT end)
boost::polygon::scanline::insert_new_edges_into_scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void insert_new_edges_into_scanline() {$/;"	f	class:boost::polygon::scanline	access:public	signature:()
boost::polygon::scanline::insertion_set_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    std::vector<scanline_element> insertion_set_; \/\/edge to be inserted after current scanline stop$/;"	m	class:boost::polygon::scanline	access:public
boost::polygon::scanline::iterator	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_type::iterator iterator;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::just_before_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    int just_before_;$/;"	m	class:boost::polygon::scanline	access:public
boost::polygon::scanline::less_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_half_edge less_half_edge;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::less_point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_point less_point;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::merge_property_maps	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void merge_property_maps(property_map& mp, const property_map& mp2) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(property_map& mp, const property_map& mp2)
boost::polygon::scanline::operator =	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline scanline& operator=(const scanline& that) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(const scanline& that)
boost::polygon::scanline::property_map	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<std::pair<property_type, int> > property_map;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<vertex_property> property_merge_data;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::property_set	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef keytype property_set;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::removal_set_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    std::vector<iterator> removal_set_; \/\/edges to be removed at the current scanline stop$/;"	m	class:boost::polygon::scanline	access:public
boost::polygon::scanline::remove_retired_edges_from_scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void remove_retired_edges_from_scanline() {$/;"	f	class:boost::polygon::scanline	access:public	signature:()
boost::polygon::scanline::scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void scan(result_type& result, result_functor rf, iT begin, iT end) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(result_type& result, result_functor rf, iT begin, iT end)
boost::polygon::scanline::scan_data_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    scanline_type scan_data_;$/;"	m	class:boost::polygon::scanline	access:public
boost::polygon::scanline::scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline scanline() : scan_data_(), removal_set_(), insertion_set_(), end_point_queue_(),$/;"	f	class:boost::polygon::scanline	access:public	signature:()
boost::polygon::scanline::scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline scanline(const scanline& that) : scan_data_(), removal_set_(), insertion_set_(), end_point_queue_(),$/;"	f	class:boost::polygon::scanline	access:public	signature:(const scanline& that)
boost::polygon::scanline::scanline_element	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, property_map> scanline_element;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::scanline_type	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::map<half_edge, property_map, less_half_edge> scanline_type;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::set_unique_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void set_unique_property(property_set& unqiue_property, const property_map& property) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(property_set& unqiue_property, const property_map& property)
boost::polygon::scanline::test_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class test_functor {$/;"	c	class:boost::polygon::scanline	access:public
boost::polygon::scanline::test_functor::operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      inline void operator()(std::vector<std::pair<half_edge, std::pair<property_set, property_set> > >& result,$/;"	f	class:boost::polygon::scanline::test_functor	access:public	signature:(std::vector<std::pair<half_edge, std::pair<property_set, property_set> > >& result, const half_edge& he, const property_set& ps_left, const property_set& ps_right)
boost::polygon::scanline::test_functor::test_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      inline test_functor() {}$/;"	f	class:boost::polygon::scanline::test_functor	access:public	signature:()
boost::polygon::scanline::test_scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_scanline(stream_type& stdcout) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(stream_type& stdcout)
boost::polygon::scanline::update_property_map	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void update_property_map(property_map& mp, const std::pair<property_type, int>& prop_data) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(property_map& mp, const std::pair<property_type, int>& prop_data)
boost::polygon::scanline::vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, property_map> vertex_data;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::vertex_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::vertex_half_edge vertex_half_edge;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::vertex_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::pair<property_type, int> > vertex_property;$/;"	t	class:boost::polygon::scanline	access:public
boost::polygon::scanline::write_out	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void write_out(result_type& result, result_functor rf, const half_edge& he,$/;"	f	class:boost::polygon::scanline	access:public	signature:(result_type& result, result_functor rf, const half_edge& he, const property_map& pm_left, const property_map& pm_right)
boost::polygon::scanline::x_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    Unit x_;$/;"	m	class:boost::polygon::scanline	access:public
boost::polygon::scanline::y_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    Unit y_;$/;"	m	class:boost::polygon::scanline	access:public
boost::polygon::scanline_base	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct scanline_base {$/;"	s	namespace:boost::polygon
boost::polygon::scanline_base::Point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef point_data<Unit> Point;$/;"	t	struct:boost::polygon::scanline_base	access:public
boost::polygon::scanline_base::between	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool between(Point pt, Point pt1, Point pt2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Point pt, Point pt1, Point pt2)
boost::polygon::scanline_base::compute_intercept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline Unit compute_intercept(const area_type& dy2,$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const area_type& dy2, const area_type& dx1, const area_type& dx2)
boost::polygon::scanline_base::compute_intersection	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool compute_intersection(Point& intersection, const half_edge& he1, const half_edge& he2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Point& intersection, const half_edge& he1, const half_edge& he2)
boost::polygon::scanline_base::compute_intersection_pack	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    struct compute_intersection_pack {$/;"	s	struct:boost::polygon::scanline_base	access:public
boost::polygon::scanline_base::compute_intersection_pack::compute_exact_intersection	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool compute_exact_intersection(Point& intersection, const half_edge& he1, const half_edge& he2,$/;"	f	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public	signature:(Point& intersection, const half_edge& he1, const half_edge& he2, bool projected = false, bool round_closest = false)
boost::polygon::scanline_base::compute_intersection_pack::compute_intersection	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool compute_intersection(Point& intersection, const half_edge& he1, const half_edge& he2,$/;"	f	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public	signature:(Point& intersection, const half_edge& he1, const half_edge& he2, bool projected = false, bool round_closest = false)
boost::polygon::scanline_base::compute_intersection_pack::compute_lazy_intersection	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      static inline bool compute_lazy_intersection(Point& intersection, const half_edge& he1, const half_edge& he2,$/;"	f	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public	signature:(Point& intersection, const half_edge& he1, const half_edge& he2, bool projected = false, bool round_closest = false)
boost::polygon::scanline_base::compute_intersection_pack::dx1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::dx2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::dy1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::dy2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::high_precision	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef typename high_precision_type<Unit>::type high_precision;$/;"	t	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::x	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::x11	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::x21	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::x_den	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::x_num	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::y	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::y11	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::y21	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::y_den	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::y_high	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::compute_intersection_pack::y_num	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
boost::polygon::scanline_base::equal_slope	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool equal_slope(area_type dx1, area_type dy1, area_type dx2, area_type dy2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(area_type dx1, area_type dy1, area_type dx2, area_type dy2)
boost::polygon::scanline_base::equal_slope	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool equal_slope(const Unit& x, const Unit& y,$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const Unit& x, const Unit& y, const Point& pt1, const Point& pt2)
boost::polygon::scanline_base::equal_slope_hp	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool equal_slope_hp(const T& dx1, const T& dy1, const T& dx2, const T& dy2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const T& dx1, const T& dy1, const T& dx2, const T& dy2)
boost::polygon::scanline_base::evalAtXforY	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline typename high_precision_type<Unit>::type evalAtXforY(Unit xIn, Point pt, Point other_pt) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Unit xIn, Point pt, Point other_pt)
boost::polygon::scanline_base::evalAtXforYPack	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    struct evalAtXforYPack {$/;"	s	struct:boost::polygon::scanline_base	access:public
boost::polygon::scanline_base::evalAtXforYPack::evalAtXforY	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline const typename high_precision_type<Unit>::type& evalAtXforY(Unit xIn, Point pt, Point other_pt) {$/;"	f	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public	signature:(Unit xIn, Point pt, Point other_pt)
boost::polygon::scanline_base::evalAtXforYPack::evalAtXforY0	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^                           evalAtXforYdy, evalAtXforYx2, evalAtXforYy2, evalAtXforY0;$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
boost::polygon::scanline_base::evalAtXforYPack::evalAtXforYdx	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
boost::polygon::scanline_base::evalAtXforYPack::evalAtXforYdx1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
boost::polygon::scanline_base::evalAtXforYPack::evalAtXforYdy	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^                           evalAtXforYdy, evalAtXforYx2, evalAtXforYy2, evalAtXforY0;$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
boost::polygon::scanline_base::evalAtXforYPack::evalAtXforYret	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
boost::polygon::scanline_base::evalAtXforYPack::evalAtXforYx1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
boost::polygon::scanline_base::evalAtXforYPack::evalAtXforYx2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^                           evalAtXforYdy, evalAtXforYx2, evalAtXforYy2, evalAtXforY0;$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
boost::polygon::scanline_base::evalAtXforYPack::evalAtXforYxIn	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
boost::polygon::scanline_base::evalAtXforYPack::evalAtXforYy1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
boost::polygon::scanline_base::evalAtXforYPack::evalAtXforYy2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^                           evalAtXforYdy, evalAtXforYx2, evalAtXforYy2, evalAtXforY0;$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
boost::polygon::scanline_base::evalAtXforYlazy	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline Unit evalAtXforYlazy(Unit xIn, Point pt, Point other_pt) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Unit xIn, Point pt, Point other_pt)
boost::polygon::scanline_base::half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::pair<Point, Point> half_edge;$/;"	t	struct:boost::polygon::scanline_base	access:public
boost::polygon::scanline_base::intersects	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool intersects(const half_edge& he1, const half_edge& he2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const half_edge& he1, const half_edge& he2)
boost::polygon::scanline_base::intersects_grid	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool intersects_grid(Point pt, const half_edge& he) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Point pt, const half_edge& he)
boost::polygon::scanline_base::is_45_degree	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool is_45_degree(const half_edge& he) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const half_edge& he)
boost::polygon::scanline_base::is_horizontal	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool is_horizontal(const half_edge& he) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const half_edge& he)
boost::polygon::scanline_base::is_vertical	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool is_vertical(const half_edge& he) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const half_edge& he)
boost::polygon::scanline_base::less_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class less_half_edge : public std::binary_function<half_edge, half_edge, bool> {$/;"	c	struct:boost::polygon::scanline_base	inherits:std::binary_function	access:public
boost::polygon::scanline_base::less_half_edge::justBefore_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      int *justBefore_;$/;"	m	class:boost::polygon::scanline_base::less_half_edge	access:private
boost::polygon::scanline_base::less_half_edge::less_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge() : x_(0), justBefore_(0), pack_(0) {}$/;"	f	class:boost::polygon::scanline_base::less_half_edge	access:public	signature:()
boost::polygon::scanline_base::less_half_edge::less_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge(Unit *x, int *justBefore, evalAtXforYPack * packIn) : x_(x), justBefore_(justBefore), pack_(packIn) {}$/;"	f	class:boost::polygon::scanline_base::less_half_edge	access:public	signature:(Unit *x, int *justBefore, evalAtXforYPack * packIn)
boost::polygon::scanline_base::less_half_edge::less_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge(const less_half_edge& that) : x_(that.x_), justBefore_(that.justBefore_),$/;"	f	class:boost::polygon::scanline_base::less_half_edge	access:public	signature:(const less_half_edge& that)
boost::polygon::scanline_base::less_half_edge::operator ()	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator () (const half_edge& elm1, const half_edge& elm2) const {$/;"	f	class:boost::polygon::scanline_base::less_half_edge	access:public	signature:(const half_edge& elm1, const half_edge& elm2) const
boost::polygon::scanline_base::less_half_edge::operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge& operator=(const less_half_edge& that) {$/;"	f	class:boost::polygon::scanline_base::less_half_edge	access:public	signature:(const less_half_edge& that)
boost::polygon::scanline_base::less_half_edge::pack_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      evalAtXforYPack * pack_;$/;"	m	class:boost::polygon::scanline_base::less_half_edge	access:private
boost::polygon::scanline_base::less_half_edge::x_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Unit *x_; \/\/x value at which to apply comparison$/;"	m	class:boost::polygon::scanline_base::less_half_edge	access:private
boost::polygon::scanline_base::less_point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class less_point : public std::binary_function<Point, Point, bool> {$/;"	c	struct:boost::polygon::scanline_base	inherits:std::binary_function	access:public
boost::polygon::scanline_base::less_point::less_point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_point() {}$/;"	f	class:boost::polygon::scanline_base::less_point	access:public	signature:()
boost::polygon::scanline_base::less_point::operator ()	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator () (const Point& pt1, const Point& pt2) const {$/;"	f	class:boost::polygon::scanline_base::less_point	access:public	signature:(const Point& pt1, const Point& pt2) const
boost::polygon::scanline_base::less_slope	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool less_slope(area_type dx1, area_type dy1, area_type dx2, area_type dy2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(area_type dx1, area_type dy1, area_type dx2, area_type dy2)
boost::polygon::scanline_base::less_slope	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool less_slope(const Unit& x, const Unit& y,$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const Unit& x, const Unit& y, const Point& pt1, const Point& pt2)
boost::polygon::scanline_base::less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class less_vertex_half_edge : public std::binary_function<vertex_half_edge, vertex_half_edge, bool> {$/;"	c	struct:boost::polygon::scanline_base	inherits:std::binary_function	access:public
boost::polygon::scanline_base::less_vertex_half_edge::justBefore_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      int *justBefore_;$/;"	m	class:boost::polygon::scanline_base::less_vertex_half_edge	access:private
boost::polygon::scanline_base::less_vertex_half_edge::less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_vertex_half_edge() : x_(0), justBefore_(0) {}$/;"	f	class:boost::polygon::scanline_base::less_vertex_half_edge	access:public	signature:()
boost::polygon::scanline_base::less_vertex_half_edge::less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_vertex_half_edge(Unit *x, int *justBefore) : x_(x), justBefore_(justBefore) {}$/;"	f	class:boost::polygon::scanline_base::less_vertex_half_edge	access:public	signature:(Unit *x, int *justBefore)
boost::polygon::scanline_base::less_vertex_half_edge::less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_vertex_half_edge(const less_vertex_half_edge& that) : x_(that.x_), justBefore_(that.justBefore_) {}$/;"	f	class:boost::polygon::scanline_base::less_vertex_half_edge	access:public	signature:(const less_vertex_half_edge& that)
boost::polygon::scanline_base::less_vertex_half_edge::operator ()	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator () (const vertex_half_edge& elm1, const vertex_half_edge& elm2) const {$/;"	f	class:boost::polygon::scanline_base::less_vertex_half_edge	access:public	signature:(const vertex_half_edge& elm1, const vertex_half_edge& elm2) const
boost::polygon::scanline_base::less_vertex_half_edge::operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_vertex_half_edge& operator=(const less_vertex_half_edge& that) { x_ = that.x_; justBefore_ = that.justBefore_; return *this; }$/;"	f	class:boost::polygon::scanline_base::less_vertex_half_edge	access:public	signature:(const less_vertex_half_edge& that)
boost::polygon::scanline_base::less_vertex_half_edge::x_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Unit *x_; \/\/x value at which to apply comparison$/;"	m	class:boost::polygon::scanline_base::less_vertex_half_edge	access:private
boost::polygon::scanline_base::on_above_or_below	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline int on_above_or_below(Point pt, const half_edge& he) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Point pt, const half_edge& he)
boost::polygon::scanline_base::unsigned_add	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void unsigned_add(unsigned_product_type& result, int& result_sign, unsigned_product_type a, int a_sign, unsigned_product_type b, int b_sign) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(unsigned_product_type& result, int& result_sign, unsigned_product_type a, int a_sign, unsigned_product_type b, int b_sign)
boost::polygon::scanline_base::unsigned_mod	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void unsigned_mod(unsigned_product_type& result, int& result_sign, unsigned_product_type a, int a_sign, unsigned_product_type b, int b_sign) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(unsigned_product_type& result, int& result_sign, unsigned_product_type a, int a_sign, unsigned_product_type b, int b_sign)
boost::polygon::scanline_base::vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class vertex_half_edge {$/;"	c	struct:boost::polygon::scanline_base	access:public
boost::polygon::scanline_base::vertex_half_edge::count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      int count; \/\/dxdydTheta$/;"	m	class:boost::polygon::scanline_base::vertex_half_edge	access:public
boost::polygon::scanline_base::vertex_half_edge::evalAtX	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline high_precision evalAtX(Unit xIn) const { return evalAtXforYlazy(xIn, pt, other_pt); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(Unit xIn) const
boost::polygon::scanline_base::vertex_half_edge::high_precision	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef typename high_precision_type<Unit>::type high_precision;$/;"	t	class:boost::polygon::scanline_base::vertex_half_edge	access:public
boost::polygon::scanline_base::vertex_half_edge::is_begin	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool is_begin() const {$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:() const
boost::polygon::scanline_base::vertex_half_edge::is_vertical	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool is_vertical() const {$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:() const
boost::polygon::scanline_base::vertex_half_edge::operator !=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator!=(const std::pair<Point, Point>& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const std::pair<Point, Point>& vertex) const
boost::polygon::scanline_base::vertex_half_edge::operator !=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator!=(const vertex_half_edge& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
boost::polygon::scanline_base::vertex_half_edge::operator <	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator<(const vertex_half_edge& vertex) const {$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
boost::polygon::scanline_base::vertex_half_edge::operator <=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator<=(const vertex_half_edge& vertex) const { return !((*this) > vertex); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
boost::polygon::scanline_base::vertex_half_edge::operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge& operator=(const std::pair<Point, Point>& vertex){ return *this; }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const std::pair<Point, Point>& vertex)
boost::polygon::scanline_base::vertex_half_edge::operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge& operator=(const vertex_half_edge& vertex){$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex)
boost::polygon::scanline_base::vertex_half_edge::operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const std::pair<Point, Point>& vertex) const { return false; }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const std::pair<Point, Point>& vertex) const
boost::polygon::scanline_base::vertex_half_edge::operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const vertex_half_edge& vertex) const {$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
boost::polygon::scanline_base::vertex_half_edge::operator >	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator>(const vertex_half_edge& vertex) const { return vertex < (*this); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
boost::polygon::scanline_base::vertex_half_edge::operator >=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator>=(const vertex_half_edge& vertex) const { return !((*this) < vertex); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
boost::polygon::scanline_base::vertex_half_edge::other_pt	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Point other_pt; \/\/ 1, 0 or -1$/;"	m	class:boost::polygon::scanline_base::vertex_half_edge	access:public
boost::polygon::scanline_base::vertex_half_edge::pt	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Point pt;$/;"	m	class:boost::polygon::scanline_base::vertex_half_edge	access:public
boost::polygon::scanline_base::vertex_half_edge::vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge() : pt(), other_pt(), count() {}$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:()
boost::polygon::scanline_base::vertex_half_edge::vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge(const Point& point, const Point& other_point, int countIn) : pt(point), other_pt(other_point), count(countIn) {}$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const Point& point, const Point& other_point, int countIn)
boost::polygon::scanline_base::vertex_half_edge::vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge(const std::pair<Point, Point>& vertex) : pt(), other_pt(), count() {}$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const std::pair<Point, Point>& vertex)
boost::polygon::scanline_base::vertex_half_edge::vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge(const vertex_half_edge& vertex) : pt(vertex.pt), other_pt(vertex.other_pt), count(vertex.count) {}$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex)
boost::polygon::scanline_orientation	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  scanline_orientation(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
boost::polygon::segment_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::segment_coordinate_type	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_coordinate_type {$/;"	s	namespace:boost::polygon
boost::polygon::segment_coordinate_type::type	/usr/include/boost/polygon/segment_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::segment_coordinate_type	access:public
boost::polygon::segment_coordinate_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_coordinate_type_by_concept {$/;"	s	namespace:boost::polygon
boost::polygon::segment_coordinate_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_coordinate_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
boost::polygon::segment_coordinate_type_by_concept::type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef typename segment_traits<GeometryType>::coordinate_type type;$/;"	t	struct:boost::polygon::segment_coordinate_type_by_concept	access:public
boost::polygon::segment_coordinate_type_by_concept::type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::segment_coordinate_type_by_concept	access:public
boost::polygon::segment_data	/usr/include/boost/polygon/segment_data.hpp	/^class segment_data {$/;"	c	namespace:boost::polygon
boost::polygon::segment_data::coordinate_type	/usr/include/boost/polygon/segment_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::segment_data	access:public
boost::polygon::segment_data::get	/usr/include/boost/polygon/segment_data.hpp	/^  point_type get(direction_1d dir) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(direction_1d dir) const
boost::polygon::segment_data::high	/usr/include/boost/polygon/segment_data.hpp	/^  point_type high() const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:() const
boost::polygon::segment_data::high	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data& high(const point_type& point) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const point_type& point)
boost::polygon::segment_data::low	/usr/include/boost/polygon/segment_data.hpp	/^  point_type low() const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:() const
boost::polygon::segment_data::low	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data& low(const point_type& point) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const point_type& point)
boost::polygon::segment_data::operator !=	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator!=(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
boost::polygon::segment_data::operator <	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator<(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
boost::polygon::segment_data::operator <=	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator<=(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
boost::polygon::segment_data::operator =	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data& operator=(const SegmentType& that) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const SegmentType& that)
boost::polygon::segment_data::operator =	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data& operator=(const segment_data& that) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that)
boost::polygon::segment_data::operator ==	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator==(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
boost::polygon::segment_data::operator >	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator>(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
boost::polygon::segment_data::operator >=	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator>=(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
boost::polygon::segment_data::point_type	/usr/include/boost/polygon/segment_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::segment_data	access:public
boost::polygon::segment_data::points_	/usr/include/boost/polygon/segment_data.hpp	/^  point_type points_[2];$/;"	m	class:boost::polygon::segment_data	access:private
boost::polygon::segment_data::segment_data	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data()$/;"	f	class:boost::polygon::segment_data	access:public	signature:()
boost::polygon::segment_data::segment_data	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data(const point_type& low, const point_type& high) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const point_type& low, const point_type& high)
boost::polygon::segment_data::segment_data	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data(const segment_data& that) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that)
boost::polygon::segment_data::set	/usr/include/boost/polygon/segment_data.hpp	/^  void set(direction_1d dir, const point_type& point) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(direction_1d dir, const point_type& point)
boost::polygon::segment_distance_type	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_distance_type {$/;"	s	namespace:boost::polygon
boost::polygon::segment_distance_type::type	/usr/include/boost/polygon/segment_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::segment_distance_type	access:public
boost::polygon::segment_distance_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_distance_type_by_concept {$/;"	s	namespace:boost::polygon
boost::polygon::segment_distance_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_distance_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
boost::polygon::segment_distance_type_by_concept::type	/usr/include/boost/polygon/segment_concept.hpp	/^  >::coordinate_distance type;$/;"	t	struct:boost::polygon::segment_distance_type_by_concept	access:public
boost::polygon::segment_distance_type_by_concept::type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::segment_distance_type_by_concept	access:public
boost::polygon::segment_mutable_traits	/usr/include/boost/polygon/segment_traits.hpp	/^struct segment_mutable_traits {$/;"	s	namespace:boost::polygon
boost::polygon::segment_mutable_traits::construct	/usr/include/boost/polygon/segment_traits.hpp	/^  static segment_type construct(const point_type& low, const point_type& high) {$/;"	f	struct:boost::polygon::segment_mutable_traits	access:public	signature:(const point_type& low, const point_type& high)
boost::polygon::segment_mutable_traits::coordinate_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef typename segment_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::segment_mutable_traits	access:public
boost::polygon::segment_mutable_traits::point_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef typename segment_type::point_type point_type;$/;"	t	struct:boost::polygon::segment_mutable_traits	access:public
boost::polygon::segment_mutable_traits::segment_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef Segment segment_type;$/;"	t	struct:boost::polygon::segment_mutable_traits	access:public
boost::polygon::segment_mutable_traits::set	/usr/include/boost/polygon/segment_traits.hpp	/^  static void set($/;"	f	struct:boost::polygon::segment_mutable_traits	access:public	signature:( segment_type& segment, direction_1d dir, const point_type& point)
boost::polygon::segment_point_type	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_point_type {$/;"	s	namespace:boost::polygon
boost::polygon::segment_point_type::type	/usr/include/boost/polygon/segment_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::segment_point_type	access:public
boost::polygon::segment_point_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_point_type_by_concept {$/;"	s	namespace:boost::polygon
boost::polygon::segment_point_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_point_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
boost::polygon::segment_point_type_by_concept::type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef typename segment_traits<GeometryType>::point_type type;$/;"	t	struct:boost::polygon::segment_point_type_by_concept	access:public
boost::polygon::segment_point_type_by_concept::type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::segment_point_type_by_concept	access:public
boost::polygon::segment_traits	/usr/include/boost/polygon/segment_traits.hpp	/^struct segment_traits {$/;"	s	namespace:boost::polygon
boost::polygon::segment_traits::coordinate_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef typename segment_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::segment_traits	access:public
boost::polygon::segment_traits::get	/usr/include/boost/polygon/segment_traits.hpp	/^  static point_type get($/;"	f	struct:boost::polygon::segment_traits	access:public	signature:( const segment_type& segment, direction_1d dir)
boost::polygon::segment_traits::point_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef typename segment_type::point_type point_type;$/;"	t	struct:boost::polygon::segment_traits	access:public
boost::polygon::segment_traits::segment_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef Segment segment_type;$/;"	t	struct:boost::polygon::segment_traits	access:public
boost::polygon::self_assign_operator_lvalue	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct self_assign_operator_lvalue {$/;"	s	namespace:boost::polygon
boost::polygon::self_assign_operator_lvalue::type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef geometry_type_1& type;$/;"	t	struct:boost::polygon::self_assign_operator_lvalue	access:public
boost::polygon::self_assignment_boolean_op	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    geometry_type_1& self_assignment_boolean_op(geometry_type_1& lvalue_, const geometry_type_2& rvalue_) {$/;"	f	namespace:boost::polygon	signature:(geometry_type_1& lvalue_, const geometry_type_2& rvalue_)
boost::polygon::self_assignment_boolean_op	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  geometry_type_1& self_assignment_boolean_op(geometry_type_1& lvalue_, const geometry_type_2& rvalue_) {$/;"	f	namespace:boost::polygon	signature:(geometry_type_1& lvalue_, const geometry_type_2& rvalue_)
boost::polygon::self_assignment_boolean_op_45	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  geometry_type_1& self_assignment_boolean_op_45(geometry_type_1& lvalue_, const geometry_type_2& rvalue_) {$/;"	f	namespace:boost::polygon	signature:(geometry_type_1& lvalue_, const geometry_type_2& rvalue_)
boost::polygon::self_intersect	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  self_intersect(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
boost::polygon::self_intersect	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  self_intersect(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
boost::polygon::self_xor	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  self_xor(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
boost::polygon::self_xor	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  self_xor(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
boost::polygon::set	/usr/include/boost/polygon/interval_concept.hpp	/^>::type set(IntervalType& interval, direction_1d dir,$/;"	f	namespace:boost::polygon	signature:(IntervalType& interval, direction_1d dir, typename interval_mutable_traits<IntervalType>::coordinate_type value)
boost::polygon::set	/usr/include/boost/polygon/point_concept.hpp	/^>::type set(PointType& point, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(PointType& point, orientation_2d orient, typename point_mutable_traits<PointType>::coordinate_type value)
boost::polygon::set	/usr/include/boost/polygon/rectangle_concept.hpp	/^  set(T& rectangle, const T2& interval) {$/;"	f	namespace:boost::polygon	signature:(T& rectangle, const T2& interval)
boost::polygon::set	/usr/include/boost/polygon/rectangle_concept.hpp	/^  set(T& rectangle, orientation_2d orient, const T2& interval) {$/;"	f	namespace:boost::polygon	signature:(T& rectangle, orientation_2d orient, const T2& interval)
boost::polygon::set	/usr/include/boost/polygon/rectangle_concept.hpp	/^  set(rectangle_type& rectangle, orientation_2d orient, direction_1d dir,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, orientation_2d orient, direction_1d dir, typename rectangle_coordinate_type<rectangle_type>::type value)
boost::polygon::set	/usr/include/boost/polygon/segment_concept.hpp	/^void>::type set(Segment& segment, direction_1d dir, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, direction_1d dir, const Point& point)
boost::polygon::set_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^  set_compact(T& t, iT begin_compact_coordinates, iT end_compact_coordinates) {$/;"	f	namespace:boost::polygon	signature:(T& t, iT begin_compact_coordinates, iT end_compact_coordinates)
boost::polygon::set_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^  set_holes(T& t, iT begin_holes, iT end_holes) {$/;"	f	namespace:boost::polygon	signature:(T& t, iT begin_holes, iT end_holes)
boost::polygon::set_points	/usr/include/boost/polygon/polygon_traits.hpp	/^  set_points(T& t, iT begin_points, iT end_points) {$/;"	f	namespace:boost::polygon	signature:(T& t, iT begin_points, iT end_points)
boost::polygon::set_points	/usr/include/boost/polygon/rectangle_concept.hpp	/^  set_points(rectangle_type& rectangle, const point_type_1& p1,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const point_type_1& p1, const point_type_2& p2)
boost::polygon::shrink	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& shrink($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, direction_1d dir, typename interval_coordinate_type<IntervalType>::type shrinking)
boost::polygon::shrink	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& shrink($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type shrinking)
boost::polygon::shrink	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type shrinking)
boost::polygon::shrink	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set, direction_2d dir,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, direction_2d dir, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type shrinking)
boost::polygon::shrink	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type low_shrinking, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type high_shrinking)
boost::polygon::shrink	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type shrinking)
boost::polygon::shrink	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type shrinking)
boost::polygon::shrink	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type west_shrinking, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type east_shrinking, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type south_shrinking, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type north_shrinking)
boost::polygon::shrink	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type shrinking)
boost::polygon::shrink	/usr/include/boost/polygon/rectangle_concept.hpp	/^  shrink(rectangle_type& rectangle, direction_2d dir,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, direction_2d dir, typename rectangle_coordinate_type<rectangle_type>::type shrinking)
boost::polygon::shrink	/usr/include/boost/polygon/rectangle_concept.hpp	/^  shrink(rectangle_type& rectangle, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, orientation_2d orient, typename rectangle_coordinate_type<rectangle_type>::type shrinking)
boost::polygon::shrink	/usr/include/boost/polygon/rectangle_concept.hpp	/^  shrink(rectangle_type& rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type shrinking)
boost::polygon::simplify	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  simplify(polygon_set_type& polygon_set, typename coordinate_traits<$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits< typename polygon_set_traits<polygon_set_type>::coordinate_type >::coordinate_distance threshold)
boost::polygon::size	/usr/include/boost/polygon/polygon_traits.hpp	/^  size(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
boost::polygon::size_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^  size_holes(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
boost::polygon::snap_point_vector_to_45	/usr/include/boost/polygon/polygon_traits.hpp	/^  void snap_point_vector_to_45(std::vector<point_data<Unit> >& pts) {$/;"	f	namespace:boost::polygon	signature:(std::vector<point_data<Unit> >& pts)
boost::polygon::snap_to_45	/usr/include/boost/polygon/polygon_traits.hpp	/^  snap_to_45(polygon_type& polygon) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon)
boost::polygon::square_euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  square_euclidean_distance(const rectangle_type& lvalue, const rectangle_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& lvalue, const rectangle_type_2& rvalue)
boost::polygon::square_euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  square_euclidean_distance(rectangle_type& lvalue, const point_type& rvalue) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& lvalue, const point_type& rvalue)
boost::polygon::test_arbitrary_boolean_op	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  bool test_arbitrary_boolean_op(stream_type& stdcout) {$/;"	f	namespace:boost::polygon	signature:(stream_type& stdcout)
boost::polygon::touch_90_operation	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^  struct touch_90_operation {$/;"	s	namespace:boost::polygon
boost::polygon::touch_90_operation::Interval	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    typedef interval_data<Unit> Interval;$/;"	t	struct:boost::polygon::touch_90_operation	access:public
boost::polygon::touch_90_operation::TouchOp	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    class TouchOp {$/;"	c	struct:boost::polygon::touch_90_operation	access:public
boost::polygon::touch_90_operation::TouchOp::ElementType	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      typedef std::pair<Unit, std::set<int> > ElementType;$/;"	t	class:boost::polygon::touch_90_operation::TouchOp	access:public
boost::polygon::touch_90_operation::TouchOp::ScanData	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      typedef std::map<Unit, std::set<int> > ScanData;$/;"	t	class:boost::polygon::touch_90_operation::TouchOp	access:public
boost::polygon::touch_90_operation::TouchOp::TouchOp	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchOp () : scanData_(), nextItr_() { nextItr_ = scanData_.end(); }$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:public	signature:()
boost::polygon::touch_90_operation::TouchOp::TouchOp	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchOp (const TouchOp& that) : scanData_(that.scanData_), nextItr_() { nextItr_ = scanData_.begin(); }$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:public	signature:(const TouchOp& that)
boost::polygon::touch_90_operation::TouchOp::advanceScan	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void advanceScan() { nextItr_ = scanData_.begin(); }$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:public	signature:()
boost::polygon::touch_90_operation::TouchOp::evaluateBorderId_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void evaluateBorderId_(graphT& outputContainer, const std::set<int>& ids, int changingId) {$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(graphT& outputContainer, const std::set<int>& ids, int changingId)
boost::polygon::touch_90_operation::TouchOp::evaluateBorder_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void evaluateBorder_(graphT& outputContainer, const std::set<int>& ids, const std::set<int>& changingIds) {$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(graphT& outputContainer, const std::set<int>& ids, const std::set<int>& changingIds)
boost::polygon::touch_90_operation::TouchOp::evaluateId_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void evaluateId_(graphT& outputContainer, std::set<int>& ids, int changingId, bool leadingEdge) {$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(graphT& outputContainer, std::set<int>& ids, int changingId, bool leadingEdge)
boost::polygon::touch_90_operation::TouchOp::evaluateInterval_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void evaluateInterval_(graphT& outputContainer, std::set<int>& ids,$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(graphT& outputContainer, std::set<int>& ids, const std::set<int>& changingIds, bool leadingEdge)
boost::polygon::touch_90_operation::TouchOp::insert_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline typename ScanData::iterator insert_(Unit pos, const std::set<int>& ids){$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(Unit pos, const std::set<int>& ids)
boost::polygon::touch_90_operation::TouchOp::lookup_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline typename ScanData::iterator lookup_(Unit pos){$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(Unit pos)
boost::polygon::touch_90_operation::TouchOp::nextItr_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      typename ScanData::iterator nextItr_;$/;"	m	class:boost::polygon::touch_90_operation::TouchOp	access:protected
boost::polygon::touch_90_operation::TouchOp::operator =	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchOp& operator=(const TouchOp& that);$/;"	p	class:boost::polygon::touch_90_operation::TouchOp	access:public	signature:(const TouchOp& that)
boost::polygon::touch_90_operation::TouchOp::processInterval	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void processInterval(graphT& outputContainer, Interval ivl, const std::set<int>& ids, bool leadingEdge) {$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:public	signature:(graphT& outputContainer, Interval ivl, const std::set<int>& ids, bool leadingEdge)
boost::polygon::touch_90_operation::TouchOp::scanData_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      ScanData scanData_;$/;"	m	class:boost::polygon::touch_90_operation::TouchOp	access:protected
boost::polygon::touch_90_operation::TouchScanEvent	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    class TouchScanEvent {$/;"	c	struct:boost::polygon::touch_90_operation	access:public
boost::polygon::touch_90_operation::TouchScanEvent::EventData	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      typedef std::map<Unit, std::set<int> > EventData;$/;"	t	class:boost::polygon::touch_90_operation::TouchScanEvent	access:private
boost::polygon::touch_90_operation::TouchScanEvent::TouchScanEvent	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchScanEvent() : eventData_() {}$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:()
boost::polygon::touch_90_operation::TouchScanEvent::TouchScanEvent	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchScanEvent(const TouchScanEvent& that) : eventData_(that.eventData_) {}$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(const TouchScanEvent& that)
boost::polygon::touch_90_operation::TouchScanEvent::TouchScanEvent	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchScanEvent(iT begin, iT end) : eventData_() {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(iT begin, iT end)
boost::polygon::touch_90_operation::TouchScanEvent::begin	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline iterator begin() const {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:() const
boost::polygon::touch_90_operation::TouchScanEvent::clear	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void clear() { eventData_.clear(); }$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:()
boost::polygon::touch_90_operation::TouchScanEvent::end	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline iterator end() const { return iterator(eventData_.end(), 0, 0, std::set<int>()); }$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:() const
boost::polygon::touch_90_operation::TouchScanEvent::eventData_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      EventData eventData_;$/;"	m	class:boost::polygon::touch_90_operation::TouchScanEvent	access:private
boost::polygon::touch_90_operation::TouchScanEvent::extents	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline Interval extents() const {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:() const
boost::polygon::touch_90_operation::TouchScanEvent::insert	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void insert(Unit pos, int id) {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(Unit pos, int id)
boost::polygon::touch_90_operation::TouchScanEvent::insert	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void insert(const TouchScanEvent& that){$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(const TouchScanEvent& that)
boost::polygon::touch_90_operation::TouchScanEvent::insert	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void insert(const std::pair<Interval, int>& intervalId){$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(const std::pair<Interval, int>& intervalId)
boost::polygon::touch_90_operation::TouchScanEvent::iterator	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      class iterator {$/;"	c	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public
boost::polygon::touch_90_operation::TouchScanEvent::iterator::incremented_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        bool incremented_;$/;"	m	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:private
boost::polygon::touch_90_operation::TouchScanEvent::iterator::iterator	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline iterator() : itr_(), ivlIds_(), incremented_(false) {}$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:()
boost::polygon::touch_90_operation::TouchScanEvent::iterator::iterator	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline iterator(const iterator& that) : itr_(), ivlIds_(), incremented_(false) { (*this) = that; }$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(const iterator& that)
boost::polygon::touch_90_operation::TouchScanEvent::iterator::iterator	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline iterator(typename EventData::const_iterator itr,$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(typename EventData::const_iterator itr, Unit prevPos, Unit curPos, const std::set<int>& ivlIds)
boost::polygon::touch_90_operation::TouchScanEvent::iterator::itr_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        typename EventData::const_iterator itr_;$/;"	m	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:private
boost::polygon::touch_90_operation::TouchScanEvent::iterator::ivlIds_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        std::pair<Interval, std::set<int> > ivlIds_;$/;"	m	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:private
boost::polygon::touch_90_operation::TouchScanEvent::iterator::operator !=	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline bool operator!=(const iterator& that) { return itr_ != that.itr_; }$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(const iterator& that)
boost::polygon::touch_90_operation::TouchScanEvent::iterator::operator *	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline std::pair<Interval, std::set<int> >& operator*() {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:()
boost::polygon::touch_90_operation::TouchScanEvent::iterator::operator ++	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline const iterator operator++(int){$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(int)
boost::polygon::touch_90_operation::TouchScanEvent::iterator::operator ++	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline iterator& operator++() {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:()
boost::polygon::touch_90_operation::TouchScanEvent::iterator::operator =	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline iterator& operator=(const iterator& that) {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(const iterator& that)
boost::polygon::touch_90_operation::TouchScanEvent::iterator::operator ==	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline bool operator==(const iterator& that) { return itr_ == that.itr_; }$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(const iterator& that)
boost::polygon::touch_90_operation::TouchScanEvent::operator =	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchScanEvent& operator=(const TouchScanEvent& that){$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(const TouchScanEvent& that)
boost::polygon::touch_90_operation::TouchSetData	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    typedef std::pair<std::map<Unit, TouchScanEvent>, std::map<Unit, TouchScanEvent> > TouchSetData;$/;"	t	struct:boost::polygon::touch_90_operation	access:public
boost::polygon::touch_90_operation::performTouch	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    static inline void performTouch(graphT& outputContainer, const TouchSetData& data) {$/;"	f	struct:boost::polygon::touch_90_operation	access:public	signature:(graphT& outputContainer, const TouchSetData& data)
boost::polygon::touch_90_operation::populateTouchSetData	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    static inline void populateTouchSetData(TouchSetData& data, const std::vector<std::pair<Unit, std::pair<Unit, int> > >& inputData, int id) {$/;"	f	struct:boost::polygon::touch_90_operation	access:public	signature:(TouchSetData& data, const std::vector<std::pair<Unit, std::pair<Unit, int> > >& inputData, int id)
boost::polygon::touch_90_operation::populateTouchSetData	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    static inline void populateTouchSetData(TouchSetData& data, iT beginData, iT endData, int id) {$/;"	f	struct:boost::polygon::touch_90_operation	access:public	signature:(TouchSetData& data, iT beginData, iT endData, int id)
boost::polygon::touch_90_operation::processEvent	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    static inline void processEvent(graphT& outputContainer, TouchOp& op, const TouchScanEvent& data, bool leadingEdge) {$/;"	f	struct:boost::polygon::touch_90_operation	access:public	signature:(graphT& outputContainer, TouchOp& op, const TouchScanEvent& data, bool leadingEdge)
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, coordinate_concept> { typedef coordinate_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, interval_concept> { typedef interval_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, point_concept> { typedef point_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_set_concept> { typedef polygon_45_set_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_set_concept> { typedef polygon_90_set_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_set_concept> { typedef polygon_set_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, rectangle_concept> { typedef rectangle_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, segment_concept> { typedef segment_traits<T> type; };$/;"	s	namespace:boost::polygon
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, coordinate_concept> { typedef coordinate_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, interval_concept> { typedef interval_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, point_concept> { typedef point_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_set_concept> { typedef polygon_45_set_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_set_concept> { typedef polygon_90_set_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_set_concept> { typedef polygon_set_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, rectangle_concept> { typedef rectangle_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::traits_by_concept::type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, segment_concept> { typedef segment_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
boost::polygon::transform	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type& transform(PointType& point, const TransformType& transform) {$/;"	f	namespace:boost::polygon	signature:(PointType& point, const TransformType& transform)
boost::polygon::transform	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  transform(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, const transformation_type& transformation)
boost::polygon::transform	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  transform(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, const transformation_type& transformation)
boost::polygon::transform	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  transform(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, const transformation_type& transformation)
boost::polygon::transform	/usr/include/boost/polygon/polygon_traits.hpp	/^  transform(T& polygon, const transform_type& tr) {$/;"	f	namespace:boost::polygon	signature:(T& polygon, const transform_type& tr)
boost::polygon::transform	/usr/include/boost/polygon/polygon_traits.hpp	/^  transform(polygon_type& polygon, const transform_type& tr) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, const transform_type& tr)
boost::polygon::transform	/usr/include/boost/polygon/rectangle_concept.hpp	/^  transform(rectangle_type& rectangle, const transformation_type& transformation) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const transformation_type& transformation)
boost::polygon::transform	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& transform(Segment& segment, const Transform& tr) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Transform& tr)
boost::polygon::transformation	/usr/include/boost/polygon/transform.hpp	/^class transformation {$/;"	c	namespace:boost::polygon
boost::polygon::transformation::atr_	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation atr_;$/;"	m	class:boost::polygon::transformation	access:private
boost::polygon::transformation::get_axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation get_axis_transformation() const {$/;"	f	class:boost::polygon::transformation	access:public	signature:() const
boost::polygon::transformation::get_directions	/usr/include/boost/polygon/transform.hpp	/^  void get_directions(direction_2d& horizontal_dir,$/;"	f	class:boost::polygon::transformation	access:public	signature:(direction_2d& horizontal_dir, direction_2d& vertical_dir) const
boost::polygon::transformation::get_translation	/usr/include/boost/polygon/transform.hpp	/^  void get_translation(point_type& p) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(point_type& p) const
boost::polygon::transformation::inverse	/usr/include/boost/polygon/transform.hpp	/^  transformation inverse() const {$/;"	f	class:boost::polygon::transformation	access:public	signature:() const
boost::polygon::transformation::invert	/usr/include/boost/polygon/transform.hpp	/^  transformation& invert() {$/;"	f	class:boost::polygon::transformation	access:public	signature:()
boost::polygon::transformation::operator !=	/usr/include/boost/polygon/transform.hpp	/^  bool operator!=(const transformation& tr) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr) const
boost::polygon::transformation::operator +	/usr/include/boost/polygon/transform.hpp	/^  transformation operator+(const transformation& tr) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr) const
boost::polygon::transformation::operator +=	/usr/include/boost/polygon/transform.hpp	/^  const transformation& operator+=(const transformation& tr) {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr)
boost::polygon::transformation::operator <	/usr/include/boost/polygon/transform.hpp	/^  bool operator<(const transformation& tr) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr) const
boost::polygon::transformation::operator ==	/usr/include/boost/polygon/transform.hpp	/^  bool operator==(const transformation& tr) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr) const
boost::polygon::transformation::p_	/usr/include/boost/polygon/transform.hpp	/^  point_data<coordinate_type> p_;$/;"	m	class:boost::polygon::transformation	access:private
boost::polygon::transformation::set_axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  void set_axis_transformation(const axis_transformation& atr) {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const axis_transformation& atr)
boost::polygon::transformation::set_translation	/usr/include/boost/polygon/transform.hpp	/^  void set_translation(const point_type& p) {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const point_type& p)
boost::polygon::transformation::transform	/usr/include/boost/polygon/transform.hpp	/^  void transform(coordinate_type& x, coordinate_type& y) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(coordinate_type& x, coordinate_type& y) const
boost::polygon::transformation::transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit transformation(axis_transformation atr) : atr_(atr), p_(0, 0) {}$/;"	f	class:boost::polygon::transformation	access:public	signature:(axis_transformation atr)
boost::polygon::transformation::transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit transformation(axis_transformation::ATR atr) : atr_(atr), p_(0, 0) {}$/;"	f	class:boost::polygon::transformation	access:public	signature:(axis_transformation::ATR atr)
boost::polygon::transformation::transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit transformation(const point_type& p) : atr_(), p_(0, 0) {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const point_type& p)
boost::polygon::transformation::transformation	/usr/include/boost/polygon/transform.hpp	/^  transformation() : atr_(), p_(0, 0) {}$/;"	f	class:boost::polygon::transformation	access:public	signature:()
boost::polygon::transformation::transformation	/usr/include/boost/polygon/transform.hpp	/^  transformation(axis_transformation atr,$/;"	f	class:boost::polygon::transformation	access:public	signature:(axis_transformation atr, const point_type& p)
boost::polygon::transformation::transformation	/usr/include/boost/polygon/transform.hpp	/^  transformation(axis_transformation atr,$/;"	f	class:boost::polygon::transformation	access:public	signature:(axis_transformation atr, const point_type& referencePt, const point_type& destinationPt)
boost::polygon::transformation::transformation	/usr/include/boost/polygon/transform.hpp	/^  transformation(const transformation& tr) : atr_(tr.atr_), p_(tr.p_) {}$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr)
boost::polygon::trapezoid_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  class trapezoid_arbitrary_formation : public polygon_arbitrary_formation<Unit> {$/;"	c	namespace:boost::polygon	inherits:polygon_arbitrary_formation
boost::polygon::trapezoid_arbitrary_formation::Point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::Point Point;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::active_tail_arbitrary active_tail_arbitrary;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::const_iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_data::const_iterator const_iterator;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::getVerticalPair_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline void getVerticalPair_(std::pair<active_tail_arbitrary*,$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:private	signature:(std::pair<active_tail_arbitrary*, active_tail_arbitrary*>& verticalPair, iterator previter)
boost::polygon::trapezoid_arbitrary_formation::half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::vector<std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*> > incoming_count;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_data::iterator iterator;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::less_half_edge_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::less_half_edge_count less_half_edge_count;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::less_incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::less_incoming_count less_incoming_count;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::less_vertex_half_edge less_vertex_half_edge;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline trapezoid_arbitrary_formation& operator=(const trapezoid_arbitrary_formation& that) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(const trapezoid_arbitrary_formation& that)
boost::polygon::trapezoid_arbitrary_formation::poly_line_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::poly_line_arbitrary poly_line_arbitrary;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::print	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void print(const scanline_data& data) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:private	signature:(const scanline_data& data)
boost::polygon::trapezoid_arbitrary_formation::print	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void print(const vertex_arbitrary_count& count) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:private	signature:(const vertex_arbitrary_count& count)
boost::polygon::trapezoid_arbitrary_formation::processEvent_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iT processEvent_(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:private	signature:(cT& output, iT inputBegin, iT inputEnd)
boost::polygon::trapezoid_arbitrary_formation::processPoint_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    processPoint_(cT& output, cT2& elements,$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:private	signature:(cT& output, cT2& elements, std::pair<active_tail_arbitrary*, active_tail_arbitrary*>& verticalPair, iterator previter, Point point, incoming_count& counts_from_scanline, vertex_arbitrary_count& incoming_count)
boost::polygon::trapezoid_arbitrary_formation::scan	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    void scan(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(cT& output, iT inputBegin, iT inputEnd)
boost::polygon::trapezoid_arbitrary_formation::scanline_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::map<vertex_half_edge, active_tail_arbitrary*, less_vertex_half_edge> scanline_data;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::testTrapezoidArbitraryFormationP1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testTrapezoidArbitraryFormationP1(stream_type& stdcout) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::trapezoid_arbitrary_formation::testTrapezoidArbitraryFormationP2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testTrapezoidArbitraryFormationP2(stream_type& stdcout) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::trapezoid_arbitrary_formation::testTrapezoidArbitraryFormationPolys	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testTrapezoidArbitraryFormationPolys(stream_type& stdcout) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::trapezoid_arbitrary_formation::testTrapezoidArbitraryFormationRect	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testTrapezoidArbitraryFormationRect(stream_type& stdcout) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::trapezoid_arbitrary_formation::testTrapezoidArbitraryFormationSelfTouch1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testTrapezoidArbitraryFormationSelfTouch1(stream_type& stdcout) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(stream_type& stdcout)
boost::polygon::trapezoid_arbitrary_formation::trapezoid_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline trapezoid_arbitrary_formation() : polygon_arbitrary_formation<Unit>() {}$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:()
boost::polygon::trapezoid_arbitrary_formation::trapezoid_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline trapezoid_arbitrary_formation(const trapezoid_arbitrary_formation& that) : polygon_arbitrary_formation<Unit>(that) {}$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(const trapezoid_arbitrary_formation& that)
boost::polygon::trapezoid_arbitrary_formation::vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::vertex_arbitrary_compact vertex_arbitrary_compact;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::vertex_arbitrary_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::vector<std::pair<Point, int> > vertex_arbitrary_count;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::trapezoid_arbitrary_formation::vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::vertex_half_edge vertex_half_edge;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
boost::polygon::ul	/usr/include/boost/polygon/rectangle_concept.hpp	/^  ul(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boost::polygon::undefined_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct undefined_concept {};$/;"	s	namespace:boost::polygon
boost::polygon::unknown_winding	/usr/include/boost/polygon/isotropy.hpp	/^    unknown_winding = 2$/;"	e	enum:boost::polygon::winding_direction
boost::polygon::ur	/usr/include/boost/polygon/rectangle_concept.hpp	/^  ur(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boost::polygon::vertical	/usr/include/boost/polygon/rectangle_concept.hpp	/^  vertical(T& rectangle, const T2& interval) {$/;"	f	namespace:boost::polygon	signature:(T& rectangle, const T2& interval)
boost::polygon::vertical	/usr/include/boost/polygon/rectangle_concept.hpp	/^  vertical(const T& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const T& rectangle)
boost::polygon::view_as	/usr/include/boost/polygon/isotropy.hpp	/^  view_of<T1, T2> view_as(const T2& obj) { return view_of<T1, T2>(obj); }$/;"	f	namespace:boost::polygon	signature:(const T2& obj)
boost::polygon::view_of	/usr/include/boost/polygon/isotropy.hpp	/^  struct view_of {};$/;"	s	namespace:boost::polygon
boost::polygon::view_of	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct view_of<polygon_90_set_concept, T> {$/;"	s	namespace:boost::polygon
boost::polygon::view_of	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct view_of<polygon_45_set_concept, T> {$/;"	s	namespace:boost::polygon
boost::polygon::view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<polygon_45_concept, T> {$/;"	s	namespace:boost::polygon
boost::polygon::view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<polygon_45_with_holes_concept, T> {$/;"	s	namespace:boost::polygon
boost::polygon::view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<polygon_90_concept, T> {$/;"	s	namespace:boost::polygon
boost::polygon::view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<polygon_90_with_holes_concept, T> {$/;"	s	namespace:boost::polygon
boost::polygon::view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<polygon_concept, T> {$/;"	s	namespace:boost::polygon
boost::polygon::view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<rectangle_concept, T> {$/;"	s	namespace:boost::polygon
boost::polygon::view_of::begin	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline iterator_type begin() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::begin	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline iterator_type begin() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::begin	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline iterator_type begin() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::begin_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline compact_iterator_type begin_compact() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::begin_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline iterator_holes_type begin_holes() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::clean	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline bool clean() const { return false; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::clean	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline bool clean() const { return false; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::compact_iterator_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef iterator_points_to_compact<iterator_type, point_type> compact_iterator_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::coordinate_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename get_coordinate_type<T, typename geometry_concept<T>::type >::type coordinate_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::coordinate_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename get_coordinate_type<T, typename geometry_concept<T>::type >::type coordinate_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::coordinate_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename polygon_traits<T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::end	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline iterator_type end() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::end	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline iterator_type end() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::end	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline iterator_type end() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::end_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline compact_iterator_type end_compact() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::end_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline iterator_holes_type end_holes() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::get	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline T& get() { return *tp; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:()
boost::polygon::view_of::get	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline T& get() { return *tp; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:()
boost::polygon::view_of::get	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline interval_type get(orientation_2d orient) const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(orientation_2d orient) const
boost::polygon::view_of::hole_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef view_of<polygon_45_concept, typename polygon_with_holes_traits<T>::hole_type> hole_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::hole_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef view_of<polygon_90_concept, typename polygon_with_holes_traits<T>::hole_type> hole_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::interval_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef interval_data<coordinate_type> interval_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::iterator_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    struct iterator_holes_type {$/;"	s	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::iterator_holes_type::difference_type	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
boost::polygon::view_of::iterator_holes_type::iht	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef typename polygon_with_holes_traits<T>::iterator_holes_type iht;$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
boost::polygon::view_of::iterator_holes_type::internal_itr	/usr/include/boost/polygon/polygon_traits.hpp	/^      iht internal_itr;$/;"	m	struct:boost::polygon::view_of::iterator_holes_type	access:public
boost::polygon::view_of::iterator_holes_type::iterator_category	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef std::forward_iterator_tag iterator_category;$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
boost::polygon::view_of::iterator_holes_type::iterator_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^      iterator_holes_type() : internal_itr() {}$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:()
boost::polygon::view_of::iterator_holes_type::iterator_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^      iterator_holes_type(iht iht_in) : internal_itr(iht_in) {}$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:(iht iht_in)
boost::polygon::view_of::iterator_holes_type::operator !=	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline bool operator!=(const iterator_holes_type& that) const {$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:(const iterator_holes_type& that) const
boost::polygon::view_of::iterator_holes_type::operator *	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline value_type operator*() const {$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:() const
boost::polygon::view_of::iterator_holes_type::operator ++	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline const iterator_holes_type operator++(int) {$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:(int)
boost::polygon::view_of::iterator_holes_type::operator ++	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline iterator_holes_type& operator++() {$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:()
boost::polygon::view_of::iterator_holes_type::operator ==	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline bool operator==(const iterator_holes_type& that) const {$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:(const iterator_holes_type& that) const
boost::polygon::view_of::iterator_holes_type::pointer	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef const hole_type* pointer; \/\/immutable$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
boost::polygon::view_of::iterator_holes_type::reference	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef const hole_type& reference; \/\/immutable$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
boost::polygon::view_of::iterator_holes_type::value_type	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef hole_type value_type;$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
boost::polygon::view_of::iterator_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename std::vector<polygon_90_with_holes_data<coordinate_type> >::const_iterator iterator_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::iterator_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename std::vector<polygon_45_with_holes_data<coordinate_type> >::const_iterator iterator_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::iterator_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename polygon_traits<T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::operator_arg_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef view_of operator_arg_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::operator_arg_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef view_of operator_arg_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::orient	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline orientation_2d orient() const { return HORIZONTAL; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::orient	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline orientation_2d orient() const { return HORIZONTAL; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::point_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename polygon_traits<T>::point_type point_type;$/;"	t	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::polys	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    std::vector<polygon_90_with_holes_data<coordinate_type> > polys;$/;"	m	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::polys	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    std::vector<polygon_45_with_holes_data<coordinate_type> > polys;$/;"	m	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::rect	/usr/include/boost/polygon/polygon_traits.hpp	/^    rectangle_data<coordinate_type> rect;$/;"	m	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::size	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline std::size_t size() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::size_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline std::size_t size_holes() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::sorted	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline bool sorted() const { return false; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::sorted	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline bool sorted() const { return false; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::view_of::t	/usr/include/boost/polygon/polygon_traits.hpp	/^    const T* t;$/;"	m	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::tp	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    T* tp;$/;"	m	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::tp	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    T* tp;$/;"	m	struct:boost::polygon::view_of	access:public
boost::polygon::view_of::view_of	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    view_of(T& obj) : tp(&obj), polys() {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(T& obj)
boost::polygon::view_of::view_of	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    view_of(const T& obj) : tp(), polys() {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(const T& obj)
boost::polygon::view_of::view_of	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    view_of(T& obj) : tp(&obj), polys() {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(T& obj)
boost::polygon::view_of::view_of	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    view_of(const T& obj) : tp(), polys() {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(const T& obj)
boost::polygon::view_of::view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^    view_of(const T& obj) : rect() {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(const T& obj)
boost::polygon::view_of::view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^    view_of(const T& obj) : t(&obj) {}$/;"	f	struct:boost::polygon::view_of	access:public	signature:(const T& obj)
boost::polygon::view_of::winding	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline winding_direction winding() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
boost::polygon::voronoi_builder	/usr/include/boost/polygon/voronoi_builder.hpp	/^class voronoi_builder {$/;"	c	namespace:boost::polygon
boost::polygon::voronoi_builder::__anon4::operator ()	/usr/include/boost/polygon/voronoi_builder.hpp	/^    bool operator()(const event_type& lhs, const event_type& rhs) const {$/;"	f	struct:boost::polygon::voronoi_builder::__anon4	access:public	signature:(const event_type& lhs, const event_type& rhs) const
boost::polygon::voronoi_builder::__anon4::predicate	/usr/include/boost/polygon/voronoi_builder.hpp	/^    event_comparison_predicate predicate;$/;"	m	struct:boost::polygon::voronoi_builder::__anon4	access:public
boost::polygon::voronoi_builder::activate_circle_event	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void activate_circle_event(const site_event_type& site1,$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(const site_event_type& site1, const site_event_type& site2, const site_event_type& site3, beach_line_iterator bisector_node)
boost::polygon::voronoi_builder::beach_line_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  beach_line_type beach_line_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::beach_line_iterator	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef typename beach_line_type::iterator beach_line_iterator;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::beach_line_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef std::map< key_type, value_type, node_comparer_type > beach_line_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::circle_event_queue_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^    circle_event_queue_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::circle_event_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef detail::circle_event<fpt_type> circle_event_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::circle_events_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  circle_event_queue_type circle_events_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::circle_formation_predicate_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  circle_formation_predicate_type circle_formation_predicate_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::circle_formation_predicate_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^    circle_formation_predicate_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::clear	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void clear() {$/;"	f	class:boost::polygon::voronoi_builder	access:public	signature:()
boost::polygon::voronoi_builder::construct	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void construct(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:public	signature:(OUTPUT* output)
boost::polygon::voronoi_builder::deactivate_circle_event	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void deactivate_circle_event(value_type* value) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(value_type* value)
boost::polygon::voronoi_builder::edge_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef void edge_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::end_point_comparison	/usr/include/boost/polygon/voronoi_builder.hpp	/^  struct end_point_comparison {$/;"	s	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::end_point_comparison::operator ()	/usr/include/boost/polygon/voronoi_builder.hpp	/^    bool operator() (const end_point_type& end1,$/;"	f	struct:boost::polygon::voronoi_builder::end_point_comparison	access:public	signature:(const end_point_type& end1, const end_point_type& end2) const
boost::polygon::voronoi_builder::end_point_comparison::point_comparison	/usr/include/boost/polygon/voronoi_builder.hpp	/^    point_comparison_predicate point_comparison;$/;"	m	struct:boost::polygon::voronoi_builder::end_point_comparison	access:public
boost::polygon::voronoi_builder::end_point_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef std::pair<point_type, beach_line_iterator> end_point_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::end_points_	/usr/include/boost/polygon/voronoi_builder.hpp	/^                       end_point_comparison > end_points_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::event_comparison_predicate	/usr/include/boost/polygon/voronoi_builder.hpp	/^    event_comparison_predicate;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::event_comparison_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  } event_comparison_type;$/;"	t	class:boost::polygon::voronoi_builder	typeref:struct:boost::polygon::voronoi_builder::__anon4	access:private
boost::polygon::voronoi_builder::event_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef std::pair<circle_event_type, beach_line_iterator> event_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::fpt_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef typename CTT::fpt_type fpt_type;$/;"	t	class:boost::polygon::voronoi_builder	access:public
boost::polygon::voronoi_builder::index_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  std::size_t index_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::init_beach_line	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void init_beach_line(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(OUTPUT* output)
boost::polygon::voronoi_builder::init_beach_line_collinear_sites	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void init_beach_line_collinear_sites(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(OUTPUT* output)
boost::polygon::voronoi_builder::init_beach_line_default	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void init_beach_line_default(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(OUTPUT* output)
boost::polygon::voronoi_builder::init_sites_queue	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void init_sites_queue() {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:()
boost::polygon::voronoi_builder::insert_new_arc	/usr/include/boost/polygon/voronoi_builder.hpp	/^  beach_line_iterator insert_new_arc($/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:( const site_event_type& site_arc1, const site_event_type &site_arc2, const site_event_type& site_event, beach_line_iterator position, OUTPUT* output)
boost::polygon::voronoi_builder::insert_point	/usr/include/boost/polygon/voronoi_builder.hpp	/^  std::size_t insert_point(const int_type& x, const int_type& y) {$/;"	f	class:boost::polygon::voronoi_builder	access:public	signature:(const int_type& x, const int_type& y)
boost::polygon::voronoi_builder::insert_segment	/usr/include/boost/polygon/voronoi_builder.hpp	/^  std::size_t insert_segment($/;"	f	class:boost::polygon::voronoi_builder	access:public	signature:( const int_type& x1, const int_type& y1, const int_type& x2, const int_type& y2)
boost::polygon::voronoi_builder::int_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef typename CTT::int_type int_type;$/;"	t	class:boost::polygon::voronoi_builder	access:public
boost::polygon::voronoi_builder::key_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef detail::beach_line_node_key<site_event_type> key_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::node_comparer_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^    node_comparer_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::operator =	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void operator=(const voronoi_builder&);$/;"	p	class:boost::polygon::voronoi_builder	access:private	signature:(const voronoi_builder&)
boost::polygon::voronoi_builder::point_comparison_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  point_comparison_predicate point_comparison_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::point_comparison_predicate	/usr/include/boost/polygon/voronoi_builder.hpp	/^    point_comparison_predicate;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::point_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef detail::point_2d<int_type> point_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::process_circle_event	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void process_circle_event(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(OUTPUT* output)
boost::polygon::voronoi_builder::process_site_event	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void process_site_event(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(OUTPUT* output)
boost::polygon::voronoi_builder::site_event_iterator_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  site_event_iterator_type site_event_iterator_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::site_event_iterator_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^    site_event_iterator_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::site_event_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef detail::site_event<int_type> site_event_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::site_events_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  std::vector<site_event_type> site_events_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::value_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^    value_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
boost::polygon::voronoi_builder::voronoi_builder	/usr/include/boost/polygon/voronoi_builder.hpp	/^  voronoi_builder() : index_(0) {}$/;"	f	class:boost::polygon::voronoi_builder	access:public	signature:()
boost::polygon::voronoi_builder::voronoi_builder	/usr/include/boost/polygon/voronoi_builder.hpp	/^  voronoi_builder(const voronoi_builder&);$/;"	p	class:boost::polygon::voronoi_builder	access:private	signature:(const voronoi_builder&)
boost::polygon::voronoi_cell	/usr/include/boost/polygon/voronoi_diagram.hpp	/^class voronoi_cell {$/;"	c	namespace:boost::polygon
boost::polygon::voronoi_cell::BITS_MASK	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_MASK = 0x1F$/;"	e	enum:boost::polygon::voronoi_cell::Bits
boost::polygon::voronoi_cell::BITS_SHIFT	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_SHIFT = 0x5,$/;"	e	enum:boost::polygon::voronoi_cell::Bits
boost::polygon::voronoi_cell::Bits	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  enum Bits {$/;"	g	class:boost::polygon::voronoi_cell	access:private
boost::polygon::voronoi_cell::color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  color_type color() const { return color_ >> BITS_SHIFT; }$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
boost::polygon::voronoi_cell::color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void color(color_type color) const {$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:(color_type color) const
boost::polygon::voronoi_cell::color_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  mutable color_type color_;$/;"	m	class:boost::polygon::voronoi_cell	access:private
boost::polygon::voronoi_cell::color_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::size_t color_type;$/;"	t	class:boost::polygon::voronoi_cell	access:public
boost::polygon::voronoi_cell::contains_point	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool contains_point() const {$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
boost::polygon::voronoi_cell::contains_segment	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool contains_segment() const {$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
boost::polygon::voronoi_cell::coordinate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::voronoi_cell	access:public
boost::polygon::voronoi_cell::incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* incident_edge() const { return incident_edge_; }$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
boost::polygon::voronoi_cell::incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void incident_edge(voronoi_edge_type* e) { incident_edge_ = e; }$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:(voronoi_edge_type* e)
boost::polygon::voronoi_cell::incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* incident_edge() { return incident_edge_; }$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:()
boost::polygon::voronoi_cell::incident_edge_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* incident_edge_;$/;"	m	class:boost::polygon::voronoi_cell	access:private
boost::polygon::voronoi_cell::is_degenerate	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_degenerate() const { return incident_edge_ == NULL; }$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
boost::polygon::voronoi_cell::source_category	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  source_category_type source_category() const {$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
boost::polygon::voronoi_cell::source_category_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef SourceCategory source_category_type;$/;"	t	class:boost::polygon::voronoi_cell	access:public
boost::polygon::voronoi_cell::source_index	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  source_index_type source_index() const {$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
boost::polygon::voronoi_cell::source_index_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  source_index_type source_index_;$/;"	m	class:boost::polygon::voronoi_cell	access:private
boost::polygon::voronoi_cell::source_index_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::size_t source_index_type;$/;"	t	class:boost::polygon::voronoi_cell	access:public
boost::polygon::voronoi_cell::voronoi_cell	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_cell(source_index_type source_index,$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:(source_index_type source_index, source_category_type source_category)
boost::polygon::voronoi_cell::voronoi_edge_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_edge<coordinate_type> voronoi_edge_type;$/;"	t	class:boost::polygon::voronoi_cell	access:public
boost::polygon::voronoi_diagram	/usr/include/boost/polygon/voronoi_diagram.hpp	/^class voronoi_diagram {$/;"	c	namespace:boost::polygon
boost::polygon::voronoi_diagram::_build	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void _build() {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:()
boost::polygon::voronoi_diagram::_insert_new_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  std::pair<void*, void*> _insert_new_edge($/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:( const detail::site_event<CT1>& site1, const detail::site_event<CT1>& site3, const detail::circle_event<CT2>& circle, void* data12, void* data23)
boost::polygon::voronoi_diagram::_insert_new_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  std::pair<void*, void*> _insert_new_edge($/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:( const detail::site_event<CT>& site1, const detail::site_event<CT>& site2)
boost::polygon::voronoi_diagram::_process_single_site	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void _process_single_site(const detail::site_event<CT>& site) {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:(const detail::site_event<CT>& site)
boost::polygon::voronoi_diagram::_reserve	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void _reserve(int num_sites) {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:(int num_sites)
boost::polygon::voronoi_diagram::cell_container_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::vector<cell_type> cell_container_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
boost::polygon::voronoi_diagram::cell_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename cell_container_type::iterator cell_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:private
boost::polygon::voronoi_diagram::cell_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename TRAITS::cell_type cell_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
boost::polygon::voronoi_diagram::cells	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const cell_container_type& cells() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
boost::polygon::voronoi_diagram::cells_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  cell_container_type cells_;$/;"	m	class:boost::polygon::voronoi_diagram	access:private
boost::polygon::voronoi_diagram::clear	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void clear() {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:()
boost::polygon::voronoi_diagram::const_cell_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename cell_container_type::const_iterator const_cell_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
boost::polygon::voronoi_diagram::const_edge_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename edge_container_type::const_iterator const_edge_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
boost::polygon::voronoi_diagram::const_vertex_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename vertex_container_type::const_iterator const_vertex_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
boost::polygon::voronoi_diagram::coordinate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename TRAITS::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
boost::polygon::voronoi_diagram::edge_container_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::vector<edge_type> edge_container_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
boost::polygon::voronoi_diagram::edge_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename edge_container_type::iterator edge_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:private
boost::polygon::voronoi_diagram::edge_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename TRAITS::edge_type edge_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
boost::polygon::voronoi_diagram::edges	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const edge_container_type& edges() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
boost::polygon::voronoi_diagram::edges_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  edge_container_type edges_;$/;"	m	class:boost::polygon::voronoi_diagram	access:private
boost::polygon::voronoi_diagram::is_linear_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_linear_edge(const SEvent& site1, const SEvent& site2) const {$/;"	f	class:boost::polygon::voronoi_diagram	access:private	signature:(const SEvent& site1, const SEvent& site2) const
boost::polygon::voronoi_diagram::is_primary_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_primary_edge(const SEvent& site1, const SEvent& site2) const {$/;"	f	class:boost::polygon::voronoi_diagram	access:private	signature:(const SEvent& site1, const SEvent& site2) const
boost::polygon::voronoi_diagram::num_cells	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  std::size_t num_cells() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
boost::polygon::voronoi_diagram::num_edges	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  std::size_t num_edges() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
boost::polygon::voronoi_diagram::num_vertices	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  std::size_t num_vertices() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
boost::polygon::voronoi_diagram::operator =	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void operator=(const voronoi_diagram&);$/;"	p	class:boost::polygon::voronoi_diagram	access:private	signature:(const voronoi_diagram&)
boost::polygon::voronoi_diagram::remove_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void remove_edge(edge_type* edge) {$/;"	f	class:boost::polygon::voronoi_diagram	access:private	signature:(edge_type* edge)
boost::polygon::voronoi_diagram::vertex_container_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::vector<vertex_type> vertex_container_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
boost::polygon::voronoi_diagram::vertex_equality_predicate_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  vertex_equality_predicate_type vertex_equality_predicate_;$/;"	m	class:boost::polygon::voronoi_diagram	access:private
boost::polygon::voronoi_diagram::vertex_equality_predicate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    vertex_equality_predicate_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:private
boost::polygon::voronoi_diagram::vertex_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename vertex_container_type::iterator vertex_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:private
boost::polygon::voronoi_diagram::vertex_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename TRAITS::vertex_type vertex_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
boost::polygon::voronoi_diagram::vertices	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const vertex_container_type& vertices() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
boost::polygon::voronoi_diagram::vertices_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  vertex_container_type vertices_;$/;"	m	class:boost::polygon::voronoi_diagram	access:private
boost::polygon::voronoi_diagram::voronoi_diagram	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_diagram() {}$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:()
boost::polygon::voronoi_diagram::voronoi_diagram	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_diagram(const voronoi_diagram&);$/;"	p	class:boost::polygon::voronoi_diagram	access:private	signature:(const voronoi_diagram&)
boost::polygon::voronoi_diagram_traits	/usr/include/boost/polygon/voronoi_diagram.hpp	/^struct voronoi_diagram_traits {$/;"	s	namespace:boost::polygon
boost::polygon::voronoi_diagram_traits::__anon5::ULPS	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    enum { ULPS = 128 };$/;"	e	enum:boost::polygon::voronoi_diagram_traits::__anon5::__anon6
boost::polygon::voronoi_diagram_traits::__anon5::operator ()	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    bool operator()(const vertex_type& v1, const vertex_type& v2) const {$/;"	f	class:boost::polygon::voronoi_diagram_traits::__anon5	access:public	signature:(const vertex_type& v1, const vertex_type& v2) const
boost::polygon::voronoi_diagram_traits::__anon5::ulp_cmp	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    typename detail::ulp_comparison<T> ulp_cmp;$/;"	m	class:boost::polygon::voronoi_diagram_traits::__anon5	access:private
boost::polygon::voronoi_diagram_traits::cell_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_cell<coordinate_type> cell_type;$/;"	t	struct:boost::polygon::voronoi_diagram_traits	access:public
boost::polygon::voronoi_diagram_traits::coordinate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef T coordinate_type;$/;"	t	struct:boost::polygon::voronoi_diagram_traits	access:public
boost::polygon::voronoi_diagram_traits::edge_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_edge<coordinate_type> edge_type;$/;"	t	struct:boost::polygon::voronoi_diagram_traits	access:public
boost::polygon::voronoi_diagram_traits::vertex_equality_predicate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  } vertex_equality_predicate_type;$/;"	t	struct:boost::polygon::voronoi_diagram_traits	typeref:class:boost::polygon::voronoi_diagram_traits::__anon5	access:public
boost::polygon::voronoi_diagram_traits::vertex_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_vertex<coordinate_type> vertex_type;$/;"	t	struct:boost::polygon::voronoi_diagram_traits	access:public
boost::polygon::voronoi_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^class voronoi_edge {$/;"	c	namespace:boost::polygon
boost::polygon::voronoi_edge::BITS_MASK	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_MASK = 0x1F$/;"	e	enum:boost::polygon::voronoi_edge::Bits
boost::polygon::voronoi_edge::BITS_SHIFT	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_SHIFT = 0x5,$/;"	e	enum:boost::polygon::voronoi_edge::Bits
boost::polygon::voronoi_edge::BIT_IS_LINEAR	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BIT_IS_LINEAR = 0x1,  \/\/ linear is opposite to curved$/;"	e	enum:boost::polygon::voronoi_edge::Bits
boost::polygon::voronoi_edge::BIT_IS_PRIMARY	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BIT_IS_PRIMARY = 0x2,  \/\/ primary is opposite to secondary$/;"	e	enum:boost::polygon::voronoi_edge::Bits
boost::polygon::voronoi_edge::Bits	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  enum Bits {$/;"	g	class:boost::polygon::voronoi_edge	access:private
boost::polygon::voronoi_edge::cell	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_cell_type* cell() const { return cell_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::cell	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void cell(voronoi_cell_type* c) { cell_ = c; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(voronoi_cell_type* c)
boost::polygon::voronoi_edge::cell	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_cell_type* cell() { return cell_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
boost::polygon::voronoi_edge::cell_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_cell_type* cell_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
boost::polygon::voronoi_edge::color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  color_type color() const { return color_ >> BITS_SHIFT; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void color(color_type color) const {$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(color_type color) const
boost::polygon::voronoi_edge::color_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  mutable color_type color_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
boost::polygon::voronoi_edge::color_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::size_t color_type;$/;"	t	class:boost::polygon::voronoi_edge	access:public
boost::polygon::voronoi_edge::coordinate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::voronoi_edge	access:public
boost::polygon::voronoi_edge::is_curved	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_curved() const {$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::is_finite	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_finite() const { return vertex0() && vertex1(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::is_infinite	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_infinite() const { return !vertex0() || !vertex1(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::is_linear	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_linear() const {$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::is_primary	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_primary() const {$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::is_secondary	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_secondary() const {$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::next	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* next() const { return next_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::next	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void next(voronoi_edge_type* e) { next_ = e; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(voronoi_edge_type* e)
boost::polygon::voronoi_edge::next	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* next() { return next_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
boost::polygon::voronoi_edge::next_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* next_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
boost::polygon::voronoi_edge::prev	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* prev() const { return prev_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::prev	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void prev(voronoi_edge_type* e) { prev_ = e; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(voronoi_edge_type* e)
boost::polygon::voronoi_edge::prev	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* prev() { return prev_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
boost::polygon::voronoi_edge::prev_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* prev_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
boost::polygon::voronoi_edge::rot_next	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* rot_next() const { return prev_->twin(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::rot_next	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* rot_next() { return prev_->twin(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
boost::polygon::voronoi_edge::rot_prev	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* rot_prev() const { return twin_->next(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::rot_prev	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* rot_prev() { return twin_->next(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
boost::polygon::voronoi_edge::twin	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* twin() const { return twin_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::twin	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void twin(voronoi_edge_type* e) { twin_ = e; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(voronoi_edge_type* e)
boost::polygon::voronoi_edge::twin	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* twin() { return twin_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
boost::polygon::voronoi_edge::twin_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* twin_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
boost::polygon::voronoi_edge::vertex0	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_vertex_type* vertex0() const { return vertex_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::vertex0	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void vertex0(voronoi_vertex_type* v) { vertex_ = v; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(voronoi_vertex_type* v)
boost::polygon::voronoi_edge::vertex0	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_vertex_type* vertex0() { return vertex_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
boost::polygon::voronoi_edge::vertex1	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_vertex_type* vertex1() const { return twin_->vertex0(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
boost::polygon::voronoi_edge::vertex1	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_vertex_type* vertex1() { return twin_->vertex0(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
boost::polygon::voronoi_edge::vertex_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_vertex_type* vertex_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
boost::polygon::voronoi_edge::voronoi_cell_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_cell<coordinate_type> voronoi_cell_type;$/;"	t	class:boost::polygon::voronoi_edge	access:public
boost::polygon::voronoi_edge::voronoi_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge(bool is_linear, bool is_primary) :$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(bool is_linear, bool is_primary)
boost::polygon::voronoi_edge::voronoi_edge_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_edge<coordinate_type> voronoi_edge_type;$/;"	t	class:boost::polygon::voronoi_edge	access:public
boost::polygon::voronoi_edge::voronoi_vertex_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_vertex<coordinate_type> voronoi_vertex_type;$/;"	t	class:boost::polygon::voronoi_edge	access:public
boost::polygon::voronoi_vertex	/usr/include/boost/polygon/voronoi_diagram.hpp	/^class voronoi_vertex {$/;"	c	namespace:boost::polygon
boost::polygon::voronoi_vertex::BITS_MASK	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_MASK = 0x1F$/;"	e	enum:boost::polygon::voronoi_vertex::Bits
boost::polygon::voronoi_vertex::BITS_SHIFT	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    BITS_SHIFT = 0x5,$/;"	e	enum:boost::polygon::voronoi_vertex::Bits
boost::polygon::voronoi_vertex::Bits	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  enum Bits {$/;"	g	class:boost::polygon::voronoi_vertex	access:private
boost::polygon::voronoi_vertex::color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  color_type color() const { return color_ >> BITS_SHIFT; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:() const
boost::polygon::voronoi_vertex::color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void color(color_type color) const {$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:(color_type color) const
boost::polygon::voronoi_vertex::color_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  mutable color_type color_;$/;"	m	class:boost::polygon::voronoi_vertex	access:private
boost::polygon::voronoi_vertex::color_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::size_t color_type;$/;"	t	class:boost::polygon::voronoi_vertex	access:public
boost::polygon::voronoi_vertex::coordinate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::voronoi_vertex	access:public
boost::polygon::voronoi_vertex::incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* incident_edge() const { return incident_edge_; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:() const
boost::polygon::voronoi_vertex::incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void incident_edge(voronoi_edge_type* e) { incident_edge_ = e; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:(voronoi_edge_type* e)
boost::polygon::voronoi_vertex::incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* incident_edge() { return incident_edge_; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:()
boost::polygon::voronoi_vertex::incident_edge_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* incident_edge_;$/;"	m	class:boost::polygon::voronoi_vertex	access:private
boost::polygon::voronoi_vertex::is_degenerate	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_degenerate() const { return incident_edge_ == NULL; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:() const
boost::polygon::voronoi_vertex::voronoi_edge_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_edge<coordinate_type> voronoi_edge_type;$/;"	t	class:boost::polygon::voronoi_vertex	access:public
boost::polygon::voronoi_vertex::voronoi_vertex	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_vertex(const coordinate_type& x, const coordinate_type& y) :$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:(const coordinate_type& x, const coordinate_type& y)
boost::polygon::voronoi_vertex::x	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const coordinate_type& x() const { return x_; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:() const
boost::polygon::voronoi_vertex::x_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  coordinate_type x_;$/;"	m	class:boost::polygon::voronoi_vertex	access:private
boost::polygon::voronoi_vertex::y	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const coordinate_type& y() const { return y_; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:() const
boost::polygon::voronoi_vertex::y_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  coordinate_type y_;$/;"	m	class:boost::polygon::voronoi_vertex	access:private
boost::polygon::winding	/usr/include/boost/polygon/polygon_traits.hpp	/^  winding(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
boost::polygon::winding_direction	/usr/include/boost/polygon/isotropy.hpp	/^  enum winding_direction {$/;"	g	namespace:boost::polygon
boost::polygon::x	/usr/include/boost/polygon/point_concept.hpp	/^>::type x(const PointType& point) {$/;"	f	namespace:boost::polygon	signature:(const PointType& point)
boost::polygon::x	/usr/include/boost/polygon/point_concept.hpp	/^void>::type x(PointType& point,$/;"	f	namespace:boost::polygon	signature:(PointType& point, typename point_mutable_traits<PointType>::coordinate_type value)
boost::polygon::xh	/usr/include/boost/polygon/rectangle_concept.hpp	/^  xh(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boost::polygon::xh	/usr/include/boost/polygon/rectangle_concept.hpp	/^  xh(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value)
boost::polygon::xl	/usr/include/boost/polygon/rectangle_concept.hpp	/^      xl(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value)
boost::polygon::xl	/usr/include/boost/polygon/rectangle_concept.hpp	/^  xl(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boost::polygon::y	/usr/include/boost/polygon/point_concept.hpp	/^>::type y(const PointType& point) {$/;"	f	namespace:boost::polygon	signature:(const PointType& point)
boost::polygon::y	/usr/include/boost/polygon/point_concept.hpp	/^void>::type y(PointType& point,$/;"	f	namespace:boost::polygon	signature:(PointType& point, typename point_mutable_traits<PointType>::coordinate_type value)
boost::polygon::y_c_edist	/usr/include/boost/polygon/isotropy.hpp	/^  struct y_c_edist : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_abuts1	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_abuts1 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_abuts2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_abuts2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_assign	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_assign : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_bloat	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_bloat : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_bloat2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_bloat2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_center	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_center : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_construct	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_contains	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_contains : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_contains2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_contains2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_convolve	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_convolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_convolve2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_convolve2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_copy_construct	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_copy_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_deconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_deconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_deconvolve2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_deconvolve2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_delta	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_delta : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_e_bintersect	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_e_bintersect : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_e_dist1	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_e_dist1 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_e_dist2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_e_dist2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_e_intersects	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_e_intersects : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_encompass	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_encompass : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_encompass2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_encompass2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_equivalence	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_equivalence : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_flip	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_flip : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_g_intersect	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_g_intersect : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_get	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_get : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_get_half	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_get_half : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_high	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_high : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_high2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_high2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_intersect	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_intersect : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_join_with	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_join_with : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_low	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_low : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_low2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_low2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_move	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_move : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_reconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_reconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_redeconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_redeconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_scale	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_scale : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_scale_down	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_scale_down : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_scale_up	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_scale_up : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_set	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_set : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_shrink	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_shrink : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_i_shrink2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_shrink2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_p_s_move	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct y_p_s_move : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_p_s_move2	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct y_p_s_move2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_p_sx	/usr/include/boost/polygon/point_concept.hpp	/^struct y_p_sx : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_p_sy	/usr/include/boost/polygon/point_concept.hpp	/^struct y_p_sy : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_p_x	/usr/include/boost/polygon/point_concept.hpp	/^struct y_p_x : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_p_y	/usr/include/boost/polygon/point_concept.hpp	/^struct y_p_y : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_assign	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_assign : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_construct	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_convolve	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_convolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_deconvolve	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_deconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_ed1	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_ed1 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_ed2	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_ed2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_eds	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_eds : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_equiv	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_equiv : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_get	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_get : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_man_dist	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_man_dist : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_move	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_move : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_scale	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_scale : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_scale_down	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_scale_down : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_scale_up	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_scale_up : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_set	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_set : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_pt_transform	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_transform : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_area	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_area : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_assign	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_assign : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_b_abuts	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_abuts : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_b_abuts2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_abuts2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_b_abuts3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_abuts3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_b_intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_intersect : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_b_intersect2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_intersect2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_b_intersect3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_intersect3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_bloat	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_bloat : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_bloat2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_bloat2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_bloat3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_bloat3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_cconstruct	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_cconstruct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_center	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_center : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_construct	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_construct2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_construct2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_contains	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_contains : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_contains2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_contains2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_convolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_convolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_convolve2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_convolve2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_deconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_deconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_deconvolve2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_deconvolve2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_delta	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_delta : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_eda	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_eda : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_eda2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_eda2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_edist	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_edist : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_edist2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_edist2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_encompass	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_encompass : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_encompass2	/usr/include/boost/polygon/rectangle_concept.hpp	/^ struct y_r_encompass2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_encompass3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_encompass3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_equiv	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_equiv : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_g_intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_g_intersect : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_get	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_get : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_get_corner	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_get_corner : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_get_half	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_get_half : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_get_interval	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_get_interval : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_go	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_go : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_h	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_h : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_h2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_h2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_half_p	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_half_p : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_intersects	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_intersects : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_join_with	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_join_with : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_ll	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_ll : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_lr	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_lr : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_mdist	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_mdist : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_mdist2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_mdist2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_move	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_move : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_perimeter	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_perimeter : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_reconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_reconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_redeconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_redeconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_scale	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_scale : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_scale_down	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_scale_down : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_scale_up	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_scale_up : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_sed	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_sed : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_sed2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_sed2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_set	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_set : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_set2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_set2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_set3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_set3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_set_points	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_set_points : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_shrink	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_shrink : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_shrink2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_shrink2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_shrink3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_shrink3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_transform	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_transform : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_ul	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_ul : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_ur	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_ur : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_v	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_v : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_v2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_v2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_xh	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_xh : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_xh2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_xh2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_xl	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_xl : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_xl2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_xl2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_yh	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_yh : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_yh2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_yh2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_yl	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_yl : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_r_yl2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_yl2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_abuts1	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_abuts1 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_abuts2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_abuts2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_assign	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_assign : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_center	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_center : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_construct	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_contains	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_contains : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_contains2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_contains2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_convolve	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_convolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_copy_construct	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_copy_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_deconvolve	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_deconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_e_dist	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_e_dist : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_e_dist2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_e_dist2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_e_intersects	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_e_intersects : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_equivalence	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_equivalence : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_get	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_get : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_high	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_high : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_high2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_high2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_length	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_length : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_low	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_low : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_low2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_low2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_move	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_move : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_orientation1	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_orientation1 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_orientation2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_orientation2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_scale	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_scale : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_scale_down	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_scale_down : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_scale_up	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_scale_up : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_set	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_set : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::y_s_transform	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_transform : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
boost::polygon::yh	/usr/include/boost/polygon/rectangle_concept.hpp	/^      yh(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value)
boost::polygon::yh	/usr/include/boost/polygon/rectangle_concept.hpp	/^  yh(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boost::polygon::yl	/usr/include/boost/polygon/rectangle_concept.hpp	/^      yl(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value)
boost::polygon::yl	/usr/include/boost/polygon/rectangle_concept.hpp	/^  yl(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
boundaries_intersect	/usr/include/boost/polygon/interval_concept.hpp	/^>::type boundaries_intersect($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2, bool consider_touch = true)
boundaries_intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  boundaries_intersect(const rectangle_type_1& rectangle, const rectangle_type_2& b,$/;"	f	namespace:boost::polygon	signature:(const rectangle_type_1& rectangle, const rectangle_type_2& b, bool consider_touch = true)
by_value_binary_operator	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct by_value_binary_operator {$/;"	s	namespace:boost::polygon
c_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^                       comparison > c_;$/;"	m	class:boost::polygon::detail::ordered_queue	access:private
c_list_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::list<T> c_list_;$/;"	m	class:boost::polygon::detail::ordered_queue	access:private
capacity	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline std::size_t capacity() const { return data_.capacity(); }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
capacity	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline std::size_t capacity() const { return data_.capacity(); }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
capacity	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline std::size_t capacity() const { return data_.capacity(); }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
ce	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef arbitrary_connectivity_extraction<coordinate_type, int> ce;$/;"	t	class:boost::polygon::connectivity_extraction	access:private
ce_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    ce ce_;$/;"	m	class:boost::polygon::connectivity_extraction	access:private
cell	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_cell_type* cell() const { return cell_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
cell	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void cell(voronoi_cell_type* c) { cell_ = c; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(voronoi_cell_type* c)
cell	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_cell_type* cell() { return cell_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
cell_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_cell_type* cell_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
cell_container_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::vector<cell_type> cell_container_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
cell_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename cell_container_type::iterator cell_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:private
cell_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename TRAITS::cell_type cell_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
cell_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_cell<coordinate_type> cell_type;$/;"	t	struct:boost::polygon::voronoi_diagram_traits	access:public
cells	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const cell_container_type& cells() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
cells_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  cell_container_type cells_;$/;"	m	class:boost::polygon::voronoi_diagram	access:private
center	/usr/include/boost/polygon/interval_concept.hpp	/^>::type center(const IntervalType& interval) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval)
center	/usr/include/boost/polygon/polygon_traits.hpp	/^  center(T1& center_point, const T2& polygon) {$/;"	f	namespace:boost::polygon	signature:(T1& center_point, const T2& polygon)
center	/usr/include/boost/polygon/rectangle_concept.hpp	/^  center(point_type& center_point, const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(point_type& center_point, const rectangle_type& rectangle)
center	/usr/include/boost/polygon/segment_concept.hpp	/^center(const Segment& segment) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment)
center_x_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type center_x_;$/;"	m	class:boost::polygon::detail::circle_event	access:private
center_y_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type center_y_;$/;"	m	class:boost::polygon::detail::circle_event	access:private
characterizeEdge45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline std::pair<int, int> characterizeEdge45(const point_data<Unit>& pt1, const point_data<Unit>& pt2) {$/;"	f	namespace:boost::polygon	signature:(const point_data<Unit>& pt1, const point_data<Unit>& pt2)
check_rectangle_trio	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool check_rectangle_trio(rectangle_data<Unit> rect1, rectangle_data<Unit> rect2, rectangle_data<Unit> rect3, stream_type& stdcout) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(rectangle_data<Unit> rect1, rectangle_data<Unit> rect2, rectangle_data<Unit> rect3, stream_type& stdcout)
children_	/usr/include/boost/polygon/detail/max_cover.hpp	/^      std::vector<Node*> children_;$/;"	m	class:boost::polygon::MaxCover::Node	access:private
chunks	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  const uint32* chunks() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
chunks_	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  uint32 chunks_[N];$/;"	m	class:boost::polygon::detail::extended_int	access:private
circle_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  Circle* circle_event() const {$/;"	f	class:boost::polygon::detail::beach_line_node_data	access:public	signature:() const
circle_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  beach_line_node_data& circle_event(Circle* circle_event) {$/;"	f	class:boost::polygon::detail::beach_line_node_data	access:public	signature:(Circle* circle_event)
circle_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event() : is_active_(true) {}$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:()
circle_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event(coordinate_type c_x,$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:(coordinate_type c_x, coordinate_type c_y, coordinate_type lower_x)
circle_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class circle_event {$/;"	c	namespace:boost::polygon::detail
circle_event_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  Circle* circle_event_;$/;"	m	class:boost::polygon::detail::beach_line_node_data	access:private
circle_event_queue_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^    circle_event_queue_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
circle_event_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef detail::circle_event<fpt_type> circle_event_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
circle_events_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  circle_event_queue_type circle_events_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
circle_existence_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class circle_existence_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
circle_existence_predicate_	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    circle_existence_predicate_type circle_existence_predicate_;$/;"	m	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:private
circle_existence_predicate_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef CEP circle_existence_predicate_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:public
circle_formation_functor_	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    circle_formation_functor_type circle_formation_functor_;$/;"	m	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:private
circle_formation_functor_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef CFF circle_formation_functor_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:public
circle_formation_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class circle_formation_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
circle_formation_predicate_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  circle_formation_predicate_type circle_formation_predicate_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
circle_formation_predicate_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^    circle_formation_predicate_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
circle_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Circle circle_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:public
circle_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Circle circle_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public
circle_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Circle circle_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
circle_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Circle circle_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public
classifyEdge45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline int classifyEdge45(const Point& prevPt, const Point& nextPt) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(const Point& prevPt, const Point& nextPt)
clean	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static inline bool clean(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set);$/;"	p	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
clean	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  clean(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set) {$/;"	f	class:boost::polygon::polygon_45_set_traits	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
clean	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    static inline bool clean(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
clean	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  clean(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_traits	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
clean	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    static inline bool clean(const polygon_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
clean	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  clean(const polygon_set_view<ltype, rtype, op_type>& ) {$/;"	f	class:boost::polygon::polygon_set_traits	signature:(const polygon_set_view<ltype, rtype, op_type>& )
clean	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  inline void polygon_set_data<coordinate_type>::clean() const {$/;"	f	class:boost::polygon::polygon_set_data	signature:() const
clean	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  inline void polygon_set_data<double>::clean() const {$/;"	f	class:boost::polygon::polygon_set_data	signature:() const
clean	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline bool clean() const { return false; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
clean	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static inline bool clean(const view_of<polygon_90_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const view_of<polygon_90_set_concept, T>& polygon_set)
clean	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  clean(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
clean	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    bool clean() const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
clean	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline bool polygon_45_set_data<Unit>::clean() const {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:() const
clean	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline bool clean(const T& ) { return false; }$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const T& )
clean	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline bool clean(const polygon_45_set_data<T>& polygon_set) { polygon_set.clean(); return true; }$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_data<T>& polygon_set)
clean	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  clean(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
clean	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void clean() const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
clean	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline bool clean(const T&) { return false; }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const T&)
clean	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline bool clean(const polygon_90_set_data<T>& polygon_set) { polygon_set.clean(); return true; }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_data<T>& polygon_set)
clean	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline bool clean() const { return false; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
clean	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static inline bool clean(const view_of<polygon_45_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const view_of<polygon_45_set_concept, T>& polygon_set)
clean	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  clean(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
clean	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void clean() const;$/;"	p	class:boost::polygon::polygon_set_data	access:public	signature:() const
clean	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline bool clean(const T& ) { return false; }$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const T& )
clean	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline bool clean(const polygon_set_data<T>& polygon_set) { polygon_set.clean(); return true; }$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_data<T>& polygon_set)
clear	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void clear() { eventData_.clear(); }$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:()
clear	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void clear() {*this = arbitrary_boolean_op();}$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:public	signature:()
clear	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void clear() {*this = arbitrary_connectivity_extraction();}$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:()
clear	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void clear() {*this = property_merge();}$/;"	f	class:boost::polygon::property_merge	access:public	signature:()
clear	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  void clear() {$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:()
clear	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  clear(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
clear	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void clear() { data_.clear(); error_data_.clear(); dirty_ = unsorted_ = false; is_manhattan_ = true; }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:()
clear	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  clear(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
clear	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void clear() { data_.clear(); dirty_ = unsorted_ = false; }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:()
clear	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  clear(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
clear	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void clear() { data_.clear(); dirty_ = unsorted_ = false; }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:()
clear	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void clear() {$/;"	f	class:boost::polygon::voronoi_builder	access:public	signature:()
clear	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void clear() {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:()
clearOutput_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void clearOutput_();$/;"	p	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:private	signature:()
clearOutput_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ScanLineToPolygonItrs<orientT, Unit, polygon_concept_type>::clearOutput_() {$/;"	f	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	signature:()
clockwise_winding	/usr/include/boost/polygon/isotropy.hpp	/^    clockwise_winding = 0,$/;"	e	enum:boost::polygon::winding_direction
cmp_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^    Predicate cmp_;$/;"	m	struct:boost::polygon::detail::ordered_queue::comparison	access:public
color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  color_type color() const { return color_ >> BITS_SHIFT; }$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  color_type color() const { return color_ >> BITS_SHIFT; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  color_type color() const { return color_ >> BITS_SHIFT; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:() const
color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void color(color_type color) const {$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:(color_type color) const
color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void color(color_type color) const {$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(color_type color) const
color	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void color(color_type color) const {$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:(color_type color) const
color_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  mutable color_type color_;$/;"	m	class:boost::polygon::voronoi_cell	access:private
color_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  mutable color_type color_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
color_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  mutable color_type color_;$/;"	m	class:boost::polygon::voronoi_vertex	access:private
color_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::size_t color_type;$/;"	t	class:boost::polygon::voronoi_cell	access:public
color_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::size_t color_type;$/;"	t	class:boost::polygon::voronoi_edge	access:public
color_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::size_t color_type;$/;"	t	class:boost::polygon::voronoi_vertex	access:public
combine_axis_arrays	/usr/include/boost/polygon/transform.hpp	/^  static void combine_axis_arrays(INDIVIDUAL_AXIS this_array[],$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(INDIVIDUAL_AXIS this_array[], const INDIVIDUAL_AXIS that_array[])
common_vertex	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool common_vertex(const half_edge& he1, const half_edge& he2) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(const half_edge& he1, const half_edge& he2)
compact_iterator_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename ActiveTail<Unit>::iterator compact_iterator_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public
compact_iterator_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename ActiveTail<Unit>::iterator compact_iterator_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
compact_iterator_type	/usr/include/boost/polygon/polygon_90_data.hpp	/^  typedef typename std::vector<coordinate_type>::const_iterator compact_iterator_type;$/;"	t	class:boost::polygon::polygon_90_data	access:public
compact_iterator_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef typename polygon_90_data<T>::compact_iterator_type compact_iterator_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
compact_iterator_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef iterator_points_to_compact<iterator_type, point_type> compact_iterator_type;$/;"	t	struct:boost::polygon::view_of	access:public
compact_iterator_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::compact_iterator_type compact_iterator_type;$/;"	t	struct:boost::polygon::polygon_90_traits	access:public
compact_vertex_arbitrary_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void compact_vertex_arbitrary_count(const Point& pt, vertex_arbitrary_count &count) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(const Point& pt, vertex_arbitrary_count &count)
comparison	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  struct comparison {$/;"	s	class:boost::polygon::detail::ordered_queue	access:private
computeDag	/usr/include/boost/polygon/detail/max_cover.hpp	/^    static inline void computeDag(iT beginNode, iT endNode, orientation_2d orient,$/;"	f	struct:boost::polygon::MaxCover	access:public	signature:(iT beginNode, iT endNode, orientation_2d orient, std::size_t size)
compute_45_set_value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct compute_45_set_value {$/;"	s	namespace:boost::polygon
compute_45_set_value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct compute_45_set_value<value_type, ltype, polygon_45_set_data<rcoord>, op_type> {$/;"	s	namespace:boost::polygon
compute_90_set_value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    struct compute_90_set_value {$/;"	s	namespace:boost::polygon
compute_90_set_value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    struct compute_90_set_value<value_type, ltype, polygon_90_set_data<rcoord>, op_type> {$/;"	s	namespace:boost::polygon
compute_90_set_value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    struct compute_90_set_value<value_type, polygon_90_set_data<lcoord>, polygon_90_set_data<rcoord>, op_type> {$/;"	s	namespace:boost::polygon
compute_90_set_value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    struct compute_90_set_value<value_type, polygon_90_set_data<lcoord>, rtype, op_type> {$/;"	s	namespace:boost::polygon
compute_exact_intersection	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool compute_exact_intersection(Point& intersection, const half_edge& he1, const half_edge& he2,$/;"	f	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public	signature:(Point& intersection, const half_edge& he1, const half_edge& he2, bool projected = false, bool round_closest = false)
compute_histogram_in_y	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void compute_histogram_in_y(iT begin, iT end, std::size_t size, std::vector<std::pair<Unit, std::pair<std::size_t, std::size_t> > >& histogram) {$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(iT begin, iT end, std::size_t size, std::vector<std::pair<Unit, std::pair<std::size_t, std::size_t> > >& histogram)
compute_intercept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline Unit compute_intercept(const area_type& dy2,$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const area_type& dy2, const area_type& dx1, const area_type& dx2)
compute_intersection	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool compute_intersection(Point& intersection, const half_edge& he1, const half_edge& he2,$/;"	f	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public	signature:(Point& intersection, const half_edge& he1, const half_edge& he2, bool projected = false, bool round_closest = false)
compute_intersection	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool compute_intersection(Point& intersection, const half_edge& he1, const half_edge& he2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Point& intersection, const half_edge& he1, const half_edge& he2)
compute_intersection_pack	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    struct compute_intersection_pack {$/;"	s	struct:boost::polygon::scanline_base	access:public
compute_lazy_intersection	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      static inline bool compute_lazy_intersection(Point& intersection, const half_edge& he1, const half_edge& he2,$/;"	f	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public	signature:(Point& intersection, const half_edge& he1, const half_edge& he2, bool projected = false, bool round_closest = false)
compute_offset_edge	/usr/include/boost/polygon/polygon_set_data.hpp	/^    static inline void compute_offset_edge(point_data<long double>& pt1, point_data<long double>& pt2,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(point_data<long double>& pt1, point_data<long double>& pt2, const point_data<long double>& prev_pt, const point_data<long double>& current_pt, long double distance, int multiplier)
compute_y_cuts	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void compute_y_cuts(std::vector<Unit>& y_cuts, iT begin, iT end, std::size_t size) {$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<Unit>& y_cuts, iT begin, iT end, std::size_t size)
concept_downcast	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline GEOMETRY_CONCEPT_ID concept_downcast() const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
concept_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename geometry_concept<T>::type concept_type;$/;"	t	struct:boost::polygon::polygon_90_set_mutable_traits	access:public
connectivity_extraction	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline connectivity_extraction() : ce_(), nodeCount_(0) {}$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:()
connectivity_extraction	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline connectivity_extraction(const connectivity_extraction& that) : ce_(that.ce_),$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:(const connectivity_extraction& that)
connectivity_extraction	/usr/include/boost/polygon/polygon_set_data.hpp	/^  class connectivity_extraction{$/;"	c	namespace:boost::polygon
connectivity_extraction_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline connectivity_extraction_45() : tsd_(), nodeCount_(0) {}$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:()
connectivity_extraction_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline connectivity_extraction_45(const connectivity_extraction_45& that) : tsd_(that.tsd_),$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:(const connectivity_extraction_45& that)
connectivity_extraction_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  class connectivity_extraction_45 {$/;"	c	namespace:boost::polygon
connectivity_extraction_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline connectivity_extraction_90() : tsd_(), nodeCount_(0) {}$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:()
connectivity_extraction_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline connectivity_extraction_90(const connectivity_extraction_90& that) : tsd_(that.tsd_),$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:(const connectivity_extraction_90& that)
connectivity_extraction_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^  class connectivity_extraction_90 {$/;"	c	namespace:boost::polygon
connectivity_extraction_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      connectivity_extraction_output_functor() {}$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction::connectivity_extraction_output_functor	access:public	signature:()
connectivity_extraction_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class connectivity_extraction_output_functor {$/;"	c	class:boost::polygon::arbitrary_connectivity_extraction	access:private
const_cell_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename cell_container_type::const_iterator const_cell_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
const_edge_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename edge_container_type::const_iterator const_edge_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
const_iterator	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef typename Scan45Data::const_iterator const_iterator;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
const_iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename Polygon45FormationData::const_iterator const_iterator;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
const_iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename Polygon45FormationData::const_iterator const_iterator;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
const_iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_data::const_iterator const_iterator;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:protected
const_iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_data::const_iterator const_iterator;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
const_iterator	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_type::const_iterator const_iterator;$/;"	t	class:boost::polygon::scanline	access:public
const_vertex_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename vertex_container_type::const_iterator const_vertex_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
construct	/usr/include/boost/polygon/interval_concept.hpp	/^>::type construct($/;"	f	namespace:boost::polygon	signature:( typename interval_mutable_traits<IntervalType>::coordinate_type low, typename interval_mutable_traits<IntervalType>::coordinate_type high)
construct	/usr/include/boost/polygon/interval_traits.hpp	/^  static interval_type construct(coordinate_type low, coordinate_type high) {$/;"	f	struct:boost::polygon::interval_mutable_traits	access:public	signature:(coordinate_type low, coordinate_type high)
construct	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type construct($/;"	f	namespace:boost::polygon	signature:( typename point_mutable_traits<PointType>::coordinate_type x, typename point_mutable_traits<PointType>::coordinate_type y)
construct	/usr/include/boost/polygon/point_traits.hpp	/^  static point_type construct(coordinate_type x, coordinate_type y) {$/;"	f	struct:boost::polygon::point_mutable_traits	access:public	signature:(coordinate_type x, coordinate_type y)
construct	/usr/include/boost/polygon/rectangle_concept.hpp	/^  construct(const T2& interval_horizontal,$/;"	f	namespace:boost::polygon	signature:(const T2& interval_horizontal, const T3& interval_vertical)
construct	/usr/include/boost/polygon/rectangle_concept.hpp	/^  construct(coord_type xl, coord_type yl, coord_type xh, coord_type yh) {$/;"	f	namespace:boost::polygon	signature:(coord_type xl, coord_type yl, coord_type xh, coord_type yh)
construct	/usr/include/boost/polygon/rectangle_traits.hpp	/^    static inline T construct(const T2& interval_horizontal,$/;"	f	struct:boost::polygon::rectangle_mutable_traits	access:public	signature:(const T2& interval_horizontal, const T3& interval_vertical)
construct	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type construct(const Point1& low, const Point2& high) {$/;"	f	namespace:boost::polygon	signature:(const Point1& low, const Point2& high)
construct	/usr/include/boost/polygon/segment_traits.hpp	/^  static segment_type construct(const point_type& low, const point_type& high) {$/;"	f	struct:boost::polygon::segment_mutable_traits	access:public	signature:(const point_type& low, const point_type& high)
construct	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void construct(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:public	signature:(OUTPUT* output)
construct_voronoi	/usr/include/boost/polygon/voronoi.hpp	/^construct_voronoi(PointIterator first, PointIterator last, VD* vd) {$/;"	f	namespace:boost::polygon	signature:(PointIterator first, PointIterator last, VD* vd)
construct_voronoi	/usr/include/boost/polygon/voronoi.hpp	/^construct_voronoi(PointIterator p_first, PointIterator p_last,$/;"	f	namespace:boost::polygon	signature:(PointIterator p_first, PointIterator p_last, SegmentIterator s_first, SegmentIterator s_last, VD* vd)
construct_voronoi	/usr/include/boost/polygon/voronoi.hpp	/^construct_voronoi(SegmentIterator first, SegmentIterator last, VD* vd) {$/;"	f	namespace:boost::polygon	signature:(SegmentIterator first, SegmentIterator last, VD* vd)
contains	/usr/include/boost/polygon/interval_concept.hpp	/^>::type contains($/;"	f	namespace:boost::polygon	signature:( const IntervalType& interval, typename interval_coordinate_type<IntervalType>::type value, bool consider_touch = true )
contains	/usr/include/boost/polygon/interval_concept.hpp	/^>::type contains($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2, bool consider_touch = true)
contains	/usr/include/boost/polygon/polygon_traits.hpp	/^  contains(const T& polygon, const input_point_type& point, bool consider_touch = true) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon, const input_point_type& point, bool consider_touch = true)
contains	/usr/include/boost/polygon/rectangle_concept.hpp	/^  contains(const rectangle_type& rectangle, const point_type point_contained,$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle, const point_type point_contained, bool consider_touch = true)
contains	/usr/include/boost/polygon/rectangle_concept.hpp	/^  contains(const rectangle_type& rectangle, const rectangle_type_2 rectangle_contained,$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle, const rectangle_type_2 rectangle_contained, bool consider_touch = true)
contains	/usr/include/boost/polygon/segment_concept.hpp	/^bool>::type contains(const Segment& segment,$/;"	f	namespace:boost::polygon	signature:(const Segment& segment, const Point& point, bool consider_touch = true )
contains	/usr/include/boost/polygon/segment_concept.hpp	/^bool>::type contains(const Segment1& segment1,$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2, bool consider_touch = true)
contains_point	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool contains_point() const {$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
contains_segment	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool contains_segment() const {$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
convert	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _converter convert;$/;"	m	class:boost::polygon::detail::robust_sqrt_expr	access:private
convert_high_precision_type	/usr/include/boost/polygon/gmp_override.hpp	/^  int convert_high_precision_type<int>(const mpq_class& v) {$/;"	f	namespace:boost::polygon	signature:(const mpq_class& v)
convert_high_precision_type	/usr/include/boost/polygon/isotropy.hpp	/^  T convert_high_precision_type(const typename high_precision_type<T>::type& v) {$/;"	f	namespace:boost::polygon	signature:(const typename high_precision_type<T>::type& v)
convert_segments_to_vertex_half_edges	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void convert_segments_to_vertex_half_edges(std::vector<vertex_half_edge>& output, iT begin, iT end) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(std::vector<vertex_half_edge>& output, iT begin, iT end)
convolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& convolve($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type value)
convolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& convolve(IntervalType1& lvalue, const IntervalType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(IntervalType1& lvalue, const IntervalType2& rvalue)
convolve	/usr/include/boost/polygon/point_concept.hpp	/^PointType1>::type& convolve(PointType1& lvalue, const PointType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(PointType1& lvalue, const PointType2& rvalue)
convolve	/usr/include/boost/polygon/polygon_traits.hpp	/^  convolve(polygon_type& polygon, const point_type& point) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, const point_type& point)
convolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  convolve(rectangle_type& rectangle, const point_type& convolution_point) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const point_type& convolution_point)
convolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  convolve(rectangle_type_1& rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle)
convolve	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& convolve(Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Point& point)
convolve_point_sequence_with_polygons	/usr/include/boost/polygon/detail/minkowski.hpp	/^  static void convolve_point_sequence_with_polygons(polygon_set& result, itrT b, itrT e, const std::vector<polygon>& polygons) {$/;"	f	struct:boost::polygon::detail::minkowski_offset	access:public	signature:(polygon_set& result, itrT b, itrT e, const std::vector<polygon>& polygons)
convolve_two_point_sequences	/usr/include/boost/polygon/detail/minkowski.hpp	/^  static void convolve_two_point_sequences(polygon_set& result, itrT1 ab, itrT1 ae, itrT2 bb, itrT2 be) {$/;"	f	struct:boost::polygon::detail::minkowski_offset	access:public	signature:(polygon_set& result, itrT1 ab, itrT1 ae, itrT2 bb, itrT2 be)
convolve_two_polygon_sets	/usr/include/boost/polygon/detail/minkowski.hpp	/^  static void convolve_two_polygon_sets(polygon_set& result, const polygon_set& a, const polygon_set& b) {$/;"	f	struct:boost::polygon::detail::minkowski_offset	access:public	signature:(polygon_set& result, const polygon_set& a, const polygon_set& b)
convolve_two_segments	/usr/include/boost/polygon/detail/minkowski.hpp	/^  static void convolve_two_segments(std::vector<point>& figure, const edge& a, const edge& b) {$/;"	f	struct:boost::polygon::detail::minkowski_offset	access:public	signature:(std::vector<point>& figure, const edge& a, const edge& b)
coord_	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  mutable typename point_traits<point_type>::coordinate_type coord_;$/;"	m	class:boost::polygon::iterator_points_to_compact	access:private
coord_iterator_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef typename polygon_traits<polygon_type>::iterator_type coord_iterator_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
coordinate_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_concept {};$/;"	s	namespace:boost::polygon
coordinate_difference	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double coordinate_difference;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_difference	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float coordinate_difference;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_difference	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long coordinate_difference;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_difference	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double coordinate_difference;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_difference	/usr/include/boost/polygon/isotropy.hpp	/^    typedef polygon_long_long_type coordinate_difference;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_distance	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double coordinate_distance;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_distance	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float coordinate_distance;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_distance	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double coordinate_distance;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits {};$/;"	s	namespace:boost::polygon
coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits<double> {$/;"	s	namespace:boost::polygon
coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits<float> {$/;"	s	namespace:boost::polygon
coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits<int> {$/;"	s	namespace:boost::polygon
coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits<long double> {$/;"	s	namespace:boost::polygon
coordinate_traits	/usr/include/boost/polygon/isotropy.hpp	/^  struct coordinate_traits<polygon_long_long_type> {$/;"	s	namespace:boost::polygon
coordinate_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef typename polygon_90_traits<polygon_with_holes_type>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
coordinate_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef typename polygon_traits<polygon_type>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
coordinate_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef typename rectangle_traits<rectangle_type>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
coordinate_type	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef typename point_traits<point_type>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef typename polygon_45_set_traits<ltype>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::polygon_45_set_view	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef typename polygon_45_set_view<ltype, rtype, op_type>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef typename polygon_90_set_traits<ltype>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::polygon_90_set_view	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef typename polygon_90_set_view<ltype, rtype, op_type>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef typename polygon_set_traits<ltype>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::polygon_set_view	access:public
coordinate_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef typename polygon_set_view<ltype, rtype, op_type>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
coordinate_type	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef typename rectangle_traits<T>::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public
coordinate_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename site_type::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:public
coordinate_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::detail::circle_event	access:public
coordinate_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::detail::point_2d	access:public
coordinate_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::detail::site_event	access:public
coordinate_type	/usr/include/boost/polygon/interval_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::interval_data	access:public
coordinate_type	/usr/include/boost/polygon/interval_traits.hpp	/^  typedef typename interval_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::interval_mutable_traits	access:public
coordinate_type	/usr/include/boost/polygon/interval_traits.hpp	/^  typedef typename interval_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::interval_traits	access:public
coordinate_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double coordinate_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float coordinate_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef int coordinate_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double coordinate_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef polygon_long_long_type coordinate_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
coordinate_type	/usr/include/boost/polygon/point_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::point_data	access:public
coordinate_type	/usr/include/boost/polygon/point_traits.hpp	/^  typedef typename point_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::point_mutable_traits	access:public
coordinate_type	/usr/include/boost/polygon/point_traits.hpp	/^  typedef typename point_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::point_traits	access:public
coordinate_type	/usr/include/boost/polygon/polygon_45_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_45_data	access:public
coordinate_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename get_coordinate_type<T, typename geometry_concept<T>::type >::type coordinate_type;$/;"	t	struct:boost::polygon::view_of	access:public
coordinate_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename view_of<polygon_90_set_concept, T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
coordinate_type	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef Unit coordinate_type;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
coordinate_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename get_coordinate_type<T, typename geometry_concept<T>::type >::type coordinate_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
coordinate_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename polygon_45_set_data<T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
coordinate_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
coordinate_type	/usr/include/boost/polygon/polygon_90_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_90_data	access:public
coordinate_type	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_90_set_data	access:public
coordinate_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename get_coordinate_type<T, typename geometry_concept<T>::type >::type coordinate_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
coordinate_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename polygon_90_set_data<T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
coordinate_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
coordinate_type	/usr/include/boost/polygon/polygon_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_data	access:public
coordinate_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename get_coordinate_type<T, typename geometry_concept<T>::type >::type coordinate_type;$/;"	t	struct:boost::polygon::view_of	access:public
coordinate_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename view_of<polygon_45_set_concept, T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
coordinate_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
coordinate_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename get_coordinate_type<T, typename geometry_concept<T>::type >::type coordinate_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
coordinate_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename polygon_set_data<T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
coordinate_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_90_traits	access:public
coordinate_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_traits_general	access:public
coordinate_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename polygon_90_traits<T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::polygon_traits_90	access:public
coordinate_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename polygon_traits<T>::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::view_of	access:public
coordinate_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
coordinate_type	/usr/include/boost/polygon/rectangle_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::rectangle_data	access:public
coordinate_type	/usr/include/boost/polygon/rectangle_traits.hpp	/^    typedef typename T::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::rectangle_traits	access:public
coordinate_type	/usr/include/boost/polygon/segment_data.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::segment_data	access:public
coordinate_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef typename segment_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::segment_mutable_traits	access:public
coordinate_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef typename segment_type::coordinate_type coordinate_type;$/;"	t	struct:boost::polygon::segment_traits	access:public
coordinate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::voronoi_cell	access:public
coordinate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::voronoi_edge	access:public
coordinate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef T coordinate_type;$/;"	t	class:boost::polygon::voronoi_vertex	access:public
coordinate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef T coordinate_type;$/;"	t	struct:boost::polygon::voronoi_diagram_traits	access:public
coordinate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename TRAITS::coordinate_type coordinate_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
coords_	/usr/include/boost/polygon/interval_data.hpp	/^  coordinate_type coords_[2];$/;"	m	class:boost::polygon::interval_data	access:private
coords_	/usr/include/boost/polygon/point_data.hpp	/^  coordinate_type coords_[2];$/;"	m	class:boost::polygon::point_data	access:private
coords_	/usr/include/boost/polygon/polygon_45_data.hpp	/^  std::vector<point_data<coordinate_type> > coords_;$/;"	m	class:boost::polygon::polygon_45_data	access:public
coords_	/usr/include/boost/polygon/polygon_90_data.hpp	/^  std::vector<coordinate_type> coords_;$/;"	m	class:boost::polygon::polygon_90_data	access:private
coords_	/usr/include/boost/polygon/polygon_data.hpp	/^  std::vector<point_data<coordinate_type> > coords_;$/;"	m	class:boost::polygon::polygon_data	access:public
copyHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline void copyHoles(ActiveTail45& that) { holesList_.splice(holesList_.end(), that.holesList_); }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(ActiveTail45& that)
copyHoles	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline void copyHoles(active_tail_arbitrary& that) { holesList_.splice(holesList_.end(), that.holesList_); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(active_tail_arbitrary& that)
copyHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void copyHoles(ActiveTail& that);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(ActiveTail& that)
copyHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::copyHoles(ActiveTail<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(ActiveTail<Unit>& that)
copy_construct	/usr/include/boost/polygon/interval_concept.hpp	/^>::type copy_construct(const IntervalType2& interval) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType2& interval)
copy_construct	/usr/include/boost/polygon/rectangle_concept.hpp	/^  copy_construct(const T2& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const T2& rectangle)
copy_construct	/usr/include/boost/polygon/segment_concept.hpp	/^Segment1>::type copy_construct(const Segment2& segment) {$/;"	f	namespace:boost::polygon	signature:(const Segment2& segment)
corner_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  unsigned int corner_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
count	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      ct count; \/\/dxdydTheta$/;"	m	class:boost::polygon::boolean_op_45::Vertex45T	access:public
count	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      mutable CountType count;$/;"	m	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public
count	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      ct count;$/;"	m	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public
count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      int count; \/\/dxdydTheta$/;"	m	class:boost::polygon::scanline_base::vertex_half_edge	access:public
count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      vertex_arbitrary_count count;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public
count	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  int32 count() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
countFromBelow	/usr/include/boost/polygon/detail/property_merge.hpp	/^  property_map countFromBelow;$/;"	m	class:boost::polygon::merge_scanline	access:private
count_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    int count_;$/;"	m	class:boost::polygon::boolean_op::UnaryCount	access:private
count_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int count_;$/;"	m	class:boost::polygon::boolean_op_45::Count1	access:public
count_	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  int32 count_;$/;"	m	class:boost::polygon::detail::extended_int	access:private
count_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef ct count_type;$/;"	t	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public
counterclockwise_winding	/usr/include/boost/polygon/isotropy.hpp	/^    counterclockwise_winding = 1,$/;"	e	enum:boost::polygon::winding_direction
counts	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      CountType counts[4];$/;"	m	class:boost::polygon::boolean_op_45::Scan45CountT	access:private
counts	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int counts[2];$/;"	m	class:boost::polygon::boolean_op_45::Count2	access:private
counts	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      ct counts[4];$/;"	m	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:private
counts	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      std::vector<std::pair<int, int> > counts;$/;"	m	class:boost::polygon::polygon_45_touch::CountTouch	access:public
counts	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      std::vector<std::pair<property_type, int> > counts;$/;"	m	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public
counts_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    int counts_[2];$/;"	m	class:boost::polygon::boolean_op::BinaryCount	access:private
createActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  ActiveTail<Unit>* createActiveTail();$/;"	p	namespace:boost::polygon::polygon_formation	signature:()
createActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>* createActiveTail() {$/;"	f	namespace:boost::polygon::polygon_formation	signature:()
createActiveTail45sAsPair	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      static inline std::pair<ActiveTail45*, ActiveTail45*> createActiveTail45sAsPair(Point point, bool solid,$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(Point point, bool solid, ActiveTail45* phole, bool fractureHoles)
createActiveTailsAsPair	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      static inline std::pair<active_tail_arbitrary*, active_tail_arbitrary*> createActiveTailsAsPair(Point point, bool solid,$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(Point point, bool solid, active_tail_arbitrary* phole, bool fractureHoles)
createActiveTailsAsPair	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline std::pair<ActiveTail<Unit>*, ActiveTail<Unit>*> createActiveTailsAsPair(Unit x, Unit y, bool solid, ActiveTail<Unit>* phole, bool fractureHoles) {$/;"	f	namespace:boost::polygon::polygon_formation	signature:(Unit x, Unit y, bool solid, ActiveTail<Unit>* phole, bool fractureHoles)
createPolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  PolyLine<Unit>* createPolyLine(orientation_2d orient, Unit coord, Side side);$/;"	p	namespace:boost::polygon::polygon_formation	signature:(orientation_2d orient, Unit coord, Side side)
createPolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>* createPolyLine(orientation_2d orient, Unit coord, Side side) {$/;"	f	namespace:boost::polygon::polygon_formation	signature:(orientation_2d orient, Unit coord, Side side)
create_vertex	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void create_vertex(property_merge_data& pmd,$/;"	f	class:boost::polygon::property_merge	access:public	signature:(property_merge_data& pmd, const Point& current_point, const Point& next_point, direction_1d winding, bool is_hole, const property_type& property)
cross	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool cross(Point& crossPoint, const Scan45ElementT& edge, Unit currentX) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:(Point& crossPoint, const Scan45ElementT& edge, Unit currentX) const
crossQueue_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      CrossQueue crossQueue_;$/;"	m	class:boost::polygon::boolean_op_45::Scan45	access:public
crossVector_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Scan45Vector crossVector_;$/;"	m	class:boost::polygon::boolean_op_45::Scan45	access:public
currentCoordinate_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typename rectangle_traits<T>::coordinate_type currentCoordinate_;$/;"	m	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
currentRect_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    scan_rect_type currentRect_;$/;"	m	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
currentVertex	/usr/include/boost/polygon/detail/property_merge.hpp	/^  vertex_data currentVertex;$/;"	m	class:boost::polygon::merge_scanline	access:private
d	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt64 d() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
d	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt_type d() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
data_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    mutable value_type data_;$/;"	m	class:boost::polygon::polygon_45_set_data	access:private
data_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    mutable value_type data_;$/;"	m	class:boost::polygon::polygon_90_set_data	access:private
data_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    mutable value_type data_;$/;"	m	class:boost::polygon::polygon_set_data	access:private
deactivate	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event& deactivate() {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:()
deactivate_circle_event	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void deactivate_circle_event(value_type* value) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(value_type* value)
deconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& deconvolve($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type value)
deconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& deconvolve(IntervalType1& lvalue, const IntervalType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(IntervalType1& lvalue, const IntervalType2& rvalue)
deconvolve	/usr/include/boost/polygon/point_concept.hpp	/^PointType1>::type& deconvolve(PointType1& lvalue, const PointType2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(PointType1& lvalue, const PointType2& rvalue)
deconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  deconvolve(rectangle_type& rectangle, const point_type& convolution_point) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const point_type& convolution_point)
deconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  deconvolve(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle)
deconvolve	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& deconvolve(Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Point& point)
default_arg_workaround	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  struct default_arg_workaround {$/;"	s	namespace:boost::polygon::boolean_op
default_voronoi_builder	/usr/include/boost/polygon/voronoi_builder.hpp	/^typedef voronoi_builder<detail::int32> default_voronoi_builder;$/;"	t	namespace:boost::polygon
delta	/usr/include/boost/polygon/interval_concept.hpp	/^>::type delta(const IntervalType& interval) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval)
delta	/usr/include/boost/polygon/rectangle_concept.hpp	/^  delta(const rectangle_type& rectangle, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle, orientation_2d orient)
destroyActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void destroyActiveTail(ActiveTail<Unit>* aTail) {$/;"	f	namespace:boost::polygon::polygon_formation	signature:(ActiveTail<Unit>* aTail)
destroyActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  void destroyActiveTail(ActiveTail<Unit>* aTail);$/;"	p	namespace:boost::polygon::polygon_formation	signature:(ActiveTail<Unit>* aTail)
destroyContents	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline void destroyContents() {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:()
destroyContents	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline void destroyContents() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:()
destroyContents	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void destroyContents();$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:()
destroyContents	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::destroyContents() {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:()
destroyOutBuffer	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    static void destroyOutBuffer();$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:()
destroyPolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void destroyPolyLine(PolyLine<Unit>* pLine) {$/;"	f	namespace:boost::polygon::polygon_formation	signature:(PolyLine<Unit>* pLine)
destroyPolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  void destroyPolyLine(PolyLine<Unit>* pLine);$/;"	p	namespace:boost::polygon::polygon_formation	signature:(PolyLine<Unit>* pLine)
detail	/usr/include/boost/polygon/detail/minkowski.hpp	/^namespace boost { namespace polygon { namespace detail {$/;"	n	namespace:boost::polygon
detail	/usr/include/boost/polygon/detail/polygon_simplify.hpp	/^namespace boost { namespace polygon { namespace detail { namespace simplify_detail {$/;"	n	namespace:boost::polygon
detail	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^namespace detail {$/;"	n	namespace:boost::polygon
detail	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^namespace detail {$/;"	n	namespace:boost::polygon
detail	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^namespace detail {$/;"	n	namespace:boost::polygon
detail	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^namespace detail {$/;"	n	namespace:boost::polygon
dif	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void dif(const extended_int& e1, const extended_int& e2) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& e1, const extended_int& e2)
dif	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void dif(const uint32* c1, std::size_t sz1,$/;"	f	class:boost::polygon::detail::extended_int	access:private	signature:(const uint32* c1, std::size_t sz1, const uint32* c2, std::size_t sz2, bool rec = false)
dif	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  T dif() const {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:() const
difference_type	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::polygon::iterator_compact_to_points	access:public
difference_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
difference_type	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
difference_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
difference_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef std::ptrdiff_t difference_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public
difference_type	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit direction_1d(int d);$/;"	p	class:boost::polygon::direction_1d	access:private	signature:(int d)
direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline direction_1d(const direction_2d& that);$/;"	p	class:boost::polygon::direction_1d	access:public	signature:(const direction_2d& that)
direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline direction_1d(const direction_3d& that);$/;"	p	class:boost::polygon::direction_1d	access:public	signature:(const direction_3d& that)
direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_1d() : val_(LOW) {}$/;"	f	class:boost::polygon::direction_1d	access:public	signature:()
direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_1d(const direction_1d& that) : val_(that.val_) {}$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(const direction_1d& that)
direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_1d(const direction_1d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(const direction_1d_enum val)
direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^  class direction_1d {$/;"	c	namespace:boost::polygon
direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^  direction_1d::direction_1d(const direction_2d& that) : val_(that.to_int() & 1) {}$/;"	f	class:boost::polygon::direction_1d	signature:(const direction_2d& that)
direction_1d	/usr/include/boost/polygon/isotropy.hpp	/^  direction_1d::direction_1d(const direction_3d& that) : val_(that.to_int() & 1) {}$/;"	f	class:boost::polygon::direction_1d	signature:(const direction_3d& that)
direction_1d_enum	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_1d_enum { LOW = 0, HIGH = 1,$/;"	g	namespace:boost::polygon
direction_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d() : val_(WEST) {}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:()
direction_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d(const direction_2d& that) : val_(that.val_) {}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(const direction_2d& that)
direction_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d(const direction_2d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(const direction_2d_enum val)
direction_2d	/usr/include/boost/polygon/isotropy.hpp	/^  class direction_2d {$/;"	c	namespace:boost::polygon
direction_2d_enum	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_2d_enum { WEST = 0, EAST = 1, SOUTH = 2, NORTH = 3 };$/;"	g	namespace:boost::polygon
direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d() : val_(WEST) {}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:()
direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d(const direction_2d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(const direction_2d_enum val)
direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d(const direction_3d& that) : val_(that.val_) {}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(const direction_3d& that)
direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d(const direction_3d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(const direction_3d_enum val)
direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d(direction_2d that) : val_(that.to_int()) {}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_2d that)
direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^  class direction_3d {$/;"	c	namespace:boost::polygon
direction_3d_enum	/usr/include/boost/polygon/isotropy.hpp	/^  enum direction_3d_enum { DOWN = 4, UP = 5 };$/;"	g	namespace:boost::polygon
dirty	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    bool dirty() const { return value().dirty(); } \/\/result of a boolean is clean$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:() const
dirty	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    bool dirty() const { return false; } \/\/result of a boolean is clean$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
dirty	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    bool dirty() const { return false; } \/\/result of a boolean is clean$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
dirty	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool dirty() const { return dirty_; }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
dirty	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline bool dirty() const { return dirty_; }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
dirty	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool dirty() const { return dirty_; }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
dirty_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    mutable bool dirty_;$/;"	m	class:boost::polygon::polygon_45_set_data	access:private
dirty_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    mutable bool dirty_;$/;"	m	class:boost::polygon::polygon_90_set_data	access:private
dirty_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    mutable bool dirty_;$/;"	m	class:boost::polygon::polygon_set_data	access:private
disable_if	/usr/include/boost/polygon/isotropy.hpp	/^    struct disable_if : public disable_if_c<Cond::value, T> {};$/;"	s	namespace:boost	inherits:disable_if_c
disable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct disable_if_c {$/;"	s	namespace:boost
disable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct disable_if_c<true, T> {};$/;"	s	namespace:boost
disconnectTails	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& disconnectTails();$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:()
disconnectTails	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::disconnectTails() {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:()
distance_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class distance_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
distance_predicate_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef distance_predicate<site_type> distance_predicate_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:public
distance_squared	/usr/include/boost/polygon/point_concept.hpp	/^distance_squared(const PointType1& point1, const PointType2& point2) {$/;"	f	namespace:boost::polygon	signature:(const PointType1& point1, const PointType2& point2)
distance_type_by_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct distance_type_by_domain { typedef typename coordinate_traits<coordinate_type>::coordinate_distance type; };$/;"	s	namespace:boost::polygon
distance_type_by_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct distance_type_by_domain<manhattan_domain, coordinate_type> {$/;"	s	namespace:boost::polygon
downcast	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool downcast(polygon_45_set_data<coordinate_type>& result) const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(polygon_45_set_data<coordinate_type>& result) const
dummy_to_delay_instantiation	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^    struct dummy_to_delay_instantiation{$/;"	s	namespace:boost::polygon
dx1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
dx2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
dy1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
dy2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
edge	/usr/include/boost/polygon/detail/minkowski.hpp	/^  typedef std::pair<point, point> edge;$/;"	t	struct:boost::polygon::detail::minkowski_offset	access:public
edge	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  Edge* edge() const {$/;"	f	class:boost::polygon::detail::beach_line_node_data	access:public	signature:() const
edge	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  beach_line_node_data& edge(Edge* new_edge) {$/;"	f	class:boost::polygon::detail::beach_line_node_data	access:public	signature:(Edge* new_edge)
edge_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  Edge* edge_;$/;"	m	class:boost::polygon::detail::beach_line_node_data	access:private
edge_container_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::vector<edge_type> edge_container_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
edge_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename edge_container_type::iterator edge_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:private
edge_property	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::pair<property_merge_interval<coordinate_type>, std::pair<property_set, property_set> > edge_property;$/;"	t	class:boost::polygon::merge_scanline	access:public
edge_property_vector	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::vector<edge_property> edge_property_vector;$/;"	t	class:boost::polygon::merge_scanline	access:public
edge_scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::map<half_edge, std::set<segment_id>, less_half_edge> edge_scanline;$/;"	t	class:boost::polygon::line_intersection	access:private
edge_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef std::pair<point_type, point_type> edge_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
edge_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef void edge_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
edge_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename TRAITS::edge_type edge_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
edge_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_edge<coordinate_type> edge_type;$/;"	t	struct:boost::polygon::voronoi_diagram_traits	access:public
edge_utils	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct edge_utils {$/;"	s	namespace:boost::polygon
edges	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const edge_container_type& edges() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
edges_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  edge_container_type edges_;$/;"	m	class:boost::polygon::voronoi_diagram	access:private
efpt64	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef extended_exponent_fpt<double> efpt64;$/;"	t	namespace:boost::polygon::detail
efpt_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef extended_exponent_fpt<fpt_type> efpt_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
efpt_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::efpt_type efpt_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
element_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef std::pair<edge_type, int> element_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
empty	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool empty() const {$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:() const
empty	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  empty(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
empty	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool empty() const { return data_.empty(); }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
empty	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  empty(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
empty	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline bool empty() const { clean(); return data_.empty(); }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
empty	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  empty(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
empty	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool empty() const { return data_.empty(); }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
enable_if	/usr/include/boost/polygon/isotropy.hpp	/^    struct enable_if : public enable_if_c<Cond::value, T> {};$/;"	s	namespace:boost	inherits:enable_if_c
enable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct enable_if_c {$/;"	s	namespace:boost
enable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct enable_if_c<false, T> {};$/;"	s	namespace:boost
encompass	/usr/include/boost/polygon/interval_concept.hpp	/^>::type encompass($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type value)
encompass	/usr/include/boost/polygon/interval_concept.hpp	/^>::type encompass(IntervalType1& interval1, const IntervalType2& interval2) {$/;"	f	namespace:boost::polygon	signature:(IntervalType1& interval1, const IntervalType2& interval2)
encompass	/usr/include/boost/polygon/rectangle_concept.hpp	/^  encompass(rectangle_type& rectangle, const interval_type& b, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const interval_type& b, orientation_2d orient)
encompass	/usr/include/boost/polygon/rectangle_concept.hpp	/^  encompass(rectangle_type_1& rectangle, const point_type& b) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const point_type& b)
encompass	/usr/include/boost/polygon/rectangle_concept.hpp	/^  encompass(rectangle_type_1& rectangle, const rectangle_type_2& b) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& b)
end	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline iterator end() { return children_.end(); }$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:()
end	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iterator end() const { return points.end(); }$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iterator end() const { return p_->getTail()->end(); }$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iterator end() const { return p_->getTail()->end(); }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    iterator_type end() const { return value().end(); }$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static inline iterator_type end(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set);$/;"	p	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
end	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  end(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set) {$/;"	f	class:boost::polygon::polygon_45_set_traits	signature:(const polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set)
end	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    iterator_type end() const { return value().end(); }$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    static inline iterator_type end(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
end	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  end(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_traits	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
end	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline iterator end() const { return iterator(eventData_.end(), 0, 0, std::set<int>()); }$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator end() const { return points.end(); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator end() const { return p_->getTail()->end(); }$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator_type end() const { return p_->getTail()->end(); }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iterator_type end() const { return iterator_type(end_compact(), end_compact()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iterator_type end() const { return iterator_type(end_compact(), end_compact()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    iterator end() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline typename ActiveTail<Unit>::iterator ActiveTail<Unit>::end() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
end	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    iterator_type end() const { return value().end(); }$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
end	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    static inline iterator_type end(const polygon_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
end	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  end(const polygon_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_set_traits	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
end	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline iterator_type end() const { return coords_.end(); }$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:() const
end	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline iterator_type end() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
end	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static inline iterator_type end(const view_of<polygon_90_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const view_of<polygon_90_set_concept, T>& polygon_set)
end	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static type end(const view_of<polygon_90_set_concept, T>& t) { return t.end(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const view_of<polygon_90_set_concept, T>& t)
end	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline iterator_type end() const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
end	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline iterator_type end(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const T& polygon_set)
end	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline iterator_type end(const polygon_45_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_data<T>& polygon_set)
end	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline const iterator_type end() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
end	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline iterator_type end() const { return iterator_type(coords_.end(), coords_.end()); }$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:() const
end	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline iterator_type end() const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
end	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline iterator_type end(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const T& polygon_set)
end	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline iterator_type end(const polygon_90_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_data<T>& polygon_set)
end	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type end(const T& t) { const T* tp = &t; ++tp; return tp; }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const T& t)
end	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type end(const T& t) { return indirect_type::end(t); }$/;"	f	struct:boost::polygon::get_iterator_type	access:public	signature:(const T& t)
end	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static type end(const T& t) { return t.end(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const T& t)
end	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const iterator_type end() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
end	/usr/include/boost/polygon/polygon_data.hpp	/^  inline iterator_type end() const { return coords_.end(); }$/;"	f	class:boost::polygon::polygon_data	access:public	signature:() const
end	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline iterator_type end() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
end	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static inline iterator_type end(const view_of<polygon_45_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const view_of<polygon_45_set_concept, T>& polygon_set)
end	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static type end(const view_of<polygon_45_set_concept, T>& t) { return t.end(); }$/;"	f	struct:boost::polygon::get_iterator_type_2	access:public	signature:(const view_of<polygon_45_set_concept, T>& t)
end	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline iterator_type end() const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
end	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline iterator_type end(const T& polygon_set) {$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const T& polygon_set)
end	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline iterator_type end(const polygon_set_data<T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_data<T>& polygon_set)
end	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline iterator_type end() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
end	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline const iterator_type end() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
endConnectivity	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    End endConnectivity(End end) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(End end) const
endConnectivity	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline End PolyLine<Unit>::endConnectivity(End end) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End end) const
endHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    iteratorHoles endHoles() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
endHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline typename ActiveTail<Unit>::iteratorHoles ActiveTail<Unit>::endHoles() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
end_45_set_data	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  end_45_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
end_90_set_data	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  end_90_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
end_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline compact_iterator_type end_compact() const { return p_->end(); }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:() const
end_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline compact_iterator_type end_compact() const { return p_->end(); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
end_compact	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline compact_iterator_type end_compact() const { return coords_.end(); }$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:() const
end_compact	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const compact_iterator_type end_compact() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
end_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline compact_iterator_type end_compact() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
end_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline compact_iterator_type end_compact(const T& t) {$/;"	f	struct:boost::polygon::polygon_90_traits	access:public	signature:(const T& t)
end_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^  end_compact(const T& polygon,$/;"	f	namespace:boost::polygon	signature:(const T& polygon, typename enable_if< typename gtl_and <typename is_polygon_with_holes_type<T>::type, typename gtl_same_type<typename geometry_domain<typename geometry_concept<T>::type>::type, manhattan_domain>::type>::type>::type * = 0 )
end_holes	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline iteratorHoles end_holes() const { return iteratorHoles(p_->getHoles().end()); }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
end_holes	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator_holes_type end_holes() const { return iterator_holes_type(p_->getHoles().end()); }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
end_holes	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline iteratorHoles end_holes() const { return iteratorHoles(p_->endHoles()); }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
end_holes	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline const iterator_holes_type end_holes() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
end_holes	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline const iterator_holes_type end_holes() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
end_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline iterator_holes_type end_holes() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
end_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_holes_type end_holes(const T& t) {$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const T& t)
end_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_holes_type end_holes(const hole_type& t) { return &t; }$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const hole_type& t)
end_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^  end_holes(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
end_holes	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline const iterator_holes_type end_holes() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
end_point_comparison	/usr/include/boost/polygon/voronoi_builder.hpp	/^  struct end_point_comparison {$/;"	s	class:boost::polygon::voronoi_builder	access:private
end_point_queue	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::set<Point, less_point> end_point_queue;$/;"	t	class:boost::polygon::scanline	access:public
end_point_queue_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    end_point_queue end_point_queue_;$/;"	m	class:boost::polygon::scanline	access:public
end_point_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef std::pair<point_type, beach_line_iterator> end_point_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
end_points	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_type end_points(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_90	access:public	signature:(const T& t)
end_points	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline iterator_type end_points(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_general	access:public	signature:(const T& t)
end_points	/usr/include/boost/polygon/polygon_traits.hpp	/^  end_points(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
end_points_	/usr/include/boost/polygon/voronoi_builder.hpp	/^                       end_point_comparison > end_points_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
end_polygon_set_data	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  end_polygon_set_data(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
envelope_segments	/usr/include/boost/polygon/segment_utils.hpp	/^envelope_segments($/;"	f	namespace:boost::polygon	signature:( Rectangle& rect, SegmentIterator first, SegmentIterator last)
equal_slope	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool equal_slope(area_type dx1, area_type dy1, area_type dx2, area_type dy2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(area_type dx1, area_type dy1, area_type dx2, area_type dy2)
equal_slope	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool equal_slope(const Unit& x, const Unit& y,$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const Unit& x, const Unit& y, const Point& pt1, const Point& pt2)
equal_slope	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline bool equal_slope(area_type dx1, area_type dy1, area_type dx2, area_type dy2) {$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(area_type dx1, area_type dy1, area_type dx2, area_type dy2)
equal_slope	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline bool equal_slope(const Unit& x, const Unit& y,$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(const Unit& x, const Unit& y, const Point& pt1, const Point& pt2)
equal_slope_hp	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool equal_slope_hp(const T& dx1, const T& dy1, const T& dx2, const T& dy2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const T& dx1, const T& dy1, const T& dx2, const T& dy2)
equivalence	/usr/include/boost/polygon/interval_concept.hpp	/^>::type equivalence($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2)
equivalence	/usr/include/boost/polygon/point_concept.hpp	/^bool>::type equivalence($/;"	f	namespace:boost::polygon	signature:( const PointType1& point1, const PointType2& point2)
equivalence	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  equivalence(const polygon_set_type_1& lvalue,$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
equivalence	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  equivalence(const polygon_set_type_1& lvalue,$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
equivalence	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  equivalence(const polygon_set_type_1& lvalue,$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type_1& lvalue, const polygon_set_type_2& rvalue)
equivalence	/usr/include/boost/polygon/rectangle_concept.hpp	/^  equivalence(const T& rect1, const T2& rect2) {$/;"	f	namespace:boost::polygon	signature:(const T& rect1, const T2& rect2)
equivalence	/usr/include/boost/polygon/segment_concept.hpp	/^bool>::type equivalence(const Segment1& segment1, const Segment2& segment2) {$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2)
erase_end_events	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void erase_end_events(typename end_point_queue::iterator epqi) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(typename end_point_queue::iterator epqi)
error_count	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline std::size_t error_count() const { return error_data_.size() \/ 4; }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
error_data_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    mutable value_type error_data_;$/;"	m	class:boost::polygon::polygon_45_set_data	access:private
euclidean_distance	/usr/include/boost/polygon/interval_concept.hpp	/^>::type euclidean_distance($/;"	f	namespace:boost::polygon	signature:( const IntervalType& interval, typename interval_coordinate_type<IntervalType>::type position)
euclidean_distance	/usr/include/boost/polygon/interval_concept.hpp	/^>::type euclidean_distance($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2)
euclidean_distance	/usr/include/boost/polygon/isotropy.hpp	/^  euclidean_distance(const coordinate_type_1& lvalue, const coordinate_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(const coordinate_type_1& lvalue, const coordinate_type_2& rvalue)
euclidean_distance	/usr/include/boost/polygon/point_concept.hpp	/^euclidean_distance($/;"	f	namespace:boost::polygon	signature:( const PointType1& point1, const PointType2& point2, orientation_2d orient)
euclidean_distance	/usr/include/boost/polygon/point_concept.hpp	/^euclidean_distance(const PointType1& point1, const PointType2& point2) {$/;"	f	namespace:boost::polygon	signature:(const PointType1& point1, const PointType2& point2)
euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  euclidean_distance(const rectangle_type& lvalue, const point_type& rvalue, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& lvalue, const point_type& rvalue, orientation_2d orient)
euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  euclidean_distance(const rectangle_type& lvalue, const rectangle_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& lvalue, const rectangle_type_2& rvalue)
euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  euclidean_distance(const rectangle_type& lvalue, const rectangle_type_2& rvalue, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& lvalue, const rectangle_type_2& rvalue, orientation_2d orient)
euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  euclidean_distance(rectangle_type& lvalue, const point_type& rvalue) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& lvalue, const point_type& rvalue)
euclidean_distance	/usr/include/boost/polygon/segment_concept.hpp	/^euclidean_distance(const Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment, const Point& point)
euclidean_distance	/usr/include/boost/polygon/segment_concept.hpp	/^euclidean_distance(const Segment1& segment1, const Segment2& segment2) {$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2)
eval	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    static Orientation eval(T value) {$/;"	f	struct:boost::polygon::detail::voronoi_predicates::orientation_test	access:public	signature:(T value)
eval	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    static Orientation eval(const Point& point1,$/;"	f	struct:boost::polygon::detail::voronoi_predicates::orientation_test	access:public	signature:(const Point& point1, const Point& point2, const Point& point3)
eval	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    static Orientation eval(int_x2_type dif_x1_,$/;"	f	struct:boost::polygon::detail::voronoi_predicates::orientation_test	access:public	signature:(int_x2_type dif_x1_, int_x2_type dif_y1_, int_x2_type dif_x2_, int_x2_type dif_y2_)
eval1	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _fpt eval1(_int* A, _int* B) {$/;"	f	class:boost::polygon::detail::robust_sqrt_expr	access:public	signature:(_int* A, _int* B)
eval2	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _fpt eval2(_int* A, _int* B) {$/;"	f	class:boost::polygon::detail::robust_sqrt_expr	access:public	signature:(_int* A, _int* B)
eval3	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _fpt eval3(_int* A, _int* B) {$/;"	f	class:boost::polygon::detail::robust_sqrt_expr	access:public	signature:(_int* A, _int* B)
eval4	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _fpt eval4(_int* A, _int* B) {$/;"	f	class:boost::polygon::detail::robust_sqrt_expr	access:public	signature:(_int* A, _int* B)
evalAtX	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Unit evalAtX(Unit xIn) const { return pt.y() + rise * (xIn - pt.x()); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(Unit xIn) const
evalAtX	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Unit evalAtX(Unit xIn) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:(Unit xIn) const
evalAtX	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline high_precision evalAtX(Unit xIn) const { return evalAtXforYlazy(xIn, pt, other_pt); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(Unit xIn) const
evalAtXforY	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline const typename high_precision_type<Unit>::type& evalAtXforY(Unit xIn, Point pt, Point other_pt) {$/;"	f	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public	signature:(Unit xIn, Point pt, Point other_pt)
evalAtXforY	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline typename high_precision_type<Unit>::type evalAtXforY(Unit xIn, Point pt, Point other_pt) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Unit xIn, Point pt, Point other_pt)
evalAtXforY0	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^                           evalAtXforYdy, evalAtXforYx2, evalAtXforYy2, evalAtXforY0;$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
evalAtXforYPack	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    struct evalAtXforYPack {$/;"	s	struct:boost::polygon::scanline_base	access:public
evalAtXforYPack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typename scanline_base<Unit>::evalAtXforYPack evalAtXforYPack_;$/;"	m	class:boost::polygon::arbitrary_boolean_op	access:private
evalAtXforYPack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typename scanline_base<Unit>::evalAtXforYPack evalAtXforYPack_;$/;"	m	class:boost::polygon::arbitrary_connectivity_extraction	access:private
evalAtXforYPack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typename scanline_base<Unit>::evalAtXforYPack evalAtXforYPack_;$/;"	m	class:boost::polygon::property_merge	access:protected
evalAtXforYPack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typename scanline_base<Unit>::evalAtXforYPack evalAtXforYPack_;$/;"	m	class:boost::polygon::scanline	access:public
evalAtXforYdx	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
evalAtXforYdx1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
evalAtXforYdy	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^                           evalAtXforYdy, evalAtXforYx2, evalAtXforYy2, evalAtXforY0;$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
evalAtXforYlazy	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline Unit evalAtXforYlazy(Unit xIn, Point pt, Point other_pt) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Unit xIn, Point pt, Point other_pt)
evalAtXforYret	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
evalAtXforYx1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
evalAtXforYx2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^                           evalAtXforYdy, evalAtXforYx2, evalAtXforYy2, evalAtXforY0;$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
evalAtXforYxIn	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
evalAtXforYy1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    evalAtXforYret, evalAtXforYxIn, evalAtXforYx1, evalAtXforYy1, evalAtXforYdx1, evalAtXforYdx,$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
evalAtXforYy2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^                           evalAtXforYdy, evalAtXforYx2, evalAtXforYy2, evalAtXforY0;$/;"	m	struct:boost::polygon::scanline_base::evalAtXforYPack	access:public
evaluateBorderId_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void evaluateBorderId_(graphT& outputContainer, const std::set<int>& ids, int changingId) {$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(graphT& outputContainer, const std::set<int>& ids, int changingId)
evaluateBorder_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void evaluateBorder_(graphT& outputContainer, const std::set<int>& ids, const std::set<int>& changingIds) {$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(graphT& outputContainer, const std::set<int>& ids, const std::set<int>& changingIds)
evaluateId_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void evaluateId_(graphT& outputContainer, std::set<int>& ids, int changingId, bool leadingEdge) {$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(graphT& outputContainer, std::set<int>& ids, int changingId, bool leadingEdge)
evaluateInterval_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline void evaluateInterval_(cT& outputContainer, interval_data<Unit> ivl, T beforeCount, T afterCount);$/;"	p	class:boost::polygon::boolean_op::BooleanOp	access:private	signature:(cT& outputContainer, interval_data<Unit> ivl, T beforeCount, T afterCount)
evaluateInterval_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline void BooleanOp<T, Unit>::evaluateInterval_(cT& outputContainer, interval_data<Unit> ivl,$/;"	f	class:boost::polygon::boolean_op::BooleanOp	signature:(cT& outputContainer, interval_data<Unit> ivl, T beforeCount, T afterCount)
evaluateInterval_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void evaluateInterval_(graphT& outputContainer, std::set<int>& ids,$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(graphT& outputContainer, std::set<int>& ids, const std::set<int>& changingIds, bool leadingEdge)
evaluate_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline void evaluate_() {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:()
evaluated_	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    mutable bool evaluated_;$/;"	m	class:boost::polygon::polygon_45_set_view	access:private
evaluated_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    mutable bool evaluated_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
evaluated_	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    mutable bool evaluated_;$/;"	m	class:boost::polygon::polygon_set_view	access:private
eventData_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      EventData eventData_;$/;"	m	class:boost::polygon::touch_90_operation::TouchScanEvent	access:private
event_comparison_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class event_comparison_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
event_comparison_predicate	/usr/include/boost/polygon/voronoi_builder.hpp	/^    event_comparison_predicate;$/;"	t	class:boost::polygon::voronoi_builder	access:private
event_comparison_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  } event_comparison_type;$/;"	t	class:boost::polygon::voronoi_builder	typeref:struct:boost::polygon::voronoi_builder::__anon4	access:private
event_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef std::pair<circle_event_type, beach_line_iterator> event_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
exact_circle_formation_functor_	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    exact_circle_formation_functor_type exact_circle_formation_functor_;$/;"	m	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:private
exact_circle_formation_functor_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^        exact_circle_formation_functor_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
execute	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void execute(result_type& result) {$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:(result_type& result)
execute	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void execute(result_type& result, iT1 b1, iT1 e1, iT2 b2, iT2 e2, int op) {$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:public	signature:(result_type& result, iT1 b1, iT1 e1, iT2 b2, iT2 e2, int op)
execute_boolean_op	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  void execute_boolean_op(value_type& output_, const geometry_type_1& lvalue_, const geometry_type_2& rvalue_) {$/;"	f	namespace:boost::polygon	signature:(value_type& output_, const geometry_type_1& lvalue_, const geometry_type_2& rvalue_)
exp_	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  exp_type exp_;$/;"	m	class:boost::polygon::detail::extended_exponent_fpt	access:private
exp_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef int exp_type;$/;"	t	class:boost::polygon::detail::extened_exponent_fpt_traits	access:public
exp_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef typename _traits::exp_type exp_type;$/;"	t	class:boost::polygon::detail::extended_exponent_fpt	access:public
extendTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& extendTail(Unit delta);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(Unit delta)
extendTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::extendTail(Unit delta) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(Unit delta)
extended_exponent_fpt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  explicit extended_exponent_fpt(fpt_type val) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(fpt_type val)
extended_exponent_fpt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt(fpt_type val, exp_type exp) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(fpt_type val, exp_type exp)
extended_exponent_fpt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^class extended_exponent_fpt {$/;"	c	namespace:boost::polygon::detail
extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int() {}$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:()
extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int(const extended_int<M>& that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int<M>& that)
extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int(const std::vector<uint32>& chunks, bool plus = true) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const std::vector<uint32>& chunks, bool plus = true)
extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int(int32 that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int32 that)
extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int(int64 that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int64 that)
extended_int	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^class extended_int {$/;"	c	namespace:boost::polygon::detail
extened_exponent_fpt_traits	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^class extened_exponent_fpt_traits<fpt64> {$/;"	c	namespace:boost::polygon::detail
extents	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline Interval extents() const {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:() const
extents	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  extents(rectangle_type& extents_rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& extents_rectangle, const polygon_set_type& polygon_set)
extents	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    bool extents(rectangle_type& rect) const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(rectangle_type& rect) const
extents	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline bool polygon_45_set_data<Unit>::extents(rectangle_type& rect) const{$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(rectangle_type& rect) const
extents	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  extents(rectangle_type& extents_rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& extents_rectangle, const polygon_set_type& polygon_set)
extents	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    extents(rectangle_type& extents_rectangle) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(rectangle_type& extents_rectangle) const
extents	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  extents(rectangle_type& extents_rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& extents_rectangle, const polygon_set_type& polygon_set)
extents	/usr/include/boost/polygon/polygon_set_data.hpp	/^    bool extents(rectangle_type& rect) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(rectangle_type& rect)
extents	/usr/include/boost/polygon/polygon_traits.hpp	/^  extents(T1& bounding_box, const T2& polygon) {$/;"	f	namespace:boost::polygon	signature:(T1& bounding_box, const T2& polygon)
extract	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void extract(GraphT& graph) {$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:(GraphT& graph)
extract	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void extract(GraphT& graph) {$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:(GraphT& graph)
extract	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void extract(GraphT& graph) {$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:(GraphT& graph)
fast_ps	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    kPredicateResult fast_ps($/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:( const site_type& left_site, const site_type& right_site, const site_type& new_site, bool reverse_order) const
findAtNext	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  template <class TKey, class T> inline typename std::map<TKey, T>::iterator findAtNext(std::map<TKey, T>& theMap,$/;"	f	namespace:boost::polygon::polygon_formation	signature:(std::map<TKey, T>& theMap, typename std::map<TKey, T>::iterator pos, const TKey& key)
findCross_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline void findCross_(iterator iter) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(iterator iter)
find_distance_to_point_arc	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    fpt_type find_distance_to_point_arc($/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:( const site_type& site, const point_type& point) const
find_distance_to_segment_arc	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    fpt_type find_distance_to_segment_arc($/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:( const site_type& site, const point_type& point) const
firstX_	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typename point_traits<point_type>::coordinate_type firstX_;$/;"	m	class:boost::polygon::iterator_compact_to_points	access:private
first_pt	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  point_data<coordinate_type> first_pt, second_pt, pts[3];$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
flags_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::size_t flags_;$/;"	m	class:boost::polygon::detail::site_event	access:private
flip	/usr/include/boost/polygon/interval_concept.hpp	/^IntervalType>::type& flip($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type axis = 0)
floating_point_type	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  typedef _fpt floating_point_type;$/;"	t	class:boost::polygon::detail::robust_fpt	access:public
form_rectangles	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  void form_rectangles(output_container& output, iterator_type begin, iterator_type end,$/;"	f	namespace:boost::polygon	signature:(output_container& output, iterator_type begin, iterator_type end, orientation_2d orient, rectangle_concept )
forty_five_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct forty_five_domain {};$/;"	s	namespace:boost::polygon
fpt64	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef double fpt64;$/;"	t	namespace:boost::polygon::detail
fpt_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef _fpt fpt_type;$/;"	t	class:boost::polygon::detail::extended_exponent_fpt	access:public
fpt_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef fpt64 fpt_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
fpt_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::fpt_type fpt_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
fpt_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef typename CTT::fpt_type fpt_type;$/;"	t	class:boost::polygon::voronoi_builder	access:public
fpv	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  floating_point_type fpv() const { return fpv_; }$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
fpv_	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  floating_point_type fpv_;$/;"	m	class:boost::polygon::detail::robust_fpt	access:private
fractureHoles_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      int fractureHoles_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
fractureHoles_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    int fractureHoles_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation	access:protected
fractureHoles_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool fractureHoles_;$/;"	m	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:private
fracture_holes_45_by_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  bool fracture_holes_45_by_concept() { return false; }$/;"	f	namespace:boost::polygon	signature:()
fracture_holes_45_by_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  inline bool fracture_holes_45_by_concept<polygon_45_concept>() { return true; }$/;"	f	namespace:boost::polygon	signature:()
fracture_holes_option_by_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct fracture_holes_option_by_type {$/;"	s	namespace:boost::polygon
fracture_holes_option_by_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct fracture_holes_option_by_type<polygon_45_with_holes_concept> {$/;"	s	namespace:boost::polygon
fracture_holes_option_by_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct fracture_holes_option_by_type<polygon_with_holes_concept> {$/;"	s	namespace:boost::polygon
general_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct general_domain {};$/;"	s	namespace:boost::polygon
generalized_intersect	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& generalized_intersect($/;"	f	namespace:boost::polygon	signature:( IntervalType1& lvalue, const IntervalType2& rvalue)
generalized_intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  generalized_intersect(rectangle_type_1& rectangle, const rectangle_type_2& b) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& b)
geometry_concept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct geometry_concept<PolyLine45HoleData<T> > { typedef polygon_45_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct geometry_concept<PolyLine45PolygonData<T> > { typedef polygon_45_with_holes_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct geometry_concept<polygon_45_set_view<ltype, rtype, op_type> > { typedef polygon_45_set_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct geometry_concept<polygon_90_set_view<ltype, rtype, op_type> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct geometry_concept<poly_line_arbitrary_hole_data<T> > { typedef polygon_45_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct geometry_concept<poly_line_arbitrary_polygon_data<T> > { typedef polygon_45_with_holes_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct geometry_concept<polygon_formation::PolyLineHoleData<orientT, Unit> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct geometry_concept<polygon_formation::PolyLinePolygonWithHolesData<orientT, Unit> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  struct geometry_concept<polygon_set_view<ltype, rtype, op_type> > { typedef polygon_set_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/interval_data.hpp	/^struct geometry_concept< interval_data<CType> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept { typedef undefined_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<double> { typedef coordinate_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<float> { typedef coordinate_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<int> { typedef coordinate_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<long double> { typedef coordinate_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<polygon_long_long_type> { typedef coordinate_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/point_data.hpp	/^struct geometry_concept< point_data<CType> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct geometry_concept<view_of<polygon_90_set_concept, T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  struct geometry_concept<polygon_45_set_data<T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct geometry_concept<polygon_90_set_data<T> > { typedef polygon_90_set_concept type; };$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct geometry_concept<view_of<polygon_45_set_concept, T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_set_data.hpp	/^  struct geometry_concept<polygon_set_data<T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_45_data<T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_45_with_holes_data<T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_90_data<T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_90_with_holes_data<T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_data<T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<polygon_with_holes_data<T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<polygon_45_concept, T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<polygon_45_with_holes_concept, T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<polygon_90_concept, T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<polygon_90_with_holes_concept, T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<polygon_concept, T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_concept<view_of<rectangle_concept, T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct geometry_concept<rectangle_data<T> > {$/;"	s	namespace:boost::polygon
geometry_concept	/usr/include/boost/polygon/segment_data.hpp	/^struct geometry_concept<segment_data<CType> > {$/;"	s	namespace:boost::polygon
geometry_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_domain { typedef general_domain type; };$/;"	s	namespace:boost::polygon
geometry_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_45_concept> { typedef forty_five_domain type; };$/;"	s	namespace:boost::polygon
geometry_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_45_with_holes_concept> { typedef forty_five_domain type; };$/;"	s	namespace:boost::polygon
geometry_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_90_concept> { typedef manhattan_domain type; };$/;"	s	namespace:boost::polygon
geometry_domain	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_90_with_holes_concept> { typedef manhattan_domain type; };$/;"	s	namespace:boost::polygon
geometry_domain	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct geometry_domain<rectangle_concept> { typedef manhattan_domain type; };$/;"	s	namespace:boost::polygon
geometry_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef polygon_45_concept geometry_type;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
geometry_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef polygon_45_with_holes_concept geometry_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
geometry_type	/usr/include/boost/polygon/polygon_45_data.hpp	/^  typedef polygon_45_concept geometry_type;$/;"	t	class:boost::polygon::polygon_45_data	access:public
geometry_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef polygon_45_with_holes_concept geometry_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
geometry_type	/usr/include/boost/polygon/polygon_90_data.hpp	/^  typedef polygon_90_concept geometry_type;$/;"	t	class:boost::polygon::polygon_90_data	access:public
geometry_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef polygon_90_with_holes_concept geometry_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
geometry_type	/usr/include/boost/polygon/polygon_data.hpp	/^  typedef polygon_concept geometry_type;$/;"	t	class:boost::polygon::polygon_data	access:public
geometry_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef polygon_with_holes_concept geometry_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
get	/usr/include/boost/polygon/interval_concept.hpp	/^>::type get(const IntervalType& interval, direction_1d dir) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval, direction_1d dir)
get	/usr/include/boost/polygon/interval_data.hpp	/^  coordinate_type get(direction_1d dir) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(direction_1d dir) const
get	/usr/include/boost/polygon/interval_traits.hpp	/^  static coordinate_type get(const interval_type& interval, direction_1d dir) {$/;"	f	struct:boost::polygon::interval_traits	access:public	signature:(const interval_type& interval, direction_1d dir)
get	/usr/include/boost/polygon/point_concept.hpp	/^>::type get(const PointType& point, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(const PointType& point, orientation_2d orient)
get	/usr/include/boost/polygon/point_data.hpp	/^  coordinate_type get(orientation_2d orient) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(orientation_2d orient) const
get	/usr/include/boost/polygon/point_traits.hpp	/^  static coordinate_type get($/;"	f	struct:boost::polygon::point_traits	access:public	signature:( const point_type& point, orientation_2d orient)
get	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline T& get() { return *tp; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:()
get	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void get(output_container& output) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(output_container& output) const
get	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void get(output_container& output) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(output_container& output) const
get	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline T& get() { return *tp; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:()
get	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void get(output_container& output) const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(output_container& output) const
get	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline interval_type get(orientation_2d orient) const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(orientation_2d orient) const
get	/usr/include/boost/polygon/rectangle_concept.hpp	/^  get(const T& rectangle, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(const T& rectangle, orientation_2d orient)
get	/usr/include/boost/polygon/rectangle_concept.hpp	/^  get(const rectangle_type& rectangle, orientation_2d orient, direction_1d dir) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle, orientation_2d orient, direction_1d dir)
get	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline coordinate_type get(direction_2d dir) const {$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(direction_2d dir) const
get	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline interval_data<coordinate_type> get(orientation_2d orient) const {$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(orientation_2d orient) const
get	/usr/include/boost/polygon/rectangle_traits.hpp	/^    static inline interval_type get(const T& rectangle, orientation_2d orient) {$/;"	f	struct:boost::polygon::rectangle_traits	access:public	signature:(const T& rectangle, orientation_2d orient)
get	/usr/include/boost/polygon/segment_concept.hpp	/^get(const Segment& segment, direction_1d dir) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment, direction_1d dir)
get	/usr/include/boost/polygon/segment_data.hpp	/^  point_type get(direction_1d dir) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(direction_1d dir) const
get	/usr/include/boost/polygon/segment_traits.hpp	/^  static point_type get($/;"	f	struct:boost::polygon::segment_traits	access:public	signature:( const segment_type& segment, direction_1d dir)
get	/usr/include/boost/polygon/transform.hpp	/^  scale_factor_type get(orientation_2d orient) const {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(orientation_2d orient) const
getCoord	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    Unit getCoord() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
getCoord	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline Unit ActiveTail<Unit>::getCoord() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
getCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    Unit getCoordinate() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
getCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline Unit ActiveTail<Unit>::getCoordinate() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
getEdge45Direction	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline unsigned int getEdge45Direction(const point_data<Unit>& pt1, const point_data<Unit>& pt2) {$/;"	f	namespace:boost::polygon	signature:(const point_data<Unit>& pt1, const point_data<Unit>& pt2)
getEdge45NormalDirection	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline unsigned int getEdge45NormalDirection(unsigned int dir, int multiplier) {$/;"	f	namespace:boost::polygon	signature:(unsigned int dir, int multiplier)
getElement	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      static inline Scan45Element getElement(const Scan45Vertex& vertex, int index) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:public	signature:(const Scan45Vertex& vertex, int index)
getEndCoord	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    Unit getEndCoord(End end = TAIL) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(End end = TAIL) const
getEndCoord	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline Unit PolyLine<Unit>::getEndCoord(End end) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End end) const
getEndPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    point_data<Unit> getEndPoint(End end = TAIL) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(End end = TAIL) const
getEndPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline point_data<Unit> PolyLine<Unit>::getEndPoint(End end) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End end) const
getHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline const std::list<ActiveTail45*>& getHoles() const { return holesList_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
getHoles	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline const std::list<active_tail_arbitrary*>& getHoles() const { return holesList_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
getHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    const std::list<ActiveTail*>& getHoles() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
getHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline const std::list<ActiveTail<Unit>*>& ActiveTail<Unit>::getHoles() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
getIntersectionPoint	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline point_data<Unit> getIntersectionPoint(const point_data<Unit>& pt1, unsigned int slope1,$/;"	f	namespace:boost::polygon	signature:(const point_data<Unit>& pt1, unsigned int slope1, const point_data<Unit>& pt2, unsigned int slope2)
getMaxCover	/usr/include/boost/polygon/detail/max_cover.hpp	/^    static inline void getMaxCover(cT& outputContainer, Node* node, orientation_2d orient) {$/;"	f	struct:boost::polygon::MaxCover	access:public	signature:(cT& outputContainer, Node* node, orientation_2d orient)
getMaxCover	/usr/include/boost/polygon/detail/max_cover.hpp	/^    static inline void getMaxCover(cT& outputContainer, Node* node, orientation_2d orient,$/;"	f	struct:boost::polygon::MaxCover	access:public	signature:(cT& outputContainer, Node* node, orientation_2d orient, Rectangle rect)
getMaxCover	/usr/include/boost/polygon/detail/max_cover.hpp	/^    static inline void getMaxCover(cT& outputContainer,$/;"	f	struct:boost::polygon::MaxCover	access:public	signature:(cT& outputContainer, const std::vector<Rectangle>& rects, orientation_2d orient)
getOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    orientation_2d getOrient() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
getOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline orientation_2d ActiveTail<Unit>::getOrient() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
getOtherActiveTail	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45* getOtherActiveTail() const { return otherTailp_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
getOtherActiveTail	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary* getOtherActiveTail() const { return otherTailp_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
getOtherActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail* getOtherActiveTail() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
getOtherActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>* ActiveTail<Unit>::getOtherActiveTail() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
getOtherTail	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45* getOtherTail() const { return otherTailp_->tailp_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
getOtherTail	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary* getOtherTail() const { return otherTailp_->tailp_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
getOtherTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine<Unit>* getOtherTail() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
getOtherTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>* ActiveTail<Unit>::getOtherTail() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
getPoint	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Point getPoint() const {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
getPoint	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline Point getPoint() const {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
getPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    point_data<Unit> getPoint(unsigned int index) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(unsigned int index) const
getPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline point_data<Unit> PolyLine<Unit>::getPoint(unsigned int index) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(unsigned int index) const
getTail	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45* getTail() const { return tailp_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
getTail	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary* getTail() const { return tailp_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
getTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine<Unit>* getTail() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
getTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>* ActiveTail<Unit>::getTail() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
getVerticalPair_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline void getVerticalPair_(std::pair<ActiveTail45*, ActiveTail45*>& verticalPair,$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private	signature:(std::pair<ActiveTail45*, ActiveTail45*>& verticalPair, iterator previter)
getVerticalPair_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline void getVerticalPair_(std::pair<active_tail_arbitrary*,$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:private	signature:(std::pair<active_tail_arbitrary*, active_tail_arbitrary*>& verticalPair, iterator previter)
get_45_polygons_T	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  void get_45_polygons_T(T& t, iT begin, iT end) {$/;"	f	namespace:boost::polygon	signature:(T& t, iT begin, iT end)
get_90_dispatch	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  void get_90_dispatch(output_container_type& output, const pst& ps,$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const pst& ps, orientation_2d orient, polygon_90_concept tag)
get_90_dispatch	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  void get_90_dispatch(output_container_type& output, const pst& ps,$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const pst& ps, orientation_2d orient, polygon_90_with_holes_concept tag)
get_90_dispatch	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  void get_90_dispatch(output_container_type& output, const pst& ps,$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const pst& ps, orientation_2d orient, rectangle_concept )
get_axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation get_axis_transformation() const {$/;"	f	class:boost::polygon::transformation	access:public	signature:() const
get_comparison_site	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    const site_type& get_comparison_site(const node_type& node) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:private	signature:(const node_type& node) const
get_comparison_y	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    std::pair<coordinate_type, int> get_comparison_y($/;"	f	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:private	signature:( const node_type& node, bool is_new_node = true) const
get_coordinate_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct get_coordinate_type<view_of<polygon_90_set_concept, T>, polygon_90_set_concept> {$/;"	s	namespace:boost::polygon
get_coordinate_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_coordinate_type {$/;"	s	namespace:boost::polygon
get_coordinate_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_coordinate_type<T, undefined_concept> {$/;"	s	namespace:boost::polygon
get_coordinate_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct get_coordinate_type<view_of<polygon_45_set_concept, T>, polygon_45_set_concept> {$/;"	s	namespace:boost::polygon
get_coordinate_type_2	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_coordinate_type_2 {$/;"	s	namespace:boost::polygon
get_coordinate_type_for_rectangles	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  struct get_coordinate_type_for_rectangles {$/;"	s	namespace:boost::polygon
get_coordinate_type_for_rectangles	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  struct get_coordinate_type_for_rectangles<T, rectangle_concept> {$/;"	s	namespace:boost::polygon
get_corner	/usr/include/boost/polygon/rectangle_concept.hpp	/^  get_corner(point_type& corner_point, const rectangle_type& rectangle, direction_2d direction_facing, direction_1d direction_turning) {$/;"	f	namespace:boost::polygon	signature:(point_type& corner_point, const rectangle_type& rectangle, direction_2d direction_facing, direction_1d direction_turning)
get_d	/usr/include/boost/polygon/gmp_override.hpp	/^    inline double get_d() const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:() const
get_den	/usr/include/boost/polygon/gmp_override.hpp	/^    inline int get_den() const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:() const
get_direction	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d get_direction(direction_1d dir) const;$/;"	p	class:boost::polygon::orientation_2d	access:public	signature:(direction_1d dir) const
get_direction	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d get_direction(direction_1d dir) const;$/;"	p	class:boost::polygon::orientation_3d	access:public	signature:(direction_1d dir) const
get_direction	/usr/include/boost/polygon/isotropy.hpp	/^  direction_2d orientation_2d::get_direction(direction_1d dir) const {$/;"	f	class:boost::polygon::orientation_2d	signature:(direction_1d dir) const
get_direction	/usr/include/boost/polygon/isotropy.hpp	/^  direction_3d orientation_3d::get_direction(direction_1d dir) const {$/;"	f	class:boost::polygon::orientation_3d	signature:(direction_1d dir) const
get_directions	/usr/include/boost/polygon/transform.hpp	/^  void get_directions(direction_2d& horizontal_dir,$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(direction_2d& horizontal_dir, direction_2d& vertical_dir) const
get_directions	/usr/include/boost/polygon/transform.hpp	/^  void get_directions(direction_2d& horizontal_dir,$/;"	f	class:boost::polygon::transformation	access:public	signature:(direction_2d& horizontal_dir, direction_2d& vertical_dir) const
get_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_45_concept tag) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(output_container& output, polygon_45_concept tag) const
get_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_45_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(output_container& output, polygon_45_with_holes_concept tag) const
get_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_concept tag) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(output_container& output, polygon_concept tag) const
get_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(output_container& output, polygon_with_holes_concept tag) const
get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_45_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_45_concept tag) const
get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_45_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_45_with_holes_concept tag) const
get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_90_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_90_concept tag) const
get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_90_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_90_with_holes_concept tag) const
get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_concept tag) const
get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, polygon_with_holes_concept tag) const
get_dispatch	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_dispatch(output_container& output, rectangle_concept ) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& output, rectangle_concept ) const
get_dispatch	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_concept tag) const {$/;"	f	class:boost::polygon::polygon_set_data	access:private	signature:(output_container& output, polygon_concept tag) const
get_dispatch	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void get_dispatch(output_container& output, polygon_with_holes_concept tag) const {$/;"	f	class:boost::polygon::polygon_set_data	access:private	signature:(output_container& output, polygon_with_holes_concept tag) const
get_error_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void get_error_data(polygon_45_set_data& p) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(polygon_45_set_data& p) const
get_error_rects	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void get_error_rects(cT& posE, cT& negE, const pT& p) {$/;"	f	namespace:boost::polygon	signature:(cT& posE, cT& negE, const pT& p)
get_error_rects_shell	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void get_error_rects_shell(cT& posE, cT& negE, iT beginr, iT endr) {$/;"	f	namespace:boost::polygon	signature:(cT& posE, cT& negE, iT beginr, iT endr)
get_fracture	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_fracture(output_container& container, bool fracture_holes, concept_type ) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(output_container& container, bool fracture_holes, concept_type ) const
get_fracture	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void get_fracture(output_container& container, bool fracture_holes, concept_type tag) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:private	signature:(output_container& container, bool fracture_holes, concept_type tag) const
get_fracture	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void get_fracture(output_container& container, bool fracture_holes, concept_type ) const {$/;"	f	class:boost::polygon::polygon_set_data	access:private	signature:(output_container& container, bool fracture_holes, concept_type ) const
get_half	/usr/include/boost/polygon/interval_concept.hpp	/^>::type get_half(const IntervalType& interval, direction_1d dir) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval, direction_1d dir)
get_half	/usr/include/boost/polygon/rectangle_concept.hpp	/^  get_half(const rectangle_type& rectangle, direction_2d dir) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle, direction_2d dir)
get_iterator_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_iterator_type {$/;"	s	namespace:boost::polygon
get_iterator_type_2	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct get_iterator_type_2<view_of<polygon_90_set_concept, T>, polygon_90_set_concept> {$/;"	s	namespace:boost::polygon
get_iterator_type_2	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_iterator_type_2 {$/;"	s	namespace:boost::polygon
get_iterator_type_2	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct get_iterator_type_2<T, undefined_concept> {$/;"	s	namespace:boost::polygon
get_iterator_type_2	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct get_iterator_type_2<view_of<polygon_45_set_concept, T>, polygon_45_set_concept> {$/;"	s	namespace:boost::polygon
get_max_rectangles	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  get_max_rectangles(output_container_type& output, const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set)
get_num	/usr/include/boost/polygon/gmp_override.hpp	/^    inline int get_num() const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:() const
get_perpendicular	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_2d get_perpendicular() const {$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:() const
get_polygons	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  unsigned int get_polygons(output_container& container, iterator_type begin, iterator_type end,$/;"	f	namespace:boost::polygon	signature:(output_container& container, iterator_type begin, iterator_type end, orientation_2d orient, bool fracture_holes, concept_type )
get_polygons	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_polygons(cT& container) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(cT& container) const
get_polygons	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void get_polygons(output_container& output) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(output_container& output) const
get_polygons_with_holes	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_polygons_with_holes(cT& container) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(cT& container) const
get_property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline property_merge_data& get_property_merge_data() { return pmd; }$/;"	f	class:boost::polygon::property_merge	access:public	signature:()
get_rectangles	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  get_rectangles(output_container_type& output, const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set)
get_rectangles	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  get_rectangles(output_container_type& output, const polygon_set_type& polygon_set, orientation_2d slicing_orientation) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set, orientation_2d slicing_orientation)
get_rectangles	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void get_rectangles(output_container& output) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(output_container& output) const
get_rectangles	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void get_rectangles(output_container& output, orientation_2d slicing_orientation) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(output_container& output, orientation_2d slicing_orientation) const
get_sign	/usr/include/boost/polygon/isotropy.hpp	/^    inline int get_sign() const { return val_ * 2 - 1; }$/;"	f	class:boost::polygon::direction_1d	access:public	signature:() const
get_sign	/usr/include/boost/polygon/isotropy.hpp	/^    inline int get_sign() const {return ((is_positive()) << 1) -1;}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
get_sign	/usr/include/boost/polygon/isotropy.hpp	/^    inline int get_sign() const {return ((is_positive()) << 1) -1;}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:() const
get_sqrt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^extended_exponent_fpt<_fpt> get_sqrt(const extended_exponent_fpt<_fpt>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_exponent_fpt<_fpt>& that)
get_sqrt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^T get_sqrt(const T& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& that)
get_sqrt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_fpt<T> get_sqrt(const robust_fpt<T>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_fpt<T>& that)
get_translation	/usr/include/boost/polygon/transform.hpp	/^  void get_translation(point_type& p) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(point_type& p) const
get_trapezoids	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  get_trapezoids(output_container_type& output, const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set)
get_trapezoids	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  get_trapezoids(output_container_type& output, const polygon_set_type& polygon_set, orientation_2d slicing_orientation) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set, orientation_2d slicing_orientation)
get_trapezoids	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_trapezoids(cT& container) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(cT& container) const
get_trapezoids	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void get_trapezoids(cT& container, orientation_2d slicing_orientation) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(cT& container, orientation_2d slicing_orientation) const
get_trapezoids	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  get_trapezoids(output_container_type& output, const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set)
get_trapezoids	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  get_trapezoids(output_container_type& output, const polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(output_container_type& output, const polygon_set_type& polygon_set, orientation_2d orient)
get_trapezoids	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void get_trapezoids(cT& container) const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(cT& container) const
get_trapezoids	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void get_trapezoids(cT& container, orientation_2d slicing_orientation) const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(cT& container, orientation_2d slicing_orientation) const
get_void	/usr/include/boost/polygon/polygon_traits.hpp	/^  template <> struct get_void<gtl_yes> { typedef void type; };$/;"	s	namespace:boost::polygon
get_void	/usr/include/boost/polygon/polygon_traits.hpp	/^  template <typename T> struct get_void {};$/;"	s	namespace:boost::polygon
gmp_int	/usr/include/boost/polygon/gmp_override.hpp	/^    explicit inline gmp_int(long input) : v_(input) {}$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(long input)
gmp_int	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int() {}$/;"	f	class:boost::polygon::gmp_int	access:public	signature:()
gmp_int	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int(const gmp_int& input) : v_(input.v_) {}$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& input)
gmp_int	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int(const mpq_class& input) : v_(input) {}$/;"	f	class:boost::polygon::gmp_int	access:private	signature:(const mpq_class& input)
gmp_int	/usr/include/boost/polygon/gmp_override.hpp	/^  class gmp_int {$/;"	c	namespace:boost::polygon
grow_and	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
grow_and	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set, direction_2d dir,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, direction_2d dir, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
grow_and	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
grow_and	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type low_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type high_bloating)
grow_and	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type bloating)
grow_and	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  grow_and(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type west_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type east_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type south_bloating, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type north_bloating)
gtl_and	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and : gtl_and_c<T::value, T2::value> {};$/;"	s	namespace:boost::polygon	inherits:gtl_and_c
gtl_and	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and : mpl::and_<T, T2> {};$/;"	s	namespace:boost::polygon	inherits:mpl::and_
gtl_and_3	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_3 : mpl::and_<T, T2, T3> {};$/;"	s	namespace:boost::polygon	inherits:mpl::and_
gtl_and_3	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_3 { typedef typename gtl_and<$/;"	s	namespace:boost::polygon
gtl_and_4	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_4 : mpl::and_<T, T2, T3, T4> {};$/;"	s	namespace:boost::polygon	inherits:mpl::and_
gtl_and_4	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_4 { typedef typename gtl_and_3<$/;"	s	namespace:boost::polygon
gtl_and_c	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_c { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
gtl_and_c	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_c<true, true> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
gtl_different_type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_different_type { typedef typename gtl_not<typename gtl_same_type<T, T2>::type>::type type; };$/;"	s	namespace:boost::polygon
gtl_if	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_if {$/;"	s	namespace:boost::polygon
gtl_if	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_if<gtl_yes> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
gtl_ifelse	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct gtl_ifelse {};$/;"	s	namespace:boost::polygon
gtl_ifelse	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct gtl_ifelse<gtl_no, T_IF, T_ELSE> {$/;"	s	namespace:boost::polygon
gtl_ifelse	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct gtl_ifelse<gtl_yes, T_IF, T_ELSE> {$/;"	s	namespace:boost::polygon
gtl_no	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_no : mpl::bool_<false> {};$/;"	s	namespace:boost::polygon	inherits:mpl::bool_
gtl_no	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_no { static const bool value = false; };$/;"	s	namespace:boost::polygon
gtl_not	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_not { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
gtl_not	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_not<gtl_no> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
gtl_or	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
gtl_or	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or<T, T> { typedef T type; };$/;"	s	namespace:boost::polygon
gtl_or_3	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or_3 { typedef typename gtl_or<$/;"	s	namespace:boost::polygon
gtl_or_4	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or_4 { typedef typename gtl_or<$/;"	s	namespace:boost::polygon
gtl_same_type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_same_type { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
gtl_same_type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_same_type<T, T> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
gtl_yes	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_yes : mpl::bool_<true> {};$/;"	s	namespace:boost::polygon	inherits:mpl::bool_
gtl_yes	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_yes { typedef gtl_yes type;$/;"	s	namespace:boost::polygon
guess_orientation	/usr/include/boost/polygon/rectangle_concept.hpp	/^  guess_orientation(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::pair<Point, Point> half_edge;$/;"	t	struct:boost::polygon::scanline_base	access:public
half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::line_intersection	access:private
half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::merge_output_functor	access:public
half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::property_merge	access:protected
half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::half_edge half_edge;$/;"	t	class:boost::polygon::scanline	access:public
half_edge	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef std::pair<Point, Point> half_edge;$/;"	t	struct:boost::polygon::edge_utils	access:public
half_edge_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::pair<property_set, property_set> > half_edge_property;$/;"	t	class:boost::polygon::scanline	access:public
half_perimeter	/usr/include/boost/polygon/rectangle_concept.hpp	/^  half_perimeter(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
handleResizingEdge45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void handleResizingEdge45(polygon_45_set_data<Unit>& sizingSet, point_data<Unit> first,$/;"	f	namespace:boost::polygon	signature:(polygon_45_set_data<Unit>& sizingSet, point_data<Unit> first, point_data<Unit> second, Unit resizing, RoundingOption rounding)
handleResizingEdge45_SQRT1OVER2	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void handleResizingEdge45_SQRT1OVER2(polygon_45_set_data<Unit>& sizingSet, point_data<Unit> first,$/;"	f	namespace:boost::polygon	signature:(polygon_45_set_data<Unit>& sizingSet, point_data<Unit> first, point_data<Unit> second, Unit resizing, CornerOption corner)
handleResizingVertex45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void handleResizingVertex45(polygon_45_set_data<Unit>& sizingSet, const point_data<Unit>& first,$/;"	f	namespace:boost::polygon	signature:(polygon_45_set_data<Unit>& sizingSet, const point_data<Unit>& first, const point_data<Unit>& second, const point_data<Unit>& third, Unit resizing, RoundingOption rounding, CornerOption corner, int multiplier)
handle_input_events	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    iT handle_input_events(result_type& result, result_functor rf, iT begin, iT end) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(result_type& result, result_functor rf, iT begin, iT end)
has_error_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool has_error_data() const { return !error_data_.empty(); }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
has_neg_value	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  bool has_neg_value() const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
has_pos_value	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  bool has_pos_value() const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
has_zero_value	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  bool has_zero_value() const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
haveCurrentRect_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    bool haveCurrentRect_;$/;"	m	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
haveVertex45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool haveVertex45(int index) const { return count[index]; }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(int index) const
have_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool have_vertex_half_edge(int index) const { return count[index]; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(int index) const
headOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    orientation_2d headOrient() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
headOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline orientation_2d PolyLine<Unit>::headOrient() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
headToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool headToHead() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
headToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::headToHead() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
headToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool headToTail() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
headToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::headToTail() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
head_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      bool head_;$/;"	m	class:boost::polygon::polygon_45_formation::ActiveTail45	access:private
head_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      bool head_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:protected
headp_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine* headp_;$/;"	m	class:boost::polygon::polygon_formation::PolyLine	access:private
high	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline coordinate_type high() const { return high_; }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:() const
high	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void high(coordinate_type value) { high_ = value; }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(coordinate_type value)
high	/usr/include/boost/polygon/interval_concept.hpp	/^>::type high(IntervalType& interval,$/;"	f	namespace:boost::polygon	signature:(IntervalType& interval, typename interval_mutable_traits<IntervalType>::coordinate_type value)
high	/usr/include/boost/polygon/interval_concept.hpp	/^>::type high(const IntervalType& interval) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval)
high	/usr/include/boost/polygon/interval_data.hpp	/^  coordinate_type high() const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:() const
high	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data& high(coordinate_type value) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(coordinate_type value)
high	/usr/include/boost/polygon/segment_concept.hpp	/^typename segment_point_type<Segment>::type>::type high(const Segment& segment) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment)
high	/usr/include/boost/polygon/segment_concept.hpp	/^void>::type high(Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Point& point)
high	/usr/include/boost/polygon/segment_data.hpp	/^  point_type high() const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:() const
high	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data& high(const point_type& point) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const point_type& point)
high_	/usr/include/boost/polygon/detail/property_merge.hpp	/^  coordinate_type low_, high_;$/;"	m	class:boost::polygon::property_merge_interval	access:private
high_precision	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef typename high_precision_type<Unit>::type high_precision;$/;"	t	class:boost::polygon::scanline_base::vertex_half_edge	access:public
high_precision	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef typename high_precision_type<Unit>::type high_precision;$/;"	t	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
high_precision_type	/usr/include/boost/polygon/gmp_override.hpp	/^  struct high_precision_type<int> {$/;"	s	namespace:boost::polygon
high_precision_type	/usr/include/boost/polygon/isotropy.hpp	/^  struct high_precision_type {$/;"	s	namespace:boost::polygon
holeType	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef PolyLine45HoleData<Unit> holeType;$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
holeType	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef PolyLine45HoleData<Unit> holeType;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
holeType	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef poly_line_arbitrary_hole_data<Unit> holeType;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:private
hole_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      mutable holeType hole_;$/;"	m	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:private
hole_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef holeType hole_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
hole_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef poly_line_arbitrary_hole_data<Unit> hole_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
hole_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef PolyLineHoleData<orientT, Unit> hole_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
hole_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef polygon_45_data<coordinate_type> hole_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
hole_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef polygon_90_data<coordinate_type> hole_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
hole_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef T hole_type;$/;"	t	struct:boost::polygon::polygon_with_holes_traits	access:public
hole_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::hole_type hole_type;$/;"	t	struct:boost::polygon::polygon_with_holes_traits	access:public
hole_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef view_of<polygon_45_concept, typename polygon_with_holes_traits<T>::hole_type> hole_type;$/;"	t	struct:boost::polygon::view_of	access:public
hole_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef view_of<polygon_90_concept, typename polygon_with_holes_traits<T>::hole_type> hole_type;$/;"	t	struct:boost::polygon::view_of	access:public
hole_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef polygon_data<coordinate_type> hole_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
holesList_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      std::list<ActiveTail45*> holesList_;$/;"	m	class:boost::polygon::polygon_45_formation::ActiveTail45	access:private
holesList_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      std::list<active_tail_arbitrary*> holesList_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:protected
holesList_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    std::list<ActiveTail*> holesList_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail	access:private
holes_	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  std::list<hole_type> holes_;$/;"	m	class:boost::polygon::polygon_45_with_holes_data	access:public
holes_	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  std::list<hole_type> holes_;$/;"	m	class:boost::polygon::polygon_90_with_holes_data	access:private
holes_	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  std::list<hole_type> holes_;$/;"	m	class:boost::polygon::polygon_with_holes_data	access:public
horizontal	/usr/include/boost/polygon/rectangle_concept.hpp	/^  horizontal(T& rectangle, const T2& interval) {$/;"	f	namespace:boost::polygon	signature:(T& rectangle, const T2& interval)
horizontal	/usr/include/boost/polygon/rectangle_concept.hpp	/^  horizontal(const T& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const T& rectangle)
iht	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef typename polygon_with_holes_traits<T>::iterator_holes_type iht;$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* incident_edge() const { return incident_edge_; }$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* incident_edge() const { return incident_edge_; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:() const
incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void incident_edge(voronoi_edge_type* e) { incident_edge_ = e; }$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:(voronoi_edge_type* e)
incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void incident_edge(voronoi_edge_type* e) { incident_edge_ = e; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:(voronoi_edge_type* e)
incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* incident_edge() { return incident_edge_; }$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:()
incident_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* incident_edge() { return incident_edge_; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:()
incident_edge_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* incident_edge_;$/;"	m	class:boost::polygon::voronoi_cell	access:private
incident_edge_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* incident_edge_;$/;"	m	class:boost::polygon::voronoi_vertex	access:private
incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::vector<std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*> > incoming_count;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::vector<std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*> > incoming_count;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
incremented_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        bool incremented_;$/;"	m	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:private
indexEnd_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      unsigned int indexEnd_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:private
index_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      unsigned int index_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:private
index_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  std::size_t index_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
indirect_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef get_iterator_type_2<T, typename geometry_concept<T>::type> indirect_type;$/;"	t	struct:boost::polygon::get_iterator_type	access:public
indirection_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef get_iterator_type<T> indirection_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
init_beach_line	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void init_beach_line(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(OUTPUT* output)
init_beach_line_collinear_sites	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void init_beach_line_collinear_sites(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(OUTPUT* output)
init_beach_line_default	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void init_beach_line_default(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(OUTPUT* output)
init_sites_queue	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void init_sites_queue() {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:()
initial_index	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event& initial_index(std::size_t index) {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(std::size_t index)
initial_index	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::size_t initial_index() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
initial_index_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::size_t initial_index_;$/;"	m	class:boost::polygon::detail::site_event	access:private
insert	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void insert(Unit pos, int id) {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(Unit pos, int id)
insert	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void insert(const TouchScanEvent& that){$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(const TouchScanEvent& that)
insert	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void insert(const std::pair<Interval, int>& intervalId){$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(const std::pair<Interval, int>& intervalId)
insert	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void insert(const polygon_type& polygon_object, const property_type& property_value, bool is_hole = false) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(const polygon_type& polygon_object, const property_type& property_value, bool is_hole = false)
insert	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void insert(const polygon_type& polygon_object, const property_type& property_value, bool is_hole,$/;"	f	class:boost::polygon::property_merge	access:protected	signature:(const polygon_type& polygon_object, const property_type& property_value, bool is_hole, polygon_concept )
insert	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void insert(const polygon_with_holes_type& polygon_with_holes_object, const property_type& property_value, bool is_hole,$/;"	f	class:boost::polygon::property_merge	access:protected	signature:(const polygon_with_holes_type& polygon_with_holes_object, const property_type& property_value, bool is_hole, polygon_with_holes_concept tag)
insert	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void insert(const rectangle_type& rectangle_object, const property_type& property_value, bool is_hole,$/;"	f	class:boost::polygon::property_merge	access:protected	signature:(const rectangle_type& rectangle_object, const property_type& property_value, bool is_hole, rectangle_concept )
insert	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void insert(iT b, iT e, int id) {$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:private	signature:(iT b, iT e, int id)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline unsigned int insert(const GeoObjT& geoObj) {$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:(const GeoObjT& geoObj)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline unsigned int insert(const polygon_45_set_data<coordinate_type>& ps) {$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:(const polygon_45_set_data<coordinate_type>& ps)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const GeoObjT& geoObj, property_type property) {$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:(const GeoObjT& geoObj, property_type property)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const Vertex45Compact& vertex_45, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const Vertex45Compact& vertex_45, bool is_hole = false)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const geometry_type& geometry_object, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const geometry_type& geometry_object, bool is_hole = false)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const polygon_45_set_data& polygon_set, bool is_hole = false);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& polygon_set, bool is_hole = false)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const polygon_45_set_data<coord_type>& polygon_set, bool is_hole = false);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data<coord_type>& polygon_set, bool is_hole = false)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const polygon_45_set_data<coordinate_type>& ps, property_type property) {$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:(const polygon_45_set_data<coordinate_type>& ps, property_type property)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(const polygon_90_set_data<coordinate_type_2>& polygon_set, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_90_set_data<coordinate_type_2>& polygon_set, bool is_hole = false)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(iT input_begin, iT input_end, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(iT input_begin, iT input_end, bool is_hole = false)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert(iterator_type input_begin, iterator_type input_end, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(iterator_type input_begin, iterator_type input_end, bool is_hole = false)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::insert(const polygon_45_set_data<Unit>& polygon_set, bool is_hole) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& polygon_set, bool is_hole)
insert	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::insert(const polygon_45_set_data<coord_type>& polygon_set, bool is_hole) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<coord_type>& polygon_set, bool is_hole)
insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline unsigned int insert(const GeoObjT& geoObj) {$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:(const GeoObjT& geoObj)
insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline unsigned int insert(const polygon_90_set_data<coordinate_type>& ps) {$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:(const polygon_90_set_data<coordinate_type>& ps)
insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const GeoObjT& geoObj, const property_type& property) {$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:(const GeoObjT& geoObj, const property_type& property)
insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const geometry_type& geometry_object, bool is_hole = false, orientation_2d = HORIZONTAL) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const geometry_type& geometry_object, bool is_hole = false, orientation_2d = HORIZONTAL)
insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const polygon_90_set_data& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& polygon_set)
insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const polygon_90_set_data<coordinate_type>& ps, const property_type& property) {$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:(const polygon_90_set_data<coordinate_type>& ps, const property_type& property)
insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const std::pair<coordinate_type, std::pair<coordinate_type, int> >& vertex, bool is_hole = false,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const std::pair<coordinate_type, std::pair<coordinate_type, int> >& vertex, bool is_hole = false, orientation_2d orient = HORIZONTAL)
insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(const std::pair<std::pair<point_data<coordinate_type>, point_data<coordinate_type> >, int>& edge, bool is_hole = false,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const std::pair<std::pair<point_data<coordinate_type>, point_data<coordinate_type> >, int>& edge, bool is_hole = false, orientation_2d orient = HORIZONTAL)
insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(coordinate_type major_coordinate, const std::pair<interval_data<coordinate_type>, int>& edge) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(coordinate_type major_coordinate, const std::pair<interval_data<coordinate_type>, int>& edge)
insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(iT input_begin, iT input_end, orientation_2d orient = HORIZONTAL) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(iT input_begin, iT input_end, orientation_2d orient = HORIZONTAL)
insert	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void insert(iterator_type input_begin, iterator_type input_end, orientation_2d orient = HORIZONTAL) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(iterator_type input_begin, iterator_type input_end, orientation_2d orient = HORIZONTAL)
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline unsigned int insert(const GeoObjT& geoObj) {$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:(const GeoObjT& geoObj)
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline unsigned int insert(const polygon_set_data<coordinate_type>& ps) {$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:(const polygon_set_data<coordinate_type>& ps)
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const element_type& edge, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const element_type& edge, bool is_hole = false)
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const geometry_type& geometry_object, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const geometry_type& geometry_object, bool is_hole = false)
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_45_set_type& ps, bool is_hole, polygon_45_set_concept) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_45_set_type& ps, bool is_hole, polygon_45_set_concept)
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_90_set_type& ps, bool is_hole, polygon_90_set_concept) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_90_set_type& ps, bool is_hole, polygon_90_set_concept)
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_set_data& ps, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& ps, bool is_hole = false)
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_type& polygon_object, bool is_hole, polygon_45_concept ) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_type& polygon_object, bool is_hole, polygon_45_concept )
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_type& polygon_object, bool is_hole, polygon_90_concept ) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_type& polygon_object, bool is_hole, polygon_90_concept )
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_type& polygon_object, bool is_hole, polygon_concept ) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_type& polygon_object, bool is_hole, polygon_concept )
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole, polygon_45_with_holes_concept )
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole, polygon_90_with_holes_concept )
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_with_holes_type& polygon_with_holes_object, bool is_hole, polygon_with_holes_concept )
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(const rectangle_type& rectangle_object, bool is_hole, rectangle_concept ) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const rectangle_type& rectangle_object, bool is_hole, rectangle_concept )
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(iT input_begin, iT input_end, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(iT input_begin, iT input_end, bool is_hole = false)
insert	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert(iterator_type input_begin, iterator_type input_end, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(iterator_type input_begin, iterator_type input_end, bool is_hole = false)
insert	/usr/include/boost/polygon/voronoi.hpp	/^insert(PointIterator first, const PointIterator last, VB* vb) {$/;"	f	namespace:boost::polygon	signature:(PointIterator first, const PointIterator last, VB* vb)
insert	/usr/include/boost/polygon/voronoi.hpp	/^insert(SegmentIterator first, SegmentIterator last, VB* vb) {$/;"	f	namespace:boost::polygon	signature:(SegmentIterator first, SegmentIterator last, VB* vb)
insert	/usr/include/boost/polygon/voronoi.hpp	/^insert(const Point& point, VB* vb) {$/;"	f	namespace:boost::polygon	signature:(const Point& point, VB* vb)
insert	/usr/include/boost/polygon/voronoi.hpp	/^insert(const Segment& segment, VB* vb) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment, VB* vb)
insertEdges	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void insertEdges(T& graph, property_set& p1, property_set& p2) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(T& graph, property_set& p1, property_set& p2)
insert_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline typename ScanData::iterator insert_(Unit pos, T count){$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:private	signature:(Unit pos, T count)
insert_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline typename ScanData::iterator insert_(Unit pos, const std::set<int>& ids){$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(Unit pos, const std::set<int>& ids)
insert_clean	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void insert_clean(const Vertex45Compact& vertex_45, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const Vertex45Compact& vertex_45, bool is_hole = false)
insert_clean	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert_clean(const element_type& edge, bool is_hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const element_type& edge, bool is_hole = false)
insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_45_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_45_concept )
insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_45_set_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_45_set_concept )
insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_45_with_holes_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_45_with_holes_concept )
insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_90_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_90_concept )
insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_90_set_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_90_set_concept )
insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, polygon_90_with_holes_concept ) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, polygon_90_with_holes_concept )
insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, rectangle_concept tag);$/;"	p	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, rectangle_concept tag)
insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_dispatch(const geometry_type& geometry_object, bool is_hole, undefined_concept) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& geometry_object, bool is_hole, undefined_concept)
insert_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::insert_dispatch(const geometry_type& geometry_object,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const geometry_type& geometry_object, bool is_hole, rectangle_concept )
insert_into_view_arg	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  inline void insert_into_view_arg(value_type& dest, const arg_type& arg, orientation_2d orient) {$/;"	f	namespace:boost::polygon	signature:(value_type& dest, const arg_type& arg, orientation_2d orient)
insert_into_view_arg	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  inline void insert_into_view_arg(value_type& dest, const arg_type& arg, orientation_2d orient);$/;"	p	namespace:boost::polygon	signature:(value_type& dest, const arg_type& arg, orientation_2d orient)
insert_into_view_arg	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  inline void insert_into_view_arg(value_type& dest, const arg_type& arg) {$/;"	f	namespace:boost::polygon	signature:(value_type& dest, const arg_type& arg)
insert_into_view_arg	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  inline void insert_into_view_arg(value_type& dest, const arg_type& arg);$/;"	p	namespace:boost::polygon	signature:(value_type& dest, const arg_type& arg)
insert_new_arc	/usr/include/boost/polygon/voronoi_builder.hpp	/^  beach_line_iterator insert_new_arc($/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:( const site_event_type& site_arc1, const site_event_type &site_arc2, const site_event_type& site_event, beach_line_iterator position, OUTPUT* output)
insert_new_edges_into_scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void insert_new_edges_into_scanline() {$/;"	f	class:boost::polygon::scanline	access:public	signature:()
insert_point	/usr/include/boost/polygon/voronoi_builder.hpp	/^  std::size_t insert_point(const int_type& x, const int_type& y) {$/;"	f	class:boost::polygon::voronoi_builder	access:public	signature:(const int_type& x, const int_type& y)
insert_rectangle_into_vector_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void insert_rectangle_into_vector_45(cT& output, const rT& rect, bool is_hole) {$/;"	f	namespace:boost::polygon	signature:(cT& output, const rT& rect, bool is_hole)
insert_segment	/usr/include/boost/polygon/voronoi_builder.hpp	/^  std::size_t insert_segment($/;"	f	class:boost::polygon::voronoi_builder	access:public	signature:( const int_type& x1, const int_type& y1, const int_type& x2, const int_type& y2)
insert_vertex_half_edge_45_pair	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_vertex_half_edge_45_pair(const point_data<Unit>& pt1, point_data<Unit>& pt2,$/;"	p	class:boost::polygon::polygon_45_set_data	access:private	signature:(const point_data<Unit>& pt1, point_data<Unit>& pt2, const point_data<Unit>& pt3, direction_1d wdir)
insert_vertex_half_edge_45_pair	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::insert_vertex_half_edge_45_pair(const point_data<Unit>& pt1, point_data<Unit>& pt2,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const point_data<Unit>& pt1, point_data<Unit>& pt2, const point_data<Unit>& pt3, direction_1d wdir)
insert_vertex_half_edge_45_pair_into_vector	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  bool insert_vertex_half_edge_45_pair_into_vector(cT& output,$/;"	f	namespace:boost::polygon	signature:(cT& output, const pT& pt1, pT& pt2, const pT& pt3, direction_1d wdir)
insert_vertex_sequence	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void insert_vertex_sequence(iT begin_vertex, iT end_vertex,$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(iT begin_vertex, iT end_vertex, direction_1d winding, bool is_hole = false)
insert_vertex_sequence	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::insert_vertex_sequence(iT begin_vertex, iT end_vertex,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(iT begin_vertex, iT end_vertex, direction_1d winding, bool is_hole)
insert_vertex_sequence	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void insert_vertex_sequence(iT begin_vertex, iT end_vertex, direction_1d winding, bool is_hole) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(iT begin_vertex, iT end_vertex, direction_1d winding, bool is_hole)
insert_with_resize	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& insert_with_resize(const geometry_type& poly,$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const geometry_type& poly, coordinate_type resizing, RoundingOption rounding = CLOSEST, CornerOption corner = INTERSECTION, bool hole = false)
insert_with_resize	/usr/include/boost/polygon/polygon_set_data.hpp	/^    insert_with_resize(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc=false, unsigned int num_circle_segments=0, bool hole = false) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc=false, unsigned int num_circle_segments=0, bool hole = false)
insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& insert_with_resize_dispatch(const geometry_type& poly,$/;"	p	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& poly, coordinate_type resizing, RoundingOption rounding, CornerOption corner, bool hole, polygon_45_concept tag)
insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& insert_with_resize_dispatch(const geometry_type& poly,$/;"	p	class:boost::polygon::polygon_45_set_data	access:private	signature:(const geometry_type& poly, coordinate_type resizing, RoundingOption rounding, CornerOption corner, bool hole, polygon_45_with_holes_concept tag)
insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  polygon_45_set_data<Unit>::insert_with_resize_dispatch(const geometry_type& poly,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const geometry_type& poly, coordinate_type resizing, RoundingOption rounding, CornerOption corner, bool hole, polygon_45_concept )
insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  polygon_45_set_data<Unit>::insert_with_resize_dispatch(const geometry_type& poly,$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const geometry_type& poly, coordinate_type resizing, RoundingOption rounding, CornerOption corner, bool hole, polygon_45_with_holes_concept )
insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_set_data.hpp	/^    insert_with_resize_dispatch(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments, bool hole,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments, bool hole, polygon_concept tag)
insert_with_resize_dispatch	/usr/include/boost/polygon/polygon_set_data.hpp	/^    insert_with_resize_dispatch(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments, bool hole,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const geometry_type& poly, coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments, bool hole, polygon_with_holes_concept tag)
insertion_set_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    std::vector<scanline_element> insertion_set_; \/\/edge to be inserted after current scanline stop$/;"	m	class:boost::polygon::scanline	access:public
int32	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef boost::int32_t int32;$/;"	t	namespace:boost::polygon::detail
int64	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef boost::int64_t int64;$/;"	t	namespace:boost::polygon::detail
int_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef int32 int_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
int_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::int_type int_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
int_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef typename CTT::int_type int_type;$/;"	t	class:boost::polygon::voronoi_builder	access:public
int_x2_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef int64 int_x2_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
int_x2_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::int_x2_type int_x2_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
interact	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  interact(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2)
interact	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  interact(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2)
interact	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data& interact(const polygon_90_set_data& that) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& that)
interact	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  interact(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type_1& polygon_set_1, const polygon_set_type_2& polygon_set_2)
interact	/usr/include/boost/polygon/polygon_set_data.hpp	/^    interact(const polygon_set_data& that);$/;"	p	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& that)
interact	/usr/include/boost/polygon/polygon_set_data.hpp	/^  polygon_set_data<T>::interact(const polygon_set_data<T>& that) {$/;"	f	class:boost::polygon::polygon_set_data	signature:(const polygon_set_data<T>& that)
internal_itr	/usr/include/boost/polygon/polygon_traits.hpp	/^      iht internal_itr;$/;"	m	struct:boost::polygon::view_of::iterator_holes_type	access:public
intersect	/usr/include/boost/polygon/interval_concept.hpp	/^>::type intersect($/;"	f	namespace:boost::polygon	signature:( IntervalType1& lvalue, const IntervalType2& rvalue, bool consider_touch = true)
intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  intersect(rectangle_type& rectangle, const interval_type& b,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const interval_type& b, orientation_2d orient, bool consider_touch = true)
intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  intersect(rectangle_type_1& rectangle, const rectangle_type_2& b, bool consider_touch = true) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& b, bool consider_touch = true)
intersect_segments	/usr/include/boost/polygon/segment_utils.hpp	/^intersect_segments($/;"	f	namespace:boost::polygon	signature:( SegmentContainer& result, SegmentIterator first, SegmentIterator last)
intersect_segments	/usr/include/boost/polygon/segment_utils.hpp	/^intersect_segments($/;"	f	namespace:boost::polygon	signature:( std::vector<std::pair<std::size_t, Segment> >& result, SegmentIterator first, SegmentIterator last)
intersects	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool intersects(const half_edge& he1, const half_edge& he2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const half_edge& he1, const half_edge& he2)
intersects	/usr/include/boost/polygon/interval_concept.hpp	/^>::type intersects($/;"	f	namespace:boost::polygon	signature:( const IntervalType1& interval1, const IntervalType2& interval2, bool consider_touch = true)
intersects	/usr/include/boost/polygon/rectangle_concept.hpp	/^  intersects(const rectangle_type_1& rectangle, const rectangle_type_2& b, bool consider_touch = true) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type_1& rectangle, const rectangle_type_2& b, bool consider_touch = true)
intersects	/usr/include/boost/polygon/segment_concept.hpp	/^>::type intersects(const Segment1& segment1, const Segment2& segment2,$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2, bool consider_touch = true)
intersects_grid	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool intersects_grid(Point pt, const half_edge& he) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Point pt, const half_edge& he)
interval_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_concept {};$/;"	s	namespace:boost::polygon
interval_coordinate_type	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_coordinate_type {$/;"	s	namespace:boost::polygon
interval_coordinate_type_by_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_coordinate_type_by_concept {$/;"	s	namespace:boost::polygon
interval_coordinate_type_by_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_coordinate_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
interval_data	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data()$/;"	f	class:boost::polygon::interval_data	access:public	signature:()
interval_data	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data(const interval_data& that) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that)
interval_data	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data(coordinate_type low, coordinate_type high) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(coordinate_type low, coordinate_type high)
interval_data	/usr/include/boost/polygon/interval_data.hpp	/^class interval_data {$/;"	c	namespace:boost::polygon
interval_difference_type	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_difference_type {$/;"	s	namespace:boost::polygon
interval_difference_type_by_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_difference_type_by_concept {$/;"	s	namespace:boost::polygon
interval_difference_type_by_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct interval_difference_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
interval_mutable_traits	/usr/include/boost/polygon/interval_traits.hpp	/^struct interval_mutable_traits {$/;"	s	namespace:boost::polygon
interval_traits	/usr/include/boost/polygon/interval_traits.hpp	/^struct interval_traits {$/;"	s	namespace:boost::polygon
interval_type	/usr/include/boost/polygon/interval_traits.hpp	/^  typedef Interval interval_type;$/;"	t	struct:boost::polygon::interval_mutable_traits	access:public
interval_type	/usr/include/boost/polygon/interval_traits.hpp	/^  typedef Interval interval_type;$/;"	t	struct:boost::polygon::interval_traits	access:public
interval_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef interval_data<coordinate_type> interval_type;$/;"	t	struct:boost::polygon::view_of	access:public
interval_type	/usr/include/boost/polygon/rectangle_data.hpp	/^  typedef interval_data<T> interval_type;$/;"	t	class:boost::polygon::rectangle_data	access:public
interval_type	/usr/include/boost/polygon/rectangle_traits.hpp	/^    typedef typename T::interval_type interval_type;$/;"	t	struct:boost::polygon::rectangle_traits	access:public
inverse	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event& inverse() {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:()
inverse	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation inverse() const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:() const
inverse	/usr/include/boost/polygon/transform.hpp	/^  transformation inverse() const {$/;"	f	class:boost::polygon::transformation	access:public	signature:() const
invert	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1 invert() const {$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:() const
invert	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2 invert() const {$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:() const
invert	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT invert() const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:() const
invert	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT invert() const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:() const
invert	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch invert() const {$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:() const
invert	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge invert() const {$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:() const
invert	/usr/include/boost/polygon/transform.hpp	/^  anisotropic_scale_factor& invert() {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:()
invert	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation& invert() {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:()
invert	/usr/include/boost/polygon/transform.hpp	/^  transformation& invert() {$/;"	f	class:boost::polygon::transformation	access:public	signature:()
isOtherTail	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool isOtherTail(const ActiveTail45& b) const { return &b == otherTailp_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(const ActiveTail45& b) const
isOtherTail	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool isOtherTail(const active_tail_arbitrary& b) const { return &b == otherTailp_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(const active_tail_arbitrary& b) const
isOtherTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool isOtherTail(const ActiveTail& b);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b)
isOtherTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::isOtherTail(const ActiveTail<Unit>& b) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b)
isValid	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool isValid() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
isValid	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::isValid() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
is_45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool is_45() const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:() const
is_45	/usr/include/boost/polygon/polygon_traits.hpp	/^  is_45(const polygon_type& polygon) {$/;"	f	namespace:boost::polygon	signature:(const polygon_type& polygon)
is_45_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    mutable bool is_45_;$/;"	m	class:boost::polygon::polygon_set_data	access:private
is_45_degree	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool is_45_degree(const half_edge& he) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const half_edge& he)
is_45_polygonal_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
is_45_polygonal_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_45_polygonal_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_set_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_45_polygonal_concept	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_with_holes_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_active	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool is_active() const {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:() const
is_active_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool is_active_;$/;"	m	class:boost::polygon::detail::circle_event	access:private
is_any_mutable_polygon_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_any_mutable_polygon_type {$/;"	s	namespace:boost::polygon
is_any_mutable_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_any_mutable_polygon_with_holes_type {$/;"	s	namespace:boost::polygon
is_any_mutable_polygon_without_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_any_mutable_polygon_without_holes_type {$/;"	s	namespace:boost::polygon
is_any_polygon_set_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct is_any_polygon_set_type {$/;"	s	namespace:boost::polygon
is_begin	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool is_begin() const {$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:() const
is_curved	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_curved() const {$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
is_degenerate	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_degenerate() const { return incident_edge_ == NULL; }$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
is_degenerate	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_degenerate() const { return incident_edge_ == NULL; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:() const
is_either_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct is_either_polygon_45_set_type {$/;"	s	namespace:boost::polygon
is_either_polygon_set_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct is_either_polygon_set_type {$/;"	s	namespace:boost::polygon
is_finite	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_finite() const { return vertex0() && vertex1(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
is_hole_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  bool is_hole_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
is_horizontal	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool is_horizontal(const half_edge& he) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const half_edge& he)
is_infinite	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_infinite() const { return !vertex0() || !vertex1(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
is_interval_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct is_interval_concept {$/;"	s	namespace:boost::polygon
is_interval_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct is_interval_concept<interval_concept> {$/;"	s	namespace:boost::polygon
is_inverse	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool is_inverse() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
is_linear	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_linear() const {$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
is_linear_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_linear_edge(const SEvent& site1, const SEvent& site2) const {$/;"	f	class:boost::polygon::voronoi_diagram	access:private	signature:(const SEvent& site1, const SEvent& site2) const
is_manhattan	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool is_manhattan() const { return is_manhattan_; }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
is_manhattan_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    mutable bool is_manhattan_;$/;"	m	class:boost::polygon::polygon_45_set_data	access:private
is_manhattan_polygonal_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
is_manhattan_polygonal_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_manhattan_polygonal_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_manhattan_polygonal_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_with_holes_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_manhattan_polygonal_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_mutable_interval_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct is_mutable_interval_concept {$/;"	s	namespace:boost::polygon
is_mutable_interval_concept	/usr/include/boost/polygon/interval_concept.hpp	/^struct is_mutable_interval_concept<interval_concept> {$/;"	s	namespace:boost::polygon
is_mutable_point_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct is_mutable_point_concept {$/;"	s	namespace:boost::polygon
is_mutable_point_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct is_mutable_point_concept<point_concept> {$/;"	s	namespace:boost::polygon
is_mutable_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_mutable_polygon_45_set_type {$/;"	s	namespace:boost::polygon
is_mutable_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_mutable_polygon_45_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
is_mutable_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_mutable_polygon_45_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
is_mutable_polygon_45_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_45_type {$/;"	s	namespace:boost::polygon
is_mutable_polygon_45_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_45_with_holes_type {$/;"	s	namespace:boost::polygon
is_mutable_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
is_mutable_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_mutable_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_type {$/;"	s	namespace:boost::polygon
is_mutable_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
is_mutable_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
is_mutable_polygon_90_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_90_type {$/;"	s	namespace:boost::polygon
is_mutable_polygon_90_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_90_with_holes_type {$/;"	s	namespace:boost::polygon
is_mutable_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_mutable_polygon_set_type {$/;"	s	namespace:boost::polygon
is_mutable_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_mutable_polygon_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
is_mutable_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_mutable_polygon_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
is_mutable_polygon_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_type {$/;"	s	namespace:boost::polygon
is_mutable_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_mutable_polygon_with_holes_type {$/;"	s	namespace:boost::polygon
is_mutable_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_mutable_rectangle_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
is_mutable_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_mutable_rectangle_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_mutable_segment_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct is_mutable_segment_concept {$/;"	s	namespace:boost::polygon
is_mutable_segment_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct is_mutable_segment_concept<segment_concept> {$/;"	s	namespace:boost::polygon
is_neg	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_neg() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
is_neg	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_neg() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
is_neg	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_neg(const extended_exponent_fpt<_fpt>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_exponent_fpt<_fpt>& that)
is_neg	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_neg(const extended_int<N>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_int<N>& that)
is_neg	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_neg(const T& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& that)
is_neg	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_neg(const robust_fpt<T>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_fpt<T>& that)
is_negative	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool is_negative() const {return !is_positive();}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
is_negative	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool is_negative() const {return !is_positive();}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:() const
is_point	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool is_point() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
is_point_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct is_point_concept {$/;"	s	namespace:boost::polygon
is_point_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct is_point_concept<point_concept> {$/;"	s	namespace:boost::polygon
is_polygon_45_or_90_set_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct is_polygon_45_or_90_set_type {$/;"	s	namespace:boost::polygon
is_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_polygon_45_set_type {$/;"	s	namespace:boost::polygon
is_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_polygon_45_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
is_polygon_45_set_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_polygon_45_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
is_polygon_45_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_45_type {$/;"	s	namespace:boost::polygon
is_polygon_45_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_45_with_holes_type {$/;"	s	namespace:boost::polygon
is_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept { };$/;"	s	namespace:boost::polygon
is_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_with_holes_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_type {$/;"	s	namespace:boost::polygon
is_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
is_polygon_90_set_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
is_polygon_90_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_90_type {$/;"	s	namespace:boost::polygon
is_polygon_90_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_90_with_holes_type {$/;"	s	namespace:boost::polygon
is_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygon_set_type {$/;"	s	namespace:boost::polygon
is_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygon_set_type<std::list<T> > {$/;"	s	namespace:boost::polygon
is_polygon_set_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygon_set_type<std::vector<T> > {$/;"	s	namespace:boost::polygon
is_polygon_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_type {$/;"	s	namespace:boost::polygon
is_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct is_polygon_with_holes_type {$/;"	s	namespace:boost::polygon
is_polygonal_concept	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
is_polygonal_concept	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_polygonal_concept	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_set_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_polygonal_concept	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_with_holes_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_pos	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_pos() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
is_pos	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_pos() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
is_pos	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_pos(const extended_exponent_fpt<_fpt>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_exponent_fpt<_fpt>& that)
is_pos	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_pos(const extended_int<N>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_int<N>& that)
is_pos	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_pos(const T& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& that)
is_pos	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_pos(const robust_fpt<T>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_fpt<T>& that)
is_positive	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool is_positive() const {return (val_ & 1);}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
is_positive	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool is_positive() const {return (val_ & 1);}$/;"	f	class:boost::polygon::direction_3d	access:public	signature:() const
is_primary	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_primary() const {$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
is_primary_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_primary_edge(const SEvent& site1, const SEvent& site2) const {$/;"	f	class:boost::polygon::voronoi_diagram	access:private	signature:(const SEvent& site1, const SEvent& site2) const
is_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_rectangle_concept { typedef gtl_no type; };$/;"	s	namespace:boost::polygon
is_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_rectangle_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	s	namespace:boost::polygon
is_secondary	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  bool is_secondary() const {$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
is_segment	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool is_segment() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
is_segment_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct is_segment_concept {$/;"	s	namespace:boost::polygon
is_segment_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct is_segment_concept<segment_concept> {$/;"	s	namespace:boost::polygon
is_vertical	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool is_vertical() const {$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:() const
is_vertical	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool is_vertical(const half_edge& he) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const half_edge& he)
is_vertical	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  static bool is_vertical(const Point& point1, const Point& point2) {$/;"	f	class:boost::polygon::detail::voronoi_predicates	access:public	signature:(const Point& point1, const Point& point2)
is_vertical	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  static bool is_vertical(const Site& site) {$/;"	f	class:boost::polygon::detail::voronoi_predicates	access:public	signature:(const Site& site)
is_zero	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_zero() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
is_zero	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool is_zero() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
is_zero	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_zero(const extended_exponent_fpt<_fpt>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_exponent_fpt<_fpt>& that)
is_zero	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^bool is_zero(const extended_int<N>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const extended_int<N>& that)
is_zero	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_zero(const T& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& that)
is_zero	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^bool is_zero(const robust_fpt<T>& that) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_fpt<T>& that)
iterEnd_	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  iT iter_, iterEnd_;$/;"	m	class:boost::polygon::iterator_points_to_compact	access:private
iter_	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  iterator_type iter_;$/;"	m	class:boost::polygon::iterator_compact_to_points	access:private
iter_	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  iT iter_, iterEnd_;$/;"	m	class:boost::polygon::iterator_points_to_compact	access:private
iter_end_	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  iterator_type iter_end_;$/;"	m	class:boost::polygon::iterator_compact_to_points	access:private
iterator	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      typedef typename Scan45Data::iterator iterator;$/;"	t	class:boost::polygon::boolean_op_45::Scan45	access:public
iterator	/usr/include/boost/polygon/detail/max_cover.hpp	/^      typedef typename std::vector<Node*>::iterator iterator;$/;"	t	class:boost::polygon::MaxCover::Node	access:public
iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename PolyLine45::iterator iterator;$/;"	t	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public
iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename Polygon45FormationData::iterator iterator;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename Polygon45FormationData::iterator iterator;$/;"	t	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename std::list<Point>::const_iterator iterator;$/;"	t	class:boost::polygon::polygon_45_formation::PolyLine45	access:public
iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename ActiveTail45::iterator iterator;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
iterator	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename ActiveTail45::iterator iterator;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
iterator	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline iterator() : itr_(), ivlIds_(), incremented_(false) {}$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:()
iterator	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline iterator(const iterator& that) : itr_(), ivlIds_(), incremented_(false) { (*this) = that; }$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(const iterator& that)
iterator	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline iterator(typename EventData::const_iterator itr,$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(typename EventData::const_iterator itr, Unit prevPos, Unit curPos, const std::set<int>& ivlIds)
iterator	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      class iterator {$/;"	c	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public
iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef typename poly_line_arbitrary::iterator iterator;$/;"	t	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public
iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef typename std::list<Point>::const_iterator iterator;$/;"	t	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public
iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef iterator_type iterator;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:public
iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_data::iterator iterator;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:protected
iterator	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_data::iterator iterator;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
iterator	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iterator() : pLine_(), pLineEnd_(), index_(), indexEnd_(), startEnd_() {}$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:()
iterator	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iterator(const ActiveTail* at, bool isHole, orientation_2d orient) :$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:(const ActiveTail* at, bool isHole, orientation_2d orient)
iterator	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    class iterator {$/;"	c	class:boost::polygon::polygon_formation::ActiveTail	access:public
iterator	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename std::vector<PolyLinePolygonData>::iterator iterator;$/;"	t	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:public
iterator	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename edge_scanline::iterator iterator;$/;"	t	class:boost::polygon::line_intersection	access:private
iterator	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_type::iterator iterator;$/;"	t	class:boost::polygon::scanline	access:public
iteratorHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iteratorHoles() : itr_() {}$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:()
iteratorHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iteratorHoles(const iteratorHoles& that) : itr_(that.itr_) {}$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(const iteratorHoles& that)
iteratorHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iteratorHoles(typename ActiveTail45::iteratorHoles itr) : itr_(itr) {}$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(typename ActiveTail45::iteratorHoles itr)
iteratorHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef typename std::list<ActiveTail45*>::const_iterator iteratorHoles;$/;"	t	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public
iteratorHoles	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    class iteratorHoles {$/;"	c	class:boost::polygon::PolyLine45PolygonData	access:public
iteratorHoles	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef typename std::list<active_tail_arbitrary*>::const_iterator iteratorHoles;$/;"	t	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public
iteratorHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iteratorHoles() : itr_() {}$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:()
iteratorHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iteratorHoles(typename ActiveTail<Unit>::iteratorHoles itr) : itr_(itr) {}$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:(typename ActiveTail<Unit>::iteratorHoles itr)
iteratorHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    class iteratorHoles {$/;"	c	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
iteratorHoles	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef typename std::list<ActiveTail*>::const_iterator iteratorHoles;$/;"	t	class:boost::polygon::polygon_formation::ActiveTail	access:public
iterator_category	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::polygon::iterator_compact_to_points	access:public
iterator_category	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
iterator_category	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
iterator_category	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
iterator_category	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef std::forward_iterator_tag iterator_category;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public
iterator_category	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef std::forward_iterator_tag iterator_category;$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
iterator_compact_to_points	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline iterator_compact_to_points() : iter_(), iter_end_(), pt_(), firstX_(), orient_() {}$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:()
iterator_compact_to_points	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline iterator_compact_to_points(iterator_type iter, iterator_type iter_end) :$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:(iterator_type iter, iterator_type iter_end)
iterator_compact_to_points	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^class iterator_compact_to_points {$/;"	c	namespace:boost::polygon
iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set() : itrb(), itre(), itrhib(), itrhie(), itrhb(), itrhe(), orient_(), is_hole_(), started_holes() {}$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:()
iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set() : rectangle_(), vertex_(), corner_(4), orient_(), is_hole_() {}$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:()
iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set() : vertex_(), itrb(), itre(), last_vertex_(), is_hole_(), multiplier_(), first_pt(), second_pt(), pts(), use_wrap(), orient_(), polygon_index(-1) {}$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:()
iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set(const iterator_geometry_to_set& that) :$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const iterator_geometry_to_set& that)
iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set(const polygon_type& polygon, direction_1d dir, orientation_2d orient = HORIZONTAL, bool is_hole = false, bool winding_override = false, direction_1d w = CLOCKWISE) :$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const polygon_type& polygon, direction_1d dir, orientation_2d orient = HORIZONTAL, bool is_hole = false, bool winding_override = false, direction_1d w = CLOCKWISE)
iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set(const polygon_with_holes_type& polygon, direction_1d dir,$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const polygon_with_holes_type& polygon, direction_1d dir, orientation_2d orient = HORIZONTAL, bool is_hole = false, bool = false, direction_1d = CLOCKWISE)
iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set(const rectangle_type& rectangle, direction_1d dir,$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const rectangle_type& rectangle, direction_1d dir, orientation_2d orient = HORIZONTAL, bool is_hole = false, bool = false, direction_1d = CLOCKWISE)
iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^class iterator_geometry_to_set {};$/;"	c	namespace:boost::polygon
iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^class iterator_geometry_to_set<polygon_90_concept, polygon_type> {$/;"	c	namespace:boost::polygon
iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^class iterator_geometry_to_set<polygon_90_with_holes_concept, polygon_with_holes_type> {$/;"	c	namespace:boost::polygon
iterator_geometry_to_set	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^class iterator_geometry_to_set<rectangle_concept, rectangle_type> {$/;"	c	namespace:boost::polygon
iterator_holes_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef iteratorHoles iterator_holes_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
iterator_holes_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator_holes_type() : hole_(), itr_() {}$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:()
iterator_holes_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator_holes_type(const iterator_holes_type& that) : hole_(that.hole_), itr_(that.itr_) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(const iterator_holes_type& that)
iterator_holes_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator_holes_type(typename active_tail_arbitrary::iteratorHoles itr) : hole_(), itr_(itr) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(typename active_tail_arbitrary::iteratorHoles itr)
iterator_holes_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class iterator_holes_type {$/;"	c	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
iterator_holes_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef iteratorHoles iterator_holes_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
iterator_holes_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef typename std::list<polygon_45_data<coordinate_type> >::const_iterator iterator_holes_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
iterator_holes_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef typename std::list<polygon_90_data<coordinate_type> >::const_iterator iterator_holes_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
iterator_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^      iterator_holes_type() : internal_itr() {}$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:()
iterator_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^      iterator_holes_type(iht iht_in) : internal_itr(iht_in) {}$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:(iht iht_in)
iterator_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    struct iterator_holes_type {$/;"	s	struct:boost::polygon::view_of	access:public
iterator_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef const hole_type* iterator_holes_type;$/;"	t	struct:boost::polygon::polygon_with_holes_traits	access:public
iterator_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::iterator_holes_type iterator_holes_type;$/;"	t	struct:boost::polygon::polygon_with_holes_traits	access:public
iterator_holes_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef typename std::list<polygon_data<coordinate_type> >::const_iterator iterator_holes_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
iterator_points_to_compact	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline iterator_points_to_compact() : iter_(), iterEnd_(), orient_(), coord_() {}$/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:()
iterator_points_to_compact	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline iterator_points_to_compact(const iterator_points_to_compact& that) : $/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:(const iterator_points_to_compact& that)
iterator_points_to_compact	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline iterator_points_to_compact(iT iter, iT iterEnd) : $/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:(iT iter, iT iterEnd)
iterator_points_to_compact	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^class iterator_points_to_compact {$/;"	c	namespace:boost::polygon
iterator_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef iterator iterator_type;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
iterator_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef iterator iterator_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
iterator_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef typename polygon_45_set_view<ltype, rtype, op_type>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
iterator_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef typename value_type::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_45_set_view	access:public
iterator_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef typename polygon_90_set_view<ltype, rtype, op_type>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
iterator_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef typename value_type::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_90_set_view	access:public
iterator_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename active_tail_arbitrary::iterator iterator_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:public
iterator_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename active_tail_arbitrary::iterator iterator_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
iterator_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef iterator_compact_to_points<compact_iterator_type, point_data<coordinate_type> > iterator_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public
iterator_type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef iterator_compact_to_points<compact_iterator_type, point_data<coordinate_type> > iterator_type;$/;"	t	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public
iterator_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef typename polygon_set_view<ltype, rtype, op_type>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
iterator_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef typename value_type::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_set_view	access:public
iterator_type	/usr/include/boost/polygon/polygon_45_data.hpp	/^  typedef typename std::vector<point_data<coordinate_type> >::const_iterator iterator_type;$/;"	t	class:boost::polygon::polygon_45_data	access:public
iterator_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename std::vector<polygon_90_with_holes_data<coordinate_type> >::const_iterator iterator_type;$/;"	t	struct:boost::polygon::view_of	access:public
iterator_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename view_of<polygon_90_set_concept, T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
iterator_type	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename value_type::const_iterator iterator_type;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
iterator_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename get_iterator_type<T>::type iterator_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
iterator_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename polygon_45_set_data<T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
iterator_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef typename polygon_45_data<T>::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
iterator_type	/usr/include/boost/polygon/polygon_90_data.hpp	/^  typedef iterator_compact_to_points<compact_iterator_type, point_data<coordinate_type> > iterator_type;$/;"	t	class:boost::polygon::polygon_90_data	access:public
iterator_type	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    typedef typename std::vector<std::pair<coordinate_type, std::pair<coordinate_type, int> > >::const_iterator iterator_type;$/;"	t	class:boost::polygon::polygon_90_set_data	access:public
iterator_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename get_iterator_type<T>::type iterator_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
iterator_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename polygon_90_set_data<T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
iterator_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef typename polygon_90_data<T>::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
iterator_type	/usr/include/boost/polygon/polygon_data.hpp	/^  typedef typename std::vector<point_data<coordinate_type> >::const_iterator iterator_type;$/;"	t	class:boost::polygon::polygon_data	access:public
iterator_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename std::vector<polygon_45_with_holes_data<coordinate_type> >::const_iterator iterator_type;$/;"	t	struct:boost::polygon::view_of	access:public
iterator_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename view_of<polygon_45_set_concept, T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
iterator_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef typename value_type::const_iterator iterator_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
iterator_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename get_iterator_type<T>::type iterator_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
iterator_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename polygon_set_data<T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
iterator_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef iterator_compact_to_points<typename polygon_90_traits<T>::compact_iterator_type, point_data<coordinate_type> > iterator_type;$/;"	t	struct:boost::polygon::polygon_traits_90	access:public
iterator_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::iterator_type iterator_type;$/;"	t	struct:boost::polygon::polygon_traits_general	access:public
iterator_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename polygon_traits<T>::iterator_type iterator_type;$/;"	t	struct:boost::polygon::view_of	access:public
iterator_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef typename polygon_data<T>::iterator_type iterator_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
itr	/usr/include/boost/polygon/detail/max_cover.hpp	/^      typename Node::iterator itr;$/;"	m	struct:boost::polygon::MaxCover::stack_element	access:public
itr_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typename ActiveTail45::iteratorHoles itr_;$/;"	m	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:private
itr_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        typename EventData::const_iterator itr_;$/;"	m	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:private
itr_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typename active_tail_arbitrary::iteratorHoles itr_;$/;"	m	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:private
itr_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      typename ActiveTail<Unit>::iteratorHoles itr_;$/;"	m	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:private
itrb	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set<polygon_90_concept, polygon_with_holes_type> itrb, itre;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
itrb	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typename polygon_traits<polygon_type>::iterator_type itrb, itre;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
itre	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set<polygon_90_concept, polygon_with_holes_type> itrb, itre;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
itre	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typename polygon_traits<polygon_type>::iterator_type itrb, itre;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
itrhb	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typename polygon_with_holes_traits<polygon_with_holes_type>::iterator_holes_type itrhb, itrhe;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
itrhe	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typename polygon_with_holes_traits<polygon_with_holes_type>::iterator_holes_type itrhb, itrhe;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
itrhib	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set<polygon_90_concept, typename polygon_with_holes_traits<polygon_with_holes_type>::hole_type> itrhib, itrhie;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
itrhie	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  iterator_geometry_to_set<polygon_90_concept, typename polygon_with_holes_traits<polygon_with_holes_type>::hole_type> itrhib, itrhie;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
ivlIds_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        std::pair<Interval, std::set<int> > ivlIds_;$/;"	m	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:private
join	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool join(ActiveTail45* tail) {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(ActiveTail45* tail)
join	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool join(active_tail_arbitrary* tail) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(active_tail_arbitrary* tail)
joinChains	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      static inline ActiveTail45* joinChains(Point point, ActiveTail45* at1, ActiveTail45* at2, bool solid,$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(Point point, ActiveTail45* at1, ActiveTail45* at2, bool solid, cT& output)
joinChains	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      static inline active_tail_arbitrary* joinChains(Point point, active_tail_arbitrary* at1, active_tail_arbitrary* at2, bool solid,$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(Point point, active_tail_arbitrary* at1, active_tail_arbitrary* at2, bool solid, cT& output)
joinChains	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    static ActiveTail* joinChains(ActiveTail* at1, ActiveTail* at2, bool solid, std::vector<Unit>& outBufferTmp);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(ActiveTail* at1, ActiveTail* at2, bool solid, std::vector<Unit>& outBufferTmp)
joinChains	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    static ActiveTail* joinChains(ActiveTail* at1, ActiveTail* at2, bool solid, typename std::vector<PolygonT>& outBufferTmp);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(ActiveTail* at1, ActiveTail* at2, bool solid, typename std::vector<PolygonT>& outBufferTmp)
joinChains	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>* ActiveTail<Unit>::joinChains(ActiveTail<Unit>* at1, ActiveTail<Unit>* at2, bool solid, std::vector<Unit>& outBufferTmp)$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(ActiveTail<Unit>* at1, ActiveTail<Unit>* at2, bool solid, std::vector<Unit>& outBufferTmp)
joinChains	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>* ActiveTail<Unit>::joinChains(ActiveTail<Unit>* at1, ActiveTail<Unit>* at2, bool solid,$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(ActiveTail<Unit>* at1, ActiveTail<Unit>* at2, bool solid, std::vector<PolygonT>& outBufferTmp)
joinHeadToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinHeadToHead(PolyLine& that);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that)
joinHeadToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinHeadToHead(PolyLine<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that)
joinHeadToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinHeadToTail(PolyLine& that);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that)
joinHeadToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinHeadToTail(PolyLine<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that)
joinTailToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinTailToHead(PolyLine& that);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that)
joinTailToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinTailToHead(PolyLine<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that)
joinTailToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinTailToTail(PolyLine& that);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that)
joinTailToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinTailToTail(PolyLine<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that)
joinTo	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinTo(End thisEnd, PolyLine& that, End end);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(End thisEnd, PolyLine& that, End end)
joinTo	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinTo(End thisEnd, PolyLine<Unit>& that, End end) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End thisEnd, PolyLine<Unit>& that, End end)
joinToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinToHead(PolyLine& that, End end);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that, End end)
joinToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinToHead(PolyLine<Unit>& that, End end) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that, End end)
joinToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinToTail(PolyLine& that, End end);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(PolyLine& that, End end)
joinToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinToTail(PolyLine<Unit>& that, End end) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(PolyLine<Unit>& that, End end)
joinTo_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& joinTo_(End thisEnd, PolyLine& that, End end);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:private	signature:(End thisEnd, PolyLine& that, End end)
joinTo_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::joinTo_(End thisEnd, PolyLine<Unit>& that, End end) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End thisEnd, PolyLine<Unit>& that, End end)
join_with	/usr/include/boost/polygon/interval_concept.hpp	/^>::type join_with(IntervalType1& interval1, const IntervalType2& interval2) {$/;"	f	namespace:boost::polygon	signature:(IntervalType1& interval1, const IntervalType2& interval2)
join_with	/usr/include/boost/polygon/rectangle_concept.hpp	/^  join_with(rectangle_type_1& rectangle, const rectangle_type_2& b) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& b)
justBefore_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int *justBefore_;$/;"	m	class:boost::polygon::boolean_op_45::lessScan45Element	access:private
justBefore_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int *justBefore_;$/;"	m	class:boost::polygon::boolean_op_45::lessVertex45	access:private
justBefore_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int justBefore_;$/;"	m	class:boost::polygon::boolean_op_45::Scan45	access:public
justBefore_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      int justBefore_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
justBefore_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      int justBefore_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
justBefore_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      int *justBefore_;$/;"	m	class:boost::polygon::scanline_base::less_half_edge	access:private
justBefore_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      int *justBefore_;$/;"	m	class:boost::polygon::scanline_base::less_vertex_half_edge	access:private
justBefore_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    int justBefore_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation	access:protected
just_before_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    int just_before_;$/;"	m	class:boost::polygon::scanline	access:public
kPredicateResult	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    enum kPredicateResult {$/;"	g	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private
keep	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  keep(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::area_type min_area, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::area_type max_area, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_width, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_width, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_height, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_height)
keep	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  keep(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_area, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_area, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_width, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_width, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_height, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_height)
keep	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  keep(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::area_type min_area, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::area_type max_area, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_width, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_width, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type min_height, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type max_height)
key_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef detail::beach_line_node_key<site_event_type> key_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
last_vertex_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  bool last_vertex_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
lazy_circle_formation_functor	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class lazy_circle_formation_functor {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
lazy_disable_if	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_disable_if : public lazy_disable_if_c<Cond::value, T> {};$/;"	s	namespace:boost	inherits:lazy_disable_if_c
lazy_disable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_disable_if_c {$/;"	s	namespace:boost
lazy_disable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_disable_if_c<true, T> {};$/;"	s	namespace:boost
lazy_enable_if	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_enable_if : public lazy_enable_if_c<Cond::value, T> {};$/;"	s	namespace:boost	inherits:lazy_enable_if_c
lazy_enable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_enable_if_c {$/;"	s	namespace:boost
lazy_enable_if_c	/usr/include/boost/polygon/isotropy.hpp	/^    struct lazy_enable_if_c<false, T> {};$/;"	s	namespace:boost
left	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d left() const {return turn(HIGH);}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
left_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  beach_line_node_key& left_site(const site_type &site) {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:(const site_type &site)
left_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  const site_type &left_site() const {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:() const
left_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_type &left_site() {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:()
left_site_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_type left_site_;$/;"	m	class:boost::polygon::detail::beach_line_node_key	access:private
length	/usr/include/boost/polygon/segment_concept.hpp	/^length(const Segment& segment) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment)
lessEdgeAssociation	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline lessEdgeAssociation() {}$/;"	f	class:boost::polygon::MaxCover::lessEdgeAssociation	access:public	signature:()
lessEdgeAssociation	/usr/include/boost/polygon/detail/max_cover.hpp	/^    class lessEdgeAssociation : public std::binary_function<const EdgeAssociation&, const EdgeAssociation&, bool> {$/;"	c	struct:boost::polygon::MaxCover	inherits:std::binary_function	access:public
lessPropertyCount	/usr/include/boost/polygon/detail/property_merge.hpp	/^    lessPropertyCount() {}$/;"	f	struct:boost::polygon::merge_scanline::lessPropertyCount	access:public	signature:()
lessPropertyCount	/usr/include/boost/polygon/detail/property_merge.hpp	/^  struct lessPropertyCount {$/;"	s	class:boost::polygon::merge_scanline	access:private
lessScan45Element	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45Element() : x_(0), justBefore_(0) {}$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Element	access:public	signature:()
lessScan45Element	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45Element(Unit *x, int *justBefore) : x_(x), justBefore_(justBefore) {}$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Element	access:public	signature:(Unit *x, int *justBefore)
lessScan45Element	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45Element(const lessScan45Element& that) : x_(that.x_), justBefore_(that.justBefore_) {}$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Element	access:public	signature:(const lessScan45Element& that)
lessScan45Element	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class lessScan45Element {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
lessScan45ElementRise	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45ElementRise() {} \/\/default constructor is only constructor$/;"	f	class:boost::polygon::boolean_op_45::lessScan45ElementRise	access:public	signature:()
lessScan45ElementRise	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class lessScan45ElementRise : public std::binary_function<Scan45Element, Scan45Element, bool> {$/;"	c	struct:boost::polygon::boolean_op_45	inherits:std::binary_function	access:public
lessScan45Point	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^        inline lessScan45Point() {} \/\/default constructor is only constructor$/;"	f	class:boost::polygon::boolean_op_45::Scan45::lessScan45Point	access:public	signature:()
lessScan45Point	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      class lessScan45Point : public std::binary_function<Point, Point, bool> {$/;"	c	class:boost::polygon::boolean_op_45::Scan45	inherits:std::binary_function	access:public
lessScan45Vertex	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45Vertex() {} \/\/default constructor is only constructor$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Vertex	access:public	signature:()
lessScan45Vertex	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class lessScan45Vertex {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
lessVertex45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessVertex45() : x_(0), justBefore_() {}$/;"	f	class:boost::polygon::boolean_op_45::lessVertex45	access:public	signature:()
lessVertex45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessVertex45(Unit *x, int *justBefore) : x_(x), justBefore_(justBefore) {}$/;"	f	class:boost::polygon::boolean_op_45::lessVertex45	access:public	signature:(Unit *x, int *justBefore)
lessVertex45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessVertex45(const lessVertex45& that) : x_(that.x_), justBefore_(that.justBefore_) {}$/;"	f	class:boost::polygon::boolean_op_45::lessVertex45	access:public	signature:(const lessVertex45& that)
lessVertex45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    class lessVertex45 {$/;"	c	struct:boost::polygon::boolean_op_45	access:public
lessVertex45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef typename boolean_op_45<Unit>::lessVertex45 lessVertex45;$/;"	t	struct:boost::polygon::polygon_45_formation	access:public
lessVertex45Compact	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    struct lessVertex45Compact {$/;"	s	struct:boost::polygon::polygon_45_touch	access:public
lessVertex45Compact	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    struct lessVertex45Compact {$/;"	s	struct:boost::polygon::polygon_45_property_merge	access:public
less_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge() : x_(0), justBefore_(0), pack_(0) {}$/;"	f	class:boost::polygon::scanline_base::less_half_edge	access:public	signature:()
less_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge(Unit *x, int *justBefore, evalAtXforYPack * packIn) : x_(x), justBefore_(justBefore), pack_(packIn) {}$/;"	f	class:boost::polygon::scanline_base::less_half_edge	access:public	signature:(Unit *x, int *justBefore, evalAtXforYPack * packIn)
less_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge(const less_half_edge& that) : x_(that.x_), justBefore_(that.justBefore_),$/;"	f	class:boost::polygon::scanline_base::less_half_edge	access:public	signature:(const less_half_edge& that)
less_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class less_half_edge : public std::binary_function<half_edge, half_edge, bool> {$/;"	c	struct:boost::polygon::scanline_base	inherits:std::binary_function	access:public
less_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_half_edge less_half_edge;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
less_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_half_edge less_half_edge;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
less_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_half_edge less_half_edge;$/;"	t	class:boost::polygon::line_intersection	access:private
less_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_half_edge less_half_edge;$/;"	t	class:boost::polygon::property_merge	access:protected
less_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_half_edge less_half_edge;$/;"	t	class:boost::polygon::scanline	access:public
less_half_edge_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge_count() : pt_() {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_half_edge_count	access:public	signature:()
less_half_edge_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge_count(Point point) : pt_(point) {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_half_edge_count	access:public	signature:(Point point)
less_half_edge_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class less_half_edge_count : public std::binary_function<vertex_half_edge, vertex_half_edge, bool> {$/;"	c	class:boost::polygon::polygon_arbitrary_formation	inherits:std::binary_function	access:public
less_half_edge_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::less_half_edge_count less_half_edge_count;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
less_half_edge_pair	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_half_edge_pair(const Point& pt) : pt_(pt) {}$/;"	f	class:boost::polygon::property_merge::less_half_edge_pair	access:public	signature:(const Point& pt)
less_half_edge_pair	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class less_half_edge_pair {$/;"	c	class:boost::polygon::property_merge	access:public
less_incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_incoming_count() : pt_() {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_incoming_count	access:public	signature:()
less_incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_incoming_count(Point point) : pt_(point) {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_incoming_count	access:public	signature:(Point point)
less_incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class less_incoming_count : public std::binary_function<std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*>,$/;"	c	class:boost::polygon::polygon_arbitrary_formation	inherits:std::binary_function	access:public
less_incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::less_incoming_count less_incoming_count;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
less_point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_point() {}$/;"	f	class:boost::polygon::scanline_base::less_point	access:public	signature:()
less_point	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class less_point : public std::binary_function<Point, Point, bool> {$/;"	c	struct:boost::polygon::scanline_base	inherits:std::binary_function	access:public
less_point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_point less_point;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
less_point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_point less_point;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
less_point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_point less_point;$/;"	t	class:boost::polygon::line_intersection	access:private
less_point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_point less_point;$/;"	t	class:boost::polygon::property_merge	access:protected
less_point	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::less_point less_point;$/;"	t	class:boost::polygon::scanline	access:public
less_point	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline less_point() {}$/;"	f	class:boost::polygon::edge_utils::less_point	access:public	signature:()
less_point	/usr/include/boost/polygon/polygon_traits.hpp	/^    class less_point : public std::binary_function<Point, Point, bool> {$/;"	c	struct:boost::polygon::edge_utils	inherits:std::binary_function	access:public
less_point_down_slope	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      inline less_point_down_slope() {}$/;"	f	class:boost::polygon::line_intersection::less_point_down_slope	access:public	signature:()
less_point_down_slope	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class less_point_down_slope : public std::binary_function<Point, Point, bool> {$/;"	c	class:boost::polygon::line_intersection	inherits:std::binary_function	access:public
less_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^    inline less_rectangle_concept(orientation_2d orient = VERTICAL) : orient_(orient) {}$/;"	f	class:boost::polygon::less_rectangle_concept	access:public	signature:(orientation_2d orient = VERTICAL)
less_rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  class less_rectangle_concept {$/;"	c	namespace:boost::polygon
less_slope	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool less_slope(area_type dx1, area_type dy1, area_type dx2, area_type dy2) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(area_type dx1, area_type dy1, area_type dx2, area_type dy2)
less_slope	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool less_slope(const Unit& x, const Unit& y,$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(const Unit& x, const Unit& y, const Point& pt1, const Point& pt2)
less_slope	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline bool less_slope(area_type dx1, area_type dy1, area_type dx2, area_type dy2) {$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(area_type dx1, area_type dy1, area_type dx2, area_type dy2)
less_slope	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline bool less_slope(const Unit& x, const Unit& y,$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(const Unit& x, const Unit& y, const Point& pt1, const Point& pt2)
less_vertex_data	/usr/include/boost/polygon/detail/property_merge.hpp	/^    less_vertex_data() {}$/;"	f	class:boost::polygon::merge_scanline::less_vertex_data	access:public	signature:()
less_vertex_data	/usr/include/boost/polygon/detail/property_merge.hpp	/^  class less_vertex_data {$/;"	c	class:boost::polygon::merge_scanline	access:private
less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data() : pack_() {}$/;"	f	class:boost::polygon::arbitrary_boolean_op::less_vertex_data	access:public	signature:()
less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data() : pack_() {}$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction::less_vertex_data	access:public	signature:()
less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data() : pack_() {}$/;"	f	class:boost::polygon::property_merge::less_vertex_data	access:public	signature:()
less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data(typename scanline_base<Unit>::evalAtXforYPack* pack) : pack_(pack) {}$/;"	f	class:boost::polygon::arbitrary_boolean_op::less_vertex_data	access:public	signature:(typename scanline_base<Unit>::evalAtXforYPack* pack)
less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data(typename scanline_base<Unit>::evalAtXforYPack* pack) : pack_(pack) {}$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction::less_vertex_data	access:public	signature:(typename scanline_base<Unit>::evalAtXforYPack* pack)
less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      less_vertex_data(typename scanline_base<Unit>::evalAtXforYPack* pack) : pack_(pack) {}$/;"	f	class:boost::polygon::property_merge::less_vertex_data	access:public	signature:(typename scanline_base<Unit>::evalAtXforYPack* pack)
less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class less_vertex_data {$/;"	c	class:boost::polygon::arbitrary_boolean_op	access:private
less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class less_vertex_data {$/;"	c	class:boost::polygon::arbitrary_connectivity_extraction	access:private
less_vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class less_vertex_data {$/;"	c	class:boost::polygon::property_merge	access:protected
less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_vertex_half_edge() : x_(0), justBefore_(0) {}$/;"	f	class:boost::polygon::scanline_base::less_vertex_half_edge	access:public	signature:()
less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_vertex_half_edge(Unit *x, int *justBefore) : x_(x), justBefore_(justBefore) {}$/;"	f	class:boost::polygon::scanline_base::less_vertex_half_edge	access:public	signature:(Unit *x, int *justBefore)
less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_vertex_half_edge(const less_vertex_half_edge& that) : x_(that.x_), justBefore_(that.justBefore_) {}$/;"	f	class:boost::polygon::scanline_base::less_vertex_half_edge	access:public	signature:(const less_vertex_half_edge& that)
less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class less_vertex_half_edge : public std::binary_function<vertex_half_edge, vertex_half_edge, bool> {$/;"	c	struct:boost::polygon::scanline_base	inherits:std::binary_function	access:public
less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::less_vertex_half_edge less_vertex_half_edge;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
less_vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::less_vertex_half_edge less_vertex_half_edge;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
line_intersection	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class line_intersection : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
list_iterator_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef typename std::list<T>::iterator list_iterator_type;$/;"	t	class:boost::polygon::detail::ordered_queue	access:private
ll	/usr/include/boost/polygon/rectangle_concept.hpp	/^  ll(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
local_abs	/usr/include/boost/polygon/polygon_traits.hpp	/^  Unit local_abs(Unit value) { return value < 0 ? (Unit)-value : value; }$/;"	f	namespace:boost::polygon	signature:(Unit value)
lookUp_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline iterator lookUp_(Unit y){$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(Unit y)
lookUp_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iterator lookUp_(Unit y){$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private	signature:(Unit y)
lookUp_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iterator lookUp_(Unit y){$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private	signature:(Unit y)
lookUp_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iterator lookUp_(Unit y){$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:protected	signature:(Unit y)
lookup_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline typename ScanData::iterator lookup_(Unit pos){$/;"	f	class:boost::polygon::boolean_op::BooleanOp	access:private	signature:(Unit pos)
lookup_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline typename ScanData::iterator lookup_(Unit pos){$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:private	signature:(Unit pos)
low	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline coordinate_type low() const { return low_; }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:() const
low	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void low(coordinate_type value) { low_ = value; }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(coordinate_type value)
low	/usr/include/boost/polygon/interval_concept.hpp	/^>::type low(IntervalType& interval,$/;"	f	namespace:boost::polygon	signature:(IntervalType& interval, typename interval_mutable_traits<IntervalType>::coordinate_type value)
low	/usr/include/boost/polygon/interval_concept.hpp	/^>::type low(const IntervalType& interval) {$/;"	f	namespace:boost::polygon	signature:(const IntervalType& interval)
low	/usr/include/boost/polygon/interval_data.hpp	/^  coordinate_type low() const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:() const
low	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data& low(coordinate_type value) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(coordinate_type value)
low	/usr/include/boost/polygon/segment_concept.hpp	/^typename segment_point_type<Segment>::type>::type low(const Segment& segment) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment)
low	/usr/include/boost/polygon/segment_concept.hpp	/^void>::type low(Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Point& point)
low	/usr/include/boost/polygon/segment_data.hpp	/^  point_type low() const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:() const
low	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data& low(const point_type& point) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const point_type& point)
low_	/usr/include/boost/polygon/detail/property_merge.hpp	/^  coordinate_type low_, high_;$/;"	m	class:boost::polygon::property_merge_interval	access:private
lower_x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event& lower_x(coordinate_type lower_x) {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:(coordinate_type lower_x)
lower_x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type lower_x() const {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:() const
lower_x_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type lower_x_;$/;"	m	class:boost::polygon::detail::circle_event	access:private
lower_y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type lower_y() const {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:() const
lr	/usr/include/boost/polygon/rectangle_concept.hpp	/^  lr(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
lvalue_	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    const ltype& lvalue_;$/;"	m	class:boost::polygon::polygon_45_set_view	access:private
lvalue_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    const ltype& lvalue_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
lvalue_	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    const ltype& lvalue_;$/;"	m	class:boost::polygon::polygon_set_view	access:private
make_arc	/usr/include/boost/polygon/polygon_set_data.hpp	/^  inline int  make_arc(std::vector<point_data< T> >& return_points,$/;"	f	namespace:boost::polygon	signature:(std::vector<point_data< T> >& return_points, point_data< double> start, point_data< double> end, point_data< double> center, double r, unsigned int num_circle_segments)
make_resizing_vertex_list	/usr/include/boost/polygon/polygon_set_data.hpp	/^  inline int make_resizing_vertex_list(std::vector<std::vector<point_data< T> > >& return_points,$/;"	f	namespace:boost::polygon	signature:(std::vector<std::vector<point_data< T> > >& return_points, point_data<T>& curr_prev, bool ignore_prev_point, point_data< T> start, point_data<T> middle, point_data< T> end, double sizing_distance, unsigned int num_circle_segments, bool corner_fill_arc)
manhattan_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double manhattan_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
manhattan_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float manhattan_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
manhattan_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double manhattan_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
manhattan_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long manhattan_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
manhattan_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef polygon_long_long_type manhattan_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
manhattan_distance	/usr/include/boost/polygon/point_concept.hpp	/^manhattan_distance(const PointType1& point1, const PointType2& point2) {$/;"	f	namespace:boost::polygon	signature:(const PointType1& point1, const PointType2& point2)
manhattan_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  manhattan_distance(const rectangle_type& lvalue, const rectangle_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& lvalue, const rectangle_type_2& rvalue)
manhattan_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  manhattan_distance(rectangle_type& lvalue, const point_type& rvalue) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& lvalue, const point_type& rvalue)
manhattan_domain	/usr/include/boost/polygon/isotropy.hpp	/^  struct manhattan_domain {};$/;"	s	namespace:boost::polygon
map_graph_o	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    typedef std::pair<std::pair<Unit, std::map<Unit, std::set<int> > >, std::map<int, std::set<int> > > map_graph_o;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
merge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void merge(result_type& result) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(result_type& result)
merge	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void merge(result_type& result) {$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:(result_type& result)
merge	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void merge(ResultType& result) {$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:(ResultType& result)
mergeCount	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void mergeCount(property_map& lvalue, property_map& rvalue) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(property_map& lvalue, property_map& rvalue)
mergeCross_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline iT mergeCross_(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(iT inputBegin, iT inputEnd)
mergeProperty	/usr/include/boost/polygon/detail/property_merge.hpp	/^  static inline void mergeProperty(property_map& lvalue, std::pair<property_type, int>& rvalue) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(property_map& lvalue, std::pair<property_type, int>& rvalue)
merge_45_output_functor	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    struct merge_45_output_functor {$/;"	s	struct:boost::polygon::polygon_45_property_merge	access:public
merge_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    merge_output_functor() {}$/;"	f	class:boost::polygon::merge_output_functor	access:public	signature:()
merge_output_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class merge_output_functor {$/;"	c	namespace:boost::polygon
merge_property_maps	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    static inline void merge_property_maps(property_map& mp, const property_map& mp2, bool subtract = false) {$/;"	f	struct:boost::polygon::polygon_45_touch	access:public	signature:(property_map& mp, const property_map& mp2, bool subtract = false)
merge_property_maps	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    static inline void merge_property_maps(property_map& mp, const property_map& mp2, bool subtract = false) {$/;"	f	struct:boost::polygon::polygon_45_property_merge	access:public	signature:(property_map& mp, const property_map& mp2, bool subtract = false)
merge_property_maps	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void merge_property_maps(property_map& mp, const property_map& mp2) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(property_map& mp, const property_map& mp2)
merge_scanline	/usr/include/boost/polygon/detail/property_merge.hpp	/^  merge_scanline() : output(), scanline(), currentVertex(), tmpVector(), previousY(), countFromBelow(), scanlinePosition() {}$/;"	f	class:boost::polygon::merge_scanline	access:public	signature:()
merge_scanline	/usr/include/boost/polygon/detail/property_merge.hpp	/^  merge_scanline(const merge_scanline& that) :$/;"	f	class:boost::polygon::merge_scanline	access:public	signature:(const merge_scanline& that)
merge_scanline	/usr/include/boost/polygon/detail/property_merge.hpp	/^class merge_scanline {$/;"	c	namespace:boost::polygon
minkowski_offset	/usr/include/boost/polygon/detail/minkowski.hpp	/^struct minkowski_offset {$/;"	s	namespace:boost::polygon::detail
modify_pt	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    static void modify_pt(point_data<coordinate_type>& pt, const point_data<coordinate_type>&  prev_pt,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(point_data<coordinate_type>& pt, const point_data<coordinate_type>& prev_pt, const point_data<coordinate_type>& current_pt, const point_data<coordinate_type>& next_pt, coordinate_type west_bloating, coordinate_type east_bloating, coordinate_type south_bloating, coordinate_type north_bloating)
modify_pt	/usr/include/boost/polygon/polygon_set_data.hpp	/^    static inline void modify_pt(point_data<coordinate_type>& pt, const point_data<coordinate_type>&  prev_pt,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(point_data<coordinate_type>& pt, const point_data<coordinate_type>& prev_pt, const point_data<coordinate_type>& current_pt, const point_data<coordinate_type>& next_pt, coordinate_type distance, coordinate_type multiplier)
move	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& move($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_difference_type<IntervalType>::type displacement)
move	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type& move(PointType& point, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(PointType& point, orientation_2d orient, typename point_coordinate_type<PointType>::type displacement)
move	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  move(polygon_set_type& polygon_set, typename polygon_90_set_traits<polygon_set_type>::coordinate_type x_displacement,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename polygon_90_set_traits<polygon_set_type>::coordinate_type x_displacement, typename polygon_90_set_traits<polygon_set_type>::coordinate_type y_displacement)
move	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  move(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename polygon_90_set_traits<polygon_set_type>::coordinate_type displacement)
move	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& move(coordinate_type x_delta, coordinate_type y_delta) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(coordinate_type x_delta, coordinate_type y_delta)
move	/usr/include/boost/polygon/polygon_traits.hpp	/^  move(T& polygon, orientation_2d orient, typename polygon_traits<T>::coordinate_type displacement) {$/;"	f	namespace:boost::polygon	signature:(T& polygon, orientation_2d orient, typename polygon_traits<T>::coordinate_type displacement)
move	/usr/include/boost/polygon/rectangle_concept.hpp	/^  move(rectangle_type& rectangle, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, orientation_2d orient, typename coordinate_traits<typename rectangle_coordinate_type<rectangle_type>::type>::coordinate_difference delta)
move	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& move(Segment& segment, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(Segment& segment, orientation_2d orient, typename segment_coordinate_type<Segment>::type displacement)
mp_circle_formation_functor	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class mp_circle_formation_functor {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
mul	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void mul(const extended_int& e1, const extended_int& e2) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& e1, const extended_int& e2)
mul	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void mul(const uint32* c1, std::size_t sz1,$/;"	f	class:boost::polygon::detail::extended_int	access:private	signature:(const uint32* c1, std::size_t sz1, const uint32* c2, std::size_t sz2)
multiplier_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  int multiplier_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
neg	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  void neg() {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:()
neg	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  T neg() const {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:() const
negative_sum_	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  T negative_sum_;$/;"	m	class:boost::polygon::detail::robust_dif	access:private
next	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine* next(End end) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(End end) const
next	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>* PolyLine<Unit>::next(End end) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(End end) const
next	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* next() const { return next_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
next	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void next(voronoi_edge_type* e) { next_ = e; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(voronoi_edge_type* e)
next	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* next() { return next_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
nextItr_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    typename ScanData::iterator nextItr_;$/;"	m	class:boost::polygon::boolean_op::BooleanOp	access:protected
nextItr_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      typename ScanData::iterator nextItr_;$/;"	m	class:boost::polygon::touch_90_operation::TouchOp	access:protected
nextMajorCoordinate	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    inline ScanLineToRects& nextMajorCoordinate(coordinate_type currentCoordinate) {$/;"	f	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public	signature:(coordinate_type currentCoordinate)
next_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* next_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
node	/usr/include/boost/polygon/detail/max_cover.hpp	/^      Node* node;$/;"	m	struct:boost::polygon::MaxCover::stack_element	access:public
nodeCount_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    unsigned int nodeCount_;$/;"	m	class:boost::polygon::connectivity_extraction_45	access:private
nodeCount_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    unsigned int nodeCount_;$/;"	m	class:boost::polygon::connectivity_extraction_90	access:private
nodeCount_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    unsigned int nodeCount_;$/;"	m	class:boost::polygon::connectivity_extraction	access:private
node_comparer_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^    node_comparer_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
node_comparison_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class node_comparison_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
node_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Node node_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:public
nullT_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    T nullT_;$/;"	m	class:boost::polygon::boolean_op::BooleanOp	access:protected
numSegments	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    unsigned int numSegments() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
numSegments	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline unsigned int PolyLine<Unit>::numSegments() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
num_cells	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  std::size_t num_cells() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
num_edges	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  std::size_t num_edges() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
num_vertices	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  std::size_t num_vertices() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
oddLength	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool oddLength() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
oddLength	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::oddLength() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
on_above_or_below	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline int on_above_or_below(Point pt, const half_edge& he) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(Point pt, const half_edge& he)
on_above_or_below	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline int on_above_or_below(Point pt, const half_edge& he) {$/;"	f	struct:boost::polygon::edge_utils	access:public	signature:(Point pt, const half_edge& he)
op_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    op_type op_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
operator !=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator!=(const BinaryCount& that) const { return !((*this) == that);}$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that) const
operator !=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator!=(const UnaryCount& that) const { return !((*this) == that);}$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that) const
operator !=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator!=(const Count1& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count) const
operator !=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator!=(const Count2& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count) const
operator !=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator!=(const Scan45CountT& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count) const
operator !=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator!=(const Vertex45T& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
operator !=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator!=(const std::pair<Point, Point>& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const std::pair<Point, Point>& vertex) const
operator !=	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline bool operator!=(const iterator_compact_to_points& that) const {$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:(const iterator_compact_to_points& that) const
operator !=	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline bool operator!=(const iterator_geometry_to_set& that) const {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const iterator_geometry_to_set& that) const
operator !=	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline bool operator!=(const iterator_points_to_compact& that) const {$/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:(const iterator_points_to_compact& that) const
operator !=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator!=(const Vertex45CompactT& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
operator !=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator!=(const Vertex45CountT& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count) const
operator !=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator!=(const iteratorHoles& that) { return itr_ != that.itr_; }$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(const iteratorHoles& that)
operator !=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator!=(const std::pair<Point, Point>& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const std::pair<Point, Point>& vertex) const
operator !=	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline bool operator!=(const CountTouch& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count) const
operator !=	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline bool operator!=(const iterator& that) { return itr_ != that.itr_; }$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(const iterator& that)
operator !=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator!=(const iterator_holes_type& that) { return itr_ != that.itr_; }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(const iterator_holes_type& that)
operator !=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator!=(const std::pair<Point, Point>& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const std::pair<Point, Point>& vertex) const
operator !=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator!=(const std::pair<Point, Point>& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const std::pair<Point, Point>& vertex) const
operator !=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator!=(const vertex_arbitrary_compact& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
operator !=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator!=(const vertex_half_edge& vertex) const { return !((*this) == vertex); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
operator !=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline bool operator!=(const iterator& that) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:(const iterator& that) const
operator !=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline bool operator!=(const iteratorHoles& that) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:(const iteratorHoles& that) const
operator !=	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator!=(const property_merge_interval& that) const { return !((*this) == that); }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(const property_merge_interval& that) const
operator !=	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator!=(const property_merge_point& that) const { return !((*this) == that); }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(const property_merge_point& that) const
operator !=	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline bool operator!=(const CountMerge& count) const { return !((*this) == count); }$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count) const
operator !=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator!=(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
operator !=	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool operator!=(const point_2d& that) const {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:(const point_2d& that) const
operator !=	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool operator!=(const site_event& that) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(const site_event& that) const
operator !=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator!=(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
operator !=	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator!=(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
operator !=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator!=(direction_1d d) const { return !((*this) == d); }$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(direction_1d d) const
operator !=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator!=(direction_2d d) const { return !((*this) == d); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
operator !=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator!=(direction_3d d) const { return !((*this) == d); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
operator !=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator!=(orientation_2d that) const { return (val_ != that.val_); }$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:(orientation_2d that) const
operator !=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator!=(orientation_3d that) const { return (val_ != that.val_); }$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(orientation_3d that) const
operator !=	/usr/include/boost/polygon/point_data.hpp	/^  bool operator!=(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
operator !=	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline bool operator!=(const polygon_45_data& that) const { return !((*this) == that); }$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(const polygon_45_data& that) const
operator !=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool operator!=(const polygon_45_set_data& p) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& p) const
operator !=	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline bool operator!=(const polygon_90_set_data& p) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& p) const
operator !=	/usr/include/boost/polygon/polygon_data.hpp	/^  inline bool operator!=(const polygon_data& that) const { return !((*this) == that); }$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(const polygon_data& that) const
operator !=	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool operator!=(const polygon_set_data& p) const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& p) const
operator !=	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline bool operator!=(const iterator_holes_type& that) const {$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:(const iterator_holes_type& that) const
operator !=	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline bool operator!=(const T2& rvalue) const { return !((*this) == rvalue); }$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(const T2& rvalue) const
operator !=	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator!=(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
operator !=	/usr/include/boost/polygon/transform.hpp	/^  bool operator!=(const axis_transformation& a) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a) const
operator !=	/usr/include/boost/polygon/transform.hpp	/^  bool operator!=(const transformation& tr) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr) const
operator &	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator&(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator &	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator&(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator &	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator&(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator &=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator&=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator &=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator&=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator &=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator&=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
operator &=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator&=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
operator &=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator&=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator ()	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator()(int a, int b) { return (a > 0) & !(b > 0); }$/;"	f	class:boost::polygon::boolean_op::BinaryNot	access:public	signature:(int a, int b)
operator ()	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator()(int a, int b) { return (a > 0) & (b > 0); }$/;"	f	class:boost::polygon::boolean_op::BinaryAnd	access:public	signature:(int a, int b)
operator ()	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator()(int a, int b) { return (a > 0) ^ (b > 0); }$/;"	f	class:boost::polygon::boolean_op::BinaryXor	access:public	signature:(int a, int b)
operator ()	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator()(int a, int b) { return (a > 0) | (b > 0); }$/;"	f	class:boost::polygon::boolean_op::BinaryOr	access:public	signature:(int a, int b)
operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^        inline bool operator () (const Point& v1, const Point& v2) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45::lessScan45Point	access:public	signature:(const Point& v1, const Point& v2) const
operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator () (Scan45Element elm1, Scan45Element elm2) const {$/;"	f	class:boost::polygon::boolean_op_45::lessScan45ElementRise	access:public	signature:(Scan45Element elm1, Scan45Element elm2) const
operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator () (const Scan45ElementT<CountType>& elm1,$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Element	access:public	signature:(const Scan45ElementT<CountType>& elm1, const Scan45ElementT<CountType>& elm2) const
operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator () (const Scan45Vertex& v1, const Scan45Vertex& v2) const {$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Vertex	access:public	signature:(const Scan45Vertex& v1, const Scan45Vertex& v2) const
operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator () (const Vertex45T<ct>& elm1, const Vertex45T<ct>& elm2) const {$/;"	f	class:boost::polygon::boolean_op_45::lessVertex45	access:public	signature:(const Vertex45T<ct>& elm1, const Vertex45T<ct>& elm2) const
operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      void operator()(cT& output, const Count1& count1, const Count1& count2,$/;"	f	struct:boost::polygon::boolean_op_45::unary_op_45_output_functor	access:public	signature:(cT& output, const Count1& count1, const Count1& count2, const Point& pt, int rise, direction_1d end)
operator ()	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      void operator()(cT& output, const Count2& count1, const Count2& count2,$/;"	f	struct:boost::polygon::boolean_op_45::boolean_op_45_output_functor	access:public	signature:(cT& output, const Count2& count1, const Count2& count2, const Point& pt, int rise, direction_1d end)
operator ()	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline bool operator () (const EdgeAssociation& elem1, const EdgeAssociation& elem2) const {$/;"	f	class:boost::polygon::MaxCover::lessEdgeAssociation	access:public	signature:(const EdgeAssociation& elem1, const EdgeAssociation& elem2) const
operator ()	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      bool operator()(const Vertex45Compact& l, const Vertex45Compact& r) {$/;"	f	struct:boost::polygon::polygon_45_touch::lessVertex45Compact	access:public	signature:(const Vertex45Compact& l, const Vertex45Compact& r)
operator ()	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      void operator()(cT& output, const CountTouch& count1, const CountTouch& count2,$/;"	f	struct:boost::polygon::polygon_45_touch::touch_45_output_functor	access:public	signature:(cT& output, const CountTouch& count1, const CountTouch& count2, const Point& pt, int , direction_1d )
operator ()	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator () (const Point& pt1, const Point& pt2) const {$/;"	f	class:boost::polygon::scanline_base::less_point	access:public	signature:(const Point& pt1, const Point& pt2) const
operator ()	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator () (const half_edge& elm1, const half_edge& elm2) const {$/;"	f	class:boost::polygon::scanline_base::less_half_edge	access:public	signature:(const half_edge& elm1, const half_edge& elm2) const
operator ()	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator () (const std::pair<Point, int>& elm1, const std::pair<Point, int>& elm2) const {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_half_edge_count	access:public	signature:(const std::pair<Point, int>& elm1, const std::pair<Point, int>& elm2) const
operator ()	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator () (const std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*>& elm1,$/;"	f	class:boost::polygon::polygon_arbitrary_formation::less_incoming_count	access:public	signature:(const std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*>& elm1, const std::pair<std::pair<std::pair<Point, Point>, int>, active_tail_arbitrary*>& elm2) const
operator ()	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator () (const vertex_half_edge& elm1, const vertex_half_edge& elm2) const {$/;"	f	class:boost::polygon::scanline_base::less_vertex_half_edge	access:public	signature:(const vertex_half_edge& elm1, const vertex_half_edge& elm2) const
operator ()	/usr/include/boost/polygon/detail/property_merge.hpp	/^    bool operator()(const T& a, const T& b) {$/;"	f	struct:boost::polygon::merge_scanline::lessPropertyCount	access:public	signature:(const T& a, const T& b)
operator ()	/usr/include/boost/polygon/detail/property_merge.hpp	/^    bool operator()(const T& lvalue, const T& rvalue) const {$/;"	f	class:boost::polygon::merge_scanline::less_vertex_data	access:public	signature:(const T& lvalue, const T& rvalue) const
operator ()	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      bool operator()(const Vertex45Compact& l, const Vertex45Compact& r) {$/;"	f	struct:boost::polygon::polygon_45_property_merge::lessVertex45Compact	access:public	signature:(const Vertex45Compact& l, const Vertex45Compact& r)
operator ()	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      void operator()(cT& output, const CountMerge& count1, const CountMerge& count2,$/;"	f	struct:boost::polygon::polygon_45_property_merge::merge_45_output_functor	access:public	signature:(cT& output, const CountMerge& count1, const CountMerge& count2, const Point& pt, int rise, direction_1d end)
operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      bool operator() (const vertex_data_type& lvalue, const vertex_data_type& rvalue) const {$/;"	f	class:boost::polygon::property_merge::less_vertex_data	access:public	signature:(const vertex_data_type& lvalue, const vertex_data_type& rvalue) const
operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      bool operator()(const half_edge& e1, const half_edge& e2) {$/;"	f	class:boost::polygon::property_merge::less_half_edge_pair	access:public	signature:(const half_edge& e1, const half_edge& e2)
operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      bool operator()(const vertex_data_type& lvalue, const vertex_data_type& rvalue) const {$/;"	f	class:boost::polygon::arbitrary_boolean_op::less_vertex_data	access:public	signature:(const vertex_data_type& lvalue, const vertex_data_type& rvalue) const
operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      bool operator()(const vertex_data_type& lvalue, const vertex_data_type& rvalue) const {$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction::less_vertex_data	access:public	signature:(const vertex_data_type& lvalue, const vertex_data_type& rvalue) const
operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      inline bool operator () (const Point& pt1, const Point& pt2) const {$/;"	f	class:boost::polygon::line_intersection::less_point_down_slope	access:public	signature:(const Point& pt1, const Point& pt2) const
operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      inline void operator()(std::vector<std::pair<half_edge, std::pair<property_set, property_set> > >& result,$/;"	f	class:boost::polygon::scanline::test_functor	access:public	signature:(std::vector<std::pair<half_edge, std::pair<property_set, property_set> > >& result, const half_edge& he, const property_set& ps_left, const property_set& ps_right)
operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      void operator()(result_type& result, const half_edge& edge, const key_type& left, const key_type& right) {$/;"	f	class:boost::polygon::arbitrary_boolean_op::boolean_output_functor	access:public	signature:(result_type& result, const half_edge& edge, const key_type& left, const key_type& right)
operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      void operator()(result_type& result, const half_edge& edge, const key_type& left, const key_type& right) {$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction::connectivity_extraction_output_functor	access:public	signature:(result_type& result, const half_edge& edge, const key_type& left, const key_type& right)
operator ()	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void operator()(result_type& result, const half_edge& edge, const key_type& left, const key_type& right) {$/;"	f	class:boost::polygon::merge_output_functor	access:public	signature:(result_type& result, const half_edge& edge, const key_type& left, const key_type& right)
operator ()	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  Result operator()(fpt64 a, fpt64 b, unsigned int maxUlps) const {$/;"	f	struct:boost::polygon::detail::ulp_comparison	access:public	signature:(fpt64 a, fpt64 b, unsigned int maxUlps) const
operator ()	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt<fpt64> operator()(const extended_int<N>& that) const {$/;"	f	struct:boost::polygon::detail::type_converter_efpt	access:public	signature:(const extended_int<N>& that) const
operator ()	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt64 operator()(const T& that) const {$/;"	f	struct:boost::polygon::detail::type_converter_fpt	access:public	signature:(const T& that) const
operator ()	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt64 operator()(const extended_exponent_fpt<fpt64>& that) const {$/;"	f	struct:boost::polygon::detail::type_converter_fpt	access:public	signature:(const extended_exponent_fpt<fpt64>& that) const
operator ()	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt64 operator()(const extended_int<N>& that) const {$/;"	f	struct:boost::polygon::detail::type_converter_fpt	access:public	signature:(const extended_int<N>& that) const
operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator() (const node_type& node1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:public	signature:(const node_type& node1, const node_type& node2) const
operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const circle_type& lhs, const circle_type& rhs) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public	signature:(const circle_type& lhs, const circle_type& rhs) const
operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const circle_type& lhs, const site_type& rhs) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public	signature:(const circle_type& lhs, const site_type& rhs) const
operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const point_type& lhs, const point_type& rhs) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::point_comparison_predicate	access:public	signature:(const point_type& lhs, const point_type& rhs) const
operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const site_type& left_site,$/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:public	signature:(const site_type& left_site, const site_type& right_site, const site_type& new_site) const
operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const site_type& lhs, const circle_type& rhs) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public	signature:(const site_type& lhs, const circle_type& rhs) const
operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const site_type& lhs, const site_type& rhs) const {$/;"	f	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public	signature:(const site_type& lhs, const site_type& rhs) const
operator ()	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool operator()(const site_type& site1, const site_type& site2,$/;"	f	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, circle_type& circle)
operator ()	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^    bool operator() (const list_iterator_type &it1,$/;"	f	struct:boost::polygon::detail::ordered_queue::comparison	access:public	signature:(const list_iterator_type &it1, const list_iterator_type &it2) const
operator ()	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline bool operator () (const Point& pt1, const Point& pt2) const {$/;"	f	class:boost::polygon::edge_utils::less_point	access:public	signature:(const Point& pt1, const Point& pt2) const
operator ()	/usr/include/boost/polygon/rectangle_concept.hpp	/^    operator () (const rectangle_type_1& a,$/;"	f	class:boost::polygon::less_rectangle_concept	access:public	signature:(const rectangle_type_1& a, const rectangle_type_2& b) const
operator ()	/usr/include/boost/polygon/voronoi_builder.hpp	/^    bool operator() (const end_point_type& end1,$/;"	f	struct:boost::polygon::voronoi_builder::end_point_comparison	access:public	signature:(const end_point_type& end1, const end_point_type& end2) const
operator ()	/usr/include/boost/polygon/voronoi_builder.hpp	/^    bool operator()(const event_type& lhs, const event_type& rhs) const {$/;"	f	struct:boost::polygon::voronoi_builder::__anon4	access:public	signature:(const event_type& lhs, const event_type& rhs) const
operator ()	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    bool operator()(const vertex_type& v1, const vertex_type& v2) const {$/;"	f	class:boost::polygon::voronoi_diagram_traits::__anon5	access:public	signature:(const vertex_type& v1, const vertex_type& v2) const
operator *	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline reference operator*() const { return pt_; }$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:() const
operator *	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline reference operator*() const {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:() const
operator *	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline reference operator*() const { coord_ = get(*iter_, orient_); $/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:() const
operator *	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline holeType operator*() {$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:()
operator *	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator*(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator *	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator*(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator *	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline std::pair<Interval, std::set<int> >& operator*() {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:()
operator *	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline reference operator*() {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:()
operator *	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline PolyLineHoleData<orientT, Unit> operator*() { return PolyLineHoleData<orientT, Unit>(*itr_);}$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:()
operator *	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline Unit operator*() { return (*pLine_)[index_]; }$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:()
operator *	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt operator*(const extended_exponent_fpt& that) const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that) const
operator *	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator*(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
operator *	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator*(int32 that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int32 that) const
operator *	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator*(int64 that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int64 that) const
operator *	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt operator*(const robust_fpt& that) const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that) const
operator *	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator*(const T& val, const robust_dif<T>& rhs) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& val, const robust_dif<T>& rhs)
operator *	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator*(const robust_dif<T>& lhs, const T& val) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const T& val)
operator *	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator*(const robust_dif<T>& lhs,$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const robust_dif<T>& rhs)
operator *	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator*(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
operator *	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator*(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator *	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline value_type operator*() const {$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:() const
operator *=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator*=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator *=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator*=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator *=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt& operator*=(const extended_exponent_fpt& that) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that)
operator *=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator*=(const T& val) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& val)
operator *=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator*=(const robust_dif<T>& that) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const robust_dif<T>& that)
operator *=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt& operator*=(const robust_fpt& that) {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that)
operator *=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator*=(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
operator *=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator*=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
operator *=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator*=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
operator *=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator*=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator +	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount operator+(const BinaryCount& that) const;$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that) const
operator +	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount operator+(const UnaryCount& that) const { UnaryCount tmp(*this); tmp += that; return tmp; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that) const
operator +	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T> BinaryCount<T>::operator+(const BinaryCount<T>& that) const {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that) const
operator +	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1 operator+(const Count1& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count) const
operator +	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2 operator+(const Count2& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count) const
operator +	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT operator+(const Scan45CountT& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count) const
operator +	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT operator+(const Vertex45CountT& count) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count) const
operator +	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator+(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator +	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator+(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator +	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch operator+(const CountTouch& count) const {$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count) const
operator +	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator+(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator +	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator+(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator +	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge operator+(const CountMerge& count) const {$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count) const
operator +	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt operator+(const extended_exponent_fpt& that) const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that) const
operator +	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator+(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
operator +	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt operator+(const robust_fpt& that) const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that) const
operator +	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator+(const T& lhs, const robust_dif<T>& rhs) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& lhs, const robust_dif<T>& rhs)
operator +	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator+(const robust_dif<T>& lhs, const T& rhs) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const T& rhs)
operator +	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator+(const robust_dif<T>& lhs,$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const robust_dif<T>& rhs)
operator +	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator+(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
operator +	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator+(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator +	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator+(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator +	/usr/include/boost/polygon/transform.hpp	/^  anisotropic_scale_factor operator+(const anisotropic_scale_factor& s) const {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(const anisotropic_scale_factor& s) const
operator +	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation operator+(const axis_transformation& a) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a) const
operator +	/usr/include/boost/polygon/transform.hpp	/^  transformation operator+(const transformation& tr) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr) const
operator ++	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline const iterator_compact_to_points operator++(int) {$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:(int)
operator ++	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline iterator_compact_to_points& operator++() {$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:()
operator ++	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline const iterator_geometry_to_set operator++(int) {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(int)
operator ++	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline iterator_geometry_to_set& operator++() {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:()
operator ++	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline const iterator_points_to_compact operator++(int) {$/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:(int)
operator ++	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline iterator_points_to_compact& operator++() {$/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:()
operator ++	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline const iteratorHoles operator++(int) {$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(int)
operator ++	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iteratorHoles& operator++() {$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:()
operator ++	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline const iterator operator++(int){$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(int)
operator ++	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline iterator& operator++() {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:()
operator ++	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline const iterator_holes_type operator++(int) {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(int)
operator ++	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator_holes_type& operator++() {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:()
operator ++	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline const iterator operator++(int) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:(int)
operator ++	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline const iteratorHoles operator++(int) {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:(int)
operator ++	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iterator& operator++() {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:()
operator ++	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline iteratorHoles& operator++() {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:()
operator ++	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator++(int) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(int)
operator ++	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator++() {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:()
operator ++	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline const iterator_holes_type operator++(int) {$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:(int)
operator ++	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline iterator_holes_type& operator++() {$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:()
operator +=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount& operator+=(const BinaryCount& that);$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that)
operator +=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount& operator+=(const UnaryCount& that) { count_ += that.count_; return *this; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that)
operator +=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T>& BinaryCount<T>::operator+=(const BinaryCount<T>& that) {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that)
operator +=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1& operator+=(const Count1& count){$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count)
operator +=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2& operator+=(const Count2& count){$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count)
operator +=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT& operator+=(const Scan45CountT& count){$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count)
operator +=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT& operator+=(const Scan45ElementT<CountType>& element){$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45ElementT<CountType>& element)
operator +=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT& operator+=(const Vertex45& element){$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45& element)
operator +=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT& operator+=(const Vertex45CountT& count){$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count)
operator +=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator+=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator +=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator+=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator +=	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch& operator+=(const CountTouch& count){$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count)
operator +=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator+=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator +=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator+=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator +=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator+=(polygon_90_set_data<coordinate_type_1>& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(polygon_90_set_data<coordinate_type_1>& lvalue, const geometry_type_2& rvalue)
operator +=	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge& operator+=(const CountMerge& count){$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count)
operator +=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt& operator+=(const extended_exponent_fpt& that) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that)
operator +=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator+=(const T& val) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& val)
operator +=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator+=(const robust_dif<T>& that) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const robust_dif<T>& that)
operator +=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt& operator+=(const robust_fpt& that) {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that)
operator +=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator+=(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
operator +=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator+=(Unit delta);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(Unit delta)
operator +=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator+=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
operator +=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator+=(Unit delta) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(Unit delta)
operator +=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator+=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
operator +=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator+=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator +=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator+=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator +=	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation& operator+=(const axis_transformation& a) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a)
operator +=	/usr/include/boost/polygon/transform.hpp	/^  const anisotropic_scale_factor& operator+=($/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:( const anisotropic_scale_factor& s)
operator +=	/usr/include/boost/polygon/transform.hpp	/^  const transformation& operator+=(const transformation& tr) {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr)
operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount operator-() const;$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:() const
operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount operator-(const BinaryCount& that) const;$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that) const
operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount operator-() const { UnaryCount tmp; return tmp - *this; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:() const
operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount operator-(const UnaryCount& that) const { UnaryCount tmp(*this); tmp -= that; return tmp; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that) const
operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T> BinaryCount<T>::operator-() const {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:() const
operator -	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T> BinaryCount<T>::operator-(const BinaryCount<T>& that) const {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that) const
operator -	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1 operator-(const Count1& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count) const
operator -	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2 operator-(const Count2& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count) const
operator -	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT operator-(const Scan45CountT& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count) const
operator -	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT operator-(const Vertex45CountT& count) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count) const
operator -	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator-(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator -	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator-(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator -	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch operator-(const CountTouch& count) const {$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count) const
operator -	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator-(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator -	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator-(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator -	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge operator-(const CountMerge& count) const {$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count) const
operator -	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt operator-() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
operator -	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt operator-(const extended_exponent_fpt& that) const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that) const
operator -	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator-() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
operator -	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int operator-(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T> operator-() const {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:() const
operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt operator-() const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt operator-(const robust_fpt& that) const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that) const
operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator-(const T& lhs, const robust_dif<T>& rhs) {$/;"	f	namespace:boost::polygon::detail	signature:(const T& lhs, const robust_dif<T>& rhs)
operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator-(const robust_dif<T>& lhs, const T& rhs) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const T& rhs)
operator -	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator-(const robust_dif<T>& lhs,$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const robust_dif<T>& rhs)
operator -	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator-(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
operator -	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator-(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator -	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator-(const geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator --	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator--(int) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(int)
operator --	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator--() {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:()
operator -=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount& operator-=(const BinaryCount& that);$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that)
operator -=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount& operator-=(const UnaryCount& that) { count_ -= that.count_; return *this; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that)
operator -=	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T>& BinaryCount<T>::operator-=(const BinaryCount<T>& that) {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that)
operator -=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1& operator-=(const Count1& count){$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count)
operator -=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2& operator-=(const Count2& count){$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count)
operator -=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT& operator-=(const Scan45CountT& count){$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count)
operator -=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT& operator-=(const Vertex45CountT& count){$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count)
operator -=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator-=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator -=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator-=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator -=	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch& operator-=(const CountTouch& count){$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count)
operator -=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator-=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator -=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator-=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator -=	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge& operator-=(const CountMerge& count){$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count)
operator -=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt& operator-=(const extended_exponent_fpt& that) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that)
operator -=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator-=(const T& val) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& val)
operator -=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator-=(const robust_dif<T>& that) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const robust_dif<T>& that)
operator -=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt& operator-=(const robust_fpt& that) {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that)
operator -=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator-=(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
operator -=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator-=(Unit delta);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(Unit delta)
operator -=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator-=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
operator -=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator-=(Unit delta) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(Unit delta)
operator -=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator-=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
operator -=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator-=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator -=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator-=(geometry_type_1& lvalue, coordinate_type_1 rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, coordinate_type_1 rvalue)
operator /	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt operator\/(const extended_exponent_fpt& that) const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that) const
operator /	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt operator\/(const robust_fpt& that) const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that) const
operator /	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^robust_dif<T> operator\/(const robust_dif<T>& lhs, const T& val) {$/;"	f	namespace:boost::polygon::detail	signature:(const robust_dif<T>& lhs, const T& val)
operator /	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int operator\/(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
operator /=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt& operator\/=(const extended_exponent_fpt& that) {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:(const extended_exponent_fpt& that)
operator /=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif<T>& operator\/=(const T& val) {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& val)
operator /=	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt& operator\/=(const robust_fpt& that) {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that)
operator /=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator\/=(const gmp_int& b) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& b)
operator <	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator<(const Vertex45T& vertex) const {$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
operator <	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator<(const Vertex45CompactT& vertex) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
operator <	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator<(const vertex_arbitrary_compact& vertex) const {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
operator <	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator<(const vertex_half_edge& vertex) const {$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
operator <	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator<(const ActiveTail& b) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b) const
operator <	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::operator<(const ActiveTail<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b) const
operator <	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator<(const property_merge_interval& that) const {$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(const property_merge_interval& that) const
operator <	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator<(const property_merge_point& that) const {$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(const property_merge_point& that) const
operator <	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator<(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
operator <	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator<(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
operator <	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator<(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
operator <	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator< (direction_2d d) const { return (val_ < d.val_); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
operator <	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator< (direction_3d d) const { return (val_ < d.val_); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
operator <	/usr/include/boost/polygon/point_data.hpp	/^  bool operator<(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
operator <	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator<(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
operator <	/usr/include/boost/polygon/transform.hpp	/^  bool operator<(const axis_transformation& a) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a) const
operator <	/usr/include/boost/polygon/transform.hpp	/^  bool operator<(const transformation& tr) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr) const
operator <=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator<=(const Vertex45T& vertex) const { return !((*this) > vertex); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
operator <=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator<=(const Vertex45CompactT& vertex) const { return !((*this) > vertex); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
operator <=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator<=(const vertex_arbitrary_compact& vertex) const { return !((*this) > vertex); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
operator <=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator<=(const vertex_half_edge& vertex) const { return !((*this) > vertex); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
operator <=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator<=(const ActiveTail& b) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b) const
operator <=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::operator<=(const ActiveTail<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b) const
operator <=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator<=(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
operator <=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator<=(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
operator <=	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator<=(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
operator <=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator<=(direction_2d d) const { return (val_ <= d.val_); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
operator <=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator<=(direction_3d d) const { return (val_ <= d.val_); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
operator <=	/usr/include/boost/polygon/point_data.hpp	/^  bool operator<=(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
operator <=	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator<=(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount& operator=(const BinaryCount& that);$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that)
operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BinaryCount& operator=(int count) { counts_[0] = count, counts_[1] = count; return *this; }$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(int count)
operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline BooleanOp& operator=(const BooleanOp& that);$/;"	p	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:(const BooleanOp& that)
operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount& operator=(const UnaryCount& that) { count_ = that.count_; return *this; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that)
operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline UnaryCount& operator=(int count) { count_ = count; return *this; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(int count)
operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BinaryCount<T>& BinaryCount<T>::operator=(const BinaryCount<T>& that) {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that)
operator =	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline BooleanOp<T, Unit>& BooleanOp<T, Unit>::operator=(const BooleanOp& that) {$/;"	f	class:boost::polygon::boolean_op::BooleanOp	signature:(const BooleanOp& that)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1& operator=(const Count1& count) { count_ = count.count_; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count1& operator=(int count) { count_ = count; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(int count)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2& operator=(const Count2& count) { counts[0] = count.counts[0]; counts[1] = count.counts[1]; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Count2& operator=(int count) { counts[0] = counts[1] = count; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(int count)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45& operator=(const Scan45& that) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:public	signature:(const Scan45& that)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT& operator=(CountType count) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(CountType count)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45CountT& operator=(const Scan45CountT& count) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Scan45ElementT& operator=(const Scan45ElementT& that) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public	signature:(const Scan45ElementT& that)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T& operator=(const Vertex45T& vertex){$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline Vertex45T& operator=(const std::pair<Point, Point>& vertex){ return *this; }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const std::pair<Point, Point>& vertex)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessScan45Element& operator=(const lessScan45Element& that) { x_ = that.x_; justBefore_ = that.justBefore_; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::lessScan45Element	access:public	signature:(const lessScan45Element& that)
operator =	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline lessVertex45& operator=(const lessVertex45& that) { x_ = that.x_; justBefore_ = that.justBefore_; return *this; }$/;"	f	class:boost::polygon::boolean_op_45::lessVertex45	access:public	signature:(const lessVertex45& that)
operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45& operator=(const ActiveTail45& that) {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(const ActiveTail45& that)
operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45& operator=(const PolyLine45& that) {$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:(const PolyLine45& that)
operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Formation& operator=(const Polygon45Formation& that) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:public	signature:(const Polygon45Formation& that)
operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Polygon45Tiling& operator=(const Polygon45Tiling& that) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:public	signature:(const Polygon45Tiling& that)
operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CompactT& operator=(const Vertex45CompactT& vertex){$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex)
operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT& operator=(const Vertex45CountT& count) {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count)
operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45CountT& operator=(ct count) {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(ct count)
operator =	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iteratorHoles& operator=(const iteratorHoles& that) {$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(const iteratorHoles& that)
operator =	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    polygon_45_set_view& operator=(const polygon_45_set_view&);$/;"	p	class:boost::polygon::polygon_45_set_view	access:private	signature:(const polygon_45_set_view&)
operator =	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline CountTouch& operator=(const CountTouch& count) { counts = count.counts; return *this; }$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count)
operator =	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    polygon_90_set_view& operator=(const polygon_90_set_view&);$/;"	p	class:boost::polygon::polygon_90_set_view	access:private	signature:(const polygon_90_set_view&)
operator =	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  inline polygon_90_set_data<T>& polygon_90_set_data<T>::operator=(const polygon_90_set_view<ltype, rtype, op_type>& that) {$/;"	f	class:boost::polygon::polygon_90_set_data	signature:(const polygon_90_set_view<ltype, rtype, op_type>& that)
operator =	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline iterator& operator=(const iterator& that) {$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(const iterator& that)
operator =	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchOp& operator=(const TouchOp& that);$/;"	p	class:boost::polygon::touch_90_operation::TouchOp	access:public	signature:(const TouchOp& that)
operator =	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline TouchScanEvent& operator=(const TouchScanEvent& that){$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent	access:public	signature:(const TouchScanEvent& that)
operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary& operator=(const active_tail_arbitrary& that) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(const active_tail_arbitrary& that)
operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline iterator_holes_type& operator=(const iterator_holes_type& that) {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(const iterator_holes_type& that)
operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_half_edge& operator=(const less_half_edge& that) {$/;"	f	class:boost::polygon::scanline_base::less_half_edge	access:public	signature:(const less_half_edge& that)
operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline less_vertex_half_edge& operator=(const less_vertex_half_edge& that) { x_ = that.x_; justBefore_ = that.justBefore_; return *this; }$/;"	f	class:boost::polygon::scanline_base::less_vertex_half_edge	access:public	signature:(const less_vertex_half_edge& that)
operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary& operator=(const poly_line_arbitrary& that) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:(const poly_line_arbitrary& that)
operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact& operator=(const std::pair<Point, Point>& vertex){ return *this; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const std::pair<Point, Point>& vertex)
operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact& operator=(const vertex_arbitrary_compact& vertex){$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex)
operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge& operator=(const std::pair<Point, Point>& vertex){ return *this; }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const std::pair<Point, Point>& vertex)
operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge& operator=(const vertex_half_edge& vertex){$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex)
operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline polygon_arbitrary_formation& operator=(const polygon_arbitrary_formation& that) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(const polygon_arbitrary_formation& that)
operator =	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline trapezoid_arbitrary_formation& operator=(const trapezoid_arbitrary_formation& that) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(const trapezoid_arbitrary_formation& that)
operator =	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail& operator=(const ActiveTail& that);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& that)
operator =	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& operator=(const PolyLine& that);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(const PolyLine& that)
operator =	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>& ActiveTail<Unit>::operator=(const ActiveTail<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& that)
operator =	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::operator=(const PolyLine<Unit>& that) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(const PolyLine<Unit>& that)
operator =	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    polygon_set_view& operator=(const polygon_set_view&);$/;"	p	class:boost::polygon::polygon_set_view	access:private	signature:(const polygon_set_view&)
operator =	/usr/include/boost/polygon/detail/property_merge.hpp	/^  merge_scanline& operator=(const merge_scanline& that) {$/;"	f	class:boost::polygon::merge_scanline	access:public	signature:(const merge_scanline& that)
operator =	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline CountMerge& operator=(const CountMerge& count) { counts = count.counts; return *this; }$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count)
operator =	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_boolean_op& operator=(const arbitrary_boolean_op& pm) { pmd = pm.pmd; return *this; }$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:public	signature:(const arbitrary_boolean_op& pm)
operator =	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline arbitrary_connectivity_extraction& operator=$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:(const arbitrary_connectivity_extraction& pm)
operator =	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline property_merge& operator=(const property_merge& pm) { pmd = pm.pmd; return *this; }$/;"	f	class:boost::polygon::property_merge	access:public	signature:(const property_merge& pm)
operator =	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline scanline& operator=(const scanline& that) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(const scanline& that)
operator =	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int& operator=(const extended_int<M>& that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int<M>& that)
operator =	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int& operator=(int32 that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int32 that)
operator =	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_int& operator=(int64 that) {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(int64 that)
operator =	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt& operator=(const robust_fpt& that) {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(const robust_fpt& that)
operator =	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  void operator=(const ordered_queue&);$/;"	p	class:boost::polygon::detail::ordered_queue	access:private	signature:(const ordered_queue&)
operator =	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator=(const gmp_int& that) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that)
operator =	/usr/include/boost/polygon/gmp_override.hpp	/^    inline gmp_int& operator=(long that) {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(long that)
operator =	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data& operator=(const IntervalType& that) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const IntervalType& that)
operator =	/usr/include/boost/polygon/interval_data.hpp	/^  interval_data& operator=(const interval_data& that) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that)
operator =	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_1d& operator = (const direction_1d& d) {$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(const direction_1d& d)
operator =	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d& operator=(const direction_2d& d) {$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(const direction_2d& d)
operator =	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_3d& operator=(direction_3d d) {$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d)
operator =	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_2d& operator=(const orientation_2d& ori) {$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:(const orientation_2d& ori)
operator =	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_3d& operator=(const orientation_3d& ori) {$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(const orientation_3d& ori)
operator =	/usr/include/boost/polygon/point_data.hpp	/^  point_data& operator=(const PointType& that) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const PointType& that)
operator =	/usr/include/boost/polygon/point_data.hpp	/^  point_data& operator=(const point_data& that) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that)
operator =	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_45_data	access:public	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data& operator=(const polygon_45_data& that) {$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(const polygon_45_data& that)
operator =	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline connectivity_extraction_45& operator=(const connectivity_extraction_45& that) {$/;"	f	class:boost::polygon::connectivity_extraction_45	access:public	signature:(const connectivity_extraction_45& that)
operator =	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data& operator=(const geometry_object& geometry) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const geometry_object& geometry)
operator =	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data& operator=(const polygon_45_set_data& that) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& that)
operator =	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data& operator=(const polygon_45_set_view<ltype, rtype, op_type>& that) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_view<ltype, rtype, op_type>& that)
operator =	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline property_merge_45& operator=(const property_merge_45& that) {$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:(const property_merge_45& that)
operator =	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data& operator=(const polygon_45_with_holes_data& that) {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(const polygon_45_with_holes_data& that)
operator =	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_90_data	access:public	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data& operator=(const polygon_90_data& that) {$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:(const polygon_90_data& that)
operator =	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline connectivity_extraction_90& operator=(const connectivity_extraction_90& that) {$/;"	f	class:boost::polygon::connectivity_extraction_90	access:public	signature:(const connectivity_extraction_90& that)
operator =	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data& operator=(const geometry_object& geometry) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const geometry_object& geometry)
operator =	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data& operator=(const polygon_90_set_data& that) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& that)
operator =	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data& operator=(const polygon_90_set_view<ltype, rtype, op_type>& that);$/;"	p	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& that)
operator =	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline property_merge_90& operator=(const property_merge_90& that) { pmd_ = that.pmd_; return *this; }$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:(const property_merge_90& that)
operator =	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data& operator=(const polygon_90_with_holes_data& that) {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(const polygon_90_with_holes_data& that)
operator =	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_data	access:public	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data& operator=(const polygon_data& that) {$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(const polygon_data& that)
operator =	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline connectivity_extraction& operator=(const connectivity_extraction& that) {$/;"	f	class:boost::polygon::connectivity_extraction	access:public	signature:(const connectivity_extraction& that)
operator =	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data& operator=(const geometry_object& geometry) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const geometry_object& geometry)
operator =	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data& operator=(const polygon_set_data& that) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& that)
operator =	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data& operator=(const polygon_set_view<ltype, rtype, op_type>& geometry) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& geometry)
operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_45_data<T>& polygon_45_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_45_data	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_45_with_holes_data<T>& polygon_45_with_holes_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_90_data<T>& polygon_90_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_90_data	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_90_with_holes_data<T>& polygon_90_with_holes_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_data<T>& polygon_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_data	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_traits.hpp	/^  polygon_with_holes_data<T>& polygon_with_holes_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::polygon_with_holes_data	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::polygon_with_holes_data	access:public	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data& operator=(const polygon_with_holes_data& that) {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(const polygon_with_holes_data& that)
operator =	/usr/include/boost/polygon/rectangle_concept.hpp	/^  rectangle_data<T>& rectangle_data<T>::operator=(const T2& rvalue) {$/;"	f	class:boost::polygon::rectangle_data	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data& operator=(const T2& rvalue);$/;"	p	class:boost::polygon::rectangle_data	access:public	signature:(const T2& rvalue)
operator =	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data& operator=(const rectangle_data& that) {$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(const rectangle_data& that)
operator =	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data& operator=(const SegmentType& that) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const SegmentType& that)
operator =	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data& operator=(const segment_data& that) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that)
operator =	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation& operator=(const ATR& atr) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const ATR& atr)
operator =	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation& operator=(const axis_transformation& a) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a)
operator =	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void operator=(const voronoi_builder&);$/;"	p	class:boost::polygon::voronoi_builder	access:private	signature:(const voronoi_builder&)
operator =	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void operator=(const voronoi_diagram&);$/;"	p	class:boost::polygon::voronoi_diagram	access:private	signature:(const voronoi_diagram&)
operator ==	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator==(const BinaryCount& that) const;$/;"	p	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(const BinaryCount& that) const
operator ==	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline bool operator==(const UnaryCount& that) const { return count_ == that.count_; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:(const UnaryCount& that) const
operator ==	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline bool BinaryCount<T>::operator==(const BinaryCount<T>& that) const {$/;"	f	class:boost::polygon::boolean_op::BinaryCount	signature:(const BinaryCount<T>& that) const
operator ==	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator==(const Count1& count) const { return count_ == count.count_; }$/;"	f	class:boost::polygon::boolean_op_45::Count1	access:public	signature:(const Count1& count) const
operator ==	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator==(const Count2& count) const { return counts[0] == count.counts[0] && counts[1] == count.counts[1]; }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(const Count2& count) const
operator ==	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator==(const Scan45CountT& count) const {$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(const Scan45CountT& count) const
operator ==	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator==(const Vertex45T& vertex) const {$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
operator ==	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator==(const std::pair<Point, Point>& vertex) const { return false; }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const std::pair<Point, Point>& vertex) const
operator ==	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  inline bool operator==(const iterator_compact_to_points& that) const {$/;"	f	class:boost::polygon::iterator_compact_to_points	access:public	signature:(const iterator_compact_to_points& that) const
operator ==	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  inline bool operator==(const iterator_geometry_to_set& that) const {$/;"	f	class:boost::polygon::iterator_geometry_to_set	access:public	signature:(const iterator_geometry_to_set& that) const
operator ==	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  inline bool operator==(const iterator_points_to_compact& that) const {$/;"	f	class:boost::polygon::iterator_points_to_compact	access:public	signature:(const iterator_points_to_compact& that) const
operator ==	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator==(const ActiveTail45& b) const {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(const ActiveTail45& b) const
operator ==	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator==(const Vertex45CompactT& vertex) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
operator ==	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator==(const Vertex45CountT& count) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(const Vertex45CountT& count) const
operator ==	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator==(const iteratorHoles& that) { return itr_ == that.itr_; }$/;"	f	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public	signature:(const iteratorHoles& that)
operator ==	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator==(const std::pair<Point, Point>& vertex) const { return false; }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const std::pair<Point, Point>& vertex) const
operator ==	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline bool operator==(const CountTouch& count) const { return counts == count.counts; }$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(const CountTouch& count) const
operator ==	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^        inline bool operator==(const iterator& that) { return itr_ == that.itr_; }$/;"	f	class:boost::polygon::touch_90_operation::TouchScanEvent::iterator	access:public	signature:(const iterator& that)
operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const active_tail_arbitrary& b) const {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(const active_tail_arbitrary& b) const
operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const iterator_holes_type& that) { return itr_ == that.itr_; }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public	signature:(const iterator_holes_type& that)
operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const std::pair<Point, Point>& vertex) const { return false; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const std::pair<Point, Point>& vertex) const
operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const std::pair<Point, Point>& vertex) const { return false; }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const std::pair<Point, Point>& vertex) const
operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const vertex_arbitrary_compact& vertex) const {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
operator ==	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator==(const vertex_half_edge& vertex) const {$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline bool operator==(const iterator& that) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:public	signature:(const iterator& that) const
operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      inline bool operator==(const iteratorHoles& that) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData::iteratorHoles	access:public	signature:(const iteratorHoles& that) const
operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator==(const ActiveTail& b) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b) const
operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator==(const PolyLine& b) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(const PolyLine& b) const
operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::operator==(const ActiveTail<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b) const
operator ==	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::operator==(const PolyLine<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(const PolyLine<Unit>& b) const
operator ==	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  inline bool polygon_set_data<coordinate_type>::operator==(const polygon_set_data<coordinate_type>& p) const {$/;"	f	class:boost::polygon::polygon_set_data	signature:(const polygon_set_data<coordinate_type>& p) const
operator ==	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator==(const property_merge_interval& that) const { return low_ == that.low_ && high_ == that.high_; }$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(const property_merge_interval& that) const
operator ==	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline bool operator==(const property_merge_point& that) const { return x_ == that.x_ && y_ == that.y_; }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(const property_merge_point& that) const
operator ==	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline bool operator==(const CountMerge& count) const { return counts == count.counts; }$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(const CountMerge& count) const
operator ==	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator==(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
operator ==	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool operator==(const point_2d& that) const {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:(const point_2d& that) const
operator ==	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  bool operator==(const site_event& that) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(const site_event& that) const
operator ==	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator==(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
operator ==	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator==(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
operator ==	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator==(direction_1d d) const { return (val_ == d.val_); }$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(direction_1d d) const
operator ==	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator==(direction_2d d) const { return (val_ == d.val_); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
operator ==	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator==(direction_3d d) const { return (val_ == d.val_); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
operator ==	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator==(orientation_2d that) const { return (val_ == that.val_); }$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:(orientation_2d that) const
operator ==	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator==(orientation_3d that) const { return (val_ == that.val_); }$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(orientation_3d that) const
operator ==	/usr/include/boost/polygon/point_data.hpp	/^  bool operator==(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
operator ==	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline bool operator==(const polygon_45_data& that) const {$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(const polygon_45_data& that) const
operator ==	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool operator==(const polygon_45_set_data& p) const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& p) const
operator ==	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline bool operator==(const polygon_90_data& that) const {$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:(const polygon_90_data& that) const
operator ==	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline bool operator==(const polygon_90_set_data& p) const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& p) const
operator ==	/usr/include/boost/polygon/polygon_data.hpp	/^  inline bool operator==(const polygon_data& that) const {$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(const polygon_data& that) const
operator ==	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool operator==(const polygon_set_data& p) const;$/;"	p	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& p) const
operator ==	/usr/include/boost/polygon/polygon_traits.hpp	/^      inline bool operator==(const iterator_holes_type& that) const {$/;"	f	struct:boost::polygon::view_of::iterator_holes_type	access:public	signature:(const iterator_holes_type& that) const
operator ==	/usr/include/boost/polygon/rectangle_concept.hpp	/^  bool rectangle_data<T>::operator==(const T2& rvalue) const {$/;"	f	class:boost::polygon::rectangle_data	signature:(const T2& rvalue) const
operator ==	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline bool operator==(const T2& rvalue) const;$/;"	p	class:boost::polygon::rectangle_data	access:public	signature:(const T2& rvalue) const
operator ==	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator==(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
operator ==	/usr/include/boost/polygon/transform.hpp	/^  bool operator==(const axis_transformation& a) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const axis_transformation& a) const
operator ==	/usr/include/boost/polygon/transform.hpp	/^  bool operator==(const transformation& tr) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr) const
operator >	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator>(const Vertex45T& vertex) const { return vertex < (*this); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
operator >	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator>(const Vertex45CompactT& vertex) const { return vertex < (*this); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
operator >	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator>(const vertex_arbitrary_compact& vertex) const { return vertex < (*this); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
operator >	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator>(const vertex_half_edge& vertex) const { return vertex < (*this); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
operator >	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator>(const ActiveTail& b) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b) const
operator >	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::operator>(const ActiveTail<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b) const
operator >	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator>(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
operator >	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator>(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
operator >	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator>(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
operator >	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator> (direction_2d d) const { return (val_ > d.val_); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
operator >	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator> (direction_3d d) const { return (val_ > d.val_); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
operator >	/usr/include/boost/polygon/point_data.hpp	/^  bool operator>(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
operator >	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator>(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
operator >=	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline bool operator>=(const Vertex45T& vertex) const { return !((*this) < vertex); }$/;"	f	class:boost::polygon::boolean_op_45::Vertex45T	access:public	signature:(const Vertex45T& vertex) const
operator >=	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool operator>=(const Vertex45CompactT& vertex) const { return !((*this) < vertex); }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(const Vertex45CompactT& vertex) const
operator >=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator>=(const vertex_arbitrary_compact& vertex) const { return !((*this) < vertex); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex) const
operator >=	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool operator>=(const vertex_half_edge& vertex) const { return !((*this) < vertex); }$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex) const
operator >=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool operator>=(const ActiveTail& b) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(const ActiveTail& b) const
operator >=	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::operator>=(const ActiveTail<Unit>& b) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(const ActiveTail<Unit>& b) const
operator >=	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  bool operator>=(const extended_int& that) const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:(const extended_int& that) const
operator >=	/usr/include/boost/polygon/gmp_override.hpp	/^    inline bool operator>=(const gmp_int& that) const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:(const gmp_int& that) const
operator >=	/usr/include/boost/polygon/interval_data.hpp	/^  bool operator>=(const interval_data& that) const {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(const interval_data& that) const
operator >=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator>=(direction_2d d) const { return (val_ >= d.val_); }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_2d d) const
operator >=	/usr/include/boost/polygon/isotropy.hpp	/^    inline bool operator>=(direction_3d d) const { return (val_ >= d.val_); }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(direction_3d d) const
operator >=	/usr/include/boost/polygon/point_data.hpp	/^  bool operator>=(const point_data& that) const {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that) const
operator >=	/usr/include/boost/polygon/segment_data.hpp	/^  bool operator>=(const segment_data& that) const {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that) const
operator []	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline int& operator[](bool index) { return counts_[index]; }$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:(bool index)
operator []	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline CountType operator[](int index) const {return counts[index]; }$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(int index) const
operator []	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline CountType& operator[](int index) { return counts[index]; }$/;"	f	class:boost::polygon::boolean_op_45::Scan45CountT	access:public	signature:(int index)
operator []	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline int operator[](bool index) const {return counts[index]; }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(bool index) const
operator []	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline int& operator[](bool index) { return counts[index]; }$/;"	f	class:boost::polygon::boolean_op_45::Count2	access:public	signature:(bool index)
operator []	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline Vertex45T operator[](int index) const {$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public	signature:(int index) const
operator []	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ct operator[](int index) const {return counts[index]; }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(int index) const
operator []	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ct& operator[](int index) { return counts[index]; }$/;"	f	class:boost::polygon::polygon_45_formation::Vertex45CountT	access:public	signature:(int index)
operator []	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^      inline int& operator[](int index) {$/;"	f	class:boost::polygon::polygon_45_touch::CountTouch	access:public	signature:(int index)
operator []	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge operator[](int index) const { return vertex_half_edge(pt, count[index]); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(int index) const
operator []	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    Unit operator[] (unsigned int index) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(unsigned int index) const
operator []	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline Unit PolyLine<Unit>::operator[] (unsigned int index) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(unsigned int index) const
operator []	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^      inline int& operator[](property_type index) {$/;"	f	class:boost::polygon::polygon_45_property_merge::CountMerge	access:public	signature:(property_type index)
operator ^	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator^(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator ^	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator^(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator ^	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator^(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator ^=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator^=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator ^=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator^=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator ^=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator^=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
operator ^=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator^=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
operator ^=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator^=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator int	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline operator int() const { return T()(counts_[0], counts_[1]); }$/;"	f	class:boost::polygon::boolean_op::BinaryCount	access:public	signature:() const
operator int	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline operator int() const { return count_ % 2; }$/;"	f	class:boost::polygon::boolean_op::UnaryCount	access:public	signature:() const
operator int	/usr/include/boost/polygon/gmp_override.hpp	/^    inline operator int() const {$/;"	f	class:boost::polygon::gmp_int	access:public	signature:() const
operator |	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator|(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator |	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator|(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator |	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator|(const geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(const geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator |=	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  operator|=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator |=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator|=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator |=	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  operator|=(polygon_90_set_data<coordinate_type_1>& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(polygon_90_set_data<coordinate_type_1>& lvalue, const geometry_type_2& rvalue)
operator |=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& operator|=(const polygon_45_set_data& b);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& b)
operator |=	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::operator|=(const polygon_45_set_data<Unit>& b) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const polygon_45_set_data<Unit>& b)
operator |=	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  operator|=(geometry_type_1& lvalue, const geometry_type_2& rvalue) {$/;"	f	namespace:boost::polygon::operators	signature:(geometry_type_1& lvalue, const geometry_type_2& rvalue)
operator_arg_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef polygon_45_set_view operator_arg_type;$/;"	t	class:boost::polygon::polygon_45_set_view	access:public
operator_arg_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef typename polygon_45_set_view<ltype, rtype, op_type>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
operator_arg_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef polygon_90_set_view operator_arg_type;$/;"	t	class:boost::polygon::polygon_90_set_view	access:public
operator_arg_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef typename polygon_90_set_view<ltype, rtype, op_type>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
operator_arg_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef polygon_set_view operator_arg_type;$/;"	t	class:boost::polygon::polygon_set_view	access:public
operator_arg_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef typename polygon_set_view<ltype, rtype, op_type>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef view_of operator_arg_type;$/;"	t	struct:boost::polygon::view_of	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef view_of<polygon_90_set_concept, T> operator_arg_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef polygon_45_set_data operator_arg_type;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef T operator_arg_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename polygon_45_set_data<T>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    typedef polygon_90_set_data operator_arg_type;$/;"	t	class:boost::polygon::polygon_90_set_data	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef T operator_arg_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename polygon_90_set_data<T>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_90_set_traits	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef view_of operator_arg_type;$/;"	t	struct:boost::polygon::view_of	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef view_of<polygon_45_set_concept, T> operator_arg_type;$/;"	t	struct:boost::polygon::polygon_45_set_traits	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef polygon_set_data operator_arg_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef T operator_arg_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
operator_arg_type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename polygon_set_data<T>::operator_arg_type operator_arg_type;$/;"	t	struct:boost::polygon::polygon_set_traits	access:public
operator_provides_storage	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct operator_provides_storage {};$/;"	s	namespace:boost::polygon
operator_requires_copy	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct operator_requires_copy {};$/;"	s	namespace:boost::polygon
operators	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  namespace operators {$/;"	n	namespace:boost::polygon
operators	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  namespace operators {$/;"	n	namespace:boost::polygon
operators	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  namespace operators {$/;"	n	namespace:boost::polygon
ordered_queue	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  ordered_queue() {}$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:()
ordered_queue	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  ordered_queue(const ordered_queue&);$/;"	p	class:boost::polygon::detail::ordered_queue	access:private	signature:(const ordered_queue&)
ordered_queue	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class ordered_queue {$/;"	c	namespace:boost::polygon::detail
orient	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    orientation_2d orient() const { return orient_; }$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
orient	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    static inline orientation_2d orient(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
orient	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  orient(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_traits	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
orient	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline orientation_2d orient() const { return HORIZONTAL; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
orient	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static inline orientation_2d orient(const view_of<polygon_90_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const view_of<polygon_90_set_concept, T>& polygon_set)
orient	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline orientation_2d orient() const { return orient_; }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
orient	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline orientation_2d orient(const T&) { return HORIZONTAL; }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const T&)
orient	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline orientation_2d orient(const polygon_90_set_data<T>& polygon_set) { return polygon_set.orient(); }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_data<T>& polygon_set)
orient	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline orientation_2d orient() const { return HORIZONTAL; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
orient	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static inline orientation_2d orient(const view_of<polygon_45_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const view_of<polygon_45_set_concept, T>& polygon_set)
orient_	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  orientation_2d orient_;$/;"	m	class:boost::polygon::iterator_compact_to_points	access:private
orient_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  orientation_2d orient_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
orient_	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  orientation_2d orient_;$/;"	m	class:boost::polygon::iterator_points_to_compact	access:private
orient_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    orientation_2d orient_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
orient_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    orientation_2d orient_;$/;"	m	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
orient_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    orientation_2d orient_;$/;"	m	class:boost::polygon::polygon_90_set_data	access:private
orient_	/usr/include/boost/polygon/rectangle_concept.hpp	/^    orientation_2d orient_;$/;"	m	class:boost::polygon::less_rectangle_concept	access:private
orientation	/usr/include/boost/polygon/segment_concept.hpp	/^int>::type orientation(const Segment& segment, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(const Segment& segment, const Point& point)
orientation	/usr/include/boost/polygon/segment_concept.hpp	/^int>::type orientation(const Segment1& segment1, const Segment2& segment2) {$/;"	f	namespace:boost::polygon	signature:(const Segment1& segment1, const Segment2& segment2)
orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline orientation_2d(const direction_2d& that);$/;"	p	class:boost::polygon::orientation_2d	access:public	signature:(const direction_2d& that)
orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline orientation_2d(int o);$/;"	p	class:boost::polygon::orientation_2d	access:private	signature:(int o)
orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_2d() : val_(HORIZONTAL) {}$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:()
orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_2d(const orientation_2d& ori) : val_(ori.val_) {}$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:(const orientation_2d& ori)
orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_2d(const orientation_2d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:(const orientation_2d_enum val)
orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^  class orientation_2d {$/;"	c	namespace:boost::polygon
orientation_2d	/usr/include/boost/polygon/isotropy.hpp	/^  orientation_2d::orientation_2d(const direction_2d& that) : val_(that.to_int() >> 1) {}$/;"	f	class:boost::polygon::orientation_2d	signature:(const direction_2d& that)
orientation_2d_enum	/usr/include/boost/polygon/isotropy.hpp	/^  enum orientation_2d_enum { HORIZONTAL = 0, VERTICAL = 1 };$/;"	g	namespace:boost::polygon
orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline orientation_3d(const direction_2d& that);$/;"	p	class:boost::polygon::orientation_3d	access:public	signature:(const direction_2d& that)
orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline orientation_3d(const direction_3d& that);$/;"	p	class:boost::polygon::orientation_3d	access:public	signature:(const direction_3d& that)
orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    explicit inline orientation_3d(int o);$/;"	p	class:boost::polygon::orientation_3d	access:private	signature:(int o)
orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_3d() : val_((int)HORIZONTAL) {}$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:()
orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_3d(const orientation_3d& ori) : val_(ori.val_) {}$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(const orientation_3d& ori)
orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_3d(const orientation_3d_enum val) : val_(val) {}$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(const orientation_3d_enum val)
orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline orientation_3d(orientation_2d ori) : val_(ori.to_int()) {}$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:(orientation_2d ori)
orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^  class orientation_3d {$/;"	c	namespace:boost::polygon
orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^  orientation_3d::orientation_3d(const direction_2d& that) : val_(that.to_int() >> 1) {}$/;"	f	class:boost::polygon::orientation_3d	signature:(const direction_2d& that)
orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^  orientation_3d::orientation_3d(const direction_3d& that) : val_(that.to_int() >> 1) {}$/;"	f	class:boost::polygon::orientation_3d	signature:(const direction_3d& that)
orientation_3d_enum	/usr/include/boost/polygon/isotropy.hpp	/^  enum orientation_3d_enum { PROXIMAL = 2 };$/;"	g	namespace:boost::polygon
orientation_test	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef struct orientation_test {$/;"	s	class:boost::polygon::detail::voronoi_predicates	access:public
ot	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  } ot;$/;"	t	class:boost::polygon::detail::voronoi_predicates	typeref:struct:boost::polygon::detail::voronoi_predicates::orientation_test	access:public
otherTailp_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      ActiveTail45 *otherTailp_;$/;"	m	class:boost::polygon::polygon_45_formation::ActiveTail45	access:private
otherTailp_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      active_tail_arbitrary *otherTailp_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:protected
otherTailp_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail *otherTailp_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail	access:private
other_pt	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Point other_pt; \/\/ 1, 0 or -1$/;"	m	class:boost::polygon::scanline_base::vertex_half_edge	access:public
output	/usr/include/boost/polygon/detail/property_merge.hpp	/^  edge_property_vector output;$/;"	m	class:boost::polygon::merge_scanline	access:private
outputPolygons_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    std::vector<PolyLinePolygonData> outputPolygons_;$/;"	m	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:private
output_	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    mutable value_type output_;$/;"	m	class:boost::polygon::polygon_45_set_view	access:private
output_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    mutable value_type output_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
output_	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    mutable value_type output_;$/;"	m	class:boost::polygon::polygon_set_view	access:private
p	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  std::pair<fpt64, int> p() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
pLineEnd_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      const PolyLine<Unit>* pLineEnd_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:private
pLine_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      const PolyLine<Unit>* pLine_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:private
p_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    ActiveTail45* p_;$/;"	m	class:boost::polygon::PolyLine45HoleData	access:private
p_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    ActiveTail45* p_;$/;"	m	class:boost::polygon::PolyLine45PolygonData	access:private
p_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    active_tail_arbitrary* p_;$/;"	m	class:boost::polygon::poly_line_arbitrary_hole_data	access:private
p_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    active_tail_arbitrary* p_;$/;"	m	class:boost::polygon::poly_line_arbitrary_polygon_data	access:private
p_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail<Unit>* p_;$/;"	m	class:boost::polygon::polygon_formation::PolyLineHoleData	access:private
p_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail<Unit>* p_;$/;"	m	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:private
p_	/usr/include/boost/polygon/transform.hpp	/^  point_data<coordinate_type> p_;$/;"	m	class:boost::polygon::transformation	access:private
pack_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      evalAtXforYPack * pack_;$/;"	m	class:boost::polygon::scanline_base::less_half_edge	access:private
pack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      typename scanline_base<Unit>::evalAtXforYPack* pack_;$/;"	m	class:boost::polygon::arbitrary_boolean_op::less_vertex_data	access:private
pack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      typename scanline_base<Unit>::evalAtXforYPack* pack_;$/;"	m	class:boost::polygon::arbitrary_connectivity_extraction::less_vertex_data	access:private
pack_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      typename scanline_base<Unit>::evalAtXforYPack* pack_;$/;"	m	class:boost::polygon::property_merge::less_vertex_data	access:private
performExtract	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void performExtract(T& result, property_merge_data& data) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(T& result, property_merge_data& data)
performMerge	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    static void performMerge(output_type& result, MergeSetData& tsd) {$/;"	f	struct:boost::polygon::polygon_45_property_merge	access:public	signature:(output_type& result, MergeSetData& tsd)
performTouch	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    static void performTouch(graph_type& graph, TouchSetData& tsd) {$/;"	f	struct:boost::polygon::polygon_45_touch	access:public	signature:(graph_type& graph, TouchSetData& tsd)
performTouch	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    static inline void performTouch(graphT& outputContainer, const TouchSetData& data) {$/;"	f	struct:boost::polygon::touch_90_operation	access:public	signature:(graphT& outputContainer, const TouchSetData& data)
perform_merge	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void perform_merge(result_type& result, property_merge_data& data) {$/;"	f	class:boost::polygon::merge_scanline	access:public	signature:(result_type& result, property_merge_data& data)
perimeter	/usr/include/boost/polygon/polygon_traits.hpp	/^  perimeter(const T& polygon,$/;"	f	namespace:boost::polygon	signature:(const T& polygon, typename enable_if< typename is_polygon_with_holes_type<T>::type>::type * = 0 )
perimeter	/usr/include/boost/polygon/rectangle_concept.hpp	/^  perimeter(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
pmd	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    property_merge_data pmd;$/;"	m	class:boost::polygon::arbitrary_boolean_op	access:private
pmd	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    property_merge_data pmd;$/;"	m	class:boost::polygon::arbitrary_connectivity_extraction	access:private
pmd	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    property_merge_data pmd;$/;"	m	class:boost::polygon::property_merge	access:protected
pmd_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    std::vector<std::pair<property_merge_point<coordinate_type>, std::pair<property_type, int> > > pmd_;$/;"	m	class:boost::polygon::property_merge_90	access:private
point	/usr/include/boost/polygon/detail/minkowski.hpp	/^  typedef point_data<coordinate_type> point;$/;"	t	struct:boost::polygon::detail::minkowski_offset	access:public
point0	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  const point_type& point0(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
point0_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_type point0_;$/;"	m	class:boost::polygon::detail::site_event	access:private
point1	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  const point_type& point1(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
point1_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_type point1_;$/;"	m	class:boost::polygon::detail::site_event	access:private
point_2d	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_2d() {}$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:()
point_2d	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_2d(coordinate_type x, coordinate_type y) :$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:(coordinate_type x, coordinate_type y)
point_2d	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class point_2d {$/;"	c	namespace:boost::polygon::detail
point_comparison	/usr/include/boost/polygon/voronoi_builder.hpp	/^    point_comparison_predicate point_comparison;$/;"	m	struct:boost::polygon::voronoi_builder::end_point_comparison	access:public
point_comparison_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  point_comparison_predicate point_comparison_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
point_comparison_predicate	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  class point_comparison_predicate {$/;"	c	class:boost::polygon::detail::voronoi_predicates	access:public
point_comparison_predicate	/usr/include/boost/polygon/voronoi_builder.hpp	/^    point_comparison_predicate;$/;"	t	class:boost::polygon::voronoi_builder	access:private
point_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_concept {};$/;"	s	namespace:boost::polygon
point_coordinate_type	/usr/include/boost/polygon/point_concept.hpp	/^struct point_coordinate_type {$/;"	s	namespace:boost::polygon
point_coordinate_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_coordinate_type_by_concept {$/;"	s	namespace:boost::polygon
point_coordinate_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_coordinate_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
point_data	/usr/include/boost/polygon/point_data.hpp	/^  explicit point_data(const PointType& that) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const PointType& that)
point_data	/usr/include/boost/polygon/point_data.hpp	/^  explicit point_data(const point_data& that) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data& that)
point_data	/usr/include/boost/polygon/point_data.hpp	/^  point_data()$/;"	f	class:boost::polygon::point_data	access:public	signature:()
point_data	/usr/include/boost/polygon/point_data.hpp	/^  point_data(const point_data<CT>& that) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(const point_data<CT>& that)
point_data	/usr/include/boost/polygon/point_data.hpp	/^  point_data(coordinate_type x, coordinate_type y) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(coordinate_type x, coordinate_type y)
point_data	/usr/include/boost/polygon/point_data.hpp	/^class point_data {$/;"	c	namespace:boost::polygon
point_difference_type	/usr/include/boost/polygon/point_concept.hpp	/^struct point_difference_type {$/;"	s	namespace:boost::polygon
point_difference_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_difference_type_by_concept {$/;"	s	namespace:boost::polygon
point_difference_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_difference_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
point_distance_type	/usr/include/boost/polygon/point_concept.hpp	/^struct point_distance_type {$/;"	s	namespace:boost::polygon
point_distance_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_distance_type_by_concept {$/;"	s	namespace:boost::polygon
point_distance_type_by_concept	/usr/include/boost/polygon/point_concept.hpp	/^struct point_distance_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
point_mutable_traits	/usr/include/boost/polygon/point_traits.hpp	/^struct point_mutable_traits {$/;"	s	namespace:boost::polygon
point_sequence_area	/usr/include/boost/polygon/polygon_traits.hpp	/^  point_sequence_area(iterator_type begin_range, iterator_type end_range) {$/;"	f	namespace:boost::polygon	signature:(iterator_type begin_range, iterator_type end_range)
point_sequence_distance	/usr/include/boost/polygon/polygon_traits.hpp	/^  distance_type point_sequence_distance(iterator_type itr, iterator_type itr_end) {$/;"	f	namespace:boost::polygon	signature:(iterator_type itr, iterator_type itr_end)
point_sequence_is_45	/usr/include/boost/polygon/polygon_traits.hpp	/^  bool point_sequence_is_45(iT itr, iT itr_end) {$/;"	f	namespace:boost::polygon	signature:(iT itr, iT itr_end)
point_traits	/usr/include/boost/polygon/point_traits.hpp	/^struct point_traits {$/;"	s	namespace:boost::polygon
point_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Point point_type;$/;"	t	class:boost::polygon::PolyLine45HoleData	access:public
point_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    typedef Point point_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData	access:public
point_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef Point point_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_hole_data	access:public
point_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef Point point_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public
point_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Point point_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::point_comparison_predicate	access:public
point_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename Site::point_type point_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public
point_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename Site::point_type point_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private
point_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename Site::point_type point_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
point_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename Site::point_type point_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public
point_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef point_2d<T> point_type;$/;"	t	class:boost::polygon::detail::site_event	access:public
point_type	/usr/include/boost/polygon/point_traits.hpp	/^  typedef PointType point_type;$/;"	t	struct:boost::polygon::point_mutable_traits	access:public
point_type	/usr/include/boost/polygon/point_traits.hpp	/^  typedef PointType point_type;$/;"	t	struct:boost::polygon::point_traits	access:public
point_type	/usr/include/boost/polygon/polygon_45_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_45_data	access:public
point_type	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_45_with_holes_data	access:public
point_type	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_90_with_holes_data	access:public
point_type	/usr/include/boost/polygon/polygon_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_data	access:public
point_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
point_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef point_data<coordinate_type> point_type;$/;"	t	struct:boost::polygon::polygon_traits_90	access:public
point_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename T::point_type point_type;$/;"	t	struct:boost::polygon::polygon_traits_general	access:public
point_type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename polygon_traits<T>::point_type point_type;$/;"	t	struct:boost::polygon::view_of	access:public
point_type	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::polygon_with_holes_data	access:public
point_type	/usr/include/boost/polygon/segment_data.hpp	/^  typedef point_data<T> point_type;$/;"	t	class:boost::polygon::segment_data	access:public
point_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef typename segment_type::point_type point_type;$/;"	t	struct:boost::polygon::segment_mutable_traits	access:public
point_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef typename segment_type::point_type point_type;$/;"	t	struct:boost::polygon::segment_traits	access:public
point_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef detail::point_2d<int_type> point_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
pointer	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typedef const point_type* pointer; \/\/immutable$/;"	t	class:boost::polygon::iterator_compact_to_points	access:public
pointer	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef const value_type* pointer; \/\/immutable$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
pointer	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef const coordinate_type* pointer; \/\/immutable$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
pointer	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef const value_type* pointer; \/\/immutable$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
pointer	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef const holeType* pointer; \/\/immutable$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public
pointer	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef const hole_type* pointer; \/\/immutable$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
points	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      std::list<Point> points;$/;"	m	class:boost::polygon::polygon_45_formation::PolyLine45	access:public
points	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      std::list<Point> points;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public
points_	/usr/include/boost/polygon/segment_data.hpp	/^  point_type points_[2];$/;"	m	class:boost::polygon::segment_data	access:private
poly_line_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary() : points() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:()
poly_line_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary(const poly_line_arbitrary& that) : points(that.points) {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:(const poly_line_arbitrary& that)
poly_line_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class poly_line_arbitrary {$/;"	c	class:boost::polygon::polygon_arbitrary_formation	access:public
poly_line_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::poly_line_arbitrary poly_line_arbitrary;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
poly_line_arbitrary_hole_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_hole_data() : p_(0) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:()
poly_line_arbitrary_hole_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_hole_data(active_tail_arbitrary* p) : p_(p) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:(active_tail_arbitrary* p)
poly_line_arbitrary_hole_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  class poly_line_arbitrary_hole_data {$/;"	c	namespace:boost::polygon
poly_line_arbitrary_polygon_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_polygon_data() : p_(0) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:()
poly_line_arbitrary_polygon_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_polygon_data(active_tail_arbitrary* p) : p_(p) {}$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:(active_tail_arbitrary* p)
poly_line_arbitrary_polygon_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  class poly_line_arbitrary_polygon_data {$/;"	c	namespace:boost::polygon
polygon	/usr/include/boost/polygon/detail/boolean_op.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/max_cover.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/minkowski.hpp	/^  typedef polygon_with_holes_data<coordinate_type> polygon;$/;"	t	struct:boost::polygon::detail::minkowski_offset	access:public
polygon	/usr/include/boost/polygon/detail/minkowski.hpp	/^namespace boost { namespace polygon { namespace detail {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/polygon_simplify.hpp	/^namespace boost { namespace polygon { namespace detail { namespace simplify_detail {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^  namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/property_merge.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/gmp_override.hpp	/^namespace boost { namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/interval_concept.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/interval_data.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/interval_traits.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/isotropy.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/point_concept.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/point_data.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/point_traits.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_45_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_90_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_set_concept.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_set_data.hpp	/^namespace boost { namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_set_traits.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_traits.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/rectangle_concept.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/rectangle_data.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/rectangle_traits.hpp	/^namespace boost { namespace polygon{$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/segment_concept.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/segment_data.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/segment_traits.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/segment_utils.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/transform.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/voronoi.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/voronoi_builder.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/voronoi_diagram.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon	/usr/include/boost/polygon/voronoi_geometry_type.hpp	/^namespace polygon {$/;"	n	namespace:boost
polygon_45_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_45_concept {};$/;"	s	namespace:boost::polygon
polygon_45_data	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data() : coords_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:()
polygon_45_data	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data(const polygon_45_data& that) : coords_(that.coords_) {}$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(const polygon_45_data& that)
polygon_45_data	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data(iT input_begin, iT input_end) : coords_(input_begin, input_end) {}$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(iT input_begin, iT input_end)
polygon_45_data	/usr/include/boost/polygon/polygon_45_data.hpp	/^class polygon_45_data {$/;"	c	namespace:boost::polygon
polygon_45_formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct polygon_45_formation : public boolean_op_45<Unit> {$/;"	s	namespace:boost::polygon	inherits:boolean_op_45
polygon_45_property_merge	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^  struct polygon_45_property_merge {$/;"	s	namespace:boost::polygon
polygon_45_set_concept	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  struct polygon_45_set_concept {};$/;"	s	namespace:boost::polygon
polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data() : error_data_(), data_(), dirty_(false), unsorted_(false), is_manhattan_(true) {}$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:()
polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data(const geometry_type& that) : error_data_(), data_(), dirty_(false), unsorted_(false), is_manhattan_(true) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const geometry_type& that)
polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data(const polygon_45_set_data& that) :$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_data& that)
polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline polygon_45_set_data(const polygon_45_set_view<ltype, rtype, op_type>& that) :$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const polygon_45_set_view<ltype, rtype, op_type>& that)
polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  class polygon_45_set_data {$/;"	c	namespace:boost::polygon
polygon_45_set_mutable_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_mutable_traits {};$/;"	s	namespace:boost::polygon
polygon_45_set_mutable_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_mutable_traits<polygon_45_set_data<T> > {$/;"	s	namespace:boost::polygon
polygon_45_set_mutable_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_mutable_traits<std::list<T> > {$/;"	s	namespace:boost::polygon
polygon_45_set_mutable_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_mutable_traits<std::vector<T> > {$/;"	s	namespace:boost::polygon
polygon_45_set_traits	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct polygon_45_set_traits<polygon_45_set_view<ltype, rtype, op_type> > {$/;"	s	namespace:boost::polygon
polygon_45_set_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_traits {$/;"	s	namespace:boost::polygon
polygon_45_set_traits	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct polygon_45_set_traits<polygon_45_set_data<T> > {$/;"	s	namespace:boost::polygon
polygon_45_set_traits	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct polygon_45_set_traits<view_of<polygon_45_set_concept, T> > {$/;"	s	namespace:boost::polygon
polygon_45_set_view	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    polygon_45_set_view(const ltype& lvalue,$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:(const ltype& lvalue, const rtype& rvalue )
polygon_45_set_view	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  class polygon_45_set_view {$/;"	c	namespace:boost::polygon
polygon_45_touch	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^  struct polygon_45_touch {$/;"	s	namespace:boost::polygon
polygon_45_with_holes_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_45_with_holes_concept {};$/;"	s	namespace:boost::polygon
polygon_45_with_holes_data	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data() : self_(), holes_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:()
polygon_45_with_holes_data	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data(const polygon_45_with_holes_data& that) : self_(that.self_),$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(const polygon_45_with_holes_data& that)
polygon_45_with_holes_data	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data(iT input_begin, iT input_end) : self_(), holes_() {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
polygon_45_with_holes_data	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data(iT input_begin, iT input_end, hiT holes_begin, hiT holes_end) : self_(), holes_() {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(iT input_begin, iT input_end, hiT holes_begin, hiT holes_end)
polygon_45_with_holes_data	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^class polygon_45_with_holes_data {$/;"	c	namespace:boost::polygon
polygon_90_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_90_concept {};$/;"	s	namespace:boost::polygon
polygon_90_data	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data() : coords_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:()
polygon_90_data	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data(const polygon_90_data& that) : coords_(that.coords_) {}$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:(const polygon_90_data& that)
polygon_90_data	/usr/include/boost/polygon/polygon_90_data.hpp	/^class polygon_90_data {$/;"	c	namespace:boost::polygon
polygon_90_mutable_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_90_mutable_traits {$/;"	s	namespace:boost::polygon
polygon_90_mutable_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_90_mutable_traits<T, typename gtl_same_type<polygon_concept, typename geometry_concept<T>::type>::type> {$/;"	s	namespace:boost::polygon
polygon_90_set_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_concept {};$/;"	s	namespace:boost::polygon
polygon_90_set_data	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  inline polygon_90_set_data<T>::polygon_90_set_data(const polygon_90_set_view<ltype, rtype, op_type>& that) :$/;"	f	class:boost::polygon::polygon_90_set_data	signature:(const polygon_90_set_view<ltype, rtype, op_type>& that)
polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data() : orient_(HORIZONTAL), data_(), dirty_(false), unsorted_(false) {}$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:()
polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data(const polygon_90_set_data& that) :$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_data& that)
polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data(const polygon_90_set_view<ltype, rtype, op_type>& that);$/;"	p	class:boost::polygon::polygon_90_set_data	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& that)
polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data(orientation_2d orient) : orient_(orient), data_(), dirty_(false), unsorted_(false) {}$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(orientation_2d orient)
polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data(orientation_2d orient, const polygon_90_set_data& that) :$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(orientation_2d orient, const polygon_90_set_data& that)
polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline polygon_90_set_data(orientation_2d orient, iT input_begin, iT input_end) :$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(orientation_2d orient, iT input_begin, iT input_end)
polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^  class polygon_90_set_data {$/;"	c	namespace:boost::polygon
polygon_90_set_mutable_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_mutable_traits {};$/;"	s	namespace:boost::polygon
polygon_90_set_mutable_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_mutable_traits<polygon_90_set_data<T> > {$/;"	s	namespace:boost::polygon
polygon_90_set_mutable_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_mutable_traits<std::list<T> > {$/;"	s	namespace:boost::polygon
polygon_90_set_mutable_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_mutable_traits<std::vector<T> > {$/;"	s	namespace:boost::polygon
polygon_90_set_traits	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct polygon_90_set_traits<polygon_90_set_view<ltype, rtype, op_type> > {$/;"	s	namespace:boost::polygon
polygon_90_set_traits	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct polygon_90_set_traits<view_of<polygon_90_set_concept, T> > {$/;"	s	namespace:boost::polygon
polygon_90_set_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_traits {$/;"	s	namespace:boost::polygon
polygon_90_set_traits	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct polygon_90_set_traits<polygon_90_set_data<T> > {$/;"	s	namespace:boost::polygon
polygon_90_set_view	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    polygon_90_set_view(const ltype& lvalue,$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:(const ltype& lvalue, const rtype& rvalue, orientation_2d orient, op_type op)
polygon_90_set_view	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  class polygon_90_set_view {$/;"	c	namespace:boost::polygon
polygon_90_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_90_traits {$/;"	s	namespace:boost::polygon
polygon_90_with_holes_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_90_with_holes_concept {};$/;"	s	namespace:boost::polygon
polygon_90_with_holes_data	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data() : self_(), holes_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:()
polygon_90_with_holes_data	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data(const polygon_90_with_holes_data& that) : self_(that.self_),$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(const polygon_90_with_holes_data& that)
polygon_90_with_holes_data	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^class polygon_90_with_holes_data {$/;"	c	namespace:boost::polygon
polygon_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline polygon_arbitrary_formation() :$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:()
polygon_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline polygon_arbitrary_formation(bool fractureHoles) :$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(bool fractureHoles)
polygon_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline polygon_arbitrary_formation(const polygon_arbitrary_formation& that) :$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(const polygon_arbitrary_formation& that)
polygon_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  class polygon_arbitrary_formation : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
polygon_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_concept {};$/;"	s	namespace:boost::polygon
polygon_data	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data() : coords_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_data	access:public	signature:()
polygon_data	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data(const polygon_data& that) : coords_(that.coords_) {}$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(const polygon_data& that)
polygon_data	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data(iT input_begin, iT input_end) : coords_(input_begin, input_end) {}$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(iT input_begin, iT input_end)
polygon_data	/usr/include/boost/polygon/polygon_data.hpp	/^class polygon_data {$/;"	c	namespace:boost::polygon
polygon_formation	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^namespace polygon_formation {$/;"	n	namespace:boost::polygon
polygon_from_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type {};$/;"	s	namespace:boost::polygon
polygon_from_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_45_with_holes_concept> { typedef polygon_45_concept type; };$/;"	s	namespace:boost::polygon
polygon_from_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_90_with_holes_concept> { typedef polygon_90_concept type; };$/;"	s	namespace:boost::polygon
polygon_from_polygon_with_holes_type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_with_holes_concept> { typedef polygon_concept type; };$/;"	s	namespace:boost::polygon
polygon_index	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  int polygon_index;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
polygon_long_long_type	/usr/include/boost/polygon/isotropy.hpp	/^typedef boost::long_long_type polygon_long_long_type;$/;"	t
polygon_long_long_type	/usr/include/boost/polygon/isotropy.hpp	/^typedef long long polygon_long_long_type;$/;"	t
polygon_mutable_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_mutable_traits {$/;"	s	namespace:boost::polygon
polygon_set	/usr/include/boost/polygon/detail/minkowski.hpp	/^  typedef polygon_set_data<coordinate_type> polygon_set;$/;"	t	struct:boost::polygon::detail::minkowski_offset	access:public
polygon_set_concept	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_concept {};$/;"	s	namespace:boost::polygon
polygon_set_data	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  polygon_set_data<coordinate_type>::polygon_set_data(const polygon_set_view<ltype, rtype, op_type>& that) :$/;"	f	class:boost::polygon::polygon_set_data	signature:(const polygon_set_view<ltype, rtype, op_type>& that)
polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data() : data_(), dirty_(false), unsorted_(false), is_45_(true) {}$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:()
polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data(const polygon_set_data& that) :$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_data& that)
polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data(const polygon_set_view<ltype, rtype, op_type>& that);$/;"	p	class:boost::polygon::polygon_set_data	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& that)
polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data(iT input_begin, iT input_end) : data_(), dirty_(false), unsorted_(false), is_45_(true) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(iT input_begin, iT input_end)
polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^  class polygon_set_data {$/;"	c	namespace:boost::polygon
polygon_set_mutable_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_mutable_traits {};$/;"	s	namespace:boost::polygon
polygon_set_mutable_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_mutable_traits<polygon_set_data<T> > {$/;"	s	namespace:boost::polygon
polygon_set_mutable_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_mutable_traits<std::list<T> > {$/;"	s	namespace:boost::polygon
polygon_set_mutable_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_mutable_traits<std::vector<T> > {$/;"	s	namespace:boost::polygon
polygon_set_traits	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  struct polygon_set_traits<polygon_set_view<ltype, rtype, op_type> > {$/;"	s	namespace:boost::polygon
polygon_set_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_traits {$/;"	s	namespace:boost::polygon
polygon_set_traits	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct polygon_set_traits<polygon_set_data<T> > {$/;"	s	namespace:boost::polygon
polygon_set_view	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    polygon_set_view(const ltype& lvalue,$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:(const ltype& lvalue, const rtype& rvalue )
polygon_set_view	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  class polygon_set_view {$/;"	c	namespace:boost::polygon
polygon_sort	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^    void polygon_sort(iter_type _b_, iter_type _e_)$/;"	f	namespace:boost::polygon	signature:(iter_type _b_, iter_type _e_)
polygon_sort	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^    void polygon_sort(iter_type _b_, iter_type _e_, const pred_type& _pred_)$/;"	f	namespace:boost::polygon	signature:(iter_type _b_, iter_type _e_, const pred_type& _pred_)
polygon_sort	/usr/include/boost/polygon/isotropy.hpp	/^  void polygon_sort(iter_type _b_, iter_type _e_);$/;"	p	namespace:boost::polygon	signature:(iter_type _b_, iter_type _e_)
polygon_sort	/usr/include/boost/polygon/isotropy.hpp	/^  void polygon_sort(iter_type _b_, iter_type _e_, const pred_type& _pred_);$/;"	p	namespace:boost::polygon	signature:(iter_type _b_, iter_type _e_, const pred_type& _pred_)
polygon_sort_adaptor	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^    struct polygon_sort_adaptor {$/;"	s	namespace:boost::polygon
polygon_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits {};$/;"	s	namespace:boost::polygon
polygon_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits< T,$/;"	s	namespace:boost::polygon	inherits:polygon_traits_90
polygon_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits<T, typename gtl_or<typename gtl_or_4<$/;"	s	namespace:boost::polygon	inherits:gtl_ifelse::type
polygon_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits<T,$/;"	s	namespace:boost::polygon	inherits:polygon_traits_general
polygon_traits_90	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits_90 {$/;"	s	namespace:boost::polygon
polygon_traits_general	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_traits_general {$/;"	s	namespace:boost::polygon
polygon_ulong_long_type	/usr/include/boost/polygon/isotropy.hpp	/^typedef boost::ulong_long_type polygon_ulong_long_type;$/;"	t
polygon_ulong_long_type	/usr/include/boost/polygon/isotropy.hpp	/^typedef unsigned long long polygon_ulong_long_type;$/;"	t
polygon_with_holes_concept	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_with_holes_concept {};$/;"	s	namespace:boost::polygon
polygon_with_holes_data	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  class polygon_with_holes_data {$/;"	c	namespace:boost::polygon
polygon_with_holes_data	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data() : self_(), holes_() {} \/\/do nothing default constructor$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:()
polygon_with_holes_data	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data(const polygon_with_holes_data& that) : self_(that.self_),$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(const polygon_with_holes_data& that)
polygon_with_holes_data	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data(iT input_begin, iT input_end) : self_(), holes_() {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
polygon_with_holes_data	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data(iT input_begin, iT input_end, hiT holes_begin, hiT holes_end) : self_(), holes_() {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(iT input_begin, iT input_end, hiT holes_begin, hiT holes_end)
polygon_with_holes_mutable_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_with_holes_mutable_traits {$/;"	s	namespace:boost::polygon
polygon_with_holes_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_with_holes_traits {$/;"	s	namespace:boost::polygon
polygon_with_holes_traits	/usr/include/boost/polygon/polygon_traits.hpp	/^  template <typename T> struct polygon_with_holes_traits<$/;"	s	namespace:boost::polygon
polys	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    std::vector<polygon_90_with_holes_data<coordinate_type> > polys;$/;"	m	struct:boost::polygon::view_of	access:public
polys	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    std::vector<polygon_45_with_holes_data<coordinate_type> > polys;$/;"	m	struct:boost::polygon::view_of	access:public
pop	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  void pop() {$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:()
popCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& popCoordinate();$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:()
popCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::popCoordinate() {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:()
populateMergeSetData	/usr/include/boost/polygon/detail/property_merge_45.hpp	/^    static void populateMergeSetData(MergeSetData& tsd, iT begin, iT end, property_type property) {$/;"	f	struct:boost::polygon::polygon_45_property_merge	access:public	signature:(MergeSetData& tsd, iT begin, iT end, property_type property)
populateTouchSetData	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    static void populateTouchSetData(TouchSetData& tsd, iT begin, iT end, int nodeCount) {$/;"	f	struct:boost::polygon::polygon_45_touch	access:public	signature:(TouchSetData& tsd, iT begin, iT end, int nodeCount)
populateTouchSetData	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    static inline void populateTouchSetData(TouchSetData& data, const std::vector<std::pair<Unit, std::pair<Unit, int> > >& inputData, int id) {$/;"	f	struct:boost::polygon::touch_90_operation	access:public	signature:(TouchSetData& data, const std::vector<std::pair<Unit, std::pair<Unit, int> > >& inputData, int id)
populateTouchSetData	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    static inline void populateTouchSetData(TouchSetData& data, iT beginData, iT endData, int id) {$/;"	f	struct:boost::polygon::touch_90_operation	access:public	signature:(TouchSetData& data, iT beginData, iT endData, int id)
populateTouchSetData	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void populateTouchSetData(iT begin, iT end,$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:public	signature:(iT begin, iT end, property_type property)
populate_axis_array	/usr/include/boost/polygon/transform.hpp	/^  void populate_axis_array(INDIVIDUAL_AXIS axis_array[]) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(INDIVIDUAL_AXIS axis_array[]) const
populate_property_merge_data	/usr/include/boost/polygon/detail/property_merge.hpp	/^  populate_property_merge_data(property_merge_data& pmd, iT input_begin, iT input_end,$/;"	f	class:boost::polygon::merge_scanline	access:public	signature:(property_merge_data& pmd, iT input_begin, iT input_end, const property_type& property, orientation_2d_type orient)
pos	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  T pos() const {$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:() const
positive_sum_	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  T positive_sum_;$/;"	m	class:boost::polygon::detail::robust_dif	access:private
pp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool pp(const site_type& left_site,$/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:(const site_type& left_site, const site_type& right_site, const site_type& new_site) const
ppp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool ppp(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3) const
ppp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void ppp(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, circle_type& c_event)
ppp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void ppp(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, circle_type& circle, bool recompute_c_x = true, bool recompute_c_y = true, bool recompute_lower_x = true)
pps	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool pps(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int segment_index) const
pps	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void pps(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int segment_index, circle_type& c_event)
pps	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void pps(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int segment_index, circle_type& c_event, bool recompute_c_x = true, bool recompute_c_y = true, bool recompute_lower_x = true)
predicate	/usr/include/boost/polygon/voronoi_builder.hpp	/^    event_comparison_predicate predicate;$/;"	m	struct:boost::polygon::voronoi_builder::__anon4	access:public
predicate_	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    distance_predicate_type predicate_;$/;"	m	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:private
predicated_swap	/usr/include/boost/polygon/isotropy.hpp	/^  inline bool predicated_swap(const bool& pred,$/;"	f	namespace:boost::polygon	signature:(const bool& pred, T& a, T& b)
prev	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* prev() const { return prev_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
prev	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void prev(voronoi_edge_type* e) { prev_ = e; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(voronoi_edge_type* e)
prev	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* prev() { return prev_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
prev_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* prev_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
previousY	/usr/include/boost/polygon/detail/property_merge.hpp	/^  coordinate_type previousY;$/;"	m	class:boost::polygon::merge_scanline	access:private
print	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline void print() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:()
print	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void print(const scanline_data& data) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:protected	signature:(const scanline_data& data)
print	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void print(const scanline_data& data) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:private	signature:(const scanline_data& data)
print	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void print(const vertex_arbitrary_count& count) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:protected	signature:(const vertex_arbitrary_count& count)
print	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void print(const vertex_arbitrary_count& count) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:private	signature:(const vertex_arbitrary_count& count)
print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const half_edge& he)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const half_edge& he)
print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const property_map& c)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const property_map& c)
print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const std::vector<half_edge>& hev)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const std::vector<half_edge>& hev)
print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const std::vector<vertex_data>& vv)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const std::vector<vertex_data>& vv)
print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const std::vector<vertex_property>& hev)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const std::vector<vertex_property>& hev)
print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const vertex_data& v)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const vertex_data& v)
print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static stream_type& print (stream_type& o, const vertex_property& c)$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& o, const vertex_property& c)
print	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static void print(const std::vector<std::pair<half_edge, segment_id> >& vec) {$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(const std::vector<std::pair<half_edge, segment_id> >& vec)
processEdge	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    inline ScanLineToRects& processEdge(CT& rectangles, const interval_data<coordinate_type>& edge);$/;"	p	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public	signature:(CT& rectangles, const interval_data<coordinate_type>& edge)
processEdge	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  ScanLineToRects<T>& ScanLineToRects<T>::processEdge(CT& rectangles, const interval_data<coordinate_type>& edge)$/;"	f	class:boost::polygon::rectangle_formation::ScanLineToRects	signature:(CT& rectangles, const interval_data<coordinate_type>& edge)
processEdge_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^  processEdge_(CT& rectangles, ST& scanData, const interval_type& edge,$/;"	f	namespace:boost::polygon::rectangle_formation	signature:(CT& rectangles, ST& scanData, const interval_type& edge, bool& haveCurrentRect, rectangle_type& currentRect, coordinate_type currentCoordinate, orientation_2d orient)
processEdges	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void processEdges(iterator& beginOutput, iterator& endOutput,$/;"	p	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:public	signature:(iterator& beginOutput, iterator& endOutput, Unit currentX, std::vector<interval_data<Unit> >& leftEdges, std::vector<interval_data<Unit> >& rightEdges)
processEdges	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  processEdges(iterator& beginOutput, iterator& endOutput,$/;"	f	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	signature:(iterator& beginOutput, iterator& endOutput, Unit currentX, std::vector<interval_data<Unit> >& leftEdges, std::vector<interval_data<Unit> >& rightEdges)
processEvent	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^    static inline void processEvent(graphT& outputContainer, TouchOp& op, const TouchScanEvent& data, bool leadingEdge) {$/;"	f	struct:boost::polygon::touch_90_operation	access:public	signature:(graphT& outputContainer, TouchOp& op, const TouchScanEvent& data, bool leadingEdge)
processEvent_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline iT processEvent_(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(cT& output, iT inputBegin, iT inputEnd)
processEvent_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iT processEvent_(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private	signature:(cT& output, iT inputBegin, iT inputEnd)
processEvent_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline iT processEvent_(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private	signature:(cT& output, iT inputBegin, iT inputEnd)
processEvent_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iT processEvent_(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:protected	signature:(cT& output, iT inputBegin, iT inputEnd)
processEvent_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline iT processEvent_(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:private	signature:(cT& output, iT inputBegin, iT inputEnd)
processInterval	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    inline void processInterval(cT& outputContainer, interval_data<Unit> ivl, T deltaCount);$/;"	p	class:boost::polygon::boolean_op::BooleanOp	access:public	signature:(cT& outputContainer, interval_data<Unit> ivl, T deltaCount)
processInterval	/usr/include/boost/polygon/detail/boolean_op.hpp	/^  inline void BooleanOp<T, Unit>::processInterval(cT& outputContainer, interval_data<Unit> ivl, T deltaCount) {$/;"	f	class:boost::polygon::boolean_op::BooleanOp	signature:(cT& outputContainer, interval_data<Unit> ivl, T deltaCount)
processInterval	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      inline void processInterval(graphT& outputContainer, Interval ivl, const std::set<int>& ids, bool leadingEdge) {$/;"	f	class:boost::polygon::touch_90_operation::TouchOp	access:public	signature:(graphT& outputContainer, Interval ivl, const std::set<int>& ids, bool leadingEdge)
processPoint_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline std::pair<int, ActiveTail45*> processPoint_(cT& output, cT2& elements, Point point,$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private	signature:(cT& output, cT2& elements, Point point, Vertex45Count& counts, ActiveTail45** tails, Vertex45Count& incoming)
processPoint_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline std::pair<int, ActiveTail45*> processPoint_(cT& output, cT2& elements,$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private	signature:(cT& output, cT2& elements, std::pair<ActiveTail45*, ActiveTail45*>& verticalPair, iterator previter, Point point, Vertex45Count& counts, ActiveTail45** tails, Vertex45Count& incoming)
processPoint_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline std::pair<std::pair<Point, int>, active_tail_arbitrary*> processPoint_(cT& output, cT2& elements, Point point,$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:protected	signature:(cT& output, cT2& elements, Point point, incoming_count& counts_from_scanline, vertex_arbitrary_count& incoming_count)
processPoint_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    processPoint_(cT& output, cT2& elements,$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:private	signature:(cT& output, cT2& elements, std::pair<active_tail_arbitrary*, active_tail_arbitrary*>& verticalPair, iterator previter, Point point, incoming_count& counts_from_scanline, vertex_arbitrary_count& incoming_count)
processVertex	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void processVertex(edge_property_vector& output) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(edge_property_vector& output)
process_circle_event	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void process_circle_event(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(OUTPUT* output)
process_previous_x	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    static void process_previous_x(cT& output) {$/;"	f	struct:boost::polygon::polygon_45_touch	access:public	signature:(cT& output)
process_previous_x	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static void process_previous_x(cT& output) {$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:private	signature:(cT& output)
process_site_event	/usr/include/boost/polygon/voronoi_builder.hpp	/^  void process_site_event(OUTPUT* output) {$/;"	f	class:boost::polygon::voronoi_builder	access:private	signature:(OUTPUT* output)
propertySetAbove	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void propertySetAbove(coordinate_type y, property_set& ps, T& scanline) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(coordinate_type y, property_set& ps, T& scanline)
propertySetBelow	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void propertySetBelow(coordinate_type y, property_set& ps, T& scanline) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(coordinate_type y, property_set& ps, T& scanline)
property_map	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::vector<std::pair<property_type, int> > property_map;$/;"	t	class:boost::polygon::merge_scanline	access:public
property_map	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<std::pair<property_type, int> > property_map;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
property_map	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<std::pair<property_type, int> > property_map;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
property_map	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<std::pair<property_type, int> > property_map;$/;"	t	class:boost::polygon::property_merge	access:protected
property_map	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<std::pair<property_type, int> > property_map;$/;"	t	class:boost::polygon::scanline	access:public
property_merge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline property_merge() : pmd(), evalAtXforYPack_() {}$/;"	f	class:boost::polygon::property_merge	access:public	signature:()
property_merge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline property_merge(const property_merge& pm) : pmd(pm.pmd), evalAtXforYPack_(pm.evalAtXforYPack_) {}$/;"	f	class:boost::polygon::property_merge	access:public	signature:(const property_merge& pm)
property_merge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class property_merge : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
property_merge_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline property_merge_45() : tsd_() {}$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:()
property_merge_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline property_merge_45(const property_merge_45& that) : tsd_(that.tsd_) {}$/;"	f	class:boost::polygon::property_merge_45	access:public	signature:(const property_merge_45& that)
property_merge_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  class property_merge_45 {$/;"	c	namespace:boost::polygon
property_merge_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline property_merge_90() : pmd_() {}$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:()
property_merge_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline property_merge_90(const property_merge_90& that) : pmd_(that.pmd_) {}$/;"	f	class:boost::polygon::property_merge_90	access:public	signature:(const property_merge_90& that)
property_merge_90	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^  class property_merge_90 {$/;"	c	namespace:boost::polygon
property_merge_data	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::vector<vertex_property> property_merge_data;$/;"	t	class:boost::polygon::merge_scanline	access:public
property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<vertex_property> property_merge_data;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<vertex_property> property_merge_data;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<vertex_property> property_merge_data;$/;"	t	class:boost::polygon::property_merge	access:protected
property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::vector<vertex_property> property_merge_data;$/;"	t	class:boost::polygon::scanline	access:public
property_merge_interval	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline property_merge_interval() : low_(), high_() {}$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:()
property_merge_interval	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline property_merge_interval(coordinate_type low, coordinate_type high) : low_(low), high_(high) {}$/;"	f	class:boost::polygon::property_merge_interval	access:public	signature:(coordinate_type low, coordinate_type high)
property_merge_interval	/usr/include/boost/polygon/detail/property_merge.hpp	/^class property_merge_interval {$/;"	c	namespace:boost::polygon
property_merge_point	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline property_merge_point() : x_(), y_() {}$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:()
property_merge_point	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline property_merge_point(coordinate_type x, coordinate_type y) : x_(x), y_(y) {}$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(coordinate_type x, coordinate_type y)
property_merge_point	/usr/include/boost/polygon/detail/property_merge.hpp	/^class property_merge_point {$/;"	c	namespace:boost::polygon
property_set	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef keytype property_set;$/;"	t	class:boost::polygon::merge_scanline	access:public
property_set	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef keytype property_set;$/;"	t	class:boost::polygon::scanline	access:public
property_type	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef int property_type;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
ps	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool ps(const site_type& left_site, const site_type& right_site,$/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:(const site_type& left_site, const site_type& right_site, const site_type& new_site, bool reverse_order) const
pss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool pss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int point_index) const
pss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void pss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int point_index, circle_type& c_event)
pss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void pss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, int point_index, circle_type& c_event, bool recompute_c_x = true, bool recompute_c_y = true, bool recompute_lower_x = true)
pt	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Point pt;$/;"	m	class:boost::polygon::boolean_op_45::Vertex45T	access:public
pt	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      Point pt;$/;"	m	class:boost::polygon::polygon_45_formation::Vertex45CompactT	access:public
pt	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Point pt;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public
pt	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Point pt;$/;"	m	class:boost::polygon::scanline_base::vertex_half_edge	access:public
pt_	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  point_type pt_;$/;"	m	class:boost::polygon::iterator_compact_to_points	access:private
pt_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Point pt_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::less_half_edge_count	access:private
pt_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Point pt_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::less_incoming_count	access:private
pt_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      Point pt_;$/;"	m	class:boost::polygon::property_merge::less_half_edge_pair	access:private
ptdata_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    std::vector<Unit> ptdata_;$/;"	m	class:boost::polygon::polygon_formation::PolyLine	access:private
pts	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  point_data<coordinate_type> first_pt, second_pt, pts[3];$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
push	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  T &push(const T &e) {$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:(const T &e)
pushCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& pushCoordinate(Unit coord);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(Unit coord)
pushCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void pushCoordinate(Unit coord);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(Unit coord)
pushCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::pushCoordinate(Unit coord) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(Unit coord)
pushCoordinate	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::pushCoordinate(Unit coord) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(Unit coord)
pushPoint	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline void pushPoint(Point point) {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(Point point)
pushPoint	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline void pushPoint(Point point) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(Point point)
pushPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine& pushPoint(const point_data<Unit>& point);$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(const point_data<Unit>& point)
pushPoint	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>& PolyLine<Unit>::pushPoint(const point_data<Unit>& point) {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(const point_data<Unit>& point)
ranges_	/usr/include/boost/polygon/rectangle_data.hpp	/^  interval_data<coordinate_type> ranges_[2];$/;"	m	class:boost::polygon::rectangle_data	access:private
re	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  relative_error_type re() const { return re_; }$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
re_	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  relative_error_type re_;$/;"	m	class:boost::polygon::detail::robust_fpt	access:private
rect	/usr/include/boost/polygon/detail/max_cover.hpp	/^      Rectangle rect;$/;"	m	class:boost::polygon::MaxCover::Node	access:public
rect	/usr/include/boost/polygon/detail/max_cover.hpp	/^      Rectangle rect;$/;"	m	struct:boost::polygon::MaxCover::stack_element	access:public
rect	/usr/include/boost/polygon/polygon_traits.hpp	/^    rectangle_data<coordinate_type> rect;$/;"	m	struct:boost::polygon::view_of	access:public
rectangle_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  rectangle_data<coordinate_type> rectangle_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
rectangle_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_concept {};$/;"	s	namespace:boost::polygon
rectangle_coordinate_type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_coordinate_type {$/;"	s	namespace:boost::polygon
rectangle_coordinate_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_coordinate_type_by_concept { typedef void type; };$/;"	s	namespace:boost::polygon
rectangle_coordinate_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_coordinate_type_by_concept<T, gtl_yes> { typedef typename rectangle_traits<T>::coordinate_type type; };$/;"	s	namespace:boost::polygon
rectangle_data	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data():ranges_() {}$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:()
rectangle_data	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data(T xl, T yl, T xh, T yh):ranges_() {$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(T xl, T yl, T xh, T yh)
rectangle_data	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data(const interval_type_1& hrange,$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(const interval_type_1& hrange, const interval_type_2& vrange)
rectangle_data	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline rectangle_data(const rectangle_data& that):ranges_() { (*this) = that; }$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(const rectangle_data& that)
rectangle_data	/usr/include/boost/polygon/rectangle_data.hpp	/^class rectangle_data {$/;"	c	namespace:boost::polygon
rectangle_difference_type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_difference_type {$/;"	s	namespace:boost::polygon
rectangle_difference_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_difference_type_by_concept { typedef void type; };$/;"	s	namespace:boost::polygon
rectangle_difference_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_difference_type_by_concept<T, gtl_yes> {$/;"	s	namespace:boost::polygon
rectangle_distance_type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_distance_type {$/;"	s	namespace:boost::polygon
rectangle_distance_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_distance_type_by_concept { typedef void type; };$/;"	s	namespace:boost::polygon
rectangle_distance_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_distance_type_by_concept<T, gtl_yes> {$/;"	s	namespace:boost::polygon
rectangle_formation	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^namespace rectangle_formation {$/;"	n	namespace:boost::polygon
rectangle_interval_type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_interval_type {$/;"	s	namespace:boost::polygon
rectangle_interval_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_interval_type_by_concept { typedef void type; };$/;"	s	namespace:boost::polygon
rectangle_interval_type_by_concept	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_interval_type_by_concept<T, gtl_yes> { typedef typename rectangle_traits<T>::interval_type type; };$/;"	s	namespace:boost::polygon
rectangle_mutable_traits	/usr/include/boost/polygon/rectangle_traits.hpp	/^  struct rectangle_mutable_traits {$/;"	s	namespace:boost::polygon
rectangle_traits	/usr/include/boost/polygon/rectangle_traits.hpp	/^  struct rectangle_traits {};$/;"	s	namespace:boost::polygon
rectangle_traits	/usr/include/boost/polygon/rectangle_traits.hpp	/^  struct rectangle_traits<T, gtl_no> {};$/;"	s	namespace:boost::polygon
rectangle_traits	/usr/include/boost/polygon/rectangle_traits.hpp	/^  struct rectangle_traits<T, typename gtl_same_type<typename T::interval_type, typename T::interval_type>::type> {$/;"	s	namespace:boost::polygon
rectangle_type	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef T rectangle_type;$/;"	t	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public
reference	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typedef const point_type& reference; \/\/immutable$/;"	t	class:boost::polygon::iterator_compact_to_points	access:public
reference	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef const value_type& reference; \/\/immutable$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
reference	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef const coordinate_type& reference; \/\/immutable$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
reference	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef const value_type& reference; \/\/immutable$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
reference	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef const holeType& reference; \/\/immutable$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public
reference	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef const hole_type& reference; \/\/immutable$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
reflected_convolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& reflected_convolve($/;"	f	namespace:boost::polygon	signature:( IntervalType1& lvalue, const IntervalType2& rvalue)
reflected_convolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  reflected_convolve(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle)
reflected_deconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& reflected_deconvolve($/;"	f	namespace:boost::polygon	signature:( IntervalType1& lvalue, const IntervalType2& rvalue)
reflected_deconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  reflected_deconvolve(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type_1& rectangle, const rectangle_type_2& convolution_rectangle)
relative_error_type	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  typedef _fpt relative_error_type;$/;"	t	class:boost::polygon::detail::robust_fpt	access:public
removal_set_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    std::vector<iterator> removal_set_; \/\/edges to be removed at the current scanline stop$/;"	m	class:boost::polygon::scanline	access:public
remove_colinear_pts	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    static bool remove_colinear_pts(std::vector<point_data<coordinate_type> >& poly) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(std::vector<point_data<coordinate_type> >& poly)
remove_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void remove_edge(edge_type* edge) {$/;"	f	class:boost::polygon::voronoi_diagram	access:private	signature:(edge_type* edge)
remove_retired_edges_from_scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void remove_retired_edges_from_scanline() {$/;"	f	class:boost::polygon::scanline	access:public	signature:()
reserve	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline void reserve(std::size_t size) { return data_.reserve(size); }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(std::size_t size)
reserve	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline void reserve(std::size_t size) { return data_.reserve(size); }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(std::size_t size)
reserve	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline void reserve(std::size_t size) { return data_.reserve(size); }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(std::size_t size)
resize	/usr/include/boost/polygon/detail/minkowski.hpp	/^  polygon_set_data<T>::resize(coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments) {$/;"	f	class:boost::polygon::polygon_set_data	signature:(coordinate_type resizing, bool corner_fill_arc, unsigned int num_circle_segments)
resize	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  resize(polygon_set_type& polygon_set, coord_type resizing,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, coord_type resizing, RoundingOption rounding = CLOSEST, CornerOption corner = INTERSECTION)
resize	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& resize(coordinate_type resizing, RoundingOption rounding = CLOSEST,$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(coordinate_type resizing, RoundingOption rounding = CLOSEST, CornerOption corner = INTERSECTION)
resize	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  polygon_45_set_data<Unit>::resize(Unit resizing, RoundingOption rounding, CornerOption corner) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(Unit resizing, RoundingOption rounding, CornerOption corner)
resize	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  resize(polygon_set_type& polygon_set, coord_type resizing) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, coord_type resizing)
resize	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  resize(polygon_set_type& polygon_set, coord_type west, coord_type east, coord_type south, coord_type north) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, coord_type west, coord_type east, coord_type south, coord_type north)
resize	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    resize(coordinate_type west, coordinate_type east, coordinate_type south, coordinate_type north);$/;"	p	class:boost::polygon::polygon_90_set_data	access:public	signature:(coordinate_type west, coordinate_type east, coordinate_type south, coordinate_type north)
resize	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^  polygon_90_set_data<coordinate_type>::resize(coordinate_type west,$/;"	f	class:boost::polygon::polygon_90_set_data	signature:(coordinate_type west, coordinate_type east, coordinate_type south, coordinate_type north)
resize	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  resize(polygon_set_type& polygon_set, coord_type resizing, bool corner_fill_arcs = false, int num_circle_segments = 0) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, coord_type resizing, bool corner_fill_arcs = false, int num_circle_segments = 0)
resize	/usr/include/boost/polygon/polygon_set_data.hpp	/^    resize(coordinate_type resizing, bool corner_fill_arc = false, unsigned int num_circle_segments=0);$/;"	p	class:boost::polygon::polygon_set_data	access:public	signature:(coordinate_type resizing, bool corner_fill_arc = false, unsigned int num_circle_segments=0)
resize_poly_down	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    static bool resize_poly_down(std::vector<point_data<coordinate_type> >& poly,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(std::vector<point_data<coordinate_type> >& poly, coordinate_type west_shrinking, coordinate_type east_shrinking, coordinate_type south_shrinking, coordinate_type north_shrinking)
resize_poly_down	/usr/include/boost/polygon/polygon_set_data.hpp	/^    static bool resize_poly_down(std::vector<point_data<coordinate_type> >& poly, coordinate_type distance, coordinate_type multiplier) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(std::vector<point_data<coordinate_type> >& poly, coordinate_type distance, coordinate_type multiplier)
resize_poly_up	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    static void resize_poly_up(std::vector<point_data<coordinate_type> >& poly,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(std::vector<point_data<coordinate_type> >& poly, coordinate_type west_bloating, coordinate_type east_bloating, coordinate_type south_bloating, coordinate_type north_bloating)
resize_poly_up	/usr/include/boost/polygon/polygon_set_data.hpp	/^    static void resize_poly_up(std::vector<point_data<coordinate_type> >& poly, coordinate_type distance, coordinate_type multiplier) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(std::vector<point_data<coordinate_type> >& poly, coordinate_type distance, coordinate_type multiplier)
right	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d right() const {return turn(LOW);}$/;"	f	class:boost::polygon::direction_2d	access:public	signature:() const
right_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  beach_line_node_key& right_site(const site_type &site) {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:(const site_type &site)
right_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  const site_type &right_site() const {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:() const
right_site	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_type &right_site() {$/;"	f	class:boost::polygon::detail::beach_line_node_key	access:public	signature:()
right_site_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_type right_site_;$/;"	m	class:boost::polygon::detail::beach_line_node_key	access:private
rise	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int rise; \/\/ 1, 0 or -1$/;"	m	class:boost::polygon::boolean_op_45::Vertex45T	access:public
rise	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      int rise; \/\/-1, 0, +1$/;"	m	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public
robust_cross_product	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  static fpt_type robust_cross_product(int_x2_type a1_,$/;"	f	class:boost::polygon::detail::voronoi_predicates	access:public	signature:(int_x2_type a1_, int_x2_type b1_, int_x2_type a2_, int_x2_type b2_)
robust_dif	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  explicit robust_dif(const T& value) :$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& value)
robust_dif	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif() :$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:()
robust_dif	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_dif(const T& pos, const T& neg) :$/;"	f	class:boost::polygon::detail::robust_dif	access:public	signature:(const T& pos, const T& neg)
robust_dif	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^class robust_dif {$/;"	c	namespace:boost::polygon::detail
robust_dif_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef robust_dif<robust_fpt_type> robust_dif_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
robust_fpt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  explicit robust_fpt(floating_point_type fpv) :$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(floating_point_type fpv)
robust_fpt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt() : fpv_(0.0), re_(0.0) {}$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:()
robust_fpt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt(floating_point_type fpv, relative_error_type error) :$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:(floating_point_type fpv, relative_error_type error)
robust_fpt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^class robust_fpt {$/;"	c	namespace:boost::polygon::detail
robust_fpt_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef robust_fpt<fpt_type> robust_fpt_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
robust_sqrt_expr	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^class robust_sqrt_expr {$/;"	c	namespace:boost::polygon::detail
robust_sqrt_expr_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^        robust_sqrt_expr_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public
rot_next	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* rot_next() const { return prev_->twin(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
rot_next	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* rot_next() { return prev_->twin(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
rot_prev	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* rot_prev() const { return twin_->next(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
rot_prev	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* rot_prev() { return twin_->next(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
round	/usr/include/boost/polygon/isotropy.hpp	/^    static inline T round(T t2) {$/;"	f	struct:boost::polygon::scaling_policy	access:public	signature:(T t2)
round	/usr/include/boost/polygon/isotropy.hpp	/^    static inline T round(T2 t2) {$/;"	f	struct:boost::polygon::scaling_policy	access:public	signature:(T2 t2)
roundClosest	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline int roundClosest(double distance) {$/;"	f	namespace:boost::polygon	signature:(double distance)
roundWithOptions	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline Unit roundWithOptions(double distance, RoundingOption rounding) {$/;"	f	namespace:boost::polygon	signature:(double distance, RoundingOption rounding)
round_down	/usr/include/boost/polygon/polygon_set_data.hpp	/^  static inline T round_down(double val) {$/;"	f	namespace:boost::polygon	signature:(double val)
round_down	/usr/include/boost/polygon/polygon_set_data.hpp	/^  static inline point_data<T> round_down(point_data<double> v) {$/;"	f	namespace:boost::polygon	signature:(point_data<double> v)
rvalue_	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    const rtype& rvalue_;$/;"	m	class:boost::polygon::polygon_45_set_view	access:private
rvalue_	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    const rtype& rvalue_;$/;"	m	class:boost::polygon::polygon_90_set_view	access:private
rvalue_	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    const rtype& rvalue_;$/;"	m	class:boost::polygon::polygon_set_view	access:private
scale	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& scale(IntervalType& interval, double factor) {$/;"	f	namespace:boost::polygon	signature:(IntervalType& interval, double factor)
scale	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type& scale(PointType& point, const ScaleType& scaling) {$/;"	f	namespace:boost::polygon	signature:(PointType& point, const ScaleType& scaling)
scale	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  scale(polygon_set_type& polygon_set, double factor) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, double factor)
scale	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& scale(double scaling);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(double scaling)
scale	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::scale(double factor) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(double factor)
scale	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  scale(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, const scaling_type& scaling)
scale	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& scale(const anisotropic_scale_factor<scaling_type>& scaling) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const anisotropic_scale_factor<scaling_type>& scaling)
scale	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& scale(double factor) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(double factor)
scale	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline polygon_set_data& scale(polygon_set_data& polygon_set,$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(polygon_set_data& polygon_set, const scaling_type& scaling)
scale	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale(T& polygon, double factor,$/;"	f	namespace:boost::polygon	signature:(T& polygon, double factor, typename enable_if< typename is_any_mutable_polygon_with_holes_type<T>::type>::type * = 0 )
scale	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale(polygon_type& polygon, double factor) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, double factor)
scale	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale(polygon_type& polygon, double factor,$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, double factor, typename enable_if< typename gtl_and< typename is_any_mutable_polygon_without_holes_type<polygon_type>::type, typename gtl_same_type < forty_five_domain, typename geometry_domain<typename geometry_concept<polygon_type>::type>::type>::type>::type>::type * = 0 )
scale	/usr/include/boost/polygon/rectangle_concept.hpp	/^  scale(rectangle_type& rectangle, const scaling_type& scaling) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const scaling_type& scaling)
scale	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& scale(Segment& segment, const Scale& sc) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Scale& sc)
scale	/usr/include/boost/polygon/transform.hpp	/^  void scale(coordinate_type& x, coordinate_type& y) const {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(coordinate_type& x, coordinate_type& y) const
scale_	/usr/include/boost/polygon/transform.hpp	/^  scale_factor_type scale_[2];$/;"	m	class:boost::polygon::anisotropic_scale_factor	access:private
scale_down	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& scale_down($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type factor)
scale_down	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type& scale_down(PointType& point, CType factor) {$/;"	f	namespace:boost::polygon	signature:(PointType& point, CType factor)
scale_down	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  scale_down(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type factor)
scale_down	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& scale_down(typename coordinate_traits<Unit>::unsigned_area_type factor);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(typename coordinate_traits<Unit>::unsigned_area_type factor)
scale_down	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::scale_down(typename coordinate_traits<Unit>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(typename coordinate_traits<Unit>::unsigned_area_type factor)
scale_down	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  scale_down(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type> ::unsigned_area_type factor)
scale_down	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& scale_down(typename coordinate_traits<coordinate_type>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type factor)
scale_down	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  scale_down(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type factor)
scale_down	/usr/include/boost/polygon/polygon_set_data.hpp	/^    scale_down(typename coordinate_traits<coordinate_type>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type factor)
scale_down	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale_down(T& polygon, typename coordinate_traits<typename polygon_traits<T>::coordinate_type>::unsigned_area_type factor) {$/;"	f	namespace:boost::polygon	signature:(T& polygon, typename coordinate_traits<typename polygon_traits<T>::coordinate_type>::unsigned_area_type factor)
scale_down	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale_down(polygon_type& polygon, typename coordinate_traits<typename polygon_traits<polygon_type>::coordinate_type>::unsigned_area_type factor) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, typename coordinate_traits<typename polygon_traits<polygon_type>::coordinate_type>::unsigned_area_type factor)
scale_down	/usr/include/boost/polygon/rectangle_concept.hpp	/^  scale_down(rectangle_type& rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename coordinate_traits<typename rectangle_coordinate_type<rectangle_type>::type>::unsigned_area_type factor)
scale_down	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& scale_down(Segment& segment,$/;"	f	namespace:boost::polygon	signature:(Segment& segment, typename coordinate_traits< typename segment_coordinate_type<Segment>::type >::unsigned_area_type factor)
scale_down_vertex_45_compact_range_blindly	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void scale_down_vertex_45_compact_range_blindly(iT beginr, iT endr, T factor) {$/;"	f	namespace:boost::polygon	signature:(iT beginr, iT endr, T factor)
scale_up	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& scale_up($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type factor)
scale_up	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type& scale_up(PointType& point, CType factor) {$/;"	f	namespace:boost::polygon	signature:(PointType& point, CType factor)
scale_up	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  scale_up(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type factor)
scale_up	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& scale_up(typename coordinate_traits<Unit>::unsigned_area_type factor);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(typename coordinate_traits<Unit>::unsigned_area_type factor)
scale_up	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::scale_up(typename coordinate_traits<Unit>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(typename coordinate_traits<Unit>::unsigned_area_type factor)
scale_up	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  scale_up(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type> ::unsigned_area_type factor)
scale_up	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& scale_up(typename coordinate_traits<coordinate_type>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type factor)
scale_up	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  scale_up(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type factor)
scale_up	/usr/include/boost/polygon/polygon_set_data.hpp	/^    scale_up(typename coordinate_traits<coordinate_type>::unsigned_area_type factor) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type factor)
scale_up	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale_up(T& polygon, typename coordinate_traits<typename polygon_traits<T>::coordinate_type>::unsigned_area_type factor) {$/;"	f	namespace:boost::polygon	signature:(T& polygon, typename coordinate_traits<typename polygon_traits<T>::coordinate_type>::unsigned_area_type factor)
scale_up	/usr/include/boost/polygon/polygon_traits.hpp	/^  scale_up(polygon_type& polygon, typename coordinate_traits<typename polygon_traits<polygon_type>::coordinate_type>::unsigned_area_type factor) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, typename coordinate_traits<typename polygon_traits<polygon_type>::coordinate_type>::unsigned_area_type factor)
scale_up	/usr/include/boost/polygon/rectangle_concept.hpp	/^  scale_up(rectangle_type& rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename coordinate_traits<typename rectangle_coordinate_type<rectangle_type>::type>::unsigned_area_type factor)
scale_up	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& scale_up(Segment& segment,$/;"	f	namespace:boost::polygon	signature:(Segment& segment, typename coordinate_traits< typename segment_coordinate_type<Segment>::type >::unsigned_area_type factor)
scale_up_vertex_45_compact_range	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  void scale_up_vertex_45_compact_range(iT beginr, iT endr, T factor) {$/;"	f	namespace:boost::polygon	signature:(iT beginr, iT endr, T factor)
scale_with	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& scale_with(const scaling_type& scaling) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const scaling_type& scaling)
scaling_policy	/usr/include/boost/polygon/isotropy.hpp	/^  struct scaling_policy {$/;"	s	namespace:boost::polygon
scan	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      void scan(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:public	signature:(cT& output, iT inputBegin, iT inputEnd)
scan	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      void scan(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:public	signature:(cT& output, iT inputBegin, iT inputEnd)
scan	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      void scan(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:public	signature:(cT& output, iT inputBegin, iT inputEnd)
scan	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    void scan(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(cT& output, iT inputBegin, iT inputEnd)
scan	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    void scan(cT& output, iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(cT& output, iT inputBegin, iT inputEnd)
scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void scan(result_type& result, result_functor rf, iT begin, iT end) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(result_type& result, result_functor rf, iT begin, iT end)
scanData_	/usr/include/boost/polygon/detail/boolean_op.hpp	/^    ScanData scanData_;$/;"	m	class:boost::polygon::boolean_op::BooleanOp	access:protected
scanData_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Scan45Data scanData_;$/;"	m	class:boost::polygon::boolean_op_45::Scan45	access:public
scanData_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      Polygon45FormationData scanData_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
scanData_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      Polygon45FormationData scanData_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
scanData_	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^      ScanData scanData_;$/;"	m	class:boost::polygon::touch_90_operation::TouchOp	access:protected
scanData_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    scanline_data scanData_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation	access:protected
scanData_	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    ScanData scanData_;$/;"	m	class:boost::polygon::rectangle_formation::ScanLineToRects	access:private
scan_data_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    scanline_type scan_data_;$/;"	m	class:boost::polygon::scanline	access:public
scan_rect_type	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef rectangle_data<coordinate_type> scan_rect_type;$/;"	t	class:boost::polygon::rectangle_formation::ScanLineToRects	access:public
scanline	/usr/include/boost/polygon/detail/property_merge.hpp	/^  scanline_type scanline;$/;"	m	class:boost::polygon::merge_scanline	access:private
scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline scanline() : scan_data_(), removal_set_(), insertion_set_(), end_point_queue_(),$/;"	f	class:boost::polygon::scanline	access:public	signature:()
scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline scanline(const scanline& that) : scan_data_(), removal_set_(), insertion_set_(), end_point_queue_(),$/;"	f	class:boost::polygon::scanline	access:public	signature:(const scanline& that)
scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  class scanline : public scanline_base<Unit> {$/;"	c	namespace:boost::polygon	inherits:scanline_base
scanlinePosition	/usr/include/boost/polygon/detail/property_merge.hpp	/^  scanline_iterator scanlinePosition;$/;"	m	class:boost::polygon::merge_scanline	access:private
scanline_base	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct scanline_base {$/;"	s	namespace:boost::polygon
scanline_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::map<vertex_half_edge, active_tail_arbitrary*, less_vertex_half_edge> scanline_data;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:protected
scanline_data	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::map<vertex_half_edge, active_tail_arbitrary*, less_vertex_half_edge> scanline_data;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
scanline_element	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, property_map> scanline_element;$/;"	t	class:boost::polygon::scanline	access:public
scanline_element	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::set<segment_id> > scanline_element;$/;"	t	class:boost::polygon::line_intersection	access:private
scanline_iterator	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef typename scanline_type::iterator scanline_iterator;$/;"	t	class:boost::polygon::merge_scanline	access:public
scanline_orientation	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  scanline_orientation(const polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(const polygon_set_type& polygon_set)
scanline_type	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::map<coordinate_type, property_map> scanline_type;$/;"	t	class:boost::polygon::merge_scanline	access:public
scanline_type	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::map<half_edge, property_map, less_half_edge> scanline_type;$/;"	t	class:boost::polygon::scanline	access:public
scheduleCross0_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline void scheduleCross0_(iterator iter1, iterator iter2) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(iterator iter1, iterator iter2)
scheduleCross1_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      inline void scheduleCross1_(iterator iter1, iterator iter2) {$/;"	f	class:boost::polygon::boolean_op_45::Scan45	access:private	signature:(iterator iter1, iterator iter2)
second_pt	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  point_data<coordinate_type> first_pt, second_pt, pts[3];$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
segmentOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    orientation_2d segmentOrient(unsigned int index = 0) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(unsigned int index = 0) const
segmentOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline orientation_2d PolyLine<Unit>::segmentOrient(unsigned int index) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(unsigned int index) const
segment_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_concept {};$/;"	s	namespace:boost::polygon
segment_coordinate_type	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_coordinate_type {$/;"	s	namespace:boost::polygon
segment_coordinate_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_coordinate_type_by_concept {$/;"	s	namespace:boost::polygon
segment_coordinate_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_coordinate_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
segment_data	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data()$/;"	f	class:boost::polygon::segment_data	access:public	signature:()
segment_data	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data(const point_type& low, const point_type& high) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const point_type& low, const point_type& high)
segment_data	/usr/include/boost/polygon/segment_data.hpp	/^  segment_data(const segment_data& that) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(const segment_data& that)
segment_data	/usr/include/boost/polygon/segment_data.hpp	/^class segment_data {$/;"	c	namespace:boost::polygon
segment_distance_type	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_distance_type {$/;"	s	namespace:boost::polygon
segment_distance_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_distance_type_by_concept {$/;"	s	namespace:boost::polygon
segment_distance_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_distance_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
segment_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void segment_edge(std::vector<std::pair<half_edge, int> >& output_segments,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::pair<half_edge, int> >& output_segments, const half_edge& , segment_id id, iT begin, iT end)
segment_id	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef int segment_id;$/;"	t	class:boost::polygon::line_intersection	access:private
segment_intersections	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void segment_intersections(std::vector<std::pair<half_edge, int> >& output_segments,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::pair<half_edge, int> >& output_segments, std::vector<std::set<Point> >& intersection_points, iT begin, iT end)
segment_mutable_traits	/usr/include/boost/polygon/segment_traits.hpp	/^struct segment_mutable_traits {$/;"	s	namespace:boost::polygon
segment_point_type	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_point_type {$/;"	s	namespace:boost::polygon
segment_point_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_point_type_by_concept {$/;"	s	namespace:boost::polygon
segment_point_type_by_concept	/usr/include/boost/polygon/segment_concept.hpp	/^struct segment_point_type_by_concept<GeometryType, gtl_yes> {$/;"	s	namespace:boost::polygon
segment_traits	/usr/include/boost/polygon/segment_traits.hpp	/^struct segment_traits {$/;"	s	namespace:boost::polygon
segment_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef Segment segment_type;$/;"	t	struct:boost::polygon::segment_mutable_traits	access:public
segment_type	/usr/include/boost/polygon/segment_traits.hpp	/^  typedef Segment segment_type;$/;"	t	struct:boost::polygon::segment_traits	access:public
self_	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  polygon_45_data<coordinate_type> self_;$/;"	m	class:boost::polygon::polygon_45_with_holes_data	access:public
self_	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  polygon_90_data<coordinate_type> self_;$/;"	m	class:boost::polygon::polygon_90_with_holes_data	access:private
self_	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  polygon_data<coordinate_type> self_;$/;"	m	class:boost::polygon::polygon_with_holes_data	access:public
self_assign_operator_lvalue	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct self_assign_operator_lvalue {$/;"	s	namespace:boost::polygon
self_assignment_boolean_op	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    geometry_type_1& self_assignment_boolean_op(geometry_type_1& lvalue_, const geometry_type_2& rvalue_) {$/;"	f	namespace:boost::polygon	signature:(geometry_type_1& lvalue_, const geometry_type_2& rvalue_)
self_assignment_boolean_op	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  geometry_type_1& self_assignment_boolean_op(geometry_type_1& lvalue_, const geometry_type_2& rvalue_) {$/;"	f	namespace:boost::polygon	signature:(geometry_type_1& lvalue_, const geometry_type_2& rvalue_)
self_assignment_boolean_op_45	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  geometry_type_1& self_assignment_boolean_op_45(geometry_type_1& lvalue_, const geometry_type_2& rvalue_) {$/;"	f	namespace:boost::polygon	signature:(geometry_type_1& lvalue_, const geometry_type_2& rvalue_)
self_intersect	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  self_intersect(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
self_intersect	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& self_intersect() {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:()
self_intersect	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  self_intersect(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
self_intersect	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& self_intersect() {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:()
self_xor	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  self_xor(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
self_xor	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& self_xor() {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:()
self_xor	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  self_xor(polygon_set_type& polygon_set) {$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set)
self_xor	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& self_xor() {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:()
set	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline PolyLine45& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:(iT inputBegin, iT inputEnd)
set	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45HoleData& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:(iT inputBegin, iT inputEnd)
set	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45PolygonData& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:(iT inputBegin, iT inputEnd)
set	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static inline void set(polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set,$/;"	p	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(polygon_45_set_view<ltype, rtype, op_type>& polygon_45_set, input_iterator_type input_begin, input_iterator_type input_end)
set	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline poly_line_arbitrary& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:(iT inputBegin, iT inputEnd)
set	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_hole_data& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:(iT inputBegin, iT inputEnd)
set	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_polygon_data& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:(iT inputBegin, iT inputEnd)
set	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLineHoleData& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:(iT inputBegin, iT inputEnd)
set	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLinePolygonWithHolesData& set(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:(iT inputBegin, iT inputEnd)
set	/usr/include/boost/polygon/interval_concept.hpp	/^>::type set(IntervalType& interval, direction_1d dir,$/;"	f	namespace:boost::polygon	signature:(IntervalType& interval, direction_1d dir, typename interval_mutable_traits<IntervalType>::coordinate_type value)
set	/usr/include/boost/polygon/interval_data.hpp	/^  void set(direction_1d dir, coordinate_type value) {$/;"	f	class:boost::polygon::interval_data	access:public	signature:(direction_1d dir, coordinate_type value)
set	/usr/include/boost/polygon/interval_traits.hpp	/^  static void set($/;"	f	struct:boost::polygon::interval_mutable_traits	access:public	signature:( interval_type& interval, direction_1d dir, coordinate_type value)
set	/usr/include/boost/polygon/point_concept.hpp	/^>::type set(PointType& point, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(PointType& point, orientation_2d orient, typename point_mutable_traits<PointType>::coordinate_type value)
set	/usr/include/boost/polygon/point_data.hpp	/^  void set(orientation_2d orient, coordinate_type value) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(orientation_2d orient, coordinate_type value)
set	/usr/include/boost/polygon/point_traits.hpp	/^  static void set($/;"	f	struct:boost::polygon::point_mutable_traits	access:public	signature:( point_type& point, orientation_2d orient, coordinate_type value)
set	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline polygon_45_data& set(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:(iT input_begin, iT input_end)
set	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void set(const value_type& value) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const value_type& value)
set	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void set(input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(input_iterator_type input_begin, input_iterator_type input_end)
set	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline void set(polygon_45_set_data<T>& polygon_set,$/;"	f	struct:boost::polygon::polygon_45_set_mutable_traits	access:public	signature:(polygon_45_set_data<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
set	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline void set(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	struct:boost::polygon::polygon_45_set_mutable_traits	access:public	signature:(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
set	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline void set(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	struct:boost::polygon::polygon_45_set_mutable_traits	access:public	signature:(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
set	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data& set(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
set	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data& set(iT begin_point, iT end_point) {$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:(iT begin_point, iT end_point)
set	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void set(const value_type& value, orientation_2d orient) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const value_type& value, orientation_2d orient)
set	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void set(input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient)
set	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline void set(polygon_90_set_data<T>& polygon_set,$/;"	f	struct:boost::polygon::polygon_90_set_mutable_traits	access:public	signature:(polygon_90_set_data<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient)
set	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline void set(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient) {$/;"	f	struct:boost::polygon::polygon_90_set_mutable_traits	access:public	signature:(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient)
set	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline void set(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient) {$/;"	f	struct:boost::polygon::polygon_90_set_mutable_traits	access:public	signature:(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end, orientation_2d orient)
set	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data& set(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
set	/usr/include/boost/polygon/polygon_data.hpp	/^  inline polygon_data& set(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_data	access:public	signature:(iT input_begin, iT input_end)
set	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void set(const value_type& value) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const value_type& value)
set	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void set(input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(input_iterator_type input_begin, input_iterator_type input_end)
set	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline void set(polygon_set_data<T>& polygon_set,$/;"	f	struct:boost::polygon::polygon_set_mutable_traits	access:public	signature:(polygon_set_data<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
set	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline void set(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	struct:boost::polygon::polygon_set_mutable_traits	access:public	signature:(std::list<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
set	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline void set(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end) {$/;"	f	struct:boost::polygon::polygon_set_mutable_traits	access:public	signature:(std::vector<T>& polygon_set, input_iterator_type input_begin, input_iterator_type input_end)
set	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data& set(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
set	/usr/include/boost/polygon/rectangle_concept.hpp	/^  inline void rectangle_data<T>::set(orientation_2d orient, const interval_type_1& interval) {$/;"	f	class:boost::polygon::rectangle_data	signature:(orientation_2d orient, const interval_type_1& interval)
set	/usr/include/boost/polygon/rectangle_concept.hpp	/^  set(T& rectangle, const T2& interval) {$/;"	f	namespace:boost::polygon	signature:(T& rectangle, const T2& interval)
set	/usr/include/boost/polygon/rectangle_concept.hpp	/^  set(T& rectangle, orientation_2d orient, const T2& interval) {$/;"	f	namespace:boost::polygon	signature:(T& rectangle, orientation_2d orient, const T2& interval)
set	/usr/include/boost/polygon/rectangle_concept.hpp	/^  set(rectangle_type& rectangle, orientation_2d orient, direction_1d dir,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, orientation_2d orient, direction_1d dir, typename rectangle_coordinate_type<rectangle_type>::type value)
set	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline void set(direction_2d dir, coordinate_type value) {$/;"	f	class:boost::polygon::rectangle_data	access:public	signature:(direction_2d dir, coordinate_type value)
set	/usr/include/boost/polygon/rectangle_data.hpp	/^  inline void set(orientation_2d orient, const interval_type_1& interval);$/;"	p	class:boost::polygon::rectangle_data	access:public	signature:(orientation_2d orient, const interval_type_1& interval)
set	/usr/include/boost/polygon/rectangle_traits.hpp	/^    static inline void set(T& rectangle, orientation_2d orient, const T2& interval) {$/;"	f	struct:boost::polygon::rectangle_mutable_traits	access:public	signature:(T& rectangle, orientation_2d orient, const T2& interval)
set	/usr/include/boost/polygon/segment_concept.hpp	/^void>::type set(Segment& segment, direction_1d dir, const Point& point) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, direction_1d dir, const Point& point)
set	/usr/include/boost/polygon/segment_data.hpp	/^  void set(direction_1d dir, const point_type& point) {$/;"	f	class:boost::polygon::segment_data	access:public	signature:(direction_1d dir, const point_type& point)
set	/usr/include/boost/polygon/segment_traits.hpp	/^  static void set($/;"	f	struct:boost::polygon::segment_mutable_traits	access:public	signature:( segment_type& segment, direction_1d dir, const point_type& point)
set	/usr/include/boost/polygon/transform.hpp	/^  void set(orientation_2d orient, scale_factor_type value) {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(orientation_2d orient, scale_factor_type value)
setProperty	/usr/include/boost/polygon/detail/property_merge.hpp	/^  static inline void setProperty(property_set& pset, property_map& pmap) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(property_set& pset, property_map& pmap)
set_axis_transformation	/usr/include/boost/polygon/transform.hpp	/^  void set_axis_transformation(const axis_transformation& atr) {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const axis_transformation& atr)
set_clean	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void set_clean(const value_type& value) {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:(const value_type& value)
set_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_hole_data& set_compact(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:(iT inputBegin, iT inputEnd)
set_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_polygon_data& set_compact(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:(iT inputBegin, iT inputEnd)
set_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLineHoleData& set_compact(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:(iT inputBegin, iT inputEnd)
set_compact	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLinePolygonWithHolesData& set_compact(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:(iT inputBegin, iT inputEnd)
set_compact	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline polygon_90_data& set_compact(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:(iT input_begin, iT input_end)
set_compact	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data& set_compact(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
set_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline T& set_compact(T& t, iT input_begin, iT input_end) {$/;"	f	struct:boost::polygon::polygon_90_mutable_traits	access:public	signature:(T& t, iT input_begin, iT input_end)
set_compact	/usr/include/boost/polygon/polygon_traits.hpp	/^  set_compact(T& t, iT begin_compact_coordinates, iT end_compact_coordinates) {$/;"	f	namespace:boost::polygon	signature:(T& t, iT begin_compact_coordinates, iT end_compact_coordinates)
set_directions	/usr/include/boost/polygon/transform.hpp	/^  axis_transformation& set_directions(const direction_2d& horizontal_dir,$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const direction_2d& horizontal_dir, const direction_2d& vertical_dir)
set_holes	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline PolyLine45PolygonData& set_holes(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:(iT inputBegin, iT inputEnd)
set_holes	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline poly_line_arbitrary_polygon_data& set_holes(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:(iT inputBegin, iT inputEnd)
set_holes	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline PolyLinePolygonWithHolesData& set_holes(iT inputBegin, iT inputEnd) {$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:(iT inputBegin, iT inputEnd)
set_holes	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline polygon_45_with_holes_data& set_holes(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
set_holes	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline polygon_90_with_holes_data& set_holes(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
set_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline T& set_holes(T& t, iT inputBegin, iT inputEnd) {$/;"	f	struct:boost::polygon::polygon_with_holes_mutable_traits	access:public	signature:(T& t, iT inputBegin, iT inputEnd)
set_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^  set_holes(T& t, iT begin_holes, iT end_holes) {$/;"	f	namespace:boost::polygon	signature:(T& t, iT begin_holes, iT end_holes)
set_holes	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline polygon_with_holes_data& set_holes(iT input_begin, iT input_end) {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:(iT input_begin, iT input_end)
set_points	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline T& set_points(T& t, iT input_begin, iT input_end) {$/;"	f	struct:boost::polygon::polygon_mutable_traits	access:public	signature:(T& t, iT input_begin, iT input_end)
set_points	/usr/include/boost/polygon/polygon_traits.hpp	/^  set_points(T& t, iT begin_points, iT end_points) {$/;"	f	namespace:boost::polygon	signature:(T& t, iT begin_points, iT end_points)
set_points	/usr/include/boost/polygon/rectangle_concept.hpp	/^  set_points(rectangle_type& rectangle, const point_type_1& p1,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const point_type_1& p1, const point_type_2& p2)
set_translation	/usr/include/boost/polygon/transform.hpp	/^  void set_translation(const point_type& p) {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const point_type& p)
set_unique_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void set_unique_property(property_set& unqiue_property, const property_map& property) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(property_set& unqiue_property, const property_map& property)
shrink	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& shrink($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, direction_1d dir, typename interval_coordinate_type<IntervalType>::type shrinking)
shrink	/usr/include/boost/polygon/interval_concept.hpp	/^>::type& shrink($/;"	f	namespace:boost::polygon	signature:( IntervalType& interval, typename interval_coordinate_type<IntervalType>::type shrinking)
shrink	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_45_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type shrinking)
shrink	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set, direction_2d dir,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, direction_2d dir, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type shrinking)
shrink	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type low_shrinking, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type high_shrinking)
shrink	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, orientation_2d orient, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type shrinking)
shrink	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type shrinking)
shrink	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type west_shrinking, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type east_shrinking, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type south_shrinking, typename coordinate_traits<typename polygon_90_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type north_shrinking)
shrink	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    shrink(direction_2d dir, typename coordinate_traits<coordinate_type>::unsigned_area_type shrinking) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(direction_2d dir, typename coordinate_traits<coordinate_type>::unsigned_area_type shrinking)
shrink	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    shrink(typename coordinate_traits<coordinate_type>::unsigned_area_type west_shrinking,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type west_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type east_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type south_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type north_shrinking)
shrink	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  shrink(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits<typename polygon_set_traits<polygon_set_type>::coordinate_type>::unsigned_area_type shrinking)
shrink	/usr/include/boost/polygon/polygon_set_data.hpp	/^    shrink(typename coordinate_traits<coordinate_type>::unsigned_area_type distance) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type distance)
shrink	/usr/include/boost/polygon/rectangle_concept.hpp	/^  shrink(rectangle_type& rectangle, direction_2d dir,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, direction_2d dir, typename rectangle_coordinate_type<rectangle_type>::type shrinking)
shrink	/usr/include/boost/polygon/rectangle_concept.hpp	/^  shrink(rectangle_type& rectangle, orientation_2d orient,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, orientation_2d orient, typename rectangle_coordinate_type<rectangle_type>::type shrinking)
shrink	/usr/include/boost/polygon/rectangle_concept.hpp	/^  shrink(rectangle_type& rectangle,$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type shrinking)
shrink2	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    shrink2(typename coordinate_traits<coordinate_type>::unsigned_area_type west_shrinking,$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(typename coordinate_traits<coordinate_type>::unsigned_area_type west_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type east_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type south_shrinking, typename coordinate_traits<coordinate_type>::unsigned_area_type north_shrinking)
simplify	/usr/include/boost/polygon/detail/polygon_simplify.hpp	/^  std::size_t simplify(std::vector<T>& dst, const std::vector<T>& src,$/;"	f	namespace:boost::polygon::detail::simplify_detail	signature:(std::vector<T>& dst, const std::vector<T>& src, typename coordinate_traits< typename point_traits<T>::coordinate_type >::coordinate_distance len)
simplify	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  simplify(polygon_set_type& polygon_set, typename coordinate_traits<$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, typename coordinate_traits< typename polygon_set_traits<polygon_set_type>::coordinate_type >::coordinate_distance threshold)
simplify_detail	/usr/include/boost/polygon/detail/polygon_simplify.hpp	/^namespace boost { namespace polygon { namespace detail { namespace simplify_detail {$/;"	n	namespace:boost::polygon::detail
site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  explicit site_event(const point_type& point) :$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(const point_type& point)
site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event() :$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:()
site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event(const point_type& point1, const point_type& point2) :$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(const point_type& point1, const point_type& point2)
site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event(coordinate_type x, coordinate_type y) :$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(coordinate_type x, coordinate_type y)
site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event(coordinate_type x1, coordinate_type y1,$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(coordinate_type x1, coordinate_type y1, coordinate_type x2, coordinate_type y2)
site_event	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^class site_event {$/;"	c	namespace:boost::polygon::detail
site_event_iterator_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  site_event_iterator_type site_event_iterator_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
site_event_iterator_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^    site_event_iterator_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
site_event_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^  typedef detail::site_event<int_type> site_event_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
site_events_	/usr/include/boost/polygon/voronoi_builder.hpp	/^  std::vector<site_event_type> site_events_;$/;"	m	class:boost::polygon::voronoi_builder	access:private
site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public
site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::circle_formation_predicate	access:public
site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:public
site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:public
site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public
site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef Site site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public
site_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    typedef typename Node::site_type site_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates::node_comparison_predicate	access:public
site_type	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  typedef Site site_type;$/;"	t	class:boost::polygon::detail::beach_line_node_key	access:public
size	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline std::size_t size() const { return points.size(); }$/;"	f	class:boost::polygon::polygon_45_formation::PolyLine45	access:public	signature:() const
size	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::PolyLine45HoleData	access:public	signature:() const
size	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
size	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline std::size_t size() const { return points.size(); }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::poly_line_arbitrary	access:public	signature:() const
size	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::poly_line_arbitrary_hole_data	access:public	signature:() const
size	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
size	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:() const
size	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline std::size_t size() const { return 0; }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
size	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  std::size_t size() const {$/;"	f	class:boost::polygon::detail::extended_int	access:public	signature:() const
size	/usr/include/boost/polygon/polygon_45_data.hpp	/^  inline std::size_t size() const { return coords_.size(); }$/;"	f	class:boost::polygon::polygon_45_data	access:public	signature:() const
size	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline std::size_t size() const { clean(); return data_.size(); }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
size	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline std::size_t size() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
size	/usr/include/boost/polygon/polygon_90_data.hpp	/^  inline std::size_t size() const { return coords_.size(); }$/;"	f	class:boost::polygon::polygon_90_data	access:public	signature:() const
size	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline std::size_t size() const { clean(); return data_.size(); }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
size	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline std::size_t size() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
size	/usr/include/boost/polygon/polygon_data.hpp	/^  inline std::size_t size() const { return coords_.size(); }$/;"	f	class:boost::polygon::polygon_data	access:public	signature:() const
size	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline std::size_t size() const { clean(); return data_.size(); }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
size	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline std::size_t size() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
size	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline std::size_t size(const T& t) {$/;"	f	struct:boost::polygon::polygon_90_traits	access:public	signature:(const T& t)
size	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline std::size_t size(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_90	access:public	signature:(const T& t)
size	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline std::size_t size(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_general	access:public	signature:(const T& t)
size	/usr/include/boost/polygon/polygon_traits.hpp	/^  size(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
size	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline std::size_t size() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
size_holes	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline std::size_t size_holes() const { return 0; }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:() const
size_holes	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline std::size_t size_holes() const { return 0; }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:() const
size_holes	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline std::size_t size_holes() const { return 0; }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:() const
size_holes	/usr/include/boost/polygon/polygon_45_with_holes_data.hpp	/^  inline std::size_t size_holes() const {$/;"	f	class:boost::polygon::polygon_45_with_holes_data	access:public	signature:() const
size_holes	/usr/include/boost/polygon/polygon_90_with_holes_data.hpp	/^  inline std::size_t size_holes() const {$/;"	f	class:boost::polygon::polygon_90_with_holes_data	access:public	signature:() const
size_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline std::size_t size_holes() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
size_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline std::size_t size_holes(const T& t) {$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const T& t)
size_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline std::size_t size_holes(const hole_type& t) { return 0; }$/;"	f	struct:boost::polygon::polygon_with_holes_traits	access:public	signature:(const hole_type& t)
size_holes	/usr/include/boost/polygon/polygon_traits.hpp	/^  size_holes(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
size_holes	/usr/include/boost/polygon/polygon_with_holes_data.hpp	/^  inline std::size_t size_holes() const {$/;"	f	class:boost::polygon::polygon_with_holes_data	access:public	signature:() const
snap	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void snap() const;$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
snap	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::snap() const {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:() const
snap_point_vector_to_45	/usr/include/boost/polygon/polygon_traits.hpp	/^  void snap_point_vector_to_45(std::vector<point_data<Unit> >& pts) {$/;"	f	namespace:boost::polygon	signature:(std::vector<point_data<Unit> >& pts)
snap_to_45	/usr/include/boost/polygon/polygon_traits.hpp	/^  snap_to_45(polygon_type& polygon) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon)
snap_vertex_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    static void snap_vertex_45(Vertex45Compact& vertex);$/;"	p	class:boost::polygon::polygon_45_set_data	access:private	signature:(Vertex45Compact& vertex)
snap_vertex_45	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline void polygon_45_set_data<Unit>::snap_vertex_45(typename polygon_45_set_data<Unit>::Vertex45Compact& vertex) {$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(typename polygon_45_set_data<Unit>::Vertex45Compact& vertex)
solidSide	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    Side solidSide() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
solidSide	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline Side PolyLine<Unit>::solidSide() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
solidToLeft	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool solidToLeft() const { return head_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
solidToLeft	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool solidToLeft() const { return head_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
solidToRight	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline bool solidToRight() const { return !head_; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:() const
solidToRight	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline bool solidToRight() const { return !head_; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:() const
solidToRight	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool solidToRight() const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:() const
solidToRight	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool solidToRight() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
solidToRight	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool ActiveTail<Unit>::solidToRight() const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:() const
solidToRight	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::solidToRight() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
sort	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    void sort() const {} \/\/is always sorted$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
sort	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    static inline bool sort(const polygon_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_view<ltype, rtype, op_type>& polygon_set)
sort	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    void sort() const {} \/\/is always sorted$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
sort	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  sort(const polygon_set_view<ltype, rtype, op_type>& ) {$/;"	f	class:boost::polygon::polygon_set_traits	signature:(const polygon_set_view<ltype, rtype, op_type>& )
sort	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^      static void sort(RandomAccessIterator_Type _First,$/;"	f	struct:boost::polygon::polygon_sort_adaptor	access:public	signature:(RandomAccessIterator_Type _First, RandomAccessIterator_Type _Last)
sort	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^      static void sort(RandomAccessIterator_Type _First,$/;"	f	struct:boost::polygon::polygon_sort_adaptor	access:public	signature:(RandomAccessIterator_Type _First, RandomAccessIterator_Type _Last, const Pred_Type& _Comp)
sort	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    void sort() const{$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
sort	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    void sort() const{$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
sort	/usr/include/boost/polygon/polygon_set_data.hpp	/^    void sort() const{$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
sortScan45Vector	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline void sortScan45Vector(S45V& vec) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(S45V& vec)
sort_incoming_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void sort_incoming_count(incoming_count& count, const Point& pt) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(incoming_count& count, const Point& pt)
sort_property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void sort_property_merge_data() {$/;"	f	class:boost::polygon::arbitrary_boolean_op	access:private	signature:()
sort_property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void sort_property_merge_data() {$/;"	f	class:boost::polygon::arbitrary_connectivity_extraction	access:private	signature:()
sort_property_merge_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline void sort_property_merge_data() {$/;"	f	class:boost::polygon::property_merge	access:protected	signature:()
sort_vertex_arbitrary_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void sort_vertex_arbitrary_count(vertex_arbitrary_count& count, const Point& pt) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(vertex_arbitrary_count& count, const Point& pt)
sort_vertex_half_edges	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void sort_vertex_half_edges(vertex_data& vertex) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(vertex_data& vertex)
sorted	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    bool sorted() const { return value().sorted(); } \/\/result of a boolean is sorted$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:() const
sorted	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    bool sorted() const { return true; } \/\/result of a boolean is sorted$/;"	f	class:boost::polygon::polygon_90_set_view	access:public	signature:() const
sorted	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    static inline bool sorted(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set);$/;"	p	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
sorted	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  sorted(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set) {$/;"	f	class:boost::polygon::polygon_90_set_traits	signature:(const polygon_90_set_view<ltype, rtype, op_type>& polygon_set)
sorted	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    bool sorted() const { return true; } \/\/result of a boolean is sorted$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
sorted	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    inline bool sorted() const { return false; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
sorted	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    static inline bool sorted(const view_of<polygon_90_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const view_of<polygon_90_set_concept, T>& polygon_set)
sorted	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline bool sorted() const { return !unsorted_; }$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
sorted	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline bool sorted(const T& ) { return false; }$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const T& )
sorted	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    static inline bool sorted(const polygon_45_set_data<T>& polygon_set) { polygon_set.sort(); return true; }$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const polygon_45_set_data<T>& polygon_set)
sorted	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline bool sorted() const { return !unsorted_; }$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
sorted	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline bool sorted(const T&) { return false; }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const T&)
sorted	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    static inline bool sorted(const polygon_90_set_data<T>& polygon_set) { polygon_set.sort(); return true; }$/;"	f	struct:boost::polygon::polygon_90_set_traits	access:public	signature:(const polygon_90_set_data<T>& polygon_set)
sorted	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    inline bool sorted() const { return false; }$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
sorted	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    static inline bool sorted(const view_of<polygon_45_set_concept, T>& polygon_set) {$/;"	f	struct:boost::polygon::polygon_45_set_traits	access:public	signature:(const view_of<polygon_45_set_concept, T>& polygon_set)
sorted	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline bool sorted() const { return !unsorted_; }$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
sorted	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline bool sorted(const T& ) { return false; }$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const T& )
sorted	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    static inline bool sorted(const polygon_set_data<T>& polygon_set) { polygon_set.sort(); return true; }$/;"	f	struct:boost::polygon::polygon_set_traits	access:public	signature:(const polygon_set_data<T>& polygon_set)
sorted_index	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event& sorted_index(std::size_t index) {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(std::size_t index)
sorted_index	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::size_t sorted_index() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
sorted_index_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  std::size_t sorted_index_;$/;"	m	class:boost::polygon::detail::site_event	access:private
source_category	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  SourceCategory source_category() const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:() const
source_category	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  site_event& source_category(SourceCategory source_category) {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(SourceCategory source_category)
source_category	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  source_category_type source_category() const {$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
source_category_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef SourceCategory source_category_type;$/;"	t	class:boost::polygon::voronoi_cell	access:public
source_index	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  source_index_type source_index() const {$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:() const
source_index_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  source_index_type source_index_;$/;"	m	class:boost::polygon::voronoi_cell	access:private
source_index_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::size_t source_index_type;$/;"	t	class:boost::polygon::voronoi_cell	access:public
sqrt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  extended_exponent_fpt sqrt() const {$/;"	f	class:boost::polygon::detail::extended_exponent_fpt	access:public	signature:() const
sqrt	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  robust_fpt sqrt() const {$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
sqrt_expr_	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    robust_sqrt_expr_type sqrt_expr_;$/;"	m	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:private
sqrt_expr_evaluator_pss3	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    _fpt sqrt_expr_evaluator_pss3(_int *A, _int *B) {$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:private	signature:(_int *A, _int *B)
sqrt_expr_evaluator_pss4	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    _fpt sqrt_expr_evaluator_pss4(_int *A, _int *B) {$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:private	signature:(_int *A, _int *B)
square_euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  square_euclidean_distance(const rectangle_type& lvalue, const rectangle_type_2& rvalue) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& lvalue, const rectangle_type_2& rvalue)
square_euclidean_distance	/usr/include/boost/polygon/rectangle_concept.hpp	/^  square_euclidean_distance(rectangle_type& lvalue, const point_type& rvalue) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& lvalue, const point_type& rvalue)
ss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool ss(const site_type& left_site,$/;"	f	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private	signature:(const site_type& left_site, const site_type& right_site, const site_type& new_site) const
sss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    bool sss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::circle_existence_predicate	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3) const
sss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void sss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, circle_type& c_event)
sss	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    void sss(const site_type& site1,$/;"	f	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:public	signature:(const site_type& site1, const site_type& site2, const site_type& site3, circle_type& c_event, bool recompute_c_x = true, bool recompute_c_y = true, bool recompute_lower_x = true)
stack_element	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline stack_element() :$/;"	f	struct:boost::polygon::MaxCover::stack_element	access:public	signature:()
stack_element	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline stack_element(Node* n,$/;"	f	struct:boost::polygon::MaxCover::stack_element	access:public	signature:(Node* n, const Rectangle& r, typename Node::iterator i)
stack_element	/usr/include/boost/polygon/detail/max_cover.hpp	/^    struct stack_element {$/;"	s	struct:boost::polygon::MaxCover	access:public
startEnd_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^      End startEnd_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail::iterator	access:private
started_holes	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  bool started_holes;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
state_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    int state_;$/;"	m	class:boost::polygon::polygon_formation::PolyLine	access:private
swap	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  void swap() {$/;"	f	class:boost::polygon::detail::robust_dif	access:private	signature:()
t	/usr/include/boost/polygon/polygon_traits.hpp	/^    const T* t;$/;"	m	struct:boost::polygon::view_of	access:public
tA	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _int tA[5];$/;"	m	class:boost::polygon::detail::robust_sqrt_expr	access:private
tB	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  _int tB[5];$/;"	m	class:boost::polygon::detail::robust_sqrt_expr	access:private
tailMap_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    std::map<Unit, ActiveTail<Unit>*> tailMap_;$/;"	m	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:private
tailOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    orientation_2d tailOrient() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
tailOrient	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline orientation_2d PolyLine<Unit>::tailOrient() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
tailToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool tailToHead() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
tailToHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::tailToHead() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
tailToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool tailToTail() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
tailToTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::tailToTail() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
tailp_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      PolyLine45* tailp_;$/;"	m	class:boost::polygon::polygon_45_formation::ActiveTail45	access:private
tailp_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      poly_line_arbitrary* tailp_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:protected
tailp_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine* tailp_;$/;"	m	class:boost::polygon::polygon_formation::PolyLine	access:private
tailp_	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine<Unit>* tailp_;$/;"	m	class:boost::polygon::polygon_formation::ActiveTail	access:private
testPolygon45Formation	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45Formation(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45FormationP1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationP1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45FormationP2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationP2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45FormationRect	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationRect(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45FormationStar1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationStar1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45FormationStar2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationStar2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45FormationStarHole1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationStarHole1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45FormationStarHole2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45FormationStarHole2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45Tiling	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45Tiling(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45TilingP1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45TilingP2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45TilingP3	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP3(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45TilingP4	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP4(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45TilingP5	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP5(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45TilingP6	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingP6(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45TilingRect	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingRect(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45TilingStar1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingStar1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45TilingStar2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingStar2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45TilingStarHole1	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingStarHole1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygon45TilingStarHole2	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    static inline bool testPolygon45TilingStarHole2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::polygon_45_formation	access:public	signature:(stream_type& stdcout)
testPolygonArbitraryFormationColinear	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationColinear(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testPolygonArbitraryFormationP1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationP1(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testPolygonArbitraryFormationP2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationP2(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testPolygonArbitraryFormationPolys	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationPolys(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testPolygonArbitraryFormationRect	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationRect(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testPolygonArbitraryFormationSelfTouch1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationSelfTouch1(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testPolygonArbitraryFormationSelfTouch2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationSelfTouch2(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testPolygonArbitraryFormationSelfTouch3	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testPolygonArbitraryFormationSelfTouch3(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testScan45	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
testScan45And	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45And(streamtype& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(streamtype& stdcout)
testScan45Data	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Data(streamtype& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(streamtype& stdcout)
testScan45P1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45P1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
testScan45P2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45P2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
testScan45Rect	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Rect(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
testScan45Star1	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Star1(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
testScan45Star2	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Star2(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
testScan45Star3	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Star3(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
testScan45Star4	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    static inline bool testScan45Star4(stream_type& stdcout) {$/;"	f	struct:boost::polygon::boolean_op_45	access:public	signature:(stream_type& stdcout)
testSegmentIntersection	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testSegmentIntersection(stream_type& stdcout) {$/;"	f	class:boost::polygon::polygon_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testTrapezoidArbitraryFormationP1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testTrapezoidArbitraryFormationP1(stream_type& stdcout) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testTrapezoidArbitraryFormationP2	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testTrapezoidArbitraryFormationP2(stream_type& stdcout) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testTrapezoidArbitraryFormationPolys	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testTrapezoidArbitraryFormationPolys(stream_type& stdcout) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testTrapezoidArbitraryFormationRect	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testTrapezoidArbitraryFormationRect(stream_type& stdcout) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(stream_type& stdcout)
testTrapezoidArbitraryFormationSelfTouch1	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline bool testTrapezoidArbitraryFormationSelfTouch1(stream_type& stdcout) {$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(stream_type& stdcout)
test_arbitrary_boolean_op	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^  bool test_arbitrary_boolean_op(stream_type& stdcout) {$/;"	f	namespace:boost::polygon	signature:(stream_type& stdcout)
test_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^      inline test_functor() {}$/;"	f	class:boost::polygon::scanline::test_functor	access:public	signature:()
test_functor	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    class test_functor {$/;"	c	class:boost::polygon::scanline	access:public
test_insertion	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_insertion(stream_type& stdcout) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& stdcout)
test_intersection	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_intersection(stream_type& stdcout) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& stdcout)
test_manhattan_intersection	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_manhattan_intersection(stream_type& stdcout) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& stdcout)
test_merge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_merge(stream_type& stdcout) {$/;"	f	class:boost::polygon::property_merge	access:public	signature:(stream_type& stdcout)
test_scanline	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_scanline(stream_type& stdcout) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(stream_type& stdcout)
test_validate_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_validate_scan(stream_type& stdcout) {$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(stream_type& stdcout)
test_verify_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool test_verify_scan(stream_type& stdcout) {$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(stream_type& stdcout)
tmpVector	/usr/include/boost/polygon/detail/property_merge.hpp	/^  property_map tmpVector;$/;"	m	class:boost::polygon::merge_scanline	access:private
to_bool	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool to_bool(const T& val) { return val != 0; }$/;"	f	namespace:boost::polygon::polygon_formation	signature:(const T& val)
to_efpt_converter	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::to_efpt_converter_type to_efpt_converter;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
to_efpt_converter_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef type_converter_efpt to_efpt_converter_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
to_fpt	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    to_fpt_converter to_fpt;$/;"	m	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private
to_fpt	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    to_fpt_converter to_fpt;$/;"	m	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:private
to_fpt	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    to_fpt_converter to_fpt;$/;"	m	class:boost::polygon::detail::voronoi_predicates::lazy_circle_formation_functor	access:private
to_fpt	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    to_fpt_converter to_fpt;$/;"	m	class:boost::polygon::detail::voronoi_predicates::mp_circle_formation_functor	access:private
to_fpt_converter	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::to_fpt_converter_type to_fpt_converter;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
to_fpt_converter_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef type_converter_fpt to_fpt_converter_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
to_int	/usr/include/boost/polygon/isotropy.hpp	/^    inline unsigned int to_int() const { return (val_); }$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:() const
to_int	/usr/include/boost/polygon/isotropy.hpp	/^    inline unsigned int to_int() const { return (val_); }$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:() const
to_int	/usr/include/boost/polygon/isotropy.hpp	/^    inline unsigned int to_int(void) const { return val_; }$/;"	f	class:boost::polygon::direction_1d	access:public	signature:(void) const
to_int	/usr/include/boost/polygon/isotropy.hpp	/^    inline unsigned int to_int(void) const { return val_; }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(void) const
to_int	/usr/include/boost/polygon/isotropy.hpp	/^    inline unsigned int to_int(void) const { return val_; }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:(void) const
top	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  const T &top() const {$/;"	f	class:boost::polygon::detail::ordered_queue	access:public	signature:() const
touch_45_output_functor	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    struct touch_45_output_functor {$/;"	s	struct:boost::polygon::polygon_45_touch	access:public
touch_90_operation	/usr/include/boost/polygon/detail/polygon_90_touch.hpp	/^  struct touch_90_operation {$/;"	s	namespace:boost::polygon
tp	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    T* tp;$/;"	m	struct:boost::polygon::view_of	access:public
tp	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    T* tp;$/;"	m	struct:boost::polygon::view_of	access:public
tracedPath	/usr/include/boost/polygon/detail/max_cover.hpp	/^      inline bool tracedPath(const Interval& ivl) const {$/;"	f	class:boost::polygon::MaxCover::Node	access:public	signature:(const Interval& ivl) const
tracedPaths_	/usr/include/boost/polygon/detail/max_cover.hpp	/^      std::set<Interval> tracedPaths_;$/;"	m	class:boost::polygon::MaxCover::Node	access:private
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept {};$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, coordinate_concept> { typedef coordinate_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, interval_concept> { typedef interval_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, point_concept> { typedef point_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_set_concept> { typedef polygon_45_set_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_set_concept> { typedef polygon_90_set_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_set_concept> { typedef polygon_set_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, rectangle_concept> { typedef rectangle_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_by_concept	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, segment_concept> { typedef segment_traits<T> type; };$/;"	s	namespace:boost::polygon
traits_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename traits_by_concept<T, T2>::type traits_type;$/;"	t	struct:boost::polygon::get_coordinate_type	access:public
traits_type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename traits_by_concept<T, T2>::type traits_type;$/;"	t	struct:boost::polygon::get_coordinate_type_2	access:public
transform	/usr/include/boost/polygon/point_concept.hpp	/^PointType>::type& transform(PointType& point, const TransformType& transform) {$/;"	f	namespace:boost::polygon	signature:(PointType& point, const TransformType& transform)
transform	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  transform(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, const transformation_type& transformation)
transform	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    polygon_45_set_data& transform(const transformation_type& tr);$/;"	p	class:boost::polygon::polygon_45_set_data	access:public	signature:(const transformation_type& tr)
transform	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^  inline polygon_45_set_data<Unit>& polygon_45_set_data<Unit>::transform(const transformation_type& tr){$/;"	f	class:boost::polygon::polygon_45_set_data	signature:(const transformation_type& tr)
transform	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  transform(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, const transformation_type& transformation)
transform	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    polygon_90_set_data& transform(const transformation_type& transformation) {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:(const transformation_type& transformation)
transform	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  transform(polygon_set_type& polygon_set,$/;"	f	namespace:boost::polygon	signature:(polygon_set_type& polygon_set, const transformation_type& transformation)
transform	/usr/include/boost/polygon/polygon_set_data.hpp	/^    transform(const transform_type& tr) {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:(const transform_type& tr)
transform	/usr/include/boost/polygon/polygon_traits.hpp	/^  transform(T& polygon, const transform_type& tr) {$/;"	f	namespace:boost::polygon	signature:(T& polygon, const transform_type& tr)
transform	/usr/include/boost/polygon/polygon_traits.hpp	/^  transform(polygon_type& polygon, const transform_type& tr) {$/;"	f	namespace:boost::polygon	signature:(polygon_type& polygon, const transform_type& tr)
transform	/usr/include/boost/polygon/rectangle_concept.hpp	/^  transform(rectangle_type& rectangle, const transformation_type& transformation) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, const transformation_type& transformation)
transform	/usr/include/boost/polygon/segment_concept.hpp	/^Segment>::type& transform(Segment& segment, const Transform& tr) {$/;"	f	namespace:boost::polygon	signature:(Segment& segment, const Transform& tr)
transform	/usr/include/boost/polygon/transform.hpp	/^  anisotropic_scale_factor& transform(axis_transformation atr) {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(axis_transformation atr)
transform	/usr/include/boost/polygon/transform.hpp	/^  void transform(coordinate_type& x, coordinate_type& y) const {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(coordinate_type& x, coordinate_type& y) const
transform	/usr/include/boost/polygon/transform.hpp	/^  void transform(coordinate_type& x, coordinate_type& y) const {$/;"	f	class:boost::polygon::transformation	access:public	signature:(coordinate_type& x, coordinate_type& y) const
transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit transformation(axis_transformation atr) : atr_(atr), p_(0, 0) {}$/;"	f	class:boost::polygon::transformation	access:public	signature:(axis_transformation atr)
transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit transformation(axis_transformation::ATR atr) : atr_(atr), p_(0, 0) {}$/;"	f	class:boost::polygon::transformation	access:public	signature:(axis_transformation::ATR atr)
transformation	/usr/include/boost/polygon/transform.hpp	/^  explicit transformation(const point_type& p) : atr_(), p_(0, 0) {$/;"	f	class:boost::polygon::transformation	access:public	signature:(const point_type& p)
transformation	/usr/include/boost/polygon/transform.hpp	/^  transformation() : atr_(), p_(0, 0) {}$/;"	f	class:boost::polygon::transformation	access:public	signature:()
transformation	/usr/include/boost/polygon/transform.hpp	/^  transformation(axis_transformation atr,$/;"	f	class:boost::polygon::transformation	access:public	signature:(axis_transformation atr, const point_type& p)
transformation	/usr/include/boost/polygon/transform.hpp	/^  transformation(axis_transformation atr,$/;"	f	class:boost::polygon::transformation	access:public	signature:(axis_transformation atr, const point_type& referencePt, const point_type& destinationPt)
transformation	/usr/include/boost/polygon/transform.hpp	/^  transformation(const transformation& tr) : atr_(tr.atr_), p_(tr.p_) {}$/;"	f	class:boost::polygon::transformation	access:public	signature:(const transformation& tr)
transformation	/usr/include/boost/polygon/transform.hpp	/^class transformation {$/;"	c	namespace:boost::polygon
trapezoid_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline trapezoid_arbitrary_formation() : polygon_arbitrary_formation<Unit>() {}$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:()
trapezoid_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline trapezoid_arbitrary_formation(const trapezoid_arbitrary_formation& that) : polygon_arbitrary_formation<Unit>(that) {}$/;"	f	class:boost::polygon::trapezoid_arbitrary_formation	access:public	signature:(const trapezoid_arbitrary_formation& that)
trapezoid_arbitrary_formation	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  class trapezoid_arbitrary_formation : public polygon_arbitrary_formation<Unit> {$/;"	c	namespace:boost::polygon	inherits:polygon_arbitrary_formation
tsd	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename polygon_45_property_merge<big_coord, property_type>::MergeSetData tsd;$/;"	t	class:boost::polygon::property_merge_45	access:private
tsd	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef typename polygon_45_touch<big_coord>::TouchSetData tsd;$/;"	t	class:boost::polygon::connectivity_extraction_45	access:private
tsd	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    typedef typename touch_90_operation<coordinate_type>::TouchSetData tsd;$/;"	t	class:boost::polygon::connectivity_extraction_90	access:private
tsd_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    tsd tsd_;$/;"	m	class:boost::polygon::connectivity_extraction_45	access:private
tsd_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    tsd tsd_;$/;"	m	class:boost::polygon::property_merge_45	access:private
tsd_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    tsd tsd_;$/;"	m	class:boost::polygon::connectivity_extraction_90	access:private
turn	/usr/include/boost/polygon/isotropy.hpp	/^    inline direction_2d turn(direction_1d t) const {$/;"	f	class:boost::polygon::direction_2d	access:public	signature:(direction_1d t) const
turn_90	/usr/include/boost/polygon/isotropy.hpp	/^    inline void turn_90() { val_ = val_^ 1; }$/;"	f	class:boost::polygon::orientation_2d	access:public	signature:()
twin	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_edge_type* twin() const { return twin_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
twin	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void twin(voronoi_edge_type* e) { twin_ = e; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(voronoi_edge_type* e)
twin	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* twin() { return twin_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
twin_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge_type* twin_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_45_concept> { typedef PolyLine45HoleData<T> type; };$/;"	t	struct:boost::polygon::PolyLineByConcept	access:public
type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_45_with_holes_concept> { typedef PolyLine45PolygonData<T> type; };$/;"	t	struct:boost::polygon::PolyLineByConcept	access:public
type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_concept> { typedef PolyLine45HoleData<T> type; };$/;"	t	struct:boost::polygon::PolyLineByConcept	access:public
type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct PolyLineByConcept<T, polygon_with_holes_concept> { typedef PolyLine45PolygonData<T> type; };$/;"	t	struct:boost::polygon::PolyLineByConcept	access:public
type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct geometry_concept<PolyLine45HoleData<T> > { typedef polygon_45_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^  struct geometry_concept<PolyLine45PolygonData<T> > { typedef polygon_45_with_holes_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct geometry_concept<polygon_45_set_view<ltype, rtype, op_type> > { typedef polygon_45_set_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef geometry_type_1& type;$/;"	t	struct:boost::polygon::self_assign_operator_lvalue	access:public
type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef polygon_90_set_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef type_1 type;$/;"	t	struct:boost::polygon::by_value_binary_operator	access:public
type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct PolyLineArbitraryByConcept<T, polygon_concept> { typedef poly_line_arbitrary_hole_data<T> type; };$/;"	t	struct:boost::polygon::PolyLineArbitraryByConcept	access:public
type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct PolyLineArbitraryByConcept<T, polygon_with_holes_concept> { typedef poly_line_arbitrary_polygon_data<T> type; };$/;"	t	struct:boost::polygon::PolyLineArbitraryByConcept	access:public
type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct geometry_concept<poly_line_arbitrary_hole_data<T> > { typedef polygon_45_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^  struct geometry_concept<poly_line_arbitrary_polygon_data<T> > { typedef polygon_45_with_holes_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef polygon_90_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    typedef polygon_90_with_holes_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_45_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_45_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_90_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_90_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_concept> { typedef PolyLineHoleData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
type	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  struct PolyLineType<orientT, Unit, polygon_with_holes_concept> { typedef PolyLinePolygonWithHolesData<orientT, Unit> type; };$/;"	t	struct:boost::polygon::polygon_formation::PolyLineType	access:public
type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^  struct geometry_concept<polygon_set_view<ltype, rtype, op_type> > { typedef polygon_set_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef typename polygon_traits<T>::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type_for_rectangles	access:public
type	/usr/include/boost/polygon/detail/rectangle_formation.hpp	/^    typedef typename rectangle_traits<T>::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type_for_rectangles	access:public
type	/usr/include/boost/polygon/gmp_override.hpp	/^    typedef mpq_class type;$/;"	t	struct:boost::polygon::high_precision_type	access:public
type	/usr/include/boost/polygon/interval_concept.hpp	/^  >::coordinate_difference type;$/;"	t	struct:boost::polygon::interval_difference_type_by_concept	access:public
type	/usr/include/boost/polygon/interval_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::interval_coordinate_type	access:public
type	/usr/include/boost/polygon/interval_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::interval_difference_type	access:public
type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_interval_concept	access:public
type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_mutable_interval_concept	access:public
type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_interval_concept	access:public
type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_mutable_interval_concept	access:public
type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef typename interval_traits<GeometryType>::coordinate_type type;$/;"	t	struct:boost::polygon::interval_coordinate_type_by_concept	access:public
type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::interval_coordinate_type_by_concept	access:public
type	/usr/include/boost/polygon/interval_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::interval_difference_type_by_concept	access:public
type	/usr/include/boost/polygon/interval_data.hpp	/^  typedef interval_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^                       T, T2, typename gtl_and<T3, T4>::type>::type type; };$/;"	t	struct:boost::polygon::gtl_and_4	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^                       T, typename gtl_and<T2, T3>::type>::type type; };$/;"	t	struct:boost::polygon::gtl_and_3	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^                      T, typename gtl_or<T2, T3>::type>::type type; };$/;"	t	struct:boost::polygon::gtl_or_3	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^                      T, typename gtl_or_3<T2, T3, T4>::type>::type type; };$/;"	t	struct:boost::polygon::gtl_or_4	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^      typedef T type;$/;"	t	struct:boost::disable_if_c	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^      typedef T type;$/;"	t	struct:boost::enable_if_c	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^      typedef typename T::type type;$/;"	t	struct:boost::lazy_disable_if_c	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^      typedef typename T::type type;$/;"	t	struct:boost::lazy_enable_if_c	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef gtl_no type;$/;"	t	struct:boost::polygon::gtl_if	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double type;$/;"	t	struct:boost::polygon::high_precision_type	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef typename coordinate_traits<coordinate_type>::manhattan_area_type type; };$/;"	t	struct:boost::polygon::area_type_by_domain	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct area_type_by_domain { typedef typename coordinate_traits<coordinate_type>::area_type type; };$/;"	t	struct:boost::polygon::area_type_by_domain	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept { typedef undefined_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<double> { typedef coordinate_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<float> { typedef coordinate_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<int> { typedef coordinate_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<long double> { typedef coordinate_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_concept<polygon_long_long_type> { typedef coordinate_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct geometry_domain { typedef general_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_c { typedef gtl_no type; };$/;"	t	struct:boost::polygon::gtl_and_c	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_and_c<true, true> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::gtl_and_c	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_different_type { typedef typename gtl_not<typename gtl_same_type<T, T2>::type>::type type; };$/;"	t	struct:boost::polygon::gtl_different_type	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_if<gtl_yes> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::gtl_if	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_not { typedef gtl_no type; };$/;"	t	struct:boost::polygon::gtl_not	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_not<gtl_no> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::gtl_not	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::gtl_or	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_or<T, T> { typedef T type; };$/;"	t	struct:boost::polygon::gtl_or	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_same_type { typedef gtl_no type; };$/;"	t	struct:boost::polygon::gtl_same_type	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_same_type<T, T> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::gtl_same_type	access:public
type	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_yes { typedef gtl_yes type;$/;"	t	struct:boost::polygon::gtl_yes	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  >::coordinate_difference type;$/;"	t	struct:boost::polygon::point_difference_type_by_concept	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  >::coordinate_distance type;$/;"	t	struct:boost::polygon::point_distance_type_by_concept	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::point_coordinate_type	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::point_difference_type	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::point_distance_type	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_mutable_point_concept	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_point_concept	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_mutable_point_concept	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_point_concept	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef typename point_traits<GeometryType>::coordinate_type type;$/;"	t	struct:boost::polygon::point_coordinate_type_by_concept	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::point_coordinate_type_by_concept	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::point_difference_type_by_concept	access:public
type	/usr/include/boost/polygon/point_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::point_distance_type_by_concept	access:public
type	/usr/include/boost/polygon/point_data.hpp	/^  typedef point_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef polygon_90_set_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename gtl_or<typename is_polygon_45_set_type<T>::type, typename is_polygon_45_set_type<T2>::type >::type type;$/;"	t	struct:boost::polygon::is_either_polygon_45_set_type	access:public
type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename gtl_or<typename is_polygon_45_set_type<T>::type, typename is_polygon_90_set_type<T>::type >::type type;$/;"	t	struct:boost::polygon::is_polygon_45_or_90_set_type	access:public
type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename view_of<polygon_90_set_concept, T>::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type	access:public
type	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    typedef typename view_of<polygon_90_set_concept, T>::iterator_type type;$/;"	t	struct:boost::polygon::get_iterator_type_2	access:public
type	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef polygon_45_set_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^      typename is_45_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_set_type	access:public
type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^      typename is_45_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_45_set_type	access:public
type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^      typename is_45_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_set_type	access:public
type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^      typename is_45_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_45_set_type	access:public
type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename gtl_same_type<polygon_45_set_concept, typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_set_type	access:public
type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^    typedef typename is_45_polygonal_concept<typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_45_set_type	access:public
type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_45_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_45_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_set_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_45_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_45_set_traits.hpp	/^  struct is_45_polygonal_concept<polygon_45_with_holes_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_45_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct are_not_both_rectangle_concept { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::are_not_both_rectangle_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct are_not_both_rectangle_concept<rectangle_concept, rectangle_concept> { typedef gtl_no type; };$/;"	t	struct:boost::polygon::are_not_both_rectangle_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^                                                                     <typename T::iterator>::value_type>::type>::type type; };$/;"	t	struct:boost::polygon::get_coordinate_type	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^      typename is_manhattan_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_set_type	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^      typename is_manhattan_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_90_set_type	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^      typename is_manhattan_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_set_type	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^      typename is_manhattan_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_90_set_type	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef const T* type;$/;"	t	struct:boost::polygon::get_iterator_type_2	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename T::const_iterator type;$/;"	t	struct:boost::polygon::get_iterator_type_2	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename gtl_same_type<polygon_90_set_concept, typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_set_type	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename indirect_type::type type;$/;"	t	struct:boost::polygon::get_iterator_type	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename is_manhattan_polygonal_concept<typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_90_set_type	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename traits_type::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^    typedef typename traits_type::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type_2	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct geometry_concept<polygon_90_set_data<T> > { typedef polygon_90_set_concept type; };$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_manhattan_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_manhattan_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_manhattan_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<polygon_90_with_holes_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_manhattan_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_manhattan_polygonal_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_manhattan_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_mutable_polygon_90_set_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_mutable_polygon_90_set_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_mutable_polygon_90_set_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygon_90_set_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_set_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygon_90_set_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<polygon_90_with_holes_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygon_90_set_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct is_polygon_90_set_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygon_90_set_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, coordinate_concept> { typedef coordinate_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, interval_concept> { typedef interval_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, point_concept> { typedef point_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_set_concept> { typedef polygon_45_set_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_45_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_set_concept> { typedef polygon_90_set_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_90_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_set_concept> { typedef polygon_set_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, polygon_with_holes_concept> { typedef polygon_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, rectangle_concept> { typedef rectangle_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_90_set_traits.hpp	/^  struct traits_by_concept<T, segment_concept> { typedef segment_traits<T> type; };$/;"	t	struct:boost::polygon::traits_by_concept	access:public
type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef polygon_45_set_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename gtl_or<typename is_polygon_45_or_90_set_type<T>::type, typename is_polygon_set_type<T>::type >::type type;$/;"	t	struct:boost::polygon::is_any_polygon_set_type	access:public
type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename gtl_or<typename is_polygon_set_type<T>::type, typename is_polygon_set_type<T2>::type >::type type;$/;"	t	struct:boost::polygon::is_either_polygon_set_type	access:public
type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename view_of<polygon_45_set_concept, T>::coordinate_type type;$/;"	t	struct:boost::polygon::get_coordinate_type	access:public
type	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    typedef typename view_of<polygon_45_set_concept, T>::iterator_type type;$/;"	t	struct:boost::polygon::get_iterator_type_2	access:public
type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef polygon_set_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^      typename is_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_set_type	access:public
type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^      typename is_polygonal_concept<typename geometry_concept<typename std::list<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_set_type	access:public
type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^      typename is_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_set_type	access:public
type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^      typename is_polygonal_concept<typename geometry_concept<typename std::vector<T>::value_type>::type>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_set_type	access:public
type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename gtl_same_type<polygon_set_concept, typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_set_type	access:public
type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^    typedef typename is_polygonal_concept<typename geometry_concept<T>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_set_type	access:public
type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_set_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_set_traits.hpp	/^  struct is_polygonal_concept<polygon_with_holes_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_polygonal_concept	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^                              typename gtl_same_type<polygon_45_with_holes_concept, GC>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_45_with_holes_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^                              typename gtl_same_type<polygon_with_holes_concept, GC>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_with_holes_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^                              typename is_mutable_polygon_with_holes_type<T>::type>::type type;$/;"	t	struct:boost::polygon::is_any_mutable_polygon_with_holes_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^                            typename gtl_same_type<polygon_45_concept, GC>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_45_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^                            typename gtl_same_type<polygon_90_with_holes_concept, GC>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_90_with_holes_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^                            typename gtl_same_type<polygon_concept, GC>::type>::type type;$/;"	t	struct:boost::polygon::is_polygon_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^                            typename is_any_mutable_polygon_without_holes_type<T>::type>::type type;$/;"	t	struct:boost::polygon::is_any_mutable_polygon_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^      typename is_mutable_polygon_type<T>::type>::type type; };$/;"	t	struct:boost::polygon::is_any_mutable_polygon_without_holes_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef T_ELSE type;$/;"	t	struct:boost::polygon::gtl_ifelse	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef T_IF type;$/;"	t	struct:boost::polygon::gtl_ifelse	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_45_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_45_with_holes_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_90_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_90_with_holes_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef polygon_with_holes_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef rectangle_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename coordinate_traits<coordinate_type>::coordinate_difference type; };$/;"	t	struct:boost::polygon::distance_type_by_domain	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_45_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_45_with_holes_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_45_with_holes_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_90_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_90_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_polygon_90_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_90_with_holes_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_90_with_holes_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^    typedef typename gtl_same_type<polygon_with_holes_concept, GC>::type type;$/;"	t	struct:boost::polygon::is_mutable_polygon_with_holes_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct distance_type_by_domain { typedef typename coordinate_traits<coordinate_type>::coordinate_distance type; };$/;"	t	struct:boost::polygon::distance_type_by_domain	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_45_concept> { typedef forty_five_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_45_with_holes_concept> { typedef forty_five_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_90_concept> { typedef manhattan_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct geometry_domain<polygon_90_with_holes_concept> { typedef manhattan_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_45_with_holes_concept> { typedef polygon_45_concept type; };$/;"	t	struct:boost::polygon::polygon_from_polygon_with_holes_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_90_with_holes_concept> { typedef polygon_90_concept type; };$/;"	t	struct:boost::polygon::polygon_from_polygon_with_holes_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct polygon_from_polygon_with_holes_type<polygon_with_holes_concept> { typedef polygon_concept type; };$/;"	t	struct:boost::polygon::polygon_from_polygon_with_holes_type	access:public
type	/usr/include/boost/polygon/polygon_traits.hpp	/^  template <> struct get_void<gtl_yes> { typedef void type; };$/;"	t	struct:boost::polygon::get_void	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^      T, typename is_rectangle_concept<typename geometry_concept<T>::type>::type>::type type;$/;"	t	struct:boost::polygon::rectangle_difference_type	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^      T, typename is_rectangle_concept<typename geometry_concept<T>::type>::type>::type type;$/;"	t	struct:boost::polygon::rectangle_distance_type	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^      typedef typename rectangle_coordinate_type_by_concept<T, typename is_rectangle_concept<typename geometry_concept<T>::type>::type>::type type;$/;"	t	struct:boost::polygon::rectangle_coordinate_type	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^      typedef typename rectangle_interval_type_by_concept<T, typename is_rectangle_concept<typename geometry_concept<T>::type>::type>::type type;$/;"	t	struct:boost::polygon::rectangle_interval_type	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^     typedef typename coordinate_traits<typename rectangle_traits<T>::coordinate_type>::coordinate_difference type; };$/;"	t	struct:boost::polygon::rectangle_difference_type_by_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^    typedef rectangle_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^    typedef typename coordinate_traits<typename rectangle_coordinate_type<T>::type>::coordinate_distance type; };$/;"	t	struct:boost::polygon::rectangle_distance_type_by_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct geometry_domain<rectangle_concept> { typedef manhattan_domain type; };$/;"	t	struct:boost::polygon::geometry_domain	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_mutable_rectangle_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_mutable_rectangle_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_mutable_rectangle_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_mutable_rectangle_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_rectangle_concept { typedef gtl_no type; };$/;"	t	struct:boost::polygon::is_rectangle_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct is_rectangle_concept<rectangle_concept> { typedef gtl_yes type; };$/;"	t	struct:boost::polygon::is_rectangle_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_coordinate_type_by_concept { typedef void type; };$/;"	t	struct:boost::polygon::rectangle_coordinate_type_by_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_coordinate_type_by_concept<T, gtl_yes> { typedef typename rectangle_traits<T>::coordinate_type type; };$/;"	t	struct:boost::polygon::rectangle_coordinate_type_by_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_difference_type_by_concept { typedef void type; };$/;"	t	struct:boost::polygon::rectangle_difference_type_by_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_distance_type_by_concept { typedef void type; };$/;"	t	struct:boost::polygon::rectangle_distance_type_by_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_interval_type_by_concept { typedef void type; };$/;"	t	struct:boost::polygon::rectangle_interval_type_by_concept	access:public
type	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct rectangle_interval_type_by_concept<T, gtl_yes> { typedef typename rectangle_traits<T>::interval_type type; };$/;"	t	struct:boost::polygon::rectangle_interval_type_by_concept	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  >::coordinate_distance type;$/;"	t	struct:boost::polygon::segment_distance_type_by_concept	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::segment_coordinate_type	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::segment_distance_type	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  >::type type;$/;"	t	struct:boost::polygon::segment_point_type	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_mutable_segment_concept	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef gtl_no type;$/;"	t	struct:boost::polygon::is_segment_concept	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_mutable_segment_concept	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef gtl_yes type;$/;"	t	struct:boost::polygon::is_segment_concept	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef typename segment_traits<GeometryType>::coordinate_type type;$/;"	t	struct:boost::polygon::segment_coordinate_type_by_concept	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef typename segment_traits<GeometryType>::point_type type;$/;"	t	struct:boost::polygon::segment_point_type_by_concept	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::segment_coordinate_type_by_concept	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::segment_distance_type_by_concept	access:public
type	/usr/include/boost/polygon/segment_concept.hpp	/^  typedef void type;$/;"	t	struct:boost::polygon::segment_point_type_by_concept	access:public
type	/usr/include/boost/polygon/segment_data.hpp	/^  typedef segment_concept type;$/;"	t	struct:boost::polygon::geometry_concept	access:public
type_converter_efpt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^struct type_converter_efpt {$/;"	s	namespace:boost::polygon::detail
type_converter_fpt	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^struct type_converter_fpt {$/;"	s	namespace:boost::polygon::detail
uint32	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef boost::uint32_t uint32;$/;"	t	namespace:boost::polygon::detail
uint64	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^typedef boost::uint64_t uint64;$/;"	t	namespace:boost::polygon::detail
uint_x2_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef uint64 uint_x2_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
uint_x2_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::uint_x2_type uint_x2_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
ul	/usr/include/boost/polygon/rectangle_concept.hpp	/^  ul(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
ulp	/usr/include/boost/polygon/detail/voronoi_robust_fpt.hpp	/^  relative_error_type ulp() const { return re_; }$/;"	f	class:boost::polygon::detail::robust_fpt	access:public	signature:() const
ulp_cmp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    ulp_cmp_type ulp_cmp;$/;"	m	class:boost::polygon::detail::voronoi_predicates::distance_predicate	access:private
ulp_cmp	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^    ulp_cmp_type ulp_cmp;$/;"	m	class:boost::polygon::detail::voronoi_predicates::event_comparison_predicate	access:private
ulp_cmp	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    typename detail::ulp_comparison<T> ulp_cmp;$/;"	m	class:boost::polygon::voronoi_diagram_traits::__anon5	access:private
ulp_cmp_type	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  typedef ulp_comparison<fpt_type> ulp_cmp_type;$/;"	t	struct:boost::polygon::detail::voronoi_ctype_traits	access:public
ulp_cmp_type	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^  typedef typename CTYPE_TRAITS::ulp_cmp_type ulp_cmp_type;$/;"	t	class:boost::polygon::detail::voronoi_predicates	access:public
ulp_comparison	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^struct ulp_comparison<fpt64> {$/;"	s	namespace:boost::polygon::detail
unary_op_45_output_functor	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^    struct unary_op_45_output_functor {$/;"	s	struct:boost::polygon::boolean_op_45	access:public
undefined_concept	/usr/include/boost/polygon/isotropy.hpp	/^  struct undefined_concept {};$/;"	s	namespace:boost::polygon
unit_type	/usr/include/boost/polygon/detail/polygon_sort_adaptor.hpp	/^      typedef int unit_type; \/\/ default GTL unit$/;"	t	struct:boost::polygon::dummy_to_delay_instantiation	access:public
unknown_winding	/usr/include/boost/polygon/isotropy.hpp	/^    unknown_winding = 2$/;"	e	enum:boost::polygon::winding_direction
unsigned_add	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void unsigned_add(unsigned_product_type& result, int& result_sign, unsigned_product_type a, int a_sign, unsigned_product_type b, int b_sign) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(unsigned_product_type& result, int& result_sign, unsigned_product_type a, int a_sign, unsigned_product_type b, int b_sign)
unsigned_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef double unsigned_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
unsigned_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef float unsigned_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
unsigned_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef long double unsigned_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
unsigned_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef polygon_ulong_long_type unsigned_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
unsigned_area_type	/usr/include/boost/polygon/isotropy.hpp	/^    typedef unsigned long unsigned_area_type;$/;"	t	struct:boost::polygon::coordinate_traits	access:public
unsigned_mod	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    static inline void unsigned_mod(unsigned_product_type& result, int& result_sign, unsigned_product_type a, int a_sign, unsigned_product_type b, int b_sign) {$/;"	f	struct:boost::polygon::scanline_base	access:public	signature:(unsigned_product_type& result, int& result_sign, unsigned_product_type a, int a_sign, unsigned_product_type b, int b_sign)
unsorted_	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    mutable bool unsorted_;$/;"	m	class:boost::polygon::polygon_45_set_data	access:private
unsorted_	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    mutable bool unsorted_;$/;"	m	class:boost::polygon::polygon_90_set_data	access:private
unsorted_	/usr/include/boost/polygon/polygon_set_data.hpp	/^    mutable bool unsorted_;$/;"	m	class:boost::polygon::polygon_set_data	access:private
updateTail	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ActiveTail45& updateTail(PolyLine45* newTail) { tailp_ = newTail; return *this; }$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:(PolyLine45* newTail)
updateTail	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline active_tail_arbitrary& updateTail(poly_line_arbitrary* newTail) { tailp_ = newTail; return *this; }$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:(poly_line_arbitrary* newTail)
updateTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ActiveTail& updateTail(PolyLine<Unit>* newTail);$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(PolyLine<Unit>* newTail)
updateTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>& ActiveTail<Unit>::updateTail(PolyLine<Unit>* newTail) {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(PolyLine<Unit>* newTail)
update_property_map	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void update_property_map(property_map& mp, const std::pair<property_type, int>& prop_data) {$/;"	f	class:boost::polygon::scanline	access:public	signature:(property_map& mp, const std::pair<property_type, int>& prop_data)
ur	/usr/include/boost/polygon/rectangle_concept.hpp	/^  ur(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
use_wrap	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  bool use_wrap;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
v_	/usr/include/boost/polygon/gmp_override.hpp	/^    mpq_class v_;$/;"	m	class:boost::polygon::gmp_int	access:private
val_	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^  fpt_type val_;$/;"	m	class:boost::polygon::detail::extended_exponent_fpt	access:private
val_	/usr/include/boost/polygon/isotropy.hpp	/^    int val_;$/;"	m	class:boost::polygon::direction_2d	access:private
val_	/usr/include/boost/polygon/isotropy.hpp	/^    int val_;$/;"	m	class:boost::polygon::direction_3d	access:private
val_	/usr/include/boost/polygon/isotropy.hpp	/^    unsigned int val_;$/;"	m	class:boost::polygon::direction_1d	access:private
val_	/usr/include/boost/polygon/isotropy.hpp	/^    unsigned int val_;$/;"	m	class:boost::polygon::orientation_2d	access:private
val_	/usr/include/boost/polygon/isotropy.hpp	/^    unsigned int val_;$/;"	m	class:boost::polygon::orientation_3d	access:private
validate_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void validate_scan(std::vector<std::pair<half_edge, int> >& output_segments,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::pair<half_edge, int> >& output_segments, iT begin, iT end)
validate_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void validate_scan(std::vector<std::pair<half_edge, std::pair<property_type, int> > >& output_segments,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::pair<half_edge, std::pair<property_type, int> > >& output_segments, iT begin, iT end)
validate_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void validate_scan(std::vector<std::set<Point> >& intersection_points,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::set<Point> >& intersection_points, iT begin, iT end)
validate_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void validate_scan(std::vector<std::set<Point> >& intersection_points,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::set<Point> >& intersection_points, iT begin, iT end, Unit min_y)
validate_scan_divide_and_conquer	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline void validate_scan_divide_and_conquer(std::vector<std::set<Point> >& intersection_points,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::vector<std::set<Point> >& intersection_points, iT begin, iT end)
value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_45_set_view	access:public	signature:() const
value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static const bool value = false;$/;"	m	struct:boost::polygon::fracture_holes_option_by_type	access:public
value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    static const bool value = true;$/;"	m	struct:boost::polygon::fracture_holes_option_by_type	access:public
value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    void value(value_type& output_, const ltype& lvalue_, const polygon_45_set_data<rcoord>& rvalue_) {$/;"	f	struct:boost::polygon::compute_45_set_value	access:public	signature:(value_type& output_, const ltype& lvalue_, const polygon_45_set_data<rcoord>& rvalue_)
value	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    void value(value_type& output_, const ltype& lvalue_, const rtype& rvalue_) {$/;"	f	struct:boost::polygon::compute_45_set_value	access:public	signature:(value_type& output_, const ltype& lvalue_, const rtype& rvalue_)
value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^      void value(value_type& output_, const ltype& lvalue_, const rtype& rvalue_, orientation_2d orient_) {$/;"	f	struct:boost::polygon::compute_90_set_value	access:public	signature:(value_type& output_, const ltype& lvalue_, const rtype& rvalue_, orientation_2d orient_)
value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^      void value(value_type& output_, const ltype& lvalue_,$/;"	f	struct:boost::polygon::compute_90_set_value	access:public	signature:(value_type& output_, const ltype& lvalue_, const polygon_90_set_data<rcoord>& rvalue_, orientation_2d orient_)
value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^      void value(value_type& output_, const polygon_90_set_data<lcoord>& lvalue_,$/;"	f	struct:boost::polygon::compute_90_set_value	access:public	signature:(value_type& output_, const polygon_90_set_data<lcoord>& lvalue_, const polygon_90_set_data<rcoord>& rvalue_, orientation_2d orient_)
value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^      void value(value_type& output_, const polygon_90_set_data<lcoord>& lvalue_,$/;"	f	struct:boost::polygon::compute_90_set_value	access:public	signature:(value_type& output_, const polygon_90_set_data<lcoord>& lvalue_, const rtype& rvalue_, orientation_2d orient_)
value	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_90_set_view	access:private	signature:() const
value	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_set_view	access:public	signature:() const
value	/usr/include/boost/polygon/isotropy.hpp	/^    static const bool value = true; };$/;"	m	struct:boost::polygon::gtl_yes	access:public
value	/usr/include/boost/polygon/isotropy.hpp	/^  struct gtl_no { static const bool value = false; };$/;"	m	struct:boost::polygon::gtl_no	access:public
value	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:() const
value	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:() const
value	/usr/include/boost/polygon/polygon_set_data.hpp	/^    const value_type& value() const {$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:() const
value_type	/usr/include/boost/polygon/detail/iterator_compact_to_points.hpp	/^  typedef point_type value_type;$/;"	t	class:boost::polygon::iterator_compact_to_points	access:public
value_type	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  typedef std::pair<coordinate_type, std::pair<coordinate_type, int> > value_type;$/;"	t	class:boost::polygon::iterator_geometry_to_set	access:public
value_type	/usr/include/boost/polygon/detail/iterator_points_to_compact.hpp	/^  typedef coordinate_type value_type;$/;"	t	class:boost::polygon::iterator_points_to_compact	access:public
value_type	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      typedef holeType value_type;$/;"	t	class:boost::polygon::PolyLine45PolygonData::iteratorHoles	access:public
value_type	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^    typedef polygon_45_set_data<coordinate_type> value_type;$/;"	t	class:boost::polygon::polygon_45_set_view	access:public
value_type	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^    typedef polygon_90_set_data<coordinate_type> value_type;$/;"	t	class:boost::polygon::polygon_90_set_view	access:public
value_type	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      typedef holeType value_type;$/;"	t	class:boost::polygon::poly_line_arbitrary_polygon_data::iterator_holes_type	access:public
value_type	/usr/include/boost/polygon/detail/polygon_set_view.hpp	/^    typedef polygon_set_data<coordinate_type> value_type;$/;"	t	class:boost::polygon::polygon_set_view	access:public
value_type	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    typedef Polygon45VertexData value_type;$/;"	t	class:boost::polygon::polygon_45_set_data	access:public
value_type	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    typedef std::vector<std::pair<coordinate_type, std::pair<coordinate_type, int> > > value_type;$/;"	t	class:boost::polygon::polygon_90_set_data	access:public
value_type	/usr/include/boost/polygon/polygon_set_data.hpp	/^    typedef std::vector<element_type> value_type;$/;"	t	class:boost::polygon::polygon_set_data	access:public
value_type	/usr/include/boost/polygon/polygon_traits.hpp	/^      typedef hole_type value_type;$/;"	t	struct:boost::polygon::view_of::iterator_holes_type	access:public
value_type	/usr/include/boost/polygon/voronoi_builder.hpp	/^    value_type;$/;"	t	class:boost::polygon::voronoi_builder	access:private
vector_graph_o	/usr/include/boost/polygon/detail/polygon_45_touch.hpp	/^    typedef std::pair<std::pair<Unit, std::map<Unit, std::set<int> > >, std::vector<std::set<int> > > vector_graph_o;$/;"	t	struct:boost::polygon::polygon_45_touch	access:public
verify1	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    inline bool verify1() {$/;"	f	class:boost::polygon::property_merge	access:public	signature:()
verify_scan	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    static inline bool verify_scan(std::pair<segment_id, segment_id>& offenders,$/;"	f	class:boost::polygon::line_intersection	access:public	signature:(std::pair<segment_id, segment_id>& offenders, iT begin, iT end)
vertex0	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_vertex_type* vertex0() const { return vertex_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
vertex0	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  void vertex0(voronoi_vertex_type* v) { vertex_ = v; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(voronoi_vertex_type* v)
vertex0	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_vertex_type* vertex0() { return vertex_; }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
vertex1	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const voronoi_vertex_type* vertex1() const { return twin_->vertex0(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:() const
vertex1	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_vertex_type* vertex1() { return twin_->vertex0(); }$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:()
vertex_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  mutable value_type vertex_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
vertex_	/usr/include/boost/polygon/detail/iterator_geometry_to_set.hpp	/^  value_type vertex_;$/;"	m	class:boost::polygon::iterator_geometry_to_set	access:private
vertex_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_vertex_type* vertex_;$/;"	m	class:boost::polygon::voronoi_edge	access:private
vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact() : pt(), count() {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:()
vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact(const Point& point, const Point& other_point, int countIn) : pt(point), count() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const Point& point, const Point& other_point, int countIn)
vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact(const vertex_arbitrary_compact& vertex) : pt(vertex.pt), count(vertex.count) {}$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_arbitrary_compact& vertex)
vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_arbitrary_compact(const vertex_half_edge& vertex) : pt(vertex.pt), count() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::vertex_arbitrary_compact	access:public	signature:(const vertex_half_edge& vertex)
vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class vertex_arbitrary_compact {$/;"	c	class:boost::polygon::polygon_arbitrary_formation	access:public
vertex_arbitrary_compact	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename polygon_arbitrary_formation<Unit>::vertex_arbitrary_compact vertex_arbitrary_compact;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
vertex_arbitrary_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::vector<std::pair<Point, int> > vertex_arbitrary_count;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
vertex_arbitrary_count	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef std::vector<std::pair<Point, int> > vertex_arbitrary_count;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
vertex_container_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef std::vector<vertex_type> vertex_container_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
vertex_data	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::pair<property_merge_point<coordinate_type>, property_map> vertex_data;$/;"	t	class:boost::polygon::merge_scanline	access:public
vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, property_map> vertex_data;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, property_map> vertex_data;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, property_map> vertex_data;$/;"	t	class:boost::polygon::property_merge	access:protected
vertex_data	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, property_map> vertex_data;$/;"	t	class:boost::polygon::scanline	access:public
vertex_equality_predicate_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  vertex_equality_predicate_type vertex_equality_predicate_;$/;"	m	class:boost::polygon::voronoi_diagram	access:private
vertex_equality_predicate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^    vertex_equality_predicate_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:private
vertex_equality_predicate_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  } vertex_equality_predicate_type;$/;"	t	struct:boost::polygon::voronoi_diagram_traits	typeref:class:boost::polygon::voronoi_diagram_traits::__anon5	access:public
vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge() : pt(), other_pt(), count() {}$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:()
vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge(const Point& point, const Point& other_point, int countIn) : pt(point), other_pt(other_point), count(countIn) {}$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const Point& point, const Point& other_point, int countIn)
vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge(const std::pair<Point, Point>& vertex) : pt(), other_pt(), count() {}$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const std::pair<Point, Point>& vertex)
vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline vertex_half_edge(const vertex_half_edge& vertex) : pt(vertex.pt), other_pt(vertex.other_pt), count(vertex.count) {}$/;"	f	class:boost::polygon::scanline_base::vertex_half_edge	access:public	signature:(const vertex_half_edge& vertex)
vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    class vertex_half_edge {$/;"	c	struct:boost::polygon::scanline_base	access:public
vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::vertex_half_edge vertex_half_edge;$/;"	t	class:boost::polygon::polygon_arbitrary_formation	access:public
vertex_half_edge	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    typedef typename scanline_base<Unit>::vertex_half_edge vertex_half_edge;$/;"	t	class:boost::polygon::trapezoid_arbitrary_formation	access:private
vertex_half_edge	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef typename scanline_base<Unit>::vertex_half_edge vertex_half_edge;$/;"	t	class:boost::polygon::scanline	access:public
vertex_iterator	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename vertex_container_type::iterator vertex_iterator;$/;"	t	class:boost::polygon::voronoi_diagram	access:private
vertex_property	/usr/include/boost/polygon/detail/property_merge.hpp	/^  typedef std::pair<property_merge_point<coordinate_type>, std::pair<property_type, int> > vertex_property;$/;"	t	class:boost::polygon::merge_scanline	access:public
vertex_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::pair<property_type, int> > vertex_property;$/;"	t	class:boost::polygon::arbitrary_boolean_op	access:private
vertex_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::pair<property_type, int> > vertex_property;$/;"	t	class:boost::polygon::arbitrary_connectivity_extraction	access:private
vertex_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::pair<property_type, int> > vertex_property;$/;"	t	class:boost::polygon::property_merge	access:protected
vertex_property	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    typedef std::pair<half_edge, std::pair<property_type, int> > vertex_property;$/;"	t	class:boost::polygon::scanline	access:public
vertex_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef typename TRAITS::vertex_type vertex_type;$/;"	t	class:boost::polygon::voronoi_diagram	access:public
vertex_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_vertex<coordinate_type> vertex_type;$/;"	t	struct:boost::polygon::voronoi_diagram_traits	access:public
vertical	/usr/include/boost/polygon/rectangle_concept.hpp	/^  vertical(T& rectangle, const T2& interval) {$/;"	f	namespace:boost::polygon	signature:(T& rectangle, const T2& interval)
vertical	/usr/include/boost/polygon/rectangle_concept.hpp	/^  vertical(const T& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const T& rectangle)
verticalHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool verticalHead() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
verticalHead	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::verticalHead() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
verticalTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    bool verticalTail() const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:() const
verticalTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline bool PolyLine<Unit>::verticalTail() const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:() const
vertices	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const vertex_container_type& vertices() const {$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:() const
vertices_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  vertex_container_type vertices_;$/;"	m	class:boost::polygon::voronoi_diagram	access:private
view_as	/usr/include/boost/polygon/isotropy.hpp	/^  view_of<T1, T2> view_as(const T2& obj) { return view_of<T1, T2>(obj); }$/;"	f	namespace:boost::polygon	signature:(const T2& obj)
view_of	/usr/include/boost/polygon/isotropy.hpp	/^  struct view_of {};$/;"	s	namespace:boost::polygon
view_of	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    view_of(T& obj) : tp(&obj), polys() {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(T& obj)
view_of	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^    view_of(const T& obj) : tp(), polys() {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(const T& obj)
view_of	/usr/include/boost/polygon/polygon_45_set_concept.hpp	/^  struct view_of<polygon_90_set_concept, T> {$/;"	s	namespace:boost::polygon
view_of	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    view_of(T& obj) : tp(&obj), polys() {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(T& obj)
view_of	/usr/include/boost/polygon/polygon_set_concept.hpp	/^    view_of(const T& obj) : tp(), polys() {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(const T& obj)
view_of	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct view_of<polygon_45_set_concept, T> {$/;"	s	namespace:boost::polygon
view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^    view_of(const T& obj) : rect() {$/;"	f	struct:boost::polygon::view_of	access:public	signature:(const T& obj)
view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^    view_of(const T& obj) : t(&obj) {}$/;"	f	struct:boost::polygon::view_of	access:public	signature:(const T& obj)
view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<polygon_45_concept, T> {$/;"	s	namespace:boost::polygon
view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<polygon_45_with_holes_concept, T> {$/;"	s	namespace:boost::polygon
view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<polygon_90_concept, T> {$/;"	s	namespace:boost::polygon
view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<polygon_90_with_holes_concept, T> {$/;"	s	namespace:boost::polygon
view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<polygon_concept, T> {$/;"	s	namespace:boost::polygon
view_of	/usr/include/boost/polygon/polygon_traits.hpp	/^  struct view_of<rectangle_concept, T> {$/;"	s	namespace:boost::polygon
voronoi_builder	/usr/include/boost/polygon/voronoi_builder.hpp	/^  voronoi_builder() : index_(0) {}$/;"	f	class:boost::polygon::voronoi_builder	access:public	signature:()
voronoi_builder	/usr/include/boost/polygon/voronoi_builder.hpp	/^  voronoi_builder(const voronoi_builder&);$/;"	p	class:boost::polygon::voronoi_builder	access:private	signature:(const voronoi_builder&)
voronoi_builder	/usr/include/boost/polygon/voronoi_builder.hpp	/^class voronoi_builder {$/;"	c	namespace:boost::polygon
voronoi_cell	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_cell(source_index_type source_index,$/;"	f	class:boost::polygon::voronoi_cell	access:public	signature:(source_index_type source_index, source_category_type source_category)
voronoi_cell	/usr/include/boost/polygon/voronoi_diagram.hpp	/^class voronoi_cell {$/;"	c	namespace:boost::polygon
voronoi_cell_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_cell<coordinate_type> voronoi_cell_type;$/;"	t	class:boost::polygon::voronoi_edge	access:public
voronoi_ctype_traits	/usr/include/boost/polygon/detail/voronoi_ctypes.hpp	/^struct voronoi_ctype_traits<int32> {$/;"	s	namespace:boost::polygon::detail
voronoi_diagram	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_diagram() {}$/;"	f	class:boost::polygon::voronoi_diagram	access:public	signature:()
voronoi_diagram	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_diagram(const voronoi_diagram&);$/;"	p	class:boost::polygon::voronoi_diagram	access:private	signature:(const voronoi_diagram&)
voronoi_diagram	/usr/include/boost/polygon/voronoi_diagram.hpp	/^class voronoi_diagram {$/;"	c	namespace:boost::polygon
voronoi_diagram_traits	/usr/include/boost/polygon/voronoi_diagram.hpp	/^struct voronoi_diagram_traits {$/;"	s	namespace:boost::polygon
voronoi_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_edge(bool is_linear, bool is_primary) :$/;"	f	class:boost::polygon::voronoi_edge	access:public	signature:(bool is_linear, bool is_primary)
voronoi_edge	/usr/include/boost/polygon/voronoi_diagram.hpp	/^class voronoi_edge {$/;"	c	namespace:boost::polygon
voronoi_edge_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_edge<coordinate_type> voronoi_edge_type;$/;"	t	class:boost::polygon::voronoi_cell	access:public
voronoi_edge_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_edge<coordinate_type> voronoi_edge_type;$/;"	t	class:boost::polygon::voronoi_edge	access:public
voronoi_edge_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_edge<coordinate_type> voronoi_edge_type;$/;"	t	class:boost::polygon::voronoi_vertex	access:public
voronoi_predicates	/usr/include/boost/polygon/detail/voronoi_predicates.hpp	/^class voronoi_predicates {$/;"	c	namespace:boost::polygon::detail
voronoi_vertex	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  voronoi_vertex(const coordinate_type& x, const coordinate_type& y) :$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:(const coordinate_type& x, const coordinate_type& y)
voronoi_vertex	/usr/include/boost/polygon/voronoi_diagram.hpp	/^class voronoi_vertex {$/;"	c	namespace:boost::polygon
voronoi_vertex_type	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  typedef voronoi_vertex<coordinate_type> voronoi_vertex_type;$/;"	t	class:boost::polygon::voronoi_edge	access:public
winding	/usr/include/boost/polygon/polygon_traits.hpp	/^    inline winding_direction winding() const {$/;"	f	struct:boost::polygon::view_of	access:public	signature:() const
winding	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline winding_direction winding(const T& t) {$/;"	f	struct:boost::polygon::polygon_traits_90	access:public	signature:(const T& t)
winding	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline winding_direction winding(const T&) {$/;"	f	struct:boost::polygon::polygon_90_traits	access:public	signature:(const T&)
winding	/usr/include/boost/polygon/polygon_traits.hpp	/^    static inline winding_direction winding(const T&) {$/;"	f	struct:boost::polygon::polygon_traits_general	access:public	signature:(const T&)
winding	/usr/include/boost/polygon/polygon_traits.hpp	/^  winding(const T& polygon) {$/;"	f	namespace:boost::polygon	signature:(const T& polygon)
winding_direction	/usr/include/boost/polygon/isotropy.hpp	/^  enum winding_direction {$/;"	g	namespace:boost::polygon
writeGraph	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void writeGraph(coordinate_type x, T& graph, edge_property_vector& output, T2& scanline) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(coordinate_type x, T& graph, edge_property_vector& output, T2& scanline)
writeOut	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    PolyLine* writeOut(std::vector<Unit>& outVec, End startEnd = TAIL) const;$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:(std::vector<Unit>& outVec, End startEnd = TAIL) const
writeOut	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>* PolyLine<Unit>::writeOut(std::vector<Unit>& outVec, End startEnd) const {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:(std::vector<Unit>& outVec, End startEnd) const
writeOutFigure	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void writeOutFigure(std::vector<Unit>& outVec, bool isHole = false) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(std::vector<Unit>& outVec, bool isHole = false) const
writeOutFigure	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::writeOutFigure(std::vector<Unit>& outVec, bool isHole) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(std::vector<Unit>& outVec, bool isHole) const
writeOutFigureHoleItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void writeOutFigureHoleItrs(iteratorHoles& beginOut, iteratorHoles& endOut) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(iteratorHoles& beginOut, iteratorHoles& endOut) const
writeOutFigureHoleItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::writeOutFigureHoleItrs(iteratorHoles& beginOut, iteratorHoles& endOut) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(iteratorHoles& beginOut, iteratorHoles& endOut) const
writeOutFigureItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    void writeOutFigureItrs(iterator& beginOut, iterator& endOut, bool isHole = false, orientation_2d orient = VERTICAL) const;$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:(iterator& beginOut, iterator& endOut, bool isHole = false, orientation_2d orient = VERTICAL) const
writeOutFigureItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline void ActiveTail<Unit>::writeOutFigureItrs(iterator& beginOut, iterator& endOut, bool isHole, orientation_2d orient) const {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:(iterator& beginOut, iterator& endOut, bool isHole, orientation_2d orient) const
writeOutput	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void writeOutput(coordinate_type x, Result& result, edge_property_vector& output) {$/;"	f	class:boost::polygon::merge_scanline	access:private	signature:(coordinate_type x, Result& result, edge_property_vector& output)
write_back_axis_array	/usr/include/boost/polygon/transform.hpp	/^  void write_back_axis_array(const INDIVIDUAL_AXIS this_array[]) {$/;"	f	class:boost::polygon::axis_transformation	access:public	signature:(const INDIVIDUAL_AXIS this_array[])
write_out	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    void write_out(result_type& result, result_functor rf, const half_edge& he,$/;"	f	class:boost::polygon::scanline	access:public	signature:(result_type& result, result_functor rf, const half_edge& he, const property_map& pm_left, const property_map& pm_right)
x	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Unit x;$/;"	m	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public
x	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
x	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline coordinate_type x() const { return x_; }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:() const
x	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void x(coordinate_type value) { x_ = value; }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(coordinate_type value)
x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event& x(coordinate_type center_x) {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:(coordinate_type center_x)
x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x() const {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:() const
x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x() const {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:() const
x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
x	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_2d& x(coordinate_type x) {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:(coordinate_type x)
x	/usr/include/boost/polygon/point_concept.hpp	/^>::type x(const PointType& point) {$/;"	f	namespace:boost::polygon	signature:(const PointType& point)
x	/usr/include/boost/polygon/point_concept.hpp	/^void>::type x(PointType& point,$/;"	f	namespace:boost::polygon	signature:(PointType& point, typename point_mutable_traits<PointType>::coordinate_type value)
x	/usr/include/boost/polygon/point_data.hpp	/^  coordinate_type x() const {$/;"	f	class:boost::polygon::point_data	access:public	signature:() const
x	/usr/include/boost/polygon/point_data.hpp	/^  point_data& x(coordinate_type value) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(coordinate_type value)
x	/usr/include/boost/polygon/transform.hpp	/^  scale_factor_type x() const {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:() const
x	/usr/include/boost/polygon/transform.hpp	/^  void x(scale_factor_type value) {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(scale_factor_type value)
x	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const coordinate_type& x() const { return x_; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:() const
x0	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x0(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
x1	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x1(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
x11	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
x21	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
x_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Unit *x_; \/\/x value at which to apply comparison$/;"	m	class:boost::polygon::boolean_op_45::lessScan45Element	access:private
x_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Unit *x_; \/\/x value at which to apply comparison$/;"	m	class:boost::polygon::boolean_op_45::lessVertex45	access:private
x_	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Unit x_;$/;"	m	class:boost::polygon::boolean_op_45::Scan45	access:public
x_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      Unit x_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Formation	access:private
x_	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      Unit x_;$/;"	m	class:boost::polygon::polygon_45_formation::Polygon45Tiling	access:private
x_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Unit *x_; \/\/x value at which to apply comparison$/;"	m	class:boost::polygon::scanline_base::less_half_edge	access:private
x_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      Unit *x_; \/\/x value at which to apply comparison$/;"	m	class:boost::polygon::scanline_base::less_vertex_half_edge	access:private
x_	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    Unit x_;$/;"	m	class:boost::polygon::polygon_arbitrary_formation	access:protected
x_	/usr/include/boost/polygon/detail/property_merge.hpp	/^  coordinate_type x_, y_;$/;"	m	class:boost::polygon::property_merge_point	access:private
x_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    Unit x_;$/;"	m	class:boost::polygon::scanline	access:public
x_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type x_;$/;"	m	class:boost::polygon::detail::point_2d	access:private
x_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  coordinate_type x_;$/;"	m	class:boost::polygon::voronoi_vertex	access:private
x_den	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
x_num	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
xh	/usr/include/boost/polygon/rectangle_concept.hpp	/^  xh(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
xh	/usr/include/boost/polygon/rectangle_concept.hpp	/^  xh(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value)
xl	/usr/include/boost/polygon/rectangle_concept.hpp	/^      xl(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value)
xl	/usr/include/boost/polygon/rectangle_concept.hpp	/^  xl(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
y	/usr/include/boost/polygon/detail/boolean_op_45.hpp	/^      Unit y;$/;"	m	class:boost::polygon::boolean_op_45::Scan45ElementT	access:public
y	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
y	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline coordinate_type y() const { return y_; }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:() const
y	/usr/include/boost/polygon/detail/property_merge.hpp	/^  inline void y(coordinate_type value) { y_ = value; }$/;"	f	class:boost::polygon::property_merge_point	access:public	signature:(coordinate_type value)
y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  circle_event& y(coordinate_type center_y) {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:(coordinate_type center_y)
y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y() const {$/;"	f	class:boost::polygon::detail::circle_event	access:public	signature:() const
y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y() const {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:() const
y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
y	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  point_2d& y(coordinate_type y) {$/;"	f	class:boost::polygon::detail::point_2d	access:public	signature:(coordinate_type y)
y	/usr/include/boost/polygon/point_concept.hpp	/^>::type y(const PointType& point) {$/;"	f	namespace:boost::polygon	signature:(const PointType& point)
y	/usr/include/boost/polygon/point_concept.hpp	/^void>::type y(PointType& point,$/;"	f	namespace:boost::polygon	signature:(PointType& point, typename point_mutable_traits<PointType>::coordinate_type value)
y	/usr/include/boost/polygon/point_data.hpp	/^  coordinate_type y() const {$/;"	f	class:boost::polygon::point_data	access:public	signature:() const
y	/usr/include/boost/polygon/point_data.hpp	/^  point_data& y(coordinate_type value) {$/;"	f	class:boost::polygon::point_data	access:public	signature:(coordinate_type value)
y	/usr/include/boost/polygon/transform.hpp	/^  scale_factor_type y() const {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:() const
y	/usr/include/boost/polygon/transform.hpp	/^  void y(scale_factor_type value) {$/;"	f	class:boost::polygon::anisotropic_scale_factor	access:public	signature:(scale_factor_type value)
y	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  const coordinate_type& y() const { return y_; }$/;"	f	class:boost::polygon::voronoi_vertex	access:public	signature:() const
y0	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y0(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
y1	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y1(bool oriented = false) const {$/;"	f	class:boost::polygon::detail::site_event	access:public	signature:(bool oriented = false) const
y11	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
y21	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
y_	/usr/include/boost/polygon/detail/property_merge.hpp	/^  coordinate_type x_, y_;$/;"	m	class:boost::polygon::property_merge_point	access:private
y_	/usr/include/boost/polygon/detail/scan_arbitrary.hpp	/^    Unit y_;$/;"	m	class:boost::polygon::scanline	access:public
y_	/usr/include/boost/polygon/detail/voronoi_structures.hpp	/^  coordinate_type y_;$/;"	m	class:boost::polygon::detail::point_2d	access:private
y_	/usr/include/boost/polygon/voronoi_diagram.hpp	/^  coordinate_type y_;$/;"	m	class:boost::polygon::voronoi_vertex	access:private
y_c_edist	/usr/include/boost/polygon/isotropy.hpp	/^  struct y_c_edist : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_den	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
y_high	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
y_i_abuts1	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_abuts1 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_abuts2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_abuts2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_assign	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_assign : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_bloat	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_bloat : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_bloat2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_bloat2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_center	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_center : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_construct	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_contains	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_contains : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_contains2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_contains2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_convolve	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_convolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_convolve2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_convolve2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_copy_construct	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_copy_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_deconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_deconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_deconvolve2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_deconvolve2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_delta	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_delta : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_e_bintersect	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_e_bintersect : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_e_dist1	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_e_dist1 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_e_dist2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_e_dist2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_e_intersects	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_e_intersects : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_encompass	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_encompass : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_encompass2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_encompass2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_equivalence	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_equivalence : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_flip	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_flip : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_g_intersect	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_g_intersect : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_get	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_get : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_get_half	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_get_half : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_high	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_high : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_high2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_high2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_intersect	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_intersect : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_join_with	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_join_with : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_low	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_low : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_low2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_low2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_move	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_move : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_reconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_reconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_redeconvolve	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_redeconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_scale	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_scale : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_scale_down	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_scale_down : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_scale_up	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_scale_up : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_set	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_set : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_shrink	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_shrink : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_i_shrink2	/usr/include/boost/polygon/interval_concept.hpp	/^struct y_i_shrink2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_num	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      high_precision y_high, dx1, dy1, dx2, dy2, x11, x21, y11, y21, x_num, y_num, x_den, y_den, x, y;$/;"	m	struct:boost::polygon::scanline_base::compute_intersection_pack	access:public
y_p_s_move	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct y_p_s_move : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_p_s_move2	/usr/include/boost/polygon/polygon_90_set_concept.hpp	/^  struct y_p_s_move2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_p_sx	/usr/include/boost/polygon/point_concept.hpp	/^struct y_p_sx : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_p_sy	/usr/include/boost/polygon/point_concept.hpp	/^struct y_p_sy : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_p_x	/usr/include/boost/polygon/point_concept.hpp	/^struct y_p_x : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_p_y	/usr/include/boost/polygon/point_concept.hpp	/^struct y_p_y : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_ps45_a	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_a : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_ae	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_ae : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_b	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_b : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_be	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_be : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_m	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_m : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_me	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_me : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_p	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_p : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_pe	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_pe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_rm	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_rm : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_rme	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_rme : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_rp	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_rp : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_rpe	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_rpe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_s	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_s : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_se	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_se : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_x	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_x : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps45_xe	/usr/include/boost/polygon/detail/polygon_45_set_view.hpp	/^  struct y_ps45_xe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_a	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_a : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_ae	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_ae : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_b	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_b : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_be	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_be : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_be2	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_be2 : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_m	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_m : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_me	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_me : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_p	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_p : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_pe	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_pe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_pe2	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_pe2 : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_rm	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_rm : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_rme	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_rme : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_rp	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_rp : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_rpe	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_rpe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_s	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_s : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_se	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_se : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_x	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_x : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps90_xe	/usr/include/boost/polygon/detail/polygon_90_set_view.hpp	/^  struct y_ps90_xe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps_rm	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct y_ps_rm : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps_rme	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct y_ps_rme : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps_rp	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct y_ps_rp : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_ps_rpe	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct y_ps_rpe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
y_pt_assign	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_assign : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_construct	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_convolve	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_convolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_deconvolve	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_deconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_ed1	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_ed1 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_ed2	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_ed2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_eds	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_eds : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_equiv	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_equiv : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_get	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_get : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_man_dist	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_man_dist : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_move	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_move : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_scale	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_scale : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_scale_down	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_scale_down : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_scale_up	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_scale_up : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_set	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_set : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_pt_transform	/usr/include/boost/polygon/point_concept.hpp	/^struct y_pt_transform : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_area	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_area : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_assign	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_assign : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_b_abuts	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_abuts : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_b_abuts2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_abuts2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_b_abuts3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_abuts3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_b_intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_intersect : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_b_intersect2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_intersect2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_b_intersect3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_b_intersect3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_bloat	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_bloat : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_bloat2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_bloat2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_bloat3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_bloat3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_cconstruct	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_cconstruct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_center	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_center : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_construct	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_construct2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_construct2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_contains	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_contains : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_contains2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_contains2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_convolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_convolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_convolve2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_convolve2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_deconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_deconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_deconvolve2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_deconvolve2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_delta	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_delta : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_eda	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_eda : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_eda2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_eda2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_edist	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_edist : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_edist2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_edist2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_encompass	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_encompass : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_encompass2	/usr/include/boost/polygon/rectangle_concept.hpp	/^ struct y_r_encompass2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_encompass3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_encompass3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_equiv	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_equiv : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_g_intersect	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_g_intersect : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_get	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_get : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_get_corner	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_get_corner : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_get_half	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_get_half : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_get_interval	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_get_interval : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_go	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_go : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_h	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_h : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_h2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_h2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_half_p	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_half_p : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_intersects	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_intersects : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_join_with	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_join_with : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_ll	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_ll : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_lr	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_lr : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_mdist	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_mdist : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_mdist2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_mdist2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_move	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_move : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_perimeter	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_perimeter : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_reconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_reconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_redeconvolve	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_redeconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_scale	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_scale : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_scale_down	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_scale_down : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_scale_up	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_scale_up : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_sed	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_sed : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_sed2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_sed2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_set	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_set : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_set2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_set2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_set3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_set3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_set_points	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_set_points : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_shrink	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_shrink : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_shrink2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_shrink2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_shrink3	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_shrink3 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_transform	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_transform : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_ul	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_ul : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_ur	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_ur : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_v	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_v : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_v2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_v2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_xh	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_xh : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_xh2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_xh2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_xl	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_xl : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_xl2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_xl2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_yh	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_yh : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_yh2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_yh2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_yl	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_yl : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_r_yl2	/usr/include/boost/polygon/rectangle_concept.hpp	/^  struct y_r_yl2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_abuts1	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_abuts1 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_abuts2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_abuts2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_assign	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_assign : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_center	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_center : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_construct	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_contains	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_contains : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_contains2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_contains2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_convolve	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_convolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_copy_construct	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_copy_construct : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_deconvolve	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_deconvolve : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_e_dist	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_e_dist : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_e_dist2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_e_dist2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_e_intersects	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_e_intersects : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_equivalence	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_equivalence : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_get	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_get : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_high	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_high : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_high2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_high2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_length	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_length : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_low	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_low : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_low2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_low2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_move	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_move : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_orientation1	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_orientation1 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_orientation2	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_orientation2 : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_scale	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_scale : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_scale_down	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_scale_down : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_scale_up	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_scale_up : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_set	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_set : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
y_s_transform	/usr/include/boost/polygon/segment_concept.hpp	/^struct y_s_transform : gtl_yes {};$/;"	s	namespace:boost::polygon	inherits:gtl_yes
yes_ps_oa	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_oa : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yes_ps_oae	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_oae : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yes_ps_ob	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_ob : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yes_ps_obe	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_obe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yes_ps_om	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_om : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yes_ps_ome	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_ome : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yes_ps_op	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_op : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yes_ps_ope	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_ope : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yes_ps_os	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_os : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yes_ps_ose	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_ose : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yes_ps_ox	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_ox : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yes_ps_oxe	/usr/include/boost/polygon/polygon_set_concept.hpp	/^  struct yes_ps_oxe : gtl_yes {};$/;"	s	namespace:boost::polygon::operators	inherits:gtl_yes
yh	/usr/include/boost/polygon/rectangle_concept.hpp	/^      yh(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value)
yh	/usr/include/boost/polygon/rectangle_concept.hpp	/^  yh(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
yield	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^    inline ActiveTail45* yield() { return p_; }$/;"	f	class:boost::polygon::PolyLine45PolygonData	access:public	signature:()
yield	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^    inline active_tail_arbitrary* yield() { return p_; }$/;"	f	class:boost::polygon::poly_line_arbitrary_polygon_data	access:public	signature:()
yield	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline ActiveTail<Unit>* yield() { return p_; }$/;"	f	class:boost::polygon::polygon_formation::PolyLineHoleData	access:public	signature:()
yield	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    inline ActiveTail<Unit>* yield() { return p_; }$/;"	f	class:boost::polygon::polygon_formation::PolyLinePolygonWithHolesData	access:public	signature:()
yl	/usr/include/boost/polygon/rectangle_concept.hpp	/^      yl(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value) {$/;"	f	namespace:boost::polygon	signature:(rectangle_type& rectangle, typename rectangle_coordinate_type<rectangle_type>::type value)
yl	/usr/include/boost/polygon/rectangle_concept.hpp	/^  yl(const rectangle_type& rectangle) {$/;"	f	namespace:boost::polygon	signature:(const rectangle_type& rectangle)
~ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ~ActiveTail();$/;"	p	class:boost::polygon::polygon_formation::ActiveTail	access:public	signature:()
~ActiveTail	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline ActiveTail<Unit>::~ActiveTail() {$/;"	f	class:boost::polygon::polygon_formation::ActiveTail	signature:()
~ActiveTail45	/usr/include/boost/polygon/detail/polygon_45_formation.hpp	/^      inline ~ActiveTail45() {$/;"	f	class:boost::polygon::polygon_45_formation::ActiveTail45	access:public	signature:()
~PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ~PolyLine();$/;"	p	class:boost::polygon::polygon_formation::PolyLine	access:public	signature:()
~PolyLine	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^  inline PolyLine<Unit>::~PolyLine() {$/;"	f	class:boost::polygon::polygon_formation::PolyLine	signature:()
~ScanLineToPolygonItrs	/usr/include/boost/polygon/detail/polygon_formation.hpp	/^    ~ScanLineToPolygonItrs() { clearOutput_(); }$/;"	f	class:boost::polygon::polygon_formation::ScanLineToPolygonItrs	access:public	signature:()
~active_tail_arbitrary	/usr/include/boost/polygon/detail/polygon_arbitrary_formation.hpp	/^      inline ~active_tail_arbitrary() {$/;"	f	class:boost::polygon::polygon_arbitrary_formation::active_tail_arbitrary	access:public	signature:()
~direction_2d	/usr/include/boost/polygon/isotropy.hpp	/^    inline ~direction_2d() { }$/;"	f	class:boost::polygon::direction_2d	access:public	signature:()
~direction_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline ~direction_3d() { }$/;"	f	class:boost::polygon::direction_3d	access:public	signature:()
~orientation_3d	/usr/include/boost/polygon/isotropy.hpp	/^    inline ~orientation_3d() {  }$/;"	f	class:boost::polygon::orientation_3d	access:public	signature:()
~polygon_45_set_data	/usr/include/boost/polygon/polygon_45_set_data.hpp	/^    inline ~polygon_45_set_data() {}$/;"	f	class:boost::polygon::polygon_45_set_data	access:public	signature:()
~polygon_90_set_data	/usr/include/boost/polygon/polygon_90_set_data.hpp	/^    inline ~polygon_90_set_data() {}$/;"	f	class:boost::polygon::polygon_90_set_data	access:public	signature:()
~polygon_set_data	/usr/include/boost/polygon/polygon_set_data.hpp	/^    inline ~polygon_set_data() {}$/;"	f	class:boost::polygon::polygon_set_data	access:public	signature:()
