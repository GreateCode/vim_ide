!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AceCount	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short AceCount;$/;"	m	struct:boost::interprocess::winapi::interprocess_acl	access:public
AclRevision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char  AclRevision;$/;"	m	struct:boost::interprocess::winapi::interprocess_acl	access:public
AclSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short AclSize;$/;"	m	struct:boost::interprocess::winapi::interprocess_acl	access:public
AddRef	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual unsigned long __stdcall AddRef (void) = 0;$/;"	p	struct:boost::interprocess::winapi::IUnknown_BIPC	access:public	signature:(void)
Alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type Alignment              = MemoryAlgorithm::Alignment;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
Alignment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static const std::size_t Alignment = ::boost::alignment_of<boost::ipcdetail::max_align>::value;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
Alignment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^	static const size_type Alignment      = ::boost::alignment_of< ::boost::detail::max_align>::value;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
Alignment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type Alignment = !MemAlignment$/;"	m	class:boost::interprocess::rbtree_best_fit	access:public
AlignmentMask	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type AlignmentMask = (Alignment - 1);$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type AllocatedCtrlBytes     = MemoryAlgorithm::AllocatedCtrlBytes;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type AllocatedCtrlBytes = BlockCtrlBytes;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type AllocatedCtrlBytes  = ipcdetail::ct_rounded_size<sizeof(SizeHolder), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type AllocatedCtrlUnits     = MemoryAlgorithm::AllocatedCtrlUnits;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type AllocatedCtrlUnits = BlockCtrlUnits;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type AllocatedCtrlUnits  = AllocatedCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
AllocationBase	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *         AllocationBase;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
AllocationProtect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  AllocationProtect;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
Attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long Attributes;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
BOOST_INTERPROCESS_ADAPTIVE_POOL_HPP	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	12;"	d
BOOST_INTERPROCESS_ALLOCATOR_DETAIL_ALLOCATOR_COMMON_HPP	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	12;"	d
BOOST_INTERPROCESS_ALLOCATOR_HPP	/usr/include/boost/interprocess/allocators/allocator.hpp	12;"	d
BOOST_INTERPROCESS_ALWAYS_INLINE	/usr/include/boost/interprocess/detail/workaround.hpp	144;"	d
BOOST_INTERPROCESS_ALWAYS_INLINE	/usr/include/boost/interprocess/detail/workaround.hpp	146;"	d
BOOST_INTERPROCESS_ALWAYS_INLINE	/usr/include/boost/interprocess/detail/workaround.hpp	148;"	d
BOOST_INTERPROCESS_ANONYMOUS_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_BAD_WEAK_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	14;"	d
BOOST_INTERPROCESS_BASIC_GLOBAL_MEMORY_HPP	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	12;"	d
BOOST_INTERPROCESS_BSD_DERIVATIVE	/usr/include/boost/interprocess/detail/workaround.hpp	112;"	d
BOOST_INTERPROCESS_BUFFERSTREAM_HPP	/usr/include/boost/interprocess/streams/bufferstream.hpp	36;"	d
BOOST_INTERPROCESS_CACHED_ADAPTIVE_POOL_HPP	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	12;"	d
BOOST_INTERPROCESS_CACHED_NODE_ALLOCATOR_HPP	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	12;"	d
BOOST_INTERPROCESS_CAST_TAGS_HPP	/usr/include/boost/interprocess/detail/cast_tags.hpp	12;"	d
BOOST_INTERPROCESS_CONDITION_ANY_HPP	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	12;"	d
BOOST_INTERPROCESS_CONDITION_HPP	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	12;"	d
BOOST_INTERPROCESS_CONFIG_INCLUDED	/usr/include/boost/interprocess/detail/config_begin.hpp	11;"	d
BOOST_INTERPROCESS_CONTAINERS_ALLOCATION_TYPE_HPP	/usr/include/boost/interprocess/containers/allocation_type.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_CONTAINERS_FWD_HPP	/usr/include/boost/interprocess/containers/containers_fwd.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_DEQUE_HPP	/usr/include/boost/interprocess/containers/deque.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_FLAT_MAP_HPP	/usr/include/boost/interprocess/containers/flat_map.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_FLAT_SET_HPP	/usr/include/boost/interprocess/containers/flat_set.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_LIST_HPP	/usr/include/boost/interprocess/containers/list.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_MAP_HPP	/usr/include/boost/interprocess/containers/map.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_PAIR_HPP	/usr/include/boost/interprocess/containers/pair.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_SET_HPP	/usr/include/boost/interprocess/containers/set.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_SLIST_HPP	/usr/include/boost/interprocess/containers/slist.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_STABLE_VECTOR_HPP	/usr/include/boost/interprocess/containers/stable_vector.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_STRING_HPP	/usr/include/boost/interprocess/containers/string.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_VECTOR_HPP	/usr/include/boost/interprocess/containers/vector.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_VERSION_TYPE_HPP	/usr/include/boost/interprocess/containers/version_type.hpp	12;"	d
BOOST_INTERPROCESS_CREATION_TAGS_HPP	/usr/include/boost/interprocess/creation_tags.hpp	12;"	d
BOOST_INTERPROCESS_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/detail/config_begin.hpp	17;"	d
BOOST_INTERPROCESS_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/detail/config_end.hpp	13;"	d
BOOST_INTERPROCESS_DELETER_HPP	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	14;"	d
BOOST_INTERPROCESS_DETAIL_ADAPTIVE_NODE_POOL_HPP	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_ATOMIC_HPP	/usr/include/boost/interprocess/detail/atomic.hpp	16;"	d
BOOST_INTERPROCESS_DETAIL_CONDITION_ALGORITHM_8A_HPP	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_CONDITION_ANY_ALGORITHM_HPP	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_FILE_WRAPPER_HPP	/usr/include/boost/interprocess/detail/file_wrapper.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_INTERPROCESS_TESTER_HPP	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_LOCKS_HPP	/usr/include/boost/interprocess/sync/detail/locks.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_MANAGED_MEMORY_IMPL_HPP	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_MATH_FUNCTIONS_HPP	/usr/include/boost/interprocess/detail/math_functions.hpp	17;"	d
BOOST_INTERPROCESS_DETAIL_MEM_ALGO_COMMON_HPP	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_MIN_MAX_HPP	/usr/include/boost/interprocess/detail/min_max.hpp	14;"	d
BOOST_INTERPROCESS_DETAIL_MOVE_HPP	/usr/include/boost/interprocess/detail/move.hpp	15;"	d
BOOST_INTERPROCESS_DETAIL_MPL_HPP	/usr/include/boost/interprocess/detail/mpl.hpp	14;"	d
BOOST_INTERPROCESS_DETAIL_NODE_POOL_HPP	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_NODE_TOOLS_HPP	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_OS_FILE_FUNCTIONS_HPP	/usr/include/boost/interprocess/detail/os_file_functions.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_OS_THREAD_FUNCTIONS_HPP	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_POINTER_TYPE_HPP	/usr/include/boost/interprocess/detail/pointer_type.hpp	15;"	d
BOOST_INTERPROCESS_DETAIL_POSIX_MUTEX_HPP	/usr/include/boost/interprocess/sync/posix/mutex.hpp	28;"	d
BOOST_INTERPROCESS_DETAIL_POSIX_RECURSIVE_MUTEX_HPP	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	28;"	d
BOOST_INTERPROCESS_DETAIL_PREPROCESSOR_HPP	/usr/include/boost/interprocess/detail/preprocessor.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_PTIME_TO_TIMESPEC_HPP	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_SHARED_COUNT_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	15;"	d
BOOST_INTERPROCESS_DETAIL_SPIN_CONDITION_HPP	/usr/include/boost/interprocess/sync/spin/condition.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_SPIN_MUTEX_HPP	/usr/include/boost/interprocess/sync/spin/mutex.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_SPIN_RECURSIVE_MUTEX_HPP	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	28;"	d
BOOST_INTERPROCESS_DETAIL_SPIN_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_SP_COUNTED_BASE_ATOMIC_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	2;"	d
BOOST_INTERPROCESS_DETAIL_SP_COUNTED_BASE_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base.hpp	13;"	d
BOOST_INTERPROCESS_DETAIL_SP_COUNTED_IMPL_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	2;"	d
BOOST_INTERPROCESS_DETAIL_SYNC_UTILS_HPP	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_TMP_DIR_HELPERS_HPP	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_TRANSFORM_ITERATORS_HPP	/usr/include/boost/interprocess/detail/transform_iterator.hpp	15;"	d
BOOST_INTERPROCESS_DETAIL_TYPE_TRAITS_HPP	/usr/include/boost/interprocess/detail/type_traits.hpp	14;"	d
BOOST_INTERPROCESS_DETAIL_UTILITIES_HPP	/usr/include/boost/interprocess/detail/utilities.hpp	15;"	d
BOOST_INTERPROCESS_DETAIL_VARIADIC_TEMPLATES_TOOLS_HPP	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_WINAPI_MUTEX_WRAPPER_HPP	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_WINAPI_SEMAPHORE_WRAPPER_HPP	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_WINDOWS_CONDITION_HPP	/usr/include/boost/interprocess/sync/windows/condition.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_WINDOWS_MUTEX_HPP	/usr/include/boost/interprocess/sync/windows/mutex.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_WINDOWS_RECURSIVE_MUTEX_HPP	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_WINDOWS_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_WORKAROUND_HPP	/usr/include/boost/interprocess/detail/workaround.hpp	12;"	d
BOOST_INTERPROCESS_ENABLE_SHARED_FROM_THIS_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	15;"	d
BOOST_INTERPROCESS_ERRORS_HPP	/usr/include/boost/interprocess/errors.hpp	25;"	d
BOOST_INTERPROCESS_EXCEPTIONS_HPP	/usr/include/boost/interprocess/exceptions.hpp	12;"	d
BOOST_INTERPROCESS_EXTERNAL_CONFIG_INCLUDED	/usr/include/boost/interprocess/detail/config_external_begin.hpp	11;"	d
BOOST_INTERPROCESS_FILESYSTEM_BASED_POSIX_SEMAPHORES	/usr/include/boost/interprocess/detail/workaround.hpp	102;"	d
BOOST_INTERPROCESS_FILESYSTEM_BASED_POSIX_SHARED_MEMORY	/usr/include/boost/interprocess/detail/workaround.hpp	92;"	d
BOOST_INTERPROCESS_FILE_LOCKING_HELPERS_HPP	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	12;"	d
BOOST_INTERPROCESS_FILE_LOCK_HPP	/usr/include/boost/interprocess/sync/file_lock.hpp	12;"	d
BOOST_INTERPROCESS_FILE_MAPPING_HPP	/usr/include/boost/interprocess/file_mapping.hpp	12;"	d
BOOST_INTERPROCESS_FLAT_MAP_INDEX_HPP	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	11;"	d
BOOST_INTERPROCESS_FORCE_GENERIC_EMULATION	/usr/include/boost/interprocess/detail/workaround.hpp	18;"	d
BOOST_INTERPROCESS_FWD_HPP	/usr/include/boost/interprocess/interprocess_fwd.hpp	12;"	d
BOOST_INTERPROCESS_HAS_KERNEL_BOOTTIME	/usr/include/boost/interprocess/detail/workaround.hpp	19;"	d
BOOST_INTERPROCESS_INTERMODULE_SINGLETON_COMMON_HPP	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	12;"	d
BOOST_INTERPROCESS_INTERMODULE_SINGLETON_HPP	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	12;"	d
BOOST_INTERPROCESS_INTERSEGMENT_PTR_HPP	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	12;"	d
BOOST_INTERPROCESS_INTRUSIVE_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	15;"	d
BOOST_INTERPROCESS_IN_PLACE_INTERFACE_HPP	/usr/include/boost/interprocess/detail/in_place_interface.hpp	12;"	d
BOOST_INTERPROCESS_ISET_INDEX_HPP	/usr/include/boost/interprocess/indexes/iset_index.hpp	12;"	d
BOOST_INTERPROCESS_IUNORDERED_SET_INDEX_HPP	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	12;"	d
BOOST_INTERPROCESS_LOCK_OPTIONS_HPP	/usr/include/boost/interprocess/sync/lock_options.hpp	12;"	d
BOOST_INTERPROCESS_MADVISE_USES_CADDR_T	/usr/include/boost/interprocess/mapped_region.hpp	27;"	d
BOOST_INTERPROCESS_MADV_DONTNEED_HAS_NONDESTRUCTIVE_SEMANTICS	/usr/include/boost/interprocess/mapped_region.hpp	34;"	d
BOOST_INTERPROCESS_MANAGED_EXTERNAL_BUFFER_HPP	/usr/include/boost/interprocess/managed_external_buffer.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_HEAP_MEMORY_HPP	/usr/include/boost/interprocess/managed_heap_memory.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_MAPPED_FILE_HPP	/usr/include/boost/interprocess/managed_mapped_file.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_MULTI_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_OPEN_OR_CREATE_IMPL	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/managed_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_WINDOWS_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_XSI_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_MAPPED_REGION_EXT_HPP	/usr/include/boost/interprocess/mapped_region.hpp	861;"	d
BOOST_INTERPROCESS_MAPPED_REGION_HPP	/usr/include/boost/interprocess/mapped_region.hpp	12;"	d
BOOST_INTERPROCESS_MAP_INDEX_HPP	/usr/include/boost/interprocess/indexes/map_index.hpp	12;"	d
BOOST_INTERPROCESS_MAX_CONSTRUCTOR_PARAMETERS	/usr/include/boost/interprocess/detail/preprocessor.hpp	30;"	d
BOOST_INTERPROCESS_MEM_ALGO_DETAIL_SIMPLE_SEQ_FIT_IMPL_HPP	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	12;"	d
BOOST_INTERPROCESS_MEM_ALGO_DETAIL_SIMPLE_SEQ_FIT_IMPL_HPP	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	12;"	d
BOOST_INTERPROCESS_MEM_ALGO_RBTREE_BEST_FIT_HPP	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	12;"	d
BOOST_INTERPROCESS_MESSAGE_QUEUE_HPP	/usr/include/boost/interprocess/ipc/message_queue.hpp	12;"	d
BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX	/usr/include/boost/interprocess/detail/workaround.hpp	140;"	d
BOOST_INTERPROCESS_MULTI_SEGMENT_SERVICES_HPP	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	12;"	d
BOOST_INTERPROCESS_MULTI_SIMPLE_SEQ_FIT_HPP	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	12;"	d
BOOST_INTERPROCESS_MUTEX_FAMILY_HPP	/usr/include/boost/interprocess/sync/mutex_family.hpp	12;"	d
BOOST_INTERPROCESS_MUTEX_HPP	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	16;"	d
BOOST_INTERPROCESS_NAMED_CONDITION_ANY_HPP	/usr/include/boost/interprocess/sync/named_condition_any.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_CONDITION_HPP	/usr/include/boost/interprocess/sync/named_condition.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_MUTEX_HPP	/usr/include/boost/interprocess/sync/named_mutex.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_MUTEX_USES_POSIX_SEMAPHORES	/usr/include/boost/interprocess/detail/workaround.hpp	126;"	d
BOOST_INTERPROCESS_NAMED_PROXY_HPP	/usr/include/boost/interprocess/detail/named_proxy.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_RECURSIVE_MUTEX_HPP	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/named_semaphore.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_SEMAPHORE_USES_POSIX_SEMAPHORES	/usr/include/boost/interprocess/detail/workaround.hpp	127;"	d
BOOST_INTERPROCESS_NAMED_SHARABLE_MUTEX_HPP	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_UPGRADABLE_MUTEX_HPP	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	12;"	d
BOOST_INTERPROCESS_NEVER_INLINE	/usr/include/boost/interprocess/detail/workaround.hpp	152;"	d
BOOST_INTERPROCESS_NEVER_INLINE	/usr/include/boost/interprocess/detail/workaround.hpp	154;"	d
BOOST_INTERPROCESS_NODE_ALLOCATOR_HPP	/usr/include/boost/interprocess/allocators/node_allocator.hpp	12;"	d
BOOST_INTERPROCESS_NOEXCEPT	/usr/include/boost/interprocess/detail/workaround.hpp	159;"	d
BOOST_INTERPROCESS_NOEXCEPT	/usr/include/boost/interprocess/detail/workaround.hpp	161;"	d
BOOST_INTERPROCESS_NOEXCEPT	/usr/include/boost/interprocess/detail/workaround.hpp	165;"	d
BOOST_INTERPROCESS_NOEXCEPT_IF	/usr/include/boost/interprocess/detail/workaround.hpp	163;"	d
BOOST_INTERPROCESS_NOEXCEPT_IF	/usr/include/boost/interprocess/detail/workaround.hpp	166;"	d
BOOST_INTERPROCESS_NULL_INDEX_HPP	/usr/include/boost/interprocess/indexes/null_index.hpp	11;"	d
BOOST_INTERPROCESS_NULL_MUTEX_HPP	/usr/include/boost/interprocess/sync/null_mutex.hpp	12;"	d
BOOST_INTERPROCESS_OFFSET_PTR_BRANCHLESS_TO_OFF	/usr/include/boost/interprocess/offset_ptr.hpp	152;"	d
BOOST_INTERPROCESS_OFFSET_PTR_BRANCHLESS_TO_OFF_FROM_OTHER	/usr/include/boost/interprocess/offset_ptr.hpp	198;"	d
BOOST_INTERPROCESS_OFFSET_PTR_BRANCHLESS_TO_PTR	/usr/include/boost/interprocess/offset_ptr.hpp	106;"	d
BOOST_INTERPROCESS_OFFSET_PTR_BRANCHLESS_TO_PTR	/usr/include/boost/interprocess/offset_ptr.hpp	77;"	d
BOOST_INTERPROCESS_OFFSET_PTR_HPP	/usr/include/boost/interprocess/offset_ptr.hpp	12;"	d
BOOST_INTERPROCESS_OFFSET_PTR_INLINE_TO_OFF	/usr/include/boost/interprocess/offset_ptr.hpp	114;"	d
BOOST_INTERPROCESS_OFFSET_PTR_INLINE_TO_OFF	/usr/include/boost/interprocess/offset_ptr.hpp	149;"	d
BOOST_INTERPROCESS_OFFSET_PTR_INLINE_TO_OFF_FROM_OTHER	/usr/include/boost/interprocess/offset_ptr.hpp	160;"	d
BOOST_INTERPROCESS_OFFSET_PTR_INLINE_TO_OFF_FROM_OTHER	/usr/include/boost/interprocess/offset_ptr.hpp	195;"	d
BOOST_INTERPROCESS_OFFSET_PTR_INLINE_TO_PTR	/usr/include/boost/interprocess/offset_ptr.hpp	103;"	d
BOOST_INTERPROCESS_OFFSET_PTR_INLINE_TO_PTR	/usr/include/boost/interprocess/offset_ptr.hpp	76;"	d
BOOST_INTERPROCESS_PERFECT_FORWARDING	/usr/include/boost/interprocess/detail/workaround.hpp	121;"	d
BOOST_INTERPROCESS_PERMISSIONS_HPP	/usr/include/boost/interprocess/permissions.hpp	12;"	d
BOOST_INTERPROCESS_PORTABLE_INTERMODULE_SINGLETON_HPP	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	12;"	d
BOOST_INTERPROCESS_POSIX_BARRIERS	/usr/include/boost/interprocess/detail/workaround.hpp	32;"	d
BOOST_INTERPROCESS_POSIX_CONDITION_HPP	/usr/include/boost/interprocess/sync/posix/condition.hpp	12;"	d
BOOST_INTERPROCESS_POSIX_NAMED_CONDITION_HPP	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	12;"	d
BOOST_INTERPROCESS_POSIX_NAMED_MUTEX_HPP	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	12;"	d
BOOST_INTERPROCESS_POSIX_NAMED_SEMAPHORES	/usr/include/boost/interprocess/detail/workaround.hpp	36;"	d
BOOST_INTERPROCESS_POSIX_NAMED_SEMAPHORES	/usr/include/boost/interprocess/detail/workaround.hpp	42;"	d
BOOST_INTERPROCESS_POSIX_PROCESS_SHARED	/usr/include/boost/interprocess/detail/workaround.hpp	27;"	d
BOOST_INTERPROCESS_POSIX_RECURSIVE_MUTEXES	/usr/include/boost/interprocess/detail/workaround.hpp	108;"	d
BOOST_INTERPROCESS_POSIX_SEMAPHORES_NO_UNLINK	/usr/include/boost/interprocess/detail/workaround.hpp	38;"	d
BOOST_INTERPROCESS_POSIX_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	12;"	d
BOOST_INTERPROCESS_POSIX_SEMAPHORE_WRAPPER_HPP	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	12;"	d
BOOST_INTERPROCESS_POSIX_SEM_FAILED	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	29;"	d
BOOST_INTERPROCESS_POSIX_SEM_FAILED	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	31;"	d
BOOST_INTERPROCESS_POSIX_SHARED_MEMORY_OBJECTS	/usr/include/boost/interprocess/detail/workaround.hpp	62;"	d
BOOST_INTERPROCESS_POSIX_SHARED_MEMORY_OBJECTS	/usr/include/boost/interprocess/detail/workaround.hpp	67;"	d
BOOST_INTERPROCESS_POSIX_TIMEOUTS	/usr/include/boost/interprocess/detail/workaround.hpp	83;"	d
BOOST_INTERPROCESS_POSIX_TIMES_WRK_HPP	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	12;"	d
BOOST_INTERPROCESS_PP_MEMBER_FORWARD	/usr/include/boost/interprocess/detail/preprocessor.hpp	177;"	d
BOOST_INTERPROCESS_PP_MEMBER_IT_FORWARD	/usr/include/boost/interprocess/detail/preprocessor.hpp	180;"	d
BOOST_INTERPROCESS_PP_PARAM	/usr/include/boost/interprocess/detail/preprocessor.hpp	49;"	d
BOOST_INTERPROCESS_PP_PARAM	/usr/include/boost/interprocess/detail/preprocessor.hpp	53;"	d
BOOST_INTERPROCESS_PP_PARAM_DEFINE	/usr/include/boost/interprocess/detail/preprocessor.hpp	140;"	d
BOOST_INTERPROCESS_PP_PARAM_FORWARD	/usr/include/boost/interprocess/detail/preprocessor.hpp	171;"	d
BOOST_INTERPROCESS_PP_PARAM_INC	/usr/include/boost/interprocess/detail/preprocessor.hpp	144;"	d
BOOST_INTERPROCESS_PP_PARAM_INIT	/usr/include/boost/interprocess/detail/preprocessor.hpp	60;"	d
BOOST_INTERPROCESS_PP_PARAM_INIT	/usr/include/boost/interprocess/detail/preprocessor.hpp	66;"	d
BOOST_INTERPROCESS_PP_PARAM_LIST	/usr/include/boost/interprocess/detail/preprocessor.hpp	39;"	d
BOOST_INTERPROCESS_PP_PARAM_LIST	/usr/include/boost/interprocess/detail/preprocessor.hpp	43;"	d
BOOST_INTERPROCESS_PRIVATE_ADAPTIVE_POOL_HPP	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	12;"	d
BOOST_INTERPROCESS_PRIVATE_NODE_ALLOCATOR_HPP	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	12;"	d
BOOST_INTERPROCESS_PTHREAD_HELPERS_HPP	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	12;"	d
BOOST_INTERPROCESS_PTIME_WRK_HPP	/usr/include/boost/interprocess/detail/ptime_wrk.hpp	12;"	d
BOOST_INTERPROCESS_RECURSIVE_MUTEX_HPP	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	28;"	d
BOOST_INTERPROCESS_ROBUST_EMULATION_HPP	/usr/include/boost/interprocess/detail/robust_emulation.hpp	12;"	d
BOOST_INTERPROCESS_RUNTIME_FILESYSTEM_BASED_POSIX_SHARED_MEMORY	/usr/include/boost/interprocess/detail/workaround.hpp	96;"	d
BOOST_INTERPROCESS_SCOPED_LOCK_HPP	/usr/include/boost/interprocess/sync/scoped_lock.hpp	17;"	d
BOOST_INTERPROCESS_SCOPED_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	16;"	d
BOOST_INTERPROCESS_SEGMENT_MANAGER_BASE_HPP	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	12;"	d
BOOST_INTERPROCESS_SEGMENT_MANAGER_HPP	/usr/include/boost/interprocess/segment_manager.hpp	12;"	d
BOOST_INTERPROCESS_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	12;"	d
BOOST_INTERPROCESS_SHARABLE_LOCK_HPP	/usr/include/boost/interprocess/sync/sharable_lock.hpp	17;"	d
BOOST_INTERPROCESS_SHARABLE_MUTEX_HPP	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	16;"	d
BOOST_INTERPROCESS_SHARED_MEMORY_OBJECT_HPP	/usr/include/boost/interprocess/shared_memory_object.hpp	12;"	d
BOOST_INTERPROCESS_SHARED_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	17;"	d
BOOST_INTERPROCESS_SHM_NAMED_CONDITION_ANY_HPP	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	12;"	d
BOOST_INTERPROCESS_SHM_NAMED_CONDITION_HPP	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	12;"	d
BOOST_INTERPROCESS_SHM_NAMED_MUTEX_HPP	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	12;"	d
BOOST_INTERPROCESS_SHM_NAMED_RECURSIVE_MUTEX_HPP	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	12;"	d
BOOST_INTERPROCESS_SHM_NAMED_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	12;"	d
BOOST_INTERPROCESS_SIMPLE_SEQ_FIT_HPP	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	12;"	d
BOOST_INTERPROCESS_SYNC_NAMED_CREATION_FUNCTOR_HPP	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	12;"	d
BOOST_INTERPROCESS_SYNC_XSI_ADVANCED_XSI_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	31;"	d
BOOST_INTERPROCESS_SYNC_XSI_SIMPLE_XSI_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	11;"	d
BOOST_INTERPROCESS_TIMEOUT_WHEN_LOCKING_DURATION_MS	/usr/include/boost/interprocess/detail/workaround.hpp	132;"	d
BOOST_INTERPROCESS_UNIQUE_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	17;"	d
BOOST_INTERPROCESS_UNIX_64_BIT_OR_BIGGER_OFF_T	/usr/include/boost/interprocess/detail/workaround.hpp	53;"	d
BOOST_INTERPROCESS_UNORDERED_MAP_INDEX_HPP	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	12;"	d
BOOST_INTERPROCESS_UPGRADABLE_LOCK_HPP	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	17;"	d
BOOST_INTERPROCESS_UPGRADABLE_MUTEX_HPP	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	14;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	137;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	39;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	39;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	76;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	123;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	51;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	37;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	93;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	140;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	32;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	32;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	83;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	128;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	44;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	30;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	99;"	d
BOOST_INTERPROCESS_USE_POSIX_SEMAPHORES	/usr/include/boost/interprocess/sync/named_mutex.hpp	114;"	d
BOOST_INTERPROCESS_USE_POSIX_SEMAPHORES	/usr/include/boost/interprocess/sync/named_mutex.hpp	28;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	143;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	36;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	36;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	86;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	131;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	48;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	34;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	96;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/named_condition.hpp	28;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/named_condition_any.hpp	28;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/named_mutex.hpp	117;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/named_mutex.hpp	31;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	107;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	25;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/named_semaphore.hpp	115;"	d
BOOST_INTERPROCESS_USE_WINDOWS	/usr/include/boost/interprocess/sync/named_semaphore.hpp	31;"	d
BOOST_INTERPROCESS_VECTORSTREAM_HPP	/usr/include/boost/interprocess/streams/vectorstream.hpp	37;"	d
BOOST_INTERPROCESS_WEAK_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	16;"	d
BOOST_INTERPROCESS_WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	19;"	d
BOOST_INTERPROCESS_WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	37;"	d
BOOST_INTERPROCESS_WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/ptime_wrk.hpp	19;"	d
BOOST_INTERPROCESS_WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/ptime_wrk.hpp	28;"	d
BOOST_INTERPROCESS_WIN32_PRIMITIVES_HPP	/usr/include/boost/interprocess/detail/win32_api.hpp	12;"	d
BOOST_INTERPROCESS_WINDOWS	/usr/include/boost/interprocess/detail/workaround.hpp	17;"	d
BOOST_INTERPROCESS_WINDOWS_COINIT_MODEL	/usr/include/boost/interprocess/detail/win32_api.hpp	205;"	d
BOOST_INTERPROCESS_WINDOWS_INTERMODULE_SINGLETON_HPP	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	12;"	d
BOOST_INTERPROCESS_WINDOWS_NAMED_CONDITION_ANY_HPP	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	12;"	d
BOOST_INTERPROCESS_WINDOWS_NAMED_CONDITION_HPP	/usr/include/boost/interprocess/sync/windows/named_condition.hpp	12;"	d
BOOST_INTERPROCESS_WINDOWS_NAMED_MUTEX_HPP	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	11;"	d
BOOST_INTERPROCESS_WINDOWS_NAMED_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	12;"	d
BOOST_INTERPROCESS_WINDOWS_NAMED_SYNC_HPP	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	12;"	d
BOOST_INTERPROCESS_WINDOWS_RECURSIVE_NAMED_MUTEX_HPP	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	11;"	d
BOOST_INTERPROCESS_WINDOWS_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/windows_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_XSI_KEY_HPP	/usr/include/boost/interprocess/xsi_key.hpp	12;"	d
BOOST_INTERPROCESS_XSI_SHARED_MEMORY_DEVICE_HPP	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	12;"	d
BOOST_INTERPROCESS_XSI_SHARED_MEMORY_FILE_WRAPPER_HPP	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	12;"	d
BOOST_INTERPROCESS_XSI_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/xsi_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_XSI_SHARED_MEMORY_OBJECTS	/usr/include/boost/interprocess/detail/workaround.hpp	58;"	d
BOOST_INTERPROCESS_XSI_XSI_NAMED_MUTEX_HPP	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	12;"	d
BOOST_INTERPROCESS_named_upgradable_mutex_HPP	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	12;"	d
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:(Version <=2)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:(Version <=2)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private	signature:(Version <=2)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private	signature:(Version <=2)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT(((size_t_bits - pow_size_bits - frc_size_bits) >= ctrl_bits ));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:((size_t_bits - pow_size_bits - frc_size_bits) >= ctrl_bits )
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT((sizeof(std::size_t) == sizeof(void*)));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:(sizeof(std::size_t) == sizeof(void*))
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT((sizeof(void*)*CHAR_BIT == 32 || sizeof(void*)*CHAR_BIT == 64));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:(sizeof(void*)*CHAR_BIT == 32 || sizeof(void*)*CHAR_BIT == 64)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/utilities.hpp	/^   BOOST_STATIC_ASSERT((RoundTo != 0));$/;"	p	struct:boost::interprocess::ipcdetail::ct_rounded_size	access:public	signature:(RoundTo != 0)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/utilities.hpp	/^   BOOST_STATIC_ASSERT(intermediate_value <= std::size_t(-1)\/RoundTo);$/;"	p	struct:boost::interprocess::ipcdetail::ct_rounded_size	access:public	signature:(intermediate_value <= std::size_t(-1)/RoundTo)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((0 == (Alignment & (Alignment - size_type(1u)))));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(0 == (Alignment & (Alignment - size_type(1u))))
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((Alignment >= 4));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(Alignment >= 4)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((Alignment >= ::boost::alignment_of<void_pointer>::value));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(Alignment >= ::boost::alignment_of<void_pointer>::value)
Base	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm> Base;$/;"	t	class:boost::interprocess::segment_manager	access:private
BaseAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *         BaseAddress;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
BeginEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall BeginEnumeration($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lEnumFlags)
BeginEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall BeginEnumeration($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( long lFlags)
BeginMethodEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall BeginMethodEnumeration($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lEnumFlags)
BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type BlockCtrlBytes         = MemoryAlgorithm::BlockCtrlBytes;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static const std::size_t BlockCtrlBytes = ipcdetail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type BlockCtrlBytes = ipcdetail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type BlockCtrlBytes = ipcdetail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
BlockCtrlSize	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static const std::size_t BlockCtrlSize  = BlockCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type BlockCtrlUnits         = MemoryAlgorithm::BlockCtrlUnits;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type BlockCtrlUnits = BlockCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type BlockCtrlUnits = BlockCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
BlockHdrAlignment	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   enum  {  BlockHdrAlignment = ::boost::alignment_of<block_header<size_type> >::value  };$/;"	e	enum:boost::interprocess::ipcdetail::intrusive_value_type_impl::__anon4
BootAndSystemstampLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long BootAndSystemstampLength   = 16;$/;"	m	namespace:boost::interprocess::winapi
BootstampLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long BootstampLength            = 8;$/;"	m	namespace:boost::interprocess::winapi
Broken	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static const ::boost::uint32_t Broken              = 3u;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
Buffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t *Buffer;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
CLSCTX_INPROC_SERVER_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long CLSCTX_INPROC_SERVER_BIPC   = 0x1;$/;"	m	namespace:boost::interprocess::winapi
CLSCTX_LOCAL_SERVER_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long CLSCTX_LOCAL_SERVER_BIPC   = 0x4;$/;"	m	namespace:boost::interprocess::winapi
CLSID_WbemAdministrativeLocator	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const GUID_BIPC CLSID_WbemAdministrativeLocator =$/;"	m	namespace:boost::interprocess::winapi
COINIT_APARTMENTTHREADED_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long COINIT_APARTMENTTHREADED_BIPC   = 0x2;$/;"	m	namespace:boost::interprocess::winapi
COINIT_DISABLE_OLE1DDE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long COINIT_DISABLE_OLE1DDE_BIPC     = 0x4;$/;"	m	namespace:boost::interprocess::winapi
COINIT_MULTITHREADED_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long COINIT_MULTITHREADED_BIPC       = 0x0;$/;"	m	namespace:boost::interprocess::winapi
COINIT_SPEED_OVER_MEMORY_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long COINIT_SPEED_OVER_MEMORY_BIPC   = 0x4;$/;"	m	namespace:boost::interprocess::winapi
CancelAsyncCall	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CancelAsyncCall($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( void *pSink)
Clone	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Clone($/;"	p	struct:boost::interprocess::winapi::IEnumWbemClassObject_BIPC	access:public	signature:( void **ppEnum)
Clone	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Clone($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( IWbemClassObject_BIPC **ppCopy)
Clone	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Clone($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( IWbemContext_BIPC **ppNewCopy)
CloseHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CloseHandle(void*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void*)
CoCreateInstance	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall CoCreateInstance(const GUID_BIPC & rclsid, IUnknown_BIPC *pUnkOuter,$/;"	p	namespace:boost::interprocess::winapi	signature:(const GUID_BIPC & rclsid, IUnknown_BIPC *pUnkOuter, unsigned long dwClsContext, const GUID_BIPC & riid, void** ppv)
CoInitializeEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall CoInitializeEx(void *pvReserved, unsigned long dwCoInit);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *pvReserved, unsigned long dwCoInit)
CoInitializeSecurity	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall CoInitializeSecurity($/;"	p	namespace:boost::interprocess::winapi	signature:( void* pSecDesc, long cAuthSvc, void * asAuthSvc, void *pReserved1, unsigned long dwAuthnLevel, unsigned long dwImpLevel, void *pAuthList, unsigned long dwCapabilities, void *pReserved3 )
CoSetProxyBlanket	/usr/include/boost/interprocess/detail/win32_api.hpp	/^ extern "C" __declspec(dllimport) long __stdcall CoSetProxyBlanket($/;"	p	namespace:boost::interprocess::winapi	signature:( IUnknown_BIPC *pProxy, unsigned long dwAuthnSvc, unsigned long dwAuthzSvc, wchar_t *pServerPrincName, unsigned long dwAuthnLevel, unsigned long dwImpLevel, void *pAuthInfo, unsigned long dwCapabilities)
CoUninitialize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall CoUninitialize(void);$/;"	p	namespace:boost::interprocess::winapi	signature:(void)
CompareTo	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CompareTo($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, IWbemClassObject_BIPC *pCompareTo)
ConnectServer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ConnectServer($/;"	p	struct:boost::interprocess::winapi::IWbemLocator_BIPC	access:public	signature:( const wchar_t * strNetworkResource, const wchar_t * strUser, const wchar_t * strPassword, const wchar_t * strLocale, long lSecurityFlags, const wchar_t * strAuthority, void *pCtx, IWbemServices_BIPC **ppNamespace)
Control	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Control;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
CorruptedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      CorruptedSegment$/;"	e	enum:boost::interprocess::ipcdetail::managed_open_or_create_impl::__anon1
CreateClassEnum	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CreateClassEnum($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strSuperclass, long lFlags, void *pCtx, void **ppEnum)
CreateClassEnumAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CreateClassEnumAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strSuperclass, long lFlags, void *pCtx, void *pResponseHandler)
CreateDirectory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CreateDirectory(const char *, interprocess_security_attributes*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, interprocess_security_attributes*)
CreateDirectoryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CreateDirectoryA(const char *, interprocess_security_attributes*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, interprocess_security_attributes*)
CreateFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateFileA (const char *, unsigned long, unsigned long, struct interprocess_security_attributes*, unsigned long, unsigned long, void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, unsigned long, unsigned long, struct interprocess_security_attributes*, unsigned long, unsigned long, void *)
CreateFileMappingA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateFileMappingA (void *, interprocess_security_attributes*, unsigned long, unsigned long, unsigned long, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, interprocess_security_attributes*, unsigned long, unsigned long, unsigned long, const char *)
CreateInstanceEnum	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CreateInstanceEnum($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strFilter, long lFlags, void *pCtx, void **ppEnum)
CreateInstanceEnumAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CreateInstanceEnumAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strFilter, long lFlags, void *pCtx, void *pResponseHandler)
CreateMutexA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateMutexA(interprocess_security_attributes*, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_attributes*, int, const char *)
CreateSemaphoreA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateSemaphoreA(interprocess_security_attributes*, long, long, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_attributes*, long, long, const char *)
CtorNArg	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   CtorNArg(Args && ...args)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:public	signature:(Args && ....args)
CtorNArg	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^struct CtorNArg : public placement_destroy<T>$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:placement_destroy
DEFAULT_MAX_CACHED_NODES	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   static const std::size_t DEFAULT_MAX_CACHED_NODES = 64;$/;"	m	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
Dacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_acl *Dacl;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
Data1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  Data1;$/;"	m	struct:boost::interprocess::winapi::GUID_BIPC	access:public
Data2	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Data2;$/;"	m	struct:boost::interprocess::winapi::GUID_BIPC	access:public
Data3	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Data3;$/;"	m	struct:boost::interprocess::winapi::GUID_BIPC	access:public
Data4	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char  Data4[8];$/;"	m	struct:boost::interprocess::winapi::GUID_BIPC	access:public
Delete	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Delete($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName)
DeleteAll	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteAll( void) = 0;$/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( void)
DeleteClass	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteClass($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strClass, long lFlags, void *pCtx, void **ppCallResult)
DeleteClassAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteClassAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strClass, long lFlags, void *pCtx, void *pResponseHandler)
DeleteFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall    DeleteFileA (const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *)
DeleteInstance	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteInstance($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, long lFlags, void *pCtx, void **ppCallResult)
DeleteInstanceAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteInstanceAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, long lFlags, void *pCtx, void *pResponseHandler)
DeleteMethod	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteMethod($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName)
DeleteValue	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteValue($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags)
Destroyed	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static const ::boost::uint32_t Destroyed           = 4u;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
DevHolder	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   typedef managed_open_or_create_impl_device_holder<StoreDevice, DeviceAbstraction> DevHolder;$/;"	t	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private
DoCreate	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::ipcdetail::create_enum_t
DoCreate	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
DoOpen	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::ipcdetail::create_enum_t
DoOpen	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
DoOpenOrCreate	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::ipcdetail::create_enum_t
DoOpenOrCreate	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
DuplicateHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall DuplicateHandle$/;"	p	namespace:boost::interprocess::winapi	signature:( void *hSourceProcessHandle, void *hSourceHandle , void *hTargetProcessHandle, void **lpTargetHandle , unsigned long dwDesiredAccess, int bInheritHandle , unsigned long dwOptions)
EOAC_NONE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long EOAC_NONE_BIPC = 0;$/;"	m	namespace:boost::interprocess::winapi
Element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Values...> >::type   Element;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:private
EndCtrlBlockBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type EndCtrlBlockBytes   = ipcdetail::ct_rounded_size<sizeof(SizeHolder), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
EndCtrlBlockUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type EndCtrlBlockUnits   = EndCtrlBlockBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
EndEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall EndEnumeration( void) = 0;$/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( void)
EndEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall EndEnumeration( void) = 0;$/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( void)
EndMethodEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall EndMethodEnumeration( void) = 0;$/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( void)
ExecMethod	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecMethod($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, const wchar_t * strMethodName, long lFlags, IWbemContext_BIPC *pCtx, IWbemClassObject_BIPC *pInParams, IWbemClassObject_BIPC **ppOutParams, void **ppCallResult)
ExecMethodAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecMethodAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, const wchar_t * strMethodName, long lFlags, IWbemContext_BIPC *pCtx, IWbemClassObject_BIPC *pInParams, void *pResponseHandler)
ExecNotificationQuery	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecNotificationQuery($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strQueryLanguage, const wchar_t * strQuery, long lFlags, IWbemContext_BIPC *pCtx, void **ppEnum)
ExecNotificationQueryAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecNotificationQueryAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strQueryLanguage, const wchar_t * strQuery, long lFlags, IWbemContext_BIPC *pCtx, void *pResponseHandler)
ExecQuery	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecQuery($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strQueryLanguage, const wchar_t * strQuery, long lFlags, IWbemContext_BIPC *pCtx, IEnumWbemClassObject_BIPC **ppEnum)
ExecQueryAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecQueryAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strQueryLanguage, const wchar_t * strQuery, long lFlags, IWbemContext_BIPC *pCtx, void *pResponseHandler)
FileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t FileName[1];$/;"	m	struct:boost::interprocess::winapi::file_name_information_t	access:public
FileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t FileName[1];$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
FileNameLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long FileNameLength;$/;"	m	struct:boost::interprocess::winapi::file_name_information_t	access:public
FileNameLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long FileNameLength;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
FindClose	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FindClose(void *hFindFile);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hFindFile)
FindFirstFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall FindFirstFileA(const char *lpFileName, win32_find_data_t *lpFindFileData);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *lpFileName, win32_find_data_t *lpFindFileData)
FindNextFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FindNextFileA(void *hFindFile, win32_find_data_t *lpFindFileData);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hFindFile, win32_find_data_t *lpFindFileData)
FirstID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t FirstID = 2;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
FirstID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::FirstID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
FlushFileBuffers	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall FlushFileBuffers (void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
FlushViewOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall FlushViewOfFile (void *, std::size_t);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, std::size_t)
FormatMessageA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall FormatMessageA$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long dwFlags, const void *lpSource, unsigned long dwMessageId, unsigned long dwLanguageId, char *lpBuffer, unsigned long nSize, std::va_list *Arguments)
FreeLibrary	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FreeLibrary(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
FunctionAddresses	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *FunctionAddresses[NumFunction];$/;"	m	struct:boost::interprocess::winapi::function_address_holder	access:private
FunctionAddresses	/usr/include/boost/interprocess/detail/win32_api.hpp	/^void *function_address_holder<Dummy>::FunctionAddresses[function_address_holder<Dummy>::NumFunction];$/;"	m	class:boost::interprocess::winapi::function_address_holder
FunctionStates	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static volatile long FunctionStates[NumFunction];$/;"	m	struct:boost::interprocess::winapi::function_address_holder	access:private
FunctionStates	/usr/include/boost/interprocess/detail/win32_api.hpp	/^volatile long function_address_holder<Dummy>::FunctionStates[function_address_holder<Dummy>::NumFunction];$/;"	m	class:boost::interprocess::winapi::function_address_holder
GMemMarkToBeRemoved	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static const int GMemMarkToBeRemoved = -1;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private
GMemNotPresent	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static const int GMemNotPresent      = -2;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private
GUID_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct GUID_BIPC$/;"	s	namespace:boost::interprocess::winapi
Get	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Get($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, wchar_variant *pVal, long *pType, long *plFlavor)
GetCurrentProcess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall GetCurrentProcess();$/;"	p	namespace:boost::interprocess::winapi	signature:()
GetCurrentProcessId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetCurrentProcessId();$/;"	p	namespace:boost::interprocess::winapi	signature:()
GetCurrentThreadId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetCurrentThreadId();$/;"	p	namespace:boost::interprocess::winapi	signature:()
GetFileAttributesA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetFileAttributesA(const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *)
GetFileInformationByHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall GetFileInformationByHandle(void *, interprocess_by_handle_file_information*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, interprocess_by_handle_file_information*)
GetFileSizeEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall GetFileSizeEx (void *, __int64 *size);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 *size)
GetFileType	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall GetFileType(void *hFile);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hFile)
GetLastError	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetLastError();$/;"	p	namespace:boost::interprocess::winapi	signature:()
GetMappedFileNameW	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetMappedFileNameW(void *, void *, wchar_t *, unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, void *, wchar_t *, unsigned long)
GetMappedFileName_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef unsigned long (__stdcall * GetMappedFileName_t)(void *, void *, wchar_t *, unsigned long);$/;"	t	namespace:boost::interprocess::winapi
GetMethod	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetMethod($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, IWbemClassObject_BIPC **ppInSignature, IWbemClassObject_BIPC **ppOutSignature)
GetMethodOrigin	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetMethodOrigin($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszMethodName, wchar_t * *pstrClassName)
GetMethodQualifierSet	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetMethodQualifierSet($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszMethod, void **ppQualSet)
GetModuleHandleA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall GetModuleHandleA(const char*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char*)
GetNames	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetNames($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszQualifierName, long lFlags, wchar_variant *pQualifierVal, void * *pNames)
GetNames	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetNames($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( long lFlags, void * *pNames)
GetObject	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetObject($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, long lFlags, void *pCtx, void **ppObject, void **ppCallResult)
GetObjectAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetObjectAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, long lFlags, void *pCtx, void *pResponseHandler)
GetObjectText	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetObjectText($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, wchar_t * *pstrObjectText)
GetProcAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall GetProcAddress(void *, const char*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, const char*)
GetProcessTimes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall GetProcessTimes$/;"	p	namespace:boost::interprocess::winapi	signature:( void *hProcess, interprocess_filetime* lpCreationTime , interprocess_filetime *lpExitTime,interprocess_filetime *lpKernelTime , interprocess_filetime *lpUserTime )
GetPropertyOrigin	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetPropertyOrigin($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName, wchar_t * *pstrClassName)
GetPropertyQualifierSet	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetPropertyQualifierSet($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszProperty, void **ppQualSet)
GetQualifierSet	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetQualifierSet($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( void **ppQualSet)
GetSystemInfo	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall GetSystemInfo (struct system_info *);$/;"	p	namespace:boost::interprocess::winapi	signature:(struct system_info *)
GetTempPathA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall GetTempPathA(unsigned long length, char *buffer);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long length, char *buffer)
GetValue	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetValue($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, wchar_variant *pValue)
Group	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *Group;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
IEnumWbemClassObject_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IEnumWbemClassObject_BIPC : public IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi	inherits:IUnknown_BIPC
IID_IUnknown	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const GUID_BIPC IID_IUnknown = { 0x00000000, 0x0000, 0x0000, {0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46}};$/;"	m	namespace:boost::interprocess::winapi
IUnknown_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi
IWbemClassObject_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IWbemClassObject_BIPC : public IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi	inherits:IUnknown_BIPC
IWbemContext_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IWbemContext_BIPC : public IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi	inherits:IUnknown_BIPC
IWbemLocator_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IWbemLocator_BIPC : public IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi	inherits:IUnknown_BIPC
IWbemServices_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IWbemServices_BIPC : public IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi	inherits:IUnknown_BIPC
Imultiset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      <block_ctrl, bi::base_hook<TreeHook> >::type                Imultiset;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
Information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *Information;$/;"	m	struct:boost::interprocess::winapi::io_status_block_t	access:public
InheritsFrom	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall InheritsFrom($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * strAncestor)
InitBufferSize	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static const std::size_t InitBufferSize = 64;$/;"	m	class:boost::interprocess::iunordered_set_index	access:private
InitializeSecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall InitializeSecurityDescriptor(interprocess_security_descriptor *pSecurityDescriptor, unsigned long dwRevision);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_descriptor *pSecurityDescriptor, unsigned long dwRevision)
Initialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static const ::boost::uint32_t Initialized         = 2u;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
InitializedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      InitializedSegment,$/;"	e	enum:boost::interprocess::ipcdetail::managed_open_or_create_impl::__anon1
Initializing	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static const ::boost::uint32_t Initializing        = 1u;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
InitializingSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      InitializingSegment,$/;"	e	enum:boost::interprocess::ipcdetail::managed_open_or_create_impl::__anon1
IsIterator	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef bool_<is_iterator> IsIterator;$/;"	t	struct:boost::interprocess::ipcdetail::CtorNArg	access:public
LastID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t LastID  = 256;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
LastID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::LastID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
Length	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long Length;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
Length	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Length;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
LengthOfGlobal	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   static const std::size_t LengthOfGlobal = sizeof("Global\\\\boost.ipc")-1;$/;"	m	class:boost::interprocess::ipcdetail::sync_handles	access:private
LoadLibraryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall LoadLibraryA(const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *)
LocalFree	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall LocalFree (void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
LockFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall LockFile  (void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high)
LockFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall LockFileEx(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped)
MUTEX	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   enum type { MUTEX, SEMAPHORE };$/;"	e	enum:boost::interprocess::ipcdetail::sync_handles::type
ManagedOpenOrCreateUserOffset	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      ManagedOpenOrCreateUserOffset =$/;"	m	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public
MapViewOfFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall MapViewOfFileEx (void *, unsigned long, unsigned long, unsigned long, std::size_t, void*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, unsigned long, unsigned long, unsigned long, std::size_t, void*)
Mask	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const std::size_t Mask = ((std::size_t(1) << NumBits) - 1) << 1u;$/;"	m	struct:boost::intrusive::pointer_plus_bits	access:public
MaxCount	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   static const long MaxCount = long(0x7FFFFFFF);$/;"	m	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public
MaxName	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t MaxName = 32;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
MaxName	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::MaxName;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
MaxPath	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long MaxPath           = 260;$/;"	m	namespace:boost::interprocess::winapi
MaximumLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short MaximumLength;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
MinBlockSize	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static const std::size_t MinBlockSize   = BlockCtrlSize + Alignment;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
MinBlockSize	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type MinBlockSize   = MinBlockUnits*Alignment;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
MinBlockUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type MinBlockUnits          = MemoryAlgorithm::MinBlockUnits;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
MinBlockUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type MinBlockUnits  = BlockCtrlUnits;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
MinBlockUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type MinBlockUnits       = BlockCtrlUnits;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
ModuleAddresses	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *ModuleAddresses[NumModule];$/;"	m	struct:boost::interprocess::winapi::function_address_holder	access:private
ModuleAddresses	/usr/include/boost/interprocess/detail/win32_api.hpp	/^void *function_address_holder<Dummy>::ModuleAddresses[function_address_holder<Dummy>::NumModule];$/;"	m	class:boost::interprocess::winapi::function_address_holder
ModuleStates	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static volatile long ModuleStates[NumModule];$/;"	m	struct:boost::interprocess::winapi::function_address_holder	access:private
ModuleStates	/usr/include/boost/interprocess/detail/win32_api.hpp	/^volatile long function_address_holder<Dummy>::ModuleStates[function_address_holder<Dummy>::NumModule];$/;"	m	class:boost::interprocess::winapi::function_address_holder
MoveFileExA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall    MoveFileExA (const char *, const char *, unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, const char *, unsigned long)
NOTIFY_ALL	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::ipcdetail::spin_condition::__anon12
NOTIFY_ONE	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::ipcdetail::spin_condition::__anon12
Name	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unicode_string_t Name;$/;"	m	struct:boost::interprocess::winapi::object_name_information_t	access:public
NameBuf	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   typedef char NameBuf[StrSize];$/;"	t	class:boost::interprocess::ipcdetail::sync_handles	access:private
NameBuffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t NameBuffer[1];$/;"	m	struct:boost::interprocess::winapi::object_name_information_t	access:public
Next	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef get_impl<I-1, tuple<Values...> >                       Next;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:private
Next	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Next($/;"	p	struct:boost::interprocess::winapi::IEnumWbemClassObject_BIPC	access:public	signature:( long lTimeout, unsigned long uCount, IWbemClassObject_BIPC **apObjects, unsigned long *puReturned)
Next	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Next($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, wchar_t * *strName, wchar_variant *pVal, long *pType, long *plFlavor)
Next	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Next($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( long lFlags, wchar_t * *pstrName, wchar_variant *pValue)
NextAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall NextAsync($/;"	p	struct:boost::interprocess::winapi::IEnumWbemClassObject_BIPC	access:public	signature:( unsigned long uCount, void *pSink)
NextMethod	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall NextMethod($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, wchar_t * *pstrName, IWbemClassObject_BIPC **ppInSignature, IWbemClassObject_BIPC **ppOutSignature)
NtClose_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtClose_t) (void*);$/;"	t	namespace:boost::interprocess::winapi
NtDeleteFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtDeleteFile_t)(object_attributes_t *ObjectAttributes);$/;"	t	namespace:boost::interprocess::winapi
NtDll_dll	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtDll_dll, NumModule };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon11
NtOpenFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtOpenFile_t)(void*,unsigned long ,object_attributes_t*,io_status_block_t*,unsigned long,unsigned long);$/;"	t	namespace:boost::interprocess::winapi
NtQueryInformationFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQueryInformationFile_t)(void *,io_status_block_t *,void *, long, int);$/;"	t	namespace:boost::interprocess::winapi
NtQueryObject	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
NtQueryObject_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQueryObject_t)(void*, object_information_class, void *, unsigned long, unsigned long *);$/;"	t	namespace:boost::interprocess::winapi
NtQuerySection	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
NtQuerySection_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQuerySection_t)(void*, section_information_class, interprocess_section_basic_information *pinfo, unsigned long info_size, unsigned long *ret_len);$/;"	t	namespace:boost::interprocess::winapi
NtQuerySemaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
NtQuerySemaphore_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQuerySemaphore_t)(void*, unsigned int info_class, interprocess_semaphore_basic_information *pinfo, unsigned int info_size, unsigned int *ret_len);$/;"	t	namespace:boost::interprocess::winapi
NtQuerySystemInformation	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
NtQuerySystemInformation_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQuerySystemInformation_t)(int, void*, unsigned long, unsigned long *);$/;"	t	namespace:boost::interprocess::winapi
NtSetInformationFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
NtSetInformationFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtSetInformationFile_t)(void *FileHandle, io_status_block_t *IoStatusBlock, void *FileInformation, unsigned long Length, int FileInformationClass );$/;"	t	namespace:boost::interprocess::winapi
NumFunction	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
NumID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t NumID   = LastID - FirstID;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
NumID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::NumID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
NumModule	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtDll_dll, NumModule };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon11
OS_process_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef unsigned long OS_process_id_t;$/;"	t	namespace:boost::interprocess::ipcdetail
OS_systemwide_thread_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef OS_thread_id_t OS_systemwide_thread_id_t;$/;"	t	namespace:boost::interprocess::ipcdetail
OS_thread_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef unsigned long OS_thread_id_t;$/;"	t	namespace:boost::interprocess::ipcdetail
ObjectName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unicode_string_t *ObjectName;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
OpenFileMappingA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenFileMappingA (unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
OpenMutexA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenMutexA(unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
OpenNamespace	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall OpenNamespace($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strNamespace, long lFlags, void *pCtx, void **ppWorkingNamespace, void **ppResult)
OpenSemaphoreA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenSemaphoreA(unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
Owner	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *Owner;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
PT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef flat_map_intersegment<interprocess_mutex> PT;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
PageSize	/usr/include/boost/interprocess/mapped_region.hpp	/^      static const std::size_t PageSize;$/;"	m	struct:boost::interprocess::mapped_region::page_size_holder	access:public
PageSize	/usr/include/boost/interprocess/mapped_region.hpp	/^const std::size_t mapped_region::page_size_holder<dummy>::PageSize$/;"	m	class:boost::interprocess::mapped_region::page_size_holder
PayloadPerAllocation	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static const size_type PayloadPerAllocation = segment_manager::PayloadPerAllocation;$/;"	m	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static const std::size_t PayloadPerAllocation = BlockCtrlBytes;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type PayloadPerAllocation = BlockCtrlBytes;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type PayloadPerAllocation = AllocatedCtrlBytes - UsableByPreviousChunk;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:public
PayloadPerAllocation	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const size_type PayloadPerAllocation = Base::PayloadPerAllocation;$/;"	m	class:boost::interprocess::segment_manager	access:public
PayloadPerAllocation	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const size_type PayloadPerAllocation = MemoryAlgorithm::PayloadPerAllocation;$/;"	m	class:boost::interprocess::segment_manager_base	access:public
Pointer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      void *Pointer;$/;"	m	union:boost::interprocess::winapi::io_status_block_t::__anon9	access:public
Protect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  Protect;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
Put	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Put($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, wchar_variant *pVal, long Type)
PutClass	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall PutClass($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( IWbemClassObject_BIPC *pObject, long lFlags, void *pCtx, void **ppCallResult)
PutClassAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall PutClassAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( IWbemClassObject_BIPC *pObject, long lFlags, void *pCtx, void *pResponseHandler)
PutInstance	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall PutInstance($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( void *pInst, long lFlags, void *pCtx, void **ppCallResult)
PutInstanceAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall PutInstanceAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( void *pInst, long lFlags, void *pCtx, void *pResponseHandler)
PutMethod	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall PutMethod($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, IWbemClassObject_BIPC *pInSignature, IWbemClassObject_BIPC *pOutSignature)
QueryInterface	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall QueryInterface($/;"	p	struct:boost::interprocess::winapi::IUnknown_BIPC	access:public	signature:( const GUID_BIPC &riid, void **ppvObject)
QueryObjectSink	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall QueryObjectSink($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( long lFlags, void **ppResponseHandler)
QueryPerformanceCounter	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int  __stdcall QueryPerformanceCounter(__int64 *lpPerformanceCount);$/;"	p	namespace:boost::interprocess::winapi	signature:(__int64 *lpPerformanceCount)
RPC_C_AUTHN_DEFAULT_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long RPC_C_AUTHN_DEFAULT_BIPC = 0xffffffffL;$/;"	m	namespace:boost::interprocess::winapi
RPC_C_AUTHN_LEVEL_PKT_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long RPC_C_AUTHN_LEVEL_PKT_BIPC = 4;$/;"	m	namespace:boost::interprocess::winapi
RPC_C_AUTHZ_DEFAULT_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long RPC_C_AUTHZ_DEFAULT_BIPC = 0xffffffffL;$/;"	m	namespace:boost::interprocess::winapi
RPC_C_IMP_LEVEL_IMPERSONATE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long RPC_C_IMP_LEVEL_IMPERSONATE_BIPC = 3;$/;"	m	namespace:boost::interprocess::winapi
RPC_E_CHANGED_MODE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long RPC_E_CHANGED_MODE_BIPC = 0x80010106L;$/;"	m	namespace:boost::interprocess::winapi
RPC_E_TOO_LATE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long RPC_E_TOO_LATE_BIPC = 0x80010119L;$/;"	m	namespace:boost::interprocess::winapi
ReadFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall ReadFile(void *hnd, void *buffer, unsigned long bytes_to_read, unsigned long *bytes_read, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, void *buffer, unsigned long bytes_to_read, unsigned long *bytes_read, interprocess_overlapped* overlapped)
RegCloseKey	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall RegCloseKey(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
RegCloseKey_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegCloseKey_t)(void *);$/;"	t	namespace:boost::interprocess::winapi
RegOpenKeyExA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall RegOpenKeyExA(void *, const char *, unsigned long, unsigned long, void **);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, const char *, unsigned long, unsigned long, void **)
RegOpenKeyEx_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegOpenKeyEx_t)(void *, const char *, unsigned long, unsigned long, void **);$/;"	t	namespace:boost::interprocess::winapi
RegQueryValueExA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall RegQueryValueExA(void *, const char *, unsigned long*, unsigned long*, unsigned char *, unsigned long*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, const char *, unsigned long*, unsigned long*, unsigned char *, unsigned long*)
RegQueryValueEx_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegQueryValueEx_t)(void *, const char *, unsigned long*, unsigned long*, unsigned char *, unsigned long*);$/;"	t	namespace:boost::interprocess::winapi
RegionSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  RegionSize;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
Release	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual unsigned long __stdcall Release(void) = 0;$/;"	p	struct:boost::interprocess::winapi::IUnknown_BIPC	access:public	signature:(void)
ReleaseMutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall ReleaseMutex(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
ReleaseSemaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall ReleaseSemaphore(void *, long, long *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, long, long *)
RemoveDirectoryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall RemoveDirectoryA(const char *lpPathName);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *lpPathName)
Replace	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   int Replace;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
Reserved1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Reserved1[SystemTimeOfDayInfoLength];$/;"	m	union:boost::interprocess::winapi::system_timeofday_information	access:public
Reset	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Reset( void) = 0;$/;"	p	struct:boost::interprocess::winapi::IEnumWbemClassObject_BIPC	access:public	signature:( void)
Revision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Revision;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
RootDir	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *RootDir;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
RootDirectory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void * RootDirectory;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
RtlAppendUnicodeToString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *RtlAppendUnicodeToString_t)(unicode_string_t *Destination, const wchar_t *Source);$/;"	t	namespace:boost::interprocess::winapi
RtlCreateUnicodeStringFromAsciiz_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *RtlCreateUnicodeStringFromAsciiz_t)(unicode_string_t *, const char *);$/;"	t	namespace:boost::interprocess::winapi
RtlFreeUnicodeString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef void (__stdcall *RtlFreeUnicodeString_t)(unicode_string_t *);$/;"	t	namespace:boost::interprocess::winapi
RtlInitUnicodeString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef void (__stdcall *RtlInitUnicodeString_t)( unicode_string_t *, const wchar_t * );$/;"	t	namespace:boost::interprocess::winapi
SEMAPHORE	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   enum type { MUTEX, SEMAPHORE };$/;"	e	enum:boost::interprocess::ipcdetail::sync_handles::type
SLEEP	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::ipcdetail::spin_condition::__anon12
S_FALSE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long S_FALSE_BIPC = 1;$/;"	m	namespace:boost::interprocess::winapi
S_OK_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long S_OK_BIPC = 0L;$/;"	m	namespace:boost::interprocess::winapi
Sacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_acl *Sacl;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
Sbz1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char  Sbz1;$/;"	m	struct:boost::interprocess::winapi::interprocess_acl	access:public
Sbz1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Sbz1;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
Sbz2	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Sbz2;$/;"	m	struct:boost::interprocess::winapi::interprocess_acl	access:public
SecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *SecurityDescriptor;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
SecurityQualityOfService	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *SecurityQualityOfService;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
SetEndOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetEndOfFile(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
SetFilePointerEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetFilePointerEx(void *, __int64 distance, __int64 *new_file_pointer, unsigned long move_method);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)
SetFileValidData	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetFileValidData(void *, __int64 size);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 size)
SetLastError	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall SetLastError(unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long)
SetSecurityDescriptorDacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetSecurityDescriptorDacl(interprocess_security_descriptor *pSecurityDescriptor, int bDaclPresent, interprocess_acl *pDacl, int bDaclDefaulted);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_descriptor *pSecurityDescriptor, int bDaclPresent, interprocess_acl *pDacl, int bDaclDefaulted)
SetValue	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall SetValue($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, wchar_variant *pValue)
SizeHolder	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct SizeHolder$/;"	s	class:boost::interprocess::rbtree_best_fit	access:private
Skip	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Skip($/;"	p	struct:boost::interprocess::winapi::IEnumWbemClassObject_BIPC	access:public	signature:( long lTimeout, unsigned long nCount)
Sleep	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall Sleep(unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long)
SpawnDerivedClass	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall SpawnDerivedClass($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, IWbemClassObject_BIPC **ppNewClass)
SpawnInstance	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall SpawnInstance($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, IWbemClassObject_BIPC **ppNewInstance)
State	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  State;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
Status	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      long Status;$/;"	m	union:boost::interprocess::winapi::io_status_block_t::__anon9	access:public
StrSize	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   static const std::size_t StrSize        = LengthOfGlobal + (sizeof(sync_id)*2+1);$/;"	m	class:boost::interprocess::ipcdetail::sync_handles	access:private
SwitchToThread	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SwitchToThread();$/;"	p	namespace:boost::interprocess::winapi	signature:()
SystemTimeOfDayInfoLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long SystemTimeOfDayInfoLength  = 48;$/;"	m	namespace:boost::interprocess::winapi
TreeHook	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      , bi::link_mode<bi::normal_link> >::type           TreeHook;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
Type	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  Type;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
Uninitialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static const ::boost::uint32_t Uninitialized       = 0u;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
UninitializedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      UninitializedSegment,$/;"	e	enum:boost::interprocess::ipcdetail::managed_open_or_create_impl::__anon1
UnlockFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnlockFile(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high)
UnlockFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnlockFileEx(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped)
UnmapViewOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnmapViewOfFile(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type UsableByPreviousChunk  = MemoryAlgorithm::UsableByPreviousChunk;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type UsableByPreviousChunk = 0;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type UsableByPreviousChunk   = sizeof(size_type);$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
VP	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef VoidPointer VP;$/;"	t	class:boost::interprocess::intrusive_ptr	access:private
VariantClear	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall VariantClear(wchar_variant * pvarg);$/;"	p	namespace:boost::interprocess::winapi	signature:(wchar_variant * pvarg)
VirtualProtect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall VirtualProtect (void *, std::size_t, unsigned long, unsigned long *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, std::size_t, unsigned long, unsigned long *)
VirtualUnlock	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall VirtualUnlock (void *, std::size_t);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, std::size_t)
WBEM_FLAG_FORWARD_ONLY_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long WBEM_FLAG_FORWARD_ONLY_BIPC = 0x20;$/;"	m	namespace:boost::interprocess::winapi
WBEM_FLAG_RETURN_IMMEDIATELY_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long WBEM_FLAG_RETURN_IMMEDIATELY_BIPC = 0x10;$/;"	m	namespace:boost::interprocess::winapi
WBEM_FLAG_RETURN_WHEN_COMPLETE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long WBEM_FLAG_RETURN_WHEN_COMPLETE_BIPC = 0x0;$/;"	m	namespace:boost::interprocess::winapi
WBEM_INFINITE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long WBEM_INFINITE_BIPC = 0xffffffffL;$/;"	m	namespace:boost::interprocess::winapi
WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	18;"	d
WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	36;"	d
WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/ptime_wrk.hpp	18;"	d
WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/ptime_wrk.hpp	27;"	d
WaitForSingleObject	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall WaitForSingleObject(void *, unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, unsigned long)
WriteFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall WriteFile(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)
_	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct two {char _[2];};$/;"	m	struct:boost::interprocess::ipcdetail::two	access:public
_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/detail/config_begin.hpp	18;"	d
_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/detail/config_end.hpp	14;"	d
_diff	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::ptrdiff_t _diff(const intersegment_ptr<T2> &other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &other) const
_equal	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool _equal(const intersegment_ptr<T2>&other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2>&other) const
_internal_assign	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void _internal_assign(const ipcdetail::shared_count<Y, A, D> & pn2)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(const ipcdetail::shared_count<Y, A, D> & pn2)
_internal_less	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool _internal_less(shared_ptr<T2, A2, Deleter2> const & rhs) const$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<T2, A2, Deleter2> const & rhs) const
_internal_less	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   bool _internal_less(weak_ptr<T2, A2, D2> const & rhs) const$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<T2, A2, D2> const & rhs) const
_internal_weak_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   mutable weak_ptr<element_type, A, D> _internal_weak_this;$/;"	m	class:boost::interprocess::enable_shared_from_this	access:public
_interprocess_security_descriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef struct _interprocess_security_descriptor$/;"	s	namespace:boost::interprocess::winapi
_less	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool _less(const intersegment_ptr<T2> &other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &other) const
abs_time	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(upgradable_lock<T>) upgr, boost::posix_time::ptime &abs_time$/;"	m	class:boost::interprocess::scoped_lock	access:public
accept_ownership	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const accept_ownership_type  accept_ownership = accept_ownership_type();$/;"	m	namespace:boost::interprocess
accept_ownership_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct accept_ownership_type{};$/;"	s	namespace:boost::interprocess
acquire_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool acquire_file_lock(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
acquire_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool acquire_file_lock_sharable(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool$/;"	f	class:boost::interprocess::adaptive_pool	access:public	signature:(const adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::adaptive_pool	access:public	signature:(SegmentManager *segment_mngr)
adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::adaptive_pool_base
adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base<Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base(const adaptive_pool_base &other)$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base &other)
adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:(segment_manager *segment_mngr)
adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool_base$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:node_pool_allocation_impl
adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_v1$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_v1	access:public	signature:(const adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_v1(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr)
adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:adaptive_pool_base
add_const_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_const_reference$/;"	s	namespace:boost::interprocess::ipcdetail
add_const_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_const_reference<T&>$/;"	s	namespace:boost::interprocess::ipcdetail
add_leading_slash	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void add_leading_slash(const char *name, std::string &new_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name, std::string &new_name)
add_ref_copy	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    void add_ref_copy()$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
add_ref_lock	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    bool add_ref_lock() \/\/ true on success$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
add_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_reference$/;"	s	namespace:boost::interprocess::ipcdetail
add_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_reference<T&>$/;"	s	namespace:boost::interprocess::ipcdetail
add_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_reference<const void>$/;"	s	namespace:boost::interprocess::ipcdetail
add_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_reference<void>$/;"	s	namespace:boost::interprocess::ipcdetail
addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^         void *addr;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_group_t::segment_data	access:public
addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void * addr;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
address	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   const_pointer address(const_reference value) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const_reference value) const
address	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer address(reference value) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(reference value) const
address	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const_pointer address(const_reference value) const$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(const_reference value) const
address	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer address(reference value) const$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(reference value) const
address_less	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   struct address_less$/;"	s	class:boost::interprocess::ipcdetail::sync_handles	access:private
address_of	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void *address_of(std::size_t segment_id)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(std::size_t segment_id)
advance	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void advance(typename Iterator::difference_type n)$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(typename Iterator::difference_type n)
advanced_sem_op	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_op(int id, int value, bool undo = true)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id, int value, bool undo = true)
advanced_sem_open_or_create	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_open_or_create(::key_t key, int initval, int &semid, int perm)$/;"	f	namespace:boost::interprocess::xsi	signature:(::key_t key, int initval, int &semid, int perm)
advanced_sem_rm	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_rm(int id)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id)
advice_dontneed	/usr/include/boost/interprocess/mapped_region.hpp	/^      advice_dontneed$/;"	e	enum:boost::interprocess::mapped_region::advice_types
advice_normal	/usr/include/boost/interprocess/mapped_region.hpp	/^      advice_normal,$/;"	e	enum:boost::interprocess::mapped_region::advice_types
advice_random	/usr/include/boost/interprocess/mapped_region.hpp	/^      advice_random,$/;"	e	enum:boost::interprocess::mapped_region::advice_types
advice_sequential	/usr/include/boost/interprocess/mapped_region.hpp	/^      advice_sequential,$/;"	e	enum:boost::interprocess::mapped_region::advice_types
advice_types	/usr/include/boost/interprocess/mapped_region.hpp	/^   enum advice_types{ $/;"	g	class:boost::interprocess::mapped_region	access:public
advice_willneed	/usr/include/boost/interprocess/mapped_region.hpp	/^      advice_willneed,$/;"	e	enum:boost::interprocess::mapped_region::advice_types
advise	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool advise(advice_types advise);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(advice_types advise)
advise	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::advise(advice_types advice)$/;"	f	class:boost::interprocess::mapped_region	signature:(advice_types advice)
advise	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::advise(advice_types)$/;"	f	class:boost::interprocess::mapped_region	signature:(advice_types)
algo_impl_t	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef ipcdetail::memory_algorithm_common<simple_seq_fit_impl> algo_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
algo_impl_t	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef ipcdetail::memory_algorithm_common<rbtree_best_fit> algo_impl_t;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
algo_type	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   typedef ipcdetail::condition_algorithm_8a<ConditionMembers> algo_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:private
algo_type	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   typedef ipcdetail::condition_any_algorithm<ConditionAnyMembers> algo_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:private
align	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t align      = std::size_t(1) << align_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
align_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t align_bits = 12;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
aligner	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      ::boost::detail::max_align aligner;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_common::mem_holder_t	access:public
alignment	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   std::size_t alignment;$/;"	m	struct:boost::interprocess::ipcdetail::in_place_interface	access:public
alignment_helper	/usr/include/boost/interprocess/offset_ptr.hpp	/^         >::type alignment_helper;$/;"	m	union:boost::interprocess::ipcdetail::offset_ptr_internal	access:public
all_memory_deallocated	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool all_memory_deallocated()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool all_memory_deallocated()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
alloc	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      allocator_type alloc;$/;"	m	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public
alloc_ptr_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^         rebind_pointer<segment_manager>::type          alloc_ptr_t;$/;"	t	class:boost::interprocess::allocator	access:private
alloc_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char alloc_type() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
alloc_version	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^      boost::interprocess::version<Allocator>::value>                   alloc_version;$/;"	t	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public
allocate	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer allocate(size_type count, cvoid_ptr hint = 0)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(size_type count, cvoid_ptr hint = 0)
allocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate(size_type count, cvoid_pointer hint = 0)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(size_type count, cvoid_pointer hint = 0)
allocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate(size_type count, cvoid_pointer hint = 0)$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:(size_type count, cvoid_pointer hint = 0)
allocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void* allocate             (size_type nbytes)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type nbytes)
allocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void* allocate             (size_type nbytes, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type nbytes, std::nothrow_t nothrow)
allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   void* allocate             (size_type nbytes)$/;"	f	class:boost::interprocess::multi_simple_seq_fit	access:public	signature:(size_type nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocate(size_type nbytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* allocate             (size_type nbytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocate(size_type nbytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* allocate             (size_type nbytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocate(size_type nbytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* allocate             (size_type nbytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type nbytes)
allocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate (size_type nbytes, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type nbytes, std::nothrow_t)
allocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate(size_type nbytes)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type nbytes)
allocate_aligned	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void * allocate_aligned (size_type nbytes, size_type alignment, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type nbytes, size_type alignment, std::nothrow_t nothrow)
allocate_aligned	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void * allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type nbytes, size_type alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void* allocate_aligned$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, size_type nbytes, size_type alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes, size_type alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* allocate_aligned     (size_type nbytes, size_type alignment);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type nbytes, size_type alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes, size_type alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* allocate_aligned     (size_type nbytes, size_type alignment);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type nbytes, size_type alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type nbytes, size_type alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* allocate_aligned     (size_type nbytes, size_type alignment);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type nbytes, size_type alignment)
allocate_aligned	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate_aligned (size_type nbytes, size_type alignment, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type nbytes, size_type alignment, std::nothrow_t)
allocate_aligned	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type nbytes, size_type alignment)
allocate_individual	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void allocate_individual(size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(size_type num_elements, multiallocation_chain &chain)
allocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void allocate_individual(size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(size_type num_elements, multiallocation_chain &chain)
allocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void allocate_individual(size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:(size_type num_elements, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void allocate_many(const size_type *elem_sizes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const size_type *elem_sizes, size_type n_elements, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void allocate_many(size_type elem_size, size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(size_type elem_size, size_type num_elements, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void allocate_many(const size_type *elem_sizes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(const size_type *elem_sizes, size_type n_elements, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void allocate_many(size_type elem_size, size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(size_type elem_size, size_type num_elements, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void allocate_many(const size_type *element_lengths, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const size_type *element_lengths, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void allocate_many(size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void allocate_many(std::nothrow_t, const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(std::nothrow_t, const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void allocate_many(std::nothrow_t, size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(std::nothrow_t, size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void allocate_many$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:( MemoryAlgorithm *memory_algo , const size_type *elem_sizes , size_type n_elements , size_type sizeof_element , multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void allocate_many$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void allocate_many(const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void allocate_many(size_type elem_bytes, size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type elem_bytes, size_type num_elements, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void allocate_many(const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::rbtree_best_fit	access:public	signature:(const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void allocate_many(size_type elem_bytes, size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type elem_bytes, size_type num_elements, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void allocate_many(const size_type *element_lengths, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(const size_type *element_lengths, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void allocate_many(size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void allocate_many(std::nothrow_t, const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::nothrow_t, const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void allocate_many(std::nothrow_t, size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::nothrow_t, size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)
allocate_new	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type allocate_new       = boost::container::allocate_new;$/;"	m	namespace:boost::interprocess
allocate_node	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void *allocate_node()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
allocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void allocate_nodes(const size_type n, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:(const size_type n, multiallocation_chain &chain)
allocate_one	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::allocator	access:public	signature:()
allocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:()
allocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:()
allocation_command	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      allocation_command(boost::interprocess::allocation_type command,$/;"	f	class:boost::interprocess::allocator	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse = 0)
allocation_command	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      allocation_command(boost::interprocess::allocation_type command,$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse = 0)
allocation_command	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr = 0)
allocation_command	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, void *reuse_ptr = 0, size_type backwards_multiple = 1)
allocation_command	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   size_type min_size,$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, size_type min_size, size_type preferred_size,size_type &received_size, void *reuse_ptr, size_type backwards_multiple)
allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr = 0)
allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr)
allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr = 0)
allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr)
allocation_command	/usr/include/boost/interprocess/segment_manager.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr = 0)
allocation_type	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^typedef int allocation_type;$/;"	t	namespace:boost::interprocess
allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(const allocator &other)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const allocator &other)
allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(const allocator<T2, SegmentManager> &other)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const allocator<T2, SegmentManager> &other)
allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(segment_manager *segment_mngr)
allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^class allocator$/;"	c	namespace:boost::interprocess
allocator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   struct allocator$/;"	s	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
allocator	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct allocator$/;"	s	class:boost::interprocess::segment_manager	access:public
allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      allocator_holder(segment_manager_base *mngr)$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public	signature:(segment_manager_base *mngr)
allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      iunordered_set_index_aux<MapConfig>::allocator_holder    allocator_holder;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   struct allocator_holder$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	access:public
allocator_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^                    ,segment_manager_base>   allocator_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
allocator_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      <bucket_type, segment_manager_base>             allocator_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
allocator_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      iunordered_set_index_aux<MapConfig>::allocator_type      allocator_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
allocator_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^         segment_manager_base>                     allocator_type;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
allocator_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^                  segment_manager_base>      allocator_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
allocator_v1	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef ipcdetail::integral_constant<unsigned, 1>     allocator_v1;$/;"	t	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public
allocator_v2	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef ipcdetail::integral_constant<unsigned, 2>     allocator_v2;$/;"	t	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public
already_exists_error	/usr/include/boost/interprocess/errors.hpp	/^   already_exists_error,$/;"	e	enum:boost::interprocess::error_code_t
anonymous_instance	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^static const ipcdetail::anonymous_instance_t   * anonymous_instance = 0;$/;"	m	namespace:boost::interprocess
anonymous_instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^typedef instance_t<anonymous_type>  anonymous_instance_t;$/;"	t	namespace:boost::interprocess::ipcdetail
anonymous_shared_memory	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^anonymous_shared_memory(std::size_t size, void *address = 0)$/;"	f	namespace:boost::interprocess	signature:(std::size_t size, void *address = 0)
anonymous_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
apply_gmem_erase_logic	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static void apply_gmem_erase_logic(const char *filepath, const char *filename)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private	signature:(const char *filepath, const char *filename)
apply_gmem_erase_logic	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static void apply_gmem_erase_logic(const char *, const char *){}$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(const char *, const char *)
args_	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   tuple<Args&...> args_;$/;"	m	struct:boost::interprocess::ipcdetail::CtorNArg	access:private
array_allocation_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class array_allocation_impl$/;"	c	namespace:boost::interprocess::ipcdetail
array_construct	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^inline void array_construct(void *mem, std::size_t num, in_place_interface &table)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(void *mem, std::size_t num, in_place_interface &table)
assert_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void assert_alignment(const void *ptr)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(const void *ptr)
assert_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void assert_alignment(size_type uint_ptr)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(size_type uint_ptr)
atentry_work	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void atentry_work()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private	signature:()
atexit_work	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void atexit_work()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private	signature:()
atomic_add_unless32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline bool atomic_add_unless32$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem, boost::uint32_t value, boost::uint32_t unless_this)
atomic_cas32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_cas32$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem, boost::uint32_t with, boost::uint32_t cmp)
atomic_cas32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_cas32$/;"	p	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem, boost::uint32_t with, boost::uint32_t cmp)
atomic_dec32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_dec32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem)
atomic_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void atomic_func(Func &f)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(Func &f)
atomic_func	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static void atomic_func(managed_global_memory &map, F &f)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(managed_global_memory &map, F &f)
atomic_func	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static void atomic_func(windows_semaphore_based_map &map, F &f)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(windows_semaphore_based_map &map, F &f)
atomic_func	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   void atomic_func(F &f)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:(F &f)
atomic_func	/usr/include/boost/interprocess/segment_manager.hpp	/^   void atomic_func(Func &f)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(Func &f)
atomic_inc32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_inc32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem)
atomic_inc32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_inc32(volatile boost::uint32_t *mem);$/;"	p	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem)
atomic_read32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_read32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem)
atomic_read32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_read32(volatile boost::uint32_t *mem);$/;"	p	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem)
atomic_write32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline void atomic_write32(volatile boost::uint32_t *mem, boost::uint32_t val)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem, boost::uint32_t val)
atomic_write32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline void atomic_write32(volatile boost::uint32_t *mem, boost::uint32_t val);$/;"	p	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem, boost::uint32_t val)
aux_pointer_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename segment_manager::void_pointer  aux_pointer_t;$/;"	t	class:boost::interprocess::allocator	access:private
bInheritHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   int bInheritHandle;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
bad_alloc	/usr/include/boost/interprocess/exceptions.hpp	/^   bad_alloc() : interprocess_exception("::boost::interprocess::bad_alloc"){}$/;"	f	class:boost::interprocess::bad_alloc	access:public	signature:()
bad_alloc	/usr/include/boost/interprocess/exceptions.hpp	/^class bad_alloc : public interprocess_exception$/;"	c	namespace:boost::interprocess	inherits:interprocess_exception
bad_weak_ptr	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^class bad_weak_ptr$/;"	c	namespace:boost::interprocess	inherits:std::exception
barrier	/usr/include/boost/interprocess/sync/spin/interprocess_barrier.hpp	/^inline barrier::barrier(unsigned int count)$/;"	f	class:boost::interprocess::barrier	signature:(unsigned int count)
barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      barrier_initializer(pthread_barrier_t &mut,$/;"	f	class:boost::interprocess::ipcdetail::barrier_initializer	access:public	signature:(pthread_barrier_t &mut, pthread_barrierattr_t &mut_attr, int count)
barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class barrier_initializer$/;"	c	namespace:boost::interprocess::ipcdetail
barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      barrierattr_wrapper()$/;"	f	struct:boost::interprocess::ipcdetail::barrierattr_wrapper	access:public	signature:()
barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct barrierattr_wrapper$/;"	s	namespace:boost::interprocess::ipcdetail
base	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   Iterator & base()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
base	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   const Iterator & base() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
base2_t	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef typename intermodule_types::template open_or_create<Device, FileBased>::type base2_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:private
base2_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef typename ipcdetail::shmem_open_or_create<AllocationAlgorithm>::type                     base2_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
base2_t	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   typedef typename ipcdetail::xsishmem_open_or_create<AllocationAlgorithm>::type base2_t;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public
base_address	/usr/include/boost/interprocess/detail/win32_api.hpp	/^  void *          base_address;$/;"	m	struct:boost::interprocess::winapi::interprocess_section_basic_information	access:public
base_constants_t	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   struct base_constants_t$/;"	s	class:boost::interprocess::interprocess_sharable_mutex	access:private
base_constants_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct base_constants_t$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
base_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         < 1, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         < 2, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::adaptive_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         , 1> base_t;$/;"	t	class:boost::interprocess::ipcdetail::cached_adaptive_pool_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         , 2> base_t;$/;"	t	class:boost::interprocess::cached_adaptive_pool	access:public
base_t	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         , 1> base_t;$/;"	t	class:boost::interprocess::ipcdetail::cached_node_allocator_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         , 2> base_t;$/;"	t	class:boost::interprocess::cached_node_allocator	access:public
base_t	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::ipcdetail::shared_adaptive_node_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         , typename NodePool::segment_manager> base_t;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:private
base_t	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^      <typename SegmentManager::segment_manager_base_type> base_t;$/;"	t	class:boost::interprocess::ipcdetail::private_node_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::ipcdetail::shared_node_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         < 1, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         < 2, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::node_allocator	access:private
base_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         < 1, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         < 2, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::private_adaptive_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         < 1, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         < 2, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::private_node_allocator	access:private
base_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef PT                                      base_t;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
base_t	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:private
base_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      <CharType, MemoryAlgorithm, IndexType>             base_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
base_t	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^      <CharType, AllocationAlgorithm, IndexType>    base_t;$/;"	t	class:boost::interprocess::basic_managed_external_buffer	access:private
base_t	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^      <CharType, AllocationAlgorithm, IndexType>             base_t;$/;"	t	class:boost::interprocess::basic_managed_heap_memory	access:private
base_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^      ipcdetail::mfile_open_or_create<AllocationAlgorithm>::type::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:public
base_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^      ipcdetail::shmem_open_or_create<AllocationAlgorithm>::type::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
base_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^      ipcdetail::wshmem_open_or_create<AllocationAlgorithm>::type::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
base_t	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^      base2_t::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public
base_t	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^      basic_multiallocation_chain<VoidPointer> base_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_multiallocation_chain	access:private
base_t	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   typedef ipcdetail::simple_seq_fit_impl<MutexFamily, VoidPtr> base_t;$/;"	t	class:boost::interprocess::multi_simple_seq_fit	access:private
base_t	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^   typedef ipcdetail::simple_seq_fit_impl<MutexFamily, VoidPointer> base_t;$/;"	t	class:boost::interprocess::simple_seq_fit	access:private
base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_iostream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_bufferstream	access:private
base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_istream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:private
base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ostream<char_type, CharTraits>  base_t;$/;"	t	class:boost::interprocess::basic_obufferstream	access:private
base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_streambuf<char_type, traits_type>  base_t;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_iostream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_vectorstream	access:private
base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_istream<char_type, CharTraits>  base_t;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:private
base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ostream<char_type, CharTraits>  base_t;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:private
base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_streambuf<char_type, traits_type> base_t;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:private
base_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename index_aux::index_t    base_type;$/;"	t	class:boost::interprocess::flat_map_index	access:private
base_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename index_aux::index_t       base_type;$/;"	t	class:boost::interprocess::map_index	access:private
base_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename index_aux::index_t          base_type;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   explicit basic_bufferbuf(CharT *buf, std::size_t length,$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(CharT *buf, std::size_t length, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   explicit basic_bufferbuf(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_bufferbuf$/;"	c	namespace:boost::interprocess	inherits:std::basic_streambuf
basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferstream(CharT *buf, std::size_t length,$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(CharT *buf, std::size_t length, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferstream(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_bufferstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_iostream
basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_ibufferstream(const CharT *buf, std::size_t length,$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(const CharT *buf, std::size_t length, std::ios_base::openmode mode = std::ios_base::in)
basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_ibufferstream(std::ios_base::openmode mode = std::ios_base::in)$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in)
basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_ibufferstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_istream
basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                 basic_ios_t;$/;"	t	class:boost::interprocess::basic_bufferstream	access:private
basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                basic_ios_t;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:private
basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>      basic_ios_t;$/;"	t	class:boost::interprocess::basic_obufferstream	access:private
basic_ios_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                 basic_ios_t;$/;"	t	class:boost::interprocess::basic_vectorstream	access:private
basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ivectorstream(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in)
basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ivectorstream(std::ios_base::openmode mode = std::ios_base::in)$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in)
basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_ivectorstream$/;"	c	namespace:boost::interprocess	inherits:basic_vectorbuf,std::basic_istream
basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(create_only_t, void *addr, size_type size)
basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(open_only_t, void *addr, size_type size)
basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer()$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:()
basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^class basic_managed_external_buffer$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl
basic_managed_global_memory	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   basic_managed_global_memory (open_only_t open_only, const char* name,$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:public	signature:(open_only_t open_only, const char* name, const void *addr = 0)
basic_managed_global_memory	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   basic_managed_global_memory (open_or_create_t open_or_create,$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:public	signature:(open_or_create_t open_or_create, const char *name, size_type size, const void *addr = 0, const permissions& perm = permissions())
basic_managed_global_memory	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^class basic_managed_global_memory$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:basic_managed_memory_impl,intermodule_types::open_or_create::type
basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   basic_managed_heap_memory(){}$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:()
basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   basic_managed_heap_memory(size_type size)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(size_type size)
basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^class basic_managed_heap_memory$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_copy_on_write_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_only_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_only_t, const char* name, const void *addr = 0)
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_or_create_t,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_or_create_t, const char *name, size_type size, const void *addr = 0, const permissions &perm = permissions())
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_read_only_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file(create_only_t, const char *name,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(create_only_t, const char *name, size_type size, const void *addr = 0, const permissions &perm = permissions())
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^class basic_managed_mapped_file$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl
basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:()
basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl(const basic_managed_memory_impl &);$/;"	p	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:private	signature:(const basic_managed_memory_impl &)
basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^class basic_managed_memory_impl$/;"	c	namespace:boost::interprocess::ipcdetail
basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(create_only_t,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(create_only_t, const char *name, size_type size, const permissions &perm = permissions())
basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(open_only_t, const char *name)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(open_only_t, const char *name)
basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(open_or_create_t,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(open_or_create_t, const char *name, size_type size, const permissions &perm = permissions())
basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^class basic_managed_multi_shared_memory$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_copy_on_write_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_only_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_only_t, const char* name, const void *addr = 0)
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_or_create_t,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_or_create_t, const char *name, size_type size, const void *addr = 0, const permissions& perm = permissions())
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_read_only_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:()
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory(create_only_t, const char *name,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(create_only_t, const char *name, size_type size, const void *addr = 0, const permissions& perm = permissions())
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^class basic_managed_shared_memory$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl,ipcdetail::shmem_open_or_create::type
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(create_only_t, const char *name, size_type size, const void *addr = 0, const permissions &perm = permissions())
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_only_t, const char* name, const void *addr = 0)
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_or_create_t, const char *name, size_type size, const void *addr = 0, const permissions &perm = permissions())
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:()
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^class basic_managed_windows_shared_memory$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl
basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory (open_only_t, const xsi_key &key,$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(open_only_t, const xsi_key &key, const void *addr = 0)
basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory (open_or_create_t,$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(open_or_create_t, const xsi_key &key, std::size_t size, const void *addr = 0, const permissions& perm = permissions())
basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory (open_read_only_t, const xsi_key &key,$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(open_read_only_t, const xsi_key &key, const void *addr = 0)
basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:()
basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory(create_only_t, const xsi_key &key,$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(create_only_t, const xsi_key &key, std::size_t size, const void *addr = 0, const permissions& perm = permissions())
basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^class basic_managed_xsi_shared_memory$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl,ipcdetail::xsishmem_open_or_create::type
basic_multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   basic_multiallocation_chain()$/;"	f	class:boost::interprocess::ipcdetail::basic_multiallocation_chain	access:public	signature:()
basic_multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^class basic_multiallocation_chain$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:boost::container::container_detail::basic_multiallocation_chain
basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_obufferstream(CharT *buf, std::size_t length,$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(CharT *buf, std::size_t length, std::ios_base::openmode mode = std::ios_base::out)
basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_obufferstream(std::ios_base::openmode mode = std::ios_base::out)$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::out)
basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_obufferstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_ostream
basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ovectorstream(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::out)
basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ovectorstream(std::ios_base::openmode mode = std::ios_base::out)$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::out)
basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_ovectorstream$/;"	c	namespace:boost::interprocess	inherits:basic_vectorbuf,std::basic_ostream
basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf(const basic_vectorbuf&);$/;"	p	class:boost::interprocess::basic_vectorbuf	access:private	signature:(const basic_vectorbuf&)
basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   explicit basic_vectorbuf(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   explicit basic_vectorbuf(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_vectorbuf$/;"	c	namespace:boost::interprocess	inherits:std::basic_streambuf
basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorstream(const VectorParameter &param, std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorstream(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_vectorstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_iostream
beg	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t beg      :  begin_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
begin	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   const_iterator begin() const$/;"	f	class:boost::interprocess::null_index	access:public	signature:() const
begin	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   iterator begin()$/;"	f	class:boost::interprocess::null_index	access:public	signature:()
begin_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t begin_bits             = max_segment_size_bits - align_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
belongs_to_segment	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool belongs_to_segment (const void *ptr) const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const void *ptr) const
bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::ptrdiff_t bits  :  2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t bits     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::block_ctrl                block_ctrl;$/;"	t	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   struct block_ctrl$/;"	s	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   class block_ctrl$/;"	c	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
block_ctrl	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      block_ctrl()$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:public	signature:()
block_ctrl	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct block_ctrl$/;"	s	class:boost::interprocess::rbtree_best_fit	inherits:SizeHolder,TreeHook	access:private
block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^         rebind_pointer<block_ctrl>::type                         block_ctrl_ptr;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^         rebind_pointer<block_ctrl>::type                   block_ctrl_ptr;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^         rebind_pointer<block_ctrl>::type                   block_ctrl_ptr;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header(size_type val_bytes$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(size_type val_bytes ,size_type val_alignment ,unsigned char al_type ,std::size_t szof_char ,std::size_t num_char )
block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct block_header$/;"	s	namespace:boost::interprocess::ipcdetail
block_header_from_value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header<size_type> *block_header_from_value(T *value)$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(T *value)
block_header_from_value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header<size_type> *block_header_from_value(const void *value, std::size_t sz, std::size_t algn)$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(const void *value, std::size_t sz, std::size_t algn)
block_header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::block_header<size_type> block_header_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
block_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	g	class:boost::interprocess::message_queue_t	access:private
blocking	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue_t::block_t
bool_	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct bool_ : integral_constant<bool, C_>$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:integral_constant
boost	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/allocator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/containers_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/deque.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/flat_map.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/flat_set.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/list.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/map.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/pair.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/set.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/slist.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/stable_vector.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/string.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/vector.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/version_type.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/creation_tags.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/atomic.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^namespace boost { namespace interprocess { namespace ipcdetail {$/;"	n
boost	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/math_functions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/min_max.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/move.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/mpl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^      namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/type_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/utilities.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace boost  {$/;"	n
boost	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/errors.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/exceptions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/file_mapping.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^namespace boost { namespace interprocess {$/;"	n
boost	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^namespace boost { namespace interprocess {$/;"	n
boost	/usr/include/boost/interprocess/indexes/map_index.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/indexes/null_index.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace boost { namespace interprocess {$/;"	n
boost	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace boost{  namespace interprocess{$/;"	n
boost	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/permissions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/segment_manager.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/shared_memory_object.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n
boost	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n
boost	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/file_lock.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/lock_options.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/spin/interprocess_barrier.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/named_condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/xsi_key.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^namespace boost {$/;"	n
boost::has_trivial_constructor	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct has_trivial_constructor$/;"	s	namespace:boost	inherits:true_type
boost::has_trivial_constructor	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct has_trivial_constructor< boost::interprocess::offset_ptr<T, P, O, A> >$/;"	s	namespace:boost
boost::has_trivial_constructor::value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const bool value = true;$/;"	m	struct:boost::has_trivial_constructor	access:public
boost::has_trivial_destructor	/usr/include/boost/interprocess/allocators/allocator.hpp	/^struct has_trivial_destructor$/;"	s	namespace:boost
boost::has_trivial_destructor	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct has_trivial_destructor$/;"	s	namespace:boost	inherits:true_type
boost::has_trivial_destructor	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct has_trivial_destructor< boost::interprocess::offset_ptr<T, P, O, A> >$/;"	s	namespace:boost
boost::has_trivial_destructor::value	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   static const bool value = true;$/;"	m	struct:boost::has_trivial_destructor	access:public
boost::has_trivial_destructor::value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const bool value = true;$/;"	m	struct:boost::has_trivial_destructor	access:public
boost::interprocess	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/containers_fwd.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/deque.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/flat_map.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/flat_set.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/list.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/map.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/pair.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/set.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/slist.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/stable_vector.hpp	/^   namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/string.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/vector.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/version_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/creation_tags.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/atomic.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^namespace boost { namespace interprocess { namespace ipcdetail {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/math_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/min_max.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/move.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/mpl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^      namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/type_traits.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/utilities.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace interprocess  {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/errors.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/exceptions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/file_mapping.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/map_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/null_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace boost{  namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/permissions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/segment_manager.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/shared_memory_object.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/file_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/lock_options.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/spin/interprocess_barrier.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/named_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/xsi_key.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess::accept_ownership	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const accept_ownership_type  accept_ownership = accept_ownership_type();$/;"	m	namespace:boost::interprocess
boost::interprocess::accept_ownership_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct accept_ownership_type{};$/;"	s	namespace:boost::interprocess
boost::interprocess::adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::adaptive_pool_base
boost::interprocess::adaptive_pool::adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool$/;"	f	class:boost::interprocess::adaptive_pool	access:public	signature:(const adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::adaptive_pool::adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::adaptive_pool	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::adaptive_pool::base_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         < 2, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::adaptive_pool	access:private
boost::interprocess::adaptive_pool::rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::adaptive_pool	access:public
boost::interprocess::adaptive_pool::rebind::other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::adaptive_pool::rebind	access:public
boost::interprocess::adaptive_pool::version	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::adaptive_pool	access:public
boost::interprocess::allocate_new	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type allocate_new       = boost::container::allocate_new;$/;"	m	namespace:boost::interprocess
boost::interprocess::allocation_type	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^typedef int allocation_type;$/;"	t	namespace:boost::interprocess
boost::interprocess::allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^class allocator$/;"	c	namespace:boost::interprocess
boost::interprocess::allocator::address	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   const_pointer address(const_reference value) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const_reference value) const
boost::interprocess::allocator::address	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer address(reference value) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(reference value) const
boost::interprocess::allocator::alloc_ptr_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^         rebind_pointer<segment_manager>::type          alloc_ptr_t;$/;"	t	class:boost::interprocess::allocator	access:private
boost::interprocess::allocator::allocate	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer allocate(size_type count, cvoid_ptr hint = 0)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(size_type count, cvoid_ptr hint = 0)
boost::interprocess::allocator::allocate_individual	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void allocate_individual(size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(size_type num_elements, multiallocation_chain &chain)
boost::interprocess::allocator::allocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void allocate_many(const size_type *elem_sizes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const size_type *elem_sizes, size_type n_elements, multiallocation_chain &chain)
boost::interprocess::allocator::allocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void allocate_many(size_type elem_size, size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(size_type elem_size, size_type num_elements, multiallocation_chain &chain)
boost::interprocess::allocator::allocate_one	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::allocator	access:public	signature:()
boost::interprocess::allocator::allocation_command	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      allocation_command(boost::interprocess::allocation_type command,$/;"	f	class:boost::interprocess::allocator	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse = 0)
boost::interprocess::allocator::allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(const allocator &other)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const allocator &other)
boost::interprocess::allocator::allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(const allocator<T2, SegmentManager> &other)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const allocator<T2, SegmentManager> &other)
boost::interprocess::allocator::allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::allocator::aux_pointer_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename segment_manager::void_pointer  aux_pointer_t;$/;"	t	class:boost::interprocess::allocator	access:private
boost::interprocess::allocator::const_pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^         rebind_pointer<const T>::type          const_pointer;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::const_reference	/usr/include/boost/interprocess/allocators/allocator.hpp	/^                     <const value_type>::type   const_reference;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::construct	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void construct(const pointer &ptr, BOOST_FWD_REF(P) p)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr, BOOST_FWD_REF(P) p)
boost::interprocess::allocator::cvoid_ptr	/usr/include/boost/interprocess/allocators/allocator.hpp	/^         rebind_pointer<const void>::type          cvoid_ptr;$/;"	t	class:boost::interprocess::allocator	access:private
boost::interprocess::allocator::deallocate	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate(const pointer &ptr, size_type)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr, size_type)
boost::interprocess::allocator::deallocate_individual	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_individual(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(multiallocation_chain &chain)
boost::interprocess::allocator::deallocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_many(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(multiallocation_chain &chain)
boost::interprocess::allocator::deallocate_one	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &p)
boost::interprocess::allocator::destroy	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void destroy(const pointer &ptr)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr)
boost::interprocess::allocator::difference_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename segment_manager::difference_type         difference_type;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::get_segment_manager	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::allocator	access:public	signature:() const
boost::interprocess::allocator::max_size	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   size_type max_size() const$/;"	f	class:boost::interprocess::allocator	access:public	signature:() const
boost::interprocess::allocator::mp_mngr	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   alloc_ptr_t mp_mngr;$/;"	m	class:boost::interprocess::allocator	access:private
boost::interprocess::allocator::multiallocation_chain	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::operator =	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator& operator=(const allocator&);$/;"	p	class:boost::interprocess::allocator	access:private	signature:(const allocator&)
boost::interprocess::allocator::operator =	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator& operator=(const allocator<T2, SegmentManager2>&);$/;"	p	class:boost::interprocess::allocator	access:private	signature:(const allocator<T2, SegmentManager2>&)
boost::interprocess::allocator::pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^         rebind_pointer<T>::type                pointer;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::rebind	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::rebind::other	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      typedef allocator<T2, SegmentManager>     other;$/;"	t	struct:boost::interprocess::allocator::rebind	access:public
boost::interprocess::allocator::reference	/usr/include/boost/interprocess/allocators/allocator.hpp	/^                     <value_type>::type         reference;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::segment_manager	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::self_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef allocator<T, SegmentManager>   self_t;$/;"	t	class:boost::interprocess::allocator	access:private
boost::interprocess::allocator::size	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   size_type size(const pointer &p) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &p) const
boost::interprocess::allocator::size_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename segment_manager::size_type               size_type;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::swap	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::allocator	access:friend	signature:(self_t &alloc1, self_t &alloc2)
boost::interprocess::allocator::value_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef T                                    value_type;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::version	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef boost::interprocess::version_type<allocator, 2>   version;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::void_pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::already_exists_error	/usr/include/boost/interprocess/errors.hpp	/^   already_exists_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::anonymous_instance	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^static const ipcdetail::anonymous_instance_t   * anonymous_instance = 0;$/;"	m	namespace:boost::interprocess
boost::interprocess::anonymous_shared_memory	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^anonymous_shared_memory(std::size_t size, void *address = 0)$/;"	f	namespace:boost::interprocess	signature:(std::size_t size, void *address = 0)
boost::interprocess::anonymous_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
boost::interprocess::bad_alloc	/usr/include/boost/interprocess/exceptions.hpp	/^class bad_alloc : public interprocess_exception$/;"	c	namespace:boost::interprocess	inherits:interprocess_exception
boost::interprocess::bad_alloc::bad_alloc	/usr/include/boost/interprocess/exceptions.hpp	/^   bad_alloc() : interprocess_exception("::boost::interprocess::bad_alloc"){}$/;"	f	class:boost::interprocess::bad_alloc	access:public	signature:()
boost::interprocess::bad_alloc::what	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual const char* what() const throw()$/;"	f	class:boost::interprocess::bad_alloc	access:public	signature:() const
boost::interprocess::bad_weak_ptr	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^class bad_weak_ptr$/;"	c	namespace:boost::interprocess	inherits:std::exception
boost::interprocess::bad_weak_ptr::what	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^   virtual char const * what() const throw()$/;"	f	class:boost::interprocess::bad_weak_ptr	access:public	signature:() const
boost::interprocess::barrier::barrier	/usr/include/boost/interprocess/sync/spin/interprocess_barrier.hpp	/^inline barrier::barrier(unsigned int count)$/;"	f	class:boost::interprocess::barrier	signature:(unsigned int count)
boost::interprocess::barrier::wait	/usr/include/boost/interprocess/sync/spin/interprocess_barrier.hpp	/^inline bool barrier::wait()$/;"	f	class:boost::interprocess::barrier	signature:()
boost::interprocess::barrier::~barrier	/usr/include/boost/interprocess/sync/spin/interprocess_barrier.hpp	/^inline barrier::~barrier(){}$/;"	f	class:boost::interprocess::barrier	signature:()
boost::interprocess::basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_bufferbuf$/;"	c	namespace:boost::interprocess	inherits:std::basic_streambuf
boost::interprocess::basic_bufferbuf::base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_streambuf<char_type, traits_type>  base_t;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   explicit basic_bufferbuf(CharT *buf, std::size_t length,$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(CharT *buf, std::size_t length, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferbuf::basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   explicit basic_bufferbuf(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferbuf::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:() const
boost::interprocess::basic_bufferbuf::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buf, std::size_t length)$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(CharT *buf, std::size_t length)
boost::interprocess::basic_bufferbuf::char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef CharT                                         char_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::int_type                 int_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::m_buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   CharT *                 m_buffer;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
boost::interprocess::basic_bufferbuf::m_length	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::size_t             m_length;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
boost::interprocess::basic_bufferbuf::m_mode	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::ios_base::openmode m_mode;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
boost::interprocess::basic_bufferbuf::off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::off_type                 off_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::overflow	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type overflow(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(int_type c = CharTraits::eof())
boost::interprocess::basic_bufferbuf::pbackfail	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type pbackfail(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(int_type c = CharTraits::eof())
boost::interprocess::basic_bufferbuf::pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::pos_type                 pos_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::seekoff	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual pos_type seekoff(off_type off, std::ios_base::seekdir dir,$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(off_type off, std::ios_base::seekdir dir, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferbuf::seekpos	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual pos_type seekpos(pos_type pos, std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(pos_type pos, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferbuf::set_pointers	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void set_pointers()$/;"	f	class:boost::interprocess::basic_bufferbuf	access:private	signature:()
boost::interprocess::basic_bufferbuf::traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef CharTraits                                    traits_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::underflow	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type underflow()$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:()
boost::interprocess::basic_bufferbuf::~basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual ~basic_bufferbuf(){}$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:()
boost::interprocess::basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_bufferstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_iostream
boost::interprocess::basic_bufferstream::base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_iostream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_bufferstream	access:private
boost::interprocess::basic_bufferstream::basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferstream(CharT *buf, std::size_t length,$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(CharT *buf, std::size_t length, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferstream::basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferstream(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferstream::basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                 basic_ios_t;$/;"	t	class:boost::interprocess::basic_bufferstream	access:private
boost::interprocess::basic_bufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:() const
boost::interprocess::basic_bufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buf, std::size_t length)$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(CharT *buf, std::size_t length)
boost::interprocess::basic_bufferstream::char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
boost::interprocess::basic_bufferstream::int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
boost::interprocess::basic_bufferstream::m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_bufferstream	access:private
boost::interprocess::basic_bufferstream::off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
boost::interprocess::basic_bufferstream::pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
boost::interprocess::basic_bufferstream::rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:() const
boost::interprocess::basic_bufferstream::traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
boost::interprocess::basic_bufferstream::~basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_bufferstream(){}$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:()
boost::interprocess::basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_ibufferstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_istream
boost::interprocess::basic_ibufferstream::base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_istream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:private
boost::interprocess::basic_ibufferstream::basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_ibufferstream(const CharT *buf, std::size_t length,$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(const CharT *buf, std::size_t length, std::ios_base::openmode mode = std::ios_base::in)
boost::interprocess::basic_ibufferstream::basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_ibufferstream(std::ios_base::openmode mode = std::ios_base::in)$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in)
boost::interprocess::basic_ibufferstream::basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                basic_ios_t;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:private
boost::interprocess::basic_ibufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<const CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:() const
boost::interprocess::basic_ibufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(const CharT *buf, std::size_t length)$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(const CharT *buf, std::size_t length)
boost::interprocess::basic_ibufferstream::char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
boost::interprocess::basic_ibufferstream::int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
boost::interprocess::basic_ibufferstream::m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_ibufferstream	access:private
boost::interprocess::basic_ibufferstream::off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
boost::interprocess::basic_ibufferstream::pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
boost::interprocess::basic_ibufferstream::rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:() const
boost::interprocess::basic_ibufferstream::traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
boost::interprocess::basic_ibufferstream::~basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_ibufferstream(){};$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:()
boost::interprocess::basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_ivectorstream$/;"	c	namespace:boost::interprocess	inherits:basic_vectorbuf,std::basic_istream
boost::interprocess::basic_ivectorstream::base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_istream<char_type, CharTraits>  base_t;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:private
boost::interprocess::basic_ivectorstream::basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ivectorstream(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in)
boost::interprocess::basic_ivectorstream::basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ivectorstream(std::ios_base::openmode mode = std::ios_base::in)$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in)
boost::interprocess::basic_ivectorstream::char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear()$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:()
boost::interprocess::basic_ivectorstream::int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vectorbuf_t & m_buf() const{  return *this;  }$/;"	f	class:boost::interprocess::basic_ivectorstream	access:private	signature:() const
boost::interprocess::basic_ivectorstream::m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   vectorbuf_t &       m_buf()      {  return *this;  }$/;"	f	class:boost::interprocess::basic_ivectorstream	access:private	signature:()
boost::interprocess::basic_ivectorstream::off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:() const
boost::interprocess::basic_ivectorstream::reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size)$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(typename vector_type::size_type size)
boost::interprocess::basic_ivectorstream::swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(vector_type &vect)
boost::interprocess::basic_ivectorstream::traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:() const
boost::interprocess::basic_ivectorstream::vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::vectorbuf_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef basic_vectorbuf<CharVector, CharTraits>    vectorbuf_t;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:private
boost::interprocess::basic_ivectorstream::~basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_ivectorstream(){};$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:()
boost::interprocess::basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^class basic_managed_external_buffer$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl
boost::interprocess::basic_managed_external_buffer::base_t	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^      <CharType, AllocationAlgorithm, IndexType>    base_t;$/;"	t	class:boost::interprocess::basic_managed_external_buffer	access:private
boost::interprocess::basic_managed_external_buffer::basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(create_only_t, void *addr, size_type size)
boost::interprocess::basic_managed_external_buffer::basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(open_only_t, void *addr, size_type size)
boost::interprocess::basic_managed_external_buffer::basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer()$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:()
boost::interprocess::basic_managed_external_buffer::grow	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   void grow(size_type extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(size_type extra_bytes)
boost::interprocess::basic_managed_external_buffer::size_type	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_external_buffer	access:public
boost::interprocess::basic_managed_external_buffer::swap	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   void swap(basic_managed_external_buffer &other)$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(basic_managed_external_buffer &other)
boost::interprocess::basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^class basic_managed_heap_memory$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl
boost::interprocess::basic_managed_heap_memory::base_t	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^      <CharType, AllocationAlgorithm, IndexType>             base_t;$/;"	t	class:boost::interprocess::basic_managed_heap_memory	access:private
boost::interprocess::basic_managed_heap_memory::basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   basic_managed_heap_memory(){}$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:()
boost::interprocess::basic_managed_heap_memory::basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   basic_managed_heap_memory(size_type size)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(size_type size)
boost::interprocess::basic_managed_heap_memory::grow	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   bool grow(size_type extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(size_type extra_bytes)
boost::interprocess::basic_managed_heap_memory::m_heapmem	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   std::vector<char>  m_heapmem;$/;"	m	class:boost::interprocess::basic_managed_heap_memory	access:private
boost::interprocess::basic_managed_heap_memory::priv_close	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   void priv_close()$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:private	signature:()
boost::interprocess::basic_managed_heap_memory::size_type	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_heap_memory	access:public
boost::interprocess::basic_managed_heap_memory::swap	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   void swap(basic_managed_heap_memory &other)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(basic_managed_heap_memory &other)
boost::interprocess::basic_managed_heap_memory::~basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   ~basic_managed_heap_memory()$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:()
boost::interprocess::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^class basic_managed_mapped_file$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl
boost::interprocess::basic_managed_mapped_file::base_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^      ipcdetail::mfile_open_or_create<AllocationAlgorithm>::type::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:public
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_copy_on_write_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_only_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_only_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_or_create_t,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_or_create_t, const char *name, size_type size, const void *addr = 0, const permissions &perm = permissions())
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_read_only_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file(create_only_t, const char *name,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(create_only_t, const char *name, size_type size, const void *addr = 0, const permissions &perm = permissions())
boost::interprocess::basic_managed_mapped_file::char_ptr_holder_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:private
boost::interprocess::basic_managed_mapped_file::create_open_func_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef ipcdetail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:private
boost::interprocess::basic_managed_mapped_file::device_type	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef ipcdetail::file_wrapper device_type;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:public
boost::interprocess::basic_managed_mapped_file::find	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   std::pair<T*, size_type> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::basic_managed_mapped_file::flush	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   bool flush()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
boost::interprocess::basic_managed_mapped_file::get_this_pointer	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:private	signature:()
boost::interprocess::basic_managed_mapped_file::grow	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   static bool grow(const char *filename, size_type extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(const char *filename, size_type extra_bytes)
boost::interprocess::basic_managed_mapped_file::m_mfile	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typename ipcdetail::mfile_open_or_create<AllocationAlgorithm>::type m_mfile;$/;"	m	class:boost::interprocess::basic_managed_mapped_file	access:private
boost::interprocess::basic_managed_mapped_file::shrink_to_fit	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   static bool shrink_to_fit(const char *filename)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(const char *filename)
boost::interprocess::basic_managed_mapped_file::size_type	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:public
boost::interprocess::basic_managed_mapped_file::swap	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   void swap(basic_managed_mapped_file &other)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(basic_managed_mapped_file &other)
boost::interprocess::basic_managed_mapped_file::~basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   ~basic_managed_mapped_file()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
boost::interprocess::basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^class basic_managed_multi_shared_memory$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl
boost::interprocess::basic_managed_multi_shared_memory::base_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      <CharType, MemoryAlgorithm, IndexType>             base_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(create_only_t,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(create_only_t, const char *name, size_type size, const permissions &perm = permissions())
boost::interprocess::basic_managed_multi_shared_memory::basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(open_only_t, const char *name)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(open_only_t, const char *name)
boost::interprocess::basic_managed_multi_shared_memory::basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(open_or_create_t,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(open_or_create_t, const char *name, size_type size, const permissions &perm = permissions())
boost::interprocess::basic_managed_multi_shared_memory::close_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   struct close_func$/;"	s	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::close_func::close_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      close_func(self_t * const frontend)$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public	signature:(self_t * const frontend)
boost::interprocess::basic_managed_multi_shared_memory::close_func::mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      self_t * const    mp_frontend;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::close_func::operator ()	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void operator()(const mapped_region &region, bool last) const$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public	signature:(const mapped_region &region, bool last) const
boost::interprocess::basic_managed_multi_shared_memory::close_func::void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer   void_pointer;$/;"	t	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::create_open_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   struct create_open_func$/;"	s	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::DoCreate	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::DoOpen	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::DoOpenOrCreate	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::create_open_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      create_open_func(self_t * const    frontend,$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public	signature:(self_t * const frontend, type_t type, size_type segment_number)
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::get_min_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      std::size_t get_min_size() const$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public	signature:() const
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::m_segment_number	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      size_type         m_segment_number;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::m_type	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      type_t            m_type;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      self_t * const    mp_frontend;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::operator ()	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      bool operator()(void *addr, size_type size, bool created) const$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public	signature:(void *addr, size_type size, bool created) const
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	g	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer   void_pointer;$/;"	t	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::get_this_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:()
boost::interprocess::basic_managed_multi_shared_memory::group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   class group_services$/;"	c	class:boost::interprocess::basic_managed_multi_shared_memory	inherits:multi_segment_services	access:private
boost::interprocess::basic_managed_multi_shared_memory::group_services::create_new_segment	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual std::pair<void *, size_type> create_new_segment(size_type alloc_size)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(size_type alloc_size)
boost::interprocess::basic_managed_multi_shared_memory::group_services::frontend_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef basic_managed_multi_shared_memory             frontend_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
boost::interprocess::basic_managed_multi_shared_memory::group_services::get_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      segment_group_id get_group() const$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:() const
boost::interprocess::basic_managed_multi_shared_memory::group_services::get_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      size_type get_min_segment_size() const$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:() const
boost::interprocess::basic_managed_multi_shared_memory::group_services::group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      group_services(frontend_t *const frontend)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(frontend_t *const frontend)
boost::interprocess::basic_managed_multi_shared_memory::group_services::m_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      segment_group_id     m_group;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
boost::interprocess::basic_managed_multi_shared_memory::group_services::m_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      size_type            m_min_segment_size;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
boost::interprocess::basic_managed_multi_shared_memory::group_services::mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      frontend_t * const   mp_frontend;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
boost::interprocess::basic_managed_multi_shared_memory::group_services::result_type	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef std::pair<void *, size_type>                  result_type;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
boost::interprocess::basic_managed_multi_shared_memory::group_services::segment_group_id	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef typename void_pointer::segment_group_id       segment_group_id;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
boost::interprocess::basic_managed_multi_shared_memory::group_services::set_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void set_group(segment_group_id group)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(segment_group_id group)
boost::interprocess::basic_managed_multi_shared_memory::group_services::set_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void set_min_segment_size(size_type min_segment_size)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(size_type min_segment_size)
boost::interprocess::basic_managed_multi_shared_memory::group_services::update_segments	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual bool update_segments ()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:()
boost::interprocess::basic_managed_multi_shared_memory::group_services::void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer    void_pointer;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
boost::interprocess::basic_managed_multi_shared_memory::group_services::~group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual ~group_services(){}$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:()
boost::interprocess::basic_managed_multi_shared_memory::m_group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   group_services m_group_services;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::m_root_name	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   std::string    m_root_name;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::m_shmem_list	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   shmem_list_t   m_shmem_list;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::managed_impl	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      managed_open_or_create_impl<shared_memory_object, MemoryAlgorithm::Alignment, true, false>  managed_impl;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::priv_close	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   void priv_close()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:()
boost::interprocess::basic_managed_multi_shared_memory::priv_new_segment	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   bool  priv_new_segment(typename create_open_func::type_t type,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:(typename create_open_func::type_t type, size_type size, const void *addr, const permissions &perm)
boost::interprocess::basic_managed_multi_shared_memory::priv_open_or_create	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   bool  priv_open_or_create(typename create_open_func::type_t type,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:(typename create_open_func::type_t type, const char *name, size_type size, const permissions &perm)
boost::interprocess::basic_managed_multi_shared_memory::segment_group_id	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef typename void_pointer::segment_group_id       segment_group_id;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::self_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^               <CharType, MemoryAlgorithm, IndexType>    self_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::shmem_list_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef list<managed_impl> shmem_list_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::size_type	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef typename base_t::size_type                   size_type;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef typename MemoryAlgorithm::void_pointer        void_pointer;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::~basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   ~basic_managed_multi_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:()
boost::interprocess::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^class basic_managed_shared_memory$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl,ipcdetail::shmem_open_or_create::type
boost::interprocess::basic_managed_shared_memory::base2_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef typename ipcdetail::shmem_open_or_create<AllocationAlgorithm>::type                     base2_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
boost::interprocess::basic_managed_shared_memory::base_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^      ipcdetail::shmem_open_or_create<AllocationAlgorithm>::type::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_copy_on_write_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_only_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_only_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_or_create_t,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_or_create_t, const char *name, size_type size, const void *addr = 0, const permissions& perm = permissions())
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_read_only_t, const char* name,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:()
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory(create_only_t, const char *name,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(create_only_t, const char *name, size_type size, const void *addr = 0, const permissions& perm = permissions())
boost::interprocess::basic_managed_shared_memory::char_ptr_holder_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
boost::interprocess::basic_managed_shared_memory::create_open_func_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef ipcdetail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
boost::interprocess::basic_managed_shared_memory::device_type	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef shared_memory_object                    device_type;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:public
boost::interprocess::basic_managed_shared_memory::find	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   std::pair<T*, size_type> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::basic_managed_shared_memory::get_this_pointer	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:private	signature:()
boost::interprocess::basic_managed_shared_memory::grow	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   static bool grow(const char *shmname, size_type extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(const char *shmname, size_type extra_bytes)
boost::interprocess::basic_managed_shared_memory::shrink_to_fit	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   static bool shrink_to_fit(const char *shmname)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(const char *shmname)
boost::interprocess::basic_managed_shared_memory::size_type	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:public
boost::interprocess::basic_managed_shared_memory::swap	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   void swap(basic_managed_shared_memory &other)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(basic_managed_shared_memory &other)
boost::interprocess::basic_managed_shared_memory::~basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   ~basic_managed_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:()
boost::interprocess::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^class basic_managed_windows_shared_memory$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl
boost::interprocess::basic_managed_windows_shared_memory::base_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^      ipcdetail::wshmem_open_or_create<AllocationAlgorithm>::type::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(create_only_t, const char *name, size_type size, const void *addr = 0, const permissions &perm = permissions())
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_only_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_or_create_t, const char *name, size_type size, const void *addr = 0, const permissions &perm = permissions())
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:()
boost::interprocess::basic_managed_windows_shared_memory::char_ptr_holder_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
boost::interprocess::basic_managed_windows_shared_memory::create_open_func_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typedef ipcdetail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
boost::interprocess::basic_managed_windows_shared_memory::find	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   std::pair<T*, size_type> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::basic_managed_windows_shared_memory::get_this_pointer	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:private	signature:()
boost::interprocess::basic_managed_windows_shared_memory::m_wshm	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typename ipcdetail::wshmem_open_or_create<AllocationAlgorithm>::type m_wshm;$/;"	m	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
boost::interprocess::basic_managed_windows_shared_memory::size_type	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:public
boost::interprocess::basic_managed_windows_shared_memory::swap	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   void swap(basic_managed_windows_shared_memory &other)$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(basic_managed_windows_shared_memory &other)
boost::interprocess::basic_managed_windows_shared_memory::~basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   ~basic_managed_windows_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:()
boost::interprocess::basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^class basic_managed_xsi_shared_memory$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::basic_managed_memory_impl,ipcdetail::xsishmem_open_or_create::type
boost::interprocess::basic_managed_xsi_shared_memory::base2_t	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   typedef typename ipcdetail::xsishmem_open_or_create<AllocationAlgorithm>::type base2_t;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public
boost::interprocess::basic_managed_xsi_shared_memory::base_t	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^      base2_t::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public
boost::interprocess::basic_managed_xsi_shared_memory::basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory (open_only_t, const xsi_key &key,$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(open_only_t, const xsi_key &key, const void *addr = 0)
boost::interprocess::basic_managed_xsi_shared_memory::basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory (open_or_create_t,$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(open_or_create_t, const xsi_key &key, std::size_t size, const void *addr = 0, const permissions& perm = permissions())
boost::interprocess::basic_managed_xsi_shared_memory::basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory (open_read_only_t, const xsi_key &key,$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(open_read_only_t, const xsi_key &key, const void *addr = 0)
boost::interprocess::basic_managed_xsi_shared_memory::basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:()
boost::interprocess::basic_managed_xsi_shared_memory::basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory(create_only_t, const xsi_key &key,$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(create_only_t, const xsi_key &key, std::size_t size, const void *addr = 0, const permissions& perm = permissions())
boost::interprocess::basic_managed_xsi_shared_memory::char_ptr_holder_t	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:private
boost::interprocess::basic_managed_xsi_shared_memory::create_open_func_t	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   typedef ipcdetail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public
boost::interprocess::basic_managed_xsi_shared_memory::device_type	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   typedef xsi_shared_memory_file_wrapper device_type;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public
boost::interprocess::basic_managed_xsi_shared_memory::find	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   std::pair<T*, std::size_t> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::basic_managed_xsi_shared_memory::get_shmid	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   int get_shmid() const$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:() const
boost::interprocess::basic_managed_xsi_shared_memory::get_this_pointer	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:()
boost::interprocess::basic_managed_xsi_shared_memory::remove	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   static bool remove(int shmid)$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(int shmid)
boost::interprocess::basic_managed_xsi_shared_memory::size_type	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public
boost::interprocess::basic_managed_xsi_shared_memory::swap	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   void swap(basic_managed_xsi_shared_memory &other)$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(basic_managed_xsi_shared_memory &other)
boost::interprocess::basic_managed_xsi_shared_memory::~basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   ~basic_managed_xsi_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:()
boost::interprocess::basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_obufferstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_ostream
boost::interprocess::basic_obufferstream::base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ostream<char_type, CharTraits>  base_t;$/;"	t	class:boost::interprocess::basic_obufferstream	access:private
boost::interprocess::basic_obufferstream::basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>      basic_ios_t;$/;"	t	class:boost::interprocess::basic_obufferstream	access:private
boost::interprocess::basic_obufferstream::basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_obufferstream(CharT *buf, std::size_t length,$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(CharT *buf, std::size_t length, std::ios_base::openmode mode = std::ios_base::out)
boost::interprocess::basic_obufferstream::basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_obufferstream(std::ios_base::openmode mode = std::ios_base::out)$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::out)
boost::interprocess::basic_obufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:() const
boost::interprocess::basic_obufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buf, std::size_t length)$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(CharT *buf, std::size_t length)
boost::interprocess::basic_obufferstream::char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
boost::interprocess::basic_obufferstream::int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
boost::interprocess::basic_obufferstream::m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_obufferstream	access:private
boost::interprocess::basic_obufferstream::off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
boost::interprocess::basic_obufferstream::pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
boost::interprocess::basic_obufferstream::rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:() const
boost::interprocess::basic_obufferstream::traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
boost::interprocess::basic_obufferstream::~basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_obufferstream(){}$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:()
boost::interprocess::basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_ovectorstream$/;"	c	namespace:boost::interprocess	inherits:basic_vectorbuf,std::basic_ostream
boost::interprocess::basic_ovectorstream::base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ostream<char_type, CharTraits>  base_t;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:private
boost::interprocess::basic_ovectorstream::basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ovectorstream(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::out)
boost::interprocess::basic_ovectorstream::basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ovectorstream(std::ios_base::openmode mode = std::ios_base::out)$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::out)
boost::interprocess::basic_ovectorstream::char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vectorbuf_t & m_buf()const {  return *this;  }$/;"	f	class:boost::interprocess::basic_ovectorstream	access:private	signature:() const
boost::interprocess::basic_ovectorstream::m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   vectorbuf_t &       m_buf()      {  return *this;  }$/;"	f	class:boost::interprocess::basic_ovectorstream	access:private	signature:()
boost::interprocess::basic_ovectorstream::off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:() const
boost::interprocess::basic_ovectorstream::reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size)$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(typename vector_type::size_type size)
boost::interprocess::basic_ovectorstream::swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(vector_type &vect)
boost::interprocess::basic_ovectorstream::traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:() const
boost::interprocess::basic_ovectorstream::vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::vectorbuf_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef basic_vectorbuf<CharVector, CharTraits>    vectorbuf_t;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:private
boost::interprocess::basic_ovectorstream::~basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_ovectorstream(){}$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:()
boost::interprocess::basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_vectorbuf$/;"	c	namespace:boost::interprocess	inherits:std::basic_streambuf
boost::interprocess::basic_vectorbuf::base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_streambuf<char_type, traits_type> base_t;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:private
boost::interprocess::basic_vectorbuf::basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf(const basic_vectorbuf&);$/;"	p	class:boost::interprocess::basic_vectorbuf	access:private	signature:(const basic_vectorbuf&)
boost::interprocess::basic_vectorbuf::basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   explicit basic_vectorbuf(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorbuf::basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   explicit basic_vectorbuf(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorbuf::char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharVector::value_type   char_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:()
boost::interprocess::basic_vectorbuf::initialize_pointers	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void initialize_pointers()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:private	signature:()
boost::interprocess::basic_vectorbuf::int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::int_type     int_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::m_mode	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   std::ios_base::openmode m_mode;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
boost::interprocess::basic_vectorbuf::m_vect	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   mutable vector_type     m_vect;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
boost::interprocess::basic_vectorbuf::mp_high_water	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   mutable char_type*      mp_high_water;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
boost::interprocess::basic_vectorbuf::off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::off_type     off_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::operator =	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf & operator =(const basic_vectorbuf&);$/;"	p	class:boost::interprocess::basic_vectorbuf	access:private	signature:(const basic_vectorbuf&)
boost::interprocess::basic_vectorbuf::overflow	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type overflow(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(int_type c = CharTraits::eof())
boost::interprocess::basic_vectorbuf::pbackfail	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type pbackfail(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(int_type c = CharTraits::eof())
boost::interprocess::basic_vectorbuf::pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size)$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(typename vector_type::size_type size)
boost::interprocess::basic_vectorbuf::seekoff	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual pos_type seekoff(off_type off, std::ios_base::seekdir dir,$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(off_type off, std::ios_base::seekdir dir, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorbuf::seekpos	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual pos_type seekpos(pos_type pos, std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(pos_type pos, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorbuf::swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(vector_type &vect)
boost::interprocess::basic_vectorbuf::traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharTraits                        traits_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::underflow	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type underflow()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:()
boost::interprocess::basic_vectorbuf::vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:() const
boost::interprocess::basic_vectorbuf::vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                        vector_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::~basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual ~basic_vectorbuf(){}$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:()
boost::interprocess::basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_vectorstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_iostream
boost::interprocess::basic_vectorstream::base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_iostream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_vectorstream	access:private
boost::interprocess::basic_vectorstream::basic_ios_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                 basic_ios_t;$/;"	t	class:boost::interprocess::basic_vectorstream	access:private
boost::interprocess::basic_vectorstream::basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorstream(const VectorParameter &param, std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorstream::basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorstream(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorstream::char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear()$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:()
boost::interprocess::basic_vectorstream::int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_vectorstream	access:private
boost::interprocess::basic_vectorstream::off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:() const
boost::interprocess::basic_vectorstream::reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size)$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(typename vector_type::size_type size)
boost::interprocess::basic_vectorstream::swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(vector_type &vect)
boost::interprocess::basic_vectorstream::traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:() const
boost::interprocess::basic_vectorstream::vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::~basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_vectorstream(){}$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:()
boost::interprocess::bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferbuf<char>        bufferbuf;$/;"	t	namespace:boost::interprocess
boost::interprocess::bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferstream<char>     bufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::busy_error	/usr/include/boost/interprocess/errors.hpp	/^   busy_error,       \/\/ implies trying again might succeed$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^class cached_adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::cached_allocator_impl
boost::interprocess::cached_adaptive_pool::base_t	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         , 2> base_t;$/;"	t	class:boost::interprocess::cached_adaptive_pool	access:public
boost::interprocess::cached_adaptive_pool::cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool$/;"	f	class:boost::interprocess::cached_adaptive_pool	access:public	signature:(const cached_adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::cached_adaptive_pool::cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::cached_adaptive_pool	access:public	signature:(SegmentManager *segment_mngr, std::size_t max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
boost::interprocess::cached_adaptive_pool::rebind	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::cached_adaptive_pool	access:public
boost::interprocess::cached_adaptive_pool::rebind::other	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::cached_adaptive_pool::rebind	access:public
boost::interprocess::cached_adaptive_pool::version	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<cached_adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::cached_adaptive_pool	access:public
boost::interprocess::cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^class cached_node_allocator$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::cached_allocator_impl
boost::interprocess::cached_node_allocator::base_t	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         , 2> base_t;$/;"	t	class:boost::interprocess::cached_node_allocator	access:public
boost::interprocess::cached_node_allocator::cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator$/;"	f	class:boost::interprocess::cached_node_allocator	access:public	signature:(const cached_node_allocator<T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::cached_node_allocator::cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::cached_node_allocator	access:public	signature:(SegmentManager *segment_mngr, size_type max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
boost::interprocess::cached_node_allocator::rebind	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::cached_node_allocator	access:public
boost::interprocess::cached_node_allocator::rebind::other	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^      typedef cached_node_allocator<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::cached_node_allocator::rebind	access:public
boost::interprocess::cached_node_allocator::size_type	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   typedef typename base_t::size_type size_type;$/;"	t	class:boost::interprocess::cached_node_allocator	access:public
boost::interprocess::cached_node_allocator::version	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   typedef boost::interprocess::version_type<cached_node_allocator, 2>   version;$/;"	t	class:boost::interprocess::cached_node_allocator	access:public
boost::interprocess::const_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> const_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
boost::interprocess::const_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   const_pointer_cast(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)
boost::interprocess::const_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> const_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
boost::interprocess::copy_on_write	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , copy_on_write$/;"	e	enum:boost::interprocess::__anon2
boost::interprocess::corrupted_error	/usr/include/boost/interprocess/errors.hpp	/^   corrupted_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::create_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const create_only_t    create_only    = create_only_t();$/;"	m	namespace:boost::interprocess
boost::interprocess::create_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct create_only_t {};$/;"	s	namespace:boost::interprocess
boost::interprocess::defer_lock	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const defer_lock_type      defer_lock      = defer_lock_type();$/;"	m	namespace:boost::interprocess
boost::interprocess::defer_lock_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct defer_lock_type{};$/;"	s	namespace:boost::interprocess
boost::interprocess::deleter	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^class deleter$/;"	c	namespace:boost::interprocess
boost::interprocess::deleter::deleter	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   deleter(segment_manager_pointer pmngr)$/;"	f	class:boost::interprocess::deleter	access:public	signature:(segment_manager_pointer pmngr)
boost::interprocess::deleter::mp_mngr	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   segment_manager_pointer mp_mngr;$/;"	m	class:boost::interprocess::deleter	access:private
boost::interprocess::deleter::operator ()	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   void operator()(const pointer &p)$/;"	f	class:boost::interprocess::deleter	access:public	signature:(const pointer &p)
boost::interprocess::deleter::pointer	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^         rebind_pointer<T>::type                pointer;$/;"	t	class:boost::interprocess::deleter	access:public
boost::interprocess::deleter::segment_manager_pointer	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^         rebind_pointer<SegmentManager>::type                segment_manager_pointer;$/;"	t	class:boost::interprocess::deleter	access:private
boost::interprocess::dynamic_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> dynamic_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
boost::interprocess::dynamic_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   dynamic_pointer_cast(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)
boost::interprocess::dynamic_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> dynamic_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
boost::interprocess::ec_table	/usr/include/boost/interprocess/errors.hpp	/^static const ec_xlate ec_table[] =$/;"	m	namespace:boost::interprocess
boost::interprocess::ec_xlate	/usr/include/boost/interprocess/errors.hpp	/^struct ec_xlate$/;"	s	namespace:boost::interprocess
boost::interprocess::ec_xlate::ec	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   ec;$/;"	m	struct:boost::interprocess::ec_xlate	access:public
boost::interprocess::ec_xlate::sys_ec	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t sys_ec;$/;"	m	struct:boost::interprocess::ec_xlate	access:public
boost::interprocess::enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^class enable_shared_from_this$/;"	c	namespace:boost::interprocess
boost::interprocess::enable_shared_from_this::_internal_weak_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   mutable weak_ptr<element_type, A, D> _internal_weak_this;$/;"	m	class:boost::interprocess::enable_shared_from_this	access:public
boost::interprocess::enable_shared_from_this::element_type	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::enable_shared_from_this	access:public
boost::interprocess::enable_shared_from_this::enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:()
boost::interprocess::enable_shared_from_this::enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this(enable_shared_from_this const &)$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:(enable_shared_from_this const &)
boost::interprocess::enable_shared_from_this::operator =	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this & operator=(enable_shared_from_this const &)$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:(enable_shared_from_this const &)
boost::interprocess::enable_shared_from_this::shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   shared_ptr<T const, A, D> shared_from_this() const$/;"	f	class:boost::interprocess::enable_shared_from_this	access:public	signature:() const
boost::interprocess::enable_shared_from_this::shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   shared_ptr<T, A, D> shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:public	signature:()
boost::interprocess::enable_shared_from_this::~enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   ~enable_shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:()
boost::interprocess::error_code_t	/usr/include/boost/interprocess/errors.hpp	/^enum error_code_t$/;"	g	namespace:boost::interprocess
boost::interprocess::error_info	/usr/include/boost/interprocess/errors.hpp	/^struct error_info$/;"	s	namespace:boost::interprocess
boost::interprocess::error_info::error_info	/usr/include/boost/interprocess/errors.hpp	/^   error_info(error_code_t ec = other_error )$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(error_code_t ec = other_error )
boost::interprocess::error_info::error_info	/usr/include/boost/interprocess/errors.hpp	/^   error_info(native_error_t sys_err_code)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(native_error_t sys_err_code)
boost::interprocess::error_info::get_error_code	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   get_error_code()const$/;"	f	struct:boost::interprocess::error_info	access:public	signature:() const
boost::interprocess::error_info::get_native_error	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t get_native_error()const$/;"	f	struct:boost::interprocess::error_info	access:public	signature:() const
boost::interprocess::error_info::m_ec	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   m_ec;$/;"	m	struct:boost::interprocess::error_info	access:private
boost::interprocess::error_info::m_nat	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t m_nat;$/;"	m	struct:boost::interprocess::error_info	access:private
boost::interprocess::error_info::operator =	/usr/include/boost/interprocess/errors.hpp	/^   error_info & operator =(error_code_t ec)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(error_code_t ec)
boost::interprocess::error_info::operator =	/usr/include/boost/interprocess/errors.hpp	/^   error_info & operator =(native_error_t sys_err_code)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(native_error_t sys_err_code)
boost::interprocess::expand_bwd	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type expand_bwd         = boost::container::expand_bwd;$/;"	m	namespace:boost::interprocess
boost::interprocess::expand_fwd	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type expand_fwd         = boost::container::expand_fwd;$/;"	m	namespace:boost::interprocess
boost::interprocess::file_begin	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef enum { file_begin     = winapi::file_begin$/;"	e	enum:boost::interprocess::__anon3
boost::interprocess::file_current	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , file_current   = winapi::file_current$/;"	e	enum:boost::interprocess::__anon3
boost::interprocess::file_end	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , file_end       = winapi::file_end$/;"	e	enum:boost::interprocess::__anon3
boost::interprocess::file_handle_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef void *             file_handle_t;$/;"	t	namespace:boost::interprocess
boost::interprocess::file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^class file_lock$/;"	c	namespace:boost::interprocess
boost::interprocess::file_lock::file_handle_t	/usr/include/boost/interprocess/sync/file_lock.hpp	/^      :  m_file_hnd(file_handle_t(ipcdetail::invalid_file()))$/;"	f	class:boost::interprocess::file_lock	access:public	signature:(ipcdetail::invalid_file(
boost::interprocess::file_lock::file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_lock()$/;"	f	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_lock(const char *name);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const char *name)
boost::interprocess::file_lock::file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline file_lock::file_lock(const char *name)$/;"	f	class:boost::interprocess::file_lock	signature:(const char *name)
boost::interprocess::file_lock::lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::lock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::m_file_hnd	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_handle_t m_file_hnd;$/;"	m	class:boost::interprocess::file_lock	access:private
boost::interprocess::file_lock::swap	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void swap(file_lock &other)$/;"	f	class:boost::interprocess::file_lock	access:public	signature:(file_lock &other)
boost::interprocess::file_lock::timed_acquire_file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_acquire_file_lock$/;"	f	class:boost::interprocess::file_lock	access:private	signature:(file_handle_t hnd, bool &acquired, const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::timed_acquire_file_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_acquire_file_lock_sharable$/;"	f	class:boost::interprocess::file_lock	access:private	signature:(file_handle_t hnd, bool &acquired, const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::timed_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::timed_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::file_lock	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::timed_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::timed_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::timed_lock_sharable(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::file_lock	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::try_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::try_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::try_lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::try_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::try_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::try_lock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::unlock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::unlock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::unlock()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::unlock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::unlock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::unlock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::~file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   ~file_lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::~file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline file_lock::~file_lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^class file_mapping$/;"	c	namespace:boost::interprocess
boost::interprocess::file_mapping::file_handle_t	/usr/include/boost/interprocess/file_mapping.hpp	/^      :  m_handle(file_handle_t(ipcdetail::invalid_file()))$/;"	f	class:boost::interprocess::file_mapping	access:public	signature:(ipcdetail::invalid_file(
boost::interprocess::file_mapping::file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_mapping();$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:()
boost::interprocess::file_mapping::file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_mapping(const char *filename, mode_t mode);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(const char *filename, mode_t mode)
boost::interprocess::file_mapping::file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::file_mapping$/;"	f	class:boost::interprocess::file_mapping	signature:(const char *filename, mode_t mode)
boost::interprocess::file_mapping::file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::file_mapping()$/;"	f	class:boost::interprocess::file_mapping	signature:()
boost::interprocess::file_mapping::get_mapping_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
boost::interprocess::file_mapping::get_mapping_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^inline mapping_handle_t file_mapping::get_mapping_handle() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
boost::interprocess::file_mapping::get_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
boost::interprocess::file_mapping::get_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^inline mode_t file_mapping::get_mode() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
boost::interprocess::file_mapping::get_name	/usr/include/boost/interprocess/file_mapping.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
boost::interprocess::file_mapping::get_name	/usr/include/boost/interprocess/file_mapping.hpp	/^inline const char *file_mapping::get_name() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
boost::interprocess::file_mapping::m_filename	/usr/include/boost/interprocess/file_mapping.hpp	/^   std::string       m_filename;$/;"	m	class:boost::interprocess::file_mapping	access:private
boost::interprocess::file_mapping::m_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::file_mapping	access:private
boost::interprocess::file_mapping::m_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^   mode_t    m_mode;$/;"	m	class:boost::interprocess::file_mapping	access:private
boost::interprocess::file_mapping::priv_close	/usr/include/boost/interprocess/file_mapping.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::file_mapping	access:private	signature:()
boost::interprocess::file_mapping::priv_close	/usr/include/boost/interprocess/file_mapping.hpp	/^inline void file_mapping::priv_close()$/;"	f	class:boost::interprocess::file_mapping	signature:()
boost::interprocess::file_mapping::remove	/usr/include/boost/interprocess/file_mapping.hpp	/^   static bool remove(const char *filename);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(const char *filename)
boost::interprocess::file_mapping::remove	/usr/include/boost/interprocess/file_mapping.hpp	/^inline bool file_mapping::remove(const char *filename)$/;"	f	class:boost::interprocess::file_mapping	signature:(const char *filename)
boost::interprocess::file_mapping::swap	/usr/include/boost/interprocess/file_mapping.hpp	/^   void swap(file_mapping &other);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(file_mapping &other)
boost::interprocess::file_mapping::swap	/usr/include/boost/interprocess/file_mapping.hpp	/^inline void file_mapping::swap(file_mapping &other)$/;"	f	class:boost::interprocess::file_mapping	signature:(file_mapping &other)
boost::interprocess::file_mapping::~file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   ~file_mapping();$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:()
boost::interprocess::file_mapping::~file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::~file_mapping()$/;"	f	class:boost::interprocess::file_mapping	signature:()
boost::interprocess::file_pos_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             } file_pos_t;$/;"	t	namespace:boost::interprocess	typeref:enum:boost::interprocess::__anon3
boost::interprocess::fill_system_message	/usr/include/boost/interprocess/errors.hpp	/^inline void fill_system_message( int system_error, std::string &str)$/;"	f	namespace:boost::interprocess	signature:( int system_error, std::string &str)
boost::interprocess::fill_system_message	/usr/include/boost/interprocess/errors.hpp	/^inline void fill_system_message(int sys_err_code, std::string &str)$/;"	f	namespace:boost::interprocess	signature:(int sys_err_code, std::string &str)
boost::interprocess::fixed_managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^fixed_managed_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::flat_map_index	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^class flat_map_index$/;"	c	namespace:boost::interprocess	inherits:flat_map_index_aux::index_t
boost::interprocess::flat_map_index::base_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename index_aux::index_t    base_type;$/;"	t	class:boost::interprocess::flat_map_index	access:private
boost::interprocess::flat_map_index::flat_map_index	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   flat_map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:(segment_manager_base *segment_mngr)
boost::interprocess::flat_map_index::index_aux	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef flat_map_index_aux<MapConfig>  index_aux;$/;"	t	class:boost::interprocess::flat_map_index	access:private
boost::interprocess::flat_map_index::reserve	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   void reserve(typename segment_manager_base::size_type n)$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:(typename segment_manager_base::size_type n)
boost::interprocess::flat_map_index::segment_manager_base	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^      segment_manager_base          segment_manager_base;$/;"	t	class:boost::interprocess::flat_map_index	access:private
boost::interprocess::flat_map_index::shrink_to_fit	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:()
boost::interprocess::flat_map_index_aux	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^struct flat_map_index_aux$/;"	s	namespace:boost::interprocess
boost::interprocess::flat_map_index_aux::allocator_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^                    ,segment_manager_base>   allocator_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::index_t	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^                    key_less, allocator_type>      index_t;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::key_less	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef std::less<key_type>                     key_less;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::key_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::mapped_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::segment_manager_base	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^      segment_manager_base                   segment_manager_base;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::value_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef std::pair<key_type, mapped_type>        value_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct flat_map_intersegment$/;"	s	namespace:boost::interprocess	inherits:intersegment_base
boost::interprocess::flat_map_intersegment::dec_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void dec_offset(std::ptrdiff_t bytes)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(std::ptrdiff_t bytes)
boost::interprocess::flat_map_intersegment::delete_group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static bool delete_group(segment_group_id id)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id id)
boost::interprocess::flat_map_intersegment::diff	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::ptrdiff_t diff(const self_t &other) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &other) const
boost::interprocess::flat_map_intersegment::equal	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool equal(const self_t &y) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &y) const
boost::interprocess::flat_map_intersegment::erase_last_mapping	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static bool erase_last_mapping(segment_group_id group_id)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id group_id)
boost::interprocess::flat_map_intersegment::flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment()$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:()
boost::interprocess::flat_map_intersegment::get_segment_info_and_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static void get_segment_info_and_offset(const void *ptr, segment_info_t &segment, std::size_t &offset, void *&base)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const void *ptr, segment_info_t &segment, std::size_t &offset, void *&base)
boost::interprocess::flat_map_intersegment::inc_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void inc_offset(std::ptrdiff_t bytes)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(std::ptrdiff_t bytes)
boost::interprocess::flat_map_intersegment::insert_mapping	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static void insert_mapping(segment_group_id group_id, void *ptr, std::size_t size)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id group_id, void *ptr, std::size_t size)
boost::interprocess::flat_map_intersegment::less	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool less(const self_t &y) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &y) const
boost::interprocess::flat_map_intersegment::mappings_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct mappings_t : Mutex$/;"	s	struct:boost::interprocess::flat_map_intersegment	inherits:Mutex	access:private
boost::interprocess::flat_map_intersegment::mappings_t::m_ptr_to_segment_info	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ptr_to_segment_info_t      m_ptr_to_segment_info;$/;"	m	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public
boost::interprocess::flat_map_intersegment::mappings_t::mutex_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      typedef Mutex        mutex_type;$/;"	t	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public
boost::interprocess::flat_map_intersegment::mappings_t::~mappings_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ~mappings_t()$/;"	f	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public	signature:()
boost::interprocess::flat_map_intersegment::new_segment_group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static segment_group_id new_segment_group(multi_segment_services *services)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(multi_segment_services *services)
boost::interprocess::flat_map_intersegment::ptr_to_segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ,std::less<const void *> >          ptr_to_segment_info_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::s_groups	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment<Mutex>::s_groups;$/;"	m	class:boost::interprocess::flat_map_intersegment
boost::interprocess::flat_map_intersegment::s_groups	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static segment_groups_t s_groups;$/;"	m	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::s_map	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment<Mutex>::s_map;$/;"	m	class:boost::interprocess::flat_map_intersegment
boost::interprocess::flat_map_intersegment::s_map	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static mappings_t       s_map;$/;"	m	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::segment_group_id	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef segment_group_t*      segment_group_id;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:public
boost::interprocess::flat_map_intersegment::segment_group_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   class segment_group_t$/;"	c	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::segment_group_t::address_of	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void *address_of(std::size_t segment_id)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(std::size_t segment_id)
boost::interprocess::flat_map_intersegment::segment_group_t::clear_segments	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void clear_segments()$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:()
boost::interprocess::flat_map_intersegment::segment_group_t::get_multi_segment_services	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      multi_segment_services &get_multi_segment_services() const$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:() const
boost::interprocess::flat_map_intersegment::segment_group_t::get_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t get_size() const$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:() const
boost::interprocess::flat_map_intersegment::segment_group_t::m_ms_services	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      multi_segment_services &m_ms_services;$/;"	m	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
boost::interprocess::flat_map_intersegment::segment_group_t::m_segments	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      vector<segment_data> m_segments;$/;"	m	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
boost::interprocess::flat_map_intersegment::segment_group_t::operator <	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      friend bool operator< (const segment_group_t&l, const segment_group_t &r)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:friend	signature:(const segment_group_t&l, const segment_group_t &r)
boost::interprocess::flat_map_intersegment::segment_group_t::pop_back	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void pop_back()$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:()
boost::interprocess::flat_map_intersegment::segment_group_t::push_back	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void push_back(void *addr, std::size_t size)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(void *addr, std::size_t size)
boost::interprocess::flat_map_intersegment::segment_group_t::segment_data	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      struct segment_data$/;"	s	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
boost::interprocess::flat_map_intersegment::segment_group_t::segment_data::addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^         void *addr;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_group_t::segment_data	access:public
boost::interprocess::flat_map_intersegment::segment_group_t::segment_data::size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^         std::size_t size;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_group_t::segment_data	access:public
boost::interprocess::flat_map_intersegment::segment_group_t::segment_group_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_group_t(multi_segment_services &ms_services)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(multi_segment_services &ms_services)
boost::interprocess::flat_map_intersegment::segment_groups_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef set<segment_group_t>  segment_groups_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct segment_info_t$/;"	s	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::segment_info_t::group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_group_t *group;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
boost::interprocess::flat_map_intersegment::segment_info_t::id	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t id;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
boost::interprocess::flat_map_intersegment::segment_info_t::segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_info_t()$/;"	f	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public	signature:()
boost::interprocess::flat_map_intersegment::segment_info_t::size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t size;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
boost::interprocess::flat_map_intersegment::self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef flat_map_intersegment<Mutex>   self_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:public
boost::interprocess::flat_map_intersegment::set_from_other	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_other(const self_t &other)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &other)
boost::interprocess::flat_map_intersegment::set_from_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_pointer(const void *ptr)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const void *ptr)
boost::interprocess::flat_map_intersegment::set_from_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_pointer(const volatile void *ptr)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const volatile void *ptr)
boost::interprocess::flat_map_intersegment::swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void swap(self_t &other)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(self_t &other)
boost::interprocess::flat_map_intersegment::to_raw_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void *to_raw_pointer() const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:() const
boost::interprocess::flat_map_intersegment::~flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   ~flat_map_intersegment()$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:()
boost::interprocess::ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_ibufferstream<char>    ibufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::instance_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	g	namespace:boost::interprocess
boost::interprocess::interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^class interprocess_condition$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_condition::interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:()
boost::interprocess::interprocess_condition::interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition(const interprocess_condition &);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(const interprocess_condition &)
boost::interprocess::interprocess_condition::m_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      ipcdetail::posix_condition m_condition;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
boost::interprocess::interprocess_condition::m_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      ipcdetail::spin_condition m_condition;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
boost::interprocess::interprocess_condition::m_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      ipcdetail::windows_condition m_condition;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
boost::interprocess::interprocess_condition::notify_all	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:()
boost::interprocess::interprocess_condition::notify_one	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:()
boost::interprocess::interprocess_condition::operator =	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition &operator=(const interprocess_condition &);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(const interprocess_condition &)
boost::interprocess::interprocess_condition::timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_condition::timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::interprocess_condition::wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock)
boost::interprocess::interprocess_condition::wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, Pr pred)
boost::interprocess::interprocess_condition::~interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   ~interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:()
boost::interprocess::interprocess_condition_any	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^class interprocess_condition_any$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_condition_any::interprocess_condition_any	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   interprocess_condition_any(){}$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:()
boost::interprocess::interprocess_condition_any::interprocess_condition_any	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   interprocess_condition_any(const interprocess_condition_any &);$/;"	p	class:boost::interprocess::interprocess_condition_any	access:private	signature:(const interprocess_condition_any &)
boost::interprocess::interprocess_condition_any::m_cond	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   ipcdetail::condition_any_wrapper<members>   m_cond;$/;"	m	class:boost::interprocess::interprocess_condition_any	access:private
boost::interprocess::interprocess_condition_any::members	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   class members$/;"	c	class:boost::interprocess::interprocess_condition_any	access:private
boost::interprocess::interprocess_condition_any::members::condvar_type	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      typedef interprocess_condition   condvar_type;$/;"	t	class:boost::interprocess::interprocess_condition_any::members	access:public
boost::interprocess::interprocess_condition_any::members::get_condvar	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      condvar_type &get_condvar() {  return m_cond;  }$/;"	f	class:boost::interprocess::interprocess_condition_any::members	access:public	signature:()
boost::interprocess::interprocess_condition_any::members::get_mutex	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      mutex_type   &get_mutex()   {  return m_mut; }$/;"	f	class:boost::interprocess::interprocess_condition_any::members	access:public	signature:()
boost::interprocess::interprocess_condition_any::members::m_cond	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      condvar_type   m_cond;$/;"	m	class:boost::interprocess::interprocess_condition_any::members	access:private
boost::interprocess::interprocess_condition_any::members::m_mut	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      mutex_type     m_mut;$/;"	m	class:boost::interprocess::interprocess_condition_any::members	access:private
boost::interprocess::interprocess_condition_any::members::mutex_type	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      typedef interprocess_mutex       mutex_type;$/;"	t	class:boost::interprocess::interprocess_condition_any::members	access:public
boost::interprocess::interprocess_condition_any::notify_all	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:()
boost::interprocess::interprocess_condition_any::notify_one	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:()
boost::interprocess::interprocess_condition_any::operator =	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   interprocess_condition_any &operator=(const interprocess_condition_any &);$/;"	p	class:boost::interprocess::interprocess_condition_any	access:private	signature:(const interprocess_condition_any &)
boost::interprocess::interprocess_condition_any::timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_condition_any::timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::interprocess_condition_any::wait	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:(L& lock)
boost::interprocess::interprocess_condition_any::wait	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:(L& lock, Pr pred)
boost::interprocess::interprocess_condition_any::~interprocess_condition_any	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   ~interprocess_condition_any(){}$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:()
boost::interprocess::interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^class interprocess_exception : public std::exception$/;"	c	namespace:boost::interprocess	inherits:std::exception
boost::interprocess::interprocess_exception::get_error_code	/usr/include/boost/interprocess/exceptions.hpp	/^   error_code_t   get_error_code()  const { return m_err.get_error_code(); }$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
boost::interprocess::interprocess_exception::get_native_error	/usr/include/boost/interprocess/exceptions.hpp	/^   native_error_t get_native_error()const { return m_err.get_native_error(); }$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
boost::interprocess::interprocess_exception::interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   interprocess_exception(const char *err\/*error_code_t ec = other_error*\/)$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:(const char *err )
boost::interprocess::interprocess_exception::interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   interprocess_exception(const error_info &err_info, const char *str = 0)$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:(const error_info &err_info, const char *str = 0)
boost::interprocess::interprocess_exception::m_err	/usr/include/boost/interprocess/exceptions.hpp	/^   error_info        m_err;$/;"	m	class:boost::interprocess::interprocess_exception	access:private
boost::interprocess::interprocess_exception::m_str	/usr/include/boost/interprocess/exceptions.hpp	/^   std::string       m_str;$/;"	m	class:boost::interprocess::interprocess_exception	access:private
boost::interprocess::interprocess_exception::what	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual const char * what() const throw()$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
boost::interprocess::interprocess_exception::~interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual ~interprocess_exception() throw(){}$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:()
boost::interprocess::interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^class interprocess_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_mutex::internal_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   const internal_mutex_type &internal_mutex() const$/;"	f	class:boost::interprocess::interprocess_mutex	access:public	signature:() const
boost::interprocess::interprocess_mutex::internal_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   internal_mutex_type &internal_mutex()$/;"	f	class:boost::interprocess::interprocess_mutex	access:public	signature:()
boost::interprocess::interprocess_mutex::internal_mutex_type	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      typedef ipcdetail::posix_mutex internal_mutex_type;$/;"	t	class:boost::interprocess::interprocess_mutex	access:public
boost::interprocess::interprocess_mutex::internal_mutex_type	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      typedef ipcdetail::spin_mutex internal_mutex_type;$/;"	t	class:boost::interprocess::interprocess_mutex	access:public
boost::interprocess::interprocess_mutex::internal_mutex_type	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      typedef ipcdetail::windows_mutex internal_mutex_type;$/;"	t	class:boost::interprocess::interprocess_mutex	access:public
boost::interprocess::interprocess_mutex::interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
boost::interprocess::interprocess_mutex::interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex(const interprocess_mutex &);$/;"	p	class:boost::interprocess::interprocess_mutex	access:private	signature:(const interprocess_mutex &)
boost::interprocess::interprocess_mutex::interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline interprocess_mutex::interprocess_mutex(){}$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
boost::interprocess::interprocess_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline void interprocess_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_mutex::m_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   internal_mutex_type m_mutex;$/;"	m	class:boost::interprocess::interprocess_mutex	access:private
boost::interprocess::interprocess_mutex::operator =	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex &operator=(const interprocess_mutex &);$/;"	p	class:boost::interprocess::interprocess_mutex	access:private	signature:(const interprocess_mutex &)
boost::interprocess::interprocess_mutex::take_ownership	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      void take_ownership(){ m_mutex.take_ownership(); }$/;"	f	class:boost::interprocess::interprocess_mutex	access:private	signature:()
boost::interprocess::interprocess_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline bool interprocess_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
boost::interprocess::interprocess_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline bool interprocess_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
boost::interprocess::interprocess_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline void interprocess_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_mutex::~interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   ~interprocess_mutex();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
boost::interprocess::interprocess_mutex::~interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline interprocess_mutex::~interprocess_mutex(){}$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^class interprocess_recursive_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_recursive_mutex::interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
boost::interprocess::interprocess_recursive_mutex::interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex(const interprocess_recursive_mutex &);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:private	signature:(const interprocess_recursive_mutex &)
boost::interprocess::interprocess_recursive_mutex::interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::interprocess_recursive_mutex(){}$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
boost::interprocess::interprocess_recursive_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^      ipcdetail::posix_recursive_mutex mutex;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
boost::interprocess::interprocess_recursive_mutex::mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^      ipcdetail::spin_recursive_mutex mutex;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
boost::interprocess::interprocess_recursive_mutex::mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^      ipcdetail::windows_recursive_mutex mutex;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
boost::interprocess::interprocess_recursive_mutex::operator =	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex &operator=(const interprocess_recursive_mutex &);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:private	signature:(const interprocess_recursive_mutex &)
boost::interprocess::interprocess_recursive_mutex::take_ownership	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^      void take_ownership(){ mutex.take_ownership(); }$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	access:private	signature:()
boost::interprocess::interprocess_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
boost::interprocess::interprocess_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
boost::interprocess::interprocess_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::~interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^  ~interprocess_recursive_mutex();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
boost::interprocess::interprocess_recursive_mutex::~interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::~interprocess_recursive_mutex(){}$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^class interprocess_semaphore$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_semaphore::interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore(const interprocess_semaphore &);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:private	signature:(const interprocess_semaphore &)
boost::interprocess::interprocess_semaphore::interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore(unsigned int initialCount);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:(unsigned int initialCount)
boost::interprocess::interprocess_semaphore::interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline interprocess_semaphore::interprocess_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(unsigned int initialCount)
boost::interprocess::interprocess_semaphore::m_sem	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^      ipcdetail::posix_semaphore m_sem;$/;"	m	class:boost::interprocess::interprocess_semaphore	access:private
boost::interprocess::interprocess_semaphore::m_sem	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^      ipcdetail::spin_semaphore m_sem;$/;"	m	class:boost::interprocess::interprocess_semaphore	access:private
boost::interprocess::interprocess_semaphore::m_sem	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^      ipcdetail::windows_semaphore m_sem;$/;"	m	class:boost::interprocess::interprocess_semaphore	access:private
boost::interprocess::interprocess_semaphore::operator =	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore &operator=(const interprocess_semaphore &);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:private	signature:(const interprocess_semaphore &)
boost::interprocess::interprocess_semaphore::post	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
boost::interprocess::interprocess_semaphore::post	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::post()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_semaphore::timed_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_semaphore::timed_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_semaphore::try_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
boost::interprocess::interprocess_semaphore::try_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::try_wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_semaphore::wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
boost::interprocess::interprocess_semaphore::wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_semaphore::~interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   ~interprocess_semaphore();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
boost::interprocess::interprocess_semaphore::~interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline interprocess_semaphore::~interprocess_semaphore(){}$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^class interprocess_sharable_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_sharable_mutex::base_constants_t	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   struct base_constants_t$/;"	s	class:boost::interprocess::interprocess_sharable_mutex	access:private
boost::interprocess::interprocess_sharable_mutex::base_constants_t::max_readers	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      static const unsigned max_readers$/;"	m	struct:boost::interprocess::interprocess_sharable_mutex::base_constants_t	access:public
boost::interprocess::interprocess_sharable_mutex::base_constants_t::max_readers	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^const unsigned interprocess_sharable_mutex::base_constants_t<Dummy>::max_readers;$/;"	m	class:boost::interprocess::interprocess_sharable_mutex::base_constants_t
boost::interprocess::interprocess_sharable_mutex::constants	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   typedef base_constants_t<0> constants;$/;"	t	class:boost::interprocess::interprocess_sharable_mutex	access:private
boost::interprocess::interprocess_sharable_mutex::control_word_t	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   struct control_word_t$/;"	s	class:boost::interprocess::interprocess_sharable_mutex	access:private
boost::interprocess::interprocess_sharable_mutex::control_word_t::exclusive_in	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      unsigned exclusive_in   : 1;$/;"	m	struct:boost::interprocess::interprocess_sharable_mutex::control_word_t	access:public
boost::interprocess::interprocess_sharable_mutex::control_word_t::num_shared	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      unsigned num_shared     : sizeof(unsigned)*CHAR_BIT-1;$/;"	m	struct:boost::interprocess::interprocess_sharable_mutex::control_word_t	access:public
boost::interprocess::interprocess_sharable_mutex::exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   struct exclusive_rollback$/;"	s	class:boost::interprocess::interprocess_sharable_mutex	access:private
boost::interprocess::interprocess_sharable_mutex::exclusive_rollback::exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      exclusive_rollback(control_word_t         &ctrl$/;"	f	struct:boost::interprocess::interprocess_sharable_mutex::exclusive_rollback	access:public	signature:(control_word_t &ctrl ,interprocess_condition &first_gate)
boost::interprocess::interprocess_sharable_mutex::exclusive_rollback::m_first_gate	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      interprocess_condition  &m_first_gate;$/;"	m	struct:boost::interprocess::interprocess_sharable_mutex::exclusive_rollback	access:public
boost::interprocess::interprocess_sharable_mutex::exclusive_rollback::mp_ctrl	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      control_word_t          *mp_ctrl;$/;"	m	struct:boost::interprocess::interprocess_sharable_mutex::exclusive_rollback	access:public
boost::interprocess::interprocess_sharable_mutex::exclusive_rollback::release	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      void release()$/;"	f	struct:boost::interprocess::interprocess_sharable_mutex::exclusive_rollback	access:public	signature:()
boost::interprocess::interprocess_sharable_mutex::exclusive_rollback::~exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      ~exclusive_rollback()$/;"	f	struct:boost::interprocess::interprocess_sharable_mutex::exclusive_rollback	access:public	signature:()
boost::interprocess::interprocess_sharable_mutex::interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_sharable_mutex();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
boost::interprocess::interprocess_sharable_mutex::interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_sharable_mutex(const interprocess_sharable_mutex &);$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:private	signature:(const interprocess_sharable_mutex &)
boost::interprocess::interprocess_sharable_mutex::interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline interprocess_sharable_mutex::interprocess_sharable_mutex()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
boost::interprocess::interprocess_sharable_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
boost::interprocess::interprocess_sharable_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline void interprocess_sharable_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
boost::interprocess::interprocess_sharable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
boost::interprocess::interprocess_sharable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline void interprocess_sharable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
boost::interprocess::interprocess_sharable_mutex::m_ctrl	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   }                       m_ctrl;$/;"	m	class:boost::interprocess::interprocess_sharable_mutex	typeref:struct:boost::interprocess::interprocess_sharable_mutex::control_word_t	access:private
boost::interprocess::interprocess_sharable_mutex::m_first_gate	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_condition  m_first_gate;$/;"	m	class:boost::interprocess::interprocess_sharable_mutex	access:private
boost::interprocess::interprocess_sharable_mutex::m_mut	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_mutex      m_mut;$/;"	m	class:boost::interprocess::interprocess_sharable_mutex	access:private
boost::interprocess::interprocess_sharable_mutex::m_second_gate	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_condition  m_second_gate;$/;"	m	class:boost::interprocess::interprocess_sharable_mutex	access:private
boost::interprocess::interprocess_sharable_mutex::operator =	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_sharable_mutex &operator=(const interprocess_sharable_mutex &);$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:private	signature:(const interprocess_sharable_mutex &)
boost::interprocess::interprocess_sharable_mutex::scoped_lock_t	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   typedef scoped_lock<interprocess_mutex> scoped_lock_t;$/;"	t	class:boost::interprocess::interprocess_sharable_mutex	access:private
boost::interprocess::interprocess_sharable_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_sharable_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline bool interprocess_sharable_mutex::timed_lock$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_sharable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_sharable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline bool interprocess_sharable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_sharable_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
boost::interprocess::interprocess_sharable_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline bool interprocess_sharable_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
boost::interprocess::interprocess_sharable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
boost::interprocess::interprocess_sharable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline bool interprocess_sharable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
boost::interprocess::interprocess_sharable_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
boost::interprocess::interprocess_sharable_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline void interprocess_sharable_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
boost::interprocess::interprocess_sharable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
boost::interprocess::interprocess_sharable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline void interprocess_sharable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
boost::interprocess::interprocess_sharable_mutex::~interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   ~interprocess_sharable_mutex();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
boost::interprocess::interprocess_sharable_mutex::~interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline interprocess_sharable_mutex::~interprocess_sharable_mutex()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^class interprocess_upgradable_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_upgradable_mutex::base_constants_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct base_constants_t$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::base_constants_t::max_readers	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      static const unsigned max_readers$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::base_constants_t	access:public
boost::interprocess::interprocess_upgradable_mutex::base_constants_t::max_readers	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^const unsigned interprocess_upgradable_mutex::base_constants_t<Dummy>::max_readers;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex::base_constants_t
boost::interprocess::interprocess_upgradable_mutex::constants	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   typedef base_constants_t<0> constants;$/;"	t	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::control_word_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct control_word_t$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::control_word_t::exclusive_in	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned exclusive_in         : 1;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
boost::interprocess::interprocess_upgradable_mutex::control_word_t::num_upr_shar	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned num_upr_shar         : sizeof(unsigned)*CHAR_BIT-2;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
boost::interprocess::interprocess_upgradable_mutex::control_word_t::upgradable_in	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned upgradable_in        : 1;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct exclusive_rollback$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback::exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      exclusive_rollback(control_word_t         &ctrl$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:(control_word_t &ctrl ,interprocess_condition &first_gate)
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback::m_first_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      interprocess_condition  &m_first_gate;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback::mp_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      control_word_t          *mp_ctrl;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback::release	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      void release()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback::~exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      ~exclusive_rollback()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex(const interprocess_upgradable_mutex &);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:private	signature:(const interprocess_upgradable_mutex &)
boost::interprocess::interprocess_upgradable_mutex::interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline interprocess_upgradable_mutex::interprocess_upgradable_mutex()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::m_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   }                       m_ctrl;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	typeref:struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:private
boost::interprocess::interprocess_upgradable_mutex::m_first_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_condition  m_first_gate;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::m_mut	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_mutex      m_mut;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::m_second_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_condition  m_second_gate;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::operator =	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex &operator=(const interprocess_upgradable_mutex &);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:private	signature:(const interprocess_upgradable_mutex &)
boost::interprocess::interprocess_upgradable_mutex::scoped_lock_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   typedef scoped_lock<interprocess_mutex> scoped_lock_t;$/;"	t	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock_upgradable$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_unlock_upgradable_and_lock$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_and_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_and_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_and_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_and_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable_and_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct upgradable_to_exclusive_rollback$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback::mp_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      control_word_t          *mp_ctrl;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public
boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback::release	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      void release()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback::upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      upgradable_to_exclusive_rollback(control_word_t         &ctrl)$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:(control_word_t &ctrl)
boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback::~upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      ~upgradable_to_exclusive_rollback()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::~interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   ~interprocess_upgradable_mutex();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::~interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline interprocess_upgradable_mutex::~interprocess_upgradable_mutex()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::intersegment_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct intersegment_base$/;"	s	namespace:boost::interprocess
boost::interprocess::intersegment_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT(((size_t_bits - pow_size_bits - frc_size_bits) >= ctrl_bits ));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:((size_t_bits - pow_size_bits - frc_size_bits) >= ctrl_bits )
boost::interprocess::intersegment_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT((sizeof(std::size_t) == sizeof(void*)));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:(sizeof(std::size_t) == sizeof(void*))
boost::interprocess::intersegment_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT((sizeof(void*)*CHAR_BIT == 32 || sizeof(void*)*CHAR_BIT == 64));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:(sizeof(void*)*CHAR_BIT == 32 || sizeof(void*)*CHAR_BIT == 64)
boost::interprocess::intersegment_base::align	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t align      = std::size_t(1) << align_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::align_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t align_bits = 12;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::begin_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t begin_bits             = max_segment_size_bits - align_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::calculate_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static std::size_t calculate_size(std::size_t orig_size, std::size_t &pow, std::size_t &frc)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t orig_size, std::size_t &pow, std::size_t &frc)
boost::interprocess::intersegment_base::ctrl_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t ctrl_bits = 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::direct_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct direct_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::direct_addressing::addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void * addr;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
boost::interprocess::intersegment_base::direct_addressing::ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
boost::interprocess::intersegment_base::direct_addressing::dummy	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t dummy    :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
boost::interprocess::intersegment_base::frc_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t frc_size_bits =$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::get_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::size_t get_mode()const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
boost::interprocess::intersegment_base::intersegment_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_base()$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:()
boost::interprocess::intersegment_base::is_in_stack	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_in_stack         = 1;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::is_max_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_max_mode         = 4;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::is_null	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool is_null() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
boost::interprocess::intersegment_base::is_pointee_outside	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_pointee_outside  = 0;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::is_relative	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_relative         = 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::is_segmented	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_segmented        = 3;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::max_segment_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t max_segment_size = std::size_t(1) << max_segment_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::max_segment_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t max_segment_size_bits = size_t_bits - 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::members	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   } members;$/;"	m	struct:boost::interprocess::intersegment_base	typeref:union:boost::interprocess::intersegment_base::members_t	access:public
boost::interprocess::intersegment_base::members_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   union members_t{$/;"	u	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::members_t::direct	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      direct_addressing    direct;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
boost::interprocess::intersegment_base::members_t::relative	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      relative_addressing  relative;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
boost::interprocess::intersegment_base::members_t::segmented	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segmented_addressing segmented;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
boost::interprocess::intersegment_base::pow_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t pow_size_bits =$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::pow_size_bits_helper	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t pow_size_bits_helper = static_log2<max_segment_size_bits>::value;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::relative_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct relative_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::relative_addressing::beg	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t beg      :  begin_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_addressing::bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::ptrdiff_t bits  :  2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_addressing::ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_addressing::frc	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t frc      :  frc_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_addressing::off	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::ptrdiff_t off   :  sizeof(std::ptrdiff_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_addressing::pow	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t pow      :  pow_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_calculate_begin_addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void *relative_calculate_begin_addr() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
boost::interprocess::intersegment_base::relative_set_begin_from_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void relative_set_begin_from_base(void *addr)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(void *addr)
boost::interprocess::intersegment_base::relative_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::size_t relative_size() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
boost::interprocess::intersegment_base::relative_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t relative_size_bits =$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::round_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static std::size_t round_size(std::size_t orig_size)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t orig_size)
boost::interprocess::intersegment_base::segmented_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct segmented_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::segmented_addressing::bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t bits     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
boost::interprocess::intersegment_base::segmented_addressing::ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
boost::interprocess::intersegment_base::segmented_addressing::off	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t off      :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
boost::interprocess::intersegment_base::segmented_addressing::segment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t segment  :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
boost::interprocess::intersegment_base::self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef intersegment_base  self_t;$/;"	t	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::set_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_mode(std::size_t mode)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t mode)
boost::interprocess::intersegment_base::set_null	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_null()$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:()
boost::interprocess::intersegment_base::size_t_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t size_t_bits = (sizeof(void*)*CHAR_BIT == 32) ? 32 : 64;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::sizeof	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT(sizeof(members_t) == 2*sizeof(std::size_t));$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^class intersegment_ptr : public flat_map_intersegment<interprocess_mutex>$/;"	c	namespace:boost::interprocess	inherits:flat_map_intersegment
boost::interprocess::intersegment_ptr::PT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef flat_map_intersegment<interprocess_mutex> PT;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
boost::interprocess::intersegment_ptr::_diff	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::ptrdiff_t _diff(const intersegment_ptr<T2> &other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &other) const
boost::interprocess::intersegment_ptr::_equal	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool _equal(const intersegment_ptr<T2>&other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2>&other) const
boost::interprocess::intersegment_ptr::_less	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool _less(const intersegment_ptr<T2> &other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &other) const
boost::interprocess::intersegment_ptr::base_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef PT                                      base_t;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
boost::interprocess::intersegment_ptr::difference_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef std::ptrdiff_t                          difference_type;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
boost::interprocess::intersegment_ptr::get	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   pointer get()const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(U *ptr){  base_t::set_from_pointer(pointer(ptr)); }$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(U *ptr)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr& ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr& ptr)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<T2> &ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &ptr)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, ipcdetail::const_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, ipcdetail::const_cast_tag)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, ipcdetail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, ipcdetail::dynamic_cast_tag)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, ipcdetail::reinterpret_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, ipcdetail::reinterpret_cast_tag)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, ipcdetail::static_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, ipcdetail::static_cast_tag)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(pointer ptr = 0)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(pointer ptr = 0)
boost::interprocess::intersegment_ptr::iterator_category	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef std::random_access_iterator_tag         iterator_category;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
boost::interprocess::intersegment_ptr::operator !	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
boost::interprocess::intersegment_ptr::operator *	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   reference operator* () const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
boost::interprocess::intersegment_ptr::operator +	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator+ (std::ptrdiff_t idx) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
boost::interprocess::intersegment_ptr::operator ++	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator++ (int)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(int)
boost::interprocess::intersegment_ptr::operator ++	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator++ (void)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(void)
boost::interprocess::intersegment_ptr::operator +=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr &operator+= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t offset)
boost::interprocess::intersegment_ptr::operator -	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator- (std::ptrdiff_t idx) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
boost::interprocess::intersegment_ptr::operator --	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator-- (int)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(int)
boost::interprocess::intersegment_ptr::operator --	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator-- (void)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(void)
boost::interprocess::intersegment_ptr::operator -=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr &operator-= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t offset)
boost::interprocess::intersegment_ptr::operator ->	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   pointer operator->() const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
boost::interprocess::intersegment_ptr::operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (const intersegment_ptr &ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr &ptr)
boost::interprocess::intersegment_ptr::operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (const intersegment_ptr<T2> & ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> & ptr)
boost::interprocess::intersegment_ptr::operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (pointer from)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(pointer from)
boost::interprocess::intersegment_ptr::operator []	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   reference operator[](std::ptrdiff_t idx) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
boost::interprocess::intersegment_ptr::operator unspecified_bool_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
boost::interprocess::intersegment_ptr::pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef T *                                     pointer;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
boost::interprocess::intersegment_ptr::reference	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef typename ipcdetail::add_reference<T>::type reference;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
boost::interprocess::intersegment_ptr::self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef intersegment_ptr<T>                  self_t;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
boost::interprocess::intersegment_ptr::swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void swap(intersegment_ptr &other)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(intersegment_ptr &other)
boost::interprocess::intersegment_ptr::unspecified_bool_type_func	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::intersegment_ptr	access:private	signature:() const
boost::interprocess::intersegment_ptr::value_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef T                                       value_type;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
boost::interprocess::intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^class intrusive_ptr$/;"	c	namespace:boost::interprocess
boost::interprocess::intrusive_ptr::VP	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef VoidPointer VP;$/;"	t	class:boost::interprocess::intrusive_ptr	access:private
boost::interprocess::intrusive_ptr::element_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::intrusive_ptr	access:public
boost::interprocess::intrusive_ptr::get	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   const pointer &get() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
boost::interprocess::intrusive_ptr::get	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer &get()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
boost::interprocess::intrusive_ptr::intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(): m_ptr(0)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
boost::interprocess::intrusive_ptr::intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(const pointer &p, bool add_ref = true): m_ptr(p)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(const pointer &p, bool add_ref = true)
boost::interprocess::intrusive_ptr::intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(intrusive_ptr const & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr const & rhs)
boost::interprocess::intrusive_ptr::intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   template<class U> intrusive_ptr$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr<U, VP> const & rhs)
boost::interprocess::intrusive_ptr::m_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::intrusive_ptr	access:private
boost::interprocess::intrusive_ptr::operator !	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
boost::interprocess::intrusive_ptr::operator *	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   T & operator*() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
boost::interprocess::intrusive_ptr::operator ->	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   const pointer &operator->() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
boost::interprocess::intrusive_ptr::operator ->	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer &operator->()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
boost::interprocess::intrusive_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr & operator=(intrusive_ptr const & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr const & rhs)
boost::interprocess::intrusive_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr & operator=(pointer rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(pointer rhs)
boost::interprocess::intrusive_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   template<class U> intrusive_ptr & operator=$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr<U, VP> const & rhs)
boost::interprocess::intrusive_ptr::operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   operator unspecified_bool_type () const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
boost::interprocess::intrusive_ptr::pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^         rebind_pointer<T>::type                pointer;$/;"	t	class:boost::interprocess::intrusive_ptr	access:public
boost::interprocess::intrusive_ptr::swap	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   void swap(intrusive_ptr & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr & rhs)
boost::interprocess::intrusive_ptr::this_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef intrusive_ptr this_type;$/;"	t	class:boost::interprocess::intrusive_ptr	access:private
boost::interprocess::intrusive_ptr::this_type::unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef pointer this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::intrusive_ptr::this_type	access:private
boost::interprocess::intrusive_ptr::~intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   ~intrusive_ptr()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
boost::interprocess::invalid_argument	/usr/include/boost/interprocess/errors.hpp	/^   invalid_argument,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::invalid_mode	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , invalid_mode   = 0xffff$/;"	e	enum:boost::interprocess::__anon2
boost::interprocess::io_error	/usr/include/boost/interprocess/errors.hpp	/^   io_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/creation_tags.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/atomic.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^namespace boost { namespace interprocess { namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/math_functions.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/mpl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^      namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/type_traits.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/utilities.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/indexes/map_index.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace ipcdetail$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace ipcdetail{ class raw_mapped_region_creator; }$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/permissions.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/named_condition.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/named_condition.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail::CtorNArg	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^struct CtorNArg : public placement_destroy<T>$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:placement_destroy
boost::interprocess::ipcdetail::CtorNArg::CtorNArg	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   CtorNArg(Args && ...args)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:public	signature:(Args && ....args)
boost::interprocess::ipcdetail::CtorNArg::IsIterator	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef bool_<is_iterator> IsIterator;$/;"	t	struct:boost::interprocess::ipcdetail::CtorNArg	access:public
boost::interprocess::ipcdetail::CtorNArg::args_	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   tuple<Args&...> args_;$/;"	m	struct:boost::interprocess::ipcdetail::CtorNArg	access:private
boost::interprocess::ipcdetail::CtorNArg::construct	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void construct(void *mem, false_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:private	signature:(void *mem, false_, const index_tuple<IdxPack...>&)
boost::interprocess::ipcdetail::CtorNArg::construct	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void construct(void *mem, true_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:private	signature:(void *mem, true_, const index_tuple<IdxPack...>&)
boost::interprocess::ipcdetail::CtorNArg::construct_n	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   virtual void construct_n(void *mem$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:public	signature:(void *mem , std::size_t num , std::size_t &constructed)
boost::interprocess::ipcdetail::CtorNArg::do_increment	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void do_increment(false_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:private	signature:(false_, const index_tuple<IdxPack...>&)
boost::interprocess::ipcdetail::CtorNArg::do_increment	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void do_increment(true_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:private	signature:(true_, const index_tuple<IdxPack...>&)
boost::interprocess::ipcdetail::CtorNArg::expansion_helper	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void expansion_helper(ExpansionArgs &&...)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:private	signature:(ExpansionArgs &&....)
boost::interprocess::ipcdetail::CtorNArg::index_tuple_t	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef typename build_number_seq<sizeof...(Args)>::type index_tuple_t;$/;"	t	struct:boost::interprocess::ipcdetail::CtorNArg	access:public
boost::interprocess::ipcdetail::CtorNArg::operator ++	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   self_t  operator++(int) {  return ++*this;   *this;  }$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:public	signature:(int)
boost::interprocess::ipcdetail::CtorNArg::operator ++	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   self_t& operator++()$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:public	signature:()
boost::interprocess::ipcdetail::CtorNArg::self_t	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef CtorNArg<T, is_iterator, Args...> self_t;$/;"	t	struct:boost::interprocess::ipcdetail::CtorNArg	access:public
boost::interprocess::ipcdetail::DoCreate	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::ipcdetail::create_enum_t
boost::interprocess::ipcdetail::DoOpen	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::ipcdetail::create_enum_t
boost::interprocess::ipcdetail::DoOpenOrCreate	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::ipcdetail::create_enum_t
boost::interprocess::ipcdetail::OS_process_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef unsigned long OS_process_id_t;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::OS_systemwide_thread_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef OS_thread_id_t OS_systemwide_thread_id_t;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::OS_thread_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef unsigned long OS_thread_id_t;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::acquire_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool acquire_file_lock(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
boost::interprocess::ipcdetail::acquire_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool acquire_file_lock_sharable(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
boost::interprocess::ipcdetail::adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool_base$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:node_pool_allocation_impl
boost::interprocess::ipcdetail::adaptive_pool_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:(Version <=2)
boost::interprocess::ipcdetail::adaptive_pool_base::adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base<Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::ipcdetail::adaptive_pool_base::adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base(const adaptive_pool_base &other)$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base &other)
boost::interprocess::ipcdetail::adaptive_pool_base::adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::ipcdetail::adaptive_pool_base::const_pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::const_reference	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::difference_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef typename segment_manager::difference_type     difference_type;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::get_node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   void* get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:() const
boost::interprocess::ipcdetail::adaptive_pool_base::get_segment_manager	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:() const
boost::interprocess::ipcdetail::adaptive_pool_base::mp_node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   void_pointer   mp_node_pool;$/;"	m	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:private
boost::interprocess::ipcdetail::adaptive_pool_base::multiallocation_chain	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::node_pool::get	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::ipcdetail::adaptive_pool_base::node_pool	access:public	signature:(void *p)
boost::interprocess::ipcdetail::adaptive_pool_base::node_pool::type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      < SegmentManager, sizeof_value<T>::value, NodesPerBlock, MaxFreeBlocks, OverheadPercent> type;$/;"	t	struct:boost::interprocess::ipcdetail::adaptive_pool_base::node_pool	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::operator =	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base& operator=$/;"	p	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:private	signature:(const adaptive_pool_base<Version2, T2, SegmentManager2, N2, F2, O2>&)
boost::interprocess::ipcdetail::adaptive_pool_base::operator =	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base& operator=(const adaptive_pool_base &other)$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base &other)
boost::interprocess::ipcdetail::adaptive_pool_base::pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::rebind::other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool_base<Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>       other;$/;"	t	struct:boost::interprocess::ipcdetail::adaptive_pool_base::rebind	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::reference	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::segment_manager	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::self_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      <Version, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>   self_t;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::size_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef typename segment_manager::size_type           size_type;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::swap	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:friend	signature:(self_t &alloc1, self_t &alloc2)
boost::interprocess::ipcdetail::adaptive_pool_base::value_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::version	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<adaptive_pool_base, Version>   version;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::void_pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
boost::interprocess::ipcdetail::adaptive_pool_base::~adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   ~adaptive_pool_base()$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:()
boost::interprocess::ipcdetail::adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:adaptive_pool_base
boost::interprocess::ipcdetail::adaptive_pool_v1::adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_v1$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_v1	access:public	signature:(const adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::ipcdetail::adaptive_pool_v1::adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_v1(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::ipcdetail::adaptive_pool_v1::base_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         < 1, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_v1	access:public
boost::interprocess::ipcdetail::adaptive_pool_v1::rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::adaptive_pool_v1	access:public
boost::interprocess::ipcdetail::adaptive_pool_v1::rebind::other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::ipcdetail::adaptive_pool_v1::rebind	access:public
boost::interprocess::ipcdetail::add_const_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_const_reference$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::add_const_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_const_reference<T&>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::add_const_reference::type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^{  typedef T& type;   };$/;"	t	struct:boost::interprocess::ipcdetail::add_const_reference	access:public
boost::interprocess::ipcdetail::add_const_reference::type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^{  typedef const T &type;   };$/;"	t	struct:boost::interprocess::ipcdetail::add_const_reference	access:public
boost::interprocess::ipcdetail::add_leading_slash	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void add_leading_slash(const char *name, std::string &new_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name, std::string &new_name)
boost::interprocess::ipcdetail::add_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_reference$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::add_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_reference<T&>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::add_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_reference<const void>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::add_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct add_reference<void>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::add_reference::type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    typedef T& type;$/;"	t	struct:boost::interprocess::ipcdetail::add_reference	access:public
boost::interprocess::ipcdetail::add_reference::type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    typedef const nat &type;$/;"	t	struct:boost::interprocess::ipcdetail::add_reference	access:public
boost::interprocess::ipcdetail::add_reference::type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    typedef nat &type;$/;"	t	struct:boost::interprocess::ipcdetail::add_reference	access:public
boost::interprocess::ipcdetail::anonymous_instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^typedef instance_t<anonymous_type>  anonymous_instance_t;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::array_allocation_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class array_allocation_impl$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::array_allocation_impl::address	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const_pointer address(const_reference value) const$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(const_reference value) const
boost::interprocess::ipcdetail::array_allocation_impl::address	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer address(reference value) const$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(reference value) const
boost::interprocess::ipcdetail::array_allocation_impl::allocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void allocate_many(const size_type *elem_sizes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(const size_type *elem_sizes, size_type n_elements, multiallocation_chain &chain)
boost::interprocess::ipcdetail::array_allocation_impl::allocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void allocate_many(size_type elem_size, size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(size_type elem_size, size_type num_elements, multiallocation_chain &chain)
boost::interprocess::ipcdetail::array_allocation_impl::allocation_command	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      allocation_command(boost::interprocess::allocation_type command,$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse = 0)
boost::interprocess::ipcdetail::array_allocation_impl::const_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
boost::interprocess::ipcdetail::array_allocation_impl::const_reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
boost::interprocess::ipcdetail::array_allocation_impl::construct	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void construct(const pointer &ptr, BOOST_FWD_REF(P) p)$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(const pointer &ptr, BOOST_FWD_REF(P) p)
boost::interprocess::ipcdetail::array_allocation_impl::deallocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_many(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(multiallocation_chain &chain)
boost::interprocess::ipcdetail::array_allocation_impl::derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   Derived *derived()$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:private	signature:()
boost::interprocess::ipcdetail::array_allocation_impl::derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const Derived *derived() const$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:private	signature:() const
boost::interprocess::ipcdetail::array_allocation_impl::destroy	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void destroy(const pointer &ptr)$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(const pointer &ptr)
boost::interprocess::ipcdetail::array_allocation_impl::difference_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::difference_type      difference_type;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
boost::interprocess::ipcdetail::array_allocation_impl::max_size	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type max_size() const$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:() const
boost::interprocess::ipcdetail::array_allocation_impl::multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
boost::interprocess::ipcdetail::array_allocation_impl::pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
boost::interprocess::ipcdetail::array_allocation_impl::reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
boost::interprocess::ipcdetail::array_allocation_impl::size	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type size(const pointer &p) const$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(const pointer &p) const
boost::interprocess::ipcdetail::array_allocation_impl::size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::size_type            size_type;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
boost::interprocess::ipcdetail::array_allocation_impl::value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
boost::interprocess::ipcdetail::array_allocation_impl::void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:private
boost::interprocess::ipcdetail::array_construct	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^inline void array_construct(void *mem, std::size_t num, in_place_interface &table)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(void *mem, std::size_t num, in_place_interface &table)
boost::interprocess::ipcdetail::atomic_add_unless32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline bool atomic_add_unless32$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem, boost::uint32_t value, boost::uint32_t unless_this)
boost::interprocess::ipcdetail::atomic_cas32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_cas32$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem, boost::uint32_t with, boost::uint32_t cmp)
boost::interprocess::ipcdetail::atomic_cas32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_cas32$/;"	p	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem, boost::uint32_t with, boost::uint32_t cmp)
boost::interprocess::ipcdetail::atomic_dec32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_dec32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem)
boost::interprocess::ipcdetail::atomic_inc32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_inc32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem)
boost::interprocess::ipcdetail::atomic_inc32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_inc32(volatile boost::uint32_t *mem);$/;"	p	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem)
boost::interprocess::ipcdetail::atomic_read32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_read32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem)
boost::interprocess::ipcdetail::atomic_read32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_read32(volatile boost::uint32_t *mem);$/;"	p	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem)
boost::interprocess::ipcdetail::atomic_write32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline void atomic_write32(volatile boost::uint32_t *mem, boost::uint32_t val)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem, boost::uint32_t val)
boost::interprocess::ipcdetail::atomic_write32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline void atomic_write32(volatile boost::uint32_t *mem, boost::uint32_t val);$/;"	p	namespace:boost::interprocess::ipcdetail	signature:(volatile boost::uint32_t *mem, boost::uint32_t val)
boost::interprocess::ipcdetail::barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class barrier_initializer$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::barrier_initializer::barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      barrier_initializer(pthread_barrier_t &mut,$/;"	f	class:boost::interprocess::ipcdetail::barrier_initializer	access:public	signature:(pthread_barrier_t &mut, pthread_barrierattr_t &mut_attr, int count)
boost::interprocess::ipcdetail::barrier_initializer::mp_barrier	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_barrier_t *mp_barrier;$/;"	m	class:boost::interprocess::ipcdetail::barrier_initializer	access:private
boost::interprocess::ipcdetail::barrier_initializer::release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release() {mp_barrier = 0; }$/;"	f	class:boost::interprocess::ipcdetail::barrier_initializer	access:public	signature:()
boost::interprocess::ipcdetail::barrier_initializer::~barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~barrier_initializer() {  if(mp_barrier) pthread_barrier_destroy(mp_barrier);  }$/;"	f	class:boost::interprocess::ipcdetail::barrier_initializer	access:public	signature:()
boost::interprocess::ipcdetail::barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct barrierattr_wrapper$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::barrierattr_wrapper::barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      barrierattr_wrapper()$/;"	f	struct:boost::interprocess::ipcdetail::barrierattr_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::barrierattr_wrapper::m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_barrierattr_t m_attr;$/;"	m	struct:boost::interprocess::ipcdetail::barrierattr_wrapper	access:public
boost::interprocess::ipcdetail::barrierattr_wrapper::operator pthread_barrierattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_barrierattr_t&()  {  return m_attr;  }$/;"	f	struct:boost::interprocess::ipcdetail::barrierattr_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::barrierattr_wrapper::~barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~barrierattr_wrapper()  {  pthread_barrierattr_destroy(&m_attr);  }$/;"	f	struct:boost::interprocess::ipcdetail::barrierattr_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::basic_managed_global_memory	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^class basic_managed_global_memory$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:basic_managed_memory_impl,intermodule_types::open_or_create::type
boost::interprocess::ipcdetail::basic_managed_global_memory::base2_t	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef typename intermodule_types::template open_or_create<Device, FileBased>::type base2_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:private
boost::interprocess::ipcdetail::basic_managed_global_memory::base_t	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:private
boost::interprocess::ipcdetail::basic_managed_global_memory::basic_managed_global_memory	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   basic_managed_global_memory (open_only_t open_only, const char* name,$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:public	signature:(open_only_t open_only, const char* name, const void *addr = 0)
boost::interprocess::ipcdetail::basic_managed_global_memory::basic_managed_global_memory	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   basic_managed_global_memory (open_or_create_t open_or_create,$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:public	signature:(open_or_create_t open_or_create, const char *name, size_type size, const void *addr = 0, const permissions& perm = permissions())
boost::interprocess::ipcdetail::basic_managed_global_memory::char_ptr_holder_t	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:private
boost::interprocess::ipcdetail::basic_managed_global_memory::create_open_func_t	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:private
boost::interprocess::ipcdetail::basic_managed_global_memory::get_this_pointer	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   basic_managed_global_memory *get_this_pointer()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:private	signature:()
boost::interprocess::ipcdetail::basic_managed_global_memory::size_type	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^class basic_managed_memory_impl$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::basic_managed_memory_impl::PayloadPerAllocation	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static const size_type PayloadPerAllocation = segment_manager::PayloadPerAllocation;$/;"	m	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::all_memory_deallocated	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool all_memory_deallocated()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::allocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void* allocate             (size_type nbytes)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type nbytes)
boost::interprocess::ipcdetail::basic_managed_memory_impl::allocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void* allocate             (size_type nbytes, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type nbytes, std::nothrow_t nothrow)
boost::interprocess::ipcdetail::basic_managed_memory_impl::allocate_aligned	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void * allocate_aligned (size_type nbytes, size_type alignment, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type nbytes, size_type alignment, std::nothrow_t nothrow)
boost::interprocess::ipcdetail::basic_managed_memory_impl::allocate_aligned	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void * allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type nbytes, size_type alignment)
boost::interprocess::ipcdetail::basic_managed_memory_impl::allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void allocate_many(const size_type *element_lengths, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const size_type *element_lengths, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
boost::interprocess::ipcdetail::basic_managed_memory_impl::allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void allocate_many(size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)
boost::interprocess::ipcdetail::basic_managed_memory_impl::allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void allocate_many(std::nothrow_t, const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(std::nothrow_t, const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
boost::interprocess::ipcdetail::basic_managed_memory_impl::allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void allocate_many(std::nothrow_t, size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(std::nothrow_t, size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)
boost::interprocess::ipcdetail::basic_managed_memory_impl::allocation_command	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr = 0)
boost::interprocess::ipcdetail::basic_managed_memory_impl::allocator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   struct allocator$/;"	s	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::allocator::type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      typedef typename segment_manager::template allocator<T>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::basic_managed_memory_impl::allocator	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::atomic_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void atomic_func(Func &f)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(Func &f)
boost::interprocess::ipcdetail::basic_managed_memory_impl::basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl(const basic_managed_memory_impl &);$/;"	p	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:private	signature:(const basic_managed_memory_impl &)
boost::interprocess::ipcdetail::basic_managed_memory_impl::belongs_to_segment	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool belongs_to_segment (const void *ptr) const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const void *ptr) const
boost::interprocess::ipcdetail::basic_managed_memory_impl::char_ptr_holder_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^           segment_manager::char_ptr_holder_t         char_ptr_holder_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::char_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef CharType                                   char_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::char_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef CharType                                   char_type;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::check_sanity	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool check_sanity()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::close_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool close_impl()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::const_named_iterator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      const_named_iterator                            const_named_iterator;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::const_unique_iterator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      const_unique_iterator                           const_unique_iterator;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::ipcdetail::basic_managed_memory_impl::construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
boost::interprocess::ipcdetail::basic_managed_memory_impl::construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::ipcdetail::basic_managed_memory_impl::construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct_it(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
boost::interprocess::ipcdetail::basic_managed_memory_impl::create_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool  create_impl   (void *addr, size_type size)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(void *addr, size_type size)
boost::interprocess::ipcdetail::basic_managed_memory_impl::deallocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void  deallocate           (void *addr)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(void *addr)
boost::interprocess::ipcdetail::basic_managed_memory_impl::deallocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void deallocate_many(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(multiallocation_chain &chain)
boost::interprocess::ipcdetail::basic_managed_memory_impl::deleter	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   struct deleter$/;"	s	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::deleter::type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      typedef typename segment_manager::template deleter<T>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::basic_managed_memory_impl::deleter	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::destroy	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy(const CharType *name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const CharType *name)
boost::interprocess::ipcdetail::basic_managed_memory_impl::destroy	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy(const unique_instance_t *const )$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const unique_instance_t *const )
boost::interprocess::ipcdetail::basic_managed_memory_impl::destroy_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy_impl()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::destroy_ptr	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void destroy_ptr(const T *ptr)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
boost::interprocess::ipcdetail::basic_managed_memory_impl::difference_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename MemoryAlgorithm::difference_type  difference_type;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::find	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::pair<T*, size_type> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::ipcdetail::basic_managed_memory_impl::find_no_lock	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::pair<T*, size_type> find_no_lock  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::ipcdetail::basic_managed_memory_impl::find_or_construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::ipcdetail::basic_managed_memory_impl::find_or_construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
boost::interprocess::ipcdetail::basic_managed_memory_impl::find_or_construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::ipcdetail::basic_managed_memory_impl::find_or_construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct_it(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_address	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void *   get_address   () const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_address_from_handle	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void *    get_address_from_handle (handle_t offset) const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(handle_t offset) const
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_allocator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      get_allocator()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_deleter	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      get_deleter()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_free_memory	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   size_type get_free_memory() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_handle_from_address	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   handle_t get_handle_from_address   (const void *ptr) const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const void *ptr) const
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_instance_length	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static size_type get_instance_length(const T *ptr)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_instance_name	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static const char_type *get_instance_name(const T *ptr)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_instance_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static instance_type get_instance_type(const T *ptr)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_num_named_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   size_type get_num_named_objects()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_num_unique_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   size_type get_num_unique_objects()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_segment_manager	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   segment_manager *get_segment_manager() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::ipcdetail::basic_managed_memory_impl::get_size	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   size_type   get_size   () const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::ipcdetail::basic_managed_memory_impl::grow	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static bool grow(const char *filename, size_type extra_bytes)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(const char *filename, size_type extra_bytes)
boost::interprocess::ipcdetail::basic_managed_memory_impl::grow	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void grow(size_type extra_bytes)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(size_type extra_bytes)
boost::interprocess::ipcdetail::basic_managed_memory_impl::handle_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef difference_type                            handle_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::memory_algorithm	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef MemoryAlgorithm                            memory_algorithm;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::mp_header	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   segment_manager *mp_header;$/;"	m	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:private
boost::interprocess::ipcdetail::basic_managed_memory_impl::multiallocation_chain	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename segment_manager::multiallocation_chain  multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::mutex_family	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename MemoryAlgorithm::mutex_family     mutex_family;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::named_begin	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_named_iterator named_begin() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::ipcdetail::basic_managed_memory_impl::named_end	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_named_iterator named_end() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::ipcdetail::basic_managed_memory_impl::open_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool  open_impl     (void *addr, size_type)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(void *addr, size_type)
boost::interprocess::ipcdetail::basic_managed_memory_impl::operator =	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl &operator=(const basic_managed_memory_impl &);$/;"	p	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:private	signature:(const basic_managed_memory_impl &)
boost::interprocess::ipcdetail::basic_managed_memory_impl::reserve_named_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void reserve_named_objects(size_type num)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type num)
boost::interprocess::ipcdetail::basic_managed_memory_impl::reserve_unique_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void reserve_unique_objects(size_type num)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type num)
boost::interprocess::ipcdetail::basic_managed_memory_impl::segment_manager	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      <CharType, MemoryAlgorithm, IndexType>::type    segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::self_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^               <CharType, MemoryAlgorithm, IndexType, Offset> self_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:private
boost::interprocess::ipcdetail::basic_managed_memory_impl::shrink_to_fit	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static bool shrink_to_fit(const char *filename)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(const char *filename)
boost::interprocess::ipcdetail::basic_managed_memory_impl::shrink_to_fit	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::shrink_to_fit_indexes	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void shrink_to_fit_indexes()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::size_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename MemoryAlgorithm::size_type        size_type;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
boost::interprocess::ipcdetail::basic_managed_memory_impl::swap	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void swap(basic_managed_memory_impl &other)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(basic_managed_memory_impl &other)
boost::interprocess::ipcdetail::basic_managed_memory_impl::try_atomic_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool try_atomic_func(Func &f)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(Func &f)
boost::interprocess::ipcdetail::basic_managed_memory_impl::unique_begin	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_unique_iterator unique_begin() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::ipcdetail::basic_managed_memory_impl::unique_end	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_unique_iterator unique_end() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::ipcdetail::basic_managed_memory_impl::zero_free_memory	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void zero_free_memory()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::ipcdetail::basic_managed_memory_impl::~basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   ~basic_managed_memory_impl()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:()
boost::interprocess::ipcdetail::basic_multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^class basic_multiallocation_chain$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:boost::container::container_detail::basic_multiallocation_chain
boost::interprocess::ipcdetail::basic_multiallocation_chain::base_t	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^      basic_multiallocation_chain<VoidPointer> base_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_multiallocation_chain	access:private
boost::interprocess::ipcdetail::basic_multiallocation_chain::basic_multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   basic_multiallocation_chain()$/;"	f	class:boost::interprocess::ipcdetail::basic_multiallocation_chain	access:public	signature:()
boost::interprocess::ipcdetail::basic_multiallocation_chain::move	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^      :  base_t(::boost::move(static_cast<base_t&>(other)))$/;"	f	class:boost::interprocess::ipcdetail::basic_multiallocation_chain	access:public	signature:(static_cast<base_t&>(
boost::interprocess::ipcdetail::basic_multiallocation_chain::pop_front	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   void *pop_front()$/;"	f	class:boost::interprocess::ipcdetail::basic_multiallocation_chain	access:public	signature:()
boost::interprocess::ipcdetail::block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct block_header$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::block_header::alloc_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char alloc_type() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
boost::interprocess::ipcdetail::block_header::block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header(size_type val_bytes$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(size_type val_bytes ,size_type val_alignment ,unsigned char al_type ,std::size_t szof_char ,std::size_t num_char )
boost::interprocess::ipcdetail::block_header::block_header_from_value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header<size_type> *block_header_from_value(T *value)$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(T *value)
boost::interprocess::ipcdetail::block_header::block_header_from_value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header<size_type> *block_header_from_value(const void *value, std::size_t sz, std::size_t algn)$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(const void *value, std::size_t sz, std::size_t algn)
boost::interprocess::ipcdetail::block_header::equal_comp	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool equal_comp(const block_header<size_type> &b) const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(const block_header<size_type> &b) const
boost::interprocess::ipcdetail::block_header::from_first_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header<size_type> *from_first_header(Header *header)$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(Header *header)
boost::interprocess::ipcdetail::block_header::less_comp	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool less_comp(const block_header<size_type> &b) const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(const block_header<size_type> &b) const
boost::interprocess::ipcdetail::block_header::m_alloc_type_sizeof_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char  m_alloc_type_sizeof_char;$/;"	m	struct:boost::interprocess::ipcdetail::block_header	access:public
boost::interprocess::ipcdetail::block_header::m_num_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned short m_num_char;$/;"	m	struct:boost::interprocess::ipcdetail::block_header	access:public
boost::interprocess::ipcdetail::block_header::m_value_alignment	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char  m_value_alignment;$/;"	m	struct:boost::interprocess::ipcdetail::block_header	access:public
boost::interprocess::ipcdetail::block_header::m_value_bytes	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type      m_value_bytes;$/;"	m	struct:boost::interprocess::ipcdetail::block_header	access:public
boost::interprocess::ipcdetail::block_header::name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   CharType *name() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
boost::interprocess::ipcdetail::block_header::name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned short name_length() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
boost::interprocess::ipcdetail::block_header::name_offset	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type name_offset() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
boost::interprocess::ipcdetail::block_header::operator =	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header &operator= (const T& )$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(const T& )
boost::interprocess::ipcdetail::block_header::sizeof_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char sizeof_char() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
boost::interprocess::ipcdetail::block_header::to_first_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static Header *to_first_header(block_header<size_type> *bheader)$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(block_header<size_type> *bheader)
boost::interprocess::ipcdetail::block_header::total_size	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type total_size() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
boost::interprocess::ipcdetail::block_header::total_size_with_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type total_size_with_header() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
boost::interprocess::ipcdetail::block_header::value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
boost::interprocess::ipcdetail::block_header::value_bytes	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type value_bytes() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
boost::interprocess::ipcdetail::block_header::value_offset	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type value_offset() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
boost::interprocess::ipcdetail::bool_	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct bool_ : integral_constant<bool, C_>$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:integral_constant
boost::interprocess::ipcdetail::bool_::value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const bool value = C_;$/;"	m	struct:boost::interprocess::ipcdetail::bool_	access:public
boost::interprocess::ipcdetail::build_number_seq	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct build_number_seq<0, index_tuple<Indexes...> >$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::build_number_seq	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct build_number_seq<Num, index_tuple<Indexes...> >$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:build_number_seq
boost::interprocess::ipcdetail::build_number_seq::type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^{  typedef index_tuple<Indexes...> type;  };$/;"	t	struct:boost::interprocess::ipcdetail::build_number_seq	access:public
boost::interprocess::ipcdetail::bytes_to_str	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^inline bool bytes_to_str(const void *mem, const std::size_t mem_length, char *out_str, std::size_t &out_length)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const void *mem, const std::size_t mem_length, char *out_str, std::size_t &out_length)
boost::interprocess::ipcdetail::cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class cache_impl$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::cache_impl::cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl(const cache_impl &other)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(const cache_impl &other)
boost::interprocess::ipcdetail::cache_impl::cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl(segment_manager *segment_mngr, size_type max_cached_nodes)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(segment_manager *segment_mngr, size_type max_cached_nodes)
boost::interprocess::ipcdetail::cache_impl::cached_allocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void *cached_allocation()$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:()
boost::interprocess::ipcdetail::cache_impl::cached_allocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void cached_allocation(size_type n, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(size_type n, multiallocation_chain &chain)
boost::interprocess::ipcdetail::cache_impl::cached_deallocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void cached_deallocation(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(multiallocation_chain &chain)
boost::interprocess::ipcdetail::cache_impl::cached_deallocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void cached_deallocation(void *ptr)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(void *ptr)
boost::interprocess::ipcdetail::cache_impl::deallocate_all_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_all_cached_nodes()$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:()
boost::interprocess::ipcdetail::cache_impl::get_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type get_max_cached_nodes() const$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:() const
boost::interprocess::ipcdetail::cache_impl::get_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool *get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:() const
boost::interprocess::ipcdetail::cache_impl::get_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   segment_manager *get_segment_manager() const$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:() const
boost::interprocess::ipcdetail::cache_impl::m_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain         m_cached_nodes;$/;"	m	class:boost::interprocess::ipcdetail::cache_impl	access:private
boost::interprocess::ipcdetail::cache_impl::m_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type                     m_max_cached_nodes;$/;"	m	class:boost::interprocess::ipcdetail::cache_impl	access:private
boost::interprocess::ipcdetail::cache_impl::mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   node_pool_ptr                 mp_node_pool;$/;"	m	class:boost::interprocess::ipcdetail::cache_impl	access:private
boost::interprocess::ipcdetail::cache_impl::multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::multiallocation_chain         multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::cache_impl	access:private
boost::interprocess::ipcdetail::cache_impl::node_pool_ptr	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<NodePool>::type                     node_pool_ptr;$/;"	t	class:boost::interprocess::ipcdetail::cache_impl	access:private
boost::interprocess::ipcdetail::cache_impl::priv_deallocate_n_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void priv_deallocate_n_nodes(size_type n)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:private	signature:(size_type n)
boost::interprocess::ipcdetail::cache_impl::priv_deallocate_remaining_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void priv_deallocate_remaining_nodes()$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:private	signature:()
boost::interprocess::ipcdetail::cache_impl::segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::segment_manager            segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::cache_impl	access:public
boost::interprocess::ipcdetail::cache_impl::set_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void set_max_cached_nodes(size_type newmax)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(size_type newmax)
boost::interprocess::ipcdetail::cache_impl::size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::segment_manager::size_type    size_type;$/;"	t	class:boost::interprocess::ipcdetail::cache_impl	access:private
boost::interprocess::ipcdetail::cache_impl::swap	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void swap(cache_impl &other)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(cache_impl &other)
boost::interprocess::ipcdetail::cache_impl::void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      void_pointer                                          void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::cache_impl	access:private
boost::interprocess::ipcdetail::cache_impl::~cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   ~cache_impl()$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:()
boost::interprocess::ipcdetail::cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^class cached_adaptive_pool_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:ipcdetail::cached_allocator_impl
boost::interprocess::ipcdetail::cached_adaptive_pool_v1::base_t	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         , 1> base_t;$/;"	t	class:boost::interprocess::ipcdetail::cached_adaptive_pool_v1	access:public
boost::interprocess::ipcdetail::cached_adaptive_pool_v1::cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool_v1$/;"	f	class:boost::interprocess::ipcdetail::cached_adaptive_pool_v1	access:public	signature:(const cached_adaptive_pool_v1 <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::ipcdetail::cached_adaptive_pool_v1::cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool_v1(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::ipcdetail::cached_adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr, size_type max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
boost::interprocess::ipcdetail::cached_adaptive_pool_v1::rebind	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::cached_adaptive_pool_v1	access:public
boost::interprocess::ipcdetail::cached_adaptive_pool_v1::rebind::other	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::ipcdetail::cached_adaptive_pool_v1::rebind	access:public
boost::interprocess::ipcdetail::cached_adaptive_pool_v1::size_type	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   typedef typename base_t::size_type size_type;$/;"	t	class:boost::interprocess::ipcdetail::cached_adaptive_pool_v1	access:public
boost::interprocess::ipcdetail::cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class cached_allocator_impl$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:array_allocation_impl
boost::interprocess::ipcdetail::cached_allocator_impl::DEFAULT_MAX_CACHED_NODES	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   static const std::size_t DEFAULT_MAX_CACHED_NODES = 64;$/;"	m	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
boost::interprocess::ipcdetail::cached_allocator_impl::allocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate(size_type count, cvoid_pointer hint = 0)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(size_type count, cvoid_pointer hint = 0)
boost::interprocess::ipcdetail::cached_allocator_impl::allocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void allocate_individual(size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(size_type num_elements, multiallocation_chain &chain)
boost::interprocess::ipcdetail::cached_allocator_impl::allocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:()
boost::interprocess::ipcdetail::cached_allocator_impl::base_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         , typename NodePool::segment_manager> base_t;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:private
boost::interprocess::ipcdetail::cached_allocator_impl::cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(const cached_allocator_impl <T2, NodePool2, Version> &other)
boost::interprocess::ipcdetail::cached_allocator_impl::cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl(const cached_allocator_impl &other)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(const cached_allocator_impl &other)
boost::interprocess::ipcdetail::cached_allocator_impl::cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl(segment_manager *segment_mngr, size_type max_cached_nodes)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(segment_manager *segment_mngr, size_type max_cached_nodes)
boost::interprocess::ipcdetail::cached_allocator_impl::cvoid_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<const void>::type                cvoid_pointer;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
boost::interprocess::ipcdetail::cached_allocator_impl::deallocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate(const pointer &ptr, size_type count)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(const pointer &ptr, size_type count)
boost::interprocess::ipcdetail::cached_allocator_impl::deallocate_cache	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_cache()$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:()
boost::interprocess::ipcdetail::cached_allocator_impl::deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:()
boost::interprocess::ipcdetail::cached_allocator_impl::deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:()
boost::interprocess::ipcdetail::cached_allocator_impl::deallocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_individual(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(multiallocation_chain &chain)
boost::interprocess::ipcdetail::cached_allocator_impl::deallocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(const pointer &p)
boost::interprocess::ipcdetail::cached_allocator_impl::get_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type get_max_cached_nodes() const$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:() const
boost::interprocess::ipcdetail::cached_allocator_impl::get_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:() const
boost::interprocess::ipcdetail::cached_allocator_impl::get_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:() const
boost::interprocess::ipcdetail::cached_allocator_impl::m_cache	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl<node_pool_t> m_cache;$/;"	m	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:private
boost::interprocess::ipcdetail::cached_allocator_impl::multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::multiallocation_chain        multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
boost::interprocess::ipcdetail::cached_allocator_impl::node_pool_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef NodePool                                      node_pool_t;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
boost::interprocess::ipcdetail::cached_allocator_impl::operator =	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl & operator=(const cached_allocator_impl& other);$/;"	p	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:private	signature:(const cached_allocator_impl& other)
boost::interprocess::ipcdetail::cached_allocator_impl::pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::pointer                      pointer;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
boost::interprocess::ipcdetail::cached_allocator_impl::segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::segment_manager            segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
boost::interprocess::ipcdetail::cached_allocator_impl::set_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void set_max_cached_nodes(size_type newmax)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(size_type newmax)
boost::interprocess::ipcdetail::cached_allocator_impl::size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::size_type                    size_type;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
boost::interprocess::ipcdetail::cached_allocator_impl::swap	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   friend void swap(cached_allocator_impl &alloc1, cached_allocator_impl &alloc2)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:friend	signature:(cached_allocator_impl &alloc1, cached_allocator_impl &alloc2)
boost::interprocess::ipcdetail::cached_allocator_impl::value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::value_type                   value_type;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
boost::interprocess::ipcdetail::cached_allocator_impl::void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename segment_manager::void_pointer        void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
boost::interprocess::ipcdetail::cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^class cached_node_allocator_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:ipcdetail::cached_allocator_impl
boost::interprocess::ipcdetail::cached_node_allocator_v1::base_t	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         , 1> base_t;$/;"	t	class:boost::interprocess::ipcdetail::cached_node_allocator_v1	access:public
boost::interprocess::ipcdetail::cached_node_allocator_v1::cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator_v1$/;"	f	class:boost::interprocess::ipcdetail::cached_node_allocator_v1	access:public	signature:(const cached_node_allocator_v1 <T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::ipcdetail::cached_node_allocator_v1::cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator_v1(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::ipcdetail::cached_node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr, size_type max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
boost::interprocess::ipcdetail::cached_node_allocator_v1::rebind	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::cached_node_allocator_v1	access:public
boost::interprocess::ipcdetail::cached_node_allocator_v1::rebind::other	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         <T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::ipcdetail::cached_node_allocator_v1::rebind	access:public
boost::interprocess::ipcdetail::cached_node_allocator_v1::size_type	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   typedef typename base_t::size_type size_type;$/;"	t	class:boost::interprocess::ipcdetail::cached_node_allocator_v1	access:public
boost::interprocess::ipcdetail::char_if_void	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct char_if_void$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::char_if_void	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct char_if_void<void>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::char_if_void::type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::char_if_void	access:public
boost::interprocess::ipcdetail::char_if_void::type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef char type;$/;"	t	struct:boost::interprocess::ipcdetail::char_if_void	access:public
boost::interprocess::ipcdetail::char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class char_ptr_holder$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::char_ptr_holder::char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const CharType *name)$/;"	f	class:boost::interprocess::ipcdetail::char_ptr_holder	access:public	signature:(const CharType *name)
boost::interprocess::ipcdetail::char_ptr_holder::char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const anonymous_instance_t *)$/;"	f	class:boost::interprocess::ipcdetail::char_ptr_holder	access:public	signature:(const anonymous_instance_t *)
boost::interprocess::ipcdetail::char_ptr_holder::char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const unique_instance_t *)$/;"	f	class:boost::interprocess::ipcdetail::char_ptr_holder	access:public	signature:(const unique_instance_t *)
boost::interprocess::ipcdetail::char_ptr_holder::m_name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharType *m_name;$/;"	m	class:boost::interprocess::ipcdetail::char_ptr_holder	access:private
boost::interprocess::ipcdetail::char_ptr_holder::operator const CharType *	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   operator const CharType *()$/;"	f	class:boost::interprocess::ipcdetail::char_ptr_holder	access:public	signature:()
boost::interprocess::ipcdetail::close_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool close_file(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
boost::interprocess::ipcdetail::close_lock_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline void close_lock_file(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
boost::interprocess::ipcdetail::compare_file_serial	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool compare_file_serial(int fd, const locking_file_serial_id &id)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd, const locking_file_serial_id &id)
boost::interprocess::ipcdetail::condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct condattr_wrapper$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::condattr_wrapper::condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      condattr_wrapper()$/;"	f	struct:boost::interprocess::ipcdetail::condattr_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condattr_wrapper::m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_condattr_t m_attr;$/;"	m	struct:boost::interprocess::ipcdetail::condattr_wrapper	access:public
boost::interprocess::ipcdetail::condattr_wrapper::operator pthread_condattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_condattr_t&(){  return m_attr;  }$/;"	f	struct:boost::interprocess::ipcdetail::condattr_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condattr_wrapper::~condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~condattr_wrapper() { pthread_condattr_destroy(&m_attr); }$/;"	f	struct:boost::interprocess::ipcdetail::condattr_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condition_8a_wrapper	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^class condition_8a_wrapper$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::condition_8a_wrapper::algo_type	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   typedef ipcdetail::condition_algorithm_8a<ConditionMembers> algo_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:private
boost::interprocess::ipcdetail::condition_8a_wrapper::condition_8a_wrapper	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_8a_wrapper(){}$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condition_8a_wrapper::condition_8a_wrapper	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_8a_wrapper(const condition_8a_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:private	signature:(const condition_8a_wrapper &)
boost::interprocess::ipcdetail::condition_8a_wrapper::get_members	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   ConditionMembers & get_members()$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condition_8a_wrapper::get_members	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   const ConditionMembers & get_members() const$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:() const
boost::interprocess::ipcdetail::condition_8a_wrapper::m_data	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   ConditionMembers m_data;$/;"	m	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:private
boost::interprocess::ipcdetail::condition_8a_wrapper::notify_all	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condition_8a_wrapper::notify_one	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condition_8a_wrapper::operator =	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_8a_wrapper &operator=(const condition_8a_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:private	signature:(const condition_8a_wrapper &)
boost::interprocess::ipcdetail::condition_8a_wrapper::timed_wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::condition_8a_wrapper::timed_wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::ipcdetail::condition_8a_wrapper::wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:(L& lock)
boost::interprocess::ipcdetail::condition_8a_wrapper::wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:(L& lock, Pr pred)
boost::interprocess::ipcdetail::condition_8a_wrapper::~condition_8a_wrapper	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   ~condition_8a_wrapper(){}$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condition_algorithm_8a	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^class condition_algorithm_8a$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::condition_algorithm_8a::condition_algorithm_8a	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_algorithm_8a();$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private	signature:()
boost::interprocess::ipcdetail::condition_algorithm_8a::condition_algorithm_8a	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_algorithm_8a(const condition_algorithm_8a &);$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private	signature:(const condition_algorithm_8a &)
boost::interprocess::ipcdetail::condition_algorithm_8a::integer_type	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   typedef typename ConditionMembers::integer_type    integer_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private
boost::interprocess::ipcdetail::condition_algorithm_8a::mutex_type	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   typedef typename ConditionMembers::mutex_type      mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private
boost::interprocess::ipcdetail::condition_algorithm_8a::operator =	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_algorithm_8a &operator=(const condition_algorithm_8a &);$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private	signature:(const condition_algorithm_8a &)
boost::interprocess::ipcdetail::condition_algorithm_8a::semaphore_type	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   typedef typename ConditionMembers::semaphore_type  semaphore_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private
boost::interprocess::ipcdetail::condition_algorithm_8a::signal	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   static void signal(ConditionMembers &data, bool broadcast);$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:public	signature:(ConditionMembers &data, bool broadcast)
boost::interprocess::ipcdetail::condition_algorithm_8a::signal	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^inline void condition_algorithm_8a<ConditionMembers>::signal(ConditionMembers &data, bool broadcast)$/;"	f	class:boost::interprocess::ipcdetail::condition_algorithm_8a	signature:(ConditionMembers &data, bool broadcast)
boost::interprocess::ipcdetail::condition_algorithm_8a::wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   static bool wait  ( ConditionMembers &data, Lock &lock$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:public	signature:( ConditionMembers &data, Lock &lock , bool timeout_enabled, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::condition_algorithm_8a::wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^inline bool condition_algorithm_8a<ConditionMembers>::wait$/;"	f	class:boost::interprocess::ipcdetail::condition_algorithm_8a	signature:( ConditionMembers &data , Lock &lock , bool tout_enabled , const boost::posix_time::ptime &abs_time )
boost::interprocess::ipcdetail::condition_algorithm_8a::~condition_algorithm_8a	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   ~condition_algorithm_8a();$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private	signature:()
boost::interprocess::ipcdetail::condition_any_algorithm	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^class condition_any_algorithm$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::condition_any_algorithm::condition_any_algorithm	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_algorithm();$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:()
boost::interprocess::ipcdetail::condition_any_algorithm::condition_any_algorithm	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_algorithm(const condition_any_algorithm &);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:(const condition_any_algorithm &)
boost::interprocess::ipcdetail::condition_any_algorithm::condvar_type	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   typedef typename ConditionAnyMembers::condvar_type    condvar_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private
boost::interprocess::ipcdetail::condition_any_algorithm::do_timed_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   static bool do_timed_wait(ConditionAnyMembers &data, Lock& lock, const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:(ConditionAnyMembers &data, Lock& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::condition_any_algorithm::do_timed_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^bool condition_any_algorithm<ConditionAnyMembers>::do_timed_wait$/;"	f	class:boost::interprocess::ipcdetail::condition_any_algorithm	signature:(ConditionAnyMembers &data, Lock& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::condition_any_algorithm::do_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   static void do_wait(ConditionAnyMembers &data, Lock& lock);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:(ConditionAnyMembers &data, Lock& lock)
boost::interprocess::ipcdetail::condition_any_algorithm::do_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^void condition_any_algorithm<ConditionAnyMembers>::do_wait$/;"	f	class:boost::interprocess::ipcdetail::condition_any_algorithm	signature:(ConditionAnyMembers &data, Lock& lock)
boost::interprocess::ipcdetail::condition_any_algorithm::mutex_type	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   typedef typename ConditionAnyMembers::mutex_type      mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private
boost::interprocess::ipcdetail::condition_any_algorithm::operator =	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_algorithm &operator=(const condition_any_algorithm &);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:(const condition_any_algorithm &)
boost::interprocess::ipcdetail::condition_any_algorithm::signal	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   static void signal( ConditionAnyMembers &data, bool broadcast);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:public	signature:( ConditionAnyMembers &data, bool broadcast)
boost::interprocess::ipcdetail::condition_any_algorithm::signal	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^void condition_any_algorithm<ConditionAnyMembers>::signal(ConditionAnyMembers &data, bool broadcast)$/;"	f	class:boost::interprocess::ipcdetail::condition_any_algorithm	signature:(ConditionAnyMembers &data, bool broadcast)
boost::interprocess::ipcdetail::condition_any_algorithm::wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   static bool wait  ( ConditionAnyMembers &data, Lock &mut$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:public	signature:( ConditionAnyMembers &data, Lock &mut , bool timeout_enabled, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::condition_any_algorithm::wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^bool condition_any_algorithm<ConditionAnyMembers>::wait$/;"	f	class:boost::interprocess::ipcdetail::condition_any_algorithm	signature:( ConditionAnyMembers &data , Lock &lock , bool tout_enabled , const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::condition_any_algorithm::~condition_any_algorithm	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   ~condition_any_algorithm();$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:()
boost::interprocess::ipcdetail::condition_any_wrapper	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^class condition_any_wrapper$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::condition_any_wrapper::algo_type	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   typedef ipcdetail::condition_any_algorithm<ConditionAnyMembers> algo_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:private
boost::interprocess::ipcdetail::condition_any_wrapper::condition_any_wrapper	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_wrapper(){}$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condition_any_wrapper::condition_any_wrapper	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_wrapper(const condition_any_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:private	signature:(const condition_any_wrapper &)
boost::interprocess::ipcdetail::condition_any_wrapper::get_members	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   ConditionAnyMembers & get_members()$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condition_any_wrapper::get_members	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   const ConditionAnyMembers & get_members() const$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:() const
boost::interprocess::ipcdetail::condition_any_wrapper::m_data	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   ConditionAnyMembers m_data;$/;"	m	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:private
boost::interprocess::ipcdetail::condition_any_wrapper::notify_all	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condition_any_wrapper::notify_one	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condition_any_wrapper::operator =	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_wrapper &operator=(const condition_any_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:private	signature:(const condition_any_wrapper &)
boost::interprocess::ipcdetail::condition_any_wrapper::timed_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::condition_any_wrapper::timed_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::ipcdetail::condition_any_wrapper::wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:(L& lock)
boost::interprocess::ipcdetail::condition_any_wrapper::wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:(L& lock, Pr pred)
boost::interprocess::ipcdetail::condition_any_wrapper::~condition_any_wrapper	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   ~condition_any_wrapper(){}$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class condition_initializer$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::condition_initializer::condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      condition_initializer(pthread_cond_t &cond, pthread_condattr_t &cond_attr)$/;"	f	class:boost::interprocess::ipcdetail::condition_initializer	access:public	signature:(pthread_cond_t &cond, pthread_condattr_t &cond_attr)
boost::interprocess::ipcdetail::condition_initializer::mp_cond	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_cond_t *mp_cond;$/;"	m	class:boost::interprocess::ipcdetail::condition_initializer	access:private
boost::interprocess::ipcdetail::condition_initializer::release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release()       { mp_cond = 0; }$/;"	f	class:boost::interprocess::ipcdetail::condition_initializer	access:public	signature:()
boost::interprocess::ipcdetail::condition_initializer::~condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~condition_initializer()   {  if(mp_cond) pthread_cond_destroy(mp_cond);  }$/;"	f	class:boost::interprocess::ipcdetail::condition_initializer	access:public	signature:()
boost::interprocess::ipcdetail::const_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct const_cast_tag {};$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::create_directory	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool create_directory(const char *path)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *path)
boost::interprocess::ipcdetail::create_enum_t	/usr/include/boost/interprocess/creation_tags.hpp	/^enum create_enum_t$/;"	g	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::create_new_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t create_new_file$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name, mode_t mode, const permissions & perm = permissions(), bool temporary = false)
boost::interprocess::ipcdetail::create_open_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^class create_open_func$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::create_open_func::create_open_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   create_open_func(BasicManagedMemoryImpl * const frontend, create_enum_t type)$/;"	f	class:boost::interprocess::ipcdetail::create_open_func	access:public	signature:(BasicManagedMemoryImpl * const frontend, create_enum_t type)
boost::interprocess::ipcdetail::create_open_func::get_min_size	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::size_t get_min_size() const$/;"	f	class:boost::interprocess::ipcdetail::create_open_func	access:public	signature:() const
boost::interprocess::ipcdetail::create_open_func::m_frontend	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   BasicManagedMemoryImpl *m_frontend;$/;"	m	class:boost::interprocess::ipcdetail::create_open_func	access:private
boost::interprocess::ipcdetail::create_open_func::m_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   create_enum_t           m_type;$/;"	m	class:boost::interprocess::ipcdetail::create_open_func	access:private
boost::interprocess::ipcdetail::create_open_func::operator ()	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool operator()(void *addr, std::size_t size, bool created) const$/;"	f	class:boost::interprocess::ipcdetail::create_open_func	access:public	signature:(void *addr, std::size_t size, bool created) const
boost::interprocess::ipcdetail::create_open_func::size_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename BasicManagedMemoryImpl::size_type size_type;$/;"	t	class:boost::interprocess::ipcdetail::create_open_func	access:private
boost::interprocess::ipcdetail::create_or_open_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t create_or_open_file$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name, mode_t mode, const permissions & perm = permissions(), bool temporary = false)
boost::interprocess::ipcdetail::create_tmp_and_clean_old	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void create_tmp_and_clean_old(std::string &tmp_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(std::string &tmp_name)
boost::interprocess::ipcdetail::create_tmp_and_clean_old_and_get_filename	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void create_tmp_and_clean_old_and_get_filename(const char *filename, std::string &tmp_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *filename, std::string &tmp_name)
boost::interprocess::ipcdetail::ct_max_pow2_less	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct ct_max_pow2_less$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::ct_rounded_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct ct_rounded_size$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::ct_rounded_size::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/utilities.hpp	/^   BOOST_STATIC_ASSERT((RoundTo != 0));$/;"	p	struct:boost::interprocess::ipcdetail::ct_rounded_size	access:public	signature:(RoundTo != 0)
boost::interprocess::ipcdetail::ct_rounded_size::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/utilities.hpp	/^   BOOST_STATIC_ASSERT(intermediate_value <= std::size_t(-1)\/RoundTo);$/;"	p	struct:boost::interprocess::ipcdetail::ct_rounded_size	access:public	signature:(intermediate_value <= std::size_t(-1)/RoundTo)
boost::interprocess::ipcdetail::ct_rounded_size::intermediate_value	/usr/include/boost/interprocess/detail/utilities.hpp	/^   static const std::size_t intermediate_value = (OrigSize-1)\/RoundTo+1;$/;"	m	struct:boost::interprocess::ipcdetail::ct_rounded_size	access:public
boost::interprocess::ipcdetail::ct_rounded_size::value	/usr/include/boost/interprocess/detail/utilities.hpp	/^   static const std::size_t value = intermediate_value*RoundTo;$/;"	m	struct:boost::interprocess::ipcdetail::ct_rounded_size	access:public
boost::interprocess::ipcdetail::delete_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_file(const char *name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name)
boost::interprocess::ipcdetail::delete_subdirectories	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_subdirectories(const std::string &refcstrRootDirectory, const char *dont_delete_this)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const std::string &refcstrRootDirectory, const char *dont_delete_this)
boost::interprocess::ipcdetail::delete_subdirectories_recursive	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_subdirectories_recursive$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const std::string &refcstrRootDirectory, const char *dont_delete_this, unsigned int count)
boost::interprocess::ipcdetail::destroy_if_last_link_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct destroy_if_last_link_func$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::destroy_if_last_link_func::destroy_if_last_link_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   destroy_if_last_link_func(NodePool *pool)$/;"	f	struct:boost::interprocess::ipcdetail::destroy_if_last_link_func	access:public	signature:(NodePool *pool)
boost::interprocess::ipcdetail::destroy_if_last_link_func::mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool                           *mp_node_pool;$/;"	m	struct:boost::interprocess::ipcdetail::destroy_if_last_link_func	access:public
boost::interprocess::ipcdetail::destroy_if_last_link_func::operator ()	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::destroy_if_last_link_func	access:public	signature:()
boost::interprocess::ipcdetail::destroy_node_pool_if_last_link	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^inline void destroy_node_pool_if_last_link(NodePool *pool)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(NodePool *pool)
boost::interprocess::ipcdetail::disable_if	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct disable_if : public enable_if_c<!Cond::value, T> {};$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:enable_if_c
boost::interprocess::ipcdetail::do_swap	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline void do_swap(T& x, T& y)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(T& x, T& y)
boost::interprocess::ipcdetail::dynamic_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct dynamic_cast_tag {};$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::enable_if	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if : public enable_if_c<Cond::value, T> {};$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:enable_if_c
boost::interprocess::ipcdetail::enable_if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if_c {$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::enable_if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if_c<false, T> {};$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::enable_if_c::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^  typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::enable_if_c	access:public
boost::interprocess::ipcdetail::equal_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline bool equal_systemwide_thread_id(const OS_systemwide_thread_id_t &id1, const OS_systemwide_thread_id_t &id2)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const OS_systemwide_thread_id_t &id1, const OS_systemwide_thread_id_t &id2)
boost::interprocess::ipcdetail::equal_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline bool equal_thread_id(OS_thread_id_t id1, OS_thread_id_t id2)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(OS_thread_id_t id1, OS_thread_id_t id2)
boost::interprocess::ipcdetail::false_	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef bool_<false>       false_;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::false_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef false_ false_type;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::file_handle_from_mapping_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t file_handle_from_mapping_handle(mapping_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(mapping_handle_t hnd)
boost::interprocess::ipcdetail::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^class file_wrapper$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::file_wrapper::file_handle_t	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^      :  m_handle(file_handle_t(ipcdetail::invalid_file()))$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(ipcdetail::invalid_file(
boost::interprocess::ipcdetail::file_wrapper::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper();$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::file_wrapper::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(create_only_t, const char *name, mode_t mode, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(create_only_t, const char *name, mode_t mode, const permissions &perm = permissions())
boost::interprocess::ipcdetail::file_wrapper::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(open_only_t, const char *name, mode_t mode)
boost::interprocess::ipcdetail::file_wrapper::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(open_or_create_t, const char *name, mode_t mode, const permissions &perm  = permissions())$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(open_or_create_t, const char *name, mode_t mode, const permissions &perm = permissions())
boost::interprocess::ipcdetail::file_wrapper::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline file_wrapper::file_wrapper()$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:()
boost::interprocess::ipcdetail::file_wrapper::get_mapping_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:() const
boost::interprocess::ipcdetail::file_wrapper::get_mapping_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline mapping_handle_t file_wrapper::get_mapping_handle() const$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:() const
boost::interprocess::ipcdetail::file_wrapper::get_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:() const
boost::interprocess::ipcdetail::file_wrapper::get_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline mode_t file_wrapper::get_mode() const$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:() const
boost::interprocess::ipcdetail::file_wrapper::get_name	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:() const
boost::interprocess::ipcdetail::file_wrapper::get_name	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline const char *file_wrapper::get_name() const$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:() const
boost::interprocess::ipcdetail::file_wrapper::get_size	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   bool get_size(offset_t &size) const;$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(offset_t &size) const
boost::interprocess::ipcdetail::file_wrapper::get_size	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::get_size(offset_t &size) const$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:(offset_t &size) const
boost::interprocess::ipcdetail::file_wrapper::m_filename	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   std::string       m_filename;$/;"	m	class:boost::interprocess::ipcdetail::file_wrapper	access:private
boost::interprocess::ipcdetail::file_wrapper::m_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::ipcdetail::file_wrapper	access:private
boost::interprocess::ipcdetail::file_wrapper::m_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mode_t      m_mode;$/;"	m	class:boost::interprocess::ipcdetail::file_wrapper	access:private
boost::interprocess::ipcdetail::file_wrapper::priv_close	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:private	signature:()
boost::interprocess::ipcdetail::file_wrapper::priv_close	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::priv_close()$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:()
boost::interprocess::ipcdetail::file_wrapper::priv_open_or_create	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   bool priv_open_or_create(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm);$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:private	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm)
boost::interprocess::ipcdetail::file_wrapper::priv_open_or_create	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::priv_open_or_create$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm = permissions())
boost::interprocess::ipcdetail::file_wrapper::remove	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::file_wrapper::remove	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::remove(const char *filename)$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:(const char *filename)
boost::interprocess::ipcdetail::file_wrapper::swap	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void swap(file_wrapper &other);$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(file_wrapper &other)
boost::interprocess::ipcdetail::file_wrapper::swap	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::swap(file_wrapper &other)$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:(file_wrapper &other)
boost::interprocess::ipcdetail::file_wrapper::truncate	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void truncate(offset_t length);$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(offset_t length)
boost::interprocess::ipcdetail::file_wrapper::truncate	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::truncate(offset_t length)$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:(offset_t length)
boost::interprocess::ipcdetail::file_wrapper::~file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   ~file_wrapper();$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::file_wrapper::~file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline file_wrapper::~file_wrapper()$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:()
boost::interprocess::ipcdetail::fill_file_serial_id	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool fill_file_serial_id(int fd, locking_file_serial_id &id)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd, locking_file_serial_id &id)
boost::interprocess::ipcdetail::floor_log2	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline std::size_t floor_log2 (std::size_t x)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(std::size_t x)
boost::interprocess::ipcdetail::for_each_file_in_dir	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool for_each_file_in_dir(const char *dir, Function f)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *dir, Function f)
boost::interprocess::ipcdetail::gcd	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer gcd(Integer A, Integer B)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(Integer A, Integer B)
boost::interprocess::ipcdetail::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::const_type get(const tuple<Values...>& t)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const tuple<Values...>& t)
boost::interprocess::ipcdetail::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::type get(tuple<Values...>& t)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(tuple<Values...>& t)
boost::interprocess::ipcdetail::get_bootstamp	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^      inline void get_bootstamp(std::string &s, bool add = false)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(std::string &s, bool add = false)
boost::interprocess::ipcdetail::get_current_process_creation_time	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline long double get_current_process_creation_time()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
boost::interprocess::ipcdetail::get_current_process_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_process_id_t get_current_process_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
boost::interprocess::ipcdetail::get_current_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_systemwide_thread_id_t get_current_systemwide_thread_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
boost::interprocess::ipcdetail::get_current_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_thread_id_t get_current_thread_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
boost::interprocess::ipcdetail::get_file_pointer	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool get_file_pointer(file_handle_t hnd, offset_t &off)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, offset_t &off)
boost::interprocess::ipcdetail::get_file_size	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool get_file_size(file_handle_t hnd, offset_t &size)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, offset_t &size)
boost::interprocess::ipcdetail::get_impl	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class get_impl<0, tuple<Head, Values...> >$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::get_impl	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class get_impl<I, tuple<Head, Values...> >$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::get_impl::Element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Values...> >::type   Element;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:private
boost::interprocess::ipcdetail::get_impl::Next	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef get_impl<I-1, tuple<Values...> >                       Next;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:private
boost::interprocess::ipcdetail::get_impl::const_type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Element>::type            const_type;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:public
boost::interprocess::ipcdetail::get_impl::const_type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Head>::type   const_type;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:public
boost::interprocess::ipcdetail::get_impl::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t)  { return Next::get(t.tail()); }$/;"	f	class:boost::interprocess::ipcdetail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
boost::interprocess::ipcdetail::get_impl::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t){ return t.head(); }$/;"	f	class:boost::interprocess::ipcdetail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
boost::interprocess::ipcdetail::get_impl::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static type       get(tuple<Head, Values...>& t)      { return t.head(); }$/;"	f	class:boost::interprocess::ipcdetail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
boost::interprocess::ipcdetail::get_impl::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static type get(tuple<Head, Values...>& t)              { return Next::get(t.tail()); }$/;"	f	class:boost::interprocess::ipcdetail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
boost::interprocess::ipcdetail::get_impl::type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Element>::type                  type;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:public
boost::interprocess::ipcdetail::get_impl::type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Head>::type         type;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:public
boost::interprocess::ipcdetail::get_invalid_process_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_process_id_t get_invalid_process_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
boost::interprocess::ipcdetail::get_invalid_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_systemwide_thread_id_t get_invalid_systemwide_thread_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
boost::interprocess::ipcdetail::get_invalid_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_thread_id_t get_invalid_thread_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
boost::interprocess::ipcdetail::get_or_create_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^inline NodePool *get_or_create_node_pool(typename NodePool::segment_manager *mgnr)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(typename NodePool::segment_manager *mgnr)
boost::interprocess::ipcdetail::get_or_create_node_pool_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct get_or_create_node_pool_func$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::get_or_create_node_pool_func::get_or_create_node_pool_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   get_or_create_node_pool_func(typename NodePool::segment_manager *mngr)$/;"	f	struct:boost::interprocess::ipcdetail::get_or_create_node_pool_func	access:public	signature:(typename NodePool::segment_manager *mngr)
boost::interprocess::ipcdetail::get_or_create_node_pool_func::mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool                            *mp_node_pool;$/;"	m	struct:boost::interprocess::ipcdetail::get_or_create_node_pool_func	access:public
boost::interprocess::ipcdetail::get_or_create_node_pool_func::mp_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typename NodePool::segment_manager  *mp_segment_manager;$/;"	m	struct:boost::interprocess::ipcdetail::get_or_create_node_pool_func	access:public
boost::interprocess::ipcdetail::get_or_create_node_pool_func::operator ()	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::get_or_create_node_pool_func	access:public	signature:()
boost::interprocess::ipcdetail::get_pid_str	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void get_pid_str(pid_str_t &pid_str)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(pid_str_t &pid_str)
boost::interprocess::ipcdetail::get_pid_str	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void get_pid_str(pid_str_t &pid_str, OS_process_id_t pid)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(pid_str_t &pid_str, OS_process_id_t pid)
boost::interprocess::ipcdetail::get_rounded_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline SizeType get_rounded_size(SizeType orig_size, SizeType round_to)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(SizeType orig_size, SizeType round_to)
boost::interprocess::ipcdetail::get_rounded_size_po2	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline SizeType get_rounded_size_po2(SizeType orig_size, SizeType round_to)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(SizeType orig_size, SizeType round_to)
boost::interprocess::ipcdetail::get_size	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline std::size_t get_size(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
boost::interprocess::ipcdetail::get_temporary_path	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline const char *get_temporary_path()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
boost::interprocess::ipcdetail::get_tmp_base_dir	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void get_tmp_base_dir(std::string &tmp_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(std::string &tmp_name)
boost::interprocess::ipcdetail::get_truncated_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline SizeType get_truncated_size(SizeType orig_size, SizeType multiple)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(SizeType orig_size, SizeType multiple)
boost::interprocess::ipcdetail::get_truncated_size_po2	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline SizeType get_truncated_size_po2(SizeType orig_size, SizeType multiple)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(SizeType orig_size, SizeType multiple)
boost::interprocess::ipcdetail::has_pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct has_pointer_type$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::has_pointer_type::value	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    static const bool value = sizeof(pointer_type_imp::test<T>(0)) == 1;$/;"	m	struct:boost::interprocess::ipcdetail::has_pointer_type	access:public
boost::interprocess::ipcdetail::identity	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct identity$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::identity::operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const T& operator()(const T& x) const$/;"	f	struct:boost::interprocess::ipcdetail::identity	access:public	signature:(const T& x) const
boost::interprocess::ipcdetail::identity::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::identity	access:public
boost::interprocess::ipcdetail::if_	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::if_::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef typename if_c<0 != T1::value, T2, T3>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::if_	access:public
boost::interprocess::ipcdetail::if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_c$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_c<false,T1,T2>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::if_c::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^    typedef T1 type;$/;"	t	struct:boost::interprocess::ipcdetail::if_c	access:public
boost::interprocess::ipcdetail::if_c::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^    typedef T2 type;$/;"	t	struct:boost::interprocess::ipcdetail::if_c	access:public
boost::interprocess::ipcdetail::in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^struct in_place_interface$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::in_place_interface::alignment	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   std::size_t alignment;$/;"	m	struct:boost::interprocess::ipcdetail::in_place_interface	access:public
boost::interprocess::ipcdetail::in_place_interface::construct_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void construct_n(void *mem, std::size_t num, std::size_t &constructed) = 0;$/;"	p	struct:boost::interprocess::ipcdetail::in_place_interface	access:public	signature:(void *mem, std::size_t num, std::size_t &constructed)
boost::interprocess::ipcdetail::in_place_interface::destroy_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void destroy_n(void *mem, std::size_t num, std::size_t &destroyed) = 0;$/;"	p	struct:boost::interprocess::ipcdetail::in_place_interface	access:public	signature:(void *mem, std::size_t num, std::size_t &destroyed)
boost::interprocess::ipcdetail::in_place_interface::in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   in_place_interface(std::size_t alignm, std::size_t sz, const char *tname)$/;"	f	struct:boost::interprocess::ipcdetail::in_place_interface	access:public	signature:(std::size_t alignm, std::size_t sz, const char *tname)
boost::interprocess::ipcdetail::in_place_interface::size	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   std::size_t size;$/;"	m	struct:boost::interprocess::ipcdetail::in_place_interface	access:public
boost::interprocess::ipcdetail::in_place_interface::type_name	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   const char *type_name;$/;"	m	struct:boost::interprocess::ipcdetail::in_place_interface	access:public
boost::interprocess::ipcdetail::in_place_interface::~in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual ~in_place_interface(){}$/;"	f	struct:boost::interprocess::ipcdetail::in_place_interface	access:public	signature:()
boost::interprocess::ipcdetail::index_config	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_config$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::index_config::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT                                         char_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
boost::interprocess::ipcdetail::index_config::intrusive_compare_key_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef intrusive_compare_key<CharT>            intrusive_compare_key_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
boost::interprocess::ipcdetail::index_config::intrusive_value_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   struct intrusive_value_type$/;"	s	struct:boost::interprocess::ipcdetail::index_config	access:public
boost::interprocess::ipcdetail::index_config::intrusive_value_type::type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   {  typedef intrusive_value_type_impl<HeaderBase, CharT, typename segment_manager_base::size_type>  type; };$/;"	t	struct:boost::interprocess::ipcdetail::index_config::intrusive_value_type	access:public
boost::interprocess::ipcdetail::index_config::key_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef index_key<CharT, void_pointer>        key_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
boost::interprocess::ipcdetail::index_config::mapped_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef index_data<void_pointer>              mapped_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
boost::interprocess::ipcdetail::index_config::segment_manager_base	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^      <MemoryAlgorithm>::type                            segment_manager_base;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
boost::interprocess::ipcdetail::index_config::void_pointer	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename MemoryAlgorithm::void_pointer        void_pointer;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
boost::interprocess::ipcdetail::index_data	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_data$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::index_data::index_data	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   index_data(void *ptr) : m_ptr(ptr){}$/;"	f	struct:boost::interprocess::ipcdetail::index_data	access:public	signature:(void *ptr)
boost::interprocess::ipcdetail::index_data::m_ptr	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void_pointer    m_ptr;$/;"	m	struct:boost::interprocess::ipcdetail::index_data	access:public
boost::interprocess::ipcdetail::index_data::value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::ipcdetail::index_data	access:public	signature:() const
boost::interprocess::ipcdetail::index_data::void_pointer	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef VoidPointer void_pointer;$/;"	t	struct:boost::interprocess::ipcdetail::index_data	access:public
boost::interprocess::ipcdetail::index_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_key$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::index_key::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT                                         char_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_key	access:public
boost::interprocess::ipcdetail::index_key::const_char_ptr_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^         rebind_pointer<const CharT>::type               const_char_ptr_t;$/;"	t	struct:boost::interprocess::ipcdetail::index_key	access:public
boost::interprocess::ipcdetail::index_key::difference_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename boost::intrusive::pointer_traits<const_char_ptr_t>::difference_type difference_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_key	access:public
boost::interprocess::ipcdetail::index_key::index_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   index_key (const char_type *nm, size_type length)$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:(const char_type *nm, size_type length)
boost::interprocess::ipcdetail::index_key::m_len	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type         m_len;$/;"	m	struct:boost::interprocess::ipcdetail::index_key	access:private
boost::interprocess::ipcdetail::index_key::mp_str	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const_char_ptr_t  mp_str;$/;"	m	struct:boost::interprocess::ipcdetail::index_key	access:private
boost::interprocess::ipcdetail::index_key::name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharT *name() const$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:() const
boost::interprocess::ipcdetail::index_key::name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void name(const CharT *nm)$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:(const CharT *nm)
boost::interprocess::ipcdetail::index_key::name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type name_length() const$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:() const
boost::interprocess::ipcdetail::index_key::name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void name_length(size_type len)$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:(size_type len)
boost::interprocess::ipcdetail::index_key::operator <	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator < (const index_key & right) const$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:(const index_key & right) const
boost::interprocess::ipcdetail::index_key::operator ==	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator == (const index_key & right) const$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:(const index_key & right) const
boost::interprocess::ipcdetail::index_key::size_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type size_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_key	access:public
boost::interprocess::ipcdetail::index_tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct index_tuple{};$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class instance_t$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::instance_t::instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   instance_t(){}$/;"	f	class:boost::interprocess::ipcdetail::instance_t	access:private	signature:()
boost::interprocess::ipcdetail::integral_constant	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct integral_constant$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::integral_constant::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef integral_constant<T,val> type;$/;"	t	struct:boost::interprocess::ipcdetail::integral_constant	access:public
boost::interprocess::ipcdetail::integral_constant::value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const T value = val;$/;"	m	struct:boost::interprocess::ipcdetail::integral_constant	access:public
boost::interprocess::ipcdetail::intermodule_singleton	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^class intermodule_singleton$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:windows_intermodule_singleton
boost::interprocess::ipcdetail::intermodule_singleton_common	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^class intermodule_singleton_common$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::intermodule_singleton_common::Broken	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static const ::boost::uint32_t Broken              = 3u;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
boost::interprocess::ipcdetail::intermodule_singleton_common::Destroyed	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static const ::boost::uint32_t Destroyed           = 4u;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
boost::interprocess::ipcdetail::intermodule_singleton_common::Initialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static const ::boost::uint32_t Initialized         = 2u;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
boost::interprocess::ipcdetail::intermodule_singleton_common::Initializing	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static const ::boost::uint32_t Initializing        = 1u;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
boost::interprocess::ipcdetail::intermodule_singleton_common::Uninitialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static const ::boost::uint32_t Uninitialized       = 0u;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
boost::interprocess::ipcdetail::intermodule_singleton_common::destroy_global_map_handle	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void destroy_global_map_handle()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_common::finalize_singleton_logic	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void finalize_singleton_logic(void *&ptr, volatile boost::uint32_t &this_module_singleton_initialized, singleton_destructor_t destructor)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public	signature:(void *&ptr, volatile boost::uint32_t &this_module_singleton_initialized, singleton_destructor_t destructor)
boost::interprocess::ipcdetail::intermodule_singleton_common::get_map	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static ThreadSafeGlobalMap &get_map()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_common::initialize_global_map_handle	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void initialize_global_map_handle()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_common::initialize_singleton_logic	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void initialize_singleton_logic$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public	signature:(void *&ptr, volatile boost::uint32_t &this_module_singleton_initialized, singleton_constructor_t constructor, bool phoenix)
boost::interprocess::ipcdetail::intermodule_singleton_common::mem_holder	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   intermodule_singleton_common<ThreadSafeGlobalMap>::mem_holder;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common
boost::interprocess::ipcdetail::intermodule_singleton_common::mem_holder	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   } mem_holder;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	typeref:struct:boost::interprocess::ipcdetail::intermodule_singleton_common::mem_holder_t	access:private
boost::interprocess::ipcdetail::intermodule_singleton_common::mem_holder_t	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static struct mem_holder_t$/;"	s	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private
boost::interprocess::ipcdetail::intermodule_singleton_common::mem_holder_t::aligner	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      ::boost::detail::max_align aligner;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_common::mem_holder_t	access:public
boost::interprocess::ipcdetail::intermodule_singleton_common::mem_holder_t::map_mem	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      char map_mem [sizeof(ThreadSafeGlobalMap)];$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_common::mem_holder_t	access:public
boost::interprocess::ipcdetail::intermodule_singleton_common::singleton_constructor_t	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   typedef void*(singleton_constructor_t)(ThreadSafeGlobalMap &);$/;"	t	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
boost::interprocess::ipcdetail::intermodule_singleton_common::singleton_destructor_t	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   typedef void (singleton_destructor_t)(void *, ThreadSafeGlobalMap &);$/;"	t	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
boost::interprocess::ipcdetail::intermodule_singleton_common::this_module_map_initialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static volatile boost::uint32_t this_module_map_initialized;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private
boost::interprocess::ipcdetail::intermodule_singleton_common::this_module_map_initialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^volatile boost::uint32_t intermodule_singleton_common<ThreadSafeGlobalMap>::this_module_map_initialized;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common
boost::interprocess::ipcdetail::intermodule_singleton_common::this_module_singleton_count	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static volatile boost::uint32_t this_module_singleton_count;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private
boost::interprocess::ipcdetail::intermodule_singleton_common::this_module_singleton_count	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^volatile boost::uint32_t intermodule_singleton_common<ThreadSafeGlobalMap>::this_module_singleton_count;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common
boost::interprocess::ipcdetail::intermodule_singleton_helpers	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^namespace intermodule_singleton_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::intermodule_singleton_helpers	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^namespace intermodule_singleton_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::intermodule_singleton_helpers	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^namespace intermodule_singleton_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::intermodule_singleton_helpers::check_if_filename_complies_with_pid	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^static bool check_if_filename_complies_with_pid$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:(const char *filename, const char *prefix, OS_process_id_t pid, std::string &file_suffix, bool creation_time = false)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::create_tmp_subdir_and_get_pid_based_filepath	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^static void create_tmp_subdir_and_get_pid_based_filepath$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:(const char *subdir_name, const char *file_prefix, OS_process_id_t pid, std::string &s, bool creation_time = false)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::get_map_base_name	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^inline const char *get_map_base_name()$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_helpers::get_map_name	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^inline void get_map_name(std::string &map_name)$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:(std::string &map_name)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::get_map_size	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^inline std::size_t get_map_size()$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_helpers::get_pid_creation_time_str	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^inline void get_pid_creation_time_str(std::string &s)$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:(std::string &s)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^struct thread_safe_global_map_dependant<managed_global_memory>$/;"	s	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^struct thread_safe_global_map_dependant<windows_semaphore_based_map>$/;"	s	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::GMemMarkToBeRemoved	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static const int GMemMarkToBeRemoved = -1;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::GMemNotPresent	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static const int GMemNotPresent      = -2;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::apply_gmem_erase_logic	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static void apply_gmem_erase_logic(const char *filepath, const char *filename)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private	signature:(const char *filepath, const char *filename)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::apply_gmem_erase_logic	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static void apply_gmem_erase_logic(const char *, const char *){}$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(const char *, const char *)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::atomic_func	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static void atomic_func(managed_global_memory &map, F &f)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(managed_global_memory &map, F &f)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::atomic_func	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static void atomic_func(windows_semaphore_based_map &map, F &f)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(windows_semaphore_based_map &map, F &f)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::construct_map	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static void construct_map(void *addr)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(void *addr)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::construct_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static void construct_map(void *addr)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(void *addr)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::create_and_get_singleton_lock_file_path	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static void create_and_get_singleton_lock_file_path(std::string &s)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private	signature:(std::string &s)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::erase	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static bool erase(managed_global_memory &map, const char *name)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(managed_global_memory &map, const char *name)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::erase	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static bool erase(windows_semaphore_based_map &map, const char *name)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(windows_semaphore_based_map &map, const char *name)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::find	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static ref_count_ptr *find(managed_global_memory &map, const char *name)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(managed_global_memory &map, const char *name)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::find	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static ref_count_ptr *find(windows_semaphore_based_map &map, const char *name)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(windows_semaphore_based_map &map, const char *name)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::get_lock_file_base_name	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static const char *get_lock_file_base_name()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::get_lock_file_subdir_name	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static const char *get_lock_file_subdir_name()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   struct gmem_erase_func$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func::gmem_erase_func	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      gmem_erase_func(const char *shm_name, const char *singleton_lock_file_path, managed_global_memory & shm)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func	access:public	signature:(const char *shm_name, const char *singleton_lock_file_path, managed_global_memory & shm)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func::operator ()	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func::shm_	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      managed_global_memory & shm_;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func	access:public
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func::shm_name_	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      const char * const shm_name_;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func	access:public
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func::singleton_lock_file_path_	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      const char * const singleton_lock_file_path_;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func	access:public
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::insert	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static ref_count_ptr *insert(managed_global_memory &map, const char *name, const ref_count_ptr &ref)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(managed_global_memory &map, const char *name, const ref_count_ptr &ref)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::insert	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static ref_count_ptr * insert(windows_semaphore_based_map &map, const char *name, const ref_count_ptr &ref)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(windows_semaphore_based_map &map, const char *name, const ref_count_ptr &ref)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   struct lock_file_logic$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   struct lock_file_logic$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic::lock_file_logic	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      lock_file_logic(managed_global_memory &shm)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:(managed_global_memory &shm)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic::lock_file_logic	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      lock_file_logic(windows_semaphore_based_map &)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:(windows_semaphore_based_map &)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic::mshm	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      managed_global_memory &mshm;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:private
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic::operator ()	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      void operator()(void)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:(void)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic::operator ()	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      void operator()(void){}$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:(void)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic::register_lock_file	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      locking_file_serial_id * register_lock_file(int fd)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:private	signature:(int fd)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic::retry	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      bool retry() const { return retry_with_new_map; }$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:() const
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic::retry	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      bool retry() const { return retry_with_new_map; }$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:() const
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic::retry_with_new_map	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      bool retry_with_new_map;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:private
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic::retry_with_new_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      const bool retry_with_new_map;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:private
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::remove_old_gmem	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static bool remove_old_gmem()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::remove_old_gmem	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static bool remove_old_gmem()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   struct unlink_map_logic$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   struct unlink_map_logic$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic::mshm_	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      managed_global_memory &mshm_;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	access:private
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic::operator ()	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic::operator ()	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      void operator()(){}$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic::unlink_map_logic	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      unlink_map_logic(managed_global_memory &mshm)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	access:public	signature:(managed_global_memory &mshm)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic::unlink_map_logic	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      unlink_map_logic(windows_semaphore_based_map &)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	access:public	signature:(windows_semaphore_based_map &)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^class windows_semaphore_based_map$/;"	c	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map::atomic_func	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   void atomic_func(F &f)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:(F &f)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map::erase	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   bool erase(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map::find	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   ref_count_ptr *find(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map::get_map_unlocked	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   map_type &get_map_unlocked()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map::insert	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   ref_count_ptr * insert(const char *name, const ref_count_ptr &ref)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:(const char *name, const ref_count_ptr &ref)
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map::m_mtx_lock	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   winapi_mutex_wrapper     m_mtx_lock;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:private
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map::m_sem_count	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   winapi_semaphore_wrapper m_sem_count;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:private
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map::m_sem_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   winapi_semaphore_wrapper m_sem_map;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:private
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map::map_type	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   typedef std::map<std::string, ref_count_ptr> map_type;$/;"	t	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:private
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map::windows_semaphore_based_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   windows_semaphore_based_map()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map::~windows_semaphore_based_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   ~windows_semaphore_based_map()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_impl	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^class intermodule_singleton_impl$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::intermodule_singleton_impl::atentry_work	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void atentry_work()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_impl::atexit_work	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void atexit_work()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   struct fini_atomic_func$/;"	s	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func::data	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void *data() const$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func	access:public	signature:() const
boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func::fini_atomic_func	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      fini_atomic_func(ThreadSafeGlobalMap &m)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func	access:public	signature:(ThreadSafeGlobalMap &m)
boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func::m_map	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      ThreadSafeGlobalMap &m_map;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func::operator ()	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func::ret_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void *ret_ptr;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::get	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static C& get()   \/\/Let's make inlining easy$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   struct init_atomic_func$/;"	s	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func::data	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void *data() const$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func	access:public	signature:() const
boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func::init_atomic_func	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      init_atomic_func(ThreadSafeGlobalMap &m)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func	access:public	signature:(ThreadSafeGlobalMap &m)
boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func::m_map	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      ThreadSafeGlobalMap &m_map;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func::operator ()	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func::ret_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void *ret_ptr;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   intermodule_singleton_impl<C, L, P, ThreadSafeGlobalMap>::lifetime;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl
boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static lifetime_type lifetime;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      <LazyInit, lifetime_type_lazy, lifetime_type_static>::type lifetime_type;$/;"	t	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   struct lifetime_type_lazy$/;"	s	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy::dummy_function	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      bool dummy_function()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy::m_dummy	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      static volatile int m_dummy;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy	access:public
boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy::m_dummy	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^volatile int intermodule_singleton_impl<C, L, P, ThreadSafeGlobalMap>::lifetime_type_lazy::m_dummy = 0;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy
boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy::~lifetime_type_lazy	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      ~lifetime_type_lazy()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_static	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   struct lifetime_type_static$/;"	s	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	inherits:lifetime_type_lazy	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_static::lifetime_type_static	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      lifetime_type_static()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_static	access:public	signature:()
boost::interprocess::ipcdetail::intermodule_singleton_impl::singleton_constructor	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void *singleton_constructor(ThreadSafeGlobalMap &map)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private	signature:(ThreadSafeGlobalMap &map)
boost::interprocess::ipcdetail::intermodule_singleton_impl::singleton_destructor	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void singleton_destructor(void *p, ThreadSafeGlobalMap &map)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private	signature:(void *p, ThreadSafeGlobalMap &map)
boost::interprocess::ipcdetail::intermodule_singleton_impl::this_module_singleton_initialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static volatile boost::uint32_t   this_module_singleton_initialized;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::this_module_singleton_initialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^volatile boost::uint32_t intermodule_singleton_impl<C, L, P, ThreadSafeGlobalMap>::this_module_singleton_initialized = 0;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl
boost::interprocess::ipcdetail::intermodule_singleton_impl::this_module_singleton_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void*                      this_module_singleton_ptr;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
boost::interprocess::ipcdetail::intermodule_singleton_impl::this_module_singleton_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^void *intermodule_singleton_impl<C, L, P, ThreadSafeGlobalMap>::this_module_singleton_ptr = 0;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl
boost::interprocess::ipcdetail::intermodule_singleton_mutex_family	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^struct intermodule_singleton_mutex_family$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::intermodule_singleton_mutex_family::mutex_type	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef boost::interprocess::ipcdetail::spin_mutex              mutex_type;$/;"	t	struct:boost::interprocess::ipcdetail::intermodule_singleton_mutex_family	access:public
boost::interprocess::ipcdetail::intermodule_singleton_mutex_family::recursive_mutex_type	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef boost::interprocess::ipcdetail::spin_recursive_mutex    recursive_mutex_type;$/;"	t	struct:boost::interprocess::ipcdetail::intermodule_singleton_mutex_family	access:public
boost::interprocess::ipcdetail::intermodule_types	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^struct intermodule_types$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::intermodule_types::mem_algo	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef rbtree_best_fit<intermodule_singleton_mutex_family, offset_ptr<void> > mem_algo;$/;"	t	struct:boost::interprocess::ipcdetail::intermodule_types	access:public
boost::interprocess::ipcdetail::intermodule_types::open_or_create	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   struct open_or_create$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_types	access:public
boost::interprocess::ipcdetail::intermodule_types::open_or_create::type	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^            <Device, mem_algo::Alignment, FileBased, false> type;$/;"	t	struct:boost::interprocess::ipcdetail::intermodule_types::open_or_create	access:public
boost::interprocess::ipcdetail::internal_mutex_lock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^class internal_mutex_lock$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::internal_mutex_lock::internal_mutex_lock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   internal_mutex_lock(Lock &l)$/;"	f	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public	signature:(Lock &l)
boost::interprocess::ipcdetail::internal_mutex_lock::l_	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   Lock &l_;$/;"	m	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:private
boost::interprocess::ipcdetail::internal_mutex_lock::lock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   void lock()    { l_.lock(); }$/;"	f	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public	signature:()
boost::interprocess::ipcdetail::internal_mutex_lock::mutex	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public	signature:() const
boost::interprocess::ipcdetail::internal_mutex_lock::mutex_type	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   typedef typename Lock::mutex_type::internal_mutex_type  mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public
boost::interprocess::ipcdetail::internal_mutex_lock::operator unspecified_bool_type	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public	signature:() const
boost::interprocess::ipcdetail::internal_mutex_lock::unlock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   void unlock()  { l_.unlock(); }$/;"	f	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public	signature:()
boost::interprocess::ipcdetail::internal_mutex_lock::unspecified_bool_type	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   typedef void (internal_mutex_lock::*unspecified_bool_type)();$/;"	t	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:private
boost::interprocess::ipcdetail::interprocess_tester	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^class interprocess_tester$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::interprocess_tester::dont_close_on_destruction	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^   static void dont_close_on_destruction(T &t)$/;"	f	class:boost::interprocess::ipcdetail::interprocess_tester	access:public	signature:(T &t)
boost::interprocess::ipcdetail::intrusive_compare_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct intrusive_compare_key$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::intrusive_compare_key::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT char_type;$/;"	t	struct:boost::interprocess::ipcdetail::intrusive_compare_key	access:public
boost::interprocess::ipcdetail::intrusive_compare_key::intrusive_compare_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_compare_key(const CharT *str, std::size_t len)$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_compare_key	access:public	signature:(const CharT *str, std::size_t len)
boost::interprocess::ipcdetail::intrusive_compare_key::m_len	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t    m_len;$/;"	m	struct:boost::interprocess::ipcdetail::intrusive_compare_key	access:public
boost::interprocess::ipcdetail::intrusive_compare_key::mp_str	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharT *  mp_str;$/;"	m	struct:boost::interprocess::ipcdetail::intrusive_compare_key	access:public
boost::interprocess::ipcdetail::intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct intrusive_value_type_impl$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:Hook
boost::interprocess::ipcdetail::intrusive_value_type_impl::BlockHdrAlignment	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   enum  {  BlockHdrAlignment = ::boost::alignment_of<block_header<size_type> >::value  };$/;"	e	enum:boost::interprocess::ipcdetail::intrusive_value_type_impl::__anon4
boost::interprocess::ipcdetail::intrusive_value_type_impl::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharType char_type;$/;"	t	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public
boost::interprocess::ipcdetail::intrusive_value_type_impl::get_block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header<size_type> *get_block_header() const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:() const
boost::interprocess::ipcdetail::intrusive_value_type_impl::get_intrusive_value_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static intrusive_value_type_impl *get_intrusive_value_type(block_header<size_type> *hdr)$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:(block_header<size_type> *hdr)
boost::interprocess::ipcdetail::intrusive_value_type_impl::intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl(){}$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:()
boost::interprocess::ipcdetail::intrusive_value_type_impl::intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl(const intrusive_value_type_impl &);$/;"	p	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:private	signature:(const intrusive_value_type_impl &)
boost::interprocess::ipcdetail::intrusive_value_type_impl::name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   CharType *name() const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:() const
boost::interprocess::ipcdetail::intrusive_value_type_impl::name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned short name_length() const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:() const
boost::interprocess::ipcdetail::intrusive_value_type_impl::operator <	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator <(const intrusive_value_type_impl<Hook, CharType, SizeType> & other) const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:(const intrusive_value_type_impl<Hook, CharType, SizeType> & other) const
boost::interprocess::ipcdetail::intrusive_value_type_impl::operator =	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl& operator=(const intrusive_value_type_impl &);$/;"	p	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:private	signature:(const intrusive_value_type_impl &)
boost::interprocess::ipcdetail::intrusive_value_type_impl::operator ==	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator ==(const intrusive_value_type_impl<Hook, CharType, SizeType> & other) const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:(const intrusive_value_type_impl<Hook, CharType, SizeType> & other) const
boost::interprocess::ipcdetail::intrusive_value_type_impl::size_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef SizeType size_type;$/;"	t	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public
boost::interprocess::ipcdetail::intrusive_value_type_impl::value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:() const
boost::interprocess::ipcdetail::invalid_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t invalid_file()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
boost::interprocess::ipcdetail::is_convertible	/usr/include/boost/interprocess/detail/mpl.hpp	/^class is_convertible$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::is_convertible::dispatch	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static false_t dispatch(...);$/;"	p	class:boost::interprocess::ipcdetail::is_convertible	access:private	signature:(....)
boost::interprocess::ipcdetail::is_convertible::dispatch	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static true_t dispatch(U);$/;"	p	class:boost::interprocess::ipcdetail::is_convertible	access:private	signature:(U)
boost::interprocess::ipcdetail::is_convertible::false_t	/usr/include/boost/interprocess/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	c	class:boost::interprocess::ipcdetail::is_convertible	access:private
boost::interprocess::ipcdetail::is_convertible::false_t::dummy	/usr/include/boost/interprocess/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	m	class:boost::interprocess::ipcdetail::is_convertible::false_t	access:private
boost::interprocess::ipcdetail::is_convertible::trigger	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static T trigger();$/;"	p	class:boost::interprocess::ipcdetail::is_convertible	access:private	signature:()
boost::interprocess::ipcdetail::is_convertible::true_t	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef char true_t;$/;"	t	class:boost::interprocess::ipcdetail::is_convertible	access:private
boost::interprocess::ipcdetail::is_convertible::value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const bool value = sizeof(dispatch(trigger())) == sizeof(true_t);$/;"	m	class:boost::interprocess::ipcdetail::is_convertible	access:public
boost::interprocess::ipcdetail::is_cv_same	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_cv_same$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::is_cv_same::value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = is_same< typename remove_const_volatile<T>::type$/;"	m	struct:boost::interprocess::ipcdetail::is_cv_same	access:public
boost::interprocess::ipcdetail::is_normal_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool is_normal_file(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
boost::interprocess::ipcdetail::is_pointer	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_pointer$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::is_pointer	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_pointer<T*>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::is_pointer::value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = false;$/;"	m	struct:boost::interprocess::ipcdetail::is_pointer	access:public
boost::interprocess::ipcdetail::is_pointer::value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::ipcdetail::is_pointer	access:public
boost::interprocess::ipcdetail::is_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_reference$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::is_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_reference<T&>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::is_reference::value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = false;$/;"	m	struct:boost::interprocess::ipcdetail::is_reference	access:public
boost::interprocess::ipcdetail::is_reference::value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::ipcdetail::is_reference	access:public
boost::interprocess::ipcdetail::is_same	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_same$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::is_same::is_same_tester	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static no_type is_same_tester(...);$/;"	p	struct:boost::interprocess::ipcdetail::is_same	access:public	signature:(....)
boost::interprocess::ipcdetail::is_same::is_same_tester	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static yes_type is_same_tester(V*, V*);$/;"	p	struct:boost::interprocess::ipcdetail::is_same	access:public	signature:(V*, V*)
boost::interprocess::ipcdetail::is_same::no_type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   struct no_type$/;"	s	struct:boost::interprocess::ipcdetail::is_same	access:public
boost::interprocess::ipcdetail::is_same::no_type::padding	/usr/include/boost/interprocess/detail/type_traits.hpp	/^      char padding[8];$/;"	m	struct:boost::interprocess::ipcdetail::is_same::no_type	access:public
boost::interprocess::ipcdetail::is_same::t	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static T *t;$/;"	m	struct:boost::interprocess::ipcdetail::is_same	access:public
boost::interprocess::ipcdetail::is_same::u	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static U *u;$/;"	m	struct:boost::interprocess::ipcdetail::is_same	access:public
boost::interprocess::ipcdetail::is_same::value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = sizeof(yes_type) == sizeof(is_same_tester(t,u));$/;"	m	struct:boost::interprocess::ipcdetail::is_same	access:public
boost::interprocess::ipcdetail::is_same::yes_type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   typedef char yes_type;$/;"	t	struct:boost::interprocess::ipcdetail::is_same	access:public
boost::interprocess::ipcdetail::is_valid_fd	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool is_valid_fd(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
boost::interprocess::ipcdetail::lcm	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer lcm(const Integer & A, const Integer & B)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const Integer & A, const Integer & B)
boost::interprocess::ipcdetail::lock_inverter	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^class lock_inverter$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::lock_inverter::l_	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   Lock &l_;$/;"	m	class:boost::interprocess::ipcdetail::lock_inverter	access:private
boost::interprocess::ipcdetail::lock_inverter::lock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   void lock()    {   l_.unlock();   }$/;"	f	class:boost::interprocess::ipcdetail::lock_inverter	access:public	signature:()
boost::interprocess::ipcdetail::lock_inverter::lock_inverter	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   lock_inverter(Lock &l)$/;"	f	class:boost::interprocess::ipcdetail::lock_inverter	access:public	signature:(Lock &l)
boost::interprocess::ipcdetail::lock_inverter::unlock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   void unlock()  {   l_.lock();     }$/;"	f	class:boost::interprocess::ipcdetail::lock_inverter	access:public	signature:()
boost::interprocess::ipcdetail::lock_locking_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool lock_locking_file(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
boost::interprocess::ipcdetail::locking_file_serial_id	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^struct locking_file_serial_id$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::locking_file_serial_id::dwVolumeSerialNumber	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^   unsigned long dwVolumeSerialNumber;$/;"	m	struct:boost::interprocess::ipcdetail::locking_file_serial_id	access:public
boost::interprocess::ipcdetail::locking_file_serial_id::fd	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^   int fd;$/;"	m	struct:boost::interprocess::ipcdetail::locking_file_serial_id	access:public
boost::interprocess::ipcdetail::locking_file_serial_id::modules_attached_to_gmem_count	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^   volatile boost::uint32_t modules_attached_to_gmem_count;$/;"	m	struct:boost::interprocess::ipcdetail::locking_file_serial_id	access:public
boost::interprocess::ipcdetail::locking_file_serial_id::nFileIndexHigh	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^   unsigned long nFileIndexHigh;$/;"	m	struct:boost::interprocess::ipcdetail::locking_file_serial_id	access:public
boost::interprocess::ipcdetail::locking_file_serial_id::nFileIndexLow	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^   unsigned long nFileIndexLow;$/;"	m	struct:boost::interprocess::ipcdetail::locking_file_serial_id	access:public
boost::interprocess::ipcdetail::log2_ceil	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer log2_ceil(const Integer & A)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const Integer & A)
boost::interprocess::ipcdetail::ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros<0>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros<1>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::ls_zeros::value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const std::size_t value = (S & std::size_t(1)) ? 0 : (1u + ls_zeros<(S >> 1u)>::value);$/;"	m	struct:boost::interprocess::ipcdetail::ls_zeros	access:public
boost::interprocess::ipcdetail::ls_zeros::value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const std::size_t value = 0;$/;"	m	struct:boost::interprocess::ipcdetail::ls_zeros	access:public
boost::interprocess::ipcdetail::managed_global_memory	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^typedef basic_managed_global_memory<shared_memory_object, true>    managed_global_memory;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^class managed_open_or_create_impl$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:managed_open_or_create_impl_device_holder
boost::interprocess::ipcdetail::managed_open_or_create_impl::CorruptedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      CorruptedSegment$/;"	e	enum:boost::interprocess::ipcdetail::managed_open_or_create_impl::__anon1
boost::interprocess::ipcdetail::managed_open_or_create_impl::DevHolder	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   typedef managed_open_or_create_impl_device_holder<StoreDevice, DeviceAbstraction> DevHolder;$/;"	t	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private
boost::interprocess::ipcdetail::managed_open_or_create_impl::InitializedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      InitializedSegment,$/;"	e	enum:boost::interprocess::ipcdetail::managed_open_or_create_impl::__anon1
boost::interprocess::ipcdetail::managed_open_or_create_impl::InitializingSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      InitializingSegment,$/;"	e	enum:boost::interprocess::ipcdetail::managed_open_or_create_impl::__anon1
boost::interprocess::ipcdetail::managed_open_or_create_impl::ManagedOpenOrCreateUserOffset	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      ManagedOpenOrCreateUserOffset =$/;"	m	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public
boost::interprocess::ipcdetail::managed_open_or_create_impl::UninitializedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      UninitializedSegment,$/;"	e	enum:boost::interprocess::ipcdetail::managed_open_or_create_impl::__anon1
boost::interprocess::ipcdetail::managed_open_or_create_impl::check_offset_t_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static bool check_offset_t_size(std::size_t , false_)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(std::size_t , false_)
boost::interprocess::ipcdetail::managed_open_or_create_impl::check_offset_t_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static bool check_offset_t_size(std::size_t size, true_)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(std::size_t size, true_)
boost::interprocess::ipcdetail::managed_open_or_create_impl::create_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void create_device(DeviceAbstraction &dev, const device_id_t & id, std::size_t size, const permissions &perm, false_ file_like)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, const device_id_t & id, std::size_t size, const permissions &perm, false_ file_like)
boost::interprocess::ipcdetail::managed_open_or_create_impl::create_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void create_device(DeviceAbstraction &dev, const device_id_t & id, std::size_t, const permissions &perm, true_ file_like)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, const device_id_t & id, std::size_t, const permissions &perm, true_ file_like)
boost::interprocess::ipcdetail::managed_open_or_create_impl::device_id_t	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   typedef typename managed_open_or_create_impl_device_id_t<DeviceAbstraction>::type device_id_t;$/;"	t	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private
boost::interprocess::ipcdetail::managed_open_or_create_impl::dont_close_on_destruction	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:()
boost::interprocess::ipcdetail::managed_open_or_create_impl::flush	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   bool flush()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:()
boost::interprocess::ipcdetail::managed_open_or_create_impl::get_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   DeviceAbstraction &get_device()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:()
boost::interprocess::ipcdetail::managed_open_or_create_impl::get_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   const DeviceAbstraction &get_device() const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::ipcdetail::managed_open_or_create_impl::get_mapped_region	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   const mapped_region &get_mapped_region() const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::ipcdetail::managed_open_or_create_impl::get_real_address	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void *get_real_address()  const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::ipcdetail::managed_open_or_create_impl::get_real_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   std::size_t get_real_size()  const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::ipcdetail::managed_open_or_create_impl::get_user_address	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void *get_user_address()  const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::ipcdetail::managed_open_or_create_impl::get_user_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   std::size_t get_user_size()  const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::ipcdetail::managed_open_or_create_impl::m_mapped_region	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   mapped_region     m_mapped_region;$/;"	m	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private
boost::interprocess::ipcdetail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:()
boost::interprocess::ipcdetail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(create_only_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(create_only_t, const device_id_t & id, std::size_t size, mode_t mode, const void *addr, const ConstructFunc &construct_func, const permissions &perm)
boost::interprocess::ipcdetail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(create_only_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(create_only_t, const device_id_t & id, std::size_t size, mode_t mode, const void *addr, const permissions &perm)
boost::interprocess::ipcdetail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_only_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(open_only_t, const device_id_t & id, mode_t mode, const void *addr)
boost::interprocess::ipcdetail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_only_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(open_only_t, const device_id_t & id, mode_t mode, const void *addr, const ConstructFunc &construct_func)
boost::interprocess::ipcdetail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_or_create_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(open_or_create_t, const device_id_t & id, std::size_t size, mode_t mode, const void *addr, const ConstructFunc &construct_func, const permissions &perm)
boost::interprocess::ipcdetail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_or_create_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(open_or_create_t, const device_id_t & id, std::size_t size, mode_t mode, const void *addr, const permissions &perm)
boost::interprocess::ipcdetail::managed_open_or_create_impl::priv_open_or_create	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void priv_open_or_create$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(create_enum_t type, const device_id_t & id, std::size_t size, mode_t mode, const void *addr, const permissions &perm, ConstructFunc construct_func)
boost::interprocess::ipcdetail::managed_open_or_create_impl::swap	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   friend void swap(managed_open_or_create_impl &left, managed_open_or_create_impl &right)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:friend	signature:(managed_open_or_create_impl &left, managed_open_or_create_impl &right)
boost::interprocess::ipcdetail::managed_open_or_create_impl::swap	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void swap(managed_open_or_create_impl &other)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(managed_open_or_create_impl &other)
boost::interprocess::ipcdetail::managed_open_or_create_impl::truncate_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void truncate_device(DeviceAbstraction &, offset_t, false_)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &, offset_t, false_)
boost::interprocess::ipcdetail::managed_open_or_create_impl::truncate_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void truncate_device(DeviceAbstraction &dev, offset_t size, true_)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, offset_t size, true_)
boost::interprocess::ipcdetail::managed_open_or_create_impl::~managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   ~managed_open_or_create_impl()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:()
boost::interprocess::ipcdetail::managed_open_or_create_impl_device_holder	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^class managed_open_or_create_impl_device_holder$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::managed_open_or_create_impl_device_holder	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^class managed_open_or_create_impl_device_holder<true, DeviceAbstraction>$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::managed_open_or_create_impl_device_holder::dev	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   DeviceAbstraction dev;$/;"	m	class:boost::interprocess::ipcdetail::managed_open_or_create_impl_device_holder	access:private
boost::interprocess::ipcdetail::managed_open_or_create_impl_device_holder::get_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   DeviceAbstraction &get_device()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl_device_holder	access:public	signature:()
boost::interprocess::ipcdetail::managed_open_or_create_impl_device_holder::get_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   const DeviceAbstraction &get_device() const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl_device_holder	access:public	signature:() const
boost::interprocess::ipcdetail::map_index_aux	/usr/include/boost/interprocess/indexes/map_index.hpp	/^struct map_index_aux$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::map_index_aux::allocator_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^         segment_manager_base>                     allocator_type;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
boost::interprocess::ipcdetail::map_index_aux::index_t	/usr/include/boost/interprocess/indexes/map_index.hpp	/^       key_less, allocator_type>                   index_t;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
boost::interprocess::ipcdetail::map_index_aux::key_less	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef std::less<key_type>                     key_less;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
boost::interprocess::ipcdetail::map_index_aux::key_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
boost::interprocess::ipcdetail::map_index_aux::mapped_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
boost::interprocess::ipcdetail::map_index_aux::value_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef std::pair<const key_type, mapped_type>  value_type;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
boost::interprocess::ipcdetail::mapping_handle_from_file_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline mapping_handle_t mapping_handle_from_file_handle(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
boost::interprocess::ipcdetail::mapping_handle_from_shm_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline mapping_handle_t mapping_handle_from_shm_handle(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
boost::interprocess::ipcdetail::mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class mem_algo_deallocator$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::mem_algo_deallocator::m_algo	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   MemoryAlgorithm & m_algo;$/;"	m	class:boost::interprocess::ipcdetail::mem_algo_deallocator	access:private
boost::interprocess::ipcdetail::mem_algo_deallocator::m_ptr	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *            m_ptr;$/;"	m	class:boost::interprocess::ipcdetail::mem_algo_deallocator	access:private
boost::interprocess::ipcdetail::mem_algo_deallocator::mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   mem_algo_deallocator(void *ptr, MemoryAlgorithm &algo)$/;"	f	class:boost::interprocess::ipcdetail::mem_algo_deallocator	access:public	signature:(void *ptr, MemoryAlgorithm &algo)
boost::interprocess::ipcdetail::mem_algo_deallocator::release	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void release()$/;"	f	class:boost::interprocess::ipcdetail::mem_algo_deallocator	access:public	signature:()
boost::interprocess::ipcdetail::mem_algo_deallocator::~mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   ~mem_algo_deallocator()$/;"	f	class:boost::interprocess::ipcdetail::mem_algo_deallocator	access:public	signature:()
boost::interprocess::ipcdetail::memory_algorithm_common	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^class memory_algorithm_common$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::memory_algorithm_common::Alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type Alignment              = MemoryAlgorithm::Alignment;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::memory_algorithm_common::AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type AllocatedCtrlBytes     = MemoryAlgorithm::AllocatedCtrlBytes;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::memory_algorithm_common::AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type AllocatedCtrlUnits     = MemoryAlgorithm::AllocatedCtrlUnits;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::memory_algorithm_common::BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type BlockCtrlBytes         = MemoryAlgorithm::BlockCtrlBytes;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::memory_algorithm_common::BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type BlockCtrlUnits         = MemoryAlgorithm::BlockCtrlUnits;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::memory_algorithm_common::MinBlockUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type MinBlockUnits          = MemoryAlgorithm::MinBlockUnits;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::memory_algorithm_common::UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const size_type UsableByPreviousChunk  = MemoryAlgorithm::UsableByPreviousChunk;$/;"	m	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::memory_algorithm_common::allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void* allocate_aligned$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, size_type nbytes, size_type alignment)
boost::interprocess::ipcdetail::memory_algorithm_common::allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void allocate_many$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:( MemoryAlgorithm *memory_algo , const size_type *elem_sizes , size_type n_elements , size_type sizeof_element , multiallocation_chain &chain)
boost::interprocess::ipcdetail::memory_algorithm_common::allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void allocate_many$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)
boost::interprocess::ipcdetail::memory_algorithm_common::assert_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void assert_alignment(const void *ptr)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(const void *ptr)
boost::interprocess::ipcdetail::memory_algorithm_common::assert_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void assert_alignment(size_type uint_ptr)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(size_type uint_ptr)
boost::interprocess::ipcdetail::memory_algorithm_common::block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::block_ctrl                block_ctrl;$/;"	t	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::memory_algorithm_common::calculate_lcm_and_needs_backwards_lcmed	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool calculate_lcm_and_needs_backwards_lcmed$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(size_type backwards_multiple, size_type received_size, size_type size_to_achieve, size_type &lcm_out, size_type &needs_backwards_lcmed_out)
boost::interprocess::ipcdetail::memory_algorithm_common::ceil_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static size_type ceil_units(size_type size)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(size_type size)
boost::interprocess::ipcdetail::memory_algorithm_common::check_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool check_alignment(const void *ptr)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(const void *ptr)
boost::interprocess::ipcdetail::memory_algorithm_common::deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void deallocate_many(MemoryAlgorithm *memory_algo, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, multiallocation_chain &chain)
boost::interprocess::ipcdetail::memory_algorithm_common::floor_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static size_type floor_units(size_type size)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(size_type size)
boost::interprocess::ipcdetail::memory_algorithm_common::multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::multiallocation_chain     multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::memory_algorithm_common::multiple_of_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static size_type multiple_of_units(size_type size)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(size_type size)
boost::interprocess::ipcdetail::memory_algorithm_common::priv_allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void priv_allocate_many$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:private	signature:( MemoryAlgorithm *memory_algo , const size_type *elem_sizes , size_type n_elements , size_type sizeof_element , multiallocation_chain &chain)
boost::interprocess::ipcdetail::memory_algorithm_common::priv_deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void priv_deallocate_many(MemoryAlgorithm *memory_algo, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:private	signature:(MemoryAlgorithm *memory_algo, multiallocation_chain &chain)
boost::interprocess::ipcdetail::memory_algorithm_common::shrink	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool shrink$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, void *ptr ,const size_type max_size, const size_type preferred_size ,size_type &received_size)
boost::interprocess::ipcdetail::memory_algorithm_common::size_type	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::size_type                 size_type;$/;"	t	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::memory_algorithm_common::this_type	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef memory_algorithm_common<MemoryAlgorithm>            this_type;$/;"	t	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::memory_algorithm_common::try_shrink	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool try_shrink$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, void *ptr ,const size_type max_size, const size_type preferred_size ,size_type &received_size)
boost::interprocess::ipcdetail::memory_algorithm_common::void_pointer	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::void_pointer              void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
boost::interprocess::ipcdetail::mfile_open_or_create	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^struct mfile_open_or_create$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::mfile_open_or_create::type	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^      < file_wrapper, AllocationAlgorithm::Alignment, true, false> type;$/;"	t	struct:boost::interprocess::ipcdetail::mfile_open_or_create	access:public
boost::interprocess::ipcdetail::mq_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class mq_hdr_t$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:ipcdetail::priority_functor
boost::interprocess::ipcdetail::mq_hdr_t::bottom_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_header &bottom_msg()$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:()
boost::interprocess::ipcdetail::mq_hdr_t::difference_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^      <msg_hdr_ptr_t>::difference_type                                     difference_type;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
boost::interprocess::ipcdetail::mq_hdr_t::end_pos	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type end_pos() const$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:() const
boost::interprocess::ipcdetail::mq_hdr_t::free_top_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void free_top_msg()$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:()
boost::interprocess::ipcdetail::mq_hdr_t::get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static size_type get_mem_size$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(size_type max_msg_size, size_type max_num_msg)
boost::interprocess::ipcdetail::mq_hdr_t::initialize_memory	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void initialize_memory()$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:()
boost::interprocess::ipcdetail::mq_hdr_t::insert_at	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_header & insert_at(iterator pos)$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(iterator pos)
boost::interprocess::ipcdetail::mq_hdr_t::insert_at	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_header & insert_at(iterator where)$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(iterator where)
boost::interprocess::ipcdetail::mq_hdr_t::inserted_ptr_begin	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   iterator inserted_ptr_begin() const$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:() const
boost::interprocess::ipcdetail::mq_hdr_t::inserted_ptr_end	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   iterator inserted_ptr_end() const$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:() const
boost::interprocess::ipcdetail::mq_hdr_t::is_empty	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool is_empty() const$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:() const
boost::interprocess::ipcdetail::mq_hdr_t::is_full	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool is_full() const$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:() const
boost::interprocess::ipcdetail::mq_hdr_t::iterator	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef msg_hdr_ptr_t *iterator;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
boost::interprocess::ipcdetail::mq_hdr_t::lower_bound	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   iterator lower_bound(const msg_hdr_ptr_t & value, priority_functor<VoidPointer> func)$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(const msg_hdr_ptr_t & value, priority_functor<VoidPointer> func)
boost::interprocess::ipcdetail::mq_hdr_t::m_cond_recv	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_condition     m_cond_recv;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
boost::interprocess::ipcdetail::mq_hdr_t::m_cond_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_condition     m_cond_send;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
boost::interprocess::ipcdetail::mq_hdr_t::m_cur_first_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type                  m_cur_first_msg;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
boost::interprocess::ipcdetail::mq_hdr_t::m_cur_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type                  m_cur_num_msg;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
boost::interprocess::ipcdetail::mq_hdr_t::m_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const size_type            m_max_msg_size;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
boost::interprocess::ipcdetail::mq_hdr_t::m_max_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const size_type            m_max_num_msg;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
boost::interprocess::ipcdetail::mq_hdr_t::m_mutex	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_mutex         m_mutex;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
boost::interprocess::ipcdetail::mq_hdr_t::mp_index	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_hdr_ptr_ptr_t          mp_index;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
boost::interprocess::ipcdetail::mq_hdr_t::mq_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   mq_hdr_t(size_type max_num_msg, size_type max_msg_size)$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(size_type max_num_msg, size_type max_msg_size)
boost::interprocess::ipcdetail::mq_hdr_t::msg_hdr_ptr_ptr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<msg_hdr_ptr_t>::type                              msg_hdr_ptr_ptr_t;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
boost::interprocess::ipcdetail::mq_hdr_t::msg_hdr_ptr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<msg_header>::type                                  msg_hdr_ptr_t;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
boost::interprocess::ipcdetail::mq_hdr_t::msg_header	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef msg_hdr_t<void_pointer>                                         msg_header;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
boost::interprocess::ipcdetail::mq_hdr_t::open_create_impl_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
boost::interprocess::ipcdetail::mq_hdr_t::queue_free_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_header & queue_free_msg(unsigned int priority)$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(unsigned int priority)
boost::interprocess::ipcdetail::mq_hdr_t::size_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type            size_type;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
boost::interprocess::ipcdetail::mq_hdr_t::top_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_header &top_msg()$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:()
boost::interprocess::ipcdetail::mq_hdr_t::void_pointer	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef VoidPointer                                                     void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
boost::interprocess::ipcdetail::msg_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class msg_hdr_t$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::msg_hdr_t::char_ptr	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<char>::type                                              char_ptr;$/;"	t	class:boost::interprocess::ipcdetail::msg_hdr_t	access:private
boost::interprocess::ipcdetail::msg_hdr_t::data	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void * data(){ return this+1; }  \/\/$/;"	f	class:boost::interprocess::ipcdetail::msg_hdr_t	access:public	signature:()
boost::interprocess::ipcdetail::msg_hdr_t::difference_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type  difference_type;$/;"	t	class:boost::interprocess::ipcdetail::msg_hdr_t	access:private
boost::interprocess::ipcdetail::msg_hdr_t::len	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type               len;     \/\/ Message length$/;"	m	class:boost::interprocess::ipcdetail::msg_hdr_t	access:public
boost::interprocess::ipcdetail::msg_hdr_t::priority	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   unsigned int            priority;\/\/ Message priority$/;"	m	class:boost::interprocess::ipcdetail::msg_hdr_t	access:public
boost::interprocess::ipcdetail::msg_hdr_t::size_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type                  size_type;$/;"	t	class:boost::interprocess::ipcdetail::msg_hdr_t	access:private
boost::interprocess::ipcdetail::msg_hdr_t::void_pointer	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef VoidPointer                                                           void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::msg_hdr_t	access:private
boost::interprocess::ipcdetail::msg_queue_initialization_func_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class msg_queue_initialization_func_t$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::msg_queue_initialization_func_t::char_ptr	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<char>::type                                    char_ptr;$/;"	t	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public
boost::interprocess::ipcdetail::msg_queue_initialization_func_t::difference_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type difference_type;$/;"	t	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public
boost::interprocess::ipcdetail::msg_queue_initialization_func_t::get_min_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t get_min_size() const$/;"	f	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public	signature:() const
boost::interprocess::ipcdetail::msg_queue_initialization_func_t::m_maxmsg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const size_type m_maxmsg;$/;"	m	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public
boost::interprocess::ipcdetail::msg_queue_initialization_func_t::m_maxmsgsize	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const size_type m_maxmsgsize;$/;"	m	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public
boost::interprocess::ipcdetail::msg_queue_initialization_func_t::msg_queue_initialization_func_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_queue_initialization_func_t(size_type maxmsg = 0,$/;"	f	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public	signature:(size_type maxmsg = 0, size_type maxmsgsize = 0)
boost::interprocess::ipcdetail::msg_queue_initialization_func_t::operator ()	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool operator()(void *address, size_type, bool created)$/;"	f	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public	signature:(void *address, size_type, bool created)
boost::interprocess::ipcdetail::msg_queue_initialization_func_t::size_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type        size_type;$/;"	t	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public
boost::interprocess::ipcdetail::mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class mutex_initializer$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::mutex_initializer::mp_mut	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_mutex_t *mp_mut;$/;"	m	class:boost::interprocess::ipcdetail::mutex_initializer	access:private
boost::interprocess::ipcdetail::mutex_initializer::mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      mutex_initializer(pthread_mutex_t &mut, pthread_mutexattr_t &mut_attr)$/;"	f	class:boost::interprocess::ipcdetail::mutex_initializer	access:public	signature:(pthread_mutex_t &mut, pthread_mutexattr_t &mut_attr)
boost::interprocess::ipcdetail::mutex_initializer::release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release() {mp_mut = 0; }$/;"	f	class:boost::interprocess::ipcdetail::mutex_initializer	access:public	signature:()
boost::interprocess::ipcdetail::mutex_initializer::~mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~mutex_initializer() {  if(mp_mut) pthread_mutex_destroy(mp_mut);  }$/;"	f	class:boost::interprocess::ipcdetail::mutex_initializer	access:public	signature:()
boost::interprocess::ipcdetail::mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct mutexattr_wrapper$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::mutexattr_wrapper::m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_mutexattr_t m_attr;$/;"	m	struct:boost::interprocess::ipcdetail::mutexattr_wrapper	access:public
boost::interprocess::ipcdetail::mutexattr_wrapper::mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      mutexattr_wrapper(bool recursive = false)$/;"	f	struct:boost::interprocess::ipcdetail::mutexattr_wrapper	access:public	signature:(bool recursive = false)
boost::interprocess::ipcdetail::mutexattr_wrapper::operator pthread_mutexattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_mutexattr_t&()  {  return m_attr;  }$/;"	f	struct:boost::interprocess::ipcdetail::mutexattr_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::mutexattr_wrapper::~mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~mutexattr_wrapper()  {  pthread_mutexattr_destroy(&m_attr);  }$/;"	f	struct:boost::interprocess::ipcdetail::mutexattr_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::named_creation_functor	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^class named_creation_functor$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::named_creation_functor::construct	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   void construct(void *address, typename enable_if_c<!is_same<ArgType, no_arg_t>::value>::type * = 0) const$/;"	f	class:boost::interprocess::ipcdetail::named_creation_functor	access:public	signature:(void *address, typename enable_if_c<!is_same<ArgType, no_arg_t>::value>::type * = 0) const
boost::interprocess::ipcdetail::named_creation_functor::construct	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   void construct(void *address, typename enable_if_c<is_same<ArgType, no_arg_t>::value>::type * = 0) const$/;"	f	class:boost::interprocess::ipcdetail::named_creation_functor	access:public	signature:(void *address, typename enable_if_c<is_same<ArgType, no_arg_t>::value>::type * = 0) const
boost::interprocess::ipcdetail::named_creation_functor::get_min_size	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   std::size_t get_min_size() const$/;"	f	class:boost::interprocess::ipcdetail::named_creation_functor	access:public	signature:() const
boost::interprocess::ipcdetail::named_creation_functor::m_arg	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   Arg m_arg;$/;"	m	class:boost::interprocess::ipcdetail::named_creation_functor	access:private
boost::interprocess::ipcdetail::named_creation_functor::m_creation_type	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   create_enum_t m_creation_type;$/;"	m	class:boost::interprocess::ipcdetail::named_creation_functor	access:private
boost::interprocess::ipcdetail::named_creation_functor::named_creation_functor	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   named_creation_functor(create_enum_t type, Arg arg = Arg())$/;"	f	class:boost::interprocess::ipcdetail::named_creation_functor	access:public	signature:(create_enum_t type, Arg arg = Arg())
boost::interprocess::ipcdetail::named_creation_functor::no_arg_t	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   typedef named_creation_functor_no_arg no_arg_t;$/;"	t	class:boost::interprocess::ipcdetail::named_creation_functor	access:private
boost::interprocess::ipcdetail::named_creation_functor::operator ()	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   bool operator()(void *address, std::size_t, bool created) const$/;"	f	class:boost::interprocess::ipcdetail::named_creation_functor	access:public	signature:(void *address, std::size_t, bool created) const
boost::interprocess::ipcdetail::named_creation_functor_no_arg	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^struct named_creation_functor_no_arg{};$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::named_proxy	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^class named_proxy$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::named_proxy::char_type	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef typename SegmentManager::char_type char_type;$/;"	t	class:boost::interprocess::ipcdetail::named_proxy	access:private
boost::interprocess::ipcdetail::named_proxy::m_dothrow	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const bool           m_dothrow;$/;"	m	class:boost::interprocess::ipcdetail::named_proxy	access:private
boost::interprocess::ipcdetail::named_proxy::m_find	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const bool           m_find;$/;"	m	class:boost::interprocess::ipcdetail::named_proxy	access:private
boost::interprocess::ipcdetail::named_proxy::m_num	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   mutable std::size_t  m_num;$/;"	m	class:boost::interprocess::ipcdetail::named_proxy	access:private
boost::interprocess::ipcdetail::named_proxy::mp_mngr	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   SegmentManager *     mp_mngr;$/;"	m	class:boost::interprocess::ipcdetail::named_proxy	access:private
boost::interprocess::ipcdetail::named_proxy::mp_name	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const char_type *    mp_name;$/;"	m	class:boost::interprocess::ipcdetail::named_proxy	access:private
boost::interprocess::ipcdetail::named_proxy::named_proxy	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   named_proxy(SegmentManager *mngr, const char_type *name, bool find, bool dothrow)$/;"	f	class:boost::interprocess::ipcdetail::named_proxy	access:public	signature:(SegmentManager *mngr, const char_type *name, bool find, bool dothrow)
boost::interprocess::ipcdetail::named_proxy::operator ()	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   T *operator()(Args &&...args) const$/;"	f	class:boost::interprocess::ipcdetail::named_proxy	access:public	signature:(Args &&....args) const
boost::interprocess::ipcdetail::named_proxy::operator []	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const named_proxy &operator[](std::size_t num) const$/;"	f	class:boost::interprocess::ipcdetail::named_proxy	access:public	signature:(std::size_t num) const
boost::interprocess::ipcdetail::nat	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct nat{};$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::no_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct no_type$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::no_type::padding	/usr/include/boost/interprocess/detail/mpl.hpp	/^   char padding[8];$/;"	m	struct:boost::interprocess::ipcdetail::no_type	access:public
boost::interprocess::ipcdetail::node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator_base$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:node_pool_allocation_impl
boost::interprocess::ipcdetail::node_allocator_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:(Version <=2)
boost::interprocess::ipcdetail::node_allocator_base::const_pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::const_reference	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::difference_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef typename segment_manager::difference_type     difference_type;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::get_node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   void* get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:() const
boost::interprocess::ipcdetail::node_allocator_base::get_segment_manager	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:() const
boost::interprocess::ipcdetail::node_allocator_base::mp_node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   void_pointer   mp_node_pool;$/;"	m	class:boost::interprocess::ipcdetail::node_allocator_base	access:private
boost::interprocess::ipcdetail::node_allocator_base::multiallocation_chain	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:(const node_allocator_base<Version, T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::ipcdetail::node_allocator_base::node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base(const node_allocator_base &other)$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:(const node_allocator_base &other)
boost::interprocess::ipcdetail::node_allocator_base::node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::ipcdetail::node_allocator_base::node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::node_pool::get	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::ipcdetail::node_allocator_base::node_pool	access:public	signature:(void *p)
boost::interprocess::ipcdetail::node_allocator_base::node_pool::type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      < SegmentManager, sizeof_value<T>::value, NodesPerBlock> type;$/;"	t	struct:boost::interprocess::ipcdetail::node_allocator_base::node_pool	access:public
boost::interprocess::ipcdetail::node_allocator_base::operator =	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base& operator=$/;"	p	class:boost::interprocess::ipcdetail::node_allocator_base	access:private	signature:(const node_allocator_base<Version2, T2, SegmentManager2, N2>&)
boost::interprocess::ipcdetail::node_allocator_base::operator =	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base& operator=(const node_allocator_base &other)$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:(const node_allocator_base &other)
boost::interprocess::ipcdetail::node_allocator_base::pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::rebind::other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator_base<Version, T2, SegmentManager, NodesPerBlock>       other;$/;"	t	struct:boost::interprocess::ipcdetail::node_allocator_base::rebind	access:public
boost::interprocess::ipcdetail::node_allocator_base::reference	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::segment_manager	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::self_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      <Version, T, SegmentManager, NodesPerBlock>   self_t;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::size_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef typename segment_manager::size_type           size_type;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::swap	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:friend	signature:(self_t &alloc1, self_t &alloc2)
boost::interprocess::ipcdetail::node_allocator_base::value_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::version	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef boost::interprocess::version_type<node_allocator_base, Version>   version;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::void_pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
boost::interprocess::ipcdetail::node_allocator_base::~node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   ~node_allocator_base()$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:()
boost::interprocess::ipcdetail::node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:node_allocator_base
boost::interprocess::ipcdetail::node_allocator_v1::base_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         < 1, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_v1	access:public
boost::interprocess::ipcdetail::node_allocator_v1::node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_v1$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_v1	access:public	signature:(const node_allocator_v1<T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::ipcdetail::node_allocator_v1::node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_v1(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::ipcdetail::node_allocator_v1::rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::node_allocator_v1	access:public
boost::interprocess::ipcdetail::node_allocator_v1::rebind::other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator_v1<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::ipcdetail::node_allocator_v1::rebind	access:public
boost::interprocess::ipcdetail::node_pool_allocation_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class node_pool_allocation_impl$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:array_allocation_impl
boost::interprocess::ipcdetail::node_pool_allocation_impl::allocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate(size_type count, cvoid_pointer hint = 0)$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:(size_type count, cvoid_pointer hint = 0)
boost::interprocess::ipcdetail::node_pool_allocation_impl::allocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void allocate_individual(size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:(size_type num_elements, multiallocation_chain &chain)
boost::interprocess::ipcdetail::node_pool_allocation_impl::allocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:()
boost::interprocess::ipcdetail::node_pool_allocation_impl::const_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
boost::interprocess::ipcdetail::node_pool_allocation_impl::const_reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
boost::interprocess::ipcdetail::node_pool_allocation_impl::cvoid_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<const void>::type                cvoid_pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:private
boost::interprocess::ipcdetail::node_pool_allocation_impl::deallocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate(const pointer &ptr, size_type count)$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:(const pointer &ptr, size_type count)
boost::interprocess::ipcdetail::node_pool_allocation_impl::deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:()
boost::interprocess::ipcdetail::node_pool_allocation_impl::deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:()
boost::interprocess::ipcdetail::node_pool_allocation_impl::deallocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_individual(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:(multiallocation_chain &chain)
boost::interprocess::ipcdetail::node_pool_allocation_impl::deallocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:(const pointer &p)
boost::interprocess::ipcdetail::node_pool_allocation_impl::derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   Derived *derived()$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:private	signature:()
boost::interprocess::ipcdetail::node_pool_allocation_impl::derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const Derived *derived() const$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:private	signature:() const
boost::interprocess::ipcdetail::node_pool_allocation_impl::difference_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::difference_type      difference_type;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
boost::interprocess::ipcdetail::node_pool_allocation_impl::multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
boost::interprocess::ipcdetail::node_pool_allocation_impl::node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
boost::interprocess::ipcdetail::node_pool_allocation_impl::node_pool::get	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::ipcdetail::node_pool_allocation_impl::node_pool	access:public	signature:(void *p)
boost::interprocess::ipcdetail::node_pool_allocation_impl::node_pool::type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      typedef typename Derived::template node_pool<0>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::node_pool_allocation_impl::node_pool	access:public
boost::interprocess::ipcdetail::node_pool_allocation_impl::pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
boost::interprocess::ipcdetail::node_pool_allocation_impl::reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
boost::interprocess::ipcdetail::node_pool_allocation_impl::size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::size_type            size_type;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
boost::interprocess::ipcdetail::node_pool_allocation_impl::value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
boost::interprocess::ipcdetail::node_pool_allocation_impl::void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:private
boost::interprocess::ipcdetail::node_slist	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^struct node_slist$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::node_slist::node_slist_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^      <node_t, bi::linear<true>, bi::base_hook<slist_hook_t> >::type node_slist_t;$/;"	t	struct:boost::interprocess::ipcdetail::node_slist	access:public
boost::interprocess::ipcdetail::node_slist::node_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^   struct node_t$/;"	s	struct:boost::interprocess::ipcdetail::node_slist	inherits:slist_hook_t	access:public
boost::interprocess::ipcdetail::node_slist::slist_hook_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^      <bi::void_pointer<VoidPointer>, bi::link_mode<bi::normal_link> >::type slist_hook_t;$/;"	t	struct:boost::interprocess::ipcdetail::node_slist	access:public
boost::interprocess::ipcdetail::offset_ptr_internal	/usr/include/boost/interprocess/offset_ptr.hpp	/^   union offset_ptr_internal$/;"	u	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::offset_ptr_internal::alignment_helper	/usr/include/boost/interprocess/offset_ptr.hpp	/^         >::type alignment_helper;$/;"	m	union:boost::interprocess::ipcdetail::offset_ptr_internal	access:public
boost::interprocess::ipcdetail::offset_ptr_internal::m_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^      OffsetType m_offset; \/\/Distance between this object and pointee address$/;"	m	union:boost::interprocess::ipcdetail::offset_ptr_internal	access:public
boost::interprocess::ipcdetail::offset_ptr_internal::offset_ptr_internal	/usr/include/boost/interprocess/offset_ptr.hpp	/^      explicit offset_ptr_internal(OffsetType off)$/;"	f	union:boost::interprocess::ipcdetail::offset_ptr_internal	access:public	signature:(OffsetType off)
boost::interprocess::ipcdetail::offset_ptr_maintains_address	/usr/include/boost/interprocess/offset_ptr.hpp	/^   struct offset_ptr_maintains_address$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::offset_ptr_maintains_address::value	/usr/include/boost/interprocess/offset_ptr.hpp	/^      static const bool value =    ipcdetail::is_cv_same<From, To>::value$/;"	m	struct:boost::interprocess::ipcdetail::offset_ptr_maintains_address	access:public
boost::interprocess::ipcdetail::offset_ptr_to_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   std::size_t offset_ptr_to_offset(const volatile void *ptr, const volatile void *this_ptr)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const volatile void *ptr, const volatile void *this_ptr)
boost::interprocess::ipcdetail::offset_ptr_to_offset_from_other	/usr/include/boost/interprocess/offset_ptr.hpp	/^   std::size_t offset_ptr_to_offset_from_other$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const volatile void *this_ptr, const volatile void *other_ptr, std::size_t other_offset)
boost::interprocess::ipcdetail::offset_ptr_to_raw_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void * offset_ptr_to_raw_pointer(const volatile void *this_ptr, std::size_t offset)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const volatile void *this_ptr, std::size_t offset)
boost::interprocess::ipcdetail::open_existing_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t open_existing_file$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name, mode_t mode, bool temporary = false)
boost::interprocess::ipcdetail::open_or_create_and_lock_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline int open_or_create_and_lock_file(const char *name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name)
boost::interprocess::ipcdetail::open_or_create_directory	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool open_or_create_directory(const char *dir_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *dir_name)
boost::interprocess::ipcdetail::operator !=	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator!=(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc2)
boost::interprocess::ipcdetail::operator !=	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^bool operator!=(const cached_allocator_impl<T, N, V> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const cached_allocator_impl<T, N, V> &alloc1, const cached_allocator_impl<T, N, V> &alloc2)
boost::interprocess::ipcdetail::operator !=	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator!=(const node_allocator_base<V, T, S, NPC> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const node_allocator_base<V, T, S, NPC> &alloc1, const node_allocator_base<V, T, S, NPC> &alloc2)
boost::interprocess::ipcdetail::operator !=	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator!=(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::ipcdetail::operator !=	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator!=(const private_node_allocator_base<V, T, S, NPC> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const private_node_allocator_base<V, T, S, NPC> &alloc1, const private_node_allocator_base<V, T, S, NPC> &alloc2)
boost::interprocess::ipcdetail::operator <	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator<(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)
boost::interprocess::ipcdetail::operator <	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator<(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)
boost::interprocess::ipcdetail::operator ==	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator==(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc2)
boost::interprocess::ipcdetail::operator ==	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^bool operator==(const cached_allocator_impl<T, N, V> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const cached_allocator_impl<T, N, V> &alloc1, const cached_allocator_impl<T, N, V> &alloc2)
boost::interprocess::ipcdetail::operator ==	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator==(const node_allocator_base<V, T, S, NPC> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const node_allocator_base<V, T, S, NPC> &alloc1, const node_allocator_base<V, T, S, NPC> &alloc2)
boost::interprocess::ipcdetail::operator ==	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator==(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::ipcdetail::operator ==	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator==(const private_node_allocator_base<V, T, S, NPC> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const private_node_allocator_base<V, T, S, NPC> &alloc1, const private_node_allocator_base<V, T, S, NPC> &alloc2)
boost::interprocess::ipcdetail::operator ==	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator==(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)
boost::interprocess::ipcdetail::operator ==	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator==(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)
boost::interprocess::ipcdetail::pid_str_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef char pid_str_t[sizeof(OS_process_id_t)*3+1];$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::placement_destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^struct placement_destroy :  public in_place_interface$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:in_place_interface
boost::interprocess::ipcdetail::placement_destroy::construct_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void construct_n(void *, std::size_t, std::size_t &) {}$/;"	f	struct:boost::interprocess::ipcdetail::placement_destroy	access:public	signature:(void *, std::size_t, std::size_t &)
boost::interprocess::ipcdetail::placement_destroy::destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   void destroy(void *mem)$/;"	f	struct:boost::interprocess::ipcdetail::placement_destroy	access:private	signature:(void *mem)
boost::interprocess::ipcdetail::placement_destroy::destroy_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void destroy_n(void *mem, std::size_t num, std::size_t &destroyed)$/;"	f	struct:boost::interprocess::ipcdetail::placement_destroy	access:public	signature:(void *mem, std::size_t num, std::size_t &destroyed)
boost::interprocess::ipcdetail::placement_destroy::placement_destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   placement_destroy()$/;"	f	struct:boost::interprocess::ipcdetail::placement_destroy	access:public	signature:()
boost::interprocess::ipcdetail::pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::pointer_type::type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^        typename remove_reference<D>::type>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::pointer_type	access:public
boost::interprocess::ipcdetail::pointer_type_imp	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace pointer_type_imp {$/;"	n	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::pointer_type_imp::pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type$/;"	s	namespace:boost::interprocess::ipcdetail::pointer_type_imp
boost::interprocess::ipcdetail::pointer_type_imp::pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type<T, D, false>$/;"	s	namespace:boost::interprocess::ipcdetail::pointer_type_imp
boost::interprocess::ipcdetail::pointer_type_imp::pointer_type::type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    typedef T* type;$/;"	t	struct:boost::interprocess::ipcdetail::pointer_type_imp::pointer_type	access:public
boost::interprocess::ipcdetail::pointer_type_imp::pointer_type::type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    typedef typename D::pointer type;$/;"	t	struct:boost::interprocess::ipcdetail::pointer_type_imp::pointer_type	access:public
boost::interprocess::ipcdetail::pointer_type_imp::test	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^template <class U> static char test(typename U::pointer* = 0);$/;"	p	namespace:boost::interprocess::ipcdetail::pointer_type_imp	signature:(typename U::pointer* = 0)
boost::interprocess::ipcdetail::pointer_type_imp::test	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^template <class U> static two  test(...);$/;"	p	namespace:boost::interprocess::ipcdetail::pointer_type_imp	signature:(....)
boost::interprocess::ipcdetail::portable_intermodule_singleton	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^class portable_intermodule_singleton$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:intermodule_singleton_impl
boost::interprocess::ipcdetail::posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^class posix_condition$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::posix_condition::do_timed_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   bool do_timed_wait(const boost::posix_time::ptime &abs_time, posix_mutex &mut);$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(const boost::posix_time::ptime &abs_time, posix_mutex &mut)
boost::interprocess::ipcdetail::posix_condition::do_timed_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline bool posix_condition::do_timed_wait$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:(const boost::posix_time::ptime &abs_time, posix_mutex &mut)
boost::interprocess::ipcdetail::posix_condition::do_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   void do_wait(posix_mutex &mut);$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(posix_mutex &mut)
boost::interprocess::ipcdetail::posix_condition::do_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline void posix_condition::do_wait(posix_mutex &mut)$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:(posix_mutex &mut)
boost::interprocess::ipcdetail::posix_condition::m_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   pthread_cond_t   m_condition;$/;"	m	class:boost::interprocess::ipcdetail::posix_condition	access:private
boost::interprocess::ipcdetail::posix_condition::notify_all	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:()
boost::interprocess::ipcdetail::posix_condition::notify_all	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline void posix_condition::notify_all()$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:()
boost::interprocess::ipcdetail::posix_condition::notify_one	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:()
boost::interprocess::ipcdetail::posix_condition::notify_one	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline void posix_condition::notify_one()$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:()
boost::interprocess::ipcdetail::posix_condition::operator =	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   posix_condition &operator=(const posix_condition &);$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:private	signature:(const posix_condition &)
boost::interprocess::ipcdetail::posix_condition::posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   posix_condition();$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:()
boost::interprocess::ipcdetail::posix_condition::posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   posix_condition(const posix_condition &);$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:private	signature:(const posix_condition &)
boost::interprocess::ipcdetail::posix_condition::posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline posix_condition::posix_condition()$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:()
boost::interprocess::ipcdetail::posix_condition::timed_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::posix_condition::timed_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::ipcdetail::posix_condition::wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(L& lock)
boost::interprocess::ipcdetail::posix_condition::wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(L& lock, Pr pred)
boost::interprocess::ipcdetail::posix_condition::~posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   ~posix_condition();$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:()
boost::interprocess::ipcdetail::posix_condition::~posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline posix_condition::~posix_condition()$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:()
boost::interprocess::ipcdetail::posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^class posix_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::posix_mutex::lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_mutex::lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline void posix_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:()
boost::interprocess::ipcdetail::posix_mutex::m_mut	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   pthread_mutex_t   m_mut;$/;"	m	class:boost::interprocess::ipcdetail::posix_mutex	access:private
boost::interprocess::ipcdetail::posix_mutex::operator =	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   posix_mutex &operator=(const posix_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:private	signature:(const posix_mutex &)
boost::interprocess::ipcdetail::posix_mutex::posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   posix_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_mutex::posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   posix_mutex(const posix_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:private	signature:(const posix_mutex &)
boost::interprocess::ipcdetail::posix_mutex::posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline posix_mutex::posix_mutex()$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:()
boost::interprocess::ipcdetail::posix_mutex::timed_lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::posix_mutex::timed_lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline bool posix_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::posix_mutex::try_lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_mutex::try_lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline bool posix_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:()
boost::interprocess::ipcdetail::posix_mutex::unlock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_mutex::unlock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline void posix_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:()
boost::interprocess::ipcdetail::posix_mutex::~posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   ~posix_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_mutex::~posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline posix_mutex::~posix_mutex()$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:()
boost::interprocess::ipcdetail::posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^class posix_named_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::posix_named_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:private	signature:()
boost::interprocess::ipcdetail::posix_named_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline void posix_named_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:()
boost::interprocess::ipcdetail::posix_named_mutex::lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_named_mutex::lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline void posix_named_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:()
boost::interprocess::ipcdetail::posix_named_mutex::m_sem	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_semaphore m_sem;$/;"	m	class:boost::interprocess::ipcdetail::posix_named_mutex	access:private
boost::interprocess::ipcdetail::posix_named_mutex::operator =	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex &operator=(const posix_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:private	signature:(const posix_named_mutex &)
boost::interprocess::ipcdetail::posix_named_mutex::posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:private	signature:()
boost::interprocess::ipcdetail::posix_named_mutex::posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex(const posix_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:private	signature:(const posix_named_mutex &)
boost::interprocess::ipcdetail::posix_named_mutex::posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::posix_named_mutex::posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::ipcdetail::posix_named_mutex::posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::posix_named_mutex::posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline posix_named_mutex::posix_named_mutex(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::posix_named_mutex::posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline posix_named_mutex::posix_named_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::posix_named_mutex::posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline posix_named_mutex::posix_named_mutex(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::posix_named_mutex::remove	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::posix_named_mutex::remove	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline bool posix_named_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:(const char *name)
boost::interprocess::ipcdetail::posix_named_mutex::timed_lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::posix_named_mutex::timed_lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline bool posix_named_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::posix_named_mutex::try_lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_named_mutex::try_lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline bool posix_named_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:()
boost::interprocess::ipcdetail::posix_named_mutex::unlock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_named_mutex::unlock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline void posix_named_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:()
boost::interprocess::ipcdetail::posix_named_mutex::~posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   ~posix_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_named_mutex::~posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline posix_named_mutex::~posix_named_mutex()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:()
boost::interprocess::ipcdetail::posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^class posix_named_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::posix_named_semaphore::dont_close_on_destruction	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:private	signature:()
boost::interprocess::ipcdetail::posix_named_semaphore::mp_sem	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   sem_t      *mp_sem;$/;"	m	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:private
boost::interprocess::ipcdetail::posix_named_semaphore::operator =	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore &operator= (const posix_named_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:private	signature:(const posix_named_semaphore &)
boost::interprocess::ipcdetail::posix_named_semaphore::posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
boost::interprocess::ipcdetail::posix_named_semaphore::posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:private	signature:()
boost::interprocess::ipcdetail::posix_named_semaphore::posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore(const posix_named_semaphore&);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:private	signature:(const posix_named_semaphore&)
boost::interprocess::ipcdetail::posix_named_semaphore::posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::posix_named_semaphore::posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
boost::interprocess::ipcdetail::posix_named_semaphore::post	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   void post()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::posix_named_semaphore::remove	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   static bool remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::posix_named_semaphore::timed_wait	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::posix_named_semaphore::try_wait	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   bool try_wait()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::posix_named_semaphore::wait	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   void wait()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::posix_named_semaphore::~posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   ~posix_named_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^class posix_recursive_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::posix_recursive_mutex::lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_recursive_mutex::lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline void posix_recursive_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:()
boost::interprocess::ipcdetail::posix_recursive_mutex::m_mut	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   pthread_mutex_t   m_mut;$/;"	m	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:private
boost::interprocess::ipcdetail::posix_recursive_mutex::operator =	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   posix_recursive_mutex &operator=(const posix_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:private	signature:(const posix_recursive_mutex &)
boost::interprocess::ipcdetail::posix_recursive_mutex::posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   posix_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_recursive_mutex::posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   posix_recursive_mutex(const posix_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:private	signature:(const posix_recursive_mutex &)
boost::interprocess::ipcdetail::posix_recursive_mutex::posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline posix_recursive_mutex::posix_recursive_mutex()$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:()
boost::interprocess::ipcdetail::posix_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::posix_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline bool posix_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::posix_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline bool posix_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:()
boost::interprocess::ipcdetail::posix_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline void posix_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:()
boost::interprocess::ipcdetail::posix_recursive_mutex::~posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   ~posix_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::posix_recursive_mutex::~posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline posix_recursive_mutex::~posix_recursive_mutex()$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:()
boost::interprocess::ipcdetail::posix_semaphore	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^class posix_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::posix_semaphore::m_sem	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   sem_t       m_sem;$/;"	m	class:boost::interprocess::ipcdetail::posix_semaphore	access:private
boost::interprocess::ipcdetail::posix_semaphore::operator =	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   posix_semaphore &operator= (const posix_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::posix_semaphore	access:private	signature:(const posix_semaphore &)
boost::interprocess::ipcdetail::posix_semaphore::posix_semaphore	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   posix_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::posix_semaphore	access:private	signature:()
boost::interprocess::ipcdetail::posix_semaphore::posix_semaphore	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   posix_semaphore(const posix_semaphore&);$/;"	p	class:boost::interprocess::ipcdetail::posix_semaphore	access:private	signature:(const posix_semaphore&)
boost::interprocess::ipcdetail::posix_semaphore::posix_semaphore	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   posix_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:(unsigned int initialCount)
boost::interprocess::ipcdetail::posix_semaphore::post	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   void post()$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::posix_semaphore::timed_wait	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::posix_semaphore::try_wait	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   bool try_wait()$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::posix_semaphore::wait	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   void wait()$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::posix_semaphore::~posix_semaphore	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   ~posix_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::priority_functor	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class priority_functor$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::priority_functor::msg_hdr_ptr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<msg_hdr_t<VoidPointer> >::type                  msg_hdr_ptr_t;$/;"	t	class:boost::interprocess::ipcdetail::priority_functor	access:private
boost::interprocess::ipcdetail::priority_functor::operator ()	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool operator()(const msg_hdr_ptr_t &msg1,$/;"	f	class:boost::interprocess::ipcdetail::priority_functor	access:public	signature:(const msg_hdr_ptr_t &msg1, const msg_hdr_ptr_t &msg2) const
boost::interprocess::ipcdetail::private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^class private_adaptive_node_pool$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:boost::container::container_detail::private_adaptive_node_pool_impl
boost::interprocess::ipcdetail::private_adaptive_node_pool::base_t	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:private
boost::interprocess::ipcdetail::private_adaptive_node_pool::get_segment_manager	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   segment_manager* get_segment_manager() const$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public	signature:() const
boost::interprocess::ipcdetail::private_adaptive_node_pool::nodes_per_block	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   static const size_type nodes_per_block = NodesPerBlock;$/;"	m	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public
boost::interprocess::ipcdetail::private_adaptive_node_pool::nodes_per_chunk	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   static const size_type nodes_per_chunk = NodesPerBlock;$/;"	m	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public
boost::interprocess::ipcdetail::private_adaptive_node_pool::operator =	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool &operator=(const private_adaptive_node_pool &);$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:private	signature:(const private_adaptive_node_pool &)
boost::interprocess::ipcdetail::private_adaptive_node_pool::private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool();$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:private	signature:()
boost::interprocess::ipcdetail::private_adaptive_node_pool::private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool(const private_adaptive_node_pool &);$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:private	signature:(const private_adaptive_node_pool &)
boost::interprocess::ipcdetail::private_adaptive_node_pool::private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::ipcdetail::private_adaptive_node_pool::segment_manager	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   typedef SegmentManager              segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public
boost::interprocess::ipcdetail::private_adaptive_node_pool::size_type	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   typedef typename base_t::size_type  size_type;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool_base$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:node_pool_allocation_impl
boost::interprocess::ipcdetail::private_adaptive_pool_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private	signature:(Version <=2)
boost::interprocess::ipcdetail::private_adaptive_pool_base::const_pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::const_reference	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::difference_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef typename segment_manager::size_type           difference_type;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::get_node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:() const
boost::interprocess::ipcdetail::private_adaptive_pool_base::get_segment_manager	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:() const
boost::interprocess::ipcdetail::private_adaptive_pool_base::m_node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   node_pool_t m_node_pool;$/;"	m	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private
boost::interprocess::ipcdetail::private_adaptive_pool_base::multiallocation_chain	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::node_pool::get	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::ipcdetail::private_adaptive_pool_base::node_pool	access:public	signature:(void *p)
boost::interprocess::ipcdetail::private_adaptive_pool_base::node_pool::type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      > type;$/;"	t	struct:boost::interprocess::ipcdetail::private_adaptive_pool_base::node_pool	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::node_pool_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      > node_pool_t;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private
boost::interprocess::ipcdetail::private_adaptive_pool_base::operator =	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base& operator=$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private	signature:(const private_adaptive_pool_base<Version2, T2, MemoryAlgorithm2, N2, F2, OP2>&)
boost::interprocess::ipcdetail::private_adaptive_pool_base::operator =	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base& operator=(const private_adaptive_pool_base&);$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private	signature:(const private_adaptive_pool_base&)
boost::interprocess::ipcdetail::private_adaptive_pool_base::pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:(const private_adaptive_pool_base <Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::ipcdetail::private_adaptive_pool_base::private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base(const private_adaptive_pool_base &other)$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:(const private_adaptive_pool_base &other)
boost::interprocess::ipcdetail::private_adaptive_pool_base::private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::ipcdetail::private_adaptive_pool_base::rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::rebind::other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         <Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>   other;$/;"	t	struct:boost::interprocess::ipcdetail::private_adaptive_pool_base::rebind	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::reference	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::segment_manager	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::self_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      , MaxFreeBlocks, OverheadPercent>                  self_t;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private
boost::interprocess::ipcdetail::private_adaptive_pool_base::size_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef typename segment_manager::size_type           size_type;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::swap	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   friend void swap(self_t &alloc1,self_t &alloc2)$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:friend	signature:(self_t &alloc1,self_t &alloc2)
boost::interprocess::ipcdetail::private_adaptive_pool_base::value_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::version	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      <private_adaptive_pool_base, Version>              version;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::void_pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_base::~private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   ~private_adaptive_pool_base()$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:()
boost::interprocess::ipcdetail::private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:private_adaptive_pool_base
boost::interprocess::ipcdetail::private_adaptive_pool_v1::base_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         < 1, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_v1	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_v1::private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_v1$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_v1	access:public	signature:(const private_adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::ipcdetail::private_adaptive_pool_v1::private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_v1(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::ipcdetail::private_adaptive_pool_v1::rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::private_adaptive_pool_v1	access:public
boost::interprocess::ipcdetail::private_adaptive_pool_v1::rebind::other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      typedef private_adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::ipcdetail::private_adaptive_pool_v1::rebind	access:public
boost::interprocess::ipcdetail::private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator_base$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:node_pool_allocation_impl
boost::interprocess::ipcdetail::private_node_allocator_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private	signature:(Version <=2)
boost::interprocess::ipcdetail::private_node_allocator_base::const_pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::const_reference	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::difference_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef typename segment_manager::difference_type     difference_type;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::get_node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:() const
boost::interprocess::ipcdetail::private_node_allocator_base::get_segment_manager	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:() const
boost::interprocess::ipcdetail::private_node_allocator_base::m_node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   node_pool_t m_node_pool;$/;"	m	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private
boost::interprocess::ipcdetail::private_node_allocator_base::multiallocation_chain	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::node_pool::get	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::ipcdetail::private_node_allocator_base::node_pool	access:public	signature:(void *p)
boost::interprocess::ipcdetail::private_node_allocator_base::node_pool::type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      > type;$/;"	t	struct:boost::interprocess::ipcdetail::private_node_allocator_base::node_pool	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::node_pool_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      > node_pool_t;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private
boost::interprocess::ipcdetail::private_node_allocator_base::operator =	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base& operator=$/;"	p	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private	signature:(const private_node_allocator_base<Version2, T2, MemoryAlgorithm2, N2>&)
boost::interprocess::ipcdetail::private_node_allocator_base::operator =	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base& operator=(const private_node_allocator_base&);$/;"	p	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private	signature:(const private_node_allocator_base&)
boost::interprocess::ipcdetail::private_node_allocator_base::pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:(const private_node_allocator_base <Version, T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::ipcdetail::private_node_allocator_base::private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base(const private_node_allocator_base &other)$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:(const private_node_allocator_base &other)
boost::interprocess::ipcdetail::private_node_allocator_base::private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::ipcdetail::private_node_allocator_base::rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::rebind::other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         <Version, T2, SegmentManager, NodesPerBlock>   other;$/;"	t	struct:boost::interprocess::ipcdetail::private_node_allocator_base::rebind	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::reference	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::segment_manager	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::self_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      < Version, T, SegmentManager, NodesPerBlock>       self_t;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private
boost::interprocess::ipcdetail::private_node_allocator_base::size_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef typename segment_manager::size_type           size_type;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::swap	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   friend void swap(self_t &alloc1,self_t &alloc2)$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:friend	signature:(self_t &alloc1,self_t &alloc2)
boost::interprocess::ipcdetail::private_node_allocator_base::value_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::version	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      <private_node_allocator_base, Version>              version;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::void_pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
boost::interprocess::ipcdetail::private_node_allocator_base::~private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   ~private_node_allocator_base()$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:()
boost::interprocess::ipcdetail::private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:private_node_allocator_base
boost::interprocess::ipcdetail::private_node_allocator_v1::base_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         < 1, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_v1	access:public
boost::interprocess::ipcdetail::private_node_allocator_v1::private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_v1$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_v1	access:public	signature:(const private_node_allocator_v1<T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::ipcdetail::private_node_allocator_v1::private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_v1(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::ipcdetail::private_node_allocator_v1::rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::private_node_allocator_v1	access:public
boost::interprocess::ipcdetail::private_node_allocator_v1::rebind::other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      typedef private_node_allocator_v1<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::ipcdetail::private_node_allocator_v1::rebind	access:public
boost::interprocess::ipcdetail::private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^class private_node_pool$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:boost::container::container_detail::private_node_pool_impl
boost::interprocess::ipcdetail::private_node_pool::base_t	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^      <typename SegmentManager::segment_manager_base_type> base_t;$/;"	t	class:boost::interprocess::ipcdetail::private_node_pool	access:private
boost::interprocess::ipcdetail::private_node_pool::get_segment_manager	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   segment_manager* get_segment_manager() const$/;"	f	class:boost::interprocess::ipcdetail::private_node_pool	access:public	signature:() const
boost::interprocess::ipcdetail::private_node_pool::nodes_per_block	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   static const size_type nodes_per_block = NodesPerBlock;$/;"	m	class:boost::interprocess::ipcdetail::private_node_pool	access:public
boost::interprocess::ipcdetail::private_node_pool::nodes_per_chunk	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   static const size_type nodes_per_chunk = NodesPerBlock;$/;"	m	class:boost::interprocess::ipcdetail::private_node_pool	access:public
boost::interprocess::ipcdetail::private_node_pool::operator =	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool &operator=(const private_node_pool &);$/;"	p	class:boost::interprocess::ipcdetail::private_node_pool	access:private	signature:(const private_node_pool &)
boost::interprocess::ipcdetail::private_node_pool::private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool();$/;"	p	class:boost::interprocess::ipcdetail::private_node_pool	access:private	signature:()
boost::interprocess::ipcdetail::private_node_pool::private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool(const private_node_pool &);$/;"	p	class:boost::interprocess::ipcdetail::private_node_pool	access:private	signature:(const private_node_pool &)
boost::interprocess::ipcdetail::private_node_pool::private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_node_pool	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::ipcdetail::private_node_pool::segment_manager	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   typedef SegmentManager              segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::private_node_pool	access:public
boost::interprocess::ipcdetail::private_node_pool::size_type	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   typedef typename base_t::size_type  size_type;$/;"	t	class:boost::interprocess::ipcdetail::private_node_pool	access:public
boost::interprocess::ipcdetail::ptime_to_timespec	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^inline timespec ptime_to_timespec (const boost::posix_time::ptime &tm)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const boost::posix_time::ptime &tm)
boost::interprocess::ipcdetail::raw_mapped_region_creator	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^   class raw_mapped_region_creator$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::raw_mapped_region_creator::create_posix_mapped_region	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^         create_posix_mapped_region(void *address, std::size_t size)$/;"	f	class:boost::interprocess::ipcdetail::raw_mapped_region_creator	access:public	signature:(void *address, std::size_t size)
boost::interprocess::ipcdetail::ref_count_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^struct ref_count_ptr$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::ref_count_ptr::ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   void *ptr;$/;"	m	struct:boost::interprocess::ipcdetail::ref_count_ptr	access:public
boost::interprocess::ipcdetail::ref_count_ptr::ref_count_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   ref_count_ptr(void *p, boost::uint32_t count)$/;"	f	struct:boost::interprocess::ipcdetail::ref_count_ptr	access:public	signature:(void *p, boost::uint32_t count)
boost::interprocess::ipcdetail::ref_count_ptr::singleton_ref_count	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   volatile boost::uint32_t singleton_ref_count;$/;"	m	struct:boost::interprocess::ipcdetail::ref_count_ptr	access:public
boost::interprocess::ipcdetail::ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^         struct ref_holder$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^         struct ref_holder<T &&>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^         struct ref_holder<T &>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^         struct ref_holder<const T &&>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^         struct ref_holder<const T>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::ref_holder::get	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T & get() {  return t_;   }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
boost::interprocess::ipcdetail::ref_holder::get	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T && get()  { return ::boost::move(t_); }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
boost::interprocess::ipcdetail::ref_holder::get	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T && get() {  return ::boost::move(t_);   }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
boost::interprocess::ipcdetail::ref_holder::get	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            const T & get() {  return t_;   }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
boost::interprocess::ipcdetail::ref_holder::get_lvalue	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T & get_lvalue() {  return t_;   }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
boost::interprocess::ipcdetail::ref_holder::get_lvalue	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            const T & get_lvalue() {  return t_;   }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
boost::interprocess::ipcdetail::ref_holder::ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            ref_holder(T &&t)$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:(T &&t)
boost::interprocess::ipcdetail::ref_holder::ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            ref_holder(T &t)$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:(T &t)
boost::interprocess::ipcdetail::ref_holder::ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            ref_holder(const T &t)$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:(const T &t)
boost::interprocess::ipcdetail::ref_holder::t	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T &t;$/;"	m	struct:boost::interprocess::ipcdetail::ref_holder	access:public
boost::interprocess::ipcdetail::ref_holder::t_	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T &t_;$/;"	m	struct:boost::interprocess::ipcdetail::ref_holder	access:public
boost::interprocess::ipcdetail::ref_holder::t_	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            const T &t_;$/;"	m	struct:boost::interprocess::ipcdetail::ref_holder	access:public
boost::interprocess::ipcdetail::reinterpret_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct reinterpret_cast_tag {};$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::release_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool release_file_lock(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
boost::interprocess::ipcdetail::release_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool release_file_lock_sharable(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
boost::interprocess::ipcdetail::remove_const	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_const$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::remove_const	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_const<const T>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::remove_const::type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::remove_const	access:public
boost::interprocess::ipcdetail::remove_const_volatile	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_const_volatile$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::remove_const_volatile::type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   typedef typename remove_const<typename remove_volatile<T>::type>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::remove_const_volatile	access:public
boost::interprocess::ipcdetail::remove_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_reference$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::remove_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_reference<T&>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::remove_reference::type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::remove_reference	access:public
boost::interprocess::ipcdetail::remove_volatile	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_volatile$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::remove_volatile	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_volatile<volatile T>$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::remove_volatile::type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::remove_volatile	access:public
boost::interprocess::ipcdetail::robust_emulation_helpers	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^namespace robust_emulation_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::robust_emulation_helpers	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^namespace robust_emulation_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::robust_emulation_helpers	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^namespace robust_emulation_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::robust_emulation_helpers::create_and_get_robust_lock_file_path	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void create_and_get_robust_lock_file_path(std::string &s, OS_process_id_t pid)$/;"	f	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers	signature:(std::string &s, OS_process_id_t pid)
boost::interprocess::ipcdetail::robust_emulation_helpers::mutex_traits	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^class mutex_traits$/;"	c	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers
boost::interprocess::ipcdetail::robust_emulation_helpers::mutex_traits::take_ownership	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   static void take_ownership(T &t)$/;"	f	class:boost::interprocess::ipcdetail::robust_emulation_helpers::mutex_traits	access:public	signature:(T &t)
boost::interprocess::ipcdetail::robust_emulation_helpers::remove_if_can_lock_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void remove_if_can_lock_file(const char *file_path)$/;"	f	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers	signature:(const char *file_path)
boost::interprocess::ipcdetail::robust_emulation_helpers::robust_lock_path	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void robust_lock_path(std::string &s)$/;"	f	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers	signature:(std::string &s)
boost::interprocess::ipcdetail::robust_emulation_helpers::robust_lock_prefix	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline const char *robust_lock_prefix()$/;"	f	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers	signature:()
boost::interprocess::ipcdetail::robust_emulation_helpers::robust_lock_subdir_path	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline const char *robust_lock_subdir_path()$/;"	f	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers	signature:()
boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^class robust_mutex_lock_file$/;"	c	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers
boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file::fd	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   file_handle_t fd;$/;"	m	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:private
boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file::fname	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   std::string fname;$/;"	m	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:private
boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file::other_process_lock_remover	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   class other_process_lock_remover$/;"	c	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:private
boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file::other_process_lock_remover::operator ()	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^      void operator()(const char *filepath, const char *filename)$/;"	f	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file::other_process_lock_remover	access:public	signature:(const char *filepath, const char *filename)
boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file::remove_old_robust_lock_files	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool remove_old_robust_lock_files()$/;"	f	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:private	signature:()
boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file::robust_mutex_lock_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   robust_mutex_lock_file()$/;"	f	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:public	signature:()
boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file::~robust_mutex_lock_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   ~robust_mutex_lock_file()$/;"	f	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:public	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^class robust_spin_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::robust_spin_mutex::broken_state	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   static const boost::uint32_t broken_state  = 2;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public
boost::interprocess::ipcdetail::robust_spin_mutex::check_if_owner_dead_and_take_ownership_atomically	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool check_if_owner_dead_and_take_ownership_atomically();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::check_if_owner_dead_and_take_ownership_atomically	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::check_if_owner_dead_and_take_ownership_atomically()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::consistent	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   void consistent();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::consistent	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void robust_spin_mutex<Mutex>::consistent()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::correct_state	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   static const boost::uint32_t correct_state = 0;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public
boost::interprocess::ipcdetail::robust_spin_mutex::fixing_state	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   static const boost::uint32_t fixing_state  = 1;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public
boost::interprocess::ipcdetail::robust_spin_mutex::is_owner_dead	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool is_owner_dead(boost::uint32_t own);$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private	signature:(boost::uint32_t own)
boost::interprocess::ipcdetail::robust_spin_mutex::is_owner_dead	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::is_owner_dead(boost::uint32_t own)$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:(boost::uint32_t own)
boost::interprocess::ipcdetail::robust_spin_mutex::lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void robust_spin_mutex<Mutex>::lock()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::lock_own_unique_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool lock_own_unique_file();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::lock_own_unique_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::lock_own_unique_file()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::mtx	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   Mutex mtx;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private
boost::interprocess::ipcdetail::robust_spin_mutex::mutex_traits_t	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   typedef robust_emulation_helpers::mutex_traits<Mutex> mutex_traits_t;$/;"	t	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public
boost::interprocess::ipcdetail::robust_spin_mutex::owner	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   volatile boost::uint32_t owner;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private
boost::interprocess::ipcdetail::robust_spin_mutex::owner_to_filename	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   void owner_to_filename(boost::uint32_t own, std::string &s);$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private	signature:(boost::uint32_t own, std::string &s)
boost::interprocess::ipcdetail::robust_spin_mutex::owner_to_filename	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void robust_spin_mutex<Mutex>::owner_to_filename(boost::uint32_t own, std::string &s)$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:(boost::uint32_t own, std::string &s)
boost::interprocess::ipcdetail::robust_spin_mutex::previous_owner_dead	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool previous_owner_dead();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::previous_owner_dead	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::previous_owner_dead()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::robust_check	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool robust_check();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::robust_check	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::robust_check()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::robust_spin_mutex	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   robust_spin_mutex();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::robust_spin_mutex	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline robust_spin_mutex<Mutex>::robust_spin_mutex()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::spin_threshold	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   static const unsigned int spin_threshold = 100u;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private
boost::interprocess::ipcdetail::robust_spin_mutex::state	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   volatile boost::uint32_t state;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private
boost::interprocess::ipcdetail::robust_spin_mutex::timed_lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::robust_spin_mutex::timed_lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::timed_lock$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::robust_spin_mutex::try_lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::try_lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::unlock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::robust_spin_mutex::unlock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void robust_spin_mutex<Mutex>::unlock()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^struct scoped_ptr_dealloc_functor$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor::alloc_version	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^      boost::interprocess::version<Allocator>::value>                   alloc_version;$/;"	t	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public
boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor::allocator_v1	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef ipcdetail::integral_constant<unsigned, 1>     allocator_v1;$/;"	t	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public
boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor::allocator_v2	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef ipcdetail::integral_constant<unsigned, 2>     allocator_v2;$/;"	t	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public
boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor::m_alloc	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   Allocator& m_alloc;$/;"	m	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public
boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor::operator ()	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void operator()(pointer ptr)$/;"	f	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public	signature:(pointer ptr)
boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor::pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename Allocator::pointer pointer;$/;"	t	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public
boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor::priv_deallocate	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void priv_deallocate(const typename Allocator::pointer &p, allocator_v1)$/;"	f	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:private	signature:(const typename Allocator::pointer &p, allocator_v1)
boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor::priv_deallocate	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void priv_deallocate(const typename Allocator::pointer &p, allocator_v2)$/;"	f	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:private	signature:(const typename Allocator::pointer &p, allocator_v2)
boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor::scoped_ptr_dealloc_functor	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   scoped_ptr_dealloc_functor(Allocator& a)$/;"	f	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public	signature:(Allocator& a)
boost::interprocess::ipcdetail::segment_manager_base_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct segment_manager_base_type$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::segment_manager_base_type::type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^{  typedef segment_manager_base<MemoryAlgorithm> type;   };$/;"	t	struct:boost::interprocess::ipcdetail::segment_manager_base_type	access:public
boost::interprocess::ipcdetail::segment_manager_iterator_transform	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct segment_manager_iterator_transform$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:std::unary_function
boost::interprocess::ipcdetail::segment_manager_iterator_transform::operator ()	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   result_type operator()(const typename Iterator::value_type &arg) const$/;"	f	struct:boost::interprocess::ipcdetail::segment_manager_iterator_transform	access:public	signature:(const typename Iterator::value_type &arg) const
boost::interprocess::ipcdetail::segment_manager_iterator_transform::result_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef segment_manager_iterator_value_adaptor<Iterator, intrusive> result_type;$/;"	t	struct:boost::interprocess::ipcdetail::segment_manager_iterator_transform	access:public
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class segment_manager_iterator_value_adaptor$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class segment_manager_iterator_value_adaptor<Iterator, false>$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename first_type::char_type       char_type;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::char_type   char_type;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::first_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::first_type  first_type;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::iterator_val_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename Iterator::value_type        iterator_val_t;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::m_val	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const typename Iterator::value_type *m_val;$/;"	m	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const char_type *name() const$/;"	f	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public	signature:() const
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type name_length() const$/;"	f	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public	signature:() const
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned short name_length() const$/;"	f	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public	signature:() const
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::second_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::second_type second_type;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   segment_manager_iterator_value_adaptor(const typename Iterator::value_type &val)$/;"	f	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public	signature:(const typename Iterator::value_type &val)
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::size_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename first_type::size_type       size_type;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor::value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const void *value() const$/;"	f	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public	signature:() const
boost::interprocess::ipcdetail::segment_manager_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^struct segment_manager_type$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::segment_manager_type::type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef segment_manager<CharType, MemoryAlgorithm, IndexType> type;$/;"	t	struct:boost::interprocess::ipcdetail::segment_manager_type	access:public
boost::interprocess::ipcdetail::select1st	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct select1st$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::select1st::operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const OtherPair& x) const$/;"	f	struct:boost::interprocess::ipcdetail::select1st	access:public	signature:(const OtherPair& x) const
boost::interprocess::ipcdetail::select1st::operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const typename Pair::first_type& x) const$/;"	f	struct:boost::interprocess::ipcdetail::select1st	access:public	signature:(const typename Pair::first_type& x) const
boost::interprocess::ipcdetail::semaphore_close	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_close(sem_t *handle)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle)
boost::interprocess::ipcdetail::semaphore_destroy	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_destroy(sem_t *handle)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle)
boost::interprocess::ipcdetail::semaphore_init	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_init(sem_t *handle, unsigned int initialCount)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle, unsigned int initialCount)
boost::interprocess::ipcdetail::semaphore_open	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_open$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *&handle, create_enum_t type, const char *origname, unsigned int count = 0, const permissions &perm = permissions())
boost::interprocess::ipcdetail::semaphore_post	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_post(sem_t *handle)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle)
boost::interprocess::ipcdetail::semaphore_timed_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_timed_wait(sem_t *handle, const boost::posix_time::ptime &abs_time)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::semaphore_try_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_try_wait(sem_t *handle)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle)
boost::interprocess::ipcdetail::semaphore_unlink	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_unlink(const char *semname)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *semname)
boost::interprocess::ipcdetail::semaphore_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_wait(sem_t *handle)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle)
boost::interprocess::ipcdetail::set_file_pointer	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool set_file_pointer(file_handle_t hnd, offset_t off, file_pos_t pos)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, offset_t off, file_pos_t pos)
boost::interprocess::ipcdetail::shared_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^class shared_adaptive_node_pool$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:ipcdetail::shared_pool_impl
boost::interprocess::ipcdetail::shared_adaptive_node_pool::base_t	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::ipcdetail::shared_adaptive_node_pool	access:private
boost::interprocess::ipcdetail::shared_adaptive_node_pool::shared_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   shared_adaptive_node_pool(SegmentManager *segment_mgnr)$/;"	f	class:boost::interprocess::ipcdetail::shared_adaptive_node_pool	access:public	signature:(SegmentManager *segment_mgnr)
boost::interprocess::ipcdetail::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^class shared_count$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::shared_count::const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<const VoidAllocator>::type                   const_allocator_pointer;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
boost::interprocess::ipcdetail::shared_count::const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<const Deleter>::type                         const_deleter_pointer;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
boost::interprocess::ipcdetail::shared_count::counted_base_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<sp_counted_base>::type                       counted_base_ptr;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
boost::interprocess::ipcdetail::shared_count::counted_impl	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   typedef sp_counted_impl_pd<VoidAllocator, Deleter>       counted_impl;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
boost::interprocess::ipcdetail::shared_count::counted_impl_allocator	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      portable_rebind_alloc<counted_impl>::type                      counted_impl_allocator;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
boost::interprocess::ipcdetail::shared_count::counted_impl_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<counted_impl>::type                         counted_impl_ptr;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
boost::interprocess::ipcdetail::shared_count::get_deleter	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:() const
boost::interprocess::ipcdetail::shared_count::internal_equal	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_equal (shared_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count<T2, VoidAllocator2, Deleter2> const & other) const
boost::interprocess::ipcdetail::shared_count::internal_less	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_less  (shared_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count<T2, VoidAllocator2, Deleter2> const & other) const
boost::interprocess::ipcdetail::shared_count::m_pi	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   counted_impl_ptr  m_pi;$/;"	m	class:boost::interprocess::ipcdetail::shared_count	access:private
boost::interprocess::ipcdetail::shared_count::m_px	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer           m_px;$/;"	m	class:boost::interprocess::ipcdetail::shared_count	access:private
boost::interprocess::ipcdetail::shared_count::operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count & operator= (shared_count const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count const & r)
boost::interprocess::ipcdetail::shared_count::operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count & operator= (shared_count<Y, VoidAllocator, Deleter> const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::ipcdetail::shared_count::pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:public
boost::interprocess::ipcdetail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(const pointer & ptr, shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(const pointer & ptr, shared_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::ipcdetail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::ipcdetail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(weak_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::ipcdetail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count()$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:()
boost::interprocess::ipcdetail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(const Ptr &p, const VoidAllocator &a, Deleter d)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(const Ptr &p, const VoidAllocator &a, Deleter d)
boost::interprocess::ipcdetail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(const shared_count &other_shared_count, const Ptr &p)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(const shared_count &other_shared_count, const Ptr &p)
boost::interprocess::ipcdetail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(shared_count const & r)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count const & r)
boost::interprocess::ipcdetail::shared_count::swap	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void swap(shared_count & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count & r)
boost::interprocess::ipcdetail::shared_count::to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   const pointer &to_raw_pointer() const$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:() const
boost::interprocess::ipcdetail::shared_count::to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer &to_raw_pointer()$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:()
boost::interprocess::ipcdetail::shared_count::unique	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool unique() const \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:() const
boost::interprocess::ipcdetail::shared_count::use_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:() const
boost::interprocess::ipcdetail::shared_count::vallocator_traits	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   typedef boost::container::allocator_traits<VoidAllocator>         vallocator_traits;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
boost::interprocess::ipcdetail::shared_count::~shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   ~shared_count() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:()
boost::interprocess::ipcdetail::shared_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^class shared_node_pool$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:ipcdetail::shared_pool_impl
boost::interprocess::ipcdetail::shared_node_pool::base_t	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::ipcdetail::shared_node_pool	access:private
boost::interprocess::ipcdetail::shared_node_pool::shared_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   shared_node_pool(SegmentManager *segment_mgnr)$/;"	f	class:boost::interprocess::ipcdetail::shared_node_pool	access:public	signature:(SegmentManager *segment_mgnr)
boost::interprocess::ipcdetail::shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class shared_pool_impl$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:private_node_allocator_t
boost::interprocess::ipcdetail::shared_pool_impl::allocate_node	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void *allocate_node()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
boost::interprocess::ipcdetail::shared_pool_impl::allocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void allocate_nodes(const size_type n, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:(const size_type n, multiallocation_chain &chain)
boost::interprocess::ipcdetail::shared_pool_impl::deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
boost::interprocess::ipcdetail::shared_pool_impl::deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
boost::interprocess::ipcdetail::shared_pool_impl::deallocate_node	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_node(void *ptr)$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:(void *ptr)
boost::interprocess::ipcdetail::shared_pool_impl::deallocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_nodes(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:(multiallocation_chain &chain)
boost::interprocess::ipcdetail::shared_pool_impl::deallocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_nodes(multiallocation_chain &nodes, size_type num)$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:(multiallocation_chain &nodes, size_type num)
boost::interprocess::ipcdetail::shared_pool_impl::dec_ref_count	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type dec_ref_count()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
boost::interprocess::ipcdetail::shared_pool_impl::header_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   struct header_t : mutex_type$/;"	s	class:boost::interprocess::ipcdetail::shared_pool_impl	inherits:mutex_type	access:private
boost::interprocess::ipcdetail::shared_pool_impl::header_t::header_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      header_t()$/;"	f	struct:boost::interprocess::ipcdetail::shared_pool_impl::header_t	access:public	signature:()
boost::interprocess::ipcdetail::shared_pool_impl::header_t::m_usecount	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      size_type m_usecount;    \/\/Number of attached allocators$/;"	m	struct:boost::interprocess::ipcdetail::shared_pool_impl::header_t	access:public
boost::interprocess::ipcdetail::shared_pool_impl::inc_ref_count	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type inc_ref_count()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
boost::interprocess::ipcdetail::shared_pool_impl::m_header	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   } m_header;$/;"	m	class:boost::interprocess::ipcdetail::shared_pool_impl	typeref:struct:boost::interprocess::ipcdetail::shared_pool_impl::header_t	access:private
boost::interprocess::ipcdetail::shared_pool_impl::multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      multiallocation_chain                     multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public
boost::interprocess::ipcdetail::shared_pool_impl::mutex_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename segment_manager::mutex_family::mutex_type mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::shared_pool_impl	access:private
boost::interprocess::ipcdetail::shared_pool_impl::purge_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void purge_blocks()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
boost::interprocess::ipcdetail::shared_pool_impl::purge_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void purge_chunks()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
boost::interprocess::ipcdetail::shared_pool_impl::segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      segment_manager                           segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public
boost::interprocess::ipcdetail::shared_pool_impl::shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   shared_pool_impl(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::ipcdetail::shared_pool_impl::size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^     size_type                                 size_type;$/;"	t	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public
boost::interprocess::ipcdetail::shared_pool_impl::~shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   ~shared_pool_impl()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^class shm_named_condition$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::shm_named_condition::construct_func_t	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   typedef boost::interprocess::ipcdetail::named_creation_functor<internal_condition> construct_func_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
boost::interprocess::ipcdetail::shm_named_condition::dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:private	signature:()
boost::interprocess::ipcdetail::shm_named_condition::dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline void shm_named_condition::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:()
boost::interprocess::ipcdetail::shm_named_condition::internal_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   typedef interprocess_condition internal_condition;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
boost::interprocess::ipcdetail::shm_named_condition::internal_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   typedef ipcdetail::condition_any_wrapper<internal_condition_members> internal_condition;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   class internal_condition_members$/;"	c	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members::condvar_type	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      typedef interprocess_condition   condvar_type;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:public
boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members::get_condvar	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      condvar_type&  get_condvar() {  return m_cond;  }$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members::get_mutex	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      mutex_type&    get_mutex()   {  return m_mtx; }$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members::m_cond	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      condvar_type   m_cond;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:private
boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members::m_mtx	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      mutex_type     m_mtx;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:private
boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members::mutex_type	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      typedef interprocess_mutex       mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:public
boost::interprocess::ipcdetail::shm_named_condition::m_cond	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   internal_condition m_cond;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
boost::interprocess::ipcdetail::shm_named_condition::m_shmem	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
boost::interprocess::ipcdetail::shm_named_condition::notify_all	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_condition::notify_all	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline void shm_named_condition::notify_all()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:()
boost::interprocess::ipcdetail::shm_named_condition::notify_one	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_condition::notify_one	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline void shm_named_condition::notify_one()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:()
boost::interprocess::ipcdetail::shm_named_condition::open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
boost::interprocess::ipcdetail::shm_named_condition::operator =	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition &operator=(const shm_named_condition &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:private	signature:(const shm_named_condition &)
boost::interprocess::ipcdetail::shm_named_condition::remove	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::shm_named_condition::remove	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline bool shm_named_condition::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(const char *name)
boost::interprocess::ipcdetail::shm_named_condition::shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:private	signature:()
boost::interprocess::ipcdetail::shm_named_condition::shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition(const shm_named_condition &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:private	signature:(const shm_named_condition &)
boost::interprocess::ipcdetail::shm_named_condition::shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::shm_named_condition::shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::ipcdetail::shm_named_condition::shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::shm_named_condition::shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline shm_named_condition::shm_named_condition(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::shm_named_condition::shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline shm_named_condition::shm_named_condition(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::shm_named_condition::shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline shm_named_condition::shm_named_condition(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::shm_named_condition::timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::shm_named_condition::timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::ipcdetail::shm_named_condition::timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline bool shm_named_condition::timed_wait$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::shm_named_condition::timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline bool shm_named_condition::timed_wait$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::ipcdetail::shm_named_condition::wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   void wait(L& lock);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(L& lock)
boost::interprocess::ipcdetail::shm_named_condition::wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   void wait(L& lock, Pr pred);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(L& lock, Pr pred)
boost::interprocess::ipcdetail::shm_named_condition::wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline void shm_named_condition::wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(L& lock)
boost::interprocess::ipcdetail::shm_named_condition::wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline void shm_named_condition::wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(L& lock, Pr pred)
boost::interprocess::ipcdetail::shm_named_condition::~shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   ~shm_named_condition();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_condition::~shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline shm_named_condition::~shm_named_condition()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:()
boost::interprocess::ipcdetail::shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^class shm_named_condition_any$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::shm_named_condition_any::construct_func_t	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   typedef boost::interprocess::ipcdetail::named_creation_functor<internal_condition> construct_func_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
boost::interprocess::ipcdetail::shm_named_condition_any::dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private	signature:()
boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   typedef ipcdetail::condition_any_wrapper<internal_condition_members> internal_condition;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   class internal_condition_members$/;"	c	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members::condvar_type	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      typedef interprocess_condition   condvar_type;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:public
boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members::get_condvar	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      condvar_type&  get_condvar() {  return m_cond;  }$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members::get_mutex	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      mutex_type&    get_mutex()   {  return m_mtx; }$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members::m_cond	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      condvar_type   m_cond;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:private
boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members::m_mtx	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      mutex_type     m_mtx;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:private
boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members::mutex_type	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      typedef interprocess_mutex       mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:public
boost::interprocess::ipcdetail::shm_named_condition_any::m_cond	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   internal_condition m_cond;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
boost::interprocess::ipcdetail::shm_named_condition_any::m_shmem	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
boost::interprocess::ipcdetail::shm_named_condition_any::notify_all	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_condition_any::notify_one	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_condition_any::open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
boost::interprocess::ipcdetail::shm_named_condition_any::operator =	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any &operator=(const shm_named_condition_any &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private	signature:(const shm_named_condition_any &)
boost::interprocess::ipcdetail::shm_named_condition_any::remove	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   static bool remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::shm_named_condition_any::shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private	signature:()
boost::interprocess::ipcdetail::shm_named_condition_any::shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any(const shm_named_condition_any &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private	signature:(const shm_named_condition_any &)
boost::interprocess::ipcdetail::shm_named_condition_any::shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any(create_only_t create_only, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::shm_named_condition_any::shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any(open_only_t open_only, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::ipcdetail::shm_named_condition_any::shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::shm_named_condition_any::timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::shm_named_condition_any::timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::ipcdetail::shm_named_condition_any::wait	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(L& lock)
boost::interprocess::ipcdetail::shm_named_condition_any::wait	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(L& lock, Pr pred)
boost::interprocess::ipcdetail::shm_named_condition_any::~shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   ~shm_named_condition_any()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^class shm_named_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::shm_named_mutex::construct_func_t	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   typedef ipcdetail::named_creation_functor<interprocess_mutex> construct_func_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private
boost::interprocess::ipcdetail::shm_named_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private	signature:()
boost::interprocess::ipcdetail::shm_named_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline void shm_named_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:()
boost::interprocess::ipcdetail::shm_named_mutex::internal_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   interprocess_mutex &internal_mutex()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_mutex::internal_mutex_type	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   typedef interprocess_mutex internal_mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public
boost::interprocess::ipcdetail::shm_named_mutex::lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_mutex::lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline void shm_named_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:()
boost::interprocess::ipcdetail::shm_named_mutex::m_shmem	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private
boost::interprocess::ipcdetail::shm_named_mutex::open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private
boost::interprocess::ipcdetail::shm_named_mutex::operator =	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex &operator=(const shm_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private	signature:(const shm_named_mutex &)
boost::interprocess::ipcdetail::shm_named_mutex::remove	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::shm_named_mutex::remove	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline bool shm_named_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:(const char *name)
boost::interprocess::ipcdetail::shm_named_mutex::shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private	signature:()
boost::interprocess::ipcdetail::shm_named_mutex::shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex(const shm_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private	signature:(const shm_named_mutex &)
boost::interprocess::ipcdetail::shm_named_mutex::shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::shm_named_mutex::shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::ipcdetail::shm_named_mutex::shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::shm_named_mutex::shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline shm_named_mutex::shm_named_mutex(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::shm_named_mutex::shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline shm_named_mutex::shm_named_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::shm_named_mutex::shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline shm_named_mutex::shm_named_mutex(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::shm_named_mutex::timed_lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::shm_named_mutex::timed_lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline bool shm_named_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::shm_named_mutex::try_lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_mutex::try_lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline bool shm_named_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:()
boost::interprocess::ipcdetail::shm_named_mutex::unlock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_mutex::unlock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline void shm_named_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:()
boost::interprocess::ipcdetail::shm_named_mutex::~shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   ~shm_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_mutex::~shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline shm_named_mutex::~shm_named_mutex()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:()
boost::interprocess::ipcdetail::shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^class shm_named_recursive_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::shm_named_recursive_mutex::construct_func_t	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   typedef named_creation_functor<interprocess_recursive_mutex> construct_func_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private
boost::interprocess::ipcdetail::shm_named_recursive_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private	signature:()
boost::interprocess::ipcdetail::shm_named_recursive_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline void shm_named_recursive_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:()
boost::interprocess::ipcdetail::shm_named_recursive_mutex::lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_recursive_mutex::lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline void shm_named_recursive_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:()
boost::interprocess::ipcdetail::shm_named_recursive_mutex::m_shmem	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private
boost::interprocess::ipcdetail::shm_named_recursive_mutex::mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   interprocess_recursive_mutex *mutex() const$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private	signature:() const
boost::interprocess::ipcdetail::shm_named_recursive_mutex::open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private
boost::interprocess::ipcdetail::shm_named_recursive_mutex::operator =	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex &operator=(const shm_named_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private	signature:(const shm_named_recursive_mutex &)
boost::interprocess::ipcdetail::shm_named_recursive_mutex::remove	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::shm_named_recursive_mutex::remove	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline bool shm_named_recursive_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:(const char *name)
boost::interprocess::ipcdetail::shm_named_recursive_mutex::shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private	signature:()
boost::interprocess::ipcdetail::shm_named_recursive_mutex::shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex(const shm_named_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private	signature:(const shm_named_recursive_mutex &)
boost::interprocess::ipcdetail::shm_named_recursive_mutex::shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::shm_named_recursive_mutex::shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::ipcdetail::shm_named_recursive_mutex::shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::shm_named_recursive_mutex::shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline shm_named_recursive_mutex::shm_named_recursive_mutex(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::shm_named_recursive_mutex::shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline shm_named_recursive_mutex::shm_named_recursive_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::shm_named_recursive_mutex::shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline shm_named_recursive_mutex::shm_named_recursive_mutex(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::shm_named_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::shm_named_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline bool shm_named_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::shm_named_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline bool shm_named_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:()
boost::interprocess::ipcdetail::shm_named_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline void shm_named_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:()
boost::interprocess::ipcdetail::shm_named_recursive_mutex::~shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   ~shm_named_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_recursive_mutex::~shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline shm_named_recursive_mutex::~shm_named_recursive_mutex()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:()
boost::interprocess::ipcdetail::shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^class shm_named_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::shm_named_semaphore::construct_func_t	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   typedef named_creation_functor<interprocess_semaphore, int> construct_func_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private
boost::interprocess::ipcdetail::shm_named_semaphore::dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private	signature:()
boost::interprocess::ipcdetail::shm_named_semaphore::dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline void shm_named_semaphore::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:()
boost::interprocess::ipcdetail::shm_named_semaphore::m_shmem	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private
boost::interprocess::ipcdetail::shm_named_semaphore::open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private
boost::interprocess::ipcdetail::shm_named_semaphore::operator =	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore &operator=(const shm_named_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private	signature:(const shm_named_semaphore &)
boost::interprocess::ipcdetail::shm_named_semaphore::post	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_semaphore::post	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline void shm_named_semaphore::post()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:()
boost::interprocess::ipcdetail::shm_named_semaphore::remove	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::shm_named_semaphore::remove	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline bool shm_named_semaphore::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:(const char *name)
boost::interprocess::ipcdetail::shm_named_semaphore::semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   interprocess_semaphore *semaphore() const$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private	signature:() const
boost::interprocess::ipcdetail::shm_named_semaphore::shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private	signature:()
boost::interprocess::ipcdetail::shm_named_semaphore::shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore(const shm_named_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private	signature:(const shm_named_semaphore &)
boost::interprocess::ipcdetail::shm_named_semaphore::shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
boost::interprocess::ipcdetail::shm_named_semaphore::shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore(open_only_t, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::shm_named_semaphore::shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
boost::interprocess::ipcdetail::shm_named_semaphore::shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline shm_named_semaphore::shm_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm)
boost::interprocess::ipcdetail::shm_named_semaphore::shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline shm_named_semaphore::shm_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::shm_named_semaphore::shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline shm_named_semaphore::shm_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm)
boost::interprocess::ipcdetail::shm_named_semaphore::timed_wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::shm_named_semaphore::timed_wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline bool shm_named_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::shm_named_semaphore::try_wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_semaphore::try_wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline bool shm_named_semaphore::try_wait()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:()
boost::interprocess::ipcdetail::shm_named_semaphore::wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_semaphore::wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline void shm_named_semaphore::wait()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:()
boost::interprocess::ipcdetail::shm_named_semaphore::~shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   ~shm_named_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::shm_named_semaphore::~shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline shm_named_semaphore::~shm_named_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:()
boost::interprocess::ipcdetail::shmem_open_or_create	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^struct shmem_open_or_create$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::shmem_open_or_create::type	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^      < shared_memory_object, AllocationAlgorithm::Alignment, true, false> type;$/;"	t	struct:boost::interprocess::ipcdetail::shmem_open_or_create	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^class simple_seq_fit_impl$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^class simple_seq_fit_impl$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::simple_seq_fit_impl::Alignment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static const std::size_t Alignment = ::boost::alignment_of<boost::ipcdetail::max_align>::value;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::Alignment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^	static const size_type Alignment      = ::boost::alignment_of< ::boost::detail::max_align>::value;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type AllocatedCtrlBytes = BlockCtrlBytes;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type AllocatedCtrlUnits = BlockCtrlUnits;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static const std::size_t BlockCtrlBytes = ipcdetail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type BlockCtrlBytes = ipcdetail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::BlockCtrlSize	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static const std::size_t BlockCtrlSize  = BlockCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type BlockCtrlUnits = BlockCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::MinBlockSize	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static const std::size_t MinBlockSize   = BlockCtrlSize + Alignment;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::MinBlockSize	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type MinBlockSize   = MinBlockUnits*Alignment;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::MinBlockUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type MinBlockUnits  = BlockCtrlUnits;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static const std::size_t PayloadPerAllocation = BlockCtrlBytes;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type PayloadPerAllocation = BlockCtrlBytes;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const size_type UsableByPreviousChunk = 0;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::algo_impl_t	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef ipcdetail::memory_algorithm_common<simple_seq_fit_impl> algo_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocate(size_type nbytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* allocate             (size_type nbytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type nbytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocate(size_type nbytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* allocate             (size_type nbytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type nbytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes, size_type alignment)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* allocate_aligned     (size_type nbytes, size_type alignment);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type nbytes, size_type alignment)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes, size_type alignment)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* allocate_aligned     (size_type nbytes, size_type alignment);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type nbytes, size_type alignment)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void allocate_many(const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void allocate_many(size_type elem_bytes, size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type elem_bytes, size_type num_elements, multiallocation_chain &chain)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocation_command	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, void *reuse_ptr = 0, size_type backwards_multiple = 1)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocation_command	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   size_type min_size,$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, size_type min_size, size_type preferred_size,size_type &received_size, void *reuse_ptr, size_type backwards_multiple)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr = 0)
boost::interprocess::ipcdetail::simple_seq_fit_impl::allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   struct block_ctrl$/;"	s	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   class block_ctrl$/;"	c	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl::get_addr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      void *get_addr() const$/;"	f	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl::get_block_from_addr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      static block_ctrl *get_block_from_addr(void *addr)$/;"	f	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:(void *addr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl::get_total_bytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      size_type get_total_bytes() const$/;"	f	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl::get_total_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type get_total_bytes() const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl::get_user_bytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      size_type get_user_bytes() const$/;"	f	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl::get_user_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type get_user_bytes() const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl::m_next	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      block_ctrl_ptr m_next;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl::m_next	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      block_ctrl_ptr m_next;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl::m_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      size_type    m_size;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl::m_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type    m_size;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^         rebind_pointer<block_ctrl>::type                         block_ctrl_ptr;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^         rebind_pointer<block_ctrl>::type                   block_ctrl_ptr;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::char_ptr	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^         rebind_pointer<char>::type                         char_ptr;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::check_sanity	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::check_sanity	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::check_sanity	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::check_sanity	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::clear_free_memory	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void clear_free_memory();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::clear_free_memory	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::clear_free_memory()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(void *addr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::deallocate(void* addr)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void* addr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(void *addr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::deallocate(void* addr)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void* addr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   deallocate_many(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::multiallocation_chain &chain)
boost::interprocess::ipcdetail::simple_seq_fit_impl::deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void deallocate_many(multiallocation_chain &chain);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(multiallocation_chain &chain)
boost::interprocess::ipcdetail::simple_seq_fit_impl::difference_type	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type difference_type;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::difference_type	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type difference_type;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::get_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   size_type get_free_memory()  const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::get_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^simple_seq_fit_impl<MutexFamily, VoidPointer>::get_free_memory()  const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::get_min_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   get_min_size (size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type extra_hdr_bytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::get_min_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static size_type get_min_size (size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type extra_hdr_bytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::get_min_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   get_min_size (size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type extra_hdr_bytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::get_min_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static size_type get_min_size (size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type extra_hdr_bytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::get_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   size_type get_size()  const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::get_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^simple_seq_fit_impl<MutexFamily, VoidPointer>::get_size()  const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::get_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   size_type get_size()  const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::get_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^simple_seq_fit_impl<MutexFamily, VoidPointer>::get_size()  const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::grow	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void grow(size_type extra_size);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type extra_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::grow	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::grow(size_type extra_size)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type extra_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::grow	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void grow(size_type extra_size);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type extra_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::grow	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::grow(size_type extra_size)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type extra_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   struct header_t : public interprocess_mutex$/;"	s	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	inherits:interprocess_mutex	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   struct header_t : public interprocess_mutex$/;"	s	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	inherits:interprocess_mutex	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t::m_allocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      size_type       m_allocated;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t::m_allocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type         m_allocated;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t::m_extra_hdr_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type         m_extra_hdr_bytes;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t::m_root	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      block_ctrl        m_root;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t::m_root	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      block_ctrl        m_root;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t::m_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      size_type       m_size;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t::m_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type         m_size;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::interprocess_mutex	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef typename MutexFamily::mutex_type        interprocess_mutex;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::interprocess_mutex	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef typename MutexFamily::mutex_type        interprocess_mutex;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::m_header	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	typeref:struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::m_header	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	typeref:struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:private
boost::interprocess::ipcdetail::simple_seq_fit_impl::multi_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   multi_allocate(size_type nbytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::multi_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* multi_allocate(size_type nbytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type nbytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      basic_multiallocation_chain<VoidPointer>     multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::mutex_family	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::mutex_family	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::operator =	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl &operator=(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
boost::interprocess::ipcdetail::simple_seq_fit_impl::operator =	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl &operator=(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void priv_add_segment(void *addr, size_type size);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *addr, size_type size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_add_segment(void *addr, size_type size)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *addr, size_type size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_add_segment(void *addr, size_type size);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *addr, size_type size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_add_segment(void *addr, size_type segment_size)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *addr, size_type segment_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,size_type limit_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr = 0)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,size_type limit_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr = 0)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes, size_type alignment)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_allocate_aligned     (size_type nbytes, size_type alignment);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(size_type nbytes, size_type alignment)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_allocation_command (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, void *reuse_ptr, size_type sizeof_object)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocation_command(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,size_type sizeof_object)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_block_end_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ::priv_block_end_offset() const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_block_end_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   size_type priv_block_end_offset() const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:() const
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_check_and_allocate(size_type units$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(size_type units ,block_ctrl* prev ,block_ctrl* block ,size_type &received_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void* simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_check_and_allocate$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nunits ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* prev ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* block ,size_type &received_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* priv_check_and_allocate(size_type units$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(size_type units ,block_ctrl* prev ,block_ctrl* block ,size_type &received_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void* simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_check_and_allocate$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nunits ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* prev ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* block ,size_type &received_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *addr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void* addr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *addr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void* addr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_expand	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *ptr ,size_type min_size, size_type preferred_size ,size_type &received_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_expand	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *ptr ,size_type min_size ,size_type preferred_size ,size_type &received_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_expand	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *ptr ,size_type min_size, size_type preferred_size ,size_type &received_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_expand	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *ptr ,size_type min_size ,size_type preferred_size ,size_type &received_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ::priv_first_block_offset(const void *this_ptr, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(const void *this_ptr, size_type extra_hdr_bytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static size_type priv_first_block_offset(const void *this_ptr, size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const void *this_ptr, size_type extra_hdr_bytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_get_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_get_block(const void *ptr)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(const void *ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_get_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static block_ctrl *priv_get_block(const void *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const void *ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_get_total_units	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_get_total_units(size_type userbytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type userbytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_get_total_units	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static size_type priv_get_total_units(size_type userbytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(size_type userbytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_get_user_buffer(const typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(const typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static void *priv_get_user_buffer(const block_ctrl *block);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const block_ctrl *block)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool priv_is_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^bool simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_is_allocated_block$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_mark_new_allocated_block(block_ctrl *new_block)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(block_ctrl *new_block)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_mark_new_allocated_block(block_ctrl *block);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *block)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      priv_next_block_if_free$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   block_ctrl *priv_next_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_next_block_if_free$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   block_ctrl *priv_next_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      priv_prev_block_if_free$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::pair<block_ctrl*, block_ctrl*>priv_prev_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_prev_block_if_free$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<block_ctrl*, block_ctrl*>priv_prev_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_shrink	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool priv_shrink(void *ptr$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *ptr ,size_type max_size, size_type preferred_size ,size_type &received_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::priv_shrink	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_shrink (void *ptr$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *ptr ,size_type max_size ,size_type preferred_size ,size_type &received_size)
boost::interprocess::ipcdetail::simple_seq_fit_impl::raw_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      raw_allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, void *reuse_ptr = 0, size_type sizeof_object = 1)
boost::interprocess::ipcdetail::simple_seq_fit_impl::raw_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   raw_allocation_command  (boost::interprocess::allocation_type command,   size_type limit_objects,$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, size_type limit_objects, size_type preferred_objects,size_type &received_objects, void *reuse_ptr, size_type sizeof_object)
boost::interprocess::ipcdetail::simple_seq_fit_impl::shrink_to_fit	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void shrink_to_fit();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::shrink_to_fit	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::shrink_to_fit()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl           (size_type size, size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type size, size_type extra_hdr_bytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
boost::interprocess::ipcdetail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(size_type size, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type size, size_type extra_hdr_bytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl           (size_type size, size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type size, size_type extra_hdr_bytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
boost::interprocess::ipcdetail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(size_type segment_size, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type segment_size, size_type extra_hdr_bytes)
boost::interprocess::ipcdetail::simple_seq_fit_impl::size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   size(void *ptr) const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *ptr) const
boost::interprocess::ipcdetail::simple_seq_fit_impl::size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   size_type size(void *ptr) const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(void *ptr) const
boost::interprocess::ipcdetail::simple_seq_fit_impl::size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   size_type size(const void *ptr) const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(const void *ptr) const
boost::interprocess::ipcdetail::simple_seq_fit_impl::size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^simple_seq_fit_impl<MutexFamily, VoidPointer>::size(const void *ptr) const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(const void *ptr) const
boost::interprocess::ipcdetail::simple_seq_fit_impl::size_type	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type size_type;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::size_type	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type size_type;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::void_pointer	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::void_pointer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
boost::interprocess::ipcdetail::simple_seq_fit_impl::zero_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void zero_free_memory();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::zero_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::zero_free_memory()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   ~simple_seq_fit_impl();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline simple_seq_fit_impl<MutexFamily, VoidPointer>::~simple_seq_fit_impl()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ~simple_seq_fit_impl();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::ipcdetail::simple_seq_fit_impl::~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline simple_seq_fit_impl<MutexFamily, VoidPointer>::~simple_seq_fit_impl()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
boost::interprocess::ipcdetail::sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^class sp_counted_base$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::sp_counted_base::add_ref_copy	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    void add_ref_copy()$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
boost::interprocess::ipcdetail::sp_counted_base::add_ref_lock	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    bool add_ref_lock() \/\/ true on success$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
boost::interprocess::ipcdetail::sp_counted_base::operator =	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base & operator= ( sp_counted_base const & );$/;"	p	class:boost::interprocess::ipcdetail::sp_counted_base	access:private	signature:( sp_counted_base const & )
boost::interprocess::ipcdetail::sp_counted_base::ref_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   bool ref_release() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
boost::interprocess::ipcdetail::sp_counted_base::sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base( sp_counted_base const & );$/;"	p	class:boost::interprocess::ipcdetail::sp_counted_base	access:private	signature:( sp_counted_base const & )
boost::interprocess::ipcdetail::sp_counted_base::sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base(): use_count_( 1 ), weak_count_( 1 )$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
boost::interprocess::ipcdetail::sp_counted_base::use_count	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:() const
boost::interprocess::ipcdetail::sp_counted_base::use_count_	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    boost::uint32_t use_count_;        \/\/ #shared$/;"	m	class:boost::interprocess::ipcdetail::sp_counted_base	access:private
boost::interprocess::ipcdetail::sp_counted_base::weak_add_ref	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   void weak_add_ref() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
boost::interprocess::ipcdetail::sp_counted_base::weak_count_	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    boost::uint32_t weak_count_;       \/\/ #weak + (#shared != 0)$/;"	m	class:boost::interprocess::ipcdetail::sp_counted_base	access:private
boost::interprocess::ipcdetail::sp_counted_base::weak_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   bool weak_release() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
boost::interprocess::ipcdetail::sp_counted_base::~sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    ~sp_counted_base() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
boost::interprocess::ipcdetail::sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^class sp_counted_impl_pd$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:sp_counted_base,boost::container::allocator_traits::,portable_rebind_alloc::type,D
boost::interprocess::ipcdetail::sp_counted_impl_pd::const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^         rebind_pointer<const A>::type                   const_allocator_pointer;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
boost::interprocess::ipcdetail::sp_counted_impl_pd::const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^         rebind_pointer<const D>::type                   const_deleter_pointer;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
boost::interprocess::ipcdetail::sp_counted_impl_pd::const_this_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^            < const this_type >::type        const_this_allocator;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
boost::interprocess::ipcdetail::sp_counted_impl_pd::destroy	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void destroy() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:()
boost::interprocess::ipcdetail::sp_counted_impl_pd::dispose	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void dispose() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:()
boost::interprocess::ipcdetail::sp_counted_impl_pd::get_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   const_allocator_pointer get_allocator() const$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:() const
boost::interprocess::ipcdetail::sp_counted_impl_pd::get_deleter	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:() const
boost::interprocess::ipcdetail::sp_counted_impl_pd::m_ptr	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
boost::interprocess::ipcdetail::sp_counted_impl_pd::operator =	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd & operator= ( sp_counted_impl_pd const & );$/;"	p	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private	signature:( sp_counted_impl_pd const & )
boost::interprocess::ipcdetail::sp_counted_impl_pd::pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename D::pointer   pointer;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
boost::interprocess::ipcdetail::sp_counted_impl_pd::release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void release() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:()
boost::interprocess::ipcdetail::sp_counted_impl_pd::sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd( sp_counted_impl_pd const & );$/;"	p	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private	signature:( sp_counted_impl_pd const & )
boost::interprocess::ipcdetail::sp_counted_impl_pd::sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd(const Ptr & p, const A &a, const D &d )$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:(const Ptr & p, const A &a, const D &d )
boost::interprocess::ipcdetail::sp_counted_impl_pd::this_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^            < this_type >::type              this_allocator;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
boost::interprocess::ipcdetail::sp_counted_impl_pd::this_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename this_allocator::pointer  this_pointer;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
boost::interprocess::ipcdetail::sp_counted_impl_pd::this_type	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef sp_counted_impl_pd<A, D>          this_type;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
boost::interprocess::ipcdetail::sp_counted_impl_pd::weak_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void weak_release() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:()
boost::interprocess::ipcdetail::sp_enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^inline void sp_enable_shared_from_this$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(shared_count<T, VoidAllocator, Deleter> const & pn ,enable_shared_from_this<T, VoidAllocator, Deleter> *pe ,T *ptr)
boost::interprocess::ipcdetail::sp_enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^inline void sp_enable_shared_from_this(shared_count<T, VoidAllocator, Deleter> const &, ...)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(shared_count<T, VoidAllocator, Deleter> const &, ...)
boost::interprocess::ipcdetail::spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^class spin_condition$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::spin_condition::NOTIFY_ALL	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::ipcdetail::spin_condition::__anon12
boost::interprocess::ipcdetail::spin_condition::NOTIFY_ONE	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::ipcdetail::spin_condition::__anon12
boost::interprocess::ipcdetail::spin_condition::SLEEP	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::ipcdetail::spin_condition::__anon12
boost::interprocess::ipcdetail::spin_condition::do_timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   bool do_timed_wait(bool tout_enabled, const boost::posix_time::ptime &abs_time, InterprocessMutex &mut);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:private	signature:(bool tout_enabled, const boost::posix_time::ptime &abs_time, InterprocessMutex &mut)
boost::interprocess::ipcdetail::spin_condition::do_timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   bool do_timed_wait(const boost::posix_time::ptime &abs_time, InterprocessMutex &mut);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(const boost::posix_time::ptime &abs_time, InterprocessMutex &mut)
boost::interprocess::ipcdetail::spin_condition::do_timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline bool spin_condition::do_timed_wait$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:(const boost::posix_time::ptime &abs_time, InterprocessMutex &mut)
boost::interprocess::ipcdetail::spin_condition::do_timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline bool spin_condition::do_timed_wait(bool tout_enabled,$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:(bool tout_enabled, const boost::posix_time::ptime &abs_time, InterprocessMutex &mut)
boost::interprocess::ipcdetail::spin_condition::do_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void do_wait(InterprocessMutex &mut);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(InterprocessMutex &mut)
boost::interprocess::ipcdetail::spin_condition::do_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline void spin_condition::do_wait(InterprocessMutex &mut)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:(InterprocessMutex &mut)
boost::interprocess::ipcdetail::spin_condition::m_command	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   volatile boost::uint32_t    m_command;$/;"	m	class:boost::interprocess::ipcdetail::spin_condition	access:private
boost::interprocess::ipcdetail::spin_condition::m_enter_mut	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   spin_mutex  m_enter_mut;$/;"	m	class:boost::interprocess::ipcdetail::spin_condition	access:private
boost::interprocess::ipcdetail::spin_condition::m_num_waiters	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   volatile boost::uint32_t    m_num_waiters;$/;"	m	class:boost::interprocess::ipcdetail::spin_condition	access:private
boost::interprocess::ipcdetail::spin_condition::notify	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void notify(boost::uint32_t command);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:private	signature:(boost::uint32_t command)
boost::interprocess::ipcdetail::spin_condition::notify	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline void spin_condition::notify(boost::uint32_t command)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:(boost::uint32_t command)
boost::interprocess::ipcdetail::spin_condition::notify_all	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:()
boost::interprocess::ipcdetail::spin_condition::notify_all	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline void spin_condition::notify_all()$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:()
boost::interprocess::ipcdetail::spin_condition::notify_one	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:()
boost::interprocess::ipcdetail::spin_condition::notify_one	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline void spin_condition::notify_one()$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:()
boost::interprocess::ipcdetail::spin_condition::operator =	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   spin_condition &operator=(const spin_condition &);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:private	signature:(const spin_condition &)
boost::interprocess::ipcdetail::spin_condition::spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   spin_condition();$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:()
boost::interprocess::ipcdetail::spin_condition::spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   spin_condition(const spin_condition &);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:private	signature:(const spin_condition &)
boost::interprocess::ipcdetail::spin_condition::spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline spin_condition::spin_condition()$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:()
boost::interprocess::ipcdetail::spin_condition::timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::spin_condition::timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::ipcdetail::spin_condition::wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(L& lock)
boost::interprocess::ipcdetail::spin_condition::wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(L& lock, Pr pred)
boost::interprocess::ipcdetail::spin_condition::~spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   ~spin_condition();$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:()
boost::interprocess::ipcdetail::spin_condition::~spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline spin_condition::~spin_condition()$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:()
boost::interprocess::ipcdetail::spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^class spin_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::spin_mutex::lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_mutex::lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline void spin_mutex::lock(void)$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:(void)
boost::interprocess::ipcdetail::spin_mutex::m_s	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   volatile boost::uint32_t m_s;$/;"	m	class:boost::interprocess::ipcdetail::spin_mutex	access:private
boost::interprocess::ipcdetail::spin_mutex::operator =	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   spin_mutex &operator=(const spin_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:private	signature:(const spin_mutex &)
boost::interprocess::ipcdetail::spin_mutex::spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   spin_mutex();$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_mutex::spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   spin_mutex(const spin_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:private	signature:(const spin_mutex &)
boost::interprocess::ipcdetail::spin_mutex::spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline spin_mutex::spin_mutex()$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:()
boost::interprocess::ipcdetail::spin_mutex::take_ownership	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   void take_ownership(){};$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_mutex::timed_lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::spin_mutex::timed_lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline bool spin_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::spin_mutex::try_lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_mutex::try_lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline bool spin_mutex::try_lock(void)$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:(void)
boost::interprocess::ipcdetail::spin_mutex::unlock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_mutex::unlock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline void spin_mutex::unlock(void)$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:(void)
boost::interprocess::ipcdetail::spin_mutex::~spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   ~spin_mutex();$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_mutex::~spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline spin_mutex::~spin_mutex()$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^class spin_recursive_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::spin_recursive_mutex::lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex::lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline void spin_recursive_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex::m_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   spin_mutex     m_mutex;$/;"	m	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private
boost::interprocess::ipcdetail::spin_recursive_mutex::m_nLockCount	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   unsigned int   m_nLockCount;$/;"	m	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private
boost::interprocess::ipcdetail::spin_recursive_mutex::m_nOwner	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   volatile ipcdetail::OS_systemwide_thread_id_t   m_nOwner;$/;"	m	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private
boost::interprocess::ipcdetail::spin_recursive_mutex::m_s	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   volatile boost::uint32_t m_s;$/;"	m	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private
boost::interprocess::ipcdetail::spin_recursive_mutex::operator =	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   spin_recursive_mutex &operator=(const spin_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private	signature:(const spin_recursive_mutex &)
boost::interprocess::ipcdetail::spin_recursive_mutex::spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   spin_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex::spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   spin_recursive_mutex(const spin_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private	signature:(const spin_recursive_mutex &)
boost::interprocess::ipcdetail::spin_recursive_mutex::spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline spin_recursive_mutex::spin_recursive_mutex()$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex::take_ownership	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   void take_ownership();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex::take_ownership	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline void spin_recursive_mutex::take_ownership()$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::spin_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline bool spin_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::spin_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline bool spin_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline void spin_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex::~spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   ~spin_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::spin_recursive_mutex::~spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline spin_recursive_mutex::~spin_recursive_mutex(){}$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
boost::interprocess::ipcdetail::spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^class spin_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::spin_semaphore::m_count	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   volatile boost::uint32_t m_count;$/;"	m	class:boost::interprocess::ipcdetail::spin_semaphore	access:private
boost::interprocess::ipcdetail::spin_semaphore::operator =	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   spin_semaphore &operator=(const spin_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:private	signature:(const spin_semaphore &)
boost::interprocess::ipcdetail::spin_semaphore::post	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::spin_semaphore::post	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline void spin_semaphore::post()$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:()
boost::interprocess::ipcdetail::spin_semaphore::spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   spin_semaphore(const spin_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:private	signature:(const spin_semaphore &)
boost::interprocess::ipcdetail::spin_semaphore::spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   spin_semaphore(unsigned int initialCount);$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:(unsigned int initialCount)
boost::interprocess::ipcdetail::spin_semaphore::spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline spin_semaphore::spin_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:(unsigned int initialCount)
boost::interprocess::ipcdetail::spin_semaphore::timed_wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::spin_semaphore::timed_wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline bool spin_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::spin_semaphore::try_wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::spin_semaphore::try_wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline bool spin_semaphore::try_wait()$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:()
boost::interprocess::ipcdetail::spin_semaphore::wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::spin_semaphore::wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline void spin_semaphore::wait()$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:()
boost::interprocess::ipcdetail::spin_semaphore::~spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   ~spin_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::spin_semaphore::~spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline spin_semaphore::~spin_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:()
boost::interprocess::ipcdetail::static_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct static_cast_tag {};$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::sync_handles	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^class sync_handles$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::sync_handles::LengthOfGlobal	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   static const std::size_t LengthOfGlobal = sizeof("Global\\\\boost.ipc")-1;$/;"	m	class:boost::interprocess::ipcdetail::sync_handles	access:private
boost::interprocess::ipcdetail::sync_handles::MUTEX	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   enum type { MUTEX, SEMAPHORE };$/;"	e	enum:boost::interprocess::ipcdetail::sync_handles::type
boost::interprocess::ipcdetail::sync_handles::NameBuf	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   typedef char NameBuf[StrSize];$/;"	t	class:boost::interprocess::ipcdetail::sync_handles	access:private
boost::interprocess::ipcdetail::sync_handles::SEMAPHORE	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   enum type { MUTEX, SEMAPHORE };$/;"	e	enum:boost::interprocess::ipcdetail::sync_handles::type
boost::interprocess::ipcdetail::sync_handles::StrSize	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   static const std::size_t StrSize        = LengthOfGlobal + (sizeof(sync_id)*2+1);$/;"	m	class:boost::interprocess::ipcdetail::sync_handles	access:private
boost::interprocess::ipcdetail::sync_handles::address_less	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   struct address_less$/;"	s	class:boost::interprocess::ipcdetail::sync_handles	access:private
boost::interprocess::ipcdetail::sync_handles::address_less::operator ()	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^      bool operator()(sync_id const * const l, sync_id const * const r) const$/;"	f	struct:boost::interprocess::ipcdetail::sync_handles::address_less	access:public	signature:(sync_id const * const l, sync_id const * const r) const
boost::interprocess::ipcdetail::sync_handles::destroy_handle	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void destroy_handle(const sync_id &id)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:public	signature:(const sync_id &id)
boost::interprocess::ipcdetail::sync_handles::destroy_syncs_in_range	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void destroy_syncs_in_range(const void *addr, std::size_t size)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:public	signature:(const void *addr, std::size_t size)
boost::interprocess::ipcdetail::sync_handles::fill_name	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void fill_name(NameBuf &name, const sync_id &id)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:private	signature:(NameBuf &name, const sync_id &id)
boost::interprocess::ipcdetail::sync_handles::map_	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   map_type map_;$/;"	m	class:boost::interprocess::ipcdetail::sync_handles	access:private
boost::interprocess::ipcdetail::sync_handles::map_type	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   typedef boost::container::map<const sync_id*, umap_type::iterator, address_less> map_type;$/;"	t	class:boost::interprocess::ipcdetail::sync_handles	access:private
boost::interprocess::ipcdetail::sync_handles::mtx_	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   spin_mutex mtx_;$/;"	m	class:boost::interprocess::ipcdetail::sync_handles	access:private
boost::interprocess::ipcdetail::sync_handles::obtain_mutex	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void *obtain_mutex(const sync_id &id, bool *popen_created = 0)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:public	signature:(const sync_id &id, bool *popen_created = 0)
boost::interprocess::ipcdetail::sync_handles::obtain_semaphore	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void *obtain_semaphore(const sync_id &id, unsigned int initial_count, bool *popen_created = 0)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:public	signature:(const sync_id &id, unsigned int initial_count, bool *popen_created = 0)
boost::interprocess::ipcdetail::sync_handles::open_or_create_mutex	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void* open_or_create_mutex(const sync_id &id)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:private	signature:(const sync_id &id)
boost::interprocess::ipcdetail::sync_handles::open_or_create_semaphore	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void* open_or_create_semaphore(const sync_id &id, unsigned int initial_count)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:private	signature:(const sync_id &id, unsigned int initial_count)
boost::interprocess::ipcdetail::sync_handles::throw_if_error	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void throw_if_error(void *hnd_val)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:private	signature:(void *hnd_val)
boost::interprocess::ipcdetail::sync_handles::type	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   enum type { MUTEX, SEMAPHORE };$/;"	g	class:boost::interprocess::ipcdetail::sync_handles	access:public
boost::interprocess::ipcdetail::sync_handles::umap_	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   umap_type umap_;$/;"	m	class:boost::interprocess::ipcdetail::sync_handles	access:private
boost::interprocess::ipcdetail::sync_handles::umap_type	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   typedef boost::unordered_map<sync_id, void*> umap_type;$/;"	t	class:boost::interprocess::ipcdetail::sync_handles	access:private
boost::interprocess::ipcdetail::sync_id	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^class sync_id$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::sync_id::hash_value	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   friend std::size_t hash_value(const sync_id &m)$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:friend	signature:(const sync_id &m)
boost::interprocess::ipcdetail::sync_id::internal_pod	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   const internal_type &internal_pod() const$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:public	signature:() const
boost::interprocess::ipcdetail::sync_id::internal_pod	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   internal_type &internal_pod()$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:public	signature:()
boost::interprocess::ipcdetail::sync_id::internal_type	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   typedef __int64 internal_type;$/;"	t	class:boost::interprocess::ipcdetail::sync_id	access:public
boost::interprocess::ipcdetail::sync_id::map_addr_	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   const void * const map_addr_;$/;"	m	class:boost::interprocess::ipcdetail::sync_id	access:private
boost::interprocess::ipcdetail::sync_id::map_address	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   const void *map_address() const$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:public	signature:() const
boost::interprocess::ipcdetail::sync_id::operator ==	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   friend bool operator==(const sync_id &l, const sync_id &r)$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:friend	signature:(const sync_id &l, const sync_id &r)
boost::interprocess::ipcdetail::sync_id::rand_	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   internal_type rand_;$/;"	m	class:boost::interprocess::ipcdetail::sync_id	access:private
boost::interprocess::ipcdetail::sync_id::sync_id	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   explicit sync_id(internal_type val, const void *map_addr)$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:public	signature:(internal_type val, const void *map_addr)
boost::interprocess::ipcdetail::sync_id::sync_id	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   sync_id(const void *map_addr)$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:public	signature:(const void *map_addr)
boost::interprocess::ipcdetail::systemwide_thread_id_copy	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void systemwide_thread_id_copy$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const volatile OS_systemwide_thread_id_t &from, volatile OS_systemwide_thread_id_t &to)
boost::interprocess::ipcdetail::thread_sleep	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void thread_sleep(unsigned int ms)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(unsigned int ms)
boost::interprocess::ipcdetail::thread_yield	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void thread_yield()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
boost::interprocess::ipcdetail::tie_forward	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^tuple<Values&&...> tie_forward(Values&&... values)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(Values&&.... values)
boost::interprocess::ipcdetail::tmp_filename	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void tmp_filename(const char *filename, std::string &tmp_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *filename, std::string &tmp_name)
boost::interprocess::ipcdetail::tmp_folder	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void tmp_folder(std::string &tmp_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(std::string &tmp_name)
boost::interprocess::ipcdetail::to_raw_pointer	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline T* to_raw_pointer(T* p)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(T* p)
boost::interprocess::ipcdetail::to_raw_pointer	/usr/include/boost/interprocess/detail/utilities.hpp	/^to_raw_pointer(const Pointer &p)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const Pointer &p)
boost::interprocess::ipcdetail::true_	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef bool_<true>        true_;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::true_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef true_  true_type;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::truncate_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool truncate_file (file_handle_t hnd, std::size_t size)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, std::size_t size)
boost::interprocess::ipcdetail::try_acquire_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool try_acquire_file_lock(file_handle_t hnd, bool &acquired)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, bool &acquired)
boost::interprocess::ipcdetail::try_acquire_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool try_acquire_file_lock_sharable(file_handle_t hnd, bool &acquired)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, bool &acquired)
boost::interprocess::ipcdetail::try_lock_locking_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool try_lock_locking_file(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
boost::interprocess::ipcdetail::try_open_and_lock_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline int try_open_and_lock_file(const char *name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name)
boost::interprocess::ipcdetail::tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class tuple<Head, Tail...>$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:tuple
boost::interprocess::ipcdetail::tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^template<> class tuple<>$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::tuple::head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typename add_reference<Head>::type head()             {  return m_head; }$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:()
boost::interprocess::ipcdetail::tuple::head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typename add_reference<const Head>::type head() const {  return m_head; }$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:() const
boost::interprocess::ipcdetail::tuple::inherited	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef tuple<Tail...> inherited;$/;"	t	class:boost::interprocess::ipcdetail::tuple	access:private
boost::interprocess::ipcdetail::tuple::m_head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   Head m_head;$/;"	m	class:boost::interprocess::ipcdetail::tuple	access:protected
boost::interprocess::ipcdetail::tuple::operator =	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple& operator=(const tuple<VValues...>& other)$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:(const tuple<VValues...>& other)
boost::interprocess::ipcdetail::tuple::tail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   const inherited& tail() const { return *this; }$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:() const
boost::interprocess::ipcdetail::tuple::tail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   inherited& tail()             { return *this; }$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:()
boost::interprocess::ipcdetail::tuple::tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple() { }$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:()
boost::interprocess::ipcdetail::tuple::tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple(const tuple<VValues...>& other)$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:(const tuple<VValues...>& other)
boost::interprocess::ipcdetail::tuple::tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple(typename add_const_reference<Head>::type v,$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:(typename add_const_reference<Head>::type v, typename add_const_reference<Tail>::type... vtail)
boost::interprocess::ipcdetail::tuple_element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct tuple_element<0, tuple<Head, Tail...> >$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::tuple_element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct tuple_element<I, tuple<Head, Tail...> >$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::tuple_element::type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef Head type;$/;"	t	struct:boost::interprocess::ipcdetail::tuple_element	access:public
boost::interprocess::ipcdetail::tuple_element::type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Tail...> >::type type;$/;"	t	struct:boost::interprocess::ipcdetail::tuple_element	access:public
boost::interprocess::ipcdetail::two	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct two {char _[2];};$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::two::_	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct two {char _[2];};$/;"	m	struct:boost::interprocess::ipcdetail::two	access:public
boost::interprocess::ipcdetail::unique_instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^typedef instance_t<unique_type>     unique_instance_t;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::unique_ptr_error	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^struct unique_ptr_error<const unique_ptr<T, D> >$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::unique_ptr_error::type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^    typedef unique_ptr<T, D> type;$/;"	t	struct:boost::interprocess::ipcdetail::unique_ptr_error	access:public
boost::interprocess::ipcdetail::unrestricted_permissions_holder	/usr/include/boost/interprocess/permissions.hpp	/^struct unrestricted_permissions_holder$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::unrestricted_permissions_holder::unrestricted	/usr/include/boost/interprocess/permissions.hpp	/^   static winapi::interprocess_all_access_security unrestricted;$/;"	m	struct:boost::interprocess::ipcdetail::unrestricted_permissions_holder	access:public
boost::interprocess::ipcdetail::unrestricted_permissions_holder::unrestricted	/usr/include/boost/interprocess/permissions.hpp	/^winapi::interprocess_all_access_security unrestricted_permissions_holder<Dummy>::unrestricted;$/;"	m	class:boost::interprocess::ipcdetail::unrestricted_permissions_holder
boost::interprocess::ipcdetail::upper_power_of_2	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer upper_power_of_2(const Integer & A)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const Integer & A)
boost::interprocess::ipcdetail::weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^class weak_count$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::weak_count::counted_base_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<sp_counted_base>::type                       counted_base_ptr;$/;"	t	class:boost::interprocess::ipcdetail::weak_count	access:private
boost::interprocess::ipcdetail::weak_count::counted_impl	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   typedef sp_counted_impl_pd<VoidAllocator, Deleter>                counted_impl;$/;"	t	class:boost::interprocess::ipcdetail::weak_count	access:private
boost::interprocess::ipcdetail::weak_count::counted_impl_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<counted_impl>::type                          counted_impl_ptr;$/;"	t	class:boost::interprocess::ipcdetail::weak_count	access:private
boost::interprocess::ipcdetail::weak_count::internal_equal	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_equal (weak_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count<T2, VoidAllocator2, Deleter2> const & other) const
boost::interprocess::ipcdetail::weak_count::internal_less	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_less (weak_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count<T2, VoidAllocator2, Deleter2> const & other) const
boost::interprocess::ipcdetail::weak_count::m_pi	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   counted_impl_ptr  m_pi;$/;"	m	class:boost::interprocess::ipcdetail::weak_count	access:private
boost::interprocess::ipcdetail::weak_count::m_px	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer           m_px;$/;"	m	class:boost::interprocess::ipcdetail::weak_count	access:private
boost::interprocess::ipcdetail::weak_count::operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (shared_count<Y, VoidAllocator, Deleter> const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::ipcdetail::weak_count::operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (weak_count const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count const & r)
boost::interprocess::ipcdetail::weak_count::operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (weak_count<Y, VoidAllocator, Deleter> const& r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const& r)
boost::interprocess::ipcdetail::weak_count::pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::weak_count	access:public
boost::interprocess::ipcdetail::weak_count::set_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void set_pointer(const pointer &ptr)$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(const pointer &ptr)
boost::interprocess::ipcdetail::weak_count::swap	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void swap(weak_count & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count & r)
boost::interprocess::ipcdetail::weak_count::use_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:() const
boost::interprocess::ipcdetail::weak_count::weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit weak_count(shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::ipcdetail::weak_count::weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(): m_px(0), m_pi(0) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:()
boost::interprocess::ipcdetail::weak_count::weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(weak_count const & r)$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count const & r)
boost::interprocess::ipcdetail::weak_count::weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(weak_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::ipcdetail::weak_count::~weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   ~weak_count() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:()
boost::interprocess::ipcdetail::winapi_mutex_functions	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^class winapi_mutex_functions$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::winapi_mutex_functions::lock	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void lock()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:public	signature:()
boost::interprocess::ipcdetail::winapi_mutex_functions::m_mtx_hnd	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void *m_mtx_hnd;$/;"	m	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:protected
boost::interprocess::ipcdetail::winapi_mutex_functions::operator =	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_functions &operator=(const winapi_mutex_functions &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:private	signature:(const winapi_mutex_functions &)
boost::interprocess::ipcdetail::winapi_mutex_functions::timed_lock	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::winapi_mutex_functions::try_lock	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:public	signature:()
boost::interprocess::ipcdetail::winapi_mutex_functions::unlock	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:public	signature:()
boost::interprocess::ipcdetail::winapi_mutex_functions::winapi_mutex_functions	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_functions(const winapi_mutex_functions &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:private	signature:(const winapi_mutex_functions &)
boost::interprocess::ipcdetail::winapi_mutex_functions::winapi_mutex_functions	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_functions(void *mtx_hnd)$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:public	signature:(void *mtx_hnd)
boost::interprocess::ipcdetail::winapi_mutex_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^class winapi_mutex_wrapper$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:winapi_mutex_functions
boost::interprocess::ipcdetail::winapi_mutex_wrapper::close	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void close()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::winapi_mutex_wrapper::handle	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void *handle() const$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:() const
boost::interprocess::ipcdetail::winapi_mutex_wrapper::open_or_create	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   bool open_or_create(const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:(const char *name, const permissions &perm)
boost::interprocess::ipcdetail::winapi_mutex_wrapper::operator =	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_wrapper &operator=(const winapi_mutex_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:private	signature:(const winapi_mutex_wrapper &)
boost::interprocess::ipcdetail::winapi_mutex_wrapper::release	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void *release()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::winapi_mutex_wrapper::swap	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void swap(winapi_mutex_wrapper &other)$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:(winapi_mutex_wrapper &other)
boost::interprocess::ipcdetail::winapi_mutex_wrapper::winapi_mutex_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_wrapper(const winapi_mutex_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:private	signature:(const winapi_mutex_wrapper &)
boost::interprocess::ipcdetail::winapi_mutex_wrapper::winapi_mutex_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_wrapper(void *mtx_hnd = winapi::invalid_handle_value)$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:(void *mtx_hnd = winapi::invalid_handle_value)
boost::interprocess::ipcdetail::winapi_mutex_wrapper::~winapi_mutex_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   ~winapi_mutex_wrapper()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::winapi_semaphore_functions	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^class winapi_semaphore_functions$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::winapi_semaphore_functions::limit	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   long limit() const$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:() const
boost::interprocess::ipcdetail::winapi_semaphore_functions::m_sem_hnd	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void *m_sem_hnd;$/;"	m	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:protected
boost::interprocess::ipcdetail::winapi_semaphore_functions::operator =	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_functions &operator=(const winapi_semaphore_functions &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:private	signature:(const winapi_semaphore_functions &)
boost::interprocess::ipcdetail::winapi_semaphore_functions::post	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void post(long count = 1)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:(long count = 1)
boost::interprocess::ipcdetail::winapi_semaphore_functions::timed_wait	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::winapi_semaphore_functions::try_wait	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   bool try_wait()$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:()
boost::interprocess::ipcdetail::winapi_semaphore_functions::value	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   long value() const$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:() const
boost::interprocess::ipcdetail::winapi_semaphore_functions::wait	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void wait()$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:()
boost::interprocess::ipcdetail::winapi_semaphore_functions::winapi_semaphore_functions	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_functions(const winapi_semaphore_functions &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:private	signature:(const winapi_semaphore_functions &)
boost::interprocess::ipcdetail::winapi_semaphore_functions::winapi_semaphore_functions	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_functions(void *hnd)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:(void *hnd)
boost::interprocess::ipcdetail::winapi_semaphore_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^class winapi_semaphore_wrapper$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:winapi_semaphore_functions
boost::interprocess::ipcdetail::winapi_semaphore_wrapper::MaxCount	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   static const long MaxCount = long(0x7FFFFFFF);$/;"	m	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public
boost::interprocess::ipcdetail::winapi_semaphore_wrapper::close	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void close()$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::winapi_semaphore_wrapper::handle	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void *handle() const$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:() const
boost::interprocess::ipcdetail::winapi_semaphore_wrapper::open_or_create	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   bool open_or_create( const char *name$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:( const char *name , long sem_count , long max_count , const permissions &perm , bool &created)
boost::interprocess::ipcdetail::winapi_semaphore_wrapper::open_semaphore	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   bool open_semaphore(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::winapi_semaphore_wrapper::operator =	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_wrapper &operator=(const winapi_semaphore_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:private	signature:(const winapi_semaphore_wrapper &)
boost::interprocess::ipcdetail::winapi_semaphore_wrapper::release	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void *release()$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::winapi_semaphore_wrapper::swap	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void swap(winapi_semaphore_wrapper &other)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:(winapi_semaphore_wrapper &other)
boost::interprocess::ipcdetail::winapi_semaphore_wrapper::winapi_semaphore_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_wrapper(const winapi_semaphore_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:private	signature:(const winapi_semaphore_wrapper &)
boost::interprocess::ipcdetail::winapi_semaphore_wrapper::winapi_semaphore_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_wrapper(void *hnd = winapi::invalid_handle_value)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:(void *hnd = winapi::invalid_handle_value)
boost::interprocess::ipcdetail::winapi_semaphore_wrapper::~winapi_semaphore_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   ~winapi_semaphore_wrapper()$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:()
boost::interprocess::ipcdetail::windows_bootstamp	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^      struct windows_bootstamp$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::windows_bootstamp::stamp	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^         std::string stamp;$/;"	m	struct:boost::interprocess::ipcdetail::windows_bootstamp	access:public
boost::interprocess::ipcdetail::windows_bootstamp::windows_bootstamp	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^         windows_bootstamp()$/;"	f	struct:boost::interprocess::ipcdetail::windows_bootstamp	access:public	signature:()
boost::interprocess::ipcdetail::windows_condition	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^class windows_condition$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::windows_condition::condition_data	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   struct condition_data$/;"	s	class:boost::interprocess::ipcdetail::windows_condition	access:private
boost::interprocess::ipcdetail::windows_condition::condition_data::condition_data	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      condition_data()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_condition::condition_data::get_mtx_unblock_lock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      mutex_type      &get_mtx_unblock_lock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_condition::condition_data::get_nwaiters_blocked	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      integer_type    &get_nwaiters_blocked()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_condition::condition_data::get_nwaiters_gone	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      integer_type    &get_nwaiters_gone()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_condition::condition_data::get_nwaiters_to_unblock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      integer_type    &get_nwaiters_to_unblock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_condition::condition_data::get_sem_block_lock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      semaphore_type  &get_sem_block_lock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_condition::condition_data::get_sem_block_queue	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      semaphore_type  &get_sem_block_queue()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_condition::condition_data::integer_type	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      typedef boost::int32_t     integer_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
boost::interprocess::ipcdetail::windows_condition::condition_data::m_mtx_unblock_lock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      windows_mutex     m_mtx_unblock_lock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
boost::interprocess::ipcdetail::windows_condition::condition_data::m_nwaiters_blocked	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      boost::int32_t    m_nwaiters_blocked;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
boost::interprocess::ipcdetail::windows_condition::condition_data::m_nwaiters_gone	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      boost::int32_t    m_nwaiters_gone;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
boost::interprocess::ipcdetail::windows_condition::condition_data::m_nwaiters_to_unblock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      boost::int32_t    m_nwaiters_to_unblock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
boost::interprocess::ipcdetail::windows_condition::condition_data::m_sem_block_lock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      windows_semaphore m_sem_block_lock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
boost::interprocess::ipcdetail::windows_condition::condition_data::m_sem_block_queue	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      windows_semaphore m_sem_block_queue;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
boost::interprocess::ipcdetail::windows_condition::condition_data::mutex_type	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      typedef windows_mutex      mutex_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
boost::interprocess::ipcdetail::windows_condition::condition_data::semaphore_type	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      typedef windows_semaphore  semaphore_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
boost::interprocess::ipcdetail::windows_condition::m_condition_data	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   ipcdetail::condition_8a_wrapper<condition_data> m_condition_data;$/;"	m	class:boost::interprocess::ipcdetail::windows_condition	access:private
boost::interprocess::ipcdetail::windows_condition::notify_all	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:()
boost::interprocess::ipcdetail::windows_condition::notify_one	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:()
boost::interprocess::ipcdetail::windows_condition::operator =	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   windows_condition &operator=(const windows_condition &);$/;"	p	class:boost::interprocess::ipcdetail::windows_condition	access:private	signature:(const windows_condition &)
boost::interprocess::ipcdetail::windows_condition::timed_wait	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::windows_condition::timed_wait	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::ipcdetail::windows_condition::wait	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:(L& lock)
boost::interprocess::ipcdetail::windows_condition::wait	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:(L& lock, Pr pred)
boost::interprocess::ipcdetail::windows_condition::windows_condition	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   windows_condition()$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:()
boost::interprocess::ipcdetail::windows_condition::windows_condition	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   windows_condition(const windows_condition &);$/;"	p	class:boost::interprocess::ipcdetail::windows_condition	access:private	signature:(const windows_condition &)
boost::interprocess::ipcdetail::windows_condition::~windows_condition	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   ~windows_condition()$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:()
boost::interprocess::ipcdetail::windows_intermodule_singleton	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^class windows_intermodule_singleton$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:intermodule_singleton_impl
boost::interprocess::ipcdetail::windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^class windows_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::windows_mutex::id_	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   const sync_id id_;$/;"	m	class:boost::interprocess::ipcdetail::windows_mutex	access:private
boost::interprocess::ipcdetail::windows_mutex::lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
boost::interprocess::ipcdetail::windows_mutex::lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline void windows_mutex::lock(void)$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:(void)
boost::interprocess::ipcdetail::windows_mutex::operator =	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   windows_mutex &operator=(const windows_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:private	signature:(const windows_mutex &)
boost::interprocess::ipcdetail::windows_mutex::take_ownership	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   void take_ownership(){};$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
boost::interprocess::ipcdetail::windows_mutex::timed_lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::windows_mutex::timed_lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline bool windows_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::windows_mutex::try_lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
boost::interprocess::ipcdetail::windows_mutex::try_lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline bool windows_mutex::try_lock(void)$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:(void)
boost::interprocess::ipcdetail::windows_mutex::unlock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
boost::interprocess::ipcdetail::windows_mutex::unlock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline void windows_mutex::unlock(void)$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:(void)
boost::interprocess::ipcdetail::windows_mutex::windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   windows_mutex();$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
boost::interprocess::ipcdetail::windows_mutex::windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   windows_mutex(const windows_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:private	signature:(const windows_mutex &)
boost::interprocess::ipcdetail::windows_mutex::windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline windows_mutex::windows_mutex()$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:()
boost::interprocess::ipcdetail::windows_mutex::~windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   ~windows_mutex();$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
boost::interprocess::ipcdetail::windows_mutex::~windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline windows_mutex::~windows_mutex()$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:()
boost::interprocess::ipcdetail::windows_named_condition	/usr/include/boost/interprocess/sync/windows/named_condition.hpp	/^typedef windows_named_condition_any windows_named_condition;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^class windows_named_condition_any$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   struct condition_data$/;"	s	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::get_mtx_unblock_lock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      mutex_type      &get_mtx_unblock_lock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::get_nwaiters_blocked	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type    &get_nwaiters_blocked()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::get_nwaiters_gone	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type    &get_nwaiters_gone()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::get_nwaiters_to_unblock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type    &get_nwaiters_to_unblock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::get_sem_block_lock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      semaphore_type  &get_sem_block_lock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::get_sem_block_queue	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      semaphore_type  &get_sem_block_queue()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::integer_type	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      typedef boost::int32_t           integer_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::m_mtx_unblock_lock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      winapi_mutex_wrapper       m_mtx_unblock_lock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::m_nwaiters_blocked	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type               m_nwaiters_blocked;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::m_nwaiters_gone	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type               m_nwaiters_gone;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::m_nwaiters_to_unblock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type               m_nwaiters_to_unblock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::m_sem_block_lock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      winapi_semaphore_wrapper   m_sem_block_lock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::m_sem_block_queue	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      winapi_semaphore_wrapper   m_sem_block_queue;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::mutex_type	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      typedef winapi_mutex_wrapper     mutex_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
boost::interprocess::ipcdetail::windows_named_condition_any::condition_data::semaphore_type	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      typedef winapi_semaphore_wrapper semaphore_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
boost::interprocess::ipcdetail::windows_named_condition_any::m_condition_data	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   ipcdetail::condition_8a_wrapper<condition_data> m_condition_data;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private
boost::interprocess::ipcdetail::windows_named_condition_any::m_named_sync	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_sync   m_named_sync;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   class named_cond_callbacks : public windows_named_sync_interface$/;"	c	class:boost::interprocess::ipcdetail::windows_named_condition_any	inherits:windows_named_sync_interface	access:private
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks::buffer_to_store_init_data_from_file	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual void *buffer_to_store_init_data_from_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks::buffer_with_final_data_to_file	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual const void *buffer_with_final_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks::buffer_with_init_data_to_file	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual const void *buffer_with_init_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks::close	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual void close()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks::get_data_size	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual std::size_t get_data_size() const$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:() const
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks::m_condition_data	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      condition_data &m_condition_data;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:private
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks::named_cond_callbacks	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      named_cond_callbacks(condition_data &cond_data)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:(condition_data &cond_data)
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks::open	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual bool open(create_enum_t, const char *id_name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:(create_enum_t, const char *id_name)
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks::sem_count_t	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      typedef __int64 sem_count_t;$/;"	t	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:private
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks::sem_counts	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      mutable sem_count_t sem_counts [2];$/;"	m	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:private
boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks::~named_cond_callbacks	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual ~named_cond_callbacks()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::notify_all	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::notify_one	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::operator =	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any &operator=(const windows_named_condition_any &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private	signature:(const windows_named_condition_any &)
boost::interprocess::ipcdetail::windows_named_condition_any::remove	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   static bool remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::windows_named_condition_any::timed_wait	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::windows_named_condition_any::timed_wait	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::ipcdetail::windows_named_condition_any::wait	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(L& lock)
boost::interprocess::ipcdetail::windows_named_condition_any::wait	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(L& lock, Pr pred)
boost::interprocess::ipcdetail::windows_named_condition_any::windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::windows_named_condition_any::windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::windows_named_condition_any::windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any(const windows_named_condition_any &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private	signature:(const windows_named_condition_any &)
boost::interprocess::ipcdetail::windows_named_condition_any::windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::windows_named_condition_any::windows_named_condition_any::dont_close_on_destruction	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   void windows_named_condition_any::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::windows_named_condition_any	access:private	signature:()
boost::interprocess::ipcdetail::windows_named_condition_any::~windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   ~windows_named_condition_any()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^class windows_named_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::windows_named_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline void windows_named_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline void windows_named_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::m_mtx_wrapper	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   winapi_mutex_wrapper m_mtx_wrapper;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private
boost::interprocess::ipcdetail::windows_named_mutex::m_named_sync	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_sync m_named_sync;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private
boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   class named_mut_callbacks : public windows_named_sync_interface$/;"	c	class:boost::interprocess::ipcdetail::windows_named_mutex	inherits:windows_named_sync_interface	access:private
boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks::buffer_to_store_init_data_from_file	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual void *buffer_to_store_init_data_from_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks::buffer_with_final_data_to_file	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual const void *buffer_with_final_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks::buffer_with_init_data_to_file	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual const void *buffer_with_init_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks::close	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual void close()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks::get_data_size	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual std::size_t get_data_size() const$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:() const
boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks::m_mtx_wrapper	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      winapi_mutex_wrapper&     m_mtx_wrapper;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:private
boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks::named_mut_callbacks	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      named_mut_callbacks(winapi_mutex_wrapper &mtx_wrapper)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:(winapi_mutex_wrapper &mtx_wrapper)
boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks::open	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual bool open(create_enum_t, const char *id_name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:(create_enum_t, const char *id_name)
boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks::~named_mut_callbacks	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual ~named_mut_callbacks()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::operator =	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex &operator=(const windows_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private	signature:(const windows_named_mutex &)
boost::interprocess::ipcdetail::windows_named_mutex::remove	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::windows_named_mutex::remove	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline bool windows_named_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:(const char *name)
boost::interprocess::ipcdetail::windows_named_mutex::timed_lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::windows_named_mutex::timed_lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline bool windows_named_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::windows_named_mutex::try_lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::try_lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline bool windows_named_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::unlock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::unlock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline void windows_named_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex(const windows_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private	signature:(const windows_named_mutex &)
boost::interprocess::ipcdetail::windows_named_mutex::windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex(create_only_t, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:(create_only_t, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::windows_named_mutex::windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex(open_only_t, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::windows_named_mutex::windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex(open_or_create_t, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:(open_or_create_t, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::windows_named_mutex::windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline windows_named_mutex::windows_named_mutex$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::windows_named_mutex::windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline windows_named_mutex::windows_named_mutex$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::ipcdetail::windows_named_mutex::windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline windows_named_mutex::windows_named_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::windows_named_mutex::~windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   ~windows_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_mutex::~windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline windows_named_mutex::~windows_named_mutex()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:()
boost::interprocess::ipcdetail::windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^class windows_named_recursive_mutex$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:windows_named_mutex
boost::interprocess::ipcdetail::windows_named_recursive_mutex::operator =	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex &operator=(const windows_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:private	signature:(const windows_named_mutex &)
boost::interprocess::ipcdetail::windows_named_recursive_mutex::windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:private	signature:()
boost::interprocess::ipcdetail::windows_named_recursive_mutex::windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex(const windows_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:private	signature:(const windows_named_mutex &)
boost::interprocess::ipcdetail::windows_named_recursive_mutex::windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex(create_only_t, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:public	signature:(create_only_t, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::windows_named_recursive_mutex::windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:public	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::windows_named_recursive_mutex::windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex(open_or_create_t, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:public	signature:(open_or_create_t, const char *name, const permissions &perm = permissions())
boost::interprocess::ipcdetail::windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^class windows_named_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::windows_named_semaphore::dont_close_on_destruction	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::dont_close_on_destruction	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline void windows_named_semaphore::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::m_named_sync	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_sync m_named_sync;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private
boost::interprocess::ipcdetail::windows_named_semaphore::m_sem_wrapper	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   winapi_semaphore_wrapper m_sem_wrapper;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   class named_sem_callbacks : public windows_named_sync_interface$/;"	c	class:boost::interprocess::ipcdetail::windows_named_semaphore	inherits:windows_named_sync_interface	access:private
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks::buffer_to_store_init_data_from_file	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual void *buffer_to_store_init_data_from_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks::buffer_with_final_data_to_file	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual const void *buffer_with_final_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks::buffer_with_init_data_to_file	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual const void *buffer_with_init_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks::close	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual void close()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks::get_data_size	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual std::size_t get_data_size() const$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:() const
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks::m_sem_count	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      sem_count_t m_sem_count;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:private
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks::m_sem_wrapper	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      winapi_semaphore_wrapper&     m_sem_wrapper;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:private
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks::named_sem_callbacks	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      named_sem_callbacks(winapi_semaphore_wrapper &sem_wrapper, sem_count_t sem_cnt)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:(winapi_semaphore_wrapper &sem_wrapper, sem_count_t sem_cnt)
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks::open	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual bool open(create_enum_t, const char *id_name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:(create_enum_t, const char *id_name)
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks::sem_count_t	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      typedef __int64 sem_count_t;$/;"	t	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public
boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks::~named_sem_callbacks	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual ~named_sem_callbacks()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::operator =	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore &operator=(const windows_named_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private	signature:(const windows_named_semaphore &)
boost::interprocess::ipcdetail::windows_named_semaphore::post	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::post	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline void windows_named_semaphore::post()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::remove	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::windows_named_semaphore::remove	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline bool windows_named_semaphore::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:(const char *name)
boost::interprocess::ipcdetail::windows_named_semaphore::timed_wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::windows_named_semaphore::timed_wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline bool windows_named_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::windows_named_semaphore::try_wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::try_wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline bool windows_named_semaphore::try_wait()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline void windows_named_semaphore::wait()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore(const windows_named_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private	signature:(const windows_named_semaphore &)
boost::interprocess::ipcdetail::windows_named_semaphore::windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
boost::interprocess::ipcdetail::windows_named_semaphore::windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore(open_only_t, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::windows_named_semaphore::windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
boost::interprocess::ipcdetail::windows_named_semaphore::windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline windows_named_semaphore::windows_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:(create_only_t, const char *name, unsigned int initial_count, const permissions &perm)
boost::interprocess::ipcdetail::windows_named_semaphore::windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline windows_named_semaphore::windows_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:(open_or_create_t, const char *name, unsigned int initial_count, const permissions &perm)
boost::interprocess::ipcdetail::windows_named_semaphore::windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline windows_named_semaphore::windows_named_semaphore(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:(open_only_t, const char *name)
boost::interprocess::ipcdetail::windows_named_semaphore::~windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   ~windows_named_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_semaphore::~windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline windows_named_semaphore::~windows_named_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:()
boost::interprocess::ipcdetail::windows_named_sync	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^class windows_named_sync$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::windows_named_sync::close	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   void close(windows_named_sync_interface &sync_interface);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:public	signature:(windows_named_sync_interface &sync_interface)
boost::interprocess::ipcdetail::windows_named_sync::close	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^inline void windows_named_sync::close(windows_named_sync_interface &sync_interface)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_sync	signature:(windows_named_sync_interface &sync_interface)
boost::interprocess::ipcdetail::windows_named_sync::m_file_hnd	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   void *m_file_hnd;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_sync	access:private
boost::interprocess::ipcdetail::windows_named_sync::open_or_create	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   void open_or_create(create_enum_t creation_type, const char *name, const permissions &perm, windows_named_sync_interface &sync_interface);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:public	signature:(create_enum_t creation_type, const char *name, const permissions &perm, windows_named_sync_interface &sync_interface)
boost::interprocess::ipcdetail::windows_named_sync::open_or_create	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^inline void windows_named_sync::open_or_create$/;"	f	class:boost::interprocess::ipcdetail::windows_named_sync	signature:( create_enum_t creation_type , const char *name , const permissions &perm , windows_named_sync_interface &sync_interface)
boost::interprocess::ipcdetail::windows_named_sync::operator =	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   windows_named_sync &operator=(const windows_named_sync &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:private	signature:(const windows_named_sync &)
boost::interprocess::ipcdetail::windows_named_sync::remove	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:public	signature:(const char *name)
boost::interprocess::ipcdetail::windows_named_sync::remove	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^inline bool windows_named_sync::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_sync	signature:(const char *name)
boost::interprocess::ipcdetail::windows_named_sync::windows_named_sync	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   windows_named_sync();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_sync::windows_named_sync	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   windows_named_sync(const windows_named_sync &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:private	signature:(const windows_named_sync &)
boost::interprocess::ipcdetail::windows_named_sync::windows_named_sync	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^inline windows_named_sync::windows_named_sync()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_sync	signature:()
boost::interprocess::ipcdetail::windows_named_sync_interface	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^class windows_named_sync_interface$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::windows_named_sync_interface::buffer_to_store_init_data_from_file	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual void *buffer_to_store_init_data_from_file() = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_sync_interface::buffer_with_final_data_to_file	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual const void *buffer_with_final_data_to_file() = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_sync_interface::buffer_with_init_data_to_file	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual const void *buffer_with_init_data_to_file() = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_sync_interface::close	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual void close() = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_sync_interface::get_data_size	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual std::size_t get_data_size() const = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:() const
boost::interprocess::ipcdetail::windows_named_sync_interface::open	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual bool open(create_enum_t creation_type, const char *id_name) = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:(create_enum_t creation_type, const char *id_name)
boost::interprocess::ipcdetail::windows_named_sync_interface::~windows_named_sync_interface	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual ~windows_named_sync_interface() = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:()
boost::interprocess::ipcdetail::windows_named_sync_interface::~windows_named_sync_interface	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^inline windows_named_sync_interface::~windows_named_sync_interface()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_sync_interface	signature:()
boost::interprocess::ipcdetail::windows_recursive_mutex	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^class windows_recursive_mutex$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:windows_mutex
boost::interprocess::ipcdetail::windows_recursive_mutex::operator =	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^   windows_recursive_mutex &operator=(const windows_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_recursive_mutex	access:private	signature:(const windows_recursive_mutex &)
boost::interprocess::ipcdetail::windows_recursive_mutex::windows_recursive_mutex	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^   windows_recursive_mutex() : windows_mutex() {}$/;"	f	class:boost::interprocess::ipcdetail::windows_recursive_mutex	access:public	signature:()
boost::interprocess::ipcdetail::windows_recursive_mutex::windows_recursive_mutex	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^   windows_recursive_mutex(const windows_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_recursive_mutex	access:private	signature:(const windows_recursive_mutex &)
boost::interprocess::ipcdetail::windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^class windows_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::windows_semaphore::id_	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   const sync_id id_;$/;"	m	class:boost::interprocess::ipcdetail::windows_semaphore	access:private
boost::interprocess::ipcdetail::windows_semaphore::operator =	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   windows_semaphore &operator=(const windows_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:private	signature:(const windows_semaphore &)
boost::interprocess::ipcdetail::windows_semaphore::post	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   void post(long release_count = 1);$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:(long release_count = 1)
boost::interprocess::ipcdetail::windows_semaphore::post	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline void windows_semaphore::post(long release_count)$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:(long release_count)
boost::interprocess::ipcdetail::windows_semaphore::timed_wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::windows_semaphore::timed_wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline bool windows_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::ipcdetail::windows_semaphore::try_wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::windows_semaphore::try_wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline bool windows_semaphore::try_wait(void)$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:(void)
boost::interprocess::ipcdetail::windows_semaphore::wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::windows_semaphore::wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline void windows_semaphore::wait(void)$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:(void)
boost::interprocess::ipcdetail::windows_semaphore::windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   windows_semaphore(const windows_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:private	signature:(const windows_semaphore &)
boost::interprocess::ipcdetail::windows_semaphore::windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   windows_semaphore(unsigned int initialCount);$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:(unsigned int initialCount)
boost::interprocess::ipcdetail::windows_semaphore::windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline windows_semaphore::windows_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:(unsigned int initialCount)
boost::interprocess::ipcdetail::windows_semaphore::~windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   ~windows_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:()
boost::interprocess::ipcdetail::windows_semaphore::~windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline windows_semaphore::~windows_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:()
boost::interprocess::ipcdetail::write_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool write_file(file_handle_t hnd, const void *data, std::size_t numdata)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, const void *data, std::size_t numdata)
boost::interprocess::ipcdetail::wshmem_open_or_create	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^struct wshmem_open_or_create$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::wshmem_open_or_create::type	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^      < windows_shared_memory, AllocationAlgorithm::Alignment, false, false> type;$/;"	t	struct:boost::interprocess::ipcdetail::wshmem_open_or_create	access:public
boost::interprocess::ipcdetail::xsishmem_open_or_create	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^struct xsishmem_open_or_create$/;"	s	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail::xsishmem_open_or_create::type	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^      < xsi_shared_memory_file_wrapper, AllocationAlgorithm::Alignment, false, true> type;$/;"	t	struct:boost::interprocess::ipcdetail::xsishmem_open_or_create	access:public
boost::interprocess::ipcdetail::yes_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef char yes_type;$/;"	t	namespace:boost::interprocess::ipcdetail
boost::interprocess::ipcdetail_really_deep_namespace	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace ipcdetail_really_deep_namespace {$/;"	n	namespace:boost::interprocess
boost::interprocess::ipcdetail_really_deep_namespace::dummy	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct dummy$/;"	s	namespace:boost::interprocess::ipcdetail_really_deep_namespace
boost::interprocess::ipcdetail_really_deep_namespace::dummy::dummy	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   dummy()$/;"	f	struct:boost::interprocess::ipcdetail_really_deep_namespace::dummy	access:public	signature:()
boost::interprocess::is_directory_error	/usr/include/boost/interprocess/errors.hpp	/^   is_directory_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::is_intrusive_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^struct is_intrusive_index$/;"	s	namespace:boost::interprocess
boost::interprocess::is_intrusive_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^struct is_intrusive_index$/;"	s	namespace:boost::interprocess
boost::interprocess::is_intrusive_index::value	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_intrusive_index	access:public
boost::interprocess::is_intrusive_index::value	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_intrusive_index	access:public
boost::interprocess::is_multisegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct is_multisegment_ptr$/;"	s	namespace:boost::interprocess
boost::interprocess::is_multisegment_ptr::value	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_multisegment_ptr	access:public
boost::interprocess::is_node_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^struct is_node_index$/;"	s	namespace:boost::interprocess
boost::interprocess::is_node_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^struct is_node_index$/;"	s	namespace:boost::interprocess
boost::interprocess::is_node_index::value	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_node_index	access:public
boost::interprocess::is_node_index::value	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_node_index	access:public
boost::interprocess::iset_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^class iset_index$/;"	c	namespace:boost::interprocess	inherits:iset_index_aux::index_t
boost::interprocess::iset_index::char_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename MapConfig::char_type                 char_type;$/;"	t	class:boost::interprocess::iset_index	access:private
boost::interprocess::iset_index::const_iterator	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::const_iterator           const_iterator;$/;"	t	class:boost::interprocess::iset_index	access:public
boost::interprocess::iset_index::find	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   const_iterator find(const intrusive_compare_key_type &key) const$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key) const
boost::interprocess::iset_index::find	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   iterator find(const intrusive_compare_key_type &key)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key)
boost::interprocess::iset_index::index_aux	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef iset_index_aux<MapConfig>                     index_aux;$/;"	t	class:boost::interprocess::iset_index	access:private
boost::interprocess::iset_index::index_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_aux::index_t                   index_type;$/;"	t	class:boost::interprocess::iset_index	access:private
boost::interprocess::iset_index::insert_check	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   std::pair<iterator, bool>insert_check$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key, insert_commit_data &commit_data)
boost::interprocess::iset_index::insert_commit_data	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::insert_commit_data       insert_commit_data;$/;"	t	class:boost::interprocess::iset_index	access:public
boost::interprocess::iset_index::intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      intrusive_compare_key_type                         intrusive_compare_key_type;$/;"	t	class:boost::interprocess::iset_index	access:private
boost::interprocess::iset_index::intrusive_key_value_less	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   struct intrusive_key_value_less$/;"	s	class:boost::interprocess::iset_index	access:private
boost::interprocess::iset_index::intrusive_key_value_less::operator ()	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      bool operator()(const intrusive_compare_key_type &i, const value_type &b) const$/;"	f	struct:boost::interprocess::iset_index::intrusive_key_value_less	access:public	signature:(const intrusive_compare_key_type &i, const value_type &b) const
boost::interprocess::iset_index::intrusive_key_value_less::operator ()	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      bool operator()(const value_type &b, const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iset_index::intrusive_key_value_less	access:public	signature:(const value_type &b, const intrusive_compare_key_type &i) const
boost::interprocess::iset_index::iset_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   iset_index(typename MapConfig::segment_manager_base *)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(typename MapConfig::segment_manager_base *)
boost::interprocess::iset_index::iterator	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::iterator                 iterator;$/;"	t	class:boost::interprocess::iset_index	access:public
boost::interprocess::iset_index::reserve	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   void reserve(typename MapConfig::segment_manager_base::size_type)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(typename MapConfig::segment_manager_base::size_type)
boost::interprocess::iset_index::shrink_to_fit	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::iset_index	access:public	signature:()
boost::interprocess::iset_index::value_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::value_type               value_type;$/;"	t	class:boost::interprocess::iset_index	access:public
boost::interprocess::iset_index_aux	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^struct iset_index_aux$/;"	s	namespace:boost::interprocess
boost::interprocess::iset_index_aux::derivation_hook	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      >::type                                                  derivation_hook;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::iset_index_aux::index_t	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      >::type                                                  index_t;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::iset_index_aux::segment_manager_base	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      MapConfig::segment_manager_base                          segment_manager_base;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::iset_index_aux::value_compare	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef std::less<value_type>                               value_compare;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::iset_index_aux::value_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      intrusive_value_type<derivation_hook>::type              value_type;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::iset_index_aux::void_pointer	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      segment_manager_base::void_pointer                       void_pointer;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^class iunordered_set_index$/;"	c	namespace:boost::interprocess	inherits:iunordered_set_index_aux::allocator_holder,iunordered_set_index_aux::index_t
boost::interprocess::iunordered_set_index::InitBufferSize	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static const std::size_t InitBufferSize = 64;$/;"	m	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      iunordered_set_index_aux<MapConfig>::allocator_holder    allocator_holder;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::allocator_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      iunordered_set_index_aux<MapConfig>::allocator_type      allocator_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::bucket_ptr	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_ptr               bucket_ptr;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::bucket_traits	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_traits            bucket_traits;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::bucket_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_type              bucket_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::char_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename MapConfig::char_type                 char_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::const_iterator	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::const_iterator           const_iterator;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::create_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static bucket_ptr create_buckets(allocator_type &alloc, size_type num)$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:(allocator_type &alloc, size_type num)
boost::interprocess::iunordered_set_index::destroy_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static void destroy_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:(allocator_type &alloc, bucket_ptr buckets, size_type num)
boost::interprocess::iunordered_set_index::equal_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::equal_function            equal_function;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::expand_or_create_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static bucket_ptr expand_or_create_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:( bucket_ptr old_buckets, const size_type old_num , allocator_type &alloc, const size_type new_num)
boost::interprocess::iunordered_set_index::find	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   const_iterator find(const intrusive_compare_key_type &key) const$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key) const
boost::interprocess::iunordered_set_index::find	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iterator find(const intrusive_compare_key_type &key)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key)
boost::interprocess::iunordered_set_index::get_this_pointer	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iunordered_set_index<MapConfig>* get_this_pointer()$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:()
boost::interprocess::iunordered_set_index::hash_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::hash_function             hash_function;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::index_aux	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef iunordered_set_index_aux<MapConfig>           index_aux;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::index_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::index_t                   index_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::insert_check	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   std::pair<iterator, bool>insert_check$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key, insert_commit_data &commit_data)
boost::interprocess::iunordered_set_index::insert_commit	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iterator insert_commit(value_type &val, insert_commit_data &commit_data)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(value_type &val, insert_commit_data &commit_data)
boost::interprocess::iunordered_set_index::insert_commit_data	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::insert_commit_data       insert_commit_data;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_compare_key_type                         intrusive_compare_key_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::iterator	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::iterator                 iterator;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iunordered_set_index(segment_manager_base *mngr)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(segment_manager_base *mngr)
boost::interprocess::iunordered_set_index::reserve	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   void reserve(size_type new_n)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(size_type new_n)
boost::interprocess::iunordered_set_index::segment_manager_base	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      segment_manager_base             segment_manager_base;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::shrink_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static size_type shrink_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:( bucket_ptr buckets, size_type old_size , allocator_type &alloc, size_type new_size)
boost::interprocess::iunordered_set_index::shrink_to_fit	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:()
boost::interprocess::iunordered_set_index::size_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::size_type                size_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::value_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::value_type               value_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::~iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   ~iunordered_set_index()$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:()
boost::interprocess::iunordered_set_index_aux	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^struct iunordered_set_index_aux$/;"	s	namespace:boost::interprocess
boost::interprocess::iunordered_set_index_aux::allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   struct allocator_holder$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::allocator_holder::alloc	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      allocator_type alloc;$/;"	m	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public
boost::interprocess::iunordered_set_index_aux::allocator_holder::allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      allocator_holder(segment_manager_base *mngr)$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public	signature:(segment_manager_base *mngr)
boost::interprocess::iunordered_set_index_aux::allocator_holder::init_bucket	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bucket_type init_bucket;$/;"	m	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public
boost::interprocess::iunordered_set_index_aux::allocator_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      <bucket_type, segment_manager_base>             allocator_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::bucket_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_t::bucket_type              bucket_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::char_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename MapConfig::char_type              char_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::derivation_hook	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      >::type        derivation_hook;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::equal_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   struct equal_function$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::equal_function::operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const intrusive_compare_key_type &i, const value_type &b) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const intrusive_compare_key_type &i, const value_type &b) const
boost::interprocess::iunordered_set_index_aux::equal_function::operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const value_type &b, const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const value_type &b, const intrusive_compare_key_type &i) const
boost::interprocess::iunordered_set_index_aux::equal_function::operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const value_type &b1, const value_type &b2) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const value_type &b1, const value_type &b2) const
boost::interprocess::iunordered_set_index_aux::hash_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^    struct hash_function$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	inherits:std::unary_function	access:public
boost::interprocess::iunordered_set_index_aux::hash_function::operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^        std::size_t operator()(const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::hash_function	access:public	signature:(const intrusive_compare_key_type &i) const
boost::interprocess::iunordered_set_index_aux::hash_function::operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^        std::size_t operator()(const value_type &val) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::hash_function	access:public	signature:(const value_type &val) const
boost::interprocess::iunordered_set_index_aux::index_t	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      >::type                                         index_t;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_compare_key_type                      intrusive_compare_key_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::segment_manager_base	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      MapConfig::segment_manager_base                 segment_manager_base;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::value_equal	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef std::equal_to<value_type>                  value_equal;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::value_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_value_type<derivation_hook>::type     value_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::void_pointer	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      segment_manager_base::void_pointer              void_pointer;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::lock_error	/usr/include/boost/interprocess/errors.hpp	/^   lock_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::lock_exception	/usr/include/boost/interprocess/exceptions.hpp	/^class lock_exception : public interprocess_exception$/;"	c	namespace:boost::interprocess	inherits:interprocess_exception
boost::interprocess::lock_exception::lock_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   lock_exception()$/;"	f	class:boost::interprocess::lock_exception	access:public	signature:()
boost::interprocess::lock_exception::what	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual const char* what() const throw()$/;"	f	class:boost::interprocess::lock_exception	access:public	signature:() const
boost::interprocess::lookup_error	/usr/include/boost/interprocess/errors.hpp	/^inline error_code_t lookup_error(native_error_t err)$/;"	f	namespace:boost::interprocess	signature:(native_error_t err)
boost::interprocess::madvise	/usr/include/boost/interprocess/mapped_region.hpp	/^extern "C" int madvise(caddr_t, size_t, int);$/;"	p	namespace:boost::interprocess	signature:(caddr_t, size_t, int)
boost::interprocess::make_managed_shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   make_managed_shared_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
boost::interprocess::make_managed_shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   make_managed_shared_ptr(T *constructed_object, ManagedMemory &managed_memory, std::nothrow_t)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory, std::nothrow_t)
boost::interprocess::make_managed_unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   make_managed_unique_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
boost::interprocess::make_managed_weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   make_managed_weak_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
boost::interprocess::make_transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^make_transform_iterator(Iterator it, UnaryFunc fun)$/;"	f	namespace:boost::interprocess	signature:(Iterator it, UnaryFunc fun)
boost::interprocess::managed_external_buffer	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_external_buffer;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_heap_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_heap_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_mapped_file	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_mapped_file;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   managed_multi_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_open_or_create_impl_device_id_t	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^struct managed_open_or_create_impl_device_id_t$/;"	s	namespace:boost::interprocess
boost::interprocess::managed_open_or_create_impl_device_id_t	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^struct managed_open_or_create_impl_device_id_t<xsi_shared_memory_file_wrapper>$/;"	s	namespace:boost::interprocess
boost::interprocess::managed_open_or_create_impl_device_id_t::type	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   typedef const char *type;$/;"	t	struct:boost::interprocess::managed_open_or_create_impl_device_id_t	access:public
boost::interprocess::managed_open_or_create_impl_device_id_t::type	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   typedef xsi_key type;$/;"	t	struct:boost::interprocess::managed_open_or_create_impl_device_id_t	access:public
boost::interprocess::managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^struct managed_shared_ptr$/;"	s	namespace:boost::interprocess
boost::interprocess::managed_shared_ptr::deleter	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef typename ManagedMemory::template deleter<T>::type      deleter;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
boost::interprocess::managed_shared_ptr::type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef shared_ptr< T, void_allocator, deleter>                type;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
boost::interprocess::managed_shared_ptr::void_allocator	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef typename ManagedMemory::template allocator<void>::type void_allocator;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
boost::interprocess::managed_unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^struct managed_unique_ptr$/;"	s	namespace:boost::interprocess
boost::interprocess::managed_unique_ptr::type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   > type;$/;"	t	struct:boost::interprocess::managed_unique_ptr	access:public
boost::interprocess::managed_weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^struct managed_weak_ptr$/;"	s	namespace:boost::interprocess
boost::interprocess::managed_weak_ptr::type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   > type;$/;"	t	struct:boost::interprocess::managed_weak_ptr	access:public
boost::interprocess::managed_windows_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_windows_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_xsi_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_xsi_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::map_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^class map_index$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::map_index_aux::index_t
boost::interprocess::map_index::base_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename index_aux::index_t       base_type;$/;"	t	class:boost::interprocess::map_index	access:private
boost::interprocess::map_index::index_aux	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef ipcdetail::map_index_aux<MapConfig>  index_aux;$/;"	t	class:boost::interprocess::map_index	access:private
boost::interprocess::map_index::map_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::map_index	access:public	signature:(segment_manager_base *segment_mngr)
boost::interprocess::map_index::reserve	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   void reserve(typename segment_manager_base::size_type)$/;"	f	class:boost::interprocess::map_index	access:public	signature:(typename segment_manager_base::size_type)
boost::interprocess::map_index::segment_manager_base	/usr/include/boost/interprocess/indexes/map_index.hpp	/^      segment_manager_base          segment_manager_base;$/;"	t	class:boost::interprocess::map_index	access:private
boost::interprocess::map_index::shrink_to_fit	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::map_index	access:public	signature:()
boost::interprocess::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^class mapped_region$/;"	c	namespace:boost::interprocess
boost::interprocess::mapped_region::advice_dontneed	/usr/include/boost/interprocess/mapped_region.hpp	/^      advice_dontneed$/;"	e	enum:boost::interprocess::mapped_region::advice_types
boost::interprocess::mapped_region::advice_normal	/usr/include/boost/interprocess/mapped_region.hpp	/^      advice_normal,$/;"	e	enum:boost::interprocess::mapped_region::advice_types
boost::interprocess::mapped_region::advice_random	/usr/include/boost/interprocess/mapped_region.hpp	/^      advice_random,$/;"	e	enum:boost::interprocess::mapped_region::advice_types
boost::interprocess::mapped_region::advice_sequential	/usr/include/boost/interprocess/mapped_region.hpp	/^      advice_sequential,$/;"	e	enum:boost::interprocess::mapped_region::advice_types
boost::interprocess::mapped_region::advice_types	/usr/include/boost/interprocess/mapped_region.hpp	/^   enum advice_types{ $/;"	g	class:boost::interprocess::mapped_region	access:public
boost::interprocess::mapped_region::advice_willneed	/usr/include/boost/interprocess/mapped_region.hpp	/^      advice_willneed,$/;"	e	enum:boost::interprocess::mapped_region::advice_types
boost::interprocess::mapped_region::advise	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool advise(advice_types advise);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(advice_types advise)
boost::interprocess::mapped_region::advise	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::advise(advice_types advice)$/;"	f	class:boost::interprocess::mapped_region	signature:(advice_types advice)
boost::interprocess::mapped_region::advise	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::advise(advice_types)$/;"	f	class:boost::interprocess::mapped_region	signature:(advice_types)
boost::interprocess::mapped_region::destroy_syncs_in_range	/usr/include/boost/interprocess/mapped_region.hpp	/^   static void destroy_syncs_in_range(const void *addr, std::size_t size);$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:(const void *addr, std::size_t size)
boost::interprocess::mapped_region::destroy_syncs_in_range	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::destroy_syncs_in_range(const void *addr, std::size_t size)$/;"	f	class:boost::interprocess::mapped_region	signature:(const void *addr, std::size_t size)
boost::interprocess::mapped_region::dont_close_on_destruction	/usr/include/boost/interprocess/mapped_region.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:()
boost::interprocess::mapped_region::dont_close_on_destruction	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::dont_close_on_destruction()$/;"	f	class:boost::interprocess::mapped_region	signature:()
boost::interprocess::mapped_region::flush	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool flush(std::size_t mapping_offset = 0, std::size_t numbytes = 0, bool async = true);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(std::size_t mapping_offset = 0, std::size_t numbytes = 0, bool async = true)
boost::interprocess::mapped_region::flush	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::flush(std::size_t mapping_offset, std::size_t numbytes, bool async)$/;"	f	class:boost::interprocess::mapped_region	signature:(std::size_t mapping_offset, std::size_t numbytes, bool async)
boost::interprocess::mapped_region::get_address	/usr/include/boost/interprocess/mapped_region.hpp	/^   void*       get_address() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
boost::interprocess::mapped_region::get_address	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void*    mapped_region::get_address()  const$/;"	f	class:boost::interprocess::mapped_region	signature:() const
boost::interprocess::mapped_region::get_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
boost::interprocess::mapped_region::get_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mode_t mapped_region::get_mode()  const$/;"	f	class:boost::interprocess::mapped_region	signature:() const
boost::interprocess::mapped_region::get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   static std::size_t get_page_size();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
boost::interprocess::mapped_region::get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::get_page_size()$/;"	f	class:boost::interprocess::mapped_region	signature:()
boost::interprocess::mapped_region::get_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t get_size() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
boost::interprocess::mapped_region::get_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::get_size()  const$/;"	f	class:boost::interprocess::mapped_region	signature:() const
boost::interprocess::mapped_region::invalid_file	/usr/include/boost/interprocess/mapped_region.hpp	/^   ,  m_file_or_mapping_hnd(ipcdetail::invalid_file())$/;"	f	class:boost::interprocess::mapped_region	access:public	signature:()
boost::interprocess::mapped_region::m_base	/usr/include/boost/interprocess/mapped_region.hpp	/^   void*             m_base;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::m_file_or_mapping_hnd	/usr/include/boost/interprocess/mapped_region.hpp	/^   file_handle_t     m_file_or_mapping_hnd;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::m_is_xsi	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool              m_is_xsi;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::m_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   ,  m_mode(read_only)$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(read_only)
boost::interprocess::mapped_region::m_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   mode_t            m_mode;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::m_page_offset	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t       m_page_offset;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::m_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t       m_size;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
boost::interprocess::mapped_region::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region(const MemoryMappable& mapping$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(const MemoryMappable& mapping ,mode_t mode ,offset_t offset = 0 ,std::size_t size = 0 ,const void *address = 0)
boost::interprocess::mapped_region::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region$/;"	f	class:boost::interprocess::mapped_region	signature:( const MemoryMappable &mapping , mode_t mode , offset_t offset , std::size_t size , const void *address)
boost::interprocess::mapped_region::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region$/;"	f	class:boost::interprocess::mapped_region	signature:(const MemoryMappable &mapping ,mode_t mode ,offset_t offset ,std::size_t size ,const void *address)
boost::interprocess::mapped_region::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region()$/;"	f	class:boost::interprocess::mapped_region	signature:()
boost::interprocess::mapped_region::page_size_holder	/usr/include/boost/interprocess/mapped_region.hpp	/^   struct page_size_holder$/;"	s	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::page_size_holder::PageSize	/usr/include/boost/interprocess/mapped_region.hpp	/^      static const std::size_t PageSize;$/;"	m	struct:boost::interprocess::mapped_region::page_size_holder	access:public
boost::interprocess::mapped_region::page_size_holder::PageSize	/usr/include/boost/interprocess/mapped_region.hpp	/^const std::size_t mapped_region::page_size_holder<dummy>::PageSize$/;"	m	class:boost::interprocess::mapped_region::page_size_holder
boost::interprocess::mapped_region::page_size_holder::get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^      static std::size_t get_page_size();$/;"	p	struct:boost::interprocess::mapped_region::page_size_holder	access:public	signature:()
boost::interprocess::mapped_region::page_size_holder::get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::page_size_holder<dummy>::get_page_size()$/;"	f	class:boost::interprocess::mapped_region::page_size_holder	signature:()
boost::interprocess::mapped_region::priv_close	/usr/include/boost/interprocess/mapped_region.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:()
boost::interprocess::mapped_region::priv_close	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::priv_close()$/;"	f	class:boost::interprocess::mapped_region	signature:()
boost::interprocess::mapped_region::priv_flush_param_check	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool priv_flush_param_check(std::size_t mapping_offset, void *&addr, std::size_t &numbytes) const;$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:(std::size_t mapping_offset, void *&addr, std::size_t &numbytes) const
boost::interprocess::mapped_region::priv_flush_param_check	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::priv_flush_param_check$/;"	f	class:boost::interprocess::mapped_region	signature:(std::size_t mapping_offset, void *&addr, std::size_t &numbytes) const
boost::interprocess::mapped_region::priv_map_address	/usr/include/boost/interprocess/mapped_region.hpp	/^   void* priv_map_address()  const;$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:() const
boost::interprocess::mapped_region::priv_map_address	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void*    mapped_region::priv_map_address()  const$/;"	f	class:boost::interprocess::mapped_region	signature:() const
boost::interprocess::mapped_region::priv_map_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t priv_map_size()  const;$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:() const
boost::interprocess::mapped_region::priv_map_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::priv_map_size()  const$/;"	f	class:boost::interprocess::mapped_region	signature:() const
boost::interprocess::mapped_region::priv_page_offset_addr_fixup	/usr/include/boost/interprocess/mapped_region.hpp	/^   static offset_t priv_page_offset_addr_fixup(offset_t page_offset, const void *&addr);$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:(offset_t page_offset, const void *&addr)
boost::interprocess::mapped_region::priv_page_offset_addr_fixup	/usr/include/boost/interprocess/mapped_region.hpp	/^inline offset_t mapped_region::priv_page_offset_addr_fixup(offset_t offset, const void *&address)$/;"	f	class:boost::interprocess::mapped_region	signature:(offset_t offset, const void *&address)
boost::interprocess::mapped_region::priv_shrink_param_check	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool priv_shrink_param_check(std::size_t bytes, bool from_back, void *&shrink_page_start, std::size_t &shrink_page_bytes);$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:(std::size_t bytes, bool from_back, void *&shrink_page_start, std::size_t &shrink_page_bytes)
boost::interprocess::mapped_region::priv_shrink_param_check	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::priv_shrink_param_check$/;"	f	class:boost::interprocess::mapped_region	signature:(std::size_t bytes, bool from_back, void *&shrink_page_start, std::size_t &shrink_page_bytes)
boost::interprocess::mapped_region::priv_size_from_mapping_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   static void priv_size_from_mapping_size$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:(offset_t mapping_size, offset_t offset, offset_t page_offset, std::size_t &size)
boost::interprocess::mapped_region::priv_size_from_mapping_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::priv_size_from_mapping_size$/;"	f	class:boost::interprocess::mapped_region	signature:(offset_t mapping_size, offset_t offset, offset_t page_offset, std::size_t &size)
boost::interprocess::mapped_region::shrink_by	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool shrink_by(std::size_t bytes, bool from_back = true);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(std::size_t bytes, bool from_back = true)
boost::interprocess::mapped_region::shrink_by	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::shrink_by(std::size_t bytes, bool from_back)$/;"	f	class:boost::interprocess::mapped_region	signature:(std::size_t bytes, bool from_back)
boost::interprocess::mapped_region::swap	/usr/include/boost/interprocess/mapped_region.hpp	/^   void swap(mapped_region &other);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(mapped_region &other)
boost::interprocess::mapped_region::swap	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::swap(mapped_region &other)$/;"	f	class:boost::interprocess::mapped_region	signature:(mapped_region &other)
boost::interprocess::mapped_region::~mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   ~mapped_region();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
boost::interprocess::mapped_region::~mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::~mapped_region()$/;"	f	class:boost::interprocess::mapped_region	signature:()
boost::interprocess::mapping_handle_impl_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef struct mapping_handle_impl_t{$/;"	s	namespace:boost::interprocess
boost::interprocess::mapping_handle_impl_t::handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^   void *   handle;$/;"	m	struct:boost::interprocess::mapping_handle_impl_t	access:public
boost::interprocess::mapping_handle_impl_t::is_shm	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^   bool     is_shm;$/;"	m	struct:boost::interprocess::mapping_handle_impl_t	access:public
boost::interprocess::mapping_handle_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^}  mapping_handle_t;$/;"	t	namespace:boost::interprocess	typeref:struct:boost::interprocess::mapping_handle_impl_t
boost::interprocess::max_allocation_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
boost::interprocess::max_value	/usr/include/boost/interprocess/detail/min_max.hpp	/^const T &max_value(const T &a, const T &b)$/;"	f	namespace:boost::interprocess	signature:(const T &a, const T &b)
boost::interprocess::message_queue	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^typedef message_queue_t<offset_ptr<void> > message_queue;$/;"	t	namespace:boost::interprocess
boost::interprocess::message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class message_queue_t$/;"	c	namespace:boost::interprocess
boost::interprocess::message_queue_t::block_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	g	class:boost::interprocess::message_queue_t	access:private
boost::interprocess::message_queue_t::blocking	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue_t::block_t
boost::interprocess::message_queue_t::char_ptr	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<char>::type                                    char_ptr;$/;"	t	class:boost::interprocess::message_queue_t	access:public
boost::interprocess::message_queue_t::difference_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type difference_type;$/;"	t	class:boost::interprocess::message_queue_t	access:public
boost::interprocess::message_queue_t::do_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool do_receive(block_t block,$/;"	p	class:boost::interprocess::message_queue_t	access:private	signature:(block_t block, void *buffer, size_type buffer_size, size_type &recvd_size, unsigned int &priority, const ptime &abs_time)
boost::interprocess::message_queue_t::do_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t<VoidPointer>::do_receive(block_t block,$/;"	f	class:boost::interprocess::message_queue_t	signature:(block_t block, void *buffer, size_type buffer_size, size_type &recvd_size, unsigned int &priority, const boost::posix_time::ptime &abs_time)
boost::interprocess::message_queue_t::do_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool do_send(block_t block,$/;"	p	class:boost::interprocess::message_queue_t	access:private	signature:(block_t block, const void *buffer, size_type buffer_size, unsigned int priority, const ptime &abs_time)
boost::interprocess::message_queue_t::do_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue_t<VoidPointer>::do_send(block_t block,$/;"	f	class:boost::interprocess::message_queue_t	signature:(block_t block, const void *buffer, size_type buffer_size, unsigned int priority, const boost::posix_time::ptime &abs_time)
boost::interprocess::message_queue_t::get_max_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type get_max_msg() const;$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:() const
boost::interprocess::message_queue_t::get_max_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline typename message_queue_t<VoidPointer>::size_type message_queue_t<VoidPointer>::get_max_msg() const$/;"	f	class:boost::interprocess::message_queue_t	signature:() const
boost::interprocess::message_queue_t::get_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type get_max_msg_size() const;$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:() const
boost::interprocess::message_queue_t::get_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline typename message_queue_t<VoidPointer>::size_type message_queue_t<VoidPointer>::get_max_msg_size() const$/;"	f	class:boost::interprocess::message_queue_t	signature:() const
boost::interprocess::message_queue_t::get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static size_type get_mem_size(size_type max_msg_size, size_type max_num_msg);$/;"	p	class:boost::interprocess::message_queue_t	access:private	signature:(size_type max_msg_size, size_type max_num_msg)
boost::interprocess::message_queue_t::get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline typename message_queue_t<VoidPointer>::size_type message_queue_t<VoidPointer>::get_mem_size$/;"	f	class:boost::interprocess::message_queue_t	signature:(size_type max_msg_size, size_type max_num_msg)
boost::interprocess::message_queue_t::get_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type get_num_msg();$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:()
boost::interprocess::message_queue_t::get_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline typename message_queue_t<VoidPointer>::size_type message_queue_t<VoidPointer>::get_num_msg()$/;"	f	class:boost::interprocess::message_queue_t	signature:()
boost::interprocess::message_queue_t::m_shmem	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::message_queue_t	access:private
boost::interprocess::message_queue_t::message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t();$/;"	p	class:boost::interprocess::message_queue_t	access:private	signature:()
boost::interprocess::message_queue_t::message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t(create_only_t create_only,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(create_only_t create_only, const char *name, size_type max_num_msg, size_type max_msg_size, const permissions &perm = permissions())
boost::interprocess::message_queue_t::message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t(open_only_t open_only,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::message_queue_t::message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t(open_or_create_t open_or_create,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(open_or_create_t open_or_create, const char *name, size_type max_num_msg, size_type max_msg_size, const permissions &perm = permissions())
boost::interprocess::message_queue_t::message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue_t<VoidPointer>::message_queue_t(create_only_t,$/;"	f	class:boost::interprocess::message_queue_t	signature:(create_only_t, const char *name, size_type max_num_msg, size_type max_msg_size, const permissions &perm)
boost::interprocess::message_queue_t::message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue_t<VoidPointer>::message_queue_t(open_only_t, const char *name)$/;"	f	class:boost::interprocess::message_queue_t	signature:(open_only_t, const char *name)
boost::interprocess::message_queue_t::message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue_t<VoidPointer>::message_queue_t(open_or_create_t,$/;"	f	class:boost::interprocess::message_queue_t	signature:(open_or_create_t, const char *name, size_type max_num_msg, size_type max_msg_size, const permissions &perm)
boost::interprocess::message_queue_t::non_blocking	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue_t::block_t
boost::interprocess::message_queue_t::open_create_impl_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::message_queue_t	access:private
boost::interprocess::message_queue_t::ptime	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef boost::posix_time::ptime ptime;$/;"	t	class:boost::interprocess::message_queue_t	access:private
boost::interprocess::message_queue_t::receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void receive (void *buffer,           size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(void *buffer, size_type buffer_size, size_type &recvd_size,unsigned int &priority)
boost::interprocess::message_queue_t::receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline void message_queue_t<VoidPointer>::receive(void *buffer,        size_type buffer_size,$/;"	f	class:boost::interprocess::message_queue_t	signature:(void *buffer, size_type buffer_size, size_type &recvd_size, unsigned int &priority)
boost::interprocess::message_queue_t::remove	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(const char *name)
boost::interprocess::message_queue_t::remove	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue_t<VoidPointer>::remove(const char *name)$/;"	f	class:boost::interprocess::message_queue_t	signature:(const char *name)
boost::interprocess::message_queue_t::send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void send (const void *buffer,     size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(const void *buffer, size_type buffer_size, unsigned int priority)
boost::interprocess::message_queue_t::send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline void message_queue_t<VoidPointer>::send$/;"	f	class:boost::interprocess::message_queue_t	signature:(const void *buffer, size_type buffer_size, unsigned int priority)
boost::interprocess::message_queue_t::size_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type        size_type;$/;"	t	class:boost::interprocess::message_queue_t	access:public
boost::interprocess::message_queue_t::timed	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue_t::block_t
boost::interprocess::message_queue_t::timed_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool timed_receive (void *buffer,           size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(void *buffer, size_type buffer_size, size_type &recvd_size,unsigned int &priority, const boost::posix_time::ptime &abs_time)
boost::interprocess::message_queue_t::timed_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t<VoidPointer>::timed_receive(void *buffer,            size_type buffer_size,$/;"	f	class:boost::interprocess::message_queue_t	signature:(void *buffer, size_type buffer_size, size_type &recvd_size, unsigned int &priority, const boost::posix_time::ptime &abs_time)
boost::interprocess::message_queue_t::timed_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool timed_send    (const void *buffer,     size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(const void *buffer, size_type buffer_size, unsigned int priority, const boost::posix_time::ptime& abs_time)
boost::interprocess::message_queue_t::timed_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue_t<VoidPointer>::timed_send$/;"	f	class:boost::interprocess::message_queue_t	signature:(const void *buffer, size_type buffer_size ,unsigned int priority, const boost::posix_time::ptime &abs_time)
boost::interprocess::message_queue_t::try_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool try_receive (void *buffer,           size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(void *buffer, size_type buffer_size, size_type &recvd_size,unsigned int &priority)
boost::interprocess::message_queue_t::try_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t<VoidPointer>::try_receive(void *buffer,              size_type buffer_size,$/;"	f	class:boost::interprocess::message_queue_t	signature:(void *buffer, size_type buffer_size, size_type &recvd_size, unsigned int &priority)
boost::interprocess::message_queue_t::try_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool try_send    (const void *buffer,     size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(const void *buffer, size_type buffer_size, unsigned int priority)
boost::interprocess::message_queue_t::try_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue_t<VoidPointer>::try_send$/;"	f	class:boost::interprocess::message_queue_t	signature:(const void *buffer, size_type buffer_size, unsigned int priority)
boost::interprocess::message_queue_t::void_pointer	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef VoidPointer                                                 void_pointer;$/;"	t	class:boost::interprocess::message_queue_t	access:public
boost::interprocess::message_queue_t::~message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   ~message_queue_t();$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:()
boost::interprocess::message_queue_t::~message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue_t<VoidPointer>::~message_queue_t()$/;"	f	class:boost::interprocess::message_queue_t	signature:()
boost::interprocess::microsec_clock	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	/^typedef boost::date_time::microsec_clock<boost::posix_time::ptime> microsec_clock;$/;"	t	namespace:boost::interprocess
boost::interprocess::min_value	/usr/include/boost/interprocess/detail/min_max.hpp	/^const T &min_value(const T &a, const T &b)$/;"	f	namespace:boost::interprocess	signature:(const T &a, const T &b)
boost::interprocess::mode_error	/usr/include/boost/interprocess/errors.hpp	/^   mode_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::mode_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             } mode_t;$/;"	t	namespace:boost::interprocess	typeref:enum:boost::interprocess::__anon2
boost::interprocess::multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^class multi_segment_services$/;"	c	namespace:boost::interprocess
boost::interprocess::multi_segment_services::create_new_segment	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual std::pair<void *, std::size_t> create_new_segment(std::size_t mem) = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:(std::size_t mem)
boost::interprocess::multi_segment_services::update_segments	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual bool                           update_segments   () = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:()
boost::interprocess::multi_segment_services::~multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual ~multi_segment_services() = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:()
boost::interprocess::multi_segment_services::~multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^inline multi_segment_services::~multi_segment_services()$/;"	f	class:boost::interprocess::multi_segment_services	signature:()
boost::interprocess::multi_simple_seq_fit	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^class multi_simple_seq_fit $/;"	c	namespace:boost::interprocess	inherits:ipcdetail::simple_seq_fit_impl
boost::interprocess::multi_simple_seq_fit::allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   void* allocate             (size_type nbytes)$/;"	f	class:boost::interprocess::multi_simple_seq_fit	access:public	signature:(size_type nbytes)
boost::interprocess::multi_simple_seq_fit::base_t	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   typedef ipcdetail::simple_seq_fit_impl<MutexFamily, VoidPtr> base_t;$/;"	t	class:boost::interprocess::multi_simple_seq_fit	access:private
boost::interprocess::multi_simple_seq_fit::multi_simple_seq_fit	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   multi_simple_seq_fit           (size_type size, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::multi_simple_seq_fit	access:public	signature:(size_type size, size_type extra_hdr_bytes)
boost::interprocess::mutex_family	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^struct mutex_family$/;"	s	namespace:boost::interprocess
boost::interprocess::mutex_family::mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::interprocess_mutex                 mutex_type;$/;"	t	struct:boost::interprocess::mutex_family	access:public
boost::interprocess::mutex_family::recursive_mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::interprocess_recursive_mutex       recursive_mutex_type;$/;"	t	struct:boost::interprocess::mutex_family	access:public
boost::interprocess::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^class named_condition$/;"	c	namespace:boost::interprocess
boost::interprocess::named_condition::condition_type	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   typedef ipcdetail::shm_named_condition       condition_type;$/;"	t	class:boost::interprocess::named_condition	access:private
boost::interprocess::named_condition::condition_type	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   typedef ipcdetail::windows_named_condition   condition_type;$/;"	t	class:boost::interprocess::named_condition	access:private
boost::interprocess::named_condition::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_condition	access:private	signature:()
boost::interprocess::named_condition::m_cond	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   condition_type m_cond;$/;"	m	class:boost::interprocess::named_condition	access:private
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition();$/;"	p	class:boost::interprocess::named_condition	access:private	signature:()
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(const named_condition &);$/;"	p	class:boost::interprocess::named_condition	access:private	signature:(const named_condition &)
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_condition	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(open_only_t, const char *name)
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_condition	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::named_condition::notify_all	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
boost::interprocess::named_condition::notify_all	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::notify_all()$/;"	f	class:boost::interprocess::named_condition	signature:()
boost::interprocess::named_condition::notify_one	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
boost::interprocess::named_condition::notify_one	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::notify_one()$/;"	f	class:boost::interprocess::named_condition	signature:()
boost::interprocess::named_condition::operator =	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition &operator=(const named_condition &);$/;"	p	class:boost::interprocess::named_condition	access:private	signature:(const named_condition &)
boost::interprocess::named_condition::remove	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(const char *name)
boost::interprocess::named_condition::remove	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::remove(const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(const char *name)
boost::interprocess::named_condition::timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::named_condition::timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::named_condition::timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::timed_wait$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::named_condition::timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::timed_wait$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::named_condition::wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void wait(L& lock);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock)
boost::interprocess::named_condition::wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void wait(L& lock, Pr pred);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, Pr pred)
boost::interprocess::named_condition::wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::wait(L& lock)$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock)
boost::interprocess::named_condition::wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, Pr pred)
boost::interprocess::named_condition::~named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   ~named_condition();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
boost::interprocess::named_condition::~named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::~named_condition()$/;"	f	class:boost::interprocess::named_condition	signature:()
boost::interprocess::named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^class named_condition_any$/;"	c	namespace:boost::interprocess
boost::interprocess::named_condition_any::condition_any_type	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   typedef ipcdetail::shm_named_condition_any       condition_any_type;$/;"	t	class:boost::interprocess::named_condition_any	access:private
boost::interprocess::named_condition_any::condition_any_type	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   typedef ipcdetail::windows_named_condition_any   condition_any_type;$/;"	t	class:boost::interprocess::named_condition_any	access:private
boost::interprocess::named_condition_any::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_condition_any	access:private	signature:()
boost::interprocess::named_condition_any::m_cond	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   condition_any_type m_cond;$/;"	m	class:boost::interprocess::named_condition_any	access:private
boost::interprocess::named_condition_any::named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any();$/;"	p	class:boost::interprocess::named_condition_any	access:private	signature:()
boost::interprocess::named_condition_any::named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any(const named_condition_any &);$/;"	p	class:boost::interprocess::named_condition_any	access:private	signature:(const named_condition_any &)
boost::interprocess::named_condition_any::named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any(create_only_t, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(create_only_t, const char *name, const permissions &perm = permissions())
boost::interprocess::named_condition_any::named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(open_only_t, const char *name)
boost::interprocess::named_condition_any::named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any(open_or_create_t, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(open_or_create_t, const char *name, const permissions &perm = permissions())
boost::interprocess::named_condition_any::notify_all	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:()
boost::interprocess::named_condition_any::notify_one	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:()
boost::interprocess::named_condition_any::operator =	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any &operator=(const named_condition_any &);$/;"	p	class:boost::interprocess::named_condition_any	access:private	signature:(const named_condition_any &)
boost::interprocess::named_condition_any::remove	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   static bool remove(const char *name)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(const char *name)
boost::interprocess::named_condition_any::timed_wait	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::named_condition_any::timed_wait	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::named_condition_any::wait	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(L& lock)
boost::interprocess::named_condition_any::wait	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(L& lock, Pr pred)
boost::interprocess::named_condition_any::~named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   ~named_condition_any()$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:()
boost::interprocess::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^class named_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::named_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:()
boost::interprocess::named_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_mutex	signature:()
boost::interprocess::named_mutex::internal_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   internal_mutex_type &internal_mutex()$/;"	f	class:boost::interprocess::named_mutex	access:public	signature:()
boost::interprocess::named_mutex::internal_mutex_type	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^      typedef ipcdetail::posix_named_mutex      internal_mutex_type;$/;"	t	class:boost::interprocess::named_mutex	access:public
boost::interprocess::named_mutex::internal_mutex_type	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^      typedef ipcdetail::shm_named_mutex        internal_mutex_type;$/;"	t	class:boost::interprocess::named_mutex	access:public
boost::interprocess::named_mutex::internal_mutex_type	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^      typedef ipcdetail::windows_named_mutex    internal_mutex_type;$/;"	t	class:boost::interprocess::named_mutex	access:public
boost::interprocess::named_mutex::lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
boost::interprocess::named_mutex::lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::lock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
boost::interprocess::named_mutex::m_mut	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   internal_mutex_type m_mut;$/;"	m	class:boost::interprocess::named_mutex	access:public
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex();$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:()
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(const named_mutex &);$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:(const named_mutex &)
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_mutex	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(open_only_t, const char *name)
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::named_mutex::operator =	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex &operator=(const named_mutex &);$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:(const named_mutex &)
boost::interprocess::named_mutex::remove	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(const char *name)
boost::interprocess::named_mutex::remove	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(const char *name)
boost::interprocess::named_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_mutex::try_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
boost::interprocess::named_mutex::try_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::try_lock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
boost::interprocess::named_mutex::unlock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
boost::interprocess::named_mutex::unlock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::unlock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
boost::interprocess::named_mutex::~named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   ~named_mutex();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
boost::interprocess::named_mutex::~named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::~named_mutex()$/;"	f	class:boost::interprocess::named_mutex	signature:()
boost::interprocess::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^class named_recursive_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::named_recursive_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:()
boost::interprocess::named_recursive_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
boost::interprocess::named_recursive_mutex::impl_t	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^      typedef ipcdetail::shm_named_recursive_mutex impl_t;$/;"	t	class:boost::interprocess::named_recursive_mutex	access:private
boost::interprocess::named_recursive_mutex::impl_t	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^      typedef ipcdetail::windows_named_recursive_mutex   impl_t;$/;"	t	class:boost::interprocess::named_recursive_mutex	access:private
boost::interprocess::named_recursive_mutex::lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
boost::interprocess::named_recursive_mutex::lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::lock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
boost::interprocess::named_recursive_mutex::m_mut	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   impl_t m_mut;$/;"	m	class:boost::interprocess::named_recursive_mutex	access:private
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:()
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(const named_recursive_mutex &);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:(const named_recursive_mutex &)
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(open_only_t, const char *name)
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::named_recursive_mutex::operator =	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex &operator=(const named_recursive_mutex &);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:(const named_recursive_mutex &)
boost::interprocess::named_recursive_mutex::remove	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(const char *name)
boost::interprocess::named_recursive_mutex::remove	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(const char *name)
boost::interprocess::named_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
boost::interprocess::named_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
boost::interprocess::named_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
boost::interprocess::named_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
boost::interprocess::named_recursive_mutex::~named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   ~named_recursive_mutex();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
boost::interprocess::named_recursive_mutex::~named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::~named_recursive_mutex()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
boost::interprocess::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^class named_semaphore$/;"	c	namespace:boost::interprocess
boost::interprocess::named_semaphore::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:()
boost::interprocess::named_semaphore::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
boost::interprocess::named_semaphore::impl_t	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^      typedef ipcdetail::posix_named_semaphore   impl_t;$/;"	t	class:boost::interprocess::named_semaphore	access:private
boost::interprocess::named_semaphore::impl_t	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^      typedef ipcdetail::shm_named_semaphore     impl_t;$/;"	t	class:boost::interprocess::named_semaphore	access:private
boost::interprocess::named_semaphore::impl_t	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^      typedef ipcdetail::windows_named_semaphore impl_t;$/;"	t	class:boost::interprocess::named_semaphore	access:private
boost::interprocess::named_semaphore::m_sem	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   impl_t m_sem;$/;"	m	class:boost::interprocess::named_semaphore	access:private
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore();$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:()
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(const named_semaphore &);$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:(const named_semaphore &)
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(open_only_t, const char *name);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(open_only_t, const char *name)
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore$/;"	f	class:boost::interprocess::named_semaphore	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm)
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore$/;"	f	class:boost::interprocess::named_semaphore	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm)
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_semaphore	signature:(open_only_t, const char *name)
boost::interprocess::named_semaphore::operator =	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore &operator=(const named_semaphore &);$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:(const named_semaphore &)
boost::interprocess::named_semaphore::post	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
boost::interprocess::named_semaphore::post	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::post()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
boost::interprocess::named_semaphore::remove	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(const char *name)
boost::interprocess::named_semaphore::remove	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::remove(const char *name)$/;"	f	class:boost::interprocess::named_semaphore	signature:(const char *name)
boost::interprocess::named_semaphore::timed_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_semaphore::timed_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_semaphore	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_semaphore::try_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
boost::interprocess::named_semaphore::try_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::try_wait()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
boost::interprocess::named_semaphore::wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
boost::interprocess::named_semaphore::wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::wait()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
boost::interprocess::named_semaphore::~named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   ~named_semaphore();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
boost::interprocess::named_semaphore::~named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::~named_semaphore()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
boost::interprocess::named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^class named_sharable_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::named_sharable_mutex::construct_func_t	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   typedef ipcdetail::named_creation_functor<interprocess_sharable_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_sharable_mutex	access:private
boost::interprocess::named_sharable_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:private	signature:()
boost::interprocess::named_sharable_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline void named_sharable_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
boost::interprocess::named_sharable_mutex::lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
boost::interprocess::named_sharable_mutex::lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline void named_sharable_mutex::lock()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
boost::interprocess::named_sharable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
boost::interprocess::named_sharable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline void named_sharable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
boost::interprocess::named_sharable_mutex::m_shmem	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::named_sharable_mutex	access:private
boost::interprocess::named_sharable_mutex::mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   interprocess_sharable_mutex *mutex() const$/;"	f	class:boost::interprocess::named_sharable_mutex	access:private	signature:() const
boost::interprocess::named_sharable_mutex::named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:private	signature:()
boost::interprocess::named_sharable_mutex::named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex(const named_sharable_mutex &);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:private	signature:(const named_sharable_mutex &)
boost::interprocess::named_sharable_mutex::named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
boost::interprocess::named_sharable_mutex::named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::named_sharable_mutex::named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
boost::interprocess::named_sharable_mutex::named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline named_sharable_mutex::named_sharable_mutex$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::named_sharable_mutex::named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline named_sharable_mutex::named_sharable_mutex$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(open_only_t, const char *name)
boost::interprocess::named_sharable_mutex::named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline named_sharable_mutex::named_sharable_mutex$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::named_sharable_mutex::open_create_impl_t	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::named_sharable_mutex	access:private
boost::interprocess::named_sharable_mutex::operator =	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex &operator=(const named_sharable_mutex &);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:private	signature:(const named_sharable_mutex &)
boost::interprocess::named_sharable_mutex::remove	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(const char *name)
boost::interprocess::named_sharable_mutex::remove	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline bool named_sharable_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(const char *name)
boost::interprocess::named_sharable_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_sharable_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline bool named_sharable_mutex::timed_lock$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_sharable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_sharable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline bool named_sharable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_sharable_mutex::try_lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
boost::interprocess::named_sharable_mutex::try_lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline bool named_sharable_mutex::try_lock()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
boost::interprocess::named_sharable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
boost::interprocess::named_sharable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline bool named_sharable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
boost::interprocess::named_sharable_mutex::unlock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
boost::interprocess::named_sharable_mutex::unlock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline void named_sharable_mutex::unlock()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
boost::interprocess::named_sharable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
boost::interprocess::named_sharable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline void named_sharable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
boost::interprocess::named_sharable_mutex::~named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   ~named_sharable_mutex();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
boost::interprocess::named_sharable_mutex::~named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline named_sharable_mutex::~named_sharable_mutex()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
boost::interprocess::named_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
boost::interprocess::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^class named_upgradable_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^class named_upgradable_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::named_upgradable_mutex::construct_func_t	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   typedef ipcdetail::named_creation_functor<interprocess_upgradable_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_upgradable_mutex	access:private
boost::interprocess::named_upgradable_mutex::construct_func_t	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   typedef ipcdetail::named_creation_functor<interprocess_upgradable_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_upgradable_mutex	access:private
boost::interprocess::named_upgradable_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
boost::interprocess::named_upgradable_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
boost::interprocess::named_upgradable_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::m_shmem	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::named_upgradable_mutex	access:private
boost::interprocess::named_upgradable_mutex::m_shmem	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::named_upgradable_mutex	access:private
boost::interprocess::named_upgradable_mutex::mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex *mutex() const$/;"	f	class:boost::interprocess::named_upgradable_mutex	access:private	signature:() const
boost::interprocess::named_upgradable_mutex::mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex *mutex() const$/;"	f	class:boost::interprocess::named_upgradable_mutex	access:private	signature:() const
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_only_t, const char *name)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(create_only_t, const char *name, const permissions &perm)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_only_t, const char *name)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
boost::interprocess::named_upgradable_mutex::open_create_impl_t	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::named_upgradable_mutex	access:private
boost::interprocess::named_upgradable_mutex::open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::named_upgradable_mutex	access:private
boost::interprocess::named_upgradable_mutex::operator =	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex &operator=(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
boost::interprocess::named_upgradable_mutex::operator =	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex &operator=(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
boost::interprocess::named_upgradable_mutex::remove	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const char *name)
boost::interprocess::named_upgradable_mutex::remove	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const char *name)
boost::interprocess::named_upgradable_mutex::remove	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const char *name)
boost::interprocess::named_upgradable_mutex::remove	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const char *name)
boost::interprocess::named_upgradable_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_upgradable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_upgradable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_unlock_upgradable_and_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_unlock_upgradable_and_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::try_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::~named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   ~named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::~named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::~named_upgradable_mutex()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::~named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   ~named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::~named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::~named_upgradable_mutex()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::native_error_t	/usr/include/boost/interprocess/errors.hpp	/^typedef int    native_error_t;$/;"	t	namespace:boost::interprocess
boost::interprocess::no_error	/usr/include/boost/interprocess/errors.hpp	/^   no_error = 0,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::node_allocator_base
boost::interprocess::node_allocator::base_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         < 2, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::node_allocator	access:private
boost::interprocess::node_allocator::node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator$/;"	f	class:boost::interprocess::node_allocator	access:public	signature:(const node_allocator<T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::node_allocator::node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::node_allocator	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::node_allocator::rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::node_allocator	access:public
boost::interprocess::node_allocator::rebind::other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::node_allocator::rebind	access:public
boost::interprocess::node_allocator::version	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef boost::interprocess::version_type<node_allocator, 2>   version;$/;"	t	class:boost::interprocess::node_allocator	access:public
boost::interprocess::not_empty_error	/usr/include/boost/interprocess/errors.hpp	/^   not_empty_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::not_found_error	/usr/include/boost/interprocess/errors.hpp	/^   not_found_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::not_such_file_or_directory	/usr/include/boost/interprocess/errors.hpp	/^   not_such_file_or_directory,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::nothrow_allocation	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type nothrow_allocation = boost::container::nothrow_allocation;$/;"	m	namespace:boost::interprocess
boost::interprocess::null_index	/usr/include/boost/interprocess/indexes/null_index.hpp	/^class null_index$/;"	c	namespace:boost::interprocess
boost::interprocess::null_index::begin	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   const_iterator begin() const$/;"	f	class:boost::interprocess::null_index	access:public	signature:() const
boost::interprocess::null_index::begin	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   iterator begin()$/;"	f	class:boost::interprocess::null_index	access:public	signature:()
boost::interprocess::null_index::const_iterator	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   typedef const void * const_iterator;$/;"	t	class:boost::interprocess::null_index	access:public
boost::interprocess::null_index::end	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   const_iterator end() const$/;"	f	class:boost::interprocess::null_index	access:public	signature:() const
boost::interprocess::null_index::end	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   iterator end()$/;"	f	class:boost::interprocess::null_index	access:public	signature:()
boost::interprocess::null_index::iterator	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   typedef void * iterator;$/;"	t	class:boost::interprocess::null_index	access:public
boost::interprocess::null_index::null_index	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   null_index(segment_manager_base *){}$/;"	f	class:boost::interprocess::null_index	access:public	signature:(segment_manager_base *)
boost::interprocess::null_index::segment_manager_base	/usr/include/boost/interprocess/indexes/null_index.hpp	/^      segment_manager_base    segment_manager_base;$/;"	t	class:boost::interprocess::null_index	access:private
boost::interprocess::null_mapped_region_function	/usr/include/boost/interprocess/mapped_region.hpp	/^struct null_mapped_region_function$/;"	s	namespace:boost::interprocess
boost::interprocess::null_mapped_region_function::get_min_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t get_min_size() const$/;"	f	struct:boost::interprocess::null_mapped_region_function	access:public	signature:() const
boost::interprocess::null_mapped_region_function::operator ()	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool operator()(void *, std::size_t , bool) const$/;"	f	struct:boost::interprocess::null_mapped_region_function	access:public	signature:(void *, std::size_t , bool) const
boost::interprocess::null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^class null_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::null_mutex::lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex(const null_mutex&);$/;"	p	class:boost::interprocess::null_mutex	access:private	signature:(const null_mutex&)
boost::interprocess::null_mutex::operator =	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex &operator= (const null_mutex&);$/;"	p	class:boost::interprocess::null_mutex	access:private	signature:(const null_mutex&)
boost::interprocess::null_mutex::timed_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
boost::interprocess::null_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
boost::interprocess::null_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
boost::interprocess::null_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
boost::interprocess::null_mutex::try_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock_sharable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock_upgradable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_and_lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_and_lock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable_and_lock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::~null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   ~null_mutex(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex_family	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^struct null_mutex_family$/;"	s	namespace:boost::interprocess
boost::interprocess::null_mutex_family::mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::null_mutex                   mutex_type;$/;"	t	struct:boost::interprocess::null_mutex_family	access:public
boost::interprocess::null_mutex_family::recursive_mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::null_mutex                   recursive_mutex_type;$/;"	t	struct:boost::interprocess::null_mutex_family	access:public
boost::interprocess::obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_obufferstream<char>    obufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^class offset_ptr$/;"	c	namespace:boost::interprocess
boost::interprocess::offset_ptr::dec_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void dec_offset(DifferenceType bytes)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(DifferenceType bytes)
boost::interprocess::offset_ptr::difference_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef DifferenceType                    difference_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_ptr::element_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef PointedType                       element_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_ptr::get	/usr/include/boost/interprocess/offset_ptr.hpp	/^   pointer get() const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
boost::interprocess::offset_ptr::get_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_type get_offset() const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
boost::interprocess::offset_ptr::inc_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void inc_offset(DifferenceType bytes)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(DifferenceType bytes)
boost::interprocess::offset_ptr::internal	/usr/include/boost/interprocess/offset_ptr.hpp	/^   ipcdetail::offset_ptr_internal<OffsetType, OffsetAlignment> internal;$/;"	m	class:boost::interprocess::offset_ptr	access:private
boost::interprocess::offset_ptr::iterator_category	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef std::random_access_iterator_tag   iterator_category;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr( T *ptr$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:( T *ptr , typename ipcdetail::enable_if< ipcdetail::is_convertible<T*, PointedType*> >::type * = 0)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr( const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:( const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr , typename ipcdetail::enable_if_c< ipcdetail::is_convertible<T2*, PointedType*>::value && !ipcdetail::offset_ptr_maintains_address<T2, PointedType>::value >::type * = 0)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr( const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:( const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr , typename ipcdetail::enable_if_c< ipcdetail::is_convertible<T2*, PointedType*>::value && ipcdetail::offset_ptr_maintains_address<T2, PointedType>::value >::type * = 0 )
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr()$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:()
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr& ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr& ptr)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::const_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::const_cast_tag)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::dynamic_cast_tag)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::reinterpret_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::reinterpret_cast_tag)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::static_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::static_cast_tag)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(pointer ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(pointer ptr)
boost::interprocess::offset_ptr::offset_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef OffsetType                        offset_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_ptr::operator !	/usr/include/boost/interprocess/offset_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
boost::interprocess::offset_ptr::operator !=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator!= (const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator !=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator!= (const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
boost::interprocess::offset_ptr::operator !=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator!= (pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator *	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reference operator* () const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
boost::interprocess::offset_ptr::operator +	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend offset_ptr operator+(difference_type diff, offset_ptr right)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(difference_type diff, offset_ptr right)
boost::interprocess::offset_ptr::operator +	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend offset_ptr operator+(offset_ptr left, difference_type diff)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(offset_ptr left, difference_type diff)
boost::interprocess::offset_ptr::operator ++	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator++ (int)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(int)
boost::interprocess::offset_ptr::operator ++	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator++ (void)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(void)
boost::interprocess::offset_ptr::operator +=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr &operator+= (difference_type offset)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(difference_type offset)
boost::interprocess::offset_ptr::operator -	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend difference_type operator-(const offset_ptr &pt, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator -	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend offset_ptr operator-(difference_type diff, offset_ptr right)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(difference_type diff, offset_ptr right)
boost::interprocess::offset_ptr::operator -	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend offset_ptr operator-(offset_ptr left, difference_type diff)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(offset_ptr left, difference_type diff)
boost::interprocess::offset_ptr::operator --	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator-- (int)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(int)
boost::interprocess::offset_ptr::operator --	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator-- (void)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(void)
boost::interprocess::offset_ptr::operator -=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr &operator-= (difference_type offset)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(difference_type offset)
boost::interprocess::offset_ptr::operator ->	/usr/include/boost/interprocess/offset_ptr.hpp	/^   pointer operator->() const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
boost::interprocess::offset_ptr::operator <	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<(const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator <	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<(const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
boost::interprocess::offset_ptr::operator <	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<(pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator <=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<=(const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator <=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<=(const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
boost::interprocess::offset_ptr::operator <=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<=(pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^      operator= (const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr)
boost::interprocess::offset_ptr::operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator= (const offset_ptr & ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr & ptr)
boost::interprocess::offset_ptr::operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator= (pointer from)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(pointer from)
boost::interprocess::offset_ptr::operator ==	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator== (const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator ==	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator== (const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
boost::interprocess::offset_ptr::operator ==	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator== (pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator >	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>(const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator >	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>(const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
boost::interprocess::offset_ptr::operator >	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>(pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator >=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>=(const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator >=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>=(const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
boost::interprocess::offset_ptr::operator >=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>=(pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
boost::interprocess::offset_ptr::operator []	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reference operator[](difference_type idx) const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(difference_type idx) const
boost::interprocess::offset_ptr::operator unspecified_bool_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
boost::interprocess::offset_ptr::pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef PointedType *                     pointer;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_ptr::pointer_to	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static offset_ptr pointer_to(reference r)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(reference r)
boost::interprocess::offset_ptr::rebind	/usr/include/boost/interprocess/offset_ptr.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_ptr::rebind::other	/usr/include/boost/interprocess/offset_ptr.hpp	/^   {  typedef offset_ptr<U, DifferenceType, OffsetType, OffsetAlignment> other;  };$/;"	t	struct:boost::interprocess::offset_ptr::rebind	access:public
boost::interprocess::offset_ptr::reference	/usr/include/boost/interprocess/offset_ptr.hpp	/^      add_reference<PointedType>::type       reference;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_ptr::self_t	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef offset_ptr<PointedType, DifferenceType, OffsetType, OffsetAlignment>   self_t;$/;"	t	class:boost::interprocess::offset_ptr	access:private
boost::interprocess::offset_ptr::swap	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend void swap(offset_ptr &left, offset_ptr &right)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(offset_ptr &left, offset_ptr &right)
boost::interprocess::offset_ptr::unspecified_bool_type_func	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:() const
boost::interprocess::offset_ptr::value_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^            >::type                          value_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef long long          offset_t;$/;"	t	namespace:boost::interprocess
boost::interprocess::offset_type_alignment	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^static const std::size_t offset_type_alignment = 0;$/;"	m	namespace:boost::interprocess
boost::interprocess::open_copy_on_write	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_copy_on_write_t open_copy_on_write = open_copy_on_write_t();$/;"	m	namespace:boost::interprocess
boost::interprocess::open_copy_on_write_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_copy_on_write_t {};$/;"	s	namespace:boost::interprocess
boost::interprocess::open_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_only_t      open_only      = open_only_t();$/;"	m	namespace:boost::interprocess
boost::interprocess::open_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_only_t {};$/;"	s	namespace:boost::interprocess
boost::interprocess::open_or_create	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_or_create_t open_or_create = open_or_create_t();$/;"	m	namespace:boost::interprocess
boost::interprocess::open_or_create_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_or_create_t {};$/;"	s	namespace:boost::interprocess
boost::interprocess::open_read_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_read_only_t open_read_only = open_read_only_t();$/;"	m	namespace:boost::interprocess
boost::interprocess::open_read_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_read_only_t {};$/;"	s	namespace:boost::interprocess
boost::interprocess::open_read_private_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_read_private_t {};$/;"	s	namespace:boost::interprocess
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator!=(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/allocator.hpp	/^bool operator!=(const allocator<T, SegmentManager>  &alloc1,$/;"	f	namespace:boost::interprocess	signature:(const allocator<T, SegmentManager> &alloc1, const allocator<T, SegmentManager> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^bool operator!=(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^bool operator!=(const cached_node_allocator<T, S, NPC> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const cached_node_allocator<T, S, NPC> &alloc1, const cached_node_allocator<T, S, NPC> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator!=(const node_allocator<T, S, NPC> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const node_allocator<T, S, NPC> &alloc1, const node_allocator<T, S, NPC> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator!=(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator!=(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator!= (const intersegment_ptr<T1> &pt1,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(const typename intrusive_ptr<T, VP>::pointer &a,$/;"	f	namespace:boost::interprocess	signature:(const typename intrusive_ptr<T, VP>::pointer &a, intrusive_ptr<T, VP> const & b)
boost::interprocess::operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, const typename intrusive_ptr<T, VP>::pointer &b)
boost::interprocess::operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<U, VP> const & b)
boost::interprocess::operator !=	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator!=(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
boost::interprocess::operator !=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator +	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^intersegment_ptr<T> operator+$/;"	f	namespace:boost::interprocess	signature:(std::ptrdiff_t diff, const intersegment_ptr<T>& right)
boost::interprocess::operator -	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::ptrdiff_t operator- (const intersegment_ptr<T> &pt,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T> &pt, const intersegment_ptr<T2> &pt2)
boost::interprocess::operator <	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator <(const intersegment_ptr<T1> &left,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &left, const intersegment_ptr<T2> &right)
boost::interprocess::operator <	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator<(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<T, VP> const & b)
boost::interprocess::operator <	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator<(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
boost::interprocess::operator <	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator <(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator <	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^bool operator<(weak_ptr<T, A, D> const & a, weak_ptr<U, A2, D2> const & b)$/;"	f	namespace:boost::interprocess	signature:(weak_ptr<T, A, D> const & a, weak_ptr<U, A2, D2> const & b)
boost::interprocess::operator <<	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::basic_ostream<E, T> & operator<<$/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, const intersegment_ptr<U> & p)
boost::interprocess::operator <<	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline std::basic_ostream<E, T> & operator<<$/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, offset_ptr<W, X, Y, Z> const & p)
boost::interprocess::operator <<	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^inline std::basic_ostream<E, T> & operator<<$/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, intrusive_ptr<Y, VP> const & p)
boost::interprocess::operator <<	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^std::basic_ostream<E, T> & operator<<$/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, shared_ptr<Y, VoidAllocator, Deleter> const & p)
boost::interprocess::operator <=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator<= (const intersegment_ptr<T1> &pt1,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
boost::interprocess::operator <=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator==(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/allocator.hpp	/^bool operator==(const allocator<T , SegmentManager>  &alloc1,$/;"	f	namespace:boost::interprocess	signature:(const allocator<T , SegmentManager> &alloc1, const allocator<T, SegmentManager> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^bool operator==(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^bool operator==(const cached_node_allocator<T, S, NPC> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const cached_node_allocator<T, S, NPC> &alloc1, const cached_node_allocator<T, S, NPC> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator==(const node_allocator<T, S, NPC> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const node_allocator<T, S, NPC> &alloc1, const node_allocator<T, S, NPC> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator==(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator==(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator ==(const intersegment_ptr<T1> &left,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &left, const intersegment_ptr<T2> &right)
boost::interprocess::operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(const typename intrusive_ptr<T, VP>::pointer &a,$/;"	f	namespace:boost::interprocess	signature:(const typename intrusive_ptr<T, VP>::pointer &a, intrusive_ptr<T, VP> const & b)
boost::interprocess::operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, const typename intrusive_ptr<T, VP>::pointer &b)
boost::interprocess::operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<U, VP> const & b)
boost::interprocess::operator ==	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator==(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
boost::interprocess::operator ==	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator >	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator> (const intersegment_ptr<T1> &pt1,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
boost::interprocess::operator >	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator >(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator >=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator>= (const intersegment_ptr<T1> &pt1,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
boost::interprocess::operator >=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator >>	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::basic_istream<E, T> & operator>>$/;"	f	namespace:boost::interprocess	signature:(std::basic_istream<E, T> & os, intersegment_ptr<U> & p)
boost::interprocess::operator >>	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline std::basic_istream<E, T> & operator>>$/;"	f	namespace:boost::interprocess	signature:(std::basic_istream<E, T> & is, offset_ptr<W, X, Y, Z> & p)
boost::interprocess::operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^struct operator_arrow_proxy$/;"	s	namespace:boost::interprocess
boost::interprocess::operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^struct operator_arrow_proxy<T&>$/;"	s	namespace:boost::interprocess
boost::interprocess::operator_arrow_proxy::m_value	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   T &m_value;$/;"	m	struct:boost::interprocess::operator_arrow_proxy	access:public
boost::interprocess::operator_arrow_proxy::m_value	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   mutable PseudoReference m_value;$/;"	m	struct:boost::interprocess::operator_arrow_proxy	access:public
boost::interprocess::operator_arrow_proxy::operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   PseudoReference* operator->() const { return &m_value; }$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:() const
boost::interprocess::operator_arrow_proxy::operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   T* operator->() const { return const_cast<T*>(&m_value); }$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:() const
boost::interprocess::operator_arrow_proxy::operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   operator_arrow_proxy(T &px)$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:(T &px)
boost::interprocess::operator_arrow_proxy::operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   operator_arrow_proxy(const PseudoReference &px)$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:(const PseudoReference &px)
boost::interprocess::other_error	/usr/include/boost/interprocess/errors.hpp	/^   other_error,      \/\/ library generated error$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::out_of_memory_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_memory_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::out_of_resource_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_resource_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::out_of_space_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_space_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::path_error	/usr/include/boost/interprocess/errors.hpp	/^   path_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::permissions	/usr/include/boost/interprocess/permissions.hpp	/^class permissions$/;"	c	namespace:boost::interprocess
boost::interprocess::permissions::get_permissions	/usr/include/boost/interprocess/permissions.hpp	/^   os_permissions_type get_permissions() const$/;"	f	class:boost::interprocess::permissions	access:public	signature:() const
boost::interprocess::permissions::m_perm	/usr/include/boost/interprocess/permissions.hpp	/^   os_permissions_type  m_perm;$/;"	m	class:boost::interprocess::permissions	access:private
boost::interprocess::permissions::os_permissions_type	/usr/include/boost/interprocess/permissions.hpp	/^   typedef void*  os_permissions_type;$/;"	t	class:boost::interprocess::permissions	access:private
boost::interprocess::permissions::permissions	/usr/include/boost/interprocess/permissions.hpp	/^   permissions()$/;"	f	class:boost::interprocess::permissions	access:public	signature:()
boost::interprocess::permissions::permissions	/usr/include/boost/interprocess/permissions.hpp	/^   permissions(os_permissions_type type)$/;"	f	class:boost::interprocess::permissions	access:public	signature:(os_permissions_type type)
boost::interprocess::permissions::set_default	/usr/include/boost/interprocess/permissions.hpp	/^   void set_default()$/;"	f	class:boost::interprocess::permissions	access:public	signature:()
boost::interprocess::permissions::set_permissions	/usr/include/boost/interprocess/permissions.hpp	/^   void set_permissions(os_permissions_type perm)$/;"	f	class:boost::interprocess::permissions	access:public	signature:(os_permissions_type perm)
boost::interprocess::permissions::set_unrestricted	/usr/include/boost/interprocess/permissions.hpp	/^   void set_unrestricted()$/;"	f	class:boost::interprocess::permissions	access:public	signature:()
boost::interprocess::private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::private_adaptive_pool_base
boost::interprocess::private_adaptive_pool::base_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         < 2, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::private_adaptive_pool	access:private
boost::interprocess::private_adaptive_pool::private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool$/;"	f	class:boost::interprocess::private_adaptive_pool	access:public	signature:(const private_adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::private_adaptive_pool::private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::private_adaptive_pool	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::private_adaptive_pool::rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::private_adaptive_pool	access:public
boost::interprocess::private_adaptive_pool::rebind::other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::private_adaptive_pool::rebind	access:public
boost::interprocess::private_adaptive_pool::version	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<private_adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::private_adaptive_pool	access:public
boost::interprocess::private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::private_node_allocator_base
boost::interprocess::private_node_allocator::base_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         < 2, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::private_node_allocator	access:private
boost::interprocess::private_node_allocator::private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator$/;"	f	class:boost::interprocess::private_node_allocator	access:public	signature:(const private_node_allocator<T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::private_node_allocator::private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::private_node_allocator	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::private_node_allocator::rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::private_node_allocator	access:public
boost::interprocess::private_node_allocator::rebind::other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         <T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::private_node_allocator::rebind	access:public
boost::interprocess::private_node_allocator::version	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef boost::interprocess::version_type<private_node_allocator, 2>   version;$/;"	t	class:boost::interprocess::private_node_allocator	access:public
boost::interprocess::rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^class rbtree_best_fit$/;"	c	namespace:boost::interprocess
boost::interprocess::rbtree_best_fit::Alignment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type Alignment = !MemAlignment$/;"	m	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::AlignmentMask	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type AlignmentMask = (Alignment - 1);$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type AllocatedCtrlBytes  = ipcdetail::ct_rounded_size<sizeof(SizeHolder), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type AllocatedCtrlUnits  = AllocatedCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((0 == (Alignment & (Alignment - size_type(1u)))));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(0 == (Alignment & (Alignment - size_type(1u))))
boost::interprocess::rbtree_best_fit::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((Alignment >= 4));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(Alignment >= 4)
boost::interprocess::rbtree_best_fit::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((Alignment >= ::boost::alignment_of<void_pointer>::value));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(Alignment >= ::boost::alignment_of<void_pointer>::value)
boost::interprocess::rbtree_best_fit::BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type BlockCtrlBytes = ipcdetail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type BlockCtrlUnits = BlockCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::EndCtrlBlockBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type EndCtrlBlockBytes   = ipcdetail::ct_rounded_size<sizeof(SizeHolder), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::EndCtrlBlockUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type EndCtrlBlockUnits   = EndCtrlBlockBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::Imultiset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      <block_ctrl, bi::base_hook<TreeHook> >::type                Imultiset;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::MinBlockUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type MinBlockUnits       = BlockCtrlUnits;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type PayloadPerAllocation = AllocatedCtrlBytes - UsableByPreviousChunk;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::SizeHolder	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct SizeHolder$/;"	s	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::SizeHolder::m_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type m_allocated :  1;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
boost::interprocess::rbtree_best_fit::SizeHolder::m_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type m_prev_allocated :  1;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
boost::interprocess::rbtree_best_fit::SizeHolder::m_prev_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type m_prev_size :  sizeof(size_type)*CHAR_BIT;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
boost::interprocess::rbtree_best_fit::SizeHolder::m_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type m_size      :  sizeof(size_type)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
boost::interprocess::rbtree_best_fit::TreeHook	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      , bi::link_mode<bi::normal_link> >::type           TreeHook;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const size_type UsableByPreviousChunk   = sizeof(size_type);$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::algo_impl_t	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef ipcdetail::memory_algorithm_common<rbtree_best_fit> algo_impl_t;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::rbtree_best_fit::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
boost::interprocess::rbtree_best_fit::allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocate(size_type nbytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type nbytes)
boost::interprocess::rbtree_best_fit::allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* allocate             (size_type nbytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type nbytes)
boost::interprocess::rbtree_best_fit::allocate_aligned	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type nbytes, size_type alignment)
boost::interprocess::rbtree_best_fit::allocate_aligned	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* allocate_aligned     (size_type nbytes, size_type alignment);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type nbytes, size_type alignment)
boost::interprocess::rbtree_best_fit::allocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void allocate_many(const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::rbtree_best_fit	access:public	signature:(const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
boost::interprocess::rbtree_best_fit::allocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void allocate_many(size_type elem_bytes, size_type num_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type elem_bytes, size_type num_elements, multiallocation_chain &chain)
boost::interprocess::rbtree_best_fit::allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr = 0)
boost::interprocess::rbtree_best_fit::allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr)
boost::interprocess::rbtree_best_fit::block_ctrl	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct block_ctrl$/;"	s	class:boost::interprocess::rbtree_best_fit	inherits:SizeHolder,TreeHook	access:private
boost::interprocess::rbtree_best_fit::block_ctrl::block_ctrl	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      block_ctrl()$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:public	signature:()
boost::interprocess::rbtree_best_fit::block_ctrl::operator <	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      friend bool operator<(const block_ctrl &a, const block_ctrl &b)$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:friend	signature:(const block_ctrl &a, const block_ctrl &b)
boost::interprocess::rbtree_best_fit::block_ctrl::operator ==	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      friend bool operator==(const block_ctrl &a, const block_ctrl &b)$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:friend	signature:(const block_ctrl &a, const block_ctrl &b)
boost::interprocess::rbtree_best_fit::block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^         rebind_pointer<block_ctrl>::type                   block_ctrl_ptr;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::char_ptr	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^         rebind_pointer<char>::type                         char_ptr;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::check_sanity	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::rbtree_best_fit::check_sanity	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
boost::interprocess::rbtree_best_fit::deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(void *addr)
boost::interprocess::rbtree_best_fit::deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::deallocate(void* addr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void* addr)
boost::interprocess::rbtree_best_fit::deallocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   deallocate_many(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::multiallocation_chain &chain)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::multiallocation_chain &chain)
boost::interprocess::rbtree_best_fit::deallocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void deallocate_many(multiallocation_chain &chain);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(multiallocation_chain &chain)
boost::interprocess::rbtree_best_fit::difference_type	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type difference_type;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::get_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   size_type get_free_memory()  const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:() const
boost::interprocess::rbtree_best_fit::get_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::get_free_memory()  const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:() const
boost::interprocess::rbtree_best_fit::get_min_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   get_min_size (size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::get_min_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static size_type get_min_size (size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::get_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   size_type get_size()  const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:() const
boost::interprocess::rbtree_best_fit::get_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::get_size()  const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:() const
boost::interprocess::rbtree_best_fit::grow	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void grow(size_type extra_size);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type extra_size)
boost::interprocess::rbtree_best_fit::grow	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::grow(size_type extra_size)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type extra_size)
boost::interprocess::rbtree_best_fit::header_t	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct header_t : public mutex_type$/;"	s	class:boost::interprocess::rbtree_best_fit	inherits:mutex_type	access:private
boost::interprocess::rbtree_best_fit::header_t::m_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type            m_allocated;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
boost::interprocess::rbtree_best_fit::header_t::m_extra_hdr_bytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type            m_extra_hdr_bytes;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
boost::interprocess::rbtree_best_fit::header_t::m_imultiset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      Imultiset            m_imultiset;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
boost::interprocess::rbtree_best_fit::header_t::m_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type            m_size;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
boost::interprocess::rbtree_best_fit::imultiset_iterator	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename Imultiset::iterator                           imultiset_iterator;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::m_header	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::rbtree_best_fit	typeref:struct:boost::interprocess::rbtree_best_fit::header_t	access:private
boost::interprocess::rbtree_best_fit::multiallocation_chain	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef ipcdetail::basic_multiallocation_chain<VoidPointer>  multiallocation_chain;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::mutex_family	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::mutex_type	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename MutexFamily::mutex_type                       mutex_type;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::operator =	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit &operator=(const rbtree_best_fit &);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const rbtree_best_fit &)
boost::interprocess::rbtree_best_fit::priv_add_segment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_add_segment(void *addr, size_type segment_size)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void *addr, size_type segment_size)
boost::interprocess::rbtree_best_fit::priv_add_segment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_add_segment(void *addr, size_type size);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *addr, size_type size)
boost::interprocess::rbtree_best_fit::priv_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command ,size_type limit_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,size_type backwards_multiple)
boost::interprocess::rbtree_best_fit::priv_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command ,size_type limit_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr = 0 ,size_type backwards_multiple = 1)
boost::interprocess::rbtree_best_fit::priv_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      priv_allocation_command(boost::interprocess::allocation_type command,   size_type limit_size,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, void *reuse_ptr, size_type sizeof_object)
boost::interprocess::rbtree_best_fit::priv_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_allocation_command (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, void *reuse_ptr, size_type sizeof_object)
boost::interprocess::rbtree_best_fit::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* priv_check_and_allocate(size_type units$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(size_type units ,block_ctrl* block ,size_type &received_size)
boost::interprocess::rbtree_best_fit::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void* rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_check_and_allocate$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type nunits ,typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl* block ,size_type &received_size)
boost::interprocess::rbtree_best_fit::priv_deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *addr)
boost::interprocess::rbtree_best_fit::priv_deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void* addr)
boost::interprocess::rbtree_best_fit::priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ::priv_end_block()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::rbtree_best_fit::priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   block_ctrl *priv_end_block();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:()
boost::interprocess::rbtree_best_fit::priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_end_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *first_segment_block)
boost::interprocess::rbtree_best_fit::priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl * priv_end_block(block_ctrl *first_segment_block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *first_segment_block)
boost::interprocess::rbtree_best_fit::priv_expand	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *ptr ,const size_type min_size, const size_type preferred_size ,size_type &received_size)
boost::interprocess::rbtree_best_fit::priv_expand	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void *ptr ,const size_type min_size ,const size_type preferred_size ,size_type &received_size)
boost::interprocess::rbtree_best_fit::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards ,size_type backwards_multiple)
boost::interprocess::rbtree_best_fit::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards ,size_type backwards_multiple)
boost::interprocess::rbtree_best_fit::priv_first_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ::priv_first_block()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::rbtree_best_fit::priv_first_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   block_ctrl *priv_first_block();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:()
boost::interprocess::rbtree_best_fit::priv_first_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_first_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *end_segment_block)
boost::interprocess::rbtree_best_fit::priv_first_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl * priv_first_block(block_ctrl *end_segment_block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *end_segment_block)
boost::interprocess::rbtree_best_fit::priv_first_block_offset_from_this	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ::priv_first_block_offset_from_this(const void *this_ptr, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *this_ptr, size_type extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::priv_first_block_offset_from_this	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static size_type priv_first_block_offset_from_this(const void *this_ptr, size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const void *this_ptr, size_type extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::priv_get_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_get_block(const void *ptr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *ptr)
boost::interprocess::rbtree_best_fit::priv_get_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl *priv_get_block(const void *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const void *ptr)
boost::interprocess::rbtree_best_fit::priv_get_total_units	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_get_total_units(size_type userbytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type userbytes)
boost::interprocess::rbtree_best_fit::priv_get_total_units	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static size_type priv_get_total_units(size_type userbytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(size_type userbytes)
boost::interprocess::rbtree_best_fit::priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      priv_get_user_buffer(const typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static void *priv_get_user_buffer(const block_ctrl *block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_is_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^bool rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_is_allocated_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_is_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_is_prev_allocated(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_is_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^bool rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_is_prev_allocated$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_mark_as_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_as_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_mark_as_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_mark_as_allocated_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_mark_as_free_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_as_free_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_mark_as_free_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_mark_as_free_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_new_allocated_block(block_ctrl *ptr)$/;"	f	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_next_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_next_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_next_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl * priv_next_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_prev_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_prev_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_prev_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl * priv_prev_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::raw_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^     raw_allocation_command  (boost::interprocess::allocation_type command,   size_type limit_object,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_object, size_type preferred_object,size_type &received_object, void *reuse_ptr = 0, size_type sizeof_object = 1)
boost::interprocess::rbtree_best_fit::raw_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   raw_allocation_command  (boost::interprocess::allocation_type command,   size_type limit_objects,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, size_type limit_objects, size_type preferred_objects,size_type &received_objects, void *reuse_ptr, size_type sizeof_object)
boost::interprocess::rbtree_best_fit::rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit           (size_type size, size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type size, size_type extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:()
boost::interprocess::rbtree_best_fit::rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit(const rbtree_best_fit &);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const rbtree_best_fit &)
boost::interprocess::rbtree_best_fit::rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit(size_type segment_size, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type segment_size, size_type extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::shrink_to_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void shrink_to_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
boost::interprocess::rbtree_best_fit::shrink_to_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::shrink_to_fit()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::rbtree_best_fit::size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   size(const void *ptr) const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *ptr) const
boost::interprocess::rbtree_best_fit::size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   size_type size(const void *ptr) const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(const void *ptr) const
boost::interprocess::rbtree_best_fit::size_block_ctrl_compare	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct size_block_ctrl_compare$/;"	s	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::size_block_ctrl_compare::operator ()	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      bool operator()(const block_ctrl &block, size_type size) const$/;"	f	struct:boost::interprocess::rbtree_best_fit::size_block_ctrl_compare	access:public	signature:(const block_ctrl &block, size_type size) const
boost::interprocess::rbtree_best_fit::size_block_ctrl_compare::operator ()	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      bool operator()(size_type size, const block_ctrl &block) const$/;"	f	struct:boost::interprocess::rbtree_best_fit::size_block_ctrl_compare	access:public	signature:(size_type size, const block_ctrl &block) const
boost::interprocess::rbtree_best_fit::size_type	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type     size_type;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::void_pointer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::zero_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void zero_free_memory();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
boost::interprocess::rbtree_best_fit::zero_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::zero_free_memory()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::rbtree_best_fit::~rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ~rbtree_best_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
boost::interprocess::rbtree_best_fit::~rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::~rbtree_best_fit()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::read_only	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef enum { read_only      = winapi::generic_read$/;"	e	enum:boost::interprocess::__anon2
boost::interprocess::read_only_error	/usr/include/boost/interprocess/errors.hpp	/^   read_only_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::read_private	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , read_private$/;"	e	enum:boost::interprocess::__anon2
boost::interprocess::read_write	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , read_write     = winapi::generic_read | winapi::generic_write$/;"	e	enum:boost::interprocess::__anon2
boost::interprocess::reinterpret_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> reinterpret_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
boost::interprocess::reinterpret_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reinterpret_pointer_cast(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)
boost::interprocess::remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^class remove_file_on_destroy$/;"	c	namespace:boost::interprocess
boost::interprocess::remove_file_on_destroy::m_name	/usr/include/boost/interprocess/file_mapping.hpp	/^   const char * m_name;$/;"	m	class:boost::interprocess::remove_file_on_destroy	access:private
boost::interprocess::remove_file_on_destroy::remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^   remove_file_on_destroy(const char *name)$/;"	f	class:boost::interprocess::remove_file_on_destroy	access:public	signature:(const char *name)
boost::interprocess::remove_file_on_destroy::~remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^   ~remove_file_on_destroy()$/;"	f	class:boost::interprocess::remove_file_on_destroy	access:public	signature:()
boost::interprocess::remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^class remove_shared_memory_on_destroy$/;"	c	namespace:boost::interprocess
boost::interprocess::remove_shared_memory_on_destroy::m_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   const char * m_name;$/;"	m	class:boost::interprocess::remove_shared_memory_on_destroy	access:private
boost::interprocess::remove_shared_memory_on_destroy::remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   remove_shared_memory_on_destroy(const char *name)$/;"	f	class:boost::interprocess::remove_shared_memory_on_destroy	access:public	signature:(const char *name)
boost::interprocess::remove_shared_memory_on_destroy::~remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   ~remove_shared_memory_on_destroy()$/;"	f	class:boost::interprocess::remove_shared_memory_on_destroy	access:public	signature:()
boost::interprocess::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^class scoped_lock$/;"	c	namespace:boost::interprocess
boost::interprocess::scoped_lock::abs_time	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(upgradable_lock<T>) upgr, boost::posix_time::ptime &abs_time$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::ipcdetail::enable_if::type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^               , typename ipcdetail::enable_if< ipcdetail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::ipcdetail::enable_if	access:public
boost::interprocess::scoped_lock::ipcdetail::enable_if::type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^         , typename ipcdetail::enable_if< ipcdetail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::ipcdetail::enable_if	access:public
boost::interprocess::scoped_lock::ipcdetail::enable_if::type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      , typename ipcdetail::enable_if< ipcdetail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::ipcdetail::enable_if	access:public
boost::interprocess::scoped_lock::lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_lock::m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(false)
boost::interprocess::scoped_lock::m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      : mp_mutex(0), m_locked(scop.owns())$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(scop.owns())
boost::interprocess::scoped_lock::m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::scoped_lock	access:private
boost::interprocess::scoped_lock::mp_mutex	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type *mp_mutex;$/;"	m	class:boost::interprocess::scoped_lock	access:private
boost::interprocess::scoped_lock::mutex	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
boost::interprocess::scoped_lock::mutex_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef Mutex mutex_type;$/;"	t	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::operator unspecified_bool_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
boost::interprocess::scoped_lock::owns	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
boost::interprocess::scoped_lock::release	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   explicit scoped_lock(mutex_type& m)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m)
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, defer_lock_type)
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
boost::interprocess::scoped_lock::shar	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::swap	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void swap( scoped_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:( scoped_lock<mutex_type> &other)
boost::interprocess::scoped_lock::this_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef scoped_lock<Mutex> this_type;$/;"	t	class:boost::interprocess::scoped_lock	access:private
boost::interprocess::scoped_lock::this_type::unspecified_bool_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::scoped_lock::this_type	access:private
boost::interprocess::scoped_lock::timed_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
boost::interprocess::scoped_lock::try_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_lock::try_to_lock_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::try_to_lock_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(upgradable_lock<T>) upgr, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::unlock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_lock::upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   explicit scoped_lock(BOOST_RV_REF(upgradable_lock<T>) upgr$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(upgradable_lock<T>) upgr, boost::posix_time::ptime &abs_time$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(upgradable_lock<T>) upgr, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::~scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   ~scoped_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^class scoped_ptr$/;"	c	namespace:boost::interprocess	inherits:Deleter
boost::interprocess::scoped_ptr::deleter_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef Deleter deleter_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
boost::interprocess::scoped_ptr::element_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
boost::interprocess::scoped_ptr::get	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   const pointer & get() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
boost::interprocess::scoped_ptr::get	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer & get()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
boost::interprocess::scoped_ptr::m_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::scoped_ptr	access:private
boost::interprocess::scoped_ptr::operator !	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   bool operator! () const \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
boost::interprocess::scoped_ptr::operator *	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   reference operator*() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
boost::interprocess::scoped_ptr::operator ->	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   const pointer &operator->() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
boost::interprocess::scoped_ptr::operator ->	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer &operator->()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
boost::interprocess::scoped_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   scoped_ptr & operator=(scoped_ptr const &);$/;"	p	class:boost::interprocess::scoped_ptr	access:private	signature:(scoped_ptr const &)
boost::interprocess::scoped_ptr::operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
boost::interprocess::scoped_ptr::pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef typename ipcdetail::pointer_type<T, Deleter>::type pointer;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
boost::interprocess::scoped_ptr::reference	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef typename ipcdetail::add_reference<T>::type reference;$/;"	t	class:boost::interprocess::scoped_ptr	access:private
boost::interprocess::scoped_ptr::release	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer release()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
boost::interprocess::scoped_ptr::reset	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void reset(const pointer &p = 0) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p = 0)
boost::interprocess::scoped_ptr::reset	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void reset(const pointer &p, const Deleter &d) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p, const Deleter &d)
boost::interprocess::scoped_ptr::scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   explicit scoped_ptr(const pointer &p = 0, const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p = 0, const Deleter &d = Deleter())
boost::interprocess::scoped_ptr::scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   scoped_ptr(scoped_ptr const &);$/;"	p	class:boost::interprocess::scoped_ptr	access:private	signature:(scoped_ptr const &)
boost::interprocess::scoped_ptr::swap	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void swap(scoped_ptr & b) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(scoped_ptr & b)
boost::interprocess::scoped_ptr::this_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef scoped_ptr<T, Deleter> this_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:private
boost::interprocess::scoped_ptr::this_type::unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef pointer this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::scoped_ptr::this_type	access:public
boost::interprocess::scoped_ptr::~scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   ~scoped_ptr()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
boost::interprocess::security_error	/usr/include/boost/interprocess/errors.hpp	/^   security_error,   \/\/ includes access rights, permissions failures$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^class segment_manager$/;"	c	namespace:boost::interprocess	inherits:segment_manager_base
boost::interprocess::segment_manager::Base	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm> Base;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::PayloadPerAllocation	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const size_type PayloadPerAllocation = Base::PayloadPerAllocation;$/;"	m	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::allocator	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct allocator$/;"	s	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::allocator::type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef boost::interprocess::allocator<T, segment_manager> type;$/;"	t	struct:boost::interprocess::segment_manager::allocator	access:public
boost::interprocess::segment_manager::atomic_func	/usr/include/boost/interprocess/segment_manager.hpp	/^   void atomic_func(Func &f)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(Func &f)
boost::interprocess::segment_manager::block_header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::block_header<size_type> block_header_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::char_ptr_holder_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::char_ptr_holder<CharType>                char_ptr_holder_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::char_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef CharType                       char_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::const_named_iterator	/usr/include/boost/interprocess/segment_manager.hpp	/^      <typename named_index_t::const_iterator, named_transform> const_named_iterator;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::const_unique_iterator	/usr/include/boost/interprocess/segment_manager.hpp	/^      <typename unique_index_t::const_iterator, unique_transform> const_unique_iterator;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::segment_manager::construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
boost::interprocess::segment_manager::construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::segment_manager::construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct_it(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
boost::interprocess::segment_manager::construct_iter_proxy	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct construct_iter_proxy$/;"	s	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::construct_iter_proxy::type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef ipcdetail::named_proxy<segment_manager, T, true>   type;$/;"	t	struct:boost::interprocess::segment_manager::construct_iter_proxy	access:public
boost::interprocess::segment_manager::construct_proxy	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct construct_proxy$/;"	s	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::construct_proxy::type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef ipcdetail::named_proxy<segment_manager, T, false>   type;$/;"	t	struct:boost::interprocess::segment_manager::construct_proxy	access:public
boost::interprocess::segment_manager::deleter	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct deleter$/;"	s	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::deleter::type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef boost::interprocess::deleter<T, segment_manager> type;$/;"	t	struct:boost::interprocess::segment_manager::deleter	access:public
boost::interprocess::segment_manager::destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool destroy(const CharType *name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType *name)
boost::interprocess::segment_manager::destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool destroy(const ipcdetail::unique_instance_t *)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const ipcdetail::unique_instance_t *)
boost::interprocess::segment_manager::destroy_ptr	/usr/include/boost/interprocess/segment_manager.hpp	/^   void destroy_ptr(const T *p)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *p)
boost::interprocess::segment_manager::difference_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::difference_type difference_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::find	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> find  (const CharType* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType* name)
boost::interprocess::segment_manager::find	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> find (const ipcdetail::unique_instance_t* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const ipcdetail::unique_instance_t* name)
boost::interprocess::segment_manager::find_no_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> find_no_lock  (const CharType* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType* name)
boost::interprocess::segment_manager::find_no_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> find_no_lock (const ipcdetail::unique_instance_t* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const ipcdetail::unique_instance_t* name)
boost::interprocess::segment_manager::find_or_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
boost::interprocess::segment_manager::find_or_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   typename construct_proxy<T>::type find_or_construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::segment_manager::find_or_construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::segment_manager::find_or_construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct_it(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
boost::interprocess::segment_manager::generic_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   T *generic_construct(const CharType *name,$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType *name, size_type num, bool try2find, bool dothrow, ipcdetail::in_place_interface &table)
boost::interprocess::segment_manager::get_allocator	/usr/include/boost/interprocess/segment_manager.hpp	/^      get_allocator()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::get_deleter	/usr/include/boost/interprocess/segment_manager.hpp	/^      get_deleter()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::get_instance_length	/usr/include/boost/interprocess/segment_manager.hpp	/^   static size_type get_instance_length(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
boost::interprocess::segment_manager::get_instance_name	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const CharType *get_instance_name(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
boost::interprocess::segment_manager::get_instance_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   static instance_type get_instance_type(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
boost::interprocess::segment_manager::get_min_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   static size_type get_min_size()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::get_num_named_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   size_type get_num_named_objects()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::get_num_unique_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   size_type get_num_unique_objects()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::get_this_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager *get_this_pointer()$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:()
boost::interprocess::segment_manager::header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct header_t$/;"	s	class:boost::interprocess::segment_manager	inherits:rmutex	access:private
boost::interprocess::segment_manager::header_t::header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^      header_t(Base *restricted_segment_mngr)$/;"	f	struct:boost::interprocess::segment_manager::header_t	access:public	signature:(Base *restricted_segment_mngr)
boost::interprocess::segment_manager::header_t::m_named_index	/usr/include/boost/interprocess/segment_manager.hpp	/^      named_index_t           m_named_index;$/;"	m	struct:boost::interprocess::segment_manager::header_t	access:public
boost::interprocess::segment_manager::header_t::m_unique_index	/usr/include/boost/interprocess/segment_manager.hpp	/^      unique_index_t          m_unique_index;$/;"	m	struct:boost::interprocess::segment_manager::header_t	access:public
boost::interprocess::segment_manager::index_config_named	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::index_config<CharType, MemoryAlgorithm>  index_config_named;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::index_config_unique	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::index_config<char, MemoryAlgorithm>      index_config_unique;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::index_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_named>                    index_type;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::is_intrusive_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::bool_<is_intrusive_index<index_type>::value >    is_intrusive_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::is_node_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::bool_<is_node_index<index_type>::value>          is_node_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::m_header	/usr/include/boost/interprocess/segment_manager.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::segment_manager	typeref:struct:boost::interprocess::segment_manager::header_t	access:private
boost::interprocess::segment_manager::memory_algorithm	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef MemoryAlgorithm                memory_algorithm;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::mutex_family	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::mutex_family       mutex_family;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::named_begin	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_named_iterator named_begin() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
boost::interprocess::segment_manager::named_end	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_named_iterator named_end() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
boost::interprocess::segment_manager::named_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_named>                    named_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::named_transform	/usr/include/boost/interprocess/segment_manager.hpp	/^      ,is_intrusive_index<index_type>::value>   named_transform;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::operator =	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager &operator=(const segment_manager &);$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:(const segment_manager &)
boost::interprocess::segment_manager::priv_destroy_ptr	/usr/include/boost/interprocess/segment_manager.hpp	/^   void priv_destroy_ptr(const void *ptr, ipcdetail::in_place_interface &dtor)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const void *ptr, ipcdetail::in_place_interface &dtor)
boost::interprocess::segment_manager::priv_find__impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> priv_find__impl (const ipcdetail::unique_instance_t* name, bool lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const ipcdetail::unique_instance_t* name, bool lock)
boost::interprocess::segment_manager::priv_find_impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> priv_find_impl (const CharType* name, bool lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharType* name, bool lock)
boost::interprocess::segment_manager::priv_generic_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_construct(const CharType *name,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharType *name, size_type num, bool try2find, bool dothrow, ipcdetail::in_place_interface &table)
boost::interprocess::segment_manager::priv_generic_find	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_find$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT* name, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, size_type &length, ipcdetail::false_ is_intrusive, bool use_lock)
boost::interprocess::segment_manager::priv_generic_find	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_find$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT* name, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, size_type &length, ipcdetail::true_ is_intrusive, bool use_lock)
boost::interprocess::segment_manager::priv_generic_named_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * priv_generic_named_construct(unsigned char type,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(unsigned char type, const CharT *name, size_type num, bool try2find, bool dothrow, ipcdetail::in_place_interface &table, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::false_ is_intrusive)
boost::interprocess::segment_manager::priv_generic_named_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * priv_generic_named_construct(unsigned char type,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(unsigned char type, const CharT *name, size_type num, bool try2find, bool dothrow, ipcdetail::in_place_interface &table, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::true_ is_intrusive)
boost::interprocess::segment_manager::priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *block_header, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, ipcdetail::false_ is_node_index)
boost::interprocess::segment_manager::priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *block_header, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, ipcdetail::true_ is_node_index)
boost::interprocess::segment_manager::priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy(const CharT *name,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT *name, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, ipcdetail::false_ is_intrusive_index)
boost::interprocess::segment_manager::priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy(const CharT *name,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT *name, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, ipcdetail::true_ is_intrusive_index)
boost::interprocess::segment_manager::priv_generic_named_destroy_impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy_impl$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const typename IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> >::iterator &it, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table)
boost::interprocess::segment_manager::priv_get_instance_length	/usr/include/boost/interprocess/segment_manager.hpp	/^   static size_type priv_get_instance_length(block_header_t *ctrl_data, size_type sizeofvalue)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data, size_type sizeofvalue)
boost::interprocess::segment_manager::priv_get_instance_name	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const CharType *priv_get_instance_name(block_header_t *ctrl_data)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data)
boost::interprocess::segment_manager::priv_get_instance_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   static instance_type priv_get_instance_type(block_header_t *ctrl_data)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data)
boost::interprocess::segment_manager::priv_get_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   scoped_lock<rmutex> priv_get_lock(bool use_lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(bool use_lock)
boost::interprocess::segment_manager::priv_get_reserved_bytes	/usr/include/boost/interprocess/segment_manager.hpp	/^   static size_type priv_get_reserved_bytes()$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:()
boost::interprocess::segment_manager::reserve_named_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   void reserve_named_objects(size_type num)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(size_type num)
boost::interprocess::segment_manager::reserve_unique_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   void reserve_unique_objects(size_type num)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(size_type num)
boost::interprocess::segment_manager::rmutex	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::mutex_family::recursive_mutex_type   rmutex;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   explicit segment_manager(size_type segment_size)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(size_type segment_size)
boost::interprocess::segment_manager::segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager();$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:()
boost::interprocess::segment_manager::segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager(const segment_manager &);$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:(const segment_manager &)
boost::interprocess::segment_manager::segment_manager_base_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm>   segment_manager_base_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::shrink_to_fit_indexes	/usr/include/boost/interprocess/segment_manager.hpp	/^   void shrink_to_fit_indexes()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::size_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::size_type       size_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::try_atomic_func	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool try_atomic_func(Func &f)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(Func &f)
boost::interprocess::segment_manager::unique_begin	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_unique_iterator unique_begin() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
boost::interprocess::segment_manager::unique_end	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_unique_iterator unique_end() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
boost::interprocess::segment_manager::unique_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_unique>                   unique_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::unique_transform	/usr/include/boost/interprocess/segment_manager.hpp	/^      ,is_intrusive_index<index_type>::value>   unique_transform;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::void_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::void_pointer    void_pointer;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager_base	/usr/include/boost/interprocess/segment_manager.hpp	/^class segment_manager_base$/;"	c	namespace:boost::interprocess	inherits:MemoryAlgorithm
boost::interprocess::segment_manager_base::PayloadPerAllocation	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const size_type PayloadPerAllocation = MemoryAlgorithm::PayloadPerAllocation;$/;"	m	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::all_memory_deallocated	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool all_memory_deallocated()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
boost::interprocess::segment_manager_base::allocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate (size_type nbytes, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type nbytes, std::nothrow_t)
boost::interprocess::segment_manager_base::allocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate(size_type nbytes)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type nbytes)
boost::interprocess::segment_manager_base::allocate_aligned	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate_aligned (size_type nbytes, size_type alignment, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type nbytes, size_type alignment, std::nothrow_t)
boost::interprocess::segment_manager_base::allocate_aligned	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type nbytes, size_type alignment)
boost::interprocess::segment_manager_base::allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void allocate_many(const size_type *element_lengths, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(const size_type *element_lengths, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
boost::interprocess::segment_manager_base::allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void allocate_many(size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)
boost::interprocess::segment_manager_base::allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void allocate_many(std::nothrow_t, const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::nothrow_t, const size_type *elem_sizes, size_type n_elements, size_type sizeof_element, multiallocation_chain &chain)
boost::interprocess::segment_manager_base::allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void allocate_many(std::nothrow_t, size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::nothrow_t, size_type elem_bytes, size_type n_elements, multiallocation_chain &chain)
boost::interprocess::segment_manager_base::allocation_command	/usr/include/boost/interprocess/segment_manager.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, T *reuse_ptr = 0)
boost::interprocess::segment_manager_base::check_sanity	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool check_sanity()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
boost::interprocess::segment_manager_base::deallocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void   deallocate          (void *addr)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(void *addr)
boost::interprocess::segment_manager_base::deallocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void deallocate_many(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(multiallocation_chain &chain)
boost::interprocess::segment_manager_base::difference_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::difference_type  difference_type;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::get_free_memory	/usr/include/boost/interprocess/segment_manager.hpp	/^   size_type get_free_memory() const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:() const
boost::interprocess::segment_manager_base::get_min_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   static size_type get_min_size (size_type size)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type size)
boost::interprocess::segment_manager_base::get_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   size_type get_size() const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:() const
boost::interprocess::segment_manager_base::grow	/usr/include/boost/interprocess/segment_manager.hpp	/^   void grow(size_type extra_size)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type extra_size)
boost::interprocess::segment_manager_base::memory_algorithm	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef MemoryAlgorithm memory_algorithm;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::multiallocation_chain	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::multiallocation_chain    multiallocation_chain;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::mutex_family	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::mutex_family  mutex_family;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::prot_anonymous_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * prot_anonymous_construct$/;"	f	class:boost::interprocess::segment_manager_base	access:protected	signature:(size_type num, bool dothrow, ipcdetail::in_place_interface &table)
boost::interprocess::segment_manager_base::prot_anonymous_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   void prot_anonymous_destroy(const void *object, ipcdetail::in_place_interface &table)$/;"	f	class:boost::interprocess::segment_manager_base	access:protected	signature:(const void *object, ipcdetail::in_place_interface &table)
boost::interprocess::segment_manager_base::raw_allocation_command	/usr/include/boost/interprocess/segment_manager.hpp	/^      raw_allocation_command  (boost::interprocess::allocation_type command,   size_type limit_objects,$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_objects, size_type preferred_objects,size_type &received_objects, void *reuse_ptr = 0, size_type sizeof_object = 1)
boost::interprocess::segment_manager_base::segment_manager_base	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager_base(size_type sz, size_type reserved_bytes)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type sz, size_type reserved_bytes)
boost::interprocess::segment_manager_base::segment_manager_base_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm> segment_manager_base_type;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::shrink_to_fit	/usr/include/boost/interprocess/segment_manager.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
boost::interprocess::segment_manager_base::size	/usr/include/boost/interprocess/segment_manager.hpp	/^   size_type size(const void *ptr) const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(const void *ptr) const
boost::interprocess::segment_manager_base::size_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::size_type        size_type;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::void_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::void_pointer  void_pointer;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::zero_free_memory	/usr/include/boost/interprocess/segment_manager.hpp	/^   void zero_free_memory()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
boost::interprocess::sem_error	/usr/include/boost/interprocess/errors.hpp	/^   sem_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^class sharable_lock$/;"	c	namespace:boost::interprocess
boost::interprocess::sharable_lock::ipcdetail::enable_if::type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^               , typename ipcdetail::enable_if< ipcdetail::is_same<T, SharableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::sharable_lock::ipcdetail::enable_if	access:public
boost::interprocess::sharable_lock::ipcdetail::enable_if::type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      , typename ipcdetail::enable_if< ipcdetail::is_same<T, SharableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::sharable_lock::ipcdetail::enable_if	access:public
boost::interprocess::sharable_lock::lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::sharable_lock::m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(false)
boost::interprocess::sharable_lock::m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      : mp_mutex(0), m_locked(upgr.owns())$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(upgr.owns())
boost::interprocess::sharable_lock::m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::sharable_lock	access:private
boost::interprocess::sharable_lock::mp_mutex	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type *mp_mutex;$/;"	m	class:boost::interprocess::sharable_lock	access:private
boost::interprocess::sharable_lock::mutex	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
boost::interprocess::sharable_lock::mutex_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef SharableMutex mutex_type;$/;"	t	class:boost::interprocess::sharable_lock	access:public
boost::interprocess::sharable_lock::operator unspecified_bool_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
boost::interprocess::sharable_lock::owns	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
boost::interprocess::sharable_lock::release	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::sharable_lock::scop	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(BOOST_RV_REF(scoped_lock<T>) scop$/;"	m	class:boost::interprocess::sharable_lock	access:public
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   explicit sharable_lock(mutex_type& m)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m)
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   explicit sharable_lock(scoped_lock<mutex_type>&);$/;"	p	class:boost::interprocess::sharable_lock	access:private	signature:(scoped_lock<mutex_type>&)
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, defer_lock_type)
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
boost::interprocess::sharable_lock::swap	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void swap(sharable_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(sharable_lock<mutex_type> &other)
boost::interprocess::sharable_lock::this_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef sharable_lock<SharableMutex> this_type;$/;"	t	class:boost::interprocess::sharable_lock	access:private
boost::interprocess::sharable_lock::this_type::unspecified_bool_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::sharable_lock::this_type	access:private
boost::interprocess::sharable_lock::timed_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
boost::interprocess::sharable_lock::try_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::sharable_lock::unlock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::sharable_lock::upgr	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(BOOST_RV_REF(upgradable_lock<T>) upgr$/;"	m	class:boost::interprocess::sharable_lock	access:public
boost::interprocess::sharable_lock::~sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   ~sharable_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^class shared_memory_object$/;"	c	namespace:boost::interprocess
boost::interprocess::shared_memory_object::file_handle_t	/usr/include/boost/interprocess/shared_memory_object.hpp	/^      :  m_handle(file_handle_t(ipcdetail::invalid_file()))$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(ipcdetail::invalid_file(
boost::interprocess::shared_memory_object::get_mapping_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
boost::interprocess::shared_memory_object::get_mapping_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline mapping_handle_t shared_memory_object::get_mapping_handle() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
boost::interprocess::shared_memory_object::get_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
boost::interprocess::shared_memory_object::get_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline mode_t shared_memory_object::get_mode() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
boost::interprocess::shared_memory_object::get_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
boost::interprocess::shared_memory_object::get_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline const char *shared_memory_object::get_name() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
boost::interprocess::shared_memory_object::get_size	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   bool get_size(offset_t &size) const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(offset_t &size) const
boost::interprocess::shared_memory_object::get_size	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::get_size(offset_t &size) const$/;"	f	class:boost::interprocess::shared_memory_object	signature:(offset_t &size) const
boost::interprocess::shared_memory_object::m_filename	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   std::string    m_filename;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
boost::interprocess::shared_memory_object::m_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
boost::interprocess::shared_memory_object::m_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mode_t         m_mode;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
boost::interprocess::shared_memory_object::priv_close	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::shared_memory_object	access:private	signature:()
boost::interprocess::shared_memory_object::priv_close	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::priv_close()$/;"	f	class:boost::interprocess::shared_memory_object	signature:()
boost::interprocess::shared_memory_object::priv_open_or_create	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   bool priv_open_or_create(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm);$/;"	p	class:boost::interprocess::shared_memory_object	access:private	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm)
boost::interprocess::shared_memory_object::priv_open_or_create	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::priv_open_or_create$/;"	f	class:boost::interprocess::shared_memory_object	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm)
boost::interprocess::shared_memory_object::remove	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(const char *name)
boost::interprocess::shared_memory_object::remove	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::remove(const char *filename)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(const char *filename)
boost::interprocess::shared_memory_object::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object();$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:()
boost::interprocess::shared_memory_object::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(create_only_t, const char *name, mode_t mode, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(create_only_t, const char *name, mode_t mode, const permissions &perm = permissions())
boost::interprocess::shared_memory_object::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(open_only_t, const char *name, mode_t mode)
boost::interprocess::shared_memory_object::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(open_or_create_t, const char *name, mode_t mode, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(open_or_create_t, const char *name, mode_t mode, const permissions &perm = permissions())
boost::interprocess::shared_memory_object::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline shared_memory_object::shared_memory_object()$/;"	f	class:boost::interprocess::shared_memory_object	signature:()
boost::interprocess::shared_memory_object::swap	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void swap(shared_memory_object &moved);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(shared_memory_object &moved)
boost::interprocess::shared_memory_object::swap	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::swap(shared_memory_object &other)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(shared_memory_object &other)
boost::interprocess::shared_memory_object::truncate	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void truncate(offset_t length);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(offset_t length)
boost::interprocess::shared_memory_object::truncate	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::truncate(offset_t length)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(offset_t length)
boost::interprocess::shared_memory_object::~shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   ~shared_memory_object();$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:()
boost::interprocess::shared_memory_object::~shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline shared_memory_object::~shared_memory_object()$/;"	f	class:boost::interprocess::shared_memory_object	signature:()
boost::interprocess::shared_memory_object_detail	/usr/include/boost/interprocess/shared_memory_object.hpp	/^namespace shared_memory_object_detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::shared_memory_object_detail::use_filesystem_based_posix	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool use_filesystem_based_posix()$/;"	f	namespace:boost::interprocess::shared_memory_object_detail	signature:()
boost::interprocess::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^class shared_ptr$/;"	c	namespace:boost::interprocess
boost::interprocess::shared_ptr::_internal_less	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool _internal_less(shared_ptr<T2, A2, Deleter2> const & rhs) const$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<T2, A2, Deleter2> const & rhs) const
boost::interprocess::shared_ptr::const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^         rebind_pointer<const VoidAllocator>::type                         const_allocator_pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^         rebind_pointer<const Deleter>::type                               const_deleter_pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::const_reference	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^                     <const value_type>::type                  const_reference;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::element_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef T                                                   element_type;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::get	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   pointer get() const  \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::get_deleter	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::m_pn	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^      :  m_pn()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
boost::interprocess::shared_ptr::m_pn	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   ipcdetail::shared_count<T, VoidAllocator, Deleter>   m_pn;    \/\/ reference counter$/;"	m	class:boost::interprocess::shared_ptr	access:private
boost::interprocess::shared_ptr::operator !	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool operator! () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::operator *	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   reference operator* () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::operator ->	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   pointer operator-> () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr & operator=(shared_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::shared_ptr::operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   operator unspecified_bool_type() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^         rebind_pointer<T>::type                               pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::reference	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^                     <value_type>::type                        reference;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
boost::interprocess::shared_ptr::reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset(const Pointer &p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const Pointer &p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())
boost::interprocess::shared_ptr::reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset(shared_ptr<Y, VoidAllocator, Deleter> const & r, const pointer &p)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, const pointer &p)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   explicit shared_ptr(const pointer&p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const pointer&p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   explicit shared_ptr(weak_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(weak_ptr<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(const shared_ptr &other, const pointer &p)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const shared_ptr &other, const pointer &p)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(const shared_ptr &r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const shared_ptr &r)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::const_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::const_cast_tag)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::dynamic_cast_tag)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::static_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::static_cast_tag)
boost::interprocess::shared_ptr::swap	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void swap(shared_ptr<T, VoidAllocator, Deleter> & other) \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<T, VoidAllocator, Deleter> & other)
boost::interprocess::shared_ptr::this_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef shared_ptr<T, VoidAllocator, Deleter> this_type;$/;"	t	class:boost::interprocess::shared_ptr	access:private
boost::interprocess::shared_ptr::unique	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool unique() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::unspecified_bool_type_func	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::use_count	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   long use_count() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::value_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef T                                                   value_type;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shrink_in_place	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type shrink_in_place    = boost::container::shrink_in_place;$/;"	m	namespace:boost::interprocess
boost::interprocess::simple_seq_fit	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^class simple_seq_fit$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::simple_seq_fit_impl
boost::interprocess::simple_seq_fit::base_t	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^   typedef ipcdetail::simple_seq_fit_impl<MutexFamily, VoidPointer> base_t;$/;"	t	class:boost::interprocess::simple_seq_fit	access:private
boost::interprocess::simple_seq_fit::simple_seq_fit	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^   simple_seq_fit(size_type segment_size, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::simple_seq_fit	access:public	signature:(size_type segment_size, size_type extra_hdr_bytes)
boost::interprocess::simple_seq_fit::size_type	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^   typedef typename base_t::size_type                            size_type;$/;"	t	class:boost::interprocess::simple_seq_fit	access:public
boost::interprocess::size_error	/usr/include/boost/interprocess/errors.hpp	/^   size_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value$/;"	s	namespace:boost::interprocess
boost::interprocess::sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<const void>$/;"	s	namespace:boost::interprocess
boost::interprocess::sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<const volatile void>$/;"	s	namespace:boost::interprocess
boost::interprocess::sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<void>$/;"	s	namespace:boost::interprocess
boost::interprocess::sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<volatile void>$/;"	s	namespace:boost::interprocess
boost::interprocess::sizeof_value::value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   static const std::size_t value = sizeof(T);$/;"	m	struct:boost::interprocess::sizeof_value	access:public
boost::interprocess::sizeof_value::value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   static const std::size_t value = sizeof(void*);$/;"	m	struct:boost::interprocess::sizeof_value	access:public
boost::interprocess::static_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> static_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
boost::interprocess::static_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static_pointer_cast(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)
boost::interprocess::static_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> static_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
boost::interprocess::swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^void swap (boost::interprocess::intersegment_ptr<T> &pt,$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::intersegment_ptr<T> &pt, boost::interprocess::intersegment_ptr<T> &pt2)
boost::interprocess::swap	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void swap(mapped_region &x, mapped_region &y)$/;"	f	namespace:boost::interprocess	signature:(mapped_region &x, mapped_region &y)
boost::interprocess::swap	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^void swap(intrusive_ptr<T, VP> & lhs,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> & lhs, intrusive_ptr<T, VP> & rhs)
boost::interprocess::swap	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^void swap(scoped_ptr<T, D> & a, scoped_ptr<T, D> & b)$/;"	f	namespace:boost::interprocess	signature:(scoped_ptr<T, D> & a, scoped_ptr<T, D> & b)
boost::interprocess::swap	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^void swap(shared_ptr<T, VoidAllocator, Deleter> & a, shared_ptr<T, VoidAllocator, Deleter> & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> & a, shared_ptr<T, VoidAllocator, Deleter> & b)
boost::interprocess::swap	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y)$/;"	f	namespace:boost::interprocess	signature:(unique_ptr<T, D>& x, unique_ptr<T, D>& y)
boost::interprocess::swap	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^void swap(weak_ptr<T, A, D> & a, weak_ptr<T, A, D> & b)$/;"	f	namespace:boost::interprocess	signature:(weak_ptr<T, A, D> & a, weak_ptr<T, A, D> & b)
boost::interprocess::system_error	/usr/include/boost/interprocess/errors.hpp	/^   system_error,     \/\/ system generated error; if possible, is translated$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::system_error_code	/usr/include/boost/interprocess/errors.hpp	/^inline int system_error_code() \/\/ artifact of POSIX and WINDOWS error reporting$/;"	f	namespace:boost::interprocess	signature:()
boost::interprocess::timeout_when_locking_error	/usr/include/boost/interprocess/errors.hpp	/^   timeout_when_locking_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::timeout_when_waiting_error	/usr/include/boost/interprocess/errors.hpp	/^   timeout_when_waiting_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::to_raw_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^T * to_raw_pointer(boost::interprocess::intersegment_ptr<T> const & p)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::intersegment_ptr<T> const & p)
boost::interprocess::to_raw_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline T * to_raw_pointer(boost::interprocess::offset_ptr<T, P, O, A> const & p)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<T, P, O, A> const & p)
boost::interprocess::to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   to_raw_pointer(intrusive_ptr<T, VP> p)$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> p)
boost::interprocess::to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^typename scoped_ptr<T, D>::pointer to_raw_pointer(scoped_ptr<T, D> const & p)$/;"	f	namespace:boost::interprocess	signature:(scoped_ptr<T, D> const & p)
boost::interprocess::to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^T * to_raw_pointer(shared_ptr<T, VoidAllocator, Deleter> const & p)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & p)
boost::interprocess::transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^class transform_iterator$/;"	c	namespace:boost::interprocess	inherits:UnaryFunction,std::iterator
boost::interprocess::transform_iterator::advance	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void advance(typename Iterator::difference_type n)$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(typename Iterator::difference_type n)
boost::interprocess::transform_iterator::base	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   Iterator & base()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
boost::interprocess::transform_iterator::base	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   const Iterator & base() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
boost::interprocess::transform_iterator::decrement	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void decrement()$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:()
boost::interprocess::transform_iterator::dereference	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type dereference() const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:() const
boost::interprocess::transform_iterator::distance_to	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename Iterator::difference_type distance_to(const transform_iterator &other)const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
boost::interprocess::transform_iterator::equal	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   bool equal(const transform_iterator &other) const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
boost::interprocess::transform_iterator::increment	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void increment()$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:()
boost::interprocess::transform_iterator::less	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   bool less(const transform_iterator &other) const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
boost::interprocess::transform_iterator::m_it	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   Iterator m_it;$/;"	m	class:boost::interprocess::transform_iterator	access:private
boost::interprocess::transform_iterator::operator !=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator!= (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::interprocess::transform_iterator::operator *	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type operator*() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
boost::interprocess::transform_iterator::operator +	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend transform_iterator operator+(typename Iterator::difference_type off, const transform_iterator& right)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(typename Iterator::difference_type off, const transform_iterator& right)
boost::interprocess::transform_iterator::operator +	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator+(typename Iterator::difference_type off) const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
boost::interprocess::transform_iterator::operator ++	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator++(int)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(int)
boost::interprocess::transform_iterator::operator ++	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator++()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
boost::interprocess::transform_iterator::operator +=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator+=(typename Iterator::difference_type off)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
boost::interprocess::transform_iterator::operator -	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend typename Iterator::difference_type operator- (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::interprocess::transform_iterator::operator -	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator-(typename Iterator::difference_type off) const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
boost::interprocess::transform_iterator::operator --	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator--(int)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(int)
boost::interprocess::transform_iterator::operator --	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator--()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
boost::interprocess::transform_iterator::operator -=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator-=(typename Iterator::difference_type off)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
boost::interprocess::transform_iterator::operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^      operator->() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
boost::interprocess::transform_iterator::operator <	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator< (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::interprocess::transform_iterator::operator <=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator<= (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::interprocess::transform_iterator::operator ==	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator== (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::interprocess::transform_iterator::operator >	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator> (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::interprocess::transform_iterator::operator >=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator>= (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::interprocess::transform_iterator::operator []	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type operator[](typename Iterator::difference_type off) const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
boost::interprocess::transform_iterator::transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   explicit transform_iterator()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
boost::interprocess::transform_iterator::transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   explicit transform_iterator(const Iterator &it, const UnaryFunction &f = UnaryFunction())$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(const Iterator &it, const UnaryFunction &f = UnaryFunction())
boost::interprocess::try_shrink_in_place	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type try_shrink_in_place= boost::container::try_shrink_in_place;$/;"	m	namespace:boost::interprocess
boost::interprocess::try_to_lock	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const try_to_lock_type     try_to_lock    = try_to_lock_type();$/;"	m	namespace:boost::interprocess
boost::interprocess::try_to_lock_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct try_to_lock_type {};$/;"	s	namespace:boost::interprocess
boost::interprocess::unique_instance	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^static const ipcdetail::unique_instance_t      * unique_instance = 0;$/;"	m	namespace:boost::interprocess
boost::interprocess::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^class unique_ptr$/;"	c	namespace:boost::interprocess
boost::interprocess::unique_ptr::deleter_const_reference	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename ipcdetail::add_reference<const D>::type deleter_const_reference;$/;"	t	class:boost::interprocess::unique_ptr	access:private
boost::interprocess::unique_ptr::deleter_reference	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename ipcdetail::add_reference<D>::type deleter_reference;$/;"	t	class:boost::interprocess::unique_ptr	access:private
boost::interprocess::unique_ptr::deleter_type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef D deleter_type;$/;"	t	class:boost::interprocess::unique_ptr	access:public
boost::interprocess::unique_ptr::element_type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::unique_ptr	access:public
boost::interprocess::unique_ptr::ipcdetail::enable_if_c::type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^            >::type = nat())$/;"	m	class:boost::interprocess::unique_ptr::ipcdetail::enable_if_c	access:public
boost::interprocess::unique_ptr::nat	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   struct nat {int for_bool_;};$/;"	s	class:boost::interprocess::unique_ptr	access:private
boost::interprocess::unique_ptr::nat::for_bool_	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   struct nat {int for_bool_;};$/;"	m	struct:boost::interprocess::unique_ptr::nat	access:public
boost::interprocess::unique_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(unique_ptr<U, E>&)
boost::interprocess::unique_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U> typename ipcdetail::unique_ptr_error<U>::type operator=(U&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(U&)
boost::interprocess::unique_ptr::pointer	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename ipcdetail::pointer_type<T, D>::type pointer;$/;"	t	class:boost::interprocess::unique_ptr	access:public
boost::interprocess::unique_ptr::ptr_	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^      : ptr_(u.release(), boost::forward<D>(u.get_deleter()))$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(u.release(), boost::forward<D>(u.get_deleter()))
boost::interprocess::unique_ptr::u	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr(BOOST_RV_REF_2_TEMPL_ARGS(unique_ptr, U, E) u,$/;"	m	class:boost::interprocess::unique_ptr	access:public
boost::interprocess::unique_ptr::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   explicit unique_ptr(pointer p)$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(pointer p)
boost::interprocess::unique_ptr::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U, class E> unique_ptr(unique_ptr<U, E>&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(unique_ptr<U, E>&)
boost::interprocess::unique_ptr::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U> unique_ptr(U&, typename ipcdetail::unique_ptr_error<U>::type = 0);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(U&, typename ipcdetail::unique_ptr_error<U>::type = 0)
boost::interprocess::unique_ptr::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr()$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:()
boost::interprocess::unique_ptr::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr(pointer p$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(pointer p ,typename ipcdetail::if_<ipcdetail::is_reference<D> ,D ,typename ipcdetail::add_reference<const D>::type>::type d)
boost::interprocess::unique_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
boost::interprocess::unordered_map_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^class unordered_map_index$/;"	c	namespace:boost::interprocess	inherits:unordered_map_index_aux::index_t
boost::interprocess::unordered_map_index::base_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename index_aux::index_t          base_type;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
boost::interprocess::unordered_map_index::index_aux	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef unordered_map_index_aux<MapConfig>   index_aux;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
boost::interprocess::unordered_map_index::reserve	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   void reserve(typename segment_manager_base::size_type n)$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:(typename segment_manager_base::size_type n)
boost::interprocess::unordered_map_index::segment_manager_base	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^      MapConfig::segment_manager_base     segment_manager_base;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
boost::interprocess::unordered_map_index::shrink_to_fit	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:()
boost::interprocess::unordered_map_index::unordered_map_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   unordered_map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:(segment_manager_base *segment_mngr)
boost::interprocess::unordered_map_index_aux	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^struct unordered_map_index_aux$/;"	s	namespace:boost::interprocess
boost::interprocess::unordered_map_index_aux::allocator_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^                  segment_manager_base>      allocator_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::unordered_map_index_aux::hasher	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^    struct hasher$/;"	s	struct:boost::interprocess::unordered_map_index_aux	inherits:std::unary_function	access:public
boost::interprocess::unordered_map_index_aux::hasher::operator ()	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^        std::size_t operator()(const key_type &val) const$/;"	f	struct:boost::interprocess::unordered_map_index_aux::hasher	access:public	signature:(const key_type &val) const
boost::interprocess::unordered_map_index_aux::index_t	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^                         key_equal, allocator_type>      index_t;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::unordered_map_index_aux::key_equal	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef std::equal_to<key_type>                 key_equal;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::unordered_map_index_aux::key_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::unordered_map_index_aux::mapped_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::unordered_map_index_aux::value_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef std::pair<const key_type, mapped_type>  value_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^class upgradable_lock$/;"	c	namespace:boost::interprocess
boost::interprocess::upgradable_lock::ipcdetail::enable_if::type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^                  , typename ipcdetail::enable_if< ipcdetail::is_same<T, UpgradableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::upgradable_lock::ipcdetail::enable_if	access:public
boost::interprocess::upgradable_lock::lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::upgradable_lock::m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(false)
boost::interprocess::upgradable_lock::m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^      : mp_mutex(0), m_locked(upgr.owns())$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(upgr.owns())
boost::interprocess::upgradable_lock::m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::upgradable_lock	access:private
boost::interprocess::upgradable_lock::mp_mutex	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type *mp_mutex;$/;"	m	class:boost::interprocess::upgradable_lock	access:private
boost::interprocess::upgradable_lock::mutex	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
boost::interprocess::upgradable_lock::mutex_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef UpgradableMutex mutex_type;$/;"	t	class:boost::interprocess::upgradable_lock	access:public
boost::interprocess::upgradable_lock::operator unspecified_bool_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
boost::interprocess::upgradable_lock::owns	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
boost::interprocess::upgradable_lock::release	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::upgradable_lock::scop	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(BOOST_RV_REF(scoped_lock<T>) scop$/;"	m	class:boost::interprocess::upgradable_lock	access:public
boost::interprocess::upgradable_lock::shar	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock( BOOST_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::upgradable_lock	access:public
boost::interprocess::upgradable_lock::swap	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void swap(upgradable_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(upgradable_lock<mutex_type> &other)
boost::interprocess::upgradable_lock::this_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef upgradable_lock<UpgradableMutex> this_type;$/;"	t	class:boost::interprocess::upgradable_lock	access:private
boost::interprocess::upgradable_lock::this_type::unspecified_bool_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::upgradable_lock::this_type	access:private
boost::interprocess::upgradable_lock::timed_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
boost::interprocess::upgradable_lock::try_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::upgradable_lock::try_to_lock_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock( BOOST_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::upgradable_lock	access:public
boost::interprocess::upgradable_lock::unlock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   explicit upgradable_lock(mutex_type& m)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m)
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   explicit upgradable_lock(scoped_lock<mutex_type>&);$/;"	p	class:boost::interprocess::upgradable_lock	access:private	signature:(scoped_lock<mutex_type>&)
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, defer_lock_type)
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
boost::interprocess::upgradable_lock::~upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   ~upgradable_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::wbufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferbuf<wchar_t>     wbufferbuf;$/;"	t	namespace:boost::interprocess
boost::interprocess::wbufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferstream<wchar_t>  wbufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^class weak_ptr$/;"	c	namespace:boost::interprocess
boost::interprocess::weak_ptr::_internal_assign	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void _internal_assign(const ipcdetail::shared_count<Y, A, D> & pn2)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(const ipcdetail::shared_count<Y, A, D> & pn2)
boost::interprocess::weak_ptr::_internal_less	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   bool _internal_less(weak_ptr<T2, A2, D2> const & rhs) const$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<T2, A2, D2> const & rhs) const
boost::interprocess::weak_ptr::const_reference	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^                     <T>::type            const_reference;$/;"	t	class:boost::interprocess::weak_ptr	access:private
boost::interprocess::weak_ptr::element_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::weak_ptr	access:public
boost::interprocess::weak_ptr::expired	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   bool expired() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
boost::interprocess::weak_ptr::lock	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   shared_ptr<T, A, D> lock() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
boost::interprocess::weak_ptr::m_pn	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   ipcdetail::weak_count<T, A, D> m_pn;      \/\/ reference counter$/;"	m	class:boost::interprocess::weak_ptr	access:private
boost::interprocess::weak_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr & operator=(shared_ptr<Y, A, D> const & r) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(shared_ptr<Y, A, D> const & r)
boost::interprocess::weak_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr & operator=(weak_ptr<Y, A, D> const & r) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<Y, A, D> const & r)
boost::interprocess::weak_ptr::pointer	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::weak_ptr	access:private
boost::interprocess::weak_ptr::reference	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^                     <T>::type            reference;$/;"	t	class:boost::interprocess::weak_ptr	access:private
boost::interprocess::weak_ptr::reset	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void reset() \/\/ never throws in 1.30+$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:()
boost::interprocess::weak_ptr::swap	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void swap(this_type & other) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(this_type & other)
boost::interprocess::weak_ptr::this_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef weak_ptr<T, A, D> this_type;$/;"	t	class:boost::interprocess::weak_ptr	access:private
boost::interprocess::weak_ptr::use_count	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   long use_count() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
boost::interprocess::weak_ptr::value_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef T value_type;$/;"	t	class:boost::interprocess::weak_ptr	access:public
boost::interprocess::weak_ptr::weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr()$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:()
boost::interprocess::weak_ptr::weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr(shared_ptr<Y, A, D> const & r)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(shared_ptr<Y, A, D> const & r)
boost::interprocess::weak_ptr::weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr(weak_ptr<Y, A, D> const & r)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<Y, A, D> const & r)
boost::interprocess::wfixed_managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wfixed_managed_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::wibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_ibufferstream<wchar_t> wibufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::winapi	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace winapi {$/;"	n	namespace:boost::interprocess
boost::interprocess::winapi::BootAndSystemstampLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long BootAndSystemstampLength   = 16;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::BootstampLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long BootstampLength            = 8;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::CLSCTX_INPROC_SERVER_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long CLSCTX_INPROC_SERVER_BIPC   = 0x1;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::CLSCTX_LOCAL_SERVER_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long CLSCTX_LOCAL_SERVER_BIPC   = 0x4;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::CLSID_WbemAdministrativeLocator	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const GUID_BIPC CLSID_WbemAdministrativeLocator =$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::COINIT_APARTMENTTHREADED_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long COINIT_APARTMENTTHREADED_BIPC   = 0x2;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::COINIT_DISABLE_OLE1DDE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long COINIT_DISABLE_OLE1DDE_BIPC     = 0x4;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::COINIT_MULTITHREADED_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long COINIT_MULTITHREADED_BIPC       = 0x0;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::COINIT_SPEED_OVER_MEMORY_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long COINIT_SPEED_OVER_MEMORY_BIPC   = 0x4;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::CloseHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CloseHandle(void*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void*)
boost::interprocess::winapi::CoCreateInstance	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall CoCreateInstance(const GUID_BIPC & rclsid, IUnknown_BIPC *pUnkOuter,$/;"	p	namespace:boost::interprocess::winapi	signature:(const GUID_BIPC & rclsid, IUnknown_BIPC *pUnkOuter, unsigned long dwClsContext, const GUID_BIPC & riid, void** ppv)
boost::interprocess::winapi::CoInitializeEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall CoInitializeEx(void *pvReserved, unsigned long dwCoInit);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *pvReserved, unsigned long dwCoInit)
boost::interprocess::winapi::CoInitializeSecurity	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall CoInitializeSecurity($/;"	p	namespace:boost::interprocess::winapi	signature:( void* pSecDesc, long cAuthSvc, void * asAuthSvc, void *pReserved1, unsigned long dwAuthnLevel, unsigned long dwImpLevel, void *pAuthList, unsigned long dwCapabilities, void *pReserved3 )
boost::interprocess::winapi::CoSetProxyBlanket	/usr/include/boost/interprocess/detail/win32_api.hpp	/^ extern "C" __declspec(dllimport) long __stdcall CoSetProxyBlanket($/;"	p	namespace:boost::interprocess::winapi	signature:( IUnknown_BIPC *pProxy, unsigned long dwAuthnSvc, unsigned long dwAuthzSvc, wchar_t *pServerPrincName, unsigned long dwAuthnLevel, unsigned long dwImpLevel, void *pAuthInfo, unsigned long dwCapabilities)
boost::interprocess::winapi::CoUninitialize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall CoUninitialize(void);$/;"	p	namespace:boost::interprocess::winapi	signature:(void)
boost::interprocess::winapi::CreateDirectory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CreateDirectory(const char *, interprocess_security_attributes*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, interprocess_security_attributes*)
boost::interprocess::winapi::CreateDirectoryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CreateDirectoryA(const char *, interprocess_security_attributes*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, interprocess_security_attributes*)
boost::interprocess::winapi::CreateFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateFileA (const char *, unsigned long, unsigned long, struct interprocess_security_attributes*, unsigned long, unsigned long, void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, unsigned long, unsigned long, struct interprocess_security_attributes*, unsigned long, unsigned long, void *)
boost::interprocess::winapi::CreateFileMappingA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateFileMappingA (void *, interprocess_security_attributes*, unsigned long, unsigned long, unsigned long, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, interprocess_security_attributes*, unsigned long, unsigned long, unsigned long, const char *)
boost::interprocess::winapi::CreateMutexA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateMutexA(interprocess_security_attributes*, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_attributes*, int, const char *)
boost::interprocess::winapi::CreateSemaphoreA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateSemaphoreA(interprocess_security_attributes*, long, long, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_attributes*, long, long, const char *)
boost::interprocess::winapi::DeleteFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall    DeleteFileA (const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *)
boost::interprocess::winapi::DuplicateHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall DuplicateHandle$/;"	p	namespace:boost::interprocess::winapi	signature:( void *hSourceProcessHandle, void *hSourceHandle , void *hTargetProcessHandle, void **lpTargetHandle , unsigned long dwDesiredAccess, int bInheritHandle , unsigned long dwOptions)
boost::interprocess::winapi::EOAC_NONE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long EOAC_NONE_BIPC = 0;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::FindClose	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FindClose(void *hFindFile);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hFindFile)
boost::interprocess::winapi::FindFirstFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall FindFirstFileA(const char *lpFileName, win32_find_data_t *lpFindFileData);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *lpFileName, win32_find_data_t *lpFindFileData)
boost::interprocess::winapi::FindNextFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FindNextFileA(void *hFindFile, win32_find_data_t *lpFindFileData);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hFindFile, win32_find_data_t *lpFindFileData)
boost::interprocess::winapi::FlushFileBuffers	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall FlushFileBuffers (void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::FlushViewOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall FlushViewOfFile (void *, std::size_t);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, std::size_t)
boost::interprocess::winapi::FormatMessageA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall FormatMessageA$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long dwFlags, const void *lpSource, unsigned long dwMessageId, unsigned long dwLanguageId, char *lpBuffer, unsigned long nSize, std::va_list *Arguments)
boost::interprocess::winapi::FreeLibrary	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FreeLibrary(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::GUID_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct GUID_BIPC$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::GUID_BIPC::Data1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  Data1;$/;"	m	struct:boost::interprocess::winapi::GUID_BIPC	access:public
boost::interprocess::winapi::GUID_BIPC::Data2	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Data2;$/;"	m	struct:boost::interprocess::winapi::GUID_BIPC	access:public
boost::interprocess::winapi::GUID_BIPC::Data3	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Data3;$/;"	m	struct:boost::interprocess::winapi::GUID_BIPC	access:public
boost::interprocess::winapi::GUID_BIPC::Data4	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char  Data4[8];$/;"	m	struct:boost::interprocess::winapi::GUID_BIPC	access:public
boost::interprocess::winapi::GetCurrentProcess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall GetCurrentProcess();$/;"	p	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::GetCurrentProcessId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetCurrentProcessId();$/;"	p	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::GetCurrentThreadId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetCurrentThreadId();$/;"	p	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::GetFileAttributesA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetFileAttributesA(const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *)
boost::interprocess::winapi::GetFileInformationByHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall GetFileInformationByHandle(void *, interprocess_by_handle_file_information*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, interprocess_by_handle_file_information*)
boost::interprocess::winapi::GetFileSizeEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall GetFileSizeEx (void *, __int64 *size);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 *size)
boost::interprocess::winapi::GetFileType	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall GetFileType(void *hFile);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hFile)
boost::interprocess::winapi::GetLastError	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetLastError();$/;"	p	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::GetMappedFileNameW	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetMappedFileNameW(void *, void *, wchar_t *, unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, void *, wchar_t *, unsigned long)
boost::interprocess::winapi::GetMappedFileName_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef unsigned long (__stdcall * GetMappedFileName_t)(void *, void *, wchar_t *, unsigned long);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::GetModuleHandleA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall GetModuleHandleA(const char*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char*)
boost::interprocess::winapi::GetProcAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall GetProcAddress(void *, const char*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, const char*)
boost::interprocess::winapi::GetProcessTimes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall GetProcessTimes$/;"	p	namespace:boost::interprocess::winapi	signature:( void *hProcess, interprocess_filetime* lpCreationTime , interprocess_filetime *lpExitTime,interprocess_filetime *lpKernelTime , interprocess_filetime *lpUserTime )
boost::interprocess::winapi::GetSystemInfo	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall GetSystemInfo (struct system_info *);$/;"	p	namespace:boost::interprocess::winapi	signature:(struct system_info *)
boost::interprocess::winapi::GetTempPathA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall GetTempPathA(unsigned long length, char *buffer);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long length, char *buffer)
boost::interprocess::winapi::IEnumWbemClassObject_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IEnumWbemClassObject_BIPC : public IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi	inherits:IUnknown_BIPC
boost::interprocess::winapi::IEnumWbemClassObject_BIPC::Clone	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Clone($/;"	p	struct:boost::interprocess::winapi::IEnumWbemClassObject_BIPC	access:public	signature:( void **ppEnum)
boost::interprocess::winapi::IEnumWbemClassObject_BIPC::Next	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Next($/;"	p	struct:boost::interprocess::winapi::IEnumWbemClassObject_BIPC	access:public	signature:( long lTimeout, unsigned long uCount, IWbemClassObject_BIPC **apObjects, unsigned long *puReturned)
boost::interprocess::winapi::IEnumWbemClassObject_BIPC::NextAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall NextAsync($/;"	p	struct:boost::interprocess::winapi::IEnumWbemClassObject_BIPC	access:public	signature:( unsigned long uCount, void *pSink)
boost::interprocess::winapi::IEnumWbemClassObject_BIPC::Reset	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Reset( void) = 0;$/;"	p	struct:boost::interprocess::winapi::IEnumWbemClassObject_BIPC	access:public	signature:( void)
boost::interprocess::winapi::IEnumWbemClassObject_BIPC::Skip	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Skip($/;"	p	struct:boost::interprocess::winapi::IEnumWbemClassObject_BIPC	access:public	signature:( long lTimeout, unsigned long nCount)
boost::interprocess::winapi::IID_IUnknown	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const GUID_BIPC IID_IUnknown = { 0x00000000, 0x0000, 0x0000, {0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46}};$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::IUnknown_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::IUnknown_BIPC::AddRef	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual unsigned long __stdcall AddRef (void) = 0;$/;"	p	struct:boost::interprocess::winapi::IUnknown_BIPC	access:public	signature:(void)
boost::interprocess::winapi::IUnknown_BIPC::QueryInterface	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall QueryInterface($/;"	p	struct:boost::interprocess::winapi::IUnknown_BIPC	access:public	signature:( const GUID_BIPC &riid, void **ppvObject)
boost::interprocess::winapi::IUnknown_BIPC::Release	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual unsigned long __stdcall Release(void) = 0;$/;"	p	struct:boost::interprocess::winapi::IUnknown_BIPC	access:public	signature:(void)
boost::interprocess::winapi::IWbemClassObject_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IWbemClassObject_BIPC : public IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi	inherits:IUnknown_BIPC
boost::interprocess::winapi::IWbemClassObject_BIPC::BeginEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall BeginEnumeration($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lEnumFlags)
boost::interprocess::winapi::IWbemClassObject_BIPC::BeginMethodEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall BeginMethodEnumeration($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lEnumFlags)
boost::interprocess::winapi::IWbemClassObject_BIPC::Clone	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Clone($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( IWbemClassObject_BIPC **ppCopy)
boost::interprocess::winapi::IWbemClassObject_BIPC::CompareTo	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CompareTo($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, IWbemClassObject_BIPC *pCompareTo)
boost::interprocess::winapi::IWbemClassObject_BIPC::Delete	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Delete($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName)
boost::interprocess::winapi::IWbemClassObject_BIPC::DeleteMethod	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteMethod($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName)
boost::interprocess::winapi::IWbemClassObject_BIPC::EndEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall EndEnumeration( void) = 0;$/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( void)
boost::interprocess::winapi::IWbemClassObject_BIPC::EndMethodEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall EndMethodEnumeration( void) = 0;$/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( void)
boost::interprocess::winapi::IWbemClassObject_BIPC::Get	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Get($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, wchar_variant *pVal, long *pType, long *plFlavor)
boost::interprocess::winapi::IWbemClassObject_BIPC::GetMethod	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetMethod($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, IWbemClassObject_BIPC **ppInSignature, IWbemClassObject_BIPC **ppOutSignature)
boost::interprocess::winapi::IWbemClassObject_BIPC::GetMethodOrigin	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetMethodOrigin($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszMethodName, wchar_t * *pstrClassName)
boost::interprocess::winapi::IWbemClassObject_BIPC::GetMethodQualifierSet	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetMethodQualifierSet($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszMethod, void **ppQualSet)
boost::interprocess::winapi::IWbemClassObject_BIPC::GetNames	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetNames($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszQualifierName, long lFlags, wchar_variant *pQualifierVal, void * *pNames)
boost::interprocess::winapi::IWbemClassObject_BIPC::GetObjectText	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetObjectText($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, wchar_t * *pstrObjectText)
boost::interprocess::winapi::IWbemClassObject_BIPC::GetPropertyOrigin	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetPropertyOrigin($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName, wchar_t * *pstrClassName)
boost::interprocess::winapi::IWbemClassObject_BIPC::GetPropertyQualifierSet	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetPropertyQualifierSet($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszProperty, void **ppQualSet)
boost::interprocess::winapi::IWbemClassObject_BIPC::GetQualifierSet	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetQualifierSet($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( void **ppQualSet)
boost::interprocess::winapi::IWbemClassObject_BIPC::InheritsFrom	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall InheritsFrom($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * strAncestor)
boost::interprocess::winapi::IWbemClassObject_BIPC::Next	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Next($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, wchar_t * *strName, wchar_variant *pVal, long *pType, long *plFlavor)
boost::interprocess::winapi::IWbemClassObject_BIPC::NextMethod	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall NextMethod($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, wchar_t * *pstrName, IWbemClassObject_BIPC **ppInSignature, IWbemClassObject_BIPC **ppOutSignature)
boost::interprocess::winapi::IWbemClassObject_BIPC::Put	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Put($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, wchar_variant *pVal, long Type)
boost::interprocess::winapi::IWbemClassObject_BIPC::PutMethod	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall PutMethod($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, IWbemClassObject_BIPC *pInSignature, IWbemClassObject_BIPC *pOutSignature)
boost::interprocess::winapi::IWbemClassObject_BIPC::SpawnDerivedClass	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall SpawnDerivedClass($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, IWbemClassObject_BIPC **ppNewClass)
boost::interprocess::winapi::IWbemClassObject_BIPC::SpawnInstance	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall SpawnInstance($/;"	p	struct:boost::interprocess::winapi::IWbemClassObject_BIPC	access:public	signature:( long lFlags, IWbemClassObject_BIPC **ppNewInstance)
boost::interprocess::winapi::IWbemContext_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IWbemContext_BIPC : public IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi	inherits:IUnknown_BIPC
boost::interprocess::winapi::IWbemContext_BIPC::BeginEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall BeginEnumeration($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( long lFlags)
boost::interprocess::winapi::IWbemContext_BIPC::Clone	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Clone($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( IWbemContext_BIPC **ppNewCopy)
boost::interprocess::winapi::IWbemContext_BIPC::DeleteAll	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteAll( void) = 0;$/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( void)
boost::interprocess::winapi::IWbemContext_BIPC::DeleteValue	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteValue($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags)
boost::interprocess::winapi::IWbemContext_BIPC::EndEnumeration	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall EndEnumeration( void) = 0;$/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( void)
boost::interprocess::winapi::IWbemContext_BIPC::GetNames	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetNames($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( long lFlags, void * *pNames)
boost::interprocess::winapi::IWbemContext_BIPC::GetValue	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetValue($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, wchar_variant *pValue)
boost::interprocess::winapi::IWbemContext_BIPC::Next	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall Next($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( long lFlags, wchar_t * *pstrName, wchar_variant *pValue)
boost::interprocess::winapi::IWbemContext_BIPC::SetValue	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall SetValue($/;"	p	struct:boost::interprocess::winapi::IWbemContext_BIPC	access:public	signature:( const wchar_t * wszName, long lFlags, wchar_variant *pValue)
boost::interprocess::winapi::IWbemLocator_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IWbemLocator_BIPC : public IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi	inherits:IUnknown_BIPC
boost::interprocess::winapi::IWbemLocator_BIPC::ConnectServer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ConnectServer($/;"	p	struct:boost::interprocess::winapi::IWbemLocator_BIPC	access:public	signature:( const wchar_t * strNetworkResource, const wchar_t * strUser, const wchar_t * strPassword, const wchar_t * strLocale, long lSecurityFlags, const wchar_t * strAuthority, void *pCtx, IWbemServices_BIPC **ppNamespace)
boost::interprocess::winapi::IWbemServices_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct IWbemServices_BIPC : public IUnknown_BIPC$/;"	s	namespace:boost::interprocess::winapi	inherits:IUnknown_BIPC
boost::interprocess::winapi::IWbemServices_BIPC::CancelAsyncCall	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CancelAsyncCall($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( void *pSink)
boost::interprocess::winapi::IWbemServices_BIPC::CreateClassEnum	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CreateClassEnum($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strSuperclass, long lFlags, void *pCtx, void **ppEnum)
boost::interprocess::winapi::IWbemServices_BIPC::CreateClassEnumAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CreateClassEnumAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strSuperclass, long lFlags, void *pCtx, void *pResponseHandler)
boost::interprocess::winapi::IWbemServices_BIPC::CreateInstanceEnum	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CreateInstanceEnum($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strFilter, long lFlags, void *pCtx, void **ppEnum)
boost::interprocess::winapi::IWbemServices_BIPC::CreateInstanceEnumAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall CreateInstanceEnumAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strFilter, long lFlags, void *pCtx, void *pResponseHandler)
boost::interprocess::winapi::IWbemServices_BIPC::DeleteClass	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteClass($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strClass, long lFlags, void *pCtx, void **ppCallResult)
boost::interprocess::winapi::IWbemServices_BIPC::DeleteClassAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteClassAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strClass, long lFlags, void *pCtx, void *pResponseHandler)
boost::interprocess::winapi::IWbemServices_BIPC::DeleteInstance	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteInstance($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, long lFlags, void *pCtx, void **ppCallResult)
boost::interprocess::winapi::IWbemServices_BIPC::DeleteInstanceAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall DeleteInstanceAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, long lFlags, void *pCtx, void *pResponseHandler)
boost::interprocess::winapi::IWbemServices_BIPC::ExecMethod	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecMethod($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, const wchar_t * strMethodName, long lFlags, IWbemContext_BIPC *pCtx, IWbemClassObject_BIPC *pInParams, IWbemClassObject_BIPC **ppOutParams, void **ppCallResult)
boost::interprocess::winapi::IWbemServices_BIPC::ExecMethodAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecMethodAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, const wchar_t * strMethodName, long lFlags, IWbemContext_BIPC *pCtx, IWbemClassObject_BIPC *pInParams, void *pResponseHandler)
boost::interprocess::winapi::IWbemServices_BIPC::ExecNotificationQuery	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecNotificationQuery($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strQueryLanguage, const wchar_t * strQuery, long lFlags, IWbemContext_BIPC *pCtx, void **ppEnum)
boost::interprocess::winapi::IWbemServices_BIPC::ExecNotificationQueryAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecNotificationQueryAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strQueryLanguage, const wchar_t * strQuery, long lFlags, IWbemContext_BIPC *pCtx, void *pResponseHandler)
boost::interprocess::winapi::IWbemServices_BIPC::ExecQuery	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecQuery($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strQueryLanguage, const wchar_t * strQuery, long lFlags, IWbemContext_BIPC *pCtx, IEnumWbemClassObject_BIPC **ppEnum)
boost::interprocess::winapi::IWbemServices_BIPC::ExecQueryAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall ExecQueryAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strQueryLanguage, const wchar_t * strQuery, long lFlags, IWbemContext_BIPC *pCtx, void *pResponseHandler)
boost::interprocess::winapi::IWbemServices_BIPC::GetObject	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetObject($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, long lFlags, void *pCtx, void **ppObject, void **ppCallResult)
boost::interprocess::winapi::IWbemServices_BIPC::GetObjectAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall GetObjectAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strObjectPath, long lFlags, void *pCtx, void *pResponseHandler)
boost::interprocess::winapi::IWbemServices_BIPC::OpenNamespace	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall OpenNamespace($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( const wchar_t * strNamespace, long lFlags, void *pCtx, void **ppWorkingNamespace, void **ppResult)
boost::interprocess::winapi::IWbemServices_BIPC::PutClass	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall PutClass($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( IWbemClassObject_BIPC *pObject, long lFlags, void *pCtx, void **ppCallResult)
boost::interprocess::winapi::IWbemServices_BIPC::PutClassAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall PutClassAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( IWbemClassObject_BIPC *pObject, long lFlags, void *pCtx, void *pResponseHandler)
boost::interprocess::winapi::IWbemServices_BIPC::PutInstance	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall PutInstance($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( void *pInst, long lFlags, void *pCtx, void **ppCallResult)
boost::interprocess::winapi::IWbemServices_BIPC::PutInstanceAsync	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall PutInstanceAsync($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( void *pInst, long lFlags, void *pCtx, void *pResponseHandler)
boost::interprocess::winapi::IWbemServices_BIPC::QueryObjectSink	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   virtual long __stdcall QueryObjectSink($/;"	p	struct:boost::interprocess::winapi::IWbemServices_BIPC	access:public	signature:( long lFlags, void **ppResponseHandler)
boost::interprocess::winapi::InitializeSecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall InitializeSecurityDescriptor(interprocess_security_descriptor *pSecurityDescriptor, unsigned long dwRevision);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_descriptor *pSecurityDescriptor, unsigned long dwRevision)
boost::interprocess::winapi::LoadLibraryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall LoadLibraryA(const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *)
boost::interprocess::winapi::LocalFree	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall LocalFree (void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::LockFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall LockFile  (void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high)
boost::interprocess::winapi::LockFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall LockFileEx(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped)
boost::interprocess::winapi::MapViewOfFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall MapViewOfFileEx (void *, unsigned long, unsigned long, unsigned long, std::size_t, void*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, unsigned long, unsigned long, unsigned long, std::size_t, void*)
boost::interprocess::winapi::MaxPath	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long MaxPath           = 260;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::MoveFileExA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall    MoveFileExA (const char *, const char *, unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, const char *, unsigned long)
boost::interprocess::winapi::NtClose_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtClose_t) (void*);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtDeleteFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtDeleteFile_t)(object_attributes_t *ObjectAttributes);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtOpenFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtOpenFile_t)(void*,unsigned long ,object_attributes_t*,io_status_block_t*,unsigned long,unsigned long);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtQueryInformationFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQueryInformationFile_t)(void *,io_status_block_t *,void *, long, int);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtQueryObject_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQueryObject_t)(void*, object_information_class, void *, unsigned long, unsigned long *);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtQuerySection_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQuerySection_t)(void*, section_information_class, interprocess_section_basic_information *pinfo, unsigned long info_size, unsigned long *ret_len);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtQuerySemaphore_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQuerySemaphore_t)(void*, unsigned int info_class, interprocess_semaphore_basic_information *pinfo, unsigned int info_size, unsigned int *ret_len);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtQuerySystemInformation_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQuerySystemInformation_t)(int, void*, unsigned long, unsigned long *);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtSetInformationFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtSetInformationFile_t)(void *FileHandle, io_status_block_t *IoStatusBlock, void *FileInformation, unsigned long Length, int FileInformationClass );$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::OpenFileMappingA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenFileMappingA (unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
boost::interprocess::winapi::OpenMutexA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenMutexA(unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
boost::interprocess::winapi::OpenSemaphoreA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenSemaphoreA(unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
boost::interprocess::winapi::QueryPerformanceCounter	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int  __stdcall QueryPerformanceCounter(__int64 *lpPerformanceCount);$/;"	p	namespace:boost::interprocess::winapi	signature:(__int64 *lpPerformanceCount)
boost::interprocess::winapi::RPC_C_AUTHN_DEFAULT_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long RPC_C_AUTHN_DEFAULT_BIPC = 0xffffffffL;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RPC_C_AUTHN_LEVEL_PKT_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long RPC_C_AUTHN_LEVEL_PKT_BIPC = 4;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RPC_C_AUTHZ_DEFAULT_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long RPC_C_AUTHZ_DEFAULT_BIPC = 0xffffffffL;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RPC_C_IMP_LEVEL_IMPERSONATE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const unsigned long RPC_C_IMP_LEVEL_IMPERSONATE_BIPC = 3;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RPC_E_CHANGED_MODE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long RPC_E_CHANGED_MODE_BIPC = 0x80010106L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RPC_E_TOO_LATE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long RPC_E_TOO_LATE_BIPC = 0x80010119L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::ReadFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall ReadFile(void *hnd, void *buffer, unsigned long bytes_to_read, unsigned long *bytes_read, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, void *buffer, unsigned long bytes_to_read, unsigned long *bytes_read, interprocess_overlapped* overlapped)
boost::interprocess::winapi::RegCloseKey	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall RegCloseKey(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::RegCloseKey_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegCloseKey_t)(void *);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RegOpenKeyExA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall RegOpenKeyExA(void *, const char *, unsigned long, unsigned long, void **);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, const char *, unsigned long, unsigned long, void **)
boost::interprocess::winapi::RegOpenKeyEx_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegOpenKeyEx_t)(void *, const char *, unsigned long, unsigned long, void **);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RegQueryValueExA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall RegQueryValueExA(void *, const char *, unsigned long*, unsigned long*, unsigned char *, unsigned long*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, const char *, unsigned long*, unsigned long*, unsigned char *, unsigned long*)
boost::interprocess::winapi::RegQueryValueEx_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegQueryValueEx_t)(void *, const char *, unsigned long*, unsigned long*, unsigned char *, unsigned long*);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::ReleaseMutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall ReleaseMutex(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::ReleaseSemaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall ReleaseSemaphore(void *, long, long *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, long, long *)
boost::interprocess::winapi::RemoveDirectoryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall RemoveDirectoryA(const char *lpPathName);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *lpPathName)
boost::interprocess::winapi::RtlAppendUnicodeToString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *RtlAppendUnicodeToString_t)(unicode_string_t *Destination, const wchar_t *Source);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RtlCreateUnicodeStringFromAsciiz_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *RtlCreateUnicodeStringFromAsciiz_t)(unicode_string_t *, const char *);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RtlFreeUnicodeString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef void (__stdcall *RtlFreeUnicodeString_t)(unicode_string_t *);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RtlInitUnicodeString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef void (__stdcall *RtlInitUnicodeString_t)( unicode_string_t *, const wchar_t * );$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::S_FALSE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long S_FALSE_BIPC = 1;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::S_OK_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long S_OK_BIPC = 0L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::SetEndOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetEndOfFile(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::SetFilePointerEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetFilePointerEx(void *, __int64 distance, __int64 *new_file_pointer, unsigned long move_method);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)
boost::interprocess::winapi::SetFileValidData	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetFileValidData(void *, __int64 size);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 size)
boost::interprocess::winapi::SetLastError	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall SetLastError(unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long)
boost::interprocess::winapi::SetSecurityDescriptorDacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetSecurityDescriptorDacl(interprocess_security_descriptor *pSecurityDescriptor, int bDaclPresent, interprocess_acl *pDacl, int bDaclDefaulted);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_descriptor *pSecurityDescriptor, int bDaclPresent, interprocess_acl *pDacl, int bDaclDefaulted)
boost::interprocess::winapi::Sleep	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall Sleep(unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long)
boost::interprocess::winapi::SwitchToThread	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SwitchToThread();$/;"	p	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::SystemTimeOfDayInfoLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long SystemTimeOfDayInfoLength  = 48;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::UnlockFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnlockFile(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high)
boost::interprocess::winapi::UnlockFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnlockFileEx(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped)
boost::interprocess::winapi::UnmapViewOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnmapViewOfFile(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::VariantClear	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) long __stdcall VariantClear(wchar_variant * pvarg);$/;"	p	namespace:boost::interprocess::winapi	signature:(wchar_variant * pvarg)
boost::interprocess::winapi::VirtualProtect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall VirtualProtect (void *, std::size_t, unsigned long, unsigned long *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, std::size_t, unsigned long, unsigned long *)
boost::interprocess::winapi::VirtualUnlock	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall VirtualUnlock (void *, std::size_t);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, std::size_t)
boost::interprocess::winapi::WBEM_FLAG_FORWARD_ONLY_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long WBEM_FLAG_FORWARD_ONLY_BIPC = 0x20;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::WBEM_FLAG_RETURN_IMMEDIATELY_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long WBEM_FLAG_RETURN_IMMEDIATELY_BIPC = 0x10;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::WBEM_FLAG_RETURN_WHEN_COMPLETE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long WBEM_FLAG_RETURN_WHEN_COMPLETE_BIPC = 0x0;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::WBEM_INFINITE_BIPC	/usr/include/boost/interprocess/detail/win32_api.hpp	/^const   signed long WBEM_INFINITE_BIPC = 0xffffffffL;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::WaitForSingleObject	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall WaitForSingleObject(void *, unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, unsigned long)
boost::interprocess::winapi::WriteFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall WriteFile(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)
boost::interprocess::winapi::_interprocess_security_descriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef struct _interprocess_security_descriptor$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::_interprocess_security_descriptor::Control	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Control;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Dacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_acl *Dacl;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Group	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *Group;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Owner	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *Owner;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Revision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Revision;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Sacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_acl *Sacl;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Sbz1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Sbz1;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::close_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned int close_handle(void* handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void* handle)
boost::interprocess::winapi::co_uninitializer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct co_uninitializer$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::co_uninitializer::co_uninitializer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   co_uninitializer(bool b_uninitialize)$/;"	f	struct:boost::interprocess::winapi::co_uninitializer	access:public	signature:(bool b_uninitialize)
boost::interprocess::winapi::co_uninitializer::m_b_uninitialize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   const bool m_b_uninitialize;$/;"	m	struct:boost::interprocess::winapi::co_uninitializer	access:private
boost::interprocess::winapi::co_uninitializer::~co_uninitializer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~co_uninitializer()$/;"	f	struct:boost::interprocess::winapi::co_uninitializer	access:public	signature:()
boost::interprocess::winapi::com_releaser	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct com_releaser$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::com_releaser::com_releaser	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   com_releaser(Object *&object) : object_(object) {}$/;"	f	struct:boost::interprocess::winapi::com_releaser	access:public	signature:(Object *&object)
boost::interprocess::winapi::com_releaser::object_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   Object *&object_;$/;"	m	struct:boost::interprocess::winapi::com_releaser	access:public
boost::interprocess::winapi::com_releaser::~com_releaser	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~com_releaser()  {  object_->Release();    object_ = 0;  }$/;"	f	struct:boost::interprocess::winapi::com_releaser	access:public	signature:()
boost::interprocess::winapi::create_always	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long create_always     = 2;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::create_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool create_directory(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
boost::interprocess::winapi::create_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *create_file(const char *name, unsigned long access, unsigned long creation_flags, unsigned long attributes, interprocess_security_attributes *psec)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name, unsigned long access, unsigned long creation_flags, unsigned long attributes, interprocess_security_attributes *psec)
boost::interprocess::winapi::create_file_mapping	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * create_file_mapping (void * handle, unsigned long access, unsigned __int64 file_offset, const char * name, interprocess_security_attributes *psec)$/;"	f	namespace:boost::interprocess::winapi	signature:(void * handle, unsigned long access, unsigned __int64 file_offset, const char * name, interprocess_security_attributes *psec)
boost::interprocess::winapi::create_new	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long create_new        = 1;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::delete_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long delete_access = 0x00010000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::delete_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool delete_file(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
boost::interprocess::winapi::dll_func	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct dll_func$/;"	s	namespace:boost::interprocess::winapi	inherits:function_address_holder
boost::interprocess::winapi::duplicate_close_source	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long duplicate_close_source  = (unsigned long)0x00000001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::duplicate_current_process_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool duplicate_current_process_handle$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hSourceHandle, void **lpTargetHandle)
boost::interprocess::winapi::duplicate_same_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long duplicate_same_access   = (unsigned long)0x00000002;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_already_exists	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_already_exists = 183L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_file_not_found	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_file_not_found = 2u;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_file_too_large	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned int  error_file_too_large = 223u;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_invalid_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_invalid_handle = 6L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_lock_violation	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_lock_violation       = 33;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_no_more_files	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_no_more_files  = 18u;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_not_locked	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_not_locked     = 158L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_sharing_violation	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_sharing_violation = 32L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_sharing_violation_sleep_ms	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned int  error_sharing_violation_sleep_ms = 250u;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_sharing_violation_tries	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned int  error_sharing_violation_tries = 3u;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_access_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_access_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_alignment_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_alignment_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_all_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_all_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_allocation_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_allocation_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_alternate_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_alternate_name_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_attribute_archive	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_archive     = 0x00000020;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_device	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_device      = 0x00000040;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_directory   = 0x00000010;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_hidden	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_hidden      = 0x00000002;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_normal	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_normal      = 0x00000080;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_readonly	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_readonly    = 0x00000001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_system	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_system      = 0x00000004;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_temporary	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_temporary   = 0x00000100;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_basic_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_begin	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_begin     = 0;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_both_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_both_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_completion_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_completion_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_compression_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_compression_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_content_index_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_content_index_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_copy_on_write_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_copy_on_write_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_current	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_current   = 1;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_delete_on_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long file_delete_on_close = 0x00001000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_directory_information = 1,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_disposition_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_disposition_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_ea_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ea_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_end	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_end       = 2;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_end_of_file_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_end_of_file_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_flag_backup_semantics	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_flag_backup_semantics = 0x02000000;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_flag_delete_on_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long file_flag_delete_on_close = 0x04000000;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_full_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_full_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_full_ea_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_full_ea_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_information_class_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum file_information_class_t {$/;"	g	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_inherit_content_index_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_inherit_content_index_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_internal_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_internal_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_link_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_link_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_mailslot_query_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mailslot_query_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_mailslot_set_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mailslot_set_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_map_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_all_access  = section_all_access;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_map_copy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_copy        = section_query;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_map_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_read        = section_map_read;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_map_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_write       = section_map_write;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_maximum_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_maximum_information$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_mode_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mode_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_move_cluster_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_move_cluster_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_name_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_name_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct file_name_information_t {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_name_information_t::FileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t FileName[1];$/;"	m	struct:boost::interprocess::winapi::file_name_information_t	access:public
boost::interprocess::winapi::file_name_information_t::FileNameLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long FileNameLength;$/;"	m	struct:boost::interprocess::winapi::file_name_information_t	access:public
boost::interprocess::winapi::file_names_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_names_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_network_open_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_network_open_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_object_id_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_object_id_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_ole_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ole_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_ole_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ole_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_open_for_backup_intent	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_open_for_backup_intent = 0x00004000;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_pipe_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_pipe_local_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_local_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_pipe_remote_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_remote_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_position_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_position_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_quota_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_quota_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_rename_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_rename_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_rename_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct file_rename_information_t {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_rename_information_t::FileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t FileName[1];$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
boost::interprocess::winapi::file_rename_information_t::FileNameLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long FileNameLength;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
boost::interprocess::winapi::file_rename_information_t::Replace	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   int Replace;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
boost::interprocess::winapi::file_rename_information_t::RootDir	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *RootDir;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
boost::interprocess::winapi::file_reparse_point_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_reparse_point_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_share_delete	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_delete    = 0x00000004;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_share_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_read      = 0x00000001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_share_valid_flags	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const int file_share_valid_flags = 0x00000007;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_share_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_write     = 0x00000002;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_standard_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_standard_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_stream_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_stream_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_tracking_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_tracking_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_type_char	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_type_char    =  0x0002L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_type_disk	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_type_disk    =  0x0001L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_type_pipe	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_type_pipe    =  0x0003L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_type_remote	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_type_remote  =  0x8000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_type_unknown	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_type_unknown =  0x0000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::find_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool find_close(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
boost::interprocess::winapi::find_first_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * find_first_file(const char *lpFileName, win32_find_data_t *lpFindFileData)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *lpFileName, win32_find_data_t *lpFindFileData)
boost::interprocess::winapi::find_next_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool find_next_file(void *hFindFile, win32_find_data_t *lpFindFileData)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hFindFile, win32_find_data_t *lpFindFileData)
boost::interprocess::winapi::flush_file_buffers	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool flush_file_buffers(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
boost::interprocess::winapi::flush_view_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool flush_view_of_file(void *base_addr, std::size_t numbytes)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *base_addr, std::size_t numbytes)
boost::interprocess::winapi::format_message	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long format_message$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long dwFlags, const void *lpSource, unsigned long dwMessageId, unsigned long dwLanguageId, char *lpBuffer, unsigned long nSize, std::va_list *Arguments)
boost::interprocess::winapi::format_message_allocate_buffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_allocate_buffer$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_argument_array	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_argument_array$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_from_hmodule	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_hmodule$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_from_string	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_string$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_from_system	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_system$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_ignore_inserts	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_ignore_inserts$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_max_width_mask	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_max_width_mask$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::free_library	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool free_library(void *module)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *module)
boost::interprocess::winapi::function_address_holder	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct function_address_holder$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::function_address_holder::FunctionAddresses	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *FunctionAddresses[NumFunction];$/;"	m	struct:boost::interprocess::winapi::function_address_holder	access:private
boost::interprocess::winapi::function_address_holder::FunctionAddresses	/usr/include/boost/interprocess/detail/win32_api.hpp	/^void *function_address_holder<Dummy>::FunctionAddresses[function_address_holder<Dummy>::NumFunction];$/;"	m	class:boost::interprocess::winapi::function_address_holder
boost::interprocess::winapi::function_address_holder::FunctionStates	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static volatile long FunctionStates[NumFunction];$/;"	m	struct:boost::interprocess::winapi::function_address_holder	access:private
boost::interprocess::winapi::function_address_holder::FunctionStates	/usr/include/boost/interprocess/detail/win32_api.hpp	/^volatile long function_address_holder<Dummy>::FunctionStates[function_address_holder<Dummy>::NumFunction];$/;"	m	class:boost::interprocess::winapi::function_address_holder
boost::interprocess::winapi::function_address_holder::ModuleAddresses	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *ModuleAddresses[NumModule];$/;"	m	struct:boost::interprocess::winapi::function_address_holder	access:private
boost::interprocess::winapi::function_address_holder::ModuleAddresses	/usr/include/boost/interprocess/detail/win32_api.hpp	/^void *function_address_holder<Dummy>::ModuleAddresses[function_address_holder<Dummy>::NumModule];$/;"	m	class:boost::interprocess::winapi::function_address_holder
boost::interprocess::winapi::function_address_holder::ModuleStates	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static volatile long ModuleStates[NumModule];$/;"	m	struct:boost::interprocess::winapi::function_address_holder	access:private
boost::interprocess::winapi::function_address_holder::ModuleStates	/usr/include/boost/interprocess/detail/win32_api.hpp	/^volatile long function_address_holder<Dummy>::ModuleStates[function_address_holder<Dummy>::NumModule];$/;"	m	class:boost::interprocess::winapi::function_address_holder
boost::interprocess::winapi::function_address_holder::NtDll_dll	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtDll_dll, NumModule };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon11
boost::interprocess::winapi::function_address_holder::NtQueryObject	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
boost::interprocess::winapi::function_address_holder::NtQuerySection	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
boost::interprocess::winapi::function_address_holder::NtQuerySemaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
boost::interprocess::winapi::function_address_holder::NtQuerySystemInformation	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
boost::interprocess::winapi::function_address_holder::NtSetInformationFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
boost::interprocess::winapi::function_address_holder::NumFunction	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtSetInformationFile, NtQuerySystemInformation, NtQueryObject, NtQuerySemaphore, NtQuerySection, NumFunction };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon10
boost::interprocess::winapi::function_address_holder::NumModule	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   enum { NtDll_dll, NumModule };$/;"	e	enum:boost::interprocess::winapi::function_address_holder::__anon11
boost::interprocess::winapi::function_address_holder::get	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *get(const unsigned int id)$/;"	f	struct:boost::interprocess::winapi::function_address_holder	access:public	signature:(const unsigned int id)
boost::interprocess::winapi::function_address_holder::get_address_from_dll	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *get_address_from_dll(const unsigned int id)$/;"	f	struct:boost::interprocess::winapi::function_address_holder	access:private	signature:(const unsigned int id)
boost::interprocess::winapi::function_address_holder::get_module	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *get_module(const unsigned int id)$/;"	f	struct:boost::interprocess::winapi::function_address_holder	access:private	signature:(const unsigned int id)
boost::interprocess::winapi::function_address_holder::get_module_from_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *get_module_from_id(unsigned int id)$/;"	f	struct:boost::interprocess::winapi::function_address_holder	access:private	signature:(unsigned int id)
boost::interprocess::winapi::generic_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long generic_read         = 0x80000000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::generic_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long generic_write        = 0x40000000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::get_boot_and_system_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_and_system_time(unsigned char (&bootsystemstamp) [BootAndSystemstampLength])$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned char (&bootsystemstamp) [BootAndSystemstampLength])
boost::interprocess::winapi::get_boot_and_system_time_wstr	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_and_system_time_wstr(wchar_t *bootsystemstamp, std::size_t &s)  \/\/will write BootAndSystemstampLength chars$/;"	f	namespace:boost::interprocess::winapi	signature:(wchar_t *bootsystemstamp, std::size_t &s)
boost::interprocess::winapi::get_boot_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_time(unsigned char (&bootstamp) [BootstampLength])$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned char (&bootstamp) [BootstampLength])
boost::interprocess::winapi::get_boot_time_str	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_time_str(char *bootstamp_str, std::size_t &s) \/\/will write BootstampLength chars$/;"	f	namespace:boost::interprocess::winapi	signature:(char *bootstamp_str, std::size_t &s)
boost::interprocess::winapi::get_current_process	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_current_process()$/;"	f	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::get_current_process_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_current_process_id()$/;"	f	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::get_current_thread_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_current_thread_id()$/;"	f	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::get_file_information_by_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_information_by_handle(void *hnd, interprocess_by_handle_file_information *info)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, interprocess_by_handle_file_information *info)
boost::interprocess::winapi::get_file_mapping_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_mapping_size(void *file_mapping_hnd, __int64 &size)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *file_mapping_hnd, __int64 &size)
boost::interprocess::winapi::get_file_name_from_handle_function	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_name_from_handle_function$/;"	f	namespace:boost::interprocess::winapi	signature:(void * hFile, wchar_t *pszFilename, std::size_t length, std::size_t &out_length)
boost::interprocess::winapi::get_file_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_size(void *handle, __int64 &size)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, __int64 &size)
boost::interprocess::winapi::get_file_type	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_file_type(void *hFile)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hFile)
boost::interprocess::winapi::get_last_bootup_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_last_bootup_time( std::string& str )$/;"	f	namespace:boost::interprocess::winapi	signature:( std::string& str )
boost::interprocess::winapi::get_last_bootup_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_last_bootup_time( std::wstring& strValue )$/;"	f	namespace:boost::interprocess::winapi	signature:( std::wstring& strValue )
boost::interprocess::winapi::get_last_error	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_last_error()$/;"	f	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::get_mapped_file_name	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_mapped_file_name(void *process, void *lpv, wchar_t *lpfilename, unsigned long nSize)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *process, void *lpv, wchar_t *lpfilename, unsigned long nSize)
boost::interprocess::winapi::get_module_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_module_handle(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
boost::interprocess::winapi::get_proc_address	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_proc_address(void *module, const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *module, const char *name)
boost::interprocess::winapi::get_process_times	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_process_times$/;"	f	namespace:boost::interprocess::winapi	signature:( void *hProcess, interprocess_filetime* lpCreationTime , interprocess_filetime *lpExitTime, interprocess_filetime *lpKernelTime , interprocess_filetime *lpUserTime )
boost::interprocess::winapi::get_registry_value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_registry_value(const char *folder, const char *value_key, std::vector<unsigned char> &s)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *folder, const char *value_key, std::vector<unsigned char> &s)
boost::interprocess::winapi::get_semaphore_info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_semaphore_info(void *handle, long &count, long &limit)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, long &count, long &limit)
boost::interprocess::winapi::get_shared_documents_folder	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_shared_documents_folder(std::string &s)$/;"	f	namespace:boost::interprocess::winapi	signature:(std::string &s)
boost::interprocess::winapi::get_system_info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_system_info(system_info *info)$/;"	f	namespace:boost::interprocess::winapi	signature:(system_info *info)
boost::interprocess::winapi::get_system_time_of_day_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_system_time_of_day_information(system_timeofday_information &info)$/;"	f	namespace:boost::interprocess::winapi	signature:(system_timeofday_information &info)
boost::interprocess::winapi::get_temp_path	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_temp_path(unsigned long length, char *buffer)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long length, char *buffer)
boost::interprocess::winapi::get_wmi_class_attribute	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_wmi_class_attribute( std::wstring& strValue, const wchar_t *wmi_class, const wchar_t *wmi_class_var)$/;"	f	namespace:boost::interprocess::winapi	signature:( std::wstring& strValue, const wchar_t *wmi_class, const wchar_t *wmi_class_var)
boost::interprocess::winapi::handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^class handle_closer$/;"	c	namespace:boost::interprocess::winapi
boost::interprocess::winapi::handle_closer::handle_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *handle_;$/;"	m	class:boost::interprocess::winapi::handle_closer	access:private
boost::interprocess::winapi::handle_closer::handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   explicit handle_closer(void *handle) : handle_(handle){}$/;"	f	class:boost::interprocess::winapi::handle_closer	access:public	signature:(void *handle)
boost::interprocess::winapi::handle_closer::handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   handle_closer(const handle_closer &);$/;"	p	class:boost::interprocess::winapi::handle_closer	access:private	signature:(const handle_closer &)
boost::interprocess::winapi::handle_closer::operator =	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   handle_closer& operator=(const handle_closer &);$/;"	p	class:boost::interprocess::winapi::handle_closer	access:private	signature:(const handle_closer &)
boost::interprocess::winapi::handle_closer::~handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~handle_closer()$/;"	f	class:boost::interprocess::winapi::handle_closer	access:public	signature:()
boost::interprocess::winapi::hkey_local_machine	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static void * const  hkey_local_machine = (void*)(unsigned long*)(long)(0x80000002);$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::infinite_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long infinite_time        = 0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::initialize_object_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void initialize_object_attributes$/;"	f	namespace:boost::interprocess::winapi	signature:( object_attributes_t *pobject_attr, unicode_string_t *name , unsigned long attr, void *rootdir, void *security_descr)
boost::interprocess::winapi::interlocked_compare_exchange	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_compare_exchange(long volatile *addr, long val1, long val2)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr, long val1, long val2)
boost::interprocess::winapi::interlocked_decrement	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_decrement(long volatile *addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr)
boost::interprocess::winapi::interlocked_exchange	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_exchange(long volatile* addend, long value)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile* addend, long value)
boost::interprocess::winapi::interlocked_exchange_add	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_exchange_add(long volatile* addend, long value)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile* addend, long value)
boost::interprocess::winapi::interlocked_increment	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_increment(long volatile *addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr)
boost::interprocess::winapi::interprocess_acl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_acl$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_acl::AceCount	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short AceCount;$/;"	m	struct:boost::interprocess::winapi::interprocess_acl	access:public
boost::interprocess::winapi::interprocess_acl::AclRevision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char  AclRevision;$/;"	m	struct:boost::interprocess::winapi::interprocess_acl	access:public
boost::interprocess::winapi::interprocess_acl::AclSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short AclSize;$/;"	m	struct:boost::interprocess::winapi::interprocess_acl	access:public
boost::interprocess::winapi::interprocess_acl::Sbz1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char  Sbz1;$/;"	m	struct:boost::interprocess::winapi::interprocess_acl	access:public
boost::interprocess::winapi::interprocess_acl::Sbz2	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Sbz2;$/;"	m	struct:boost::interprocess::winapi::interprocess_acl	access:public
boost::interprocess::winapi::interprocess_all_access_security	/usr/include/boost/interprocess/detail/win32_api.hpp	/^class interprocess_all_access_security$/;"	c	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_all_access_security::get_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_security_attributes *get_attributes()$/;"	f	class:boost::interprocess::winapi::interprocess_all_access_security	access:public	signature:()
boost::interprocess::winapi::interprocess_all_access_security::initialized	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   bool initialized;$/;"	m	class:boost::interprocess::winapi::interprocess_all_access_security	access:private
boost::interprocess::winapi::interprocess_all_access_security::interprocess_all_access_security	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_all_access_security()$/;"	f	class:boost::interprocess::winapi::interprocess_all_access_security	access:public	signature:()
boost::interprocess::winapi::interprocess_all_access_security::sa	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_security_attributes sa;$/;"	m	class:boost::interprocess::winapi::interprocess_all_access_security	access:private
boost::interprocess::winapi::interprocess_all_access_security::sd	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_security_descriptor sd;$/;"	m	class:boost::interprocess::winapi::interprocess_all_access_security	access:private
boost::interprocess::winapi::interprocess_by_handle_file_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_by_handle_file_information$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_by_handle_file_information::dwFileAttributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwFileAttributes;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
boost::interprocess::winapi::interprocess_by_handle_file_information::dwVolumeSerialNumber	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwVolumeSerialNumber;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
boost::interprocess::winapi::interprocess_by_handle_file_information::ftCreationTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    interprocess_filetime ftCreationTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
boost::interprocess::winapi::interprocess_by_handle_file_information::ftLastAccessTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    interprocess_filetime ftLastAccessTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
boost::interprocess::winapi::interprocess_by_handle_file_information::ftLastWriteTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    interprocess_filetime ftLastWriteTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
boost::interprocess::winapi::interprocess_by_handle_file_information::nFileIndexHigh	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long nFileIndexHigh;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
boost::interprocess::winapi::interprocess_by_handle_file_information::nFileIndexLow	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long nFileIndexLow;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
boost::interprocess::winapi::interprocess_by_handle_file_information::nFileSizeHigh	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long nFileSizeHigh;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
boost::interprocess::winapi::interprocess_by_handle_file_information::nFileSizeLow	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long nFileSizeLow;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
boost::interprocess::winapi::interprocess_by_handle_file_information::nNumberOfLinks	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long nNumberOfLinks;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
boost::interprocess::winapi::interprocess_filetime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_filetime$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_filetime::dwHighDateTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  dwHighDateTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_filetime	access:public
boost::interprocess::winapi::interprocess_filetime::dwLowDateTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  dwLowDateTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_filetime	access:public
boost::interprocess::winapi::interprocess_memory_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_memory_basic_information$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_memory_basic_information::AllocationBase	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *         AllocationBase;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::AllocationProtect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  AllocationProtect;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::BaseAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *         BaseAddress;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::Protect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  Protect;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::RegionSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  RegionSize;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::State	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  State;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::Type	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  Type;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_overlapped	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_overlapped$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_overlapped::__anon5::__anon6::offset	/usr/include/boost/interprocess/detail/win32_api.hpp	/^         unsigned long offset;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped::__anon5::__anon6	access:public
boost::interprocess::winapi::interprocess_overlapped::__anon5::__anon6::offset_high	/usr/include/boost/interprocess/detail/win32_api.hpp	/^         unsigned long offset_high;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped::__anon5::__anon6	access:public
boost::interprocess::winapi::interprocess_overlapped::__anon5::dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      }dummy;$/;"	m	union:boost::interprocess::winapi::interprocess_overlapped::__anon5	typeref:struct:boost::interprocess::winapi::interprocess_overlapped::__anon5::__anon6	access:public
boost::interprocess::winapi::interprocess_overlapped::__anon5::pointer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      void *pointer;$/;"	m	union:boost::interprocess::winapi::interprocess_overlapped::__anon5	access:public
boost::interprocess::winapi::interprocess_overlapped::h_event	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *h_event;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
boost::interprocess::winapi::interprocess_overlapped::internal	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *internal;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
boost::interprocess::winapi::interprocess_overlapped::internal_high	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *internal_high;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
boost::interprocess::winapi::interprocess_section_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_section_basic_information$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_section_basic_information::base_address	/usr/include/boost/interprocess/detail/win32_api.hpp	/^  void *          base_address;$/;"	m	struct:boost::interprocess::winapi::interprocess_section_basic_information	access:public
boost::interprocess::winapi::interprocess_section_basic_information::section_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^  unsigned long   section_attributes;$/;"	m	struct:boost::interprocess::winapi::interprocess_section_basic_information	access:public
boost::interprocess::winapi::interprocess_section_basic_information::section_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^  __int64         section_size;$/;"	m	struct:boost::interprocess::winapi::interprocess_section_basic_information	access:public
boost::interprocess::winapi::interprocess_security_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_security_attributes$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_security_attributes::bInheritHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   int bInheritHandle;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
boost::interprocess::winapi::interprocess_security_attributes::lpSecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *lpSecurityDescriptor;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
boost::interprocess::winapi::interprocess_security_attributes::nLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nLength;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
boost::interprocess::winapi::interprocess_security_descriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^} interprocess_security_descriptor;$/;"	t	namespace:boost::interprocess::winapi	typeref:struct:boost::interprocess::winapi::_interprocess_security_descriptor
boost::interprocess::winapi::interprocess_semaphore_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_semaphore_basic_information$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_semaphore_basic_information::count	/usr/include/boost/interprocess/detail/win32_api.hpp	/^	unsigned int count;		\/\/ current semaphore count$/;"	m	struct:boost::interprocess::winapi::interprocess_semaphore_basic_information	access:public
boost::interprocess::winapi::interprocess_semaphore_basic_information::limit	/usr/include/boost/interprocess/detail/win32_api.hpp	/^	unsigned int limit;		\/\/ max semaphore count$/;"	m	struct:boost::interprocess::winapi::interprocess_semaphore_basic_information	access:public
boost::interprocess::winapi::invalid_file_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long invalid_file_attributes =  ((unsigned long)-1);$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::invalid_file_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long invalid_file_size    = (unsigned long)0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::invalid_handle_value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static       void * const  invalid_handle_value = ((void*)(long)(-1));$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::io_status_block_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct io_status_block_t {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::io_status_block_t::Information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *Information;$/;"	m	struct:boost::interprocess::winapi::io_status_block_t	access:public
boost::interprocess::winapi::io_status_block_t::__anon9::Pointer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      void *Pointer;$/;"	m	union:boost::interprocess::winapi::io_status_block_t::__anon9	access:public
boost::interprocess::winapi::io_status_block_t::__anon9::Status	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      long Status;$/;"	m	union:boost::interprocess::winapi::io_status_block_t::__anon9	access:public
boost::interprocess::winapi::is_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool is_directory(const char *path)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *path)
boost::interprocess::winapi::key_query_value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static unsigned long key_query_value    = 0x0001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::lang_neutral	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lang_neutral         = (unsigned long)0x00;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct library_unloader$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::library_unloader::lib_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *lib_;$/;"	m	struct:boost::interprocess::winapi::library_unloader	access:public
boost::interprocess::winapi::library_unloader::library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   library_unloader(void *module) : lib_(module){}$/;"	f	struct:boost::interprocess::winapi::library_unloader	access:public	signature:(void *module)
boost::interprocess::winapi::library_unloader::~library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~library_unloader(){ free_library(lib_);  }$/;"	f	struct:boost::interprocess::winapi::library_unloader	access:public	signature:()
boost::interprocess::winapi::load_library	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *load_library(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
boost::interprocess::winapi::local_free	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * local_free(void *hmem)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hmem)
boost::interprocess::winapi::lock_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool lock_file_ex(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)
boost::interprocess::winapi::lockfile_exclusive_lock	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lockfile_exclusive_lock    = 2;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::lockfile_fail_immediately	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lockfile_fail_immediately  = 1;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::make_lang_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long make_lang_id(unsigned long p, unsigned long s)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long p, unsigned long s)
boost::interprocess::winapi::map_view_of_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *map_view_of_file_ex(void *handle, unsigned long file_access, unsigned __int64 offset, std::size_t numbytes, void *base_addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, unsigned long file_access, unsigned __int64 offset, std::size_t numbytes, void *base_addr)
boost::interprocess::winapi::move_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool move_file_ex(const char *source_filename, const char *destination_filename, unsigned long flags)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *source_filename, const char *destination_filename, unsigned long flags)
boost::interprocess::winapi::movefile_copy_allowed	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_copy_allowed            = 0x02;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::movefile_create_hardlink	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_create_hardlink         = 0x10;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::movefile_delay_until_reboot	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_delay_until_reboot      = 0x04;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::movefile_fail_if_not_trackable	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_fail_if_not_trackable   = 0x20;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::movefile_replace_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_replace_existing        = 0x01;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::movefile_write_through	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_write_through           = 0x08;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::mutex_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long mutex_all_access     = (0x000F0000L)|(0x00100000L)|0x0001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::ntquery_mem_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^union ntquery_mem_t$/;"	u	namespace:boost::interprocess::winapi
boost::interprocess::winapi::ntquery_mem_t::name	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_name_information_t name;$/;"	m	union:boost::interprocess::winapi::ntquery_mem_t	access:public
boost::interprocess::winapi::ntquery_mem_t::ren	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   } ren;$/;"	m	union:boost::interprocess::winapi::ntquery_mem_t	typeref:struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
boost::interprocess::winapi::ntquery_mem_t::ren_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   struct ren_t$/;"	s	union:boost::interprocess::winapi::ntquery_mem_t	access:public
boost::interprocess::winapi::ntquery_mem_t::ren_t::buf	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      wchar_t buf[32767];$/;"	m	struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
boost::interprocess::winapi::ntquery_mem_t::ren_t::info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      file_rename_information_t info;$/;"	m	struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
boost::interprocess::winapi::obj_case_insensitive	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long obj_case_insensitive = 0x00000040L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::object_all_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_all_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
boost::interprocess::winapi::object_attributes_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct object_attributes_t {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::object_attributes_t::Attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long Attributes;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_attributes_t::Length	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long Length;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_attributes_t::ObjectName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unicode_string_t *ObjectName;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_attributes_t::RootDirectory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void * RootDirectory;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_attributes_t::SecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *SecurityDescriptor;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_attributes_t::SecurityQualityOfService	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *SecurityQualityOfService;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_basic_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
boost::interprocess::winapi::object_data_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_data_information$/;"	e	enum:boost::interprocess::winapi::object_information_class
boost::interprocess::winapi::object_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum object_information_class$/;"	g	namespace:boost::interprocess::winapi
boost::interprocess::winapi::object_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_name_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
boost::interprocess::winapi::object_name_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct object_name_information_t$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::object_name_information_t::Name	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unicode_string_t Name;$/;"	m	struct:boost::interprocess::winapi::object_name_information_t	access:public
boost::interprocess::winapi::object_name_information_t::NameBuffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t NameBuffer[1];$/;"	m	struct:boost::interprocess::winapi::object_name_information_t	access:public
boost::interprocess::winapi::object_type_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_type_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
boost::interprocess::winapi::open_always	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long open_always       = 4;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::open_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long open_existing     = 3;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::open_file_mapping	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * open_file_mapping (unsigned long access, const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long access, const char *name)
boost::interprocess::winapi::open_or_create_mutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *open_or_create_mutex(const char *name, bool initial_owner, interprocess_security_attributes *attr)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name, bool initial_owner, interprocess_security_attributes *attr)
boost::interprocess::winapi::open_or_create_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *open_or_create_semaphore(const char *name, long initial_count, long maximum_count, interprocess_security_attributes *attr)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name, long initial_count, long maximum_count, interprocess_security_attributes *attr)
boost::interprocess::winapi::open_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *open_semaphore(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
boost::interprocess::winapi::page_noaccess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_noaccess        = 0x01;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::page_readonly	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_readonly        = 0x02;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::page_readwrite	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_readwrite       = 0x04;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::page_writecopy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_writecopy       = 0x08;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::query_performance_counter	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool query_performance_counter(__int64 *lpPerformanceCount)$/;"	f	namespace:boost::interprocess::winapi	signature:(__int64 *lpPerformanceCount)
boost::interprocess::winapi::read_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool read_file(void *hnd, void *buffer, unsigned long bytes_to_read, unsigned long *bytes_read, interprocess_overlapped* overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, void *buffer, unsigned long bytes_to_read, unsigned long *bytes_read, interprocess_overlapped* overlapped)
boost::interprocess::winapi::reg_close_key	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long reg_close_key(void *hKey)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hKey)
boost::interprocess::winapi::reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct reg_closer$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::reg_closer::key_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *key_;$/;"	m	struct:boost::interprocess::winapi::reg_closer	access:public
boost::interprocess::winapi::reg_closer::reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   reg_closer(void *key) : key_(key){}$/;"	f	struct:boost::interprocess::winapi::reg_closer	access:public	signature:(void *key)
boost::interprocess::winapi::reg_closer::~reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~reg_closer(){ reg_close_key(key_);  }$/;"	f	struct:boost::interprocess::winapi::reg_closer	access:public	signature:()
boost::interprocess::winapi::reg_open_key_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long reg_open_key_ex(void *hKey, const char *lpSubKey, unsigned long ulOptions, unsigned long samDesired, void **phkResult)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hKey, const char *lpSubKey, unsigned long ulOptions, unsigned long samDesired, void **phkResult)
boost::interprocess::winapi::reg_query_value_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long reg_query_value_ex(void *hKey, const char *lpValueName, unsigned long*lpReserved, unsigned long*lpType, unsigned char *lpData, unsigned long*lpcbData)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hKey, const char *lpValueName, unsigned long*lpReserved, unsigned long*lpType, unsigned char *lpData, unsigned long*lpcbData)
boost::interprocess::winapi::release_mutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int release_mutex(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
boost::interprocess::winapi::release_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int release_semaphore(void *handle, long release_count, long *prev_count)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, long release_count, long *prev_count)
boost::interprocess::winapi::remove_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool remove_directory(const char *lpPathName)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *lpPathName)
boost::interprocess::winapi::rtl_init_empty_unicode_string	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void rtl_init_empty_unicode_string(unicode_string_t *ucStr, wchar_t *buf, unsigned short bufSize)$/;"	f	namespace:boost::interprocess::winapi	signature:(unicode_string_t *ucStr, wchar_t *buf, unsigned short bufSize)
boost::interprocess::winapi::sched_yield	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void sched_yield()$/;"	f	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::section_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_all_access         = standard_rights_required |$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::section_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   section_basic_information,$/;"	e	enum:boost::interprocess::winapi::section_information_class
boost::interprocess::winapi::section_extend_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_extend_size        = 0x0010;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::section_image_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   section_image_information$/;"	e	enum:boost::interprocess::winapi::section_information_class
boost::interprocess::winapi::section_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum section_information_class$/;"	g	namespace:boost::interprocess::winapi
boost::interprocess::winapi::section_map_execute	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_execute        = 0x0008;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::section_map_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_read           = 0x0004;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::section_map_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_write          = 0x0002;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::section_query	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_query              = 0x0001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::security_descriptor_revision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long security_descriptor_revision = 1;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::semaphore_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long semaphore_all_access = (0x000F0000L)|(0x00100000L)|0x3;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::semaphore_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   semaphore_basic_information = 0$/;"	e	enum:boost::interprocess::winapi::semaphore_information_class
boost::interprocess::winapi::semaphore_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum semaphore_information_class {$/;"	g	namespace:boost::interprocess::winapi
boost::interprocess::winapi::set_end_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int set_end_of_file(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
boost::interprocess::winapi::set_file_pointer_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool set_file_pointer_ex(void *handle, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)
boost::interprocess::winapi::set_last_error	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void set_last_error(unsigned long err)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long err)
boost::interprocess::winapi::sleep	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void sleep(unsigned long ms)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long ms)
boost::interprocess::winapi::standard_rights_required	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long standard_rights_required   = 0x000F0000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::sublang_default	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long sublang_default      = (unsigned long)0x01;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::system_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_basic_information = 0,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_exception_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_exception_information = 33,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct system_info {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::system_info::__anon7::__anon8::wProcessorArchitecture	/usr/include/boost/interprocess/detail/win32_api.hpp	/^            unsigned short wProcessorArchitecture;$/;"	m	struct:boost::interprocess::winapi::system_info::__anon7::__anon8	access:public
boost::interprocess::winapi::system_info::__anon7::__anon8::wReserved	/usr/include/boost/interprocess/detail/win32_api.hpp	/^            unsigned short wReserved;$/;"	m	struct:boost::interprocess::winapi::system_info::__anon7::__anon8	access:public
boost::interprocess::winapi::system_info::__anon7::dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^        } dummy;$/;"	m	union:boost::interprocess::winapi::system_info::__anon7	typeref:struct:boost::interprocess::winapi::system_info::__anon7::__anon8	access:public
boost::interprocess::winapi::system_info::__anon7::dwOemId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^        unsigned long dwOemId;          \/\/ Obsolete field...do not use$/;"	m	union:boost::interprocess::winapi::system_info::__anon7	access:public
boost::interprocess::winapi::system_info::dwActiveProcessorMask	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long * dwActiveProcessorMask;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::dwAllocationGranularity	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwAllocationGranularity;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::dwNumberOfProcessors	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwNumberOfProcessors;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::dwPageSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwPageSize;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::dwProcessorType	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwProcessorType;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::lpMaximumApplicationAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    void * lpMaximumApplicationAddress;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::lpMinimumApplicationAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    void * lpMinimumApplicationAddress;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::wProcessorLevel	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned short wProcessorLevel;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::wProcessorRevision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned short wProcessorRevision;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum system_information_class {$/;"	g	namespace:boost::interprocess::winapi
boost::interprocess::winapi::system_interrupt_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_interrupt_information = 23,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_lookaside_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_lookaside_information = 45$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_performance_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_performance_information = 2,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_process_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_process_information = 5,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_processor_performance_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_processor_performance_information = 8,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_registry_quota_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_registry_quota_information = 37,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_time_of_day_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_time_of_day_information = 3,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_timeofday_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^union system_timeofday_information$/;"	u	namespace:boost::interprocess::winapi
boost::interprocess::winapi::system_timeofday_information::Reserved1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Reserved1[SystemTimeOfDayInfoLength];$/;"	m	union:boost::interprocess::winapi::system_timeofday_information	access:public
boost::interprocess::winapi::system_timeofday_information::data	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   } data;$/;"	m	union:boost::interprocess::winapi::system_timeofday_information	typeref:struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::system_timeofday_information::data_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   struct data_t$/;"	s	union:boost::interprocess::winapi::system_timeofday_information	access:public
boost::interprocess::winapi::system_timeofday_information::data_t::dwReserved	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      unsigned long dwReserved;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::system_timeofday_information::data_t::liExpTimeZoneBias	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liExpTimeZoneBias;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::system_timeofday_information::data_t::liKeBootTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liKeBootTime;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::system_timeofday_information::data_t::liKeSystemTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liKeSystemTime;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::system_timeofday_information::data_t::uCurrentTimeZoneId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      unsigned long uCurrentTimeZoneId;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::truncate_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long truncate_existing = 5;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::unicode_string_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct unicode_string_t {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::unicode_string_t::Buffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t *Buffer;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
boost::interprocess::winapi::unicode_string_t::Length	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Length;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
boost::interprocess::winapi::unicode_string_t::MaximumLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short MaximumLength;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
boost::interprocess::winapi::unlink_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool unlink_file(const char *filename)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *filename)
boost::interprocess::winapi::unlock_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool unlock_file_ex(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)
boost::interprocess::winapi::unmap_view_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int unmap_view_of_file(void *address)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *address)
boost::interprocess::winapi::virtual_protect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool virtual_protect(void *base_addr, std::size_t numbytes, unsigned long flNewProtect, unsigned long &lpflOldProtect)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *base_addr, std::size_t numbytes, unsigned long flNewProtect, unsigned long &lpflOldProtect)
boost::interprocess::winapi::virtual_unlock	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool virtual_unlock(void *base_addr, std::size_t numbytes)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *base_addr, std::size_t numbytes)
boost::interprocess::winapi::wait_abandoned	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_abandoned       = 0x00000080L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::wait_failed	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_failed          = (unsigned long)0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::wait_for_single_object	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long wait_for_single_object(void *handle, unsigned long time)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, unsigned long time)
boost::interprocess::winapi::wait_object_0	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_object_0        = 0;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::wait_timeout	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_timeout         = 258L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::wchar_variant	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct wchar_variant$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::wchar_variant::dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  long dummy;$/;"	m	struct:boost::interprocess::winapi::wchar_variant	access:public
boost::interprocess::winapi::wchar_variant::value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   } value;$/;"	m	struct:boost::interprocess::winapi::wchar_variant	typeref:union:boost::interprocess::winapi::wchar_variant::value_t	access:public
boost::interprocess::winapi::wchar_variant::value_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   union value_t{$/;"	u	struct:boost::interprocess::winapi::wchar_variant	access:public
boost::interprocess::winapi::wchar_variant::value_t::dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      unsigned long  long dummy;$/;"	m	union:boost::interprocess::winapi::wchar_variant::value_t	access:public
boost::interprocess::winapi::wchar_variant::value_t::pbstrVal	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      wchar_t *pbstrVal;$/;"	m	union:boost::interprocess::winapi::wchar_variant::value_t	access:public
boost::interprocess::winapi::win32_find_data_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct win32_find_data_t$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::win32_find_data_t::cAlternateFileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   char cAlternateFileName[14];$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::cFileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   char cFileName[MaxPath];$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::dwFileAttributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwFileAttributes;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::dwReserved0	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwReserved0;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::dwReserved1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwReserved1;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::ftCreationTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftCreationTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::ftLastAccessTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftLastAccessTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::ftLastWriteTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftLastWriteTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::nFileSizeHigh	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nFileSizeHigh;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::nFileSizeLow	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nFileSizeLow;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::write_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool write_file(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)
boost::interprocess::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^class windows_shared_memory$/;"	c	namespace:boost::interprocess
boost::interprocess::windows_shared_memory::get_mapping_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
boost::interprocess::windows_shared_memory::get_mapping_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline mapping_handle_t windows_shared_memory::get_mapping_handle() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
boost::interprocess::windows_shared_memory::get_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
boost::interprocess::windows_shared_memory::get_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline mode_t windows_shared_memory::get_mode() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
boost::interprocess::windows_shared_memory::get_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
boost::interprocess::windows_shared_memory::get_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline const char *windows_shared_memory::get_name() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
boost::interprocess::windows_shared_memory::m_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void *         m_handle;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
boost::interprocess::windows_shared_memory::m_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mode_t         m_mode;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
boost::interprocess::windows_shared_memory::m_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   std::string    m_name;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
boost::interprocess::windows_shared_memory::priv_close	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::windows_shared_memory	access:private	signature:()
boost::interprocess::windows_shared_memory::priv_close	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline void windows_shared_memory::priv_close()$/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
boost::interprocess::windows_shared_memory::priv_open_or_create	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   bool priv_open_or_create(ipcdetail::create_enum_t type, const char *filename, mode_t mode, std::size_t size, const permissions& perm = permissions());$/;"	p	class:boost::interprocess::windows_shared_memory	access:private	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, std::size_t size, const permissions& perm = permissions())
boost::interprocess::windows_shared_memory::priv_open_or_create	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline bool windows_shared_memory::priv_open_or_create$/;"	f	class:boost::interprocess::windows_shared_memory	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, std::size_t size, const permissions& perm)
boost::interprocess::windows_shared_memory::swap	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void swap(windows_shared_memory &other);$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:(windows_shared_memory &other)
boost::interprocess::windows_shared_memory::swap	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline void windows_shared_memory::swap(windows_shared_memory &other)$/;"	f	class:boost::interprocess::windows_shared_memory	signature:(windows_shared_memory &other)
boost::interprocess::windows_shared_memory::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory();$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:()
boost::interprocess::windows_shared_memory::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(create_only_t, const char *name, mode_t mode, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(create_only_t, const char *name, mode_t mode, std::size_t size, const permissions& perm = permissions())
boost::interprocess::windows_shared_memory::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(open_only_t, const char *name, mode_t mode)
boost::interprocess::windows_shared_memory::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(open_or_create_t, const char *name, mode_t mode, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(open_or_create_t, const char *name, mode_t mode, std::size_t size, const permissions& perm = permissions())
boost::interprocess::windows_shared_memory::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline windows_shared_memory::windows_shared_memory()$/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
boost::interprocess::windows_shared_memory::~windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   ~windows_shared_memory();$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:()
boost::interprocess::windows_shared_memory::~windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline windows_shared_memory::~windows_shared_memory()$/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
boost::interprocess::wmanaged_external_buffer	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_external_buffer;$/;"	t	namespace:boost::interprocess
boost::interprocess::wmanaged_heap_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_heap_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::wmanaged_mapped_file	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_mapped_file;$/;"	t	namespace:boost::interprocess
boost::interprocess::wmanaged_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::wmanaged_windows_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_windows_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::wmanaged_xsi_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_xsi_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::wobufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_obufferstream<wchar_t> wobufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::xsi	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^namespace xsi {$/;"	n	namespace:boost::interprocess
boost::interprocess::xsi	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^namespace xsi {$/;"	n	namespace:boost::interprocess
boost::interprocess::xsi::advanced_sem_op	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_op(int id, int value, bool undo = true)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id, int value, bool undo = true)
boost::interprocess::xsi::advanced_sem_open_or_create	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_open_or_create(::key_t key, int initval, int &semid, int perm)$/;"	f	namespace:boost::interprocess::xsi	signature:(::key_t key, int initval, int &semid, int perm)
boost::interprocess::xsi::advanced_sem_rm	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_rm(int id)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id)
boost::interprocess::xsi::simple_sem_op	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_op(int id, int value, bool undo = true)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id, int value, bool undo = true)
boost::interprocess::xsi::simple_sem_open_or_create	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_open_or_create(::key_t key, int initval, int &semid, int perm)$/;"	f	namespace:boost::interprocess::xsi	signature:(::key_t key, int initval, int &semid, int perm)
boost::interprocess::xsi::simple_sem_rm	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_rm(int id)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id)
boost::interprocess::xsi_key	/usr/include/boost/interprocess/xsi_key.hpp	/^class xsi_key$/;"	c	namespace:boost::interprocess
boost::interprocess::xsi_key::get_key	/usr/include/boost/interprocess/xsi_key.hpp	/^   key_t get_key() const$/;"	f	class:boost::interprocess::xsi_key	access:public	signature:() const
boost::interprocess::xsi_key::m_key	/usr/include/boost/interprocess/xsi_key.hpp	/^   key_t m_key;$/;"	m	class:boost::interprocess::xsi_key	access:private
boost::interprocess::xsi_key::xsi_key	/usr/include/boost/interprocess/xsi_key.hpp	/^   xsi_key()$/;"	f	class:boost::interprocess::xsi_key	access:public	signature:()
boost::interprocess::xsi_key::xsi_key	/usr/include/boost/interprocess/xsi_key.hpp	/^   xsi_key(const char *path, boost::uint8_t id)$/;"	f	class:boost::interprocess::xsi_key	access:public	signature:(const char *path, boost::uint8_t id)
boost::interprocess::xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^class xsi_named_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::xsi_named_mutex::get_mapping_handle	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
boost::interprocess::xsi_named_mutex::get_mapping_handle	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline mapping_handle_t xsi_named_mutex::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
boost::interprocess::xsi_named_mutex::get_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   const char *get_path() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
boost::interprocess::xsi_named_mutex::get_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline const char *xsi_named_mutex::get_path() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
boost::interprocess::xsi_named_mutex::get_permissions	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int get_permissions() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
boost::interprocess::xsi_named_mutex::get_permissions	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline int xsi_named_mutex::get_permissions() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
boost::interprocess::xsi_named_mutex::lock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
boost::interprocess::xsi_named_mutex::lock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::lock()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_named_mutex::m_id	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   boost::uint8_t m_id;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
boost::interprocess::xsi_named_mutex::m_key	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   key_t          m_key;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
boost::interprocess::xsi_named_mutex::m_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   std::string    m_path;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
boost::interprocess::xsi_named_mutex::m_perm	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int            m_perm;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
boost::interprocess::xsi_named_mutex::m_semid	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int            m_semid;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
boost::interprocess::xsi_named_mutex::operator =	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex &operator=(xsi_named_mutex &);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:(xsi_named_mutex &)
boost::interprocess::xsi_named_mutex::priv_close	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:()
boost::interprocess::xsi_named_mutex::priv_close	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::priv_close()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_named_mutex::priv_open_or_create	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   bool priv_open_or_create( ipcdetail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:( ipcdetail::create_enum_t type , const char *path , boost::uint8_t id , int perm)
boost::interprocess::xsi_named_mutex::priv_open_or_create	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline bool xsi_named_mutex::priv_open_or_create$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:(ipcdetail::create_enum_t type, const char *path, boost::uint8_t id, int perm)
boost::interprocess::xsi_named_mutex::remove	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   bool remove();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
boost::interprocess::xsi_named_mutex::remove	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline bool xsi_named_mutex::remove()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_named_mutex::swap	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void swap(xsi_named_mutex &other);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:(xsi_named_mutex &other)
boost::interprocess::xsi_named_mutex::swap	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::swap(xsi_named_mutex &other)$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:(xsi_named_mutex &other)
boost::interprocess::xsi_named_mutex::unlock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
boost::interprocess::xsi_named_mutex::unlock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::unlock()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_named_mutex::xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
boost::interprocess::xsi_named_mutex::xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex(open_or_create_t, const char *path, boost::uint8_t id, int perm = 0666)$/;"	f	class:boost::interprocess::xsi_named_mutex	access:public	signature:(open_or_create_t, const char *path, boost::uint8_t id, int perm = 0666)
boost::interprocess::xsi_named_mutex::xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex(xsi_named_mutex &);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:(xsi_named_mutex &)
boost::interprocess::xsi_named_mutex::xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline xsi_named_mutex::xsi_named_mutex()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_named_mutex::~xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   ~xsi_named_mutex();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
boost::interprocess::xsi_named_mutex::~xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline xsi_named_mutex::~xsi_named_mutex()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^class xsi_shared_memory$/;"	c	namespace:boost::interprocess
boost::interprocess::xsi_shared_memory::get_mapping_handle	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
boost::interprocess::xsi_shared_memory::get_mapping_handle	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline mapping_handle_t xsi_shared_memory::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
boost::interprocess::xsi_shared_memory::get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline int xsi_shared_memory::get_shmid() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
boost::interprocess::xsi_shared_memory::get_shmid	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   int get_shmid() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
boost::interprocess::xsi_shared_memory::get_shmid	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline int xsi_shared_memory::get_shmid() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
boost::interprocess::xsi_shared_memory::m_shmid	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   int            m_shmid;$/;"	m	class:boost::interprocess::xsi_shared_memory	access:private
boost::interprocess::xsi_shared_memory::priv_open_or_create	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   bool priv_open_or_create( ipcdetail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory	access:private	signature:( ipcdetail::create_enum_t type , const xsi_key &key , const permissions& perm , std::size_t size)
boost::interprocess::xsi_shared_memory::priv_open_or_create	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline bool xsi_shared_memory::priv_open_or_create$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(ipcdetail::create_enum_t type, const xsi_key &key, const permissions& permissions, std::size_t size)
boost::interprocess::xsi_shared_memory::remove	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   static bool remove(int shmid);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:(int shmid)
boost::interprocess::xsi_shared_memory::remove	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline bool xsi_shared_memory::remove(int shmid)$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(int shmid)
boost::interprocess::xsi_shared_memory::swap	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   void swap(xsi_shared_memory &other);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:(xsi_shared_memory &other)
boost::interprocess::xsi_shared_memory::swap	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline void xsi_shared_memory::swap(xsi_shared_memory &other)$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(xsi_shared_memory &other)
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   xsi_shared_memory();$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:()
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   xsi_shared_memory(create_only_t, const xsi_key &key, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(create_only_t, const xsi_key &key, std::size_t size, const permissions& perm = permissions())
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   xsi_shared_memory(open_only_t, const xsi_key &key)$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(open_only_t, const xsi_key &key)
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   xsi_shared_memory(open_only_t, int shmid)$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(open_only_t, int shmid)
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   xsi_shared_memory(open_or_create_t, const xsi_key &key, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(open_or_create_t, const xsi_key &key, std::size_t size, const permissions& perm = permissions())
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline xsi_shared_memory::xsi_shared_memory()$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:()
boost::interprocess::xsi_shared_memory::~xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   ~xsi_shared_memory();$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:()
boost::interprocess::xsi_shared_memory::~xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline xsi_shared_memory::~xsi_shared_memory()$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:()
boost::interprocess::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^class xsi_shared_memory_device$/;"	c	namespace:boost::interprocess
boost::interprocess::xsi_shared_memory_device::get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
boost::interprocess::xsi_shared_memory_device::get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline mapping_handle_t xsi_shared_memory_device::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
boost::interprocess::xsi_shared_memory_device::get_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
boost::interprocess::xsi_shared_memory_device::get_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline mode_t xsi_shared_memory_device::get_mode() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
boost::interprocess::xsi_shared_memory_device::get_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
boost::interprocess::xsi_shared_memory_device::get_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline const char *xsi_shared_memory_device::get_name() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
boost::interprocess::xsi_shared_memory_device::get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   int get_shmid() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
boost::interprocess::xsi_shared_memory_device::info_constants_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   struct info_constants_t$/;"	s	class:boost::interprocess::xsi_shared_memory_device	access:private
boost::interprocess::xsi_shared_memory_device::info_constants_t::FirstID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t FirstID = 2;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
boost::interprocess::xsi_shared_memory_device::info_constants_t::FirstID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::FirstID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
boost::interprocess::xsi_shared_memory_device::info_constants_t::LastID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t LastID  = 256;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
boost::interprocess::xsi_shared_memory_device::info_constants_t::LastID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::LastID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
boost::interprocess::xsi_shared_memory_device::info_constants_t::MaxName	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t MaxName = 32;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
boost::interprocess::xsi_shared_memory_device::info_constants_t::MaxName	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::MaxName;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
boost::interprocess::xsi_shared_memory_device::info_constants_t::NumID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t NumID   = LastID - FirstID;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
boost::interprocess::xsi_shared_memory_device::info_constants_t::NumID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::NumID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
boost::interprocess::xsi_shared_memory_device::info_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   struct info_t$/;"	s	class:boost::interprocess::xsi_shared_memory_device	access:private
boost::interprocess::xsi_shared_memory_device::info_t::names	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      } names[info_constants_t<0>::NumID];$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_t	typeref:struct:boost::interprocess::xsi_shared_memory_device::info_t::names_t	access:public
boost::interprocess::xsi_shared_memory_device::info_t::names_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      struct names_t$/;"	s	struct:boost::interprocess::xsi_shared_memory_device::info_t	access:public
boost::interprocess::xsi_shared_memory_device::info_t::names_t::buf	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^         char buf[info_constants_t<0>::MaxName];$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_t::names_t	access:public
boost::interprocess::xsi_shared_memory_device::m_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mode_t            m_mode;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
boost::interprocess::xsi_shared_memory_device::m_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   std::string       m_name;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
boost::interprocess::xsi_shared_memory_device::m_shm	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory m_shm;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
boost::interprocess::xsi_shared_memory_device::priv_obtain_index	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static void priv_obtain_index(mapped_region &m, xsi_named_mutex &m, std::string &path);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(mapped_region &m, xsi_named_mutex &m, std::string &path)
boost::interprocess::xsi_shared_memory_device::priv_obtain_index	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline void xsi_shared_memory_device::priv_obtain_index$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(mapped_region &reg, xsi_named_mutex &mut, std::string &path)
boost::interprocess::xsi_shared_memory_device::priv_open_or_create_name_id	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   bool priv_open_or_create_name_id( ipcdetail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:( ipcdetail::create_enum_t type , const char *shmname , boost::uint8_t id , mode_t mode , std::size_t size)
boost::interprocess::xsi_shared_memory_device::priv_open_or_create_name_id	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_open_or_create_name_id$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(ipcdetail::create_enum_t type, const char *filepath, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::priv_open_or_create_name_only	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   bool priv_open_or_create_name_only( ipcdetail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:( ipcdetail::create_enum_t type , const char *shmname , mode_t mode , std::size_t size)
boost::interprocess::xsi_shared_memory_device::priv_open_or_create_name_only	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_open_or_create_name_only$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(ipcdetail::create_enum_t type, const char *shmname, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::priv_remove_dead_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool priv_remove_dead_memory(info_t *info, const char *path);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(info_t *info, const char *path)
boost::interprocess::xsi_shared_memory_device::priv_remove_dead_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_remove_dead_memory$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(xsi_shared_memory_device::info_t *info, const char *path)
boost::interprocess::xsi_shared_memory_device::remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool remove(const char *shmname);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(const char *shmname)
boost::interprocess::xsi_shared_memory_device::remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool remove(int shmid);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(int shmid)
boost::interprocess::xsi_shared_memory_device::remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::remove(const char *shmname)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(const char *shmname)
boost::interprocess::xsi_shared_memory_device::remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::remove(int shmid)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(int shmid)
boost::interprocess::xsi_shared_memory_device::swap	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   void swap(xsi_shared_memory_device &other);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(xsi_shared_memory_device &other)
boost::interprocess::xsi_shared_memory_device::swap	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline void xsi_shared_memory_device::swap(xsi_shared_memory_device &other)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(xsi_shared_memory_device &other)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device();$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:()
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(create_only_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(create_only_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(create_only_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(create_only_t, const char *name, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_only_t, const char *filepath, boost::uint8_t id, mode_t mode)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_only_t, const char *filepath, boost::uint8_t id, mode_t mode)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_only_t, const char *name, mode_t mode)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_or_create_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_or_create_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_or_create_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_or_create_t, const char *name, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline xsi_shared_memory_device::xsi_shared_memory_device()$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:()
boost::interprocess::xsi_shared_memory_device::~xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   ~xsi_shared_memory_device();$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:()
boost::interprocess::xsi_shared_memory_device::~xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline xsi_shared_memory_device::~xsi_shared_memory_device()$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:()
boost::interprocess::xsi_shared_memory_file_wrapper	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^class xsi_shared_memory_file_wrapper$/;"	c	namespace:boost::interprocess	inherits:xsi_shared_memory
boost::interprocess::xsi_shared_memory_file_wrapper::swap	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^   void swap(xsi_shared_memory_file_wrapper &other)$/;"	f	class:boost::interprocess::xsi_shared_memory_file_wrapper	access:public	signature:(xsi_shared_memory_file_wrapper &other)
boost::interprocess::xsi_shared_memory_file_wrapper::xsi_shared_memory_file_wrapper	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^   xsi_shared_memory_file_wrapper() : xsi_shared_memory() {}$/;"	f	class:boost::interprocess::xsi_shared_memory_file_wrapper	access:public	signature:()
boost::interprocess::xsi_shared_memory_file_wrapper::xsi_shared_memory_file_wrapper	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^   xsi_shared_memory_file_wrapper(create_only_t, const xsi_key &key, mode_t mode, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::xsi_shared_memory_file_wrapper	access:public	signature:(create_only_t, const xsi_key &key, mode_t mode, std::size_t size, const permissions& perm = permissions())
boost::interprocess::xsi_shared_memory_file_wrapper::xsi_shared_memory_file_wrapper	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^   xsi_shared_memory_file_wrapper(open_only_t, const xsi_key &key, mode_t mode, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::xsi_shared_memory_file_wrapper	access:public	signature:(open_only_t, const xsi_key &key, mode_t mode, const permissions& perm = permissions())
boost::interprocess::xsi_shared_memory_file_wrapper::xsi_shared_memory_file_wrapper	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^   xsi_shared_memory_file_wrapper(open_or_create_t, const xsi_key &key, mode_t mode, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::xsi_shared_memory_file_wrapper	access:public	signature:(open_or_create_t, const xsi_key &key, mode_t mode, std::size_t size, const permissions& perm = permissions())
boost::interprocess::zero_memory	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type zero_memory        = boost::container::zero_memory;$/;"	m	namespace:boost::interprocess
boost::intrusive	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace intrusive{$/;"	n	namespace:boost
boost::intrusive	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace intrusive {$/;"	n	namespace:boost
boost::intrusive::max_pointer_plus_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct max_pointer_plus_bits<boost::interprocess::offset_ptr<void, P, O, A>, OffsetAlignment>$/;"	s	namespace:boost::intrusive
boost::intrusive::max_pointer_plus_bits::value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const std::size_t value = ::boost::interprocess::ipcdetail::ls_zeros<OffsetAlignment>::value - 1;$/;"	m	struct:boost::intrusive::max_pointer_plus_bits	access:public
boost::intrusive::pointer_plus_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct pointer_plus_bits<boost::interprocess::offset_ptr<T, P, O, A>, NumBits>$/;"	s	namespace:boost::intrusive
boost::intrusive::pointer_plus_bits::Mask	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const std::size_t Mask = ((std::size_t(1) << NumBits) - 1) << 1u;$/;"	m	struct:boost::intrusive::pointer_plus_bits	access:public
boost::intrusive::pointer_plus_bits::caster_t	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef ::boost::interprocess::pointer_size_t_caster<T*> caster_t;$/;"	t	struct:boost::intrusive::pointer_plus_bits	access:public
boost::intrusive::pointer_plus_bits::get_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static std::size_t get_bits(const pointer &n)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(const pointer &n)
boost::intrusive::pointer_plus_bits::get_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static pointer get_pointer(const pointer &n)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(const pointer &n)
boost::intrusive::pointer_plus_bits::pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef boost::interprocess::offset_ptr<T, P, O, A>      pointer;$/;"	t	struct:boost::intrusive::pointer_plus_bits	access:public
boost::intrusive::pointer_plus_bits::set_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static void set_bits(pointer &n, std::size_t b)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(pointer &n, std::size_t b)
boost::intrusive::pointer_plus_bits::set_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static void set_pointer(pointer &n, const pointer &p)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(pointer &n, const pointer &p)
boost::pointer_to_other	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct pointer_to_other$/;"	s	namespace:boost
boost::pointer_to_other::type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef ::boost::interprocess::offset_ptr<U, DifferenceType, OffsetType, OffsetAlignment> type;$/;"	t	struct:boost::pointer_to_other	access:public
boost::posix_time	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^namespace posix_time$/;"	n	namespace:boost
boost::posix_time	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^namespace posix_time$/;"	n	namespace:boost
boost::posix_time	/usr/include/boost/interprocess/sync/lock_options.hpp	/^namespace posix_time$/;"	n	namespace:boost
boost::posix_time	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^namespace posix_time$/;"	n	namespace:boost
boost::to_raw_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^T * to_raw_pointer(boost::interprocess::intersegment_ptr<T> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::intersegment_ptr<T> const & p)
boost::to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^inline T *to_raw_pointer(boost::interprocess::intrusive_ptr<T, VP> p)$/;"	f	namespace:boost	signature:(boost::interprocess::intrusive_ptr<T, VP> p)
boost::to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^T *to_raw_pointer(boost::interprocess::scoped_ptr<T, D> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::scoped_ptr<T, D> const & p)
boost::to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^T * to_raw_pointer(boost::interprocess::shared_ptr<T, VoidAllocator, Deleter> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::shared_ptr<T, VoidAllocator, Deleter> const & p)
bottom_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_header &bottom_msg()$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:()
broken_state	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   static const boost::uint32_t broken_state  = 2;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public
bucket_ptr	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_ptr               bucket_ptr;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
bucket_traits	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_traits            bucket_traits;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
bucket_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_t::bucket_type              bucket_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
bucket_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_type              bucket_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
buf	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      wchar_t buf[32767];$/;"	m	struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
buf	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^         char buf[info_constants_t<0>::MaxName];$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_t::names_t	access:public
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:() const
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:() const
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:() const
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<const CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:() const
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buf, std::size_t length)$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(CharT *buf, std::size_t length)
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buf, std::size_t length)$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(CharT *buf, std::size_t length)
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buf, std::size_t length)$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(CharT *buf, std::size_t length)
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(const CharT *buf, std::size_t length)$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(const CharT *buf, std::size_t length)
buffer_to_store_init_data_from_file	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual void *buffer_to_store_init_data_from_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:()
buffer_to_store_init_data_from_file	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual void *buffer_to_store_init_data_from_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:()
buffer_to_store_init_data_from_file	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual void *buffer_to_store_init_data_from_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:()
buffer_to_store_init_data_from_file	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual void *buffer_to_store_init_data_from_file() = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:()
buffer_with_final_data_to_file	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual const void *buffer_with_final_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:()
buffer_with_final_data_to_file	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual const void *buffer_with_final_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:()
buffer_with_final_data_to_file	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual const void *buffer_with_final_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:()
buffer_with_final_data_to_file	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual const void *buffer_with_final_data_to_file() = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:()
buffer_with_init_data_to_file	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual const void *buffer_with_init_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:()
buffer_with_init_data_to_file	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual const void *buffer_with_init_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:()
buffer_with_init_data_to_file	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual const void *buffer_with_init_data_to_file()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:()
buffer_with_init_data_to_file	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual const void *buffer_with_init_data_to_file() = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:()
bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferbuf<char>        bufferbuf;$/;"	t	namespace:boost::interprocess
bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferstream<char>     bufferstream;$/;"	t	namespace:boost::interprocess
build_number_seq	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct build_number_seq<0, index_tuple<Indexes...> >$/;"	s	namespace:boost::interprocess::ipcdetail
build_number_seq	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct build_number_seq<Num, index_tuple<Indexes...> >$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:build_number_seq
busy_error	/usr/include/boost/interprocess/errors.hpp	/^   busy_error,       \/\/ implies trying again might succeed$/;"	e	enum:boost::interprocess::error_code_t
bytes_to_str	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^inline bool bytes_to_str(const void *mem, const std::size_t mem_length, char *out_str, std::size_t &out_length)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const void *mem, const std::size_t mem_length, char *out_str, std::size_t &out_length)
cAlternateFileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   char cAlternateFileName[14];$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
cFileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   char cFileName[MaxPath];$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl(const cache_impl &other)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(const cache_impl &other)
cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl(segment_manager *segment_mngr, size_type max_cached_nodes)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(segment_manager *segment_mngr, size_type max_cached_nodes)
cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class cache_impl$/;"	c	namespace:boost::interprocess::ipcdetail
cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool$/;"	f	class:boost::interprocess::cached_adaptive_pool	access:public	signature:(const cached_adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::cached_adaptive_pool	access:public	signature:(SegmentManager *segment_mngr, std::size_t max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^class cached_adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::cached_allocator_impl
cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool_v1$/;"	f	class:boost::interprocess::ipcdetail::cached_adaptive_pool_v1	access:public	signature:(const cached_adaptive_pool_v1 <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool_v1(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::ipcdetail::cached_adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr, size_type max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^class cached_adaptive_pool_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:ipcdetail::cached_allocator_impl
cached_allocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void *cached_allocation()$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:()
cached_allocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void cached_allocation(size_type n, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(size_type n, multiallocation_chain &chain)
cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(const cached_allocator_impl <T2, NodePool2, Version> &other)
cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl(const cached_allocator_impl &other)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(const cached_allocator_impl &other)
cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl(segment_manager *segment_mngr, size_type max_cached_nodes)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(segment_manager *segment_mngr, size_type max_cached_nodes)
cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class cached_allocator_impl$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:array_allocation_impl
cached_deallocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void cached_deallocation(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(multiallocation_chain &chain)
cached_deallocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void cached_deallocation(void *ptr)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(void *ptr)
cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator$/;"	f	class:boost::interprocess::cached_node_allocator	access:public	signature:(const cached_node_allocator<T2, SegmentManager, NodesPerBlock> &other)
cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::cached_node_allocator	access:public	signature:(SegmentManager *segment_mngr, size_type max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^class cached_node_allocator$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::cached_allocator_impl
cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator_v1$/;"	f	class:boost::interprocess::ipcdetail::cached_node_allocator_v1	access:public	signature:(const cached_node_allocator_v1 <T2, SegmentManager, NodesPerBlock> &other)
cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator_v1(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::ipcdetail::cached_node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr, size_type max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^class cached_node_allocator_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:ipcdetail::cached_allocator_impl
calculate_lcm_and_needs_backwards_lcmed	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool calculate_lcm_and_needs_backwards_lcmed$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(size_type backwards_multiple, size_type received_size, size_type size_to_achieve, size_type &lcm_out, size_type &needs_backwards_lcmed_out)
calculate_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static std::size_t calculate_size(std::size_t orig_size, std::size_t &pow, std::size_t &frc)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t orig_size, std::size_t &pow, std::size_t &frc)
caster_t	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef ::boost::interprocess::pointer_size_t_caster<T*> caster_t;$/;"	t	struct:boost::intrusive::pointer_plus_bits	access:public
ceil_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static size_type ceil_units(size_type size)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(size_type size)
char_if_void	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct char_if_void$/;"	s	namespace:boost::interprocess::ipcdetail
char_if_void	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct char_if_void<void>$/;"	s	namespace:boost::interprocess::ipcdetail
char_ptr	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<char>::type                                              char_ptr;$/;"	t	class:boost::interprocess::ipcdetail::msg_hdr_t	access:private
char_ptr	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<char>::type                                    char_ptr;$/;"	t	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public
char_ptr	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<char>::type                                    char_ptr;$/;"	t	class:boost::interprocess::message_queue_t	access:public
char_ptr	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^         rebind_pointer<char>::type                         char_ptr;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
char_ptr	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^         rebind_pointer<char>::type                         char_ptr;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const CharType *name)$/;"	f	class:boost::interprocess::ipcdetail::char_ptr_holder	access:public	signature:(const CharType *name)
char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const anonymous_instance_t *)$/;"	f	class:boost::interprocess::ipcdetail::char_ptr_holder	access:public	signature:(const anonymous_instance_t *)
char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const unique_instance_t *)$/;"	f	class:boost::interprocess::ipcdetail::char_ptr_holder	access:public	signature:(const unique_instance_t *)
char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class char_ptr_holder$/;"	c	namespace:boost::interprocess::ipcdetail
char_ptr_holder_t	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:private
char_ptr_holder_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^           segment_manager::char_ptr_holder_t         char_ptr_holder_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
char_ptr_holder_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:private
char_ptr_holder_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
char_ptr_holder_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
char_ptr_holder_t	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:private
char_ptr_holder_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::char_ptr_holder<CharType>                char_ptr_holder_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
char_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef CharType                                   char_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
char_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef CharType                                   char_type;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
char_type	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef typename SegmentManager::char_type char_type;$/;"	t	class:boost::interprocess::ipcdetail::named_proxy	access:private
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT                                         char_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT                                         char_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_key	access:public
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT char_type;$/;"	t	struct:boost::interprocess::ipcdetail::intrusive_compare_key	access:public
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharType char_type;$/;"	t	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename first_type::char_type       char_type;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::char_type   char_type;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
char_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename MapConfig::char_type                 char_type;$/;"	t	class:boost::interprocess::iset_index	access:private
char_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename MapConfig::char_type                 char_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
char_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename MapConfig::char_type              char_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
char_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef CharType                       char_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef CharT                                         char_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharVector::value_type   char_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
check_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool check_alignment(const void *ptr)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(const void *ptr)
check_if_filename_complies_with_pid	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^static bool check_if_filename_complies_with_pid$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:(const char *filename, const char *prefix, OS_process_id_t pid, std::string &file_suffix, bool creation_time = false)
check_if_owner_dead_and_take_ownership_atomically	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool check_if_owner_dead_and_take_ownership_atomically();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private	signature:()
check_if_owner_dead_and_take_ownership_atomically	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::check_if_owner_dead_and_take_ownership_atomically()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
check_offset_t_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static bool check_offset_t_size(std::size_t , false_)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(std::size_t , false_)
check_offset_t_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static bool check_offset_t_size(std::size_t size, true_)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(std::size_t size, true_)
check_sanity	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool check_sanity()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
check_sanity	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool check_sanity()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear()$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:()
clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:()
clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear()$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:()
clear_free_memory	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void clear_free_memory();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
clear_free_memory	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::clear_free_memory()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
clear_segments	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void clear_segments()$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:()
close	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual void close()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:()
close	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual void close()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:()
close	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual void close()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:()
close	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual void close() = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:()
close	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   void close(windows_named_sync_interface &sync_interface);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:public	signature:(windows_named_sync_interface &sync_interface)
close	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^inline void windows_named_sync::close(windows_named_sync_interface &sync_interface)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_sync	signature:(windows_named_sync_interface &sync_interface)
close	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void close()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:()
close	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void close()$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:()
close_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool close_file(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
close_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      close_func(self_t * const frontend)$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public	signature:(self_t * const frontend)
close_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   struct close_func$/;"	s	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
close_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned int close_handle(void* handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void* handle)
close_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool close_impl()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:()
close_lock_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline void close_lock_file(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
co_uninitializer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   co_uninitializer(bool b_uninitialize)$/;"	f	struct:boost::interprocess::winapi::co_uninitializer	access:public	signature:(bool b_uninitialize)
co_uninitializer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct co_uninitializer$/;"	s	namespace:boost::interprocess::winapi
com_releaser	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   com_releaser(Object *&object) : object_(object) {}$/;"	f	struct:boost::interprocess::winapi::com_releaser	access:public	signature:(Object *&object)
com_releaser	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct com_releaser$/;"	s	namespace:boost::interprocess::winapi
compare_file_serial	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool compare_file_serial(int fd, const locking_file_serial_id &id)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd, const locking_file_serial_id &id)
condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      condattr_wrapper()$/;"	f	struct:boost::interprocess::ipcdetail::condattr_wrapper	access:public	signature:()
condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct condattr_wrapper$/;"	s	namespace:boost::interprocess::ipcdetail
condition_8a_wrapper	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_8a_wrapper(){}$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:()
condition_8a_wrapper	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_8a_wrapper(const condition_8a_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:private	signature:(const condition_8a_wrapper &)
condition_8a_wrapper	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^class condition_8a_wrapper$/;"	c	namespace:boost::interprocess::ipcdetail
condition_algorithm_8a	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_algorithm_8a();$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private	signature:()
condition_algorithm_8a	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_algorithm_8a(const condition_algorithm_8a &);$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private	signature:(const condition_algorithm_8a &)
condition_algorithm_8a	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^class condition_algorithm_8a$/;"	c	namespace:boost::interprocess::ipcdetail
condition_any_algorithm	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_algorithm();$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:()
condition_any_algorithm	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_algorithm(const condition_any_algorithm &);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:(const condition_any_algorithm &)
condition_any_algorithm	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^class condition_any_algorithm$/;"	c	namespace:boost::interprocess::ipcdetail
condition_any_type	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   typedef ipcdetail::shm_named_condition_any       condition_any_type;$/;"	t	class:boost::interprocess::named_condition_any	access:private
condition_any_type	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   typedef ipcdetail::windows_named_condition_any   condition_any_type;$/;"	t	class:boost::interprocess::named_condition_any	access:private
condition_any_wrapper	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_wrapper(){}$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:()
condition_any_wrapper	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_wrapper(const condition_any_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:private	signature:(const condition_any_wrapper &)
condition_any_wrapper	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^class condition_any_wrapper$/;"	c	namespace:boost::interprocess::ipcdetail
condition_data	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      condition_data()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
condition_data	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   struct condition_data$/;"	s	class:boost::interprocess::ipcdetail::windows_condition	access:private
condition_data	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   struct condition_data$/;"	s	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private
condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      condition_initializer(pthread_cond_t &cond, pthread_condattr_t &cond_attr)$/;"	f	class:boost::interprocess::ipcdetail::condition_initializer	access:public	signature:(pthread_cond_t &cond, pthread_condattr_t &cond_attr)
condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class condition_initializer$/;"	c	namespace:boost::interprocess::ipcdetail
condition_type	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   typedef ipcdetail::shm_named_condition       condition_type;$/;"	t	class:boost::interprocess::named_condition	access:private
condition_type	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   typedef ipcdetail::windows_named_condition   condition_type;$/;"	t	class:boost::interprocess::named_condition	access:private
condvar_type	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   typedef typename ConditionAnyMembers::condvar_type    condvar_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private
condvar_type	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      typedef interprocess_condition   condvar_type;$/;"	t	class:boost::interprocess::interprocess_condition_any::members	access:public
condvar_type	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      typedef interprocess_condition   condvar_type;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:public
condvar_type	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      typedef interprocess_condition   condvar_type;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:public
consistent	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   void consistent();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
consistent	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void robust_spin_mutex<Mutex>::consistent()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<const VoidAllocator>::type                   const_allocator_pointer;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^         rebind_pointer<const A>::type                   const_allocator_pointer;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^         rebind_pointer<const VoidAllocator>::type                         const_allocator_pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
const_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct const_cast_tag {};$/;"	s	namespace:boost::interprocess::ipcdetail
const_char_ptr_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^         rebind_pointer<const CharT>::type               const_char_ptr_t;$/;"	t	struct:boost::interprocess::ipcdetail::index_key	access:public
const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<const Deleter>::type                         const_deleter_pointer;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^         rebind_pointer<const D>::type                   const_deleter_pointer;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^         rebind_pointer<const Deleter>::type                               const_deleter_pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
const_iterator	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::const_iterator           const_iterator;$/;"	t	class:boost::interprocess::iset_index	access:public
const_iterator	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::const_iterator           const_iterator;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
const_iterator	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   typedef const void * const_iterator;$/;"	t	class:boost::interprocess::null_index	access:public
const_named_iterator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      const_named_iterator                            const_named_iterator;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
const_named_iterator	/usr/include/boost/interprocess/segment_manager.hpp	/^      <typename named_index_t::const_iterator, named_transform> const_named_iterator;$/;"	t	class:boost::interprocess::segment_manager	access:public
const_pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
const_pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^         rebind_pointer<const T>::type          const_pointer;$/;"	t	class:boost::interprocess::allocator	access:public
const_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
const_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
const_pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
const_pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
const_pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         rebind_pointer<const T>::type                   const_pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
const_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> const_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
const_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   const_pointer_cast(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)
const_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> const_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
const_reference	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
const_reference	/usr/include/boost/interprocess/allocators/allocator.hpp	/^                     <const value_type>::type   const_reference;$/;"	t	class:boost::interprocess::allocator	access:public
const_reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
const_reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
const_reference	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
const_reference	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
const_reference	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
const_reference	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^                     <const value_type>::type                  const_reference;$/;"	t	class:boost::interprocess::shared_ptr	access:public
const_reference	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^                     <T>::type            const_reference;$/;"	t	class:boost::interprocess::weak_ptr	access:private
const_this_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^            < const this_type >::type        const_this_allocator;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
const_type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Element>::type            const_type;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:public
const_type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Head>::type   const_type;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:public
const_unique_iterator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      const_unique_iterator                           const_unique_iterator;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
const_unique_iterator	/usr/include/boost/interprocess/segment_manager.hpp	/^      <typename unique_index_t::const_iterator, unique_transform> const_unique_iterator;$/;"	t	class:boost::interprocess::segment_manager	access:public
constants	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   typedef base_constants_t<0> constants;$/;"	t	class:boost::interprocess::interprocess_sharable_mutex	access:private
constants	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   typedef base_constants_t<0> constants;$/;"	t	class:boost::interprocess::interprocess_upgradable_mutex	access:private
construct	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void construct(const pointer &ptr, BOOST_FWD_REF(P) p)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr, BOOST_FWD_REF(P) p)
construct	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void construct(const pointer &ptr, BOOST_FWD_REF(P) p)$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(const pointer &ptr, BOOST_FWD_REF(P) p)
construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
construct	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void construct(void *mem, false_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:private	signature:(void *mem, false_, const index_tuple<IdxPack...>&)
construct	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void construct(void *mem, true_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:private	signature:(void *mem, true_, const index_tuple<IdxPack...>&)
construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
construct	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   void construct(void *address, typename enable_if_c<!is_same<ArgType, no_arg_t>::value>::type * = 0) const$/;"	f	class:boost::interprocess::ipcdetail::named_creation_functor	access:public	signature:(void *address, typename enable_if_c<!is_same<ArgType, no_arg_t>::value>::type * = 0) const
construct	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   void construct(void *address, typename enable_if_c<is_same<ArgType, no_arg_t>::value>::type * = 0) const$/;"	f	class:boost::interprocess::ipcdetail::named_creation_functor	access:public	signature:(void *address, typename enable_if_c<is_same<ArgType, no_arg_t>::value>::type * = 0) const
construct_func_t	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   typedef ipcdetail::named_creation_functor<interprocess_sharable_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_sharable_mutex	access:private
construct_func_t	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   typedef ipcdetail::named_creation_functor<interprocess_upgradable_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_upgradable_mutex	access:private
construct_func_t	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   typedef boost::interprocess::ipcdetail::named_creation_functor<internal_condition> construct_func_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
construct_func_t	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   typedef boost::interprocess::ipcdetail::named_creation_functor<internal_condition> construct_func_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
construct_func_t	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   typedef ipcdetail::named_creation_functor<interprocess_mutex> construct_func_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private
construct_func_t	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   typedef named_creation_functor<interprocess_recursive_mutex> construct_func_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private
construct_func_t	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   typedef named_creation_functor<interprocess_semaphore, int> construct_func_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private
construct_func_t	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   typedef ipcdetail::named_creation_functor<interprocess_upgradable_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_upgradable_mutex	access:private
construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct_it(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct_it(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
construct_iter_proxy	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct construct_iter_proxy$/;"	s	class:boost::interprocess::segment_manager	access:public
construct_map	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static void construct_map(void *addr)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(void *addr)
construct_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static void construct_map(void *addr)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(void *addr)
construct_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void construct_n(void *, std::size_t, std::size_t &) {}$/;"	f	struct:boost::interprocess::ipcdetail::placement_destroy	access:public	signature:(void *, std::size_t, std::size_t &)
construct_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void construct_n(void *mem, std::size_t num, std::size_t &constructed) = 0;$/;"	p	struct:boost::interprocess::ipcdetail::in_place_interface	access:public	signature:(void *mem, std::size_t num, std::size_t &constructed)
construct_n	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   virtual void construct_n(void *mem$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:public	signature:(void *mem , std::size_t num , std::size_t &constructed)
construct_proxy	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct construct_proxy$/;"	s	class:boost::interprocess::segment_manager	access:public
control_word_t	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   struct control_word_t$/;"	s	class:boost::interprocess::interprocess_sharable_mutex	access:private
control_word_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct control_word_t$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
copy_on_write	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , copy_on_write$/;"	e	enum:boost::interprocess::__anon2
correct_state	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   static const boost::uint32_t correct_state = 0;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public
corrupted_error	/usr/include/boost/interprocess/errors.hpp	/^   corrupted_error,$/;"	e	enum:boost::interprocess::error_code_t
count	/usr/include/boost/interprocess/detail/win32_api.hpp	/^	unsigned int count;		\/\/ current semaphore count$/;"	m	struct:boost::interprocess::winapi::interprocess_semaphore_basic_information	access:public
counted_base_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<sp_counted_base>::type                       counted_base_ptr;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
counted_base_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<sp_counted_base>::type                       counted_base_ptr;$/;"	t	class:boost::interprocess::ipcdetail::weak_count	access:private
counted_impl	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   typedef sp_counted_impl_pd<VoidAllocator, Deleter>                counted_impl;$/;"	t	class:boost::interprocess::ipcdetail::weak_count	access:private
counted_impl	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   typedef sp_counted_impl_pd<VoidAllocator, Deleter>       counted_impl;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
counted_impl_allocator	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      portable_rebind_alloc<counted_impl>::type                      counted_impl_allocator;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
counted_impl_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<counted_impl>::type                          counted_impl_ptr;$/;"	t	class:boost::interprocess::ipcdetail::weak_count	access:private
counted_impl_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<counted_impl>::type                         counted_impl_ptr;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
create_always	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long create_always     = 2;$/;"	m	namespace:boost::interprocess::winapi
create_and_get_robust_lock_file_path	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void create_and_get_robust_lock_file_path(std::string &s, OS_process_id_t pid)$/;"	f	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers	signature:(std::string &s, OS_process_id_t pid)
create_and_get_singleton_lock_file_path	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static void create_and_get_singleton_lock_file_path(std::string &s)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private	signature:(std::string &s)
create_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static bucket_ptr create_buckets(allocator_type &alloc, size_type num)$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:(allocator_type &alloc, size_type num)
create_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void create_device(DeviceAbstraction &dev, const device_id_t & id, std::size_t size, const permissions &perm, false_ file_like)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, const device_id_t & id, std::size_t size, const permissions &perm, false_ file_like)
create_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void create_device(DeviceAbstraction &dev, const device_id_t & id, std::size_t, const permissions &perm, true_ file_like)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, const device_id_t & id, std::size_t, const permissions &perm, true_ file_like)
create_directory	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool create_directory(const char *path)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *path)
create_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool create_directory(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
create_enum_t	/usr/include/boost/interprocess/creation_tags.hpp	/^enum create_enum_t$/;"	g	namespace:boost::interprocess::ipcdetail
create_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *create_file(const char *name, unsigned long access, unsigned long creation_flags, unsigned long attributes, interprocess_security_attributes *psec)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name, unsigned long access, unsigned long creation_flags, unsigned long attributes, interprocess_security_attributes *psec)
create_file_mapping	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * create_file_mapping (void * handle, unsigned long access, unsigned __int64 file_offset, const char * name, interprocess_security_attributes *psec)$/;"	f	namespace:boost::interprocess::winapi	signature:(void * handle, unsigned long access, unsigned __int64 file_offset, const char * name, interprocess_security_attributes *psec)
create_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool  create_impl   (void *addr, size_type size)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(void *addr, size_type size)
create_new	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long create_new        = 1;$/;"	m	namespace:boost::interprocess::winapi
create_new_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t create_new_file$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name, mode_t mode, const permissions & perm = permissions(), bool temporary = false)
create_new_segment	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual std::pair<void *, size_type> create_new_segment(size_type alloc_size)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(size_type alloc_size)
create_new_segment	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual std::pair<void *, std::size_t> create_new_segment(std::size_t mem) = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:(std::size_t mem)
create_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const create_only_t    create_only    = create_only_t();$/;"	m	namespace:boost::interprocess
create_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct create_only_t {};$/;"	s	namespace:boost::interprocess
create_open_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   create_open_func(BasicManagedMemoryImpl * const frontend, create_enum_t type)$/;"	f	class:boost::interprocess::ipcdetail::create_open_func	access:public	signature:(BasicManagedMemoryImpl * const frontend, create_enum_t type)
create_open_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^class create_open_func$/;"	c	namespace:boost::interprocess::ipcdetail
create_open_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      create_open_func(self_t * const    frontend,$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public	signature:(self_t * const frontend, type_t type, size_type segment_number)
create_open_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   struct create_open_func$/;"	s	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
create_open_func_t	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:private
create_open_func_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef ipcdetail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:private
create_open_func_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef ipcdetail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
create_open_func_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typedef ipcdetail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
create_open_func_t	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   typedef ipcdetail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public
create_or_open_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t create_or_open_file$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name, mode_t mode, const permissions & perm = permissions(), bool temporary = false)
create_posix_mapped_region	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^         create_posix_mapped_region(void *address, std::size_t size)$/;"	f	class:boost::interprocess::ipcdetail::raw_mapped_region_creator	access:public	signature:(void *address, std::size_t size)
create_tmp_and_clean_old	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void create_tmp_and_clean_old(std::string &tmp_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(std::string &tmp_name)
create_tmp_and_clean_old_and_get_filename	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void create_tmp_and_clean_old_and_get_filename(const char *filename, std::string &tmp_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *filename, std::string &tmp_name)
create_tmp_subdir_and_get_pid_based_filepath	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^static void create_tmp_subdir_and_get_pid_based_filepath$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:(const char *subdir_name, const char *file_prefix, OS_process_id_t pid, std::string &s, bool creation_time = false)
ct_max_pow2_less	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct ct_max_pow2_less$/;"	s	namespace:boost::interprocess::ipcdetail
ct_rounded_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct ct_rounded_size$/;"	s	namespace:boost::interprocess::ipcdetail
ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
ctrl_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t ctrl_bits = 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
cvoid_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<const void>::type                cvoid_pointer;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
cvoid_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<const void>::type                cvoid_pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:private
cvoid_ptr	/usr/include/boost/interprocess/allocators/allocator.hpp	/^         rebind_pointer<const void>::type          cvoid_ptr;$/;"	t	class:boost::interprocess::allocator	access:private
data	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void *data() const$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func	access:public	signature:() const
data	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void *data() const$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func	access:public	signature:() const
data	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   } data;$/;"	m	union:boost::interprocess::winapi::system_timeofday_information	typeref:struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
data	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void * data(){ return this+1; }  \/\/$/;"	f	class:boost::interprocess::ipcdetail::msg_hdr_t	access:public	signature:()
data_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   struct data_t$/;"	s	union:boost::interprocess::winapi::system_timeofday_information	access:public
deallocate	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate(const pointer &ptr, size_type)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr, size_type)
deallocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate(const pointer &ptr, size_type count)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(const pointer &ptr, size_type count)
deallocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate(const pointer &ptr, size_type count)$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:(const pointer &ptr, size_type count)
deallocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void  deallocate           (void *addr)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(void *addr)
deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(void *addr)
deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::deallocate(void* addr)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void* addr)
deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(void *addr)
deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::deallocate(void* addr)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void* addr)
deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(void *addr)
deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::deallocate(void* addr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void* addr)
deallocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void   deallocate          (void *addr)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(void *addr)
deallocate_all_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_all_cached_nodes()$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:()
deallocate_cache	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_cache()$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:()
deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:()
deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:()
deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:()
deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:()
deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
deallocate_individual	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_individual(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(multiallocation_chain &chain)
deallocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_individual(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(multiallocation_chain &chain)
deallocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_individual(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:(multiallocation_chain &chain)
deallocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_many(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(multiallocation_chain &chain)
deallocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_many(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(multiallocation_chain &chain)
deallocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void deallocate_many(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(multiallocation_chain &chain)
deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void deallocate_many(MemoryAlgorithm *memory_algo, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, multiallocation_chain &chain)
deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   deallocate_many(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::multiallocation_chain &chain)
deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void deallocate_many(multiallocation_chain &chain);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(multiallocation_chain &chain)
deallocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   deallocate_many(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::multiallocation_chain &chain)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::multiallocation_chain &chain)
deallocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void deallocate_many(multiallocation_chain &chain);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(multiallocation_chain &chain)
deallocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void deallocate_many(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(multiallocation_chain &chain)
deallocate_node	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_node(void *ptr)$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:(void *ptr)
deallocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_nodes(multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:(multiallocation_chain &chain)
deallocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_nodes(multiallocation_chain &nodes, size_type num)$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:(multiallocation_chain &nodes, size_type num)
deallocate_one	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &p)
deallocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(const pointer &p)
deallocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public	signature:(const pointer &p)
dec_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void dec_offset(std::ptrdiff_t bytes)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(std::ptrdiff_t bytes)
dec_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void dec_offset(DifferenceType bytes)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(DifferenceType bytes)
dec_ref_count	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type dec_ref_count()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
decrement	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void decrement()$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:()
defer_lock	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const defer_lock_type      defer_lock      = defer_lock_type();$/;"	m	namespace:boost::interprocess
defer_lock_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct defer_lock_type{};$/;"	s	namespace:boost::interprocess
delete_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long delete_access = 0x00010000L;$/;"	m	namespace:boost::interprocess::winapi
delete_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_file(const char *name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name)
delete_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool delete_file(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
delete_group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static bool delete_group(segment_group_id id)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id id)
delete_subdirectories	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_subdirectories(const std::string &refcstrRootDirectory, const char *dont_delete_this)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const std::string &refcstrRootDirectory, const char *dont_delete_this)
delete_subdirectories_recursive	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_subdirectories_recursive$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const std::string &refcstrRootDirectory, const char *dont_delete_this, unsigned int count)
deleter	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   struct deleter$/;"	s	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
deleter	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct deleter$/;"	s	class:boost::interprocess::segment_manager	access:public
deleter	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   deleter(segment_manager_pointer pmngr)$/;"	f	class:boost::interprocess::deleter	access:public	signature:(segment_manager_pointer pmngr)
deleter	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^class deleter$/;"	c	namespace:boost::interprocess
deleter	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef typename ManagedMemory::template deleter<T>::type      deleter;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
deleter_const_reference	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename ipcdetail::add_reference<const D>::type deleter_const_reference;$/;"	t	class:boost::interprocess::unique_ptr	access:private
deleter_reference	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename ipcdetail::add_reference<D>::type deleter_reference;$/;"	t	class:boost::interprocess::unique_ptr	access:private
deleter_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef Deleter deleter_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
deleter_type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef D deleter_type;$/;"	t	class:boost::interprocess::unique_ptr	access:public
dereference	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type dereference() const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:() const
derivation_hook	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      >::type                                                  derivation_hook;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
derivation_hook	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      >::type        derivation_hook;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   Derived *derived()$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:private	signature:()
derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   Derived *derived()$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:private	signature:()
derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const Derived *derived() const$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:private	signature:() const
derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const Derived *derived() const$/;"	f	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:private	signature:() const
destroy	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void destroy(const pointer &ptr)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr)
destroy	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void destroy(const pointer &ptr)$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(const pointer &ptr)
destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   void destroy(void *mem)$/;"	f	struct:boost::interprocess::ipcdetail::placement_destroy	access:private	signature:(void *mem)
destroy	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy(const CharType *name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const CharType *name)
destroy	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy(const unique_instance_t *const )$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const unique_instance_t *const )
destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool destroy(const CharType *name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType *name)
destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool destroy(const ipcdetail::unique_instance_t *)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const ipcdetail::unique_instance_t *)
destroy	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void destroy() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:()
destroy_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static void destroy_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:(allocator_type &alloc, bucket_ptr buckets, size_type num)
destroy_global_map_handle	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void destroy_global_map_handle()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private	signature:()
destroy_handle	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void destroy_handle(const sync_id &id)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:public	signature:(const sync_id &id)
destroy_if_last_link_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   destroy_if_last_link_func(NodePool *pool)$/;"	f	struct:boost::interprocess::ipcdetail::destroy_if_last_link_func	access:public	signature:(NodePool *pool)
destroy_if_last_link_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct destroy_if_last_link_func$/;"	s	namespace:boost::interprocess::ipcdetail
destroy_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy_impl()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:()
destroy_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void destroy_n(void *mem, std::size_t num, std::size_t &destroyed) = 0;$/;"	p	struct:boost::interprocess::ipcdetail::in_place_interface	access:public	signature:(void *mem, std::size_t num, std::size_t &destroyed)
destroy_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void destroy_n(void *mem, std::size_t num, std::size_t &destroyed)$/;"	f	struct:boost::interprocess::ipcdetail::placement_destroy	access:public	signature:(void *mem, std::size_t num, std::size_t &destroyed)
destroy_node_pool_if_last_link	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^inline void destroy_node_pool_if_last_link(NodePool *pool)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(NodePool *pool)
destroy_ptr	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void destroy_ptr(const T *ptr)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
destroy_ptr	/usr/include/boost/interprocess/segment_manager.hpp	/^   void destroy_ptr(const T *p)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *p)
destroy_syncs_in_range	/usr/include/boost/interprocess/mapped_region.hpp	/^   static void destroy_syncs_in_range(const void *addr, std::size_t size);$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:(const void *addr, std::size_t size)
destroy_syncs_in_range	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::destroy_syncs_in_range(const void *addr, std::size_t size)$/;"	f	class:boost::interprocess::mapped_region	signature:(const void *addr, std::size_t size)
destroy_syncs_in_range	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void destroy_syncs_in_range(const void *addr, std::size_t size)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:public	signature:(const void *addr, std::size_t size)
dev	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   DeviceAbstraction dev;$/;"	m	class:boost::interprocess::ipcdetail::managed_open_or_create_impl_device_holder	access:private
device_id_t	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   typedef typename managed_open_or_create_impl_device_id_t<DeviceAbstraction>::type device_id_t;$/;"	t	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private
device_type	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef ipcdetail::file_wrapper device_type;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:public
device_type	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef shared_memory_object                    device_type;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:public
device_type	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   typedef xsi_shared_memory_file_wrapper device_type;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public
diff	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::ptrdiff_t diff(const self_t &other) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &other) const
difference_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef typename segment_manager::difference_type     difference_type;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
difference_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename segment_manager::difference_type         difference_type;$/;"	t	class:boost::interprocess::allocator	access:public
difference_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::difference_type      difference_type;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
difference_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::difference_type      difference_type;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
difference_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef typename segment_manager::difference_type     difference_type;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
difference_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef typename segment_manager::size_type           difference_type;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
difference_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef typename segment_manager::difference_type     difference_type;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
difference_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef std::ptrdiff_t                          difference_type;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
difference_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename MemoryAlgorithm::difference_type  difference_type;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
difference_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename boost::intrusive::pointer_traits<const_char_ptr_t>::difference_type difference_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_key	access:public
difference_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^      <msg_hdr_ptr_t>::difference_type                                     difference_type;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
difference_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type  difference_type;$/;"	t	class:boost::interprocess::ipcdetail::msg_hdr_t	access:private
difference_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type difference_type;$/;"	t	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public
difference_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type difference_type;$/;"	t	class:boost::interprocess::message_queue_t	access:public
difference_type	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type difference_type;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
difference_type	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type difference_type;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
difference_type	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename boost::intrusive::pointer_traits<char_ptr>::difference_type difference_type;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
difference_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef DifferenceType                    difference_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
difference_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::difference_type difference_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
difference_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::difference_type  difference_type;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
direct	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      direct_addressing    direct;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
direct_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct direct_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
disable_if	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct disable_if : public enable_if_c<!Cond::value, T> {};$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:enable_if_c
dispatch	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static false_t dispatch(...);$/;"	p	class:boost::interprocess::ipcdetail::is_convertible	access:private	signature:(....)
dispatch	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static true_t dispatch(U);$/;"	p	class:boost::interprocess::ipcdetail::is_convertible	access:private	signature:(U)
dispose	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void dispose() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:()
distance_to	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename Iterator::difference_type distance_to(const transform_iterator &other)const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
dll_func	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct dll_func$/;"	s	namespace:boost::interprocess::winapi	inherits:function_address_holder
do_increment	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void do_increment(false_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:private	signature:(false_, const index_tuple<IdxPack...>&)
do_increment	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void do_increment(true_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:private	signature:(true_, const index_tuple<IdxPack...>&)
do_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool do_receive(block_t block,$/;"	p	class:boost::interprocess::message_queue_t	access:private	signature:(block_t block, void *buffer, size_type buffer_size, size_type &recvd_size, unsigned int &priority, const ptime &abs_time)
do_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t<VoidPointer>::do_receive(block_t block,$/;"	f	class:boost::interprocess::message_queue_t	signature:(block_t block, void *buffer, size_type buffer_size, size_type &recvd_size, unsigned int &priority, const boost::posix_time::ptime &abs_time)
do_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool do_send(block_t block,$/;"	p	class:boost::interprocess::message_queue_t	access:private	signature:(block_t block, const void *buffer, size_type buffer_size, unsigned int priority, const ptime &abs_time)
do_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue_t<VoidPointer>::do_send(block_t block,$/;"	f	class:boost::interprocess::message_queue_t	signature:(block_t block, const void *buffer, size_type buffer_size, unsigned int priority, const boost::posix_time::ptime &abs_time)
do_swap	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline void do_swap(T& x, T& y)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(T& x, T& y)
do_timed_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   static bool do_timed_wait(ConditionAnyMembers &data, Lock& lock, const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:(ConditionAnyMembers &data, Lock& lock, const boost::posix_time::ptime &abs_time)
do_timed_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^bool condition_any_algorithm<ConditionAnyMembers>::do_timed_wait$/;"	f	class:boost::interprocess::ipcdetail::condition_any_algorithm	signature:(ConditionAnyMembers &data, Lock& lock, const boost::posix_time::ptime &abs_time)
do_timed_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   bool do_timed_wait(const boost::posix_time::ptime &abs_time, posix_mutex &mut);$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(const boost::posix_time::ptime &abs_time, posix_mutex &mut)
do_timed_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline bool posix_condition::do_timed_wait$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:(const boost::posix_time::ptime &abs_time, posix_mutex &mut)
do_timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   bool do_timed_wait(bool tout_enabled, const boost::posix_time::ptime &abs_time, InterprocessMutex &mut);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:private	signature:(bool tout_enabled, const boost::posix_time::ptime &abs_time, InterprocessMutex &mut)
do_timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   bool do_timed_wait(const boost::posix_time::ptime &abs_time, InterprocessMutex &mut);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(const boost::posix_time::ptime &abs_time, InterprocessMutex &mut)
do_timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline bool spin_condition::do_timed_wait$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:(const boost::posix_time::ptime &abs_time, InterprocessMutex &mut)
do_timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline bool spin_condition::do_timed_wait(bool tout_enabled,$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:(bool tout_enabled, const boost::posix_time::ptime &abs_time, InterprocessMutex &mut)
do_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   static void do_wait(ConditionAnyMembers &data, Lock& lock);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:(ConditionAnyMembers &data, Lock& lock)
do_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^void condition_any_algorithm<ConditionAnyMembers>::do_wait$/;"	f	class:boost::interprocess::ipcdetail::condition_any_algorithm	signature:(ConditionAnyMembers &data, Lock& lock)
do_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   void do_wait(posix_mutex &mut);$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(posix_mutex &mut)
do_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline void posix_condition::do_wait(posix_mutex &mut)$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:(posix_mutex &mut)
do_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void do_wait(InterprocessMutex &mut);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(InterprocessMutex &mut)
do_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline void spin_condition::do_wait(InterprocessMutex &mut)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:(InterprocessMutex &mut)
dont_close_on_destruction	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^   static void dont_close_on_destruction(T &t)$/;"	f	class:boost::interprocess::ipcdetail::interprocess_tester	access:public	signature:(T &t)
dont_close_on_destruction	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/mapped_region.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::dont_close_on_destruction()$/;"	f	class:boost::interprocess::mapped_region	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_condition	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_condition_any	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline void named_sharable_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline void posix_named_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline void shm_named_condition::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline void shm_named_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline void shm_named_recursive_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline void shm_named_semaphore::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   void windows_named_condition_any::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::windows_named_condition_any	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline void windows_named_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline void windows_named_semaphore::dont_close_on_destruction()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:()
dummy	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t dummy    :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
dummy	/usr/include/boost/interprocess/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	m	class:boost::interprocess::ipcdetail::is_convertible::false_t	access:private
dummy	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   dummy()$/;"	f	struct:boost::interprocess::ipcdetail_really_deep_namespace::dummy	access:public	signature:()
dummy	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct dummy$/;"	s	namespace:boost::interprocess::ipcdetail_really_deep_namespace
dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^        } dummy;$/;"	m	union:boost::interprocess::winapi::system_info::__anon7	typeref:struct:boost::interprocess::winapi::system_info::__anon7::__anon8	access:public
dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      unsigned long  long dummy;$/;"	m	union:boost::interprocess::winapi::wchar_variant::value_t	access:public
dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      }dummy;$/;"	m	union:boost::interprocess::winapi::interprocess_overlapped::__anon5	typeref:struct:boost::interprocess::winapi::interprocess_overlapped::__anon5::__anon6	access:public
dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  long dummy;$/;"	m	struct:boost::interprocess::winapi::wchar_variant	access:public
dummy_function	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      bool dummy_function()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy	access:public	signature:()
duplicate_close_source	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long duplicate_close_source  = (unsigned long)0x00000001;$/;"	m	namespace:boost::interprocess::winapi
duplicate_current_process_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool duplicate_current_process_handle$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hSourceHandle, void **lpTargetHandle)
duplicate_same_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long duplicate_same_access   = (unsigned long)0x00000002;$/;"	m	namespace:boost::interprocess::winapi
dwActiveProcessorMask	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long * dwActiveProcessorMask;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
dwAllocationGranularity	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwAllocationGranularity;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
dwFileAttributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwFileAttributes;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
dwFileAttributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwFileAttributes;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
dwHighDateTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  dwHighDateTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_filetime	access:public
dwLowDateTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  dwLowDateTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_filetime	access:public
dwNumberOfProcessors	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwNumberOfProcessors;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
dwOemId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^        unsigned long dwOemId;          \/\/ Obsolete field...do not use$/;"	m	union:boost::interprocess::winapi::system_info::__anon7	access:public
dwPageSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwPageSize;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
dwProcessorType	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwProcessorType;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
dwReserved	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      unsigned long dwReserved;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
dwReserved0	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwReserved0;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
dwReserved1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwReserved1;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
dwVolumeSerialNumber	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^   unsigned long dwVolumeSerialNumber;$/;"	m	struct:boost::interprocess::ipcdetail::locking_file_serial_id	access:public
dwVolumeSerialNumber	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwVolumeSerialNumber;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
dynamic_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct dynamic_cast_tag {};$/;"	s	namespace:boost::interprocess::ipcdetail
dynamic_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> dynamic_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
dynamic_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   dynamic_pointer_cast(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)
dynamic_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> dynamic_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
ec	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   ec;$/;"	m	struct:boost::interprocess::ec_xlate	access:public
ec_table	/usr/include/boost/interprocess/errors.hpp	/^static const ec_xlate ec_table[] =$/;"	m	namespace:boost::interprocess
ec_xlate	/usr/include/boost/interprocess/errors.hpp	/^struct ec_xlate$/;"	s	namespace:boost::interprocess
element_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef PointedType                       element_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
element_type	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::enable_shared_from_this	access:public
element_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::intrusive_ptr	access:public
element_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
element_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef T                                                   element_type;$/;"	t	class:boost::interprocess::shared_ptr	access:public
element_type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::unique_ptr	access:public
element_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::weak_ptr	access:public
enable_if	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if : public enable_if_c<Cond::value, T> {};$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:enable_if_c
enable_if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if_c {$/;"	s	namespace:boost::interprocess::ipcdetail
enable_if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if_c<false, T> {};$/;"	s	namespace:boost::interprocess::ipcdetail
enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:()
enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this(enable_shared_from_this const &)$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:(enable_shared_from_this const &)
enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^class enable_shared_from_this$/;"	c	namespace:boost::interprocess
end	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   const_iterator end() const$/;"	f	class:boost::interprocess::null_index	access:public	signature:() const
end	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   iterator end()$/;"	f	class:boost::interprocess::null_index	access:public	signature:()
end_pos	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type end_pos() const$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:() const
equal	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool equal(const self_t &y) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &y) const
equal	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   bool equal(const transform_iterator &other) const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
equal_comp	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool equal_comp(const block_header<size_type> &b) const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(const block_header<size_type> &b) const
equal_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   struct equal_function$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	access:public
equal_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::equal_function            equal_function;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
equal_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline bool equal_systemwide_thread_id(const OS_systemwide_thread_id_t &id1, const OS_systemwide_thread_id_t &id2)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const OS_systemwide_thread_id_t &id1, const OS_systemwide_thread_id_t &id2)
equal_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline bool equal_thread_id(OS_thread_id_t id1, OS_thread_id_t id2)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(OS_thread_id_t id1, OS_thread_id_t id2)
erase	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static bool erase(managed_global_memory &map, const char *name)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(managed_global_memory &map, const char *name)
erase	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   bool erase(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:(const char *name)
erase	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static bool erase(windows_semaphore_based_map &map, const char *name)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(windows_semaphore_based_map &map, const char *name)
erase_last_mapping	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static bool erase_last_mapping(segment_group_id group_id)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id group_id)
error_already_exists	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_already_exists = 183L;$/;"	m	namespace:boost::interprocess::winapi
error_code_t	/usr/include/boost/interprocess/errors.hpp	/^enum error_code_t$/;"	g	namespace:boost::interprocess
error_file_not_found	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_file_not_found = 2u;$/;"	m	namespace:boost::interprocess::winapi
error_file_too_large	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned int  error_file_too_large = 223u;$/;"	m	namespace:boost::interprocess::winapi
error_info	/usr/include/boost/interprocess/errors.hpp	/^   error_info(error_code_t ec = other_error )$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(error_code_t ec = other_error )
error_info	/usr/include/boost/interprocess/errors.hpp	/^   error_info(native_error_t sys_err_code)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(native_error_t sys_err_code)
error_info	/usr/include/boost/interprocess/errors.hpp	/^struct error_info$/;"	s	namespace:boost::interprocess
error_invalid_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_invalid_handle = 6L;$/;"	m	namespace:boost::interprocess::winapi
error_lock_violation	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_lock_violation       = 33;$/;"	m	namespace:boost::interprocess::winapi
error_no_more_files	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_no_more_files  = 18u;$/;"	m	namespace:boost::interprocess::winapi
error_not_locked	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_not_locked     = 158L;$/;"	m	namespace:boost::interprocess::winapi
error_sharing_violation	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_sharing_violation = 32L;$/;"	m	namespace:boost::interprocess::winapi
error_sharing_violation_sleep_ms	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned int  error_sharing_violation_sleep_ms = 250u;$/;"	m	namespace:boost::interprocess::winapi
error_sharing_violation_tries	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned int  error_sharing_violation_tries = 3u;$/;"	m	namespace:boost::interprocess::winapi
exclusive_in	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      unsigned exclusive_in   : 1;$/;"	m	struct:boost::interprocess::interprocess_sharable_mutex::control_word_t	access:public
exclusive_in	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned exclusive_in         : 1;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      exclusive_rollback(control_word_t         &ctrl$/;"	f	struct:boost::interprocess::interprocess_sharable_mutex::exclusive_rollback	access:public	signature:(control_word_t &ctrl ,interprocess_condition &first_gate)
exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   struct exclusive_rollback$/;"	s	class:boost::interprocess::interprocess_sharable_mutex	access:private
exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      exclusive_rollback(control_word_t         &ctrl$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:(control_word_t &ctrl ,interprocess_condition &first_gate)
exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct exclusive_rollback$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
expand_bwd	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type expand_bwd         = boost::container::expand_bwd;$/;"	m	namespace:boost::interprocess
expand_fwd	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type expand_fwd         = boost::container::expand_fwd;$/;"	m	namespace:boost::interprocess
expand_or_create_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static bucket_ptr expand_or_create_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:( bucket_ptr old_buckets, const size_type old_num , allocator_type &alloc, const size_type new_num)
expansion_helper	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void expansion_helper(ExpansionArgs &&...)$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:private	signature:(ExpansionArgs &&....)
expired	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   bool expired() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
false_	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef bool_<false>       false_;$/;"	t	namespace:boost::interprocess::ipcdetail
false_t	/usr/include/boost/interprocess/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	c	class:boost::interprocess::ipcdetail::is_convertible	access:private
false_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef false_ false_type;$/;"	t	namespace:boost::interprocess::ipcdetail
fd	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^   int fd;$/;"	m	struct:boost::interprocess::ipcdetail::locking_file_serial_id	access:public
fd	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   file_handle_t fd;$/;"	m	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:private
file_access_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_access_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_alignment_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_alignment_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_all_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_all_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_allocation_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_allocation_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_alternate_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_alternate_name_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_attribute_archive	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_archive     = 0x00000020;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_device	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_device      = 0x00000040;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_directory   = 0x00000010;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_hidden	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_hidden      = 0x00000002;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_normal	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_normal      = 0x00000080;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_readonly	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_readonly    = 0x00000001;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_system	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_system      = 0x00000004;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_temporary	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_temporary   = 0x00000100;$/;"	m	namespace:boost::interprocess::winapi
file_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_basic_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_begin	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef enum { file_begin     = winapi::file_begin$/;"	e	enum:boost::interprocess::__anon3
file_begin	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_begin     = 0;$/;"	m	namespace:boost::interprocess::winapi
file_both_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_both_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_completion_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_completion_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_compression_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_compression_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_content_index_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_content_index_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_copy_on_write_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_copy_on_write_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_current	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , file_current   = winapi::file_current$/;"	e	enum:boost::interprocess::__anon3
file_current	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_current   = 1;$/;"	m	namespace:boost::interprocess::winapi
file_delete_on_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long file_delete_on_close = 0x00001000L;$/;"	m	namespace:boost::interprocess::winapi
file_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_directory_information = 1,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_disposition_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_disposition_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_ea_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ea_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_end	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , file_end       = winapi::file_end$/;"	e	enum:boost::interprocess::__anon3
file_end	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_end       = 2;$/;"	m	namespace:boost::interprocess::winapi
file_end_of_file_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_end_of_file_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_flag_backup_semantics	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_flag_backup_semantics = 0x02000000;$/;"	m	namespace:boost::interprocess::winapi
file_flag_delete_on_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long file_flag_delete_on_close = 0x04000000;$/;"	m	namespace:boost::interprocess::winapi
file_full_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_full_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_full_ea_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_full_ea_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_handle_from_mapping_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t file_handle_from_mapping_handle(mapping_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(mapping_handle_t hnd)
file_handle_t	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^      :  m_handle(file_handle_t(ipcdetail::invalid_file()))$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(ipcdetail::invalid_file(
file_handle_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef void *             file_handle_t;$/;"	t	namespace:boost::interprocess
file_handle_t	/usr/include/boost/interprocess/file_mapping.hpp	/^      :  m_handle(file_handle_t(ipcdetail::invalid_file()))$/;"	f	class:boost::interprocess::file_mapping	access:public	signature:(ipcdetail::invalid_file(
file_handle_t	/usr/include/boost/interprocess/shared_memory_object.hpp	/^      :  m_handle(file_handle_t(ipcdetail::invalid_file()))$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(ipcdetail::invalid_file(
file_handle_t	/usr/include/boost/interprocess/sync/file_lock.hpp	/^      :  m_file_hnd(file_handle_t(ipcdetail::invalid_file()))$/;"	f	class:boost::interprocess::file_lock	access:public	signature:(ipcdetail::invalid_file(
file_information_class_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum file_information_class_t {$/;"	g	namespace:boost::interprocess::winapi
file_inherit_content_index_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_inherit_content_index_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_internal_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_internal_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_link_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_link_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_lock()$/;"	f	class:boost::interprocess::file_lock	access:public	signature:()
file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_lock(const char *name);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const char *name)
file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^class file_lock$/;"	c	namespace:boost::interprocess
file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline file_lock::file_lock(const char *name)$/;"	f	class:boost::interprocess::file_lock	signature:(const char *name)
file_mailslot_query_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mailslot_query_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_mailslot_set_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mailslot_set_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_map_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_all_access  = section_all_access;$/;"	m	namespace:boost::interprocess::winapi
file_map_copy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_copy        = section_query;$/;"	m	namespace:boost::interprocess::winapi
file_map_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_read        = section_map_read;$/;"	m	namespace:boost::interprocess::winapi
file_map_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_write       = section_map_write;$/;"	m	namespace:boost::interprocess::winapi
file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_mapping();$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:()
file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_mapping(const char *filename, mode_t mode);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(const char *filename, mode_t mode)
file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^class file_mapping$/;"	c	namespace:boost::interprocess
file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::file_mapping$/;"	f	class:boost::interprocess::file_mapping	signature:(const char *filename, mode_t mode)
file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::file_mapping()$/;"	f	class:boost::interprocess::file_mapping	signature:()
file_maximum_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_maximum_information$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_mode_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mode_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_move_cluster_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_move_cluster_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_name_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_name_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct file_name_information_t {$/;"	s	namespace:boost::interprocess::winapi
file_names_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_names_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_network_open_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_network_open_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_object_id_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_object_id_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_ole_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ole_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_ole_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ole_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_open_for_backup_intent	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_open_for_backup_intent = 0x00004000;$/;"	m	namespace:boost::interprocess::winapi
file_pipe_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_pipe_local_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_local_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_pipe_remote_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_remote_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_pos_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             } file_pos_t;$/;"	t	namespace:boost::interprocess	typeref:enum:boost::interprocess::__anon3
file_position_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_position_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_quota_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_quota_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_rename_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_rename_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_rename_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct file_rename_information_t {$/;"	s	namespace:boost::interprocess::winapi
file_reparse_point_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_reparse_point_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_share_delete	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_delete    = 0x00000004;$/;"	m	namespace:boost::interprocess::winapi
file_share_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_read      = 0x00000001;$/;"	m	namespace:boost::interprocess::winapi
file_share_valid_flags	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const int file_share_valid_flags = 0x00000007;$/;"	m	namespace:boost::interprocess::winapi
file_share_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_write     = 0x00000002;$/;"	m	namespace:boost::interprocess::winapi
file_standard_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_standard_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_stream_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_stream_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_tracking_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_tracking_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_type_char	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_type_char    =  0x0002L;$/;"	m	namespace:boost::interprocess::winapi
file_type_disk	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_type_disk    =  0x0001L;$/;"	m	namespace:boost::interprocess::winapi
file_type_pipe	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_type_pipe    =  0x0003L;$/;"	m	namespace:boost::interprocess::winapi
file_type_remote	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_type_remote  =  0x8000L;$/;"	m	namespace:boost::interprocess::winapi
file_type_unknown	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_type_unknown =  0x0000L;$/;"	m	namespace:boost::interprocess::winapi
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper();$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:()
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(create_only_t, const char *name, mode_t mode, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(create_only_t, const char *name, mode_t mode, const permissions &perm = permissions())
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(open_only_t, const char *name, mode_t mode)
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(open_or_create_t, const char *name, mode_t mode, const permissions &perm  = permissions())$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(open_or_create_t, const char *name, mode_t mode, const permissions &perm = permissions())
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^class file_wrapper$/;"	c	namespace:boost::interprocess::ipcdetail
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline file_wrapper::file_wrapper()$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:()
fill_file_serial_id	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool fill_file_serial_id(int fd, locking_file_serial_id &id)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd, locking_file_serial_id &id)
fill_name	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void fill_name(NameBuf &name, const sync_id &id)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:private	signature:(NameBuf &name, const sync_id &id)
fill_system_message	/usr/include/boost/interprocess/errors.hpp	/^inline void fill_system_message( int system_error, std::string &str)$/;"	f	namespace:boost::interprocess	signature:( int system_error, std::string &str)
fill_system_message	/usr/include/boost/interprocess/errors.hpp	/^inline void fill_system_message(int sys_err_code, std::string &str)$/;"	f	namespace:boost::interprocess	signature:(int sys_err_code, std::string &str)
finalize_singleton_logic	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void finalize_singleton_logic(void *&ptr, volatile boost::uint32_t &this_module_singleton_initialized, singleton_destructor_t destructor)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public	signature:(void *&ptr, volatile boost::uint32_t &this_module_singleton_initialized, singleton_destructor_t destructor)
find	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::pair<T*, size_type> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
find	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static ref_count_ptr *find(managed_global_memory &map, const char *name)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(managed_global_memory &map, const char *name)
find	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   ref_count_ptr *find(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:(const char *name)
find	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static ref_count_ptr *find(windows_semaphore_based_map &map, const char *name)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(windows_semaphore_based_map &map, const char *name)
find	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   const_iterator find(const intrusive_compare_key_type &key) const$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key) const
find	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   iterator find(const intrusive_compare_key_type &key)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key)
find	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   const_iterator find(const intrusive_compare_key_type &key) const$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key) const
find	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iterator find(const intrusive_compare_key_type &key)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key)
find	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   std::pair<T*, size_type> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(char_ptr_holder_t name)
find	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   std::pair<T*, size_type> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(char_ptr_holder_t name)
find	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   std::pair<T*, size_type> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(char_ptr_holder_t name)
find	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   std::pair<T*, std::size_t> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(char_ptr_holder_t name)
find	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> find  (const CharType* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType* name)
find	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> find (const ipcdetail::unique_instance_t* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const ipcdetail::unique_instance_t* name)
find_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool find_close(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
find_first_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * find_first_file(const char *lpFileName, win32_find_data_t *lpFindFileData)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *lpFileName, win32_find_data_t *lpFindFileData)
find_next_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool find_next_file(void *hFindFile, win32_find_data_t *lpFindFileData)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hFindFile, win32_find_data_t *lpFindFileData)
find_no_lock	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::pair<T*, size_type> find_no_lock  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
find_no_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> find_no_lock  (const CharType* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType* name)
find_no_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> find_no_lock (const ipcdetail::unique_instance_t* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const ipcdetail::unique_instance_t* name)
find_or_construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
find_or_construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
find_or_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
find_or_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   typename construct_proxy<T>::type find_or_construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
find_or_construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
find_or_construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct_it(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
find_or_construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
find_or_construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct_it(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
fini_atomic_func	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      fini_atomic_func(ThreadSafeGlobalMap &m)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func	access:public	signature:(ThreadSafeGlobalMap &m)
fini_atomic_func	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   struct fini_atomic_func$/;"	s	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
first_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::first_type  first_type;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
fixed_managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^fixed_managed_shared_memory;$/;"	t	namespace:boost::interprocess
fixing_state	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   static const boost::uint32_t fixing_state  = 1;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public
flat_map_index	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   flat_map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:(segment_manager_base *segment_mngr)
flat_map_index	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^class flat_map_index$/;"	c	namespace:boost::interprocess	inherits:flat_map_index_aux::index_t
flat_map_index_aux	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^struct flat_map_index_aux$/;"	s	namespace:boost::interprocess
flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment()$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:()
flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct flat_map_intersegment$/;"	s	namespace:boost::interprocess	inherits:intersegment_base
floor_log2	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline std::size_t floor_log2 (std::size_t x)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(std::size_t x)
floor_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static size_type floor_units(size_type size)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(size_type size)
flush	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   bool flush()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:()
flush	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   bool flush()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
flush	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool flush(std::size_t mapping_offset = 0, std::size_t numbytes = 0, bool async = true);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(std::size_t mapping_offset = 0, std::size_t numbytes = 0, bool async = true)
flush	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::flush(std::size_t mapping_offset, std::size_t numbytes, bool async)$/;"	f	class:boost::interprocess::mapped_region	signature:(std::size_t mapping_offset, std::size_t numbytes, bool async)
flush_file_buffers	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool flush_file_buffers(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
flush_view_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool flush_view_of_file(void *base_addr, std::size_t numbytes)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *base_addr, std::size_t numbytes)
fname	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   std::string fname;$/;"	m	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:private
for_bool_	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   struct nat {int for_bool_;};$/;"	m	struct:boost::interprocess::unique_ptr::nat	access:public
for_each_file_in_dir	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool for_each_file_in_dir(const char *dir, Function f)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *dir, Function f)
format_message	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long format_message$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long dwFlags, const void *lpSource, unsigned long dwMessageId, unsigned long dwLanguageId, char *lpBuffer, unsigned long nSize, std::va_list *Arguments)
format_message_allocate_buffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_allocate_buffer$/;"	m	namespace:boost::interprocess::winapi
format_message_argument_array	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_argument_array$/;"	m	namespace:boost::interprocess::winapi
format_message_from_hmodule	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_hmodule$/;"	m	namespace:boost::interprocess::winapi
format_message_from_string	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_string$/;"	m	namespace:boost::interprocess::winapi
format_message_from_system	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_system$/;"	m	namespace:boost::interprocess::winapi
format_message_ignore_inserts	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_ignore_inserts$/;"	m	namespace:boost::interprocess::winapi
format_message_max_width_mask	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_max_width_mask$/;"	m	namespace:boost::interprocess::winapi
frc	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t frc      :  frc_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
frc_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t frc_size_bits =$/;"	m	struct:boost::interprocess::intersegment_base	access:public
free_library	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool free_library(void *module)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *module)
free_top_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void free_top_msg()$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:()
from_first_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header<size_type> *from_first_header(Header *header)$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(Header *header)
frontend_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef basic_managed_multi_shared_memory             frontend_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
ftCreationTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    interprocess_filetime ftCreationTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
ftCreationTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftCreationTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
ftLastAccessTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    interprocess_filetime ftLastAccessTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
ftLastAccessTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftLastAccessTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
ftLastWriteTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    interprocess_filetime ftLastWriteTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
ftLastWriteTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftLastWriteTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
function_address_holder	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct function_address_holder$/;"	s	namespace:boost::interprocess::winapi
gcd	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer gcd(Integer A, Integer B)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(Integer A, Integer B)
generic_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   T *generic_construct(const CharType *name,$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType *name, size_type num, bool try2find, bool dothrow, ipcdetail::in_place_interface &table)
generic_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long generic_read         = 0x80000000L;$/;"	m	namespace:boost::interprocess::winapi
generic_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long generic_write        = 0x40000000L;$/;"	m	namespace:boost::interprocess::winapi
get	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::ipcdetail::adaptive_pool_base::node_pool	access:public	signature:(void *p)
get	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::ipcdetail::node_pool_allocation_impl::node_pool	access:public	signature:(void *p)
get	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::ipcdetail::node_allocator_base::node_pool	access:public	signature:(void *p)
get	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::ipcdetail::private_adaptive_pool_base::node_pool	access:public	signature:(void *p)
get	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::ipcdetail::private_node_allocator_base::node_pool	access:public	signature:(void *p)
get	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static C& get()   \/\/Let's make inlining easy$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:public	signature:()
get	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   pointer get()const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
get	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T & get() {  return t_;   }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
get	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T && get()  { return ::boost::move(t_); }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
get	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T && get() {  return ::boost::move(t_);   }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
get	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            const T & get() {  return t_;   }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t)  { return Next::get(t.tail()); }$/;"	f	class:boost::interprocess::ipcdetail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t){ return t.head(); }$/;"	f	class:boost::interprocess::ipcdetail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static type       get(tuple<Head, Values...>& t)      { return t.head(); }$/;"	f	class:boost::interprocess::ipcdetail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static type get(tuple<Head, Values...>& t)              { return Next::get(t.tail()); }$/;"	f	class:boost::interprocess::ipcdetail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::const_type get(const tuple<Values...>& t)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const tuple<Values...>& t)
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::type get(tuple<Values...>& t)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(tuple<Values...>& t)
get	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *get(const unsigned int id)$/;"	f	struct:boost::interprocess::winapi::function_address_holder	access:public	signature:(const unsigned int id)
get	/usr/include/boost/interprocess/offset_ptr.hpp	/^   pointer get() const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
get	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   const pointer &get() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
get	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer &get()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
get	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   const pointer & get() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
get	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer & get()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
get	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   pointer get() const  \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
get_addr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      void *get_addr() const$/;"	f	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
get_address	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void *   get_address   () const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
get_address	/usr/include/boost/interprocess/mapped_region.hpp	/^   void*       get_address() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
get_address	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void*    mapped_region::get_address()  const$/;"	f	class:boost::interprocess::mapped_region	signature:() const
get_address_from_dll	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *get_address_from_dll(const unsigned int id)$/;"	f	struct:boost::interprocess::winapi::function_address_holder	access:private	signature:(const unsigned int id)
get_address_from_handle	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void *    get_address_from_handle (handle_t offset) const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(handle_t offset) const
get_allocator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      get_allocator()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
get_allocator	/usr/include/boost/interprocess/segment_manager.hpp	/^      get_allocator()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
get_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   const_allocator_pointer get_allocator() const$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:() const
get_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_security_attributes *get_attributes()$/;"	f	class:boost::interprocess::winapi::interprocess_all_access_security	access:public	signature:()
get_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static std::size_t get_bits(const pointer &n)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(const pointer &n)
get_block_from_addr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      static block_ctrl *get_block_from_addr(void *addr)$/;"	f	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:(void *addr)
get_block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header<size_type> *get_block_header() const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:() const
get_boot_and_system_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_and_system_time(unsigned char (&bootsystemstamp) [BootAndSystemstampLength])$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned char (&bootsystemstamp) [BootAndSystemstampLength])
get_boot_and_system_time_wstr	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_and_system_time_wstr(wchar_t *bootsystemstamp, std::size_t &s)  \/\/will write BootAndSystemstampLength chars$/;"	f	namespace:boost::interprocess::winapi	signature:(wchar_t *bootsystemstamp, std::size_t &s)
get_boot_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_time(unsigned char (&bootstamp) [BootstampLength])$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned char (&bootstamp) [BootstampLength])
get_boot_time_str	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_time_str(char *bootstamp_str, std::size_t &s) \/\/will write BootstampLength chars$/;"	f	namespace:boost::interprocess::winapi	signature:(char *bootstamp_str, std::size_t &s)
get_bootstamp	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^      inline void get_bootstamp(std::string &s, bool add = false)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(std::string &s, bool add = false)
get_condvar	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      condvar_type &get_condvar() {  return m_cond;  }$/;"	f	class:boost::interprocess::interprocess_condition_any::members	access:public	signature:()
get_condvar	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      condvar_type&  get_condvar() {  return m_cond;  }$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:public	signature:()
get_condvar	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      condvar_type&  get_condvar() {  return m_cond;  }$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:public	signature:()
get_current_process	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_current_process()$/;"	f	namespace:boost::interprocess::winapi	signature:()
get_current_process_creation_time	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline long double get_current_process_creation_time()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
get_current_process_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_process_id_t get_current_process_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
get_current_process_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_current_process_id()$/;"	f	namespace:boost::interprocess::winapi	signature:()
get_current_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_systemwide_thread_id_t get_current_systemwide_thread_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
get_current_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_thread_id_t get_current_thread_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
get_current_thread_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_current_thread_id()$/;"	f	namespace:boost::interprocess::winapi	signature:()
get_data_size	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual std::size_t get_data_size() const$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:() const
get_data_size	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual std::size_t get_data_size() const$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:() const
get_data_size	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual std::size_t get_data_size() const$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:() const
get_data_size	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual std::size_t get_data_size() const = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:() const
get_deleter	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      get_deleter()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
get_deleter	/usr/include/boost/interprocess/segment_manager.hpp	/^      get_deleter()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
get_deleter	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:() const
get_deleter	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:() const
get_deleter	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
get_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   DeviceAbstraction &get_device()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:()
get_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   DeviceAbstraction &get_device()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl_device_holder	access:public	signature:()
get_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   const DeviceAbstraction &get_device() const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
get_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   const DeviceAbstraction &get_device() const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl_device_holder	access:public	signature:() const
get_error_code	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   get_error_code()const$/;"	f	struct:boost::interprocess::error_info	access:public	signature:() const
get_error_code	/usr/include/boost/interprocess/exceptions.hpp	/^   error_code_t   get_error_code()  const { return m_err.get_error_code(); }$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
get_file_information_by_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_information_by_handle(void *hnd, interprocess_by_handle_file_information *info)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, interprocess_by_handle_file_information *info)
get_file_mapping_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_mapping_size(void *file_mapping_hnd, __int64 &size)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *file_mapping_hnd, __int64 &size)
get_file_name_from_handle_function	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_name_from_handle_function$/;"	f	namespace:boost::interprocess::winapi	signature:(void * hFile, wchar_t *pszFilename, std::size_t length, std::size_t &out_length)
get_file_pointer	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool get_file_pointer(file_handle_t hnd, offset_t &off)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, offset_t &off)
get_file_size	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool get_file_size(file_handle_t hnd, offset_t &size)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, offset_t &size)
get_file_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_size(void *handle, __int64 &size)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, __int64 &size)
get_file_type	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_file_type(void *hFile)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hFile)
get_free_memory	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   size_type get_free_memory() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
get_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   size_type get_free_memory()  const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:() const
get_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^simple_seq_fit_impl<MutexFamily, VoidPointer>::get_free_memory()  const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:() const
get_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   size_type get_free_memory()  const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:() const
get_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::get_free_memory()  const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:() const
get_free_memory	/usr/include/boost/interprocess/segment_manager.hpp	/^   size_type get_free_memory() const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:() const
get_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      segment_group_id get_group() const$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:() const
get_handle_from_address	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   handle_t get_handle_from_address   (const void *ptr) const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const void *ptr) const
get_impl	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class get_impl<0, tuple<Head, Values...> >$/;"	c	namespace:boost::interprocess::ipcdetail
get_impl	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class get_impl<I, tuple<Head, Values...> >$/;"	c	namespace:boost::interprocess::ipcdetail
get_instance_length	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static size_type get_instance_length(const T *ptr)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
get_instance_length	/usr/include/boost/interprocess/segment_manager.hpp	/^   static size_type get_instance_length(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
get_instance_name	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static const char_type *get_instance_name(const T *ptr)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
get_instance_name	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const CharType *get_instance_name(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
get_instance_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static instance_type get_instance_type(const T *ptr)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
get_instance_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   static instance_type get_instance_type(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
get_intrusive_value_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static intrusive_value_type_impl *get_intrusive_value_type(block_header<size_type> *hdr)$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:(block_header<size_type> *hdr)
get_invalid_process_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_process_id_t get_invalid_process_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
get_invalid_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_systemwide_thread_id_t get_invalid_systemwide_thread_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
get_invalid_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_thread_id_t get_invalid_thread_id()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
get_key	/usr/include/boost/interprocess/xsi_key.hpp	/^   key_t get_key() const$/;"	f	class:boost::interprocess::xsi_key	access:public	signature:() const
get_last_bootup_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_last_bootup_time( std::string& str )$/;"	f	namespace:boost::interprocess::winapi	signature:( std::string& str )
get_last_bootup_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_last_bootup_time( std::wstring& strValue )$/;"	f	namespace:boost::interprocess::winapi	signature:( std::wstring& strValue )
get_last_error	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_last_error()$/;"	f	namespace:boost::interprocess::winapi	signature:()
get_lock_file_base_name	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static const char *get_lock_file_base_name()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private	signature:()
get_lock_file_subdir_name	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static const char *get_lock_file_subdir_name()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private	signature:()
get_lvalue	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T & get_lvalue() {  return t_;   }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
get_lvalue	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            const T & get_lvalue() {  return t_;   }$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:()
get_map	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static ThreadSafeGlobalMap &get_map()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private	signature:()
get_map_base_name	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^inline const char *get_map_base_name()$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:()
get_map_name	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^inline void get_map_name(std::string &map_name)$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:(std::string &map_name)
get_map_size	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^inline std::size_t get_map_size()$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:()
get_map_unlocked	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   map_type &get_map_unlocked()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:()
get_mapped_file_name	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_mapped_file_name(void *process, void *lpv, wchar_t *lpfilename, unsigned long nSize)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *process, void *lpv, wchar_t *lpfilename, unsigned long nSize)
get_mapped_region	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   const mapped_region &get_mapped_region() const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline mapping_handle_t file_wrapper::get_mapping_handle() const$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline mapping_handle_t xsi_shared_memory_device::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^inline mapping_handle_t file_mapping::get_mapping_handle() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline mapping_handle_t shared_memory_object::get_mapping_handle() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline mapping_handle_t xsi_named_mutex::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline mapping_handle_t windows_shared_memory::get_mapping_handle() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline mapping_handle_t xsi_shared_memory::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
get_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type get_max_cached_nodes() const$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:() const
get_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type get_max_cached_nodes() const$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:() const
get_max_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type get_max_msg() const;$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:() const
get_max_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline typename message_queue_t<VoidPointer>::size_type message_queue_t<VoidPointer>::get_max_msg() const$/;"	f	class:boost::interprocess::message_queue_t	signature:() const
get_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type get_max_msg_size() const;$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:() const
get_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline typename message_queue_t<VoidPointer>::size_type message_queue_t<VoidPointer>::get_max_msg_size() const$/;"	f	class:boost::interprocess::message_queue_t	signature:() const
get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static size_type get_mem_size$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(size_type max_msg_size, size_type max_num_msg)
get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static size_type get_mem_size(size_type max_msg_size, size_type max_num_msg);$/;"	p	class:boost::interprocess::message_queue_t	access:private	signature:(size_type max_msg_size, size_type max_num_msg)
get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline typename message_queue_t<VoidPointer>::size_type message_queue_t<VoidPointer>::get_mem_size$/;"	f	class:boost::interprocess::message_queue_t	signature:(size_type max_msg_size, size_type max_num_msg)
get_members	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   ConditionMembers & get_members()$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:()
get_members	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   const ConditionMembers & get_members() const$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:() const
get_members	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   ConditionAnyMembers & get_members()$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:()
get_members	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   const ConditionAnyMembers & get_members() const$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:() const
get_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      size_type get_min_segment_size() const$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:() const
get_min_size	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::size_t get_min_size() const$/;"	f	class:boost::interprocess::ipcdetail::create_open_func	access:public	signature:() const
get_min_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      std::size_t get_min_size() const$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public	signature:() const
get_min_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t get_min_size() const$/;"	f	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public	signature:() const
get_min_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t get_min_size() const$/;"	f	struct:boost::interprocess::null_mapped_region_function	access:public	signature:() const
get_min_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   get_min_size (size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static size_type get_min_size (size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   get_min_size (size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static size_type get_min_size (size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   get_min_size (size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static size_type get_min_size (size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   static size_type get_min_size (size_type size)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type size)
get_min_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   static size_type get_min_size()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
get_min_size	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   std::size_t get_min_size() const$/;"	f	class:boost::interprocess::ipcdetail::named_creation_functor	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline mode_t file_wrapper::get_mode() const$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:() const
get_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::size_t get_mode()const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline mode_t xsi_shared_memory_device::get_mode() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
get_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^inline mode_t file_mapping::get_mode() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
get_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mode_t mapped_region::get_mode()  const$/;"	f	class:boost::interprocess::mapped_region	signature:() const
get_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline mode_t shared_memory_object::get_mode() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
get_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline mode_t windows_shared_memory::get_mode() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
get_module	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *get_module(const unsigned int id)$/;"	f	struct:boost::interprocess::winapi::function_address_holder	access:private	signature:(const unsigned int id)
get_module_from_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   static void *get_module_from_id(unsigned int id)$/;"	f	struct:boost::interprocess::winapi::function_address_holder	access:private	signature:(unsigned int id)
get_module_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_module_handle(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
get_mtx_unblock_lock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      mutex_type      &get_mtx_unblock_lock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
get_mtx_unblock_lock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      mutex_type      &get_mtx_unblock_lock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
get_multi_segment_services	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      multi_segment_services &get_multi_segment_services() const$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:() const
get_mutex	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      mutex_type   &get_mutex()   {  return m_mut; }$/;"	f	class:boost::interprocess::interprocess_condition_any::members	access:public	signature:()
get_mutex	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      mutex_type&    get_mutex()   {  return m_mtx; }$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:public	signature:()
get_mutex	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      mutex_type&    get_mutex()   {  return m_mtx; }$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:public	signature:()
get_name	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:() const
get_name	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline const char *file_wrapper::get_name() const$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:() const
get_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
get_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline const char *xsi_shared_memory_device::get_name() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
get_name	/usr/include/boost/interprocess/file_mapping.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
get_name	/usr/include/boost/interprocess/file_mapping.hpp	/^inline const char *file_mapping::get_name() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
get_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
get_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline const char *shared_memory_object::get_name() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
get_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
get_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline const char *windows_shared_memory::get_name() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
get_native_error	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t get_native_error()const$/;"	f	struct:boost::interprocess::error_info	access:public	signature:() const
get_native_error	/usr/include/boost/interprocess/exceptions.hpp	/^   native_error_t get_native_error()const { return m_err.get_native_error(); }$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
get_node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   void* get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:() const
get_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool *get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:() const
get_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:() const
get_node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   void* get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:() const
get_node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:() const
get_node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:() const
get_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type get_num_msg();$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:()
get_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline typename message_queue_t<VoidPointer>::size_type message_queue_t<VoidPointer>::get_num_msg()$/;"	f	class:boost::interprocess::message_queue_t	signature:()
get_num_named_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   size_type get_num_named_objects()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
get_num_named_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   size_type get_num_named_objects()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
get_num_unique_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   size_type get_num_unique_objects()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
get_num_unique_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   size_type get_num_unique_objects()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
get_nwaiters_blocked	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      integer_type    &get_nwaiters_blocked()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
get_nwaiters_blocked	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type    &get_nwaiters_blocked()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
get_nwaiters_gone	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      integer_type    &get_nwaiters_gone()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
get_nwaiters_gone	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type    &get_nwaiters_gone()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
get_nwaiters_to_unblock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      integer_type    &get_nwaiters_to_unblock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
get_nwaiters_to_unblock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type    &get_nwaiters_to_unblock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
get_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_type get_offset() const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
get_or_create_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^inline NodePool *get_or_create_node_pool(typename NodePool::segment_manager *mgnr)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(typename NodePool::segment_manager *mgnr)
get_or_create_node_pool_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   get_or_create_node_pool_func(typename NodePool::segment_manager *mngr)$/;"	f	struct:boost::interprocess::ipcdetail::get_or_create_node_pool_func	access:public	signature:(typename NodePool::segment_manager *mngr)
get_or_create_node_pool_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct get_or_create_node_pool_func$/;"	s	namespace:boost::interprocess::ipcdetail
get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^      static std::size_t get_page_size();$/;"	p	struct:boost::interprocess::mapped_region::page_size_holder	access:public	signature:()
get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   static std::size_t get_page_size();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::get_page_size()$/;"	f	class:boost::interprocess::mapped_region	signature:()
get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::page_size_holder<dummy>::get_page_size()$/;"	f	class:boost::interprocess::mapped_region::page_size_holder	signature:()
get_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   const char *get_path() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
get_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline const char *xsi_named_mutex::get_path() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
get_permissions	/usr/include/boost/interprocess/permissions.hpp	/^   os_permissions_type get_permissions() const$/;"	f	class:boost::interprocess::permissions	access:public	signature:() const
get_permissions	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int get_permissions() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
get_permissions	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline int xsi_named_mutex::get_permissions() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
get_pid_creation_time_str	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^inline void get_pid_creation_time_str(std::string &s)$/;"	f	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers	signature:(std::string &s)
get_pid_str	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void get_pid_str(pid_str_t &pid_str)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(pid_str_t &pid_str)
get_pid_str	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void get_pid_str(pid_str_t &pid_str, OS_process_id_t pid)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(pid_str_t &pid_str, OS_process_id_t pid)
get_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static pointer get_pointer(const pointer &n)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(const pointer &n)
get_proc_address	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_proc_address(void *module, const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *module, const char *name)
get_process_times	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_process_times$/;"	f	namespace:boost::interprocess::winapi	signature:( void *hProcess, interprocess_filetime* lpCreationTime , interprocess_filetime *lpExitTime, interprocess_filetime *lpKernelTime , interprocess_filetime *lpUserTime )
get_real_address	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void *get_real_address()  const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
get_real_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   std::size_t get_real_size()  const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
get_registry_value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_registry_value(const char *folder, const char *value_key, std::vector<unsigned char> &s)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *folder, const char *value_key, std::vector<unsigned char> &s)
get_rounded_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline SizeType get_rounded_size(SizeType orig_size, SizeType round_to)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(SizeType orig_size, SizeType round_to)
get_rounded_size_po2	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline SizeType get_rounded_size_po2(SizeType orig_size, SizeType round_to)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(SizeType orig_size, SizeType round_to)
get_segment_info_and_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static void get_segment_info_and_offset(const void *ptr, segment_info_t &segment, std::size_t &offset, void *&base)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const void *ptr, segment_info_t &segment, std::size_t &offset, void *&base)
get_segment_manager	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::allocator	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   segment_manager* get_segment_manager() const$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   segment_manager *get_segment_manager() const$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   segment_manager* get_segment_manager() const$/;"	f	class:boost::interprocess::ipcdetail::private_node_pool	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   segment_manager *get_segment_manager() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
get_sem_block_lock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      semaphore_type  &get_sem_block_lock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
get_sem_block_lock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      semaphore_type  &get_sem_block_lock()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
get_sem_block_queue	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      semaphore_type  &get_sem_block_queue()$/;"	f	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public	signature:()
get_sem_block_queue	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      semaphore_type  &get_sem_block_queue()$/;"	f	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public	signature:()
get_semaphore_info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_semaphore_info(void *handle, long &count, long &limit)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, long &count, long &limit)
get_shared_documents_folder	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_shared_documents_folder(std::string &s)$/;"	f	namespace:boost::interprocess::winapi	signature:(std::string &s)
get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   int get_shmid() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline int xsi_shared_memory::get_shmid() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
get_shmid	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   int get_shmid() const$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:() const
get_shmid	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   int get_shmid() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
get_shmid	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline int xsi_shared_memory::get_shmid() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
get_size	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline std::size_t get_size(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
get_size	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   bool get_size(offset_t &size) const;$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(offset_t &size) const
get_size	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::get_size(offset_t &size) const$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:(offset_t &size) const
get_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t get_size() const$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:() const
get_size	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   size_type   get_size   () const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
get_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t get_size() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
get_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::get_size()  const$/;"	f	class:boost::interprocess::mapped_region	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   size_type get_size()  const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^simple_seq_fit_impl<MutexFamily, VoidPointer>::get_size()  const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   size_type get_size()  const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^simple_seq_fit_impl<MutexFamily, VoidPointer>::get_size()  const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   size_type get_size()  const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::get_size()  const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:() const
get_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   size_type get_size() const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:() const
get_size	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   bool get_size(offset_t &size) const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(offset_t &size) const
get_size	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::get_size(offset_t &size) const$/;"	f	class:boost::interprocess::shared_memory_object	signature:(offset_t &size) const
get_system_info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_system_info(system_info *info)$/;"	f	namespace:boost::interprocess::winapi	signature:(system_info *info)
get_system_time_of_day_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_system_time_of_day_information(system_timeofday_information &info)$/;"	f	namespace:boost::interprocess::winapi	signature:(system_timeofday_information &info)
get_temp_path	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_temp_path(unsigned long length, char *buffer)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long length, char *buffer)
get_temporary_path	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline const char *get_temporary_path()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
get_this_pointer	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   basic_managed_global_memory *get_this_pointer()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:private	signature:()
get_this_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:()
get_this_pointer	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iunordered_set_index<MapConfig>* get_this_pointer()$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:()
get_this_pointer	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:private	signature:()
get_this_pointer	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:private	signature:()
get_this_pointer	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:private	signature:()
get_this_pointer	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   basic_managed_xsi_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:()
get_this_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager *get_this_pointer()$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:()
get_tmp_base_dir	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void get_tmp_base_dir(std::string &tmp_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(std::string &tmp_name)
get_total_bytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      size_type get_total_bytes() const$/;"	f	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
get_total_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type get_total_bytes() const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
get_truncated_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline SizeType get_truncated_size(SizeType orig_size, SizeType multiple)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(SizeType orig_size, SizeType multiple)
get_truncated_size_po2	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline SizeType get_truncated_size_po2(SizeType orig_size, SizeType multiple)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(SizeType orig_size, SizeType multiple)
get_user_address	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void *get_user_address()  const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
get_user_bytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      size_type get_user_bytes() const$/;"	f	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
get_user_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type get_user_bytes() const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
get_user_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   std::size_t get_user_size()  const$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:() const
get_wmi_class_attribute	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_wmi_class_attribute( std::wstring& strValue, const wchar_t *wmi_class, const wchar_t *wmi_class_var)$/;"	f	namespace:boost::interprocess::winapi	signature:( std::wstring& strValue, const wchar_t *wmi_class, const wchar_t *wmi_class_var)
gmem_erase_func	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      gmem_erase_func(const char *shm_name, const char *singleton_lock_file_path, managed_global_memory & shm)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func	access:public	signature:(const char *shm_name, const char *singleton_lock_file_path, managed_global_memory & shm)
gmem_erase_func	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   struct gmem_erase_func$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:private
group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_group_t *group;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      group_services(frontend_t *const frontend)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(frontend_t *const frontend)
group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   class group_services$/;"	c	class:boost::interprocess::basic_managed_multi_shared_memory	inherits:multi_segment_services	access:private
grow	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static bool grow(const char *filename, size_type extra_bytes)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(const char *filename, size_type extra_bytes)
grow	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void grow(size_type extra_bytes)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(size_type extra_bytes)
grow	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   void grow(size_type extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(size_type extra_bytes)
grow	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   bool grow(size_type extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(size_type extra_bytes)
grow	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   static bool grow(const char *filename, size_type extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(const char *filename, size_type extra_bytes)
grow	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   static bool grow(const char *shmname, size_type extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(const char *shmname, size_type extra_bytes)
grow	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void grow(size_type extra_size);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type extra_size)
grow	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::grow(size_type extra_size)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type extra_size)
grow	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void grow(size_type extra_size);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type extra_size)
grow	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::grow(size_type extra_size)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type extra_size)
grow	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void grow(size_type extra_size);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type extra_size)
grow	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::grow(size_type extra_size)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type extra_size)
grow	/usr/include/boost/interprocess/segment_manager.hpp	/^   void grow(size_type extra_size)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type extra_size)
h_event	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *h_event;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^   void *   handle;$/;"	m	struct:boost::interprocess::mapping_handle_impl_t	access:public
handle	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void *handle() const$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:() const
handle	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void *handle() const$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:() const
handle_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *handle_;$/;"	m	class:boost::interprocess::winapi::handle_closer	access:private
handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   explicit handle_closer(void *handle) : handle_(handle){}$/;"	f	class:boost::interprocess::winapi::handle_closer	access:public	signature:(void *handle)
handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   handle_closer(const handle_closer &);$/;"	p	class:boost::interprocess::winapi::handle_closer	access:private	signature:(const handle_closer &)
handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^class handle_closer$/;"	c	namespace:boost::interprocess::winapi
handle_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef difference_type                            handle_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
has_pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct has_pointer_type$/;"	s	namespace:boost::interprocess::ipcdetail
has_trivial_constructor	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct has_trivial_constructor$/;"	s	namespace:boost	inherits:true_type
has_trivial_constructor	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct has_trivial_constructor< boost::interprocess::offset_ptr<T, P, O, A> >$/;"	s	namespace:boost
has_trivial_destructor	/usr/include/boost/interprocess/allocators/allocator.hpp	/^struct has_trivial_destructor$/;"	s	namespace:boost
has_trivial_destructor	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct has_trivial_destructor$/;"	s	namespace:boost	inherits:true_type
has_trivial_destructor	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct has_trivial_destructor< boost::interprocess::offset_ptr<T, P, O, A> >$/;"	s	namespace:boost
hash_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^    struct hash_function$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	inherits:std::unary_function	access:public
hash_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::hash_function             hash_function;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
hash_value	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   friend std::size_t hash_value(const sync_id &m)$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:friend	signature:(const sync_id &m)
hasher	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^    struct hasher$/;"	s	struct:boost::interprocess::unordered_map_index_aux	inherits:std::unary_function	access:public
head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typename add_reference<Head>::type head()             {  return m_head; }$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:()
head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typename add_reference<const Head>::type head() const {  return m_head; }$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:() const
header_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      header_t()$/;"	f	struct:boost::interprocess::ipcdetail::shared_pool_impl::header_t	access:public	signature:()
header_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   struct header_t : mutex_type$/;"	s	class:boost::interprocess::ipcdetail::shared_pool_impl	inherits:mutex_type	access:private
header_t	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   struct header_t : public interprocess_mutex$/;"	s	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	inherits:interprocess_mutex	access:private
header_t	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   struct header_t : public interprocess_mutex$/;"	s	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	inherits:interprocess_mutex	access:private
header_t	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct header_t : public mutex_type$/;"	s	class:boost::interprocess::rbtree_best_fit	inherits:mutex_type	access:private
header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^      header_t(Base *restricted_segment_mngr)$/;"	f	struct:boost::interprocess::segment_manager::header_t	access:public	signature:(Base *restricted_segment_mngr)
header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct header_t$/;"	s	class:boost::interprocess::segment_manager	inherits:rmutex	access:private
hkey_local_machine	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static void * const  hkey_local_machine = (void*)(unsigned long*)(long)(0x80000002);$/;"	m	namespace:boost::interprocess::winapi
ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_ibufferstream<char>    ibufferstream;$/;"	t	namespace:boost::interprocess
id	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t id;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
id_	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   const sync_id id_;$/;"	m	class:boost::interprocess::ipcdetail::windows_mutex	access:private
id_	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   const sync_id id_;$/;"	m	class:boost::interprocess::ipcdetail::windows_semaphore	access:private
identity	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct identity$/;"	s	namespace:boost::interprocess::ipcdetail
if_	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_$/;"	s	namespace:boost::interprocess::ipcdetail
if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_c$/;"	s	namespace:boost::interprocess::ipcdetail
if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_c<false,T1,T2>$/;"	s	namespace:boost::interprocess::ipcdetail
impl_t	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^      typedef ipcdetail::shm_named_recursive_mutex impl_t;$/;"	t	class:boost::interprocess::named_recursive_mutex	access:private
impl_t	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^      typedef ipcdetail::windows_named_recursive_mutex   impl_t;$/;"	t	class:boost::interprocess::named_recursive_mutex	access:private
impl_t	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^      typedef ipcdetail::posix_named_semaphore   impl_t;$/;"	t	class:boost::interprocess::named_semaphore	access:private
impl_t	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^      typedef ipcdetail::shm_named_semaphore     impl_t;$/;"	t	class:boost::interprocess::named_semaphore	access:private
impl_t	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^      typedef ipcdetail::windows_named_semaphore impl_t;$/;"	t	class:boost::interprocess::named_semaphore	access:private
imultiset_iterator	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename Imultiset::iterator                           imultiset_iterator;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   in_place_interface(std::size_t alignm, std::size_t sz, const char *tname)$/;"	f	struct:boost::interprocess::ipcdetail::in_place_interface	access:public	signature:(std::size_t alignm, std::size_t sz, const char *tname)
in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^struct in_place_interface$/;"	s	namespace:boost::interprocess::ipcdetail
inc_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void inc_offset(std::ptrdiff_t bytes)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(std::ptrdiff_t bytes)
inc_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void inc_offset(DifferenceType bytes)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(DifferenceType bytes)
inc_ref_count	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type inc_ref_count()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
increment	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void increment()$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:()
index_aux	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef flat_map_index_aux<MapConfig>  index_aux;$/;"	t	class:boost::interprocess::flat_map_index	access:private
index_aux	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef iset_index_aux<MapConfig>                     index_aux;$/;"	t	class:boost::interprocess::iset_index	access:private
index_aux	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef iunordered_set_index_aux<MapConfig>           index_aux;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
index_aux	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef ipcdetail::map_index_aux<MapConfig>  index_aux;$/;"	t	class:boost::interprocess::map_index	access:private
index_aux	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef unordered_map_index_aux<MapConfig>   index_aux;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
index_config	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_config$/;"	s	namespace:boost::interprocess::ipcdetail
index_config_named	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::index_config<CharType, MemoryAlgorithm>  index_config_named;$/;"	t	class:boost::interprocess::segment_manager	access:private
index_config_unique	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::index_config<char, MemoryAlgorithm>      index_config_unique;$/;"	t	class:boost::interprocess::segment_manager	access:private
index_data	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   index_data(void *ptr) : m_ptr(ptr){}$/;"	f	struct:boost::interprocess::ipcdetail::index_data	access:public	signature:(void *ptr)
index_data	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_data$/;"	s	namespace:boost::interprocess::ipcdetail
index_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   index_key (const char_type *nm, size_type length)$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:(const char_type *nm, size_type length)
index_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_key$/;"	s	namespace:boost::interprocess::ipcdetail
index_t	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^                    key_less, allocator_type>      index_t;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
index_t	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      >::type                                                  index_t;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
index_t	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      >::type                                         index_t;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
index_t	/usr/include/boost/interprocess/indexes/map_index.hpp	/^       key_less, allocator_type>                   index_t;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
index_t	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^                         key_equal, allocator_type>      index_t;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
index_tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct index_tuple{};$/;"	s	namespace:boost::interprocess::ipcdetail
index_tuple_t	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef typename build_number_seq<sizeof...(Args)>::type index_tuple_t;$/;"	t	struct:boost::interprocess::ipcdetail::CtorNArg	access:public
index_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_aux::index_t                   index_type;$/;"	t	class:boost::interprocess::iset_index	access:private
index_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::index_t                   index_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
index_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_named>                    index_type;$/;"	t	class:boost::interprocess::segment_manager	access:private
infinite_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long infinite_time        = 0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      file_rename_information_t info;$/;"	m	struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
info_constants_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   struct info_constants_t$/;"	s	class:boost::interprocess::xsi_shared_memory_device	access:private
info_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   struct info_t$/;"	s	class:boost::interprocess::xsi_shared_memory_device	access:private
inherited	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef tuple<Tail...> inherited;$/;"	t	class:boost::interprocess::ipcdetail::tuple	access:private
init_atomic_func	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      init_atomic_func(ThreadSafeGlobalMap &m)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func	access:public	signature:(ThreadSafeGlobalMap &m)
init_atomic_func	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   struct init_atomic_func$/;"	s	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
init_bucket	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bucket_type init_bucket;$/;"	m	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public
initialize_global_map_handle	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void initialize_global_map_handle()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private	signature:()
initialize_memory	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void initialize_memory()$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:()
initialize_object_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void initialize_object_attributes$/;"	f	namespace:boost::interprocess::winapi	signature:( object_attributes_t *pobject_attr, unicode_string_t *name , unsigned long attr, void *rootdir, void *security_descr)
initialize_pointers	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void initialize_pointers()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:private	signature:()
initialize_singleton_logic	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void initialize_singleton_logic$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public	signature:(void *&ptr, volatile boost::uint32_t &this_module_singleton_initialized, singleton_constructor_t constructor, bool phoenix)
initialized	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   bool initialized;$/;"	m	class:boost::interprocess::winapi::interprocess_all_access_security	access:private
insert	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static ref_count_ptr *insert(managed_global_memory &map, const char *name, const ref_count_ptr &ref)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(managed_global_memory &map, const char *name, const ref_count_ptr &ref)
insert	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   ref_count_ptr * insert(const char *name, const ref_count_ptr &ref)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:(const char *name, const ref_count_ptr &ref)
insert	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static ref_count_ptr * insert(windows_semaphore_based_map &map, const char *name, const ref_count_ptr &ref)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:(windows_semaphore_based_map &map, const char *name, const ref_count_ptr &ref)
insert_at	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_header & insert_at(iterator pos)$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(iterator pos)
insert_at	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_header & insert_at(iterator where)$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(iterator where)
insert_check	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   std::pair<iterator, bool>insert_check$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key, insert_commit_data &commit_data)
insert_check	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   std::pair<iterator, bool>insert_check$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key, insert_commit_data &commit_data)
insert_commit	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iterator insert_commit(value_type &val, insert_commit_data &commit_data)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(value_type &val, insert_commit_data &commit_data)
insert_commit_data	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::insert_commit_data       insert_commit_data;$/;"	t	class:boost::interprocess::iset_index	access:public
insert_commit_data	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::insert_commit_data       insert_commit_data;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
insert_mapping	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static void insert_mapping(segment_group_id group_id, void *ptr, std::size_t size)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id group_id, void *ptr, std::size_t size)
inserted_ptr_begin	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   iterator inserted_ptr_begin() const$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:() const
inserted_ptr_end	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   iterator inserted_ptr_end() const$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:() const
instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   instance_t(){}$/;"	f	class:boost::interprocess::ipcdetail::instance_t	access:private	signature:()
instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class instance_t$/;"	c	namespace:boost::interprocess::ipcdetail
instance_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	g	namespace:boost::interprocess
int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::int_type                 int_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::int_type     int_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
integer_type	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   typedef typename ConditionMembers::integer_type    integer_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private
integer_type	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      typedef boost::int32_t     integer_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
integer_type	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      typedef boost::int32_t           integer_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
integral_constant	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct integral_constant$/;"	s	namespace:boost::interprocess::ipcdetail
interlocked_compare_exchange	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_compare_exchange(long volatile *addr, long val1, long val2)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr, long val1, long val2)
interlocked_decrement	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_decrement(long volatile *addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr)
interlocked_exchange	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_exchange(long volatile* addend, long value)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile* addend, long value)
interlocked_exchange_add	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_exchange_add(long volatile* addend, long value)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile* addend, long value)
interlocked_increment	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_increment(long volatile *addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr)
intermediate_value	/usr/include/boost/interprocess/detail/utilities.hpp	/^   static const std::size_t intermediate_value = (OrigSize-1)\/RoundTo+1;$/;"	m	struct:boost::interprocess::ipcdetail::ct_rounded_size	access:public
intermodule_singleton	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^class intermodule_singleton$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:windows_intermodule_singleton
intermodule_singleton_common	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^class intermodule_singleton_common$/;"	c	namespace:boost::interprocess::ipcdetail
intermodule_singleton_helpers	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^namespace intermodule_singleton_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
intermodule_singleton_helpers	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^namespace intermodule_singleton_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
intermodule_singleton_helpers	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^namespace intermodule_singleton_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
intermodule_singleton_impl	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^class intermodule_singleton_impl$/;"	c	namespace:boost::interprocess::ipcdetail
intermodule_singleton_mutex_family	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^struct intermodule_singleton_mutex_family$/;"	s	namespace:boost::interprocess::ipcdetail
intermodule_types	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^struct intermodule_types$/;"	s	namespace:boost::interprocess::ipcdetail
internal	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *internal;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
internal	/usr/include/boost/interprocess/offset_ptr.hpp	/^   ipcdetail::offset_ptr_internal<OffsetType, OffsetAlignment> internal;$/;"	m	class:boost::interprocess::offset_ptr	access:private
internal_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   typedef interprocess_condition internal_condition;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
internal_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   typedef ipcdetail::condition_any_wrapper<internal_condition_members> internal_condition;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
internal_condition	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   typedef ipcdetail::condition_any_wrapper<internal_condition_members> internal_condition;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
internal_condition_members	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   class internal_condition_members$/;"	c	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
internal_condition_members	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   class internal_condition_members$/;"	c	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
internal_equal	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_equal (shared_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count<T2, VoidAllocator2, Deleter2> const & other) const
internal_equal	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_equal (weak_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count<T2, VoidAllocator2, Deleter2> const & other) const
internal_high	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *internal_high;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
internal_less	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_less  (shared_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count<T2, VoidAllocator2, Deleter2> const & other) const
internal_less	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_less (weak_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count<T2, VoidAllocator2, Deleter2> const & other) const
internal_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   const internal_mutex_type &internal_mutex() const$/;"	f	class:boost::interprocess::interprocess_mutex	access:public	signature:() const
internal_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   internal_mutex_type &internal_mutex()$/;"	f	class:boost::interprocess::interprocess_mutex	access:public	signature:()
internal_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   internal_mutex_type &internal_mutex()$/;"	f	class:boost::interprocess::named_mutex	access:public	signature:()
internal_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   interprocess_mutex &internal_mutex()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:()
internal_mutex_lock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   internal_mutex_lock(Lock &l)$/;"	f	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public	signature:(Lock &l)
internal_mutex_lock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^class internal_mutex_lock$/;"	c	namespace:boost::interprocess::ipcdetail
internal_mutex_type	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      typedef ipcdetail::posix_mutex internal_mutex_type;$/;"	t	class:boost::interprocess::interprocess_mutex	access:public
internal_mutex_type	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      typedef ipcdetail::spin_mutex internal_mutex_type;$/;"	t	class:boost::interprocess::interprocess_mutex	access:public
internal_mutex_type	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      typedef ipcdetail::windows_mutex internal_mutex_type;$/;"	t	class:boost::interprocess::interprocess_mutex	access:public
internal_mutex_type	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^      typedef ipcdetail::posix_named_mutex      internal_mutex_type;$/;"	t	class:boost::interprocess::named_mutex	access:public
internal_mutex_type	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^      typedef ipcdetail::shm_named_mutex        internal_mutex_type;$/;"	t	class:boost::interprocess::named_mutex	access:public
internal_mutex_type	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^      typedef ipcdetail::windows_named_mutex    internal_mutex_type;$/;"	t	class:boost::interprocess::named_mutex	access:public
internal_mutex_type	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   typedef interprocess_mutex internal_mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public
internal_pod	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   const internal_type &internal_pod() const$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:public	signature:() const
internal_pod	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   internal_type &internal_pod()$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:public	signature:()
internal_type	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   typedef __int64 internal_type;$/;"	t	class:boost::interprocess::ipcdetail::sync_id	access:public
interprocess	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/containers_fwd.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/deque.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/flat_map.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/flat_set.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/list.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/map.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/pair.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/set.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/slist.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/stable_vector.hpp	/^   namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/string.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/vector.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/version_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/creation_tags.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/atomic.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^namespace boost { namespace interprocess { namespace ipcdetail {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/math_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/min_max.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/move.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/mpl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^      namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/type_traits.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/utilities.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace interprocess  {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/errors.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/exceptions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/file_mapping.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/map_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/null_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace boost{  namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/permissions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/segment_manager.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/shared_memory_object.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/file_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/lock_options.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/spin/interprocess_barrier.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/named_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/xsi_key.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess_acl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_acl$/;"	s	namespace:boost::interprocess::winapi
interprocess_all_access_security	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_all_access_security()$/;"	f	class:boost::interprocess::winapi::interprocess_all_access_security	access:public	signature:()
interprocess_all_access_security	/usr/include/boost/interprocess/detail/win32_api.hpp	/^class interprocess_all_access_security$/;"	c	namespace:boost::interprocess::winapi
interprocess_by_handle_file_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_by_handle_file_information$/;"	s	namespace:boost::interprocess::winapi
interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:()
interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition(const interprocess_condition &);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(const interprocess_condition &)
interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^class interprocess_condition$/;"	c	namespace:boost::interprocess
interprocess_condition_any	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   interprocess_condition_any(){}$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:()
interprocess_condition_any	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   interprocess_condition_any(const interprocess_condition_any &);$/;"	p	class:boost::interprocess::interprocess_condition_any	access:private	signature:(const interprocess_condition_any &)
interprocess_condition_any	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^class interprocess_condition_any$/;"	c	namespace:boost::interprocess
interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   interprocess_exception(const char *err\/*error_code_t ec = other_error*\/)$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:(const char *err )
interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   interprocess_exception(const error_info &err_info, const char *str = 0)$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:(const error_info &err_info, const char *str = 0)
interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^class interprocess_exception : public std::exception$/;"	c	namespace:boost::interprocess	inherits:std::exception
interprocess_filetime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_filetime$/;"	s	namespace:boost::interprocess::winapi
interprocess_memory_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_memory_basic_information$/;"	s	namespace:boost::interprocess::winapi
interprocess_mutex	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef typename MutexFamily::mutex_type        interprocess_mutex;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
interprocess_mutex	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef typename MutexFamily::mutex_type        interprocess_mutex;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private
interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex(const interprocess_mutex &);$/;"	p	class:boost::interprocess::interprocess_mutex	access:private	signature:(const interprocess_mutex &)
interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^class interprocess_mutex$/;"	c	namespace:boost::interprocess
interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline interprocess_mutex::interprocess_mutex(){}$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
interprocess_overlapped	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_overlapped$/;"	s	namespace:boost::interprocess::winapi
interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex(const interprocess_recursive_mutex &);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:private	signature:(const interprocess_recursive_mutex &)
interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^class interprocess_recursive_mutex$/;"	c	namespace:boost::interprocess
interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::interprocess_recursive_mutex(){}$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
interprocess_section_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_section_basic_information$/;"	s	namespace:boost::interprocess::winapi
interprocess_security_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_security_attributes$/;"	s	namespace:boost::interprocess::winapi
interprocess_security_descriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^} interprocess_security_descriptor;$/;"	t	namespace:boost::interprocess::winapi	typeref:struct:boost::interprocess::winapi::_interprocess_security_descriptor
interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore(const interprocess_semaphore &);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:private	signature:(const interprocess_semaphore &)
interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore(unsigned int initialCount);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:(unsigned int initialCount)
interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^class interprocess_semaphore$/;"	c	namespace:boost::interprocess
interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline interprocess_semaphore::interprocess_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(unsigned int initialCount)
interprocess_semaphore_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_semaphore_basic_information$/;"	s	namespace:boost::interprocess::winapi
interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_sharable_mutex();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_sharable_mutex(const interprocess_sharable_mutex &);$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:private	signature:(const interprocess_sharable_mutex &)
interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^class interprocess_sharable_mutex$/;"	c	namespace:boost::interprocess
interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline interprocess_sharable_mutex::interprocess_sharable_mutex()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
interprocess_tester	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^class interprocess_tester$/;"	c	namespace:boost::interprocess::ipcdetail
interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex(const interprocess_upgradable_mutex &);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:private	signature:(const interprocess_upgradable_mutex &)
interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^class interprocess_upgradable_mutex$/;"	c	namespace:boost::interprocess
interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline interprocess_upgradable_mutex::interprocess_upgradable_mutex()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
intersegment_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_base()$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:()
intersegment_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct intersegment_base$/;"	s	namespace:boost::interprocess
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(U *ptr){  base_t::set_from_pointer(pointer(ptr)); }$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(U *ptr)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr& ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr& ptr)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<T2> &ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &ptr)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, ipcdetail::const_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, ipcdetail::const_cast_tag)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, ipcdetail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, ipcdetail::dynamic_cast_tag)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, ipcdetail::reinterpret_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, ipcdetail::reinterpret_cast_tag)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, ipcdetail::static_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, ipcdetail::static_cast_tag)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(pointer ptr = 0)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(pointer ptr = 0)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^class intersegment_ptr : public flat_map_intersegment<interprocess_mutex>$/;"	c	namespace:boost::interprocess	inherits:flat_map_intersegment
intrusive	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace intrusive{$/;"	n	namespace:boost
intrusive	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace intrusive {$/;"	n	namespace:boost
intrusive_compare_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_compare_key(const CharT *str, std::size_t len)$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_compare_key	access:public	signature:(const CharT *str, std::size_t len)
intrusive_compare_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct intrusive_compare_key$/;"	s	namespace:boost::interprocess::ipcdetail
intrusive_compare_key_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef intrusive_compare_key<CharT>            intrusive_compare_key_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      intrusive_compare_key_type                         intrusive_compare_key_type;$/;"	t	class:boost::interprocess::iset_index	access:private
intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_compare_key_type                         intrusive_compare_key_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_compare_key_type                      intrusive_compare_key_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
intrusive_key_value_less	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   struct intrusive_key_value_less$/;"	s	class:boost::interprocess::iset_index	access:private
intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(): m_ptr(0)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(const pointer &p, bool add_ref = true): m_ptr(p)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(const pointer &p, bool add_ref = true)
intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(intrusive_ptr const & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr const & rhs)
intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   template<class U> intrusive_ptr$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr<U, VP> const & rhs)
intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^class intrusive_ptr$/;"	c	namespace:boost::interprocess
intrusive_value_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   struct intrusive_value_type$/;"	s	struct:boost::interprocess::ipcdetail::index_config	access:public
intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl(){}$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:()
intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl(const intrusive_value_type_impl &);$/;"	p	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:private	signature:(const intrusive_value_type_impl &)
intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct intrusive_value_type_impl$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:Hook
invalid_argument	/usr/include/boost/interprocess/errors.hpp	/^   invalid_argument,$/;"	e	enum:boost::interprocess::error_code_t
invalid_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t invalid_file()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
invalid_file	/usr/include/boost/interprocess/mapped_region.hpp	/^   ,  m_file_or_mapping_hnd(ipcdetail::invalid_file())$/;"	f	class:boost::interprocess::mapped_region	access:public	signature:()
invalid_file_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long invalid_file_attributes =  ((unsigned long)-1);$/;"	m	namespace:boost::interprocess::winapi
invalid_file_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long invalid_file_size    = (unsigned long)0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
invalid_handle_value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static       void * const  invalid_handle_value = ((void*)(long)(-1));$/;"	m	namespace:boost::interprocess::winapi
invalid_mode	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , invalid_mode   = 0xffff$/;"	e	enum:boost::interprocess::__anon2
io_error	/usr/include/boost/interprocess/errors.hpp	/^   io_error,$/;"	e	enum:boost::interprocess::error_code_t
io_status_block_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct io_status_block_t {$/;"	s	namespace:boost::interprocess::winapi
ipcdetail	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/creation_tags.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/atomic.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^namespace boost { namespace interprocess { namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/math_functions.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/mpl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^      namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/type_traits.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/utilities.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/indexes/map_index.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace ipcdetail$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace ipcdetail{ class raw_mapped_region_creator; }$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/permissions.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/named_condition.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^namespace ipcdetail{$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^namespace ipcdetail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/named_condition.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^namespace ipcdetail {$/;"	n	namespace:boost::interprocess
ipcdetail_really_deep_namespace	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace ipcdetail_really_deep_namespace {$/;"	n	namespace:boost::interprocess
is_convertible	/usr/include/boost/interprocess/detail/mpl.hpp	/^class is_convertible$/;"	c	namespace:boost::interprocess::ipcdetail
is_cv_same	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_cv_same$/;"	s	namespace:boost::interprocess::ipcdetail
is_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool is_directory(const char *path)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *path)
is_directory_error	/usr/include/boost/interprocess/errors.hpp	/^   is_directory_error,$/;"	e	enum:boost::interprocess::error_code_t
is_empty	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool is_empty() const$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:() const
is_full	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool is_full() const$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:() const
is_in_stack	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_in_stack         = 1;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
is_intrusive_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^struct is_intrusive_index$/;"	s	namespace:boost::interprocess
is_intrusive_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^struct is_intrusive_index$/;"	s	namespace:boost::interprocess
is_intrusive_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::bool_<is_intrusive_index<index_type>::value >    is_intrusive_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
is_max_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_max_mode         = 4;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
is_multisegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct is_multisegment_ptr$/;"	s	namespace:boost::interprocess
is_node_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^struct is_node_index$/;"	s	namespace:boost::interprocess
is_node_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^struct is_node_index$/;"	s	namespace:boost::interprocess
is_node_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef ipcdetail::bool_<is_node_index<index_type>::value>          is_node_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
is_normal_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool is_normal_file(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
is_null	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool is_null() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
is_owner_dead	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool is_owner_dead(boost::uint32_t own);$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private	signature:(boost::uint32_t own)
is_owner_dead	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::is_owner_dead(boost::uint32_t own)$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:(boost::uint32_t own)
is_pointee_outside	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_pointee_outside  = 0;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
is_pointer	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_pointer$/;"	s	namespace:boost::interprocess::ipcdetail
is_pointer	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_pointer<T*>$/;"	s	namespace:boost::interprocess::ipcdetail
is_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_reference$/;"	s	namespace:boost::interprocess::ipcdetail
is_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_reference<T&>$/;"	s	namespace:boost::interprocess::ipcdetail
is_relative	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_relative         = 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
is_same	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct is_same$/;"	s	namespace:boost::interprocess::ipcdetail
is_same_tester	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static no_type is_same_tester(...);$/;"	p	struct:boost::interprocess::ipcdetail::is_same	access:public	signature:(....)
is_same_tester	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static yes_type is_same_tester(V*, V*);$/;"	p	struct:boost::interprocess::ipcdetail::is_same	access:public	signature:(V*, V*)
is_segmented	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_segmented        = 3;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
is_shm	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^   bool     is_shm;$/;"	m	struct:boost::interprocess::mapping_handle_impl_t	access:public
is_valid_fd	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool is_valid_fd(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
iset_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   iset_index(typename MapConfig::segment_manager_base *)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(typename MapConfig::segment_manager_base *)
iset_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^class iset_index$/;"	c	namespace:boost::interprocess	inherits:iset_index_aux::index_t
iset_index_aux	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^struct iset_index_aux$/;"	s	namespace:boost::interprocess
iterator	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::iterator                 iterator;$/;"	t	class:boost::interprocess::iset_index	access:public
iterator	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::iterator                 iterator;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
iterator	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   typedef void * iterator;$/;"	t	class:boost::interprocess::null_index	access:public
iterator	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef msg_hdr_ptr_t *iterator;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
iterator_category	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef std::random_access_iterator_tag         iterator_category;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
iterator_category	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef std::random_access_iterator_tag   iterator_category;$/;"	t	class:boost::interprocess::offset_ptr	access:public
iterator_val_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename Iterator::value_type        iterator_val_t;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iunordered_set_index(segment_manager_base *mngr)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(segment_manager_base *mngr)
iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^class iunordered_set_index$/;"	c	namespace:boost::interprocess	inherits:iunordered_set_index_aux::allocator_holder,iunordered_set_index_aux::index_t
iunordered_set_index_aux	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^struct iunordered_set_index_aux$/;"	s	namespace:boost::interprocess
key_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *key_;$/;"	m	struct:boost::interprocess::winapi::reg_closer	access:public
key_equal	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef std::equal_to<key_type>                 key_equal;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
key_less	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef std::less<key_type>                     key_less;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
key_less	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef std::less<key_type>                     key_less;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
key_query_value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static unsigned long key_query_value    = 0x0001;$/;"	m	namespace:boost::interprocess::winapi
key_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef index_key<CharT, void_pointer>        key_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
key_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
key_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
key_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
l_	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   Lock &l_;$/;"	m	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:private
l_	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   Lock &l_;$/;"	m	class:boost::interprocess::ipcdetail::lock_inverter	access:private
lang_neutral	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lang_neutral         = (unsigned long)0x00;$/;"	m	namespace:boost::interprocess::winapi
lcm	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer lcm(const Integer & A, const Integer & B)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const Integer & A, const Integer & B)
len	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type               len;     \/\/ Message length$/;"	m	class:boost::interprocess::ipcdetail::msg_hdr_t	access:public
less	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool less(const self_t &y) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &y) const
less	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   bool less(const transform_iterator &other) const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
less_comp	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool less_comp(const block_header<size_type> &b) const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(const block_header<size_type> &b) const
liExpTimeZoneBias	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liExpTimeZoneBias;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
liKeBootTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liKeBootTime;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
liKeSystemTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liKeSystemTime;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
lib_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *lib_;$/;"	m	struct:boost::interprocess::winapi::library_unloader	access:public
library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   library_unloader(void *module) : lib_(module){}$/;"	f	struct:boost::interprocess::winapi::library_unloader	access:public	signature:(void *module)
library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct library_unloader$/;"	s	namespace:boost::interprocess::winapi
lifetime	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   intermodule_singleton_impl<C, L, P, ThreadSafeGlobalMap>::lifetime;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl
lifetime	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static lifetime_type lifetime;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
lifetime_type	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      <LazyInit, lifetime_type_lazy, lifetime_type_static>::type lifetime_type;$/;"	t	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
lifetime_type_lazy	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   struct lifetime_type_lazy$/;"	s	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
lifetime_type_static	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      lifetime_type_static()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_static	access:public	signature:()
lifetime_type_static	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   struct lifetime_type_static$/;"	s	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	inherits:lifetime_type_lazy	access:private
limit	/usr/include/boost/interprocess/detail/win32_api.hpp	/^	unsigned int limit;		\/\/ max semaphore count$/;"	m	struct:boost::interprocess::winapi::interprocess_semaphore_basic_information	access:public
limit	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   long limit() const$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:() const
load_library	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *load_library(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
local_free	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * local_free(void *hmem)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hmem)
lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void robust_spin_mutex<Mutex>::lock()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
lock	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   shared_ptr<T, A, D> lock() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
lock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   void lock()    {   l_.unlock();   }$/;"	f	class:boost::interprocess::ipcdetail::lock_inverter	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   void lock()    { l_.lock(); }$/;"	f	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline void interprocess_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline void interprocess_sharable_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::lock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::lock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline void named_sharable_mutex::lock()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline void posix_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline void posix_named_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline void posix_recursive_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline void shm_named_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline void shm_named_recursive_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline void spin_mutex::lock(void)$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:(void)
lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline void spin_recursive_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline void windows_mutex::lock(void)$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:(void)
lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline void windows_named_mutex::lock()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void lock()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::lock()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
lock_error	/usr/include/boost/interprocess/errors.hpp	/^   lock_error,$/;"	e	enum:boost::interprocess::error_code_t
lock_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   lock_exception()$/;"	f	class:boost::interprocess::lock_exception	access:public	signature:()
lock_exception	/usr/include/boost/interprocess/exceptions.hpp	/^class lock_exception : public interprocess_exception$/;"	c	namespace:boost::interprocess	inherits:interprocess_exception
lock_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool lock_file_ex(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)
lock_file_logic	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      lock_file_logic(managed_global_memory &shm)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:(managed_global_memory &shm)
lock_file_logic	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   struct lock_file_logic$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public
lock_file_logic	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      lock_file_logic(windows_semaphore_based_map &)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:(windows_semaphore_based_map &)
lock_file_logic	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   struct lock_file_logic$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public
lock_inverter	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   lock_inverter(Lock &l)$/;"	f	class:boost::interprocess::ipcdetail::lock_inverter	access:public	signature:(Lock &l)
lock_inverter	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^class lock_inverter$/;"	c	namespace:boost::interprocess::ipcdetail
lock_locking_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool lock_locking_file(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
lock_own_unique_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool lock_own_unique_file();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private	signature:()
lock_own_unique_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::lock_own_unique_file()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::lock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline void interprocess_sharable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline void named_sharable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
lockfile_exclusive_lock	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lockfile_exclusive_lock    = 2;$/;"	m	namespace:boost::interprocess::winapi
lockfile_fail_immediately	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lockfile_fail_immediately  = 1;$/;"	m	namespace:boost::interprocess::winapi
locking_file_serial_id	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^struct locking_file_serial_id$/;"	s	namespace:boost::interprocess::ipcdetail
log2_ceil	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer log2_ceil(const Integer & A)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const Integer & A)
lookup_error	/usr/include/boost/interprocess/errors.hpp	/^inline error_code_t lookup_error(native_error_t err)$/;"	f	namespace:boost::interprocess	signature:(native_error_t err)
lower_bound	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   iterator lower_bound(const msg_hdr_ptr_t & value, priority_functor<VoidPointer> func)$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(const msg_hdr_ptr_t & value, priority_functor<VoidPointer> func)
lpMaximumApplicationAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    void * lpMaximumApplicationAddress;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
lpMinimumApplicationAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    void * lpMinimumApplicationAddress;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
lpSecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *lpSecurityDescriptor;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros$/;"	s	namespace:boost::interprocess::ipcdetail
ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros<0>$/;"	s	namespace:boost::interprocess::ipcdetail
ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros<1>$/;"	s	namespace:boost::interprocess::ipcdetail
m_algo	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   MemoryAlgorithm & m_algo;$/;"	m	class:boost::interprocess::ipcdetail::mem_algo_deallocator	access:private
m_alloc	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   Allocator& m_alloc;$/;"	m	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public
m_alloc_type_sizeof_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char  m_alloc_type_sizeof_char;$/;"	m	struct:boost::interprocess::ipcdetail::block_header	access:public
m_allocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      size_type       m_allocated;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
m_allocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type         m_allocated;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
m_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type            m_allocated;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
m_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type m_allocated :  1;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
m_arg	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   Arg m_arg;$/;"	m	class:boost::interprocess::ipcdetail::named_creation_functor	access:private
m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_barrierattr_t m_attr;$/;"	m	struct:boost::interprocess::ipcdetail::barrierattr_wrapper	access:public
m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_condattr_t m_attr;$/;"	m	struct:boost::interprocess::ipcdetail::condattr_wrapper	access:public
m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_mutexattr_t m_attr;$/;"	m	struct:boost::interprocess::ipcdetail::mutexattr_wrapper	access:public
m_b_uninitialize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   const bool m_b_uninitialize;$/;"	m	struct:boost::interprocess::winapi::co_uninitializer	access:private
m_base	/usr/include/boost/interprocess/mapped_region.hpp	/^   void*             m_base;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_bufferstream	access:private
m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_ibufferstream	access:private
m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_obufferstream	access:private
m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_vectorstream	access:private
m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vectorbuf_t & m_buf() const{  return *this;  }$/;"	f	class:boost::interprocess::basic_ivectorstream	access:private	signature:() const
m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vectorbuf_t & m_buf()const {  return *this;  }$/;"	f	class:boost::interprocess::basic_ovectorstream	access:private	signature:() const
m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   vectorbuf_t &       m_buf()      {  return *this;  }$/;"	f	class:boost::interprocess::basic_ivectorstream	access:private	signature:()
m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   vectorbuf_t &       m_buf()      {  return *this;  }$/;"	f	class:boost::interprocess::basic_ovectorstream	access:private	signature:()
m_buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   CharT *                 m_buffer;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
m_cache	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl<node_pool_t> m_cache;$/;"	m	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:private
m_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain         m_cached_nodes;$/;"	m	class:boost::interprocess::ipcdetail::cache_impl	access:private
m_command	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   volatile boost::uint32_t    m_command;$/;"	m	class:boost::interprocess::ipcdetail::spin_condition	access:private
m_cond	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      condvar_type   m_cond;$/;"	m	class:boost::interprocess::interprocess_condition_any::members	access:private
m_cond	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   ipcdetail::condition_any_wrapper<members>   m_cond;$/;"	m	class:boost::interprocess::interprocess_condition_any	access:private
m_cond	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   condition_type m_cond;$/;"	m	class:boost::interprocess::named_condition	access:private
m_cond	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   condition_any_type m_cond;$/;"	m	class:boost::interprocess::named_condition_any	access:private
m_cond	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      condvar_type   m_cond;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:private
m_cond	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   internal_condition m_cond;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
m_cond	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      condvar_type   m_cond;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:private
m_cond	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   internal_condition m_cond;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
m_cond_recv	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_condition     m_cond_recv;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
m_cond_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_condition     m_cond_send;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
m_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      ipcdetail::posix_condition m_condition;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
m_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      ipcdetail::spin_condition m_condition;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
m_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      ipcdetail::windows_condition m_condition;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
m_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   pthread_cond_t   m_condition;$/;"	m	class:boost::interprocess::ipcdetail::posix_condition	access:private
m_condition_data	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   ipcdetail::condition_8a_wrapper<condition_data> m_condition_data;$/;"	m	class:boost::interprocess::ipcdetail::windows_condition	access:private
m_condition_data	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      condition_data &m_condition_data;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:private
m_condition_data	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   ipcdetail::condition_8a_wrapper<condition_data> m_condition_data;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private
m_count	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   volatile boost::uint32_t m_count;$/;"	m	class:boost::interprocess::ipcdetail::spin_semaphore	access:private
m_creation_type	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   create_enum_t m_creation_type;$/;"	m	class:boost::interprocess::ipcdetail::named_creation_functor	access:private
m_ctrl	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   }                       m_ctrl;$/;"	m	class:boost::interprocess::interprocess_sharable_mutex	typeref:struct:boost::interprocess::interprocess_sharable_mutex::control_word_t	access:private
m_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   }                       m_ctrl;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	typeref:struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:private
m_cur_first_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type                  m_cur_first_msg;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
m_cur_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   size_type                  m_cur_num_msg;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
m_data	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   ConditionMembers m_data;$/;"	m	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:private
m_data	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   ConditionAnyMembers m_data;$/;"	m	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:private
m_dothrow	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const bool           m_dothrow;$/;"	m	class:boost::interprocess::ipcdetail::named_proxy	access:private
m_dummy	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      static volatile int m_dummy;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy	access:public
m_dummy	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^volatile int intermodule_singleton_impl<C, L, P, ThreadSafeGlobalMap>::lifetime_type_lazy::m_dummy = 0;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy
m_ec	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   m_ec;$/;"	m	struct:boost::interprocess::error_info	access:private
m_enter_mut	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   spin_mutex  m_enter_mut;$/;"	m	class:boost::interprocess::ipcdetail::spin_condition	access:private
m_err	/usr/include/boost/interprocess/exceptions.hpp	/^   error_info        m_err;$/;"	m	class:boost::interprocess::interprocess_exception	access:private
m_extra_hdr_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type         m_extra_hdr_bytes;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
m_extra_hdr_bytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type            m_extra_hdr_bytes;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
m_file_hnd	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_handle_t m_file_hnd;$/;"	m	class:boost::interprocess::file_lock	access:private
m_file_hnd	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   void *m_file_hnd;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_sync	access:private
m_file_or_mapping_hnd	/usr/include/boost/interprocess/mapped_region.hpp	/^   file_handle_t     m_file_or_mapping_hnd;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_filename	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   std::string       m_filename;$/;"	m	class:boost::interprocess::ipcdetail::file_wrapper	access:private
m_filename	/usr/include/boost/interprocess/file_mapping.hpp	/^   std::string       m_filename;$/;"	m	class:boost::interprocess::file_mapping	access:private
m_filename	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   std::string    m_filename;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
m_find	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const bool           m_find;$/;"	m	class:boost::interprocess::ipcdetail::named_proxy	access:private
m_first_gate	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      interprocess_condition  &m_first_gate;$/;"	m	struct:boost::interprocess::interprocess_sharable_mutex::exclusive_rollback	access:public
m_first_gate	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_condition  m_first_gate;$/;"	m	class:boost::interprocess::interprocess_sharable_mutex	access:private
m_first_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      interprocess_condition  &m_first_gate;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public
m_first_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_condition  m_first_gate;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
m_frontend	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   BasicManagedMemoryImpl *m_frontend;$/;"	m	class:boost::interprocess::ipcdetail::create_open_func	access:private
m_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      segment_group_id     m_group;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
m_group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   group_services m_group_services;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
m_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::ipcdetail::file_wrapper	access:private
m_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::file_mapping	access:private
m_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
m_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void *         m_handle;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
m_head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   Head m_head;$/;"	m	class:boost::interprocess::ipcdetail::tuple	access:protected
m_header	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   } m_header;$/;"	m	class:boost::interprocess::ipcdetail::shared_pool_impl	typeref:struct:boost::interprocess::ipcdetail::shared_pool_impl::header_t	access:private
m_header	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	typeref:struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:private
m_header	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	typeref:struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:private
m_header	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::rbtree_best_fit	typeref:struct:boost::interprocess::rbtree_best_fit::header_t	access:private
m_header	/usr/include/boost/interprocess/segment_manager.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::segment_manager	typeref:struct:boost::interprocess::segment_manager::header_t	access:private
m_heapmem	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   std::vector<char>  m_heapmem;$/;"	m	class:boost::interprocess::basic_managed_heap_memory	access:private
m_id	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   boost::uint8_t m_id;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
m_imultiset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      Imultiset            m_imultiset;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
m_is_xsi	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool              m_is_xsi;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_it	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   Iterator m_it;$/;"	m	class:boost::interprocess::transform_iterator	access:private
m_key	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   key_t          m_key;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
m_key	/usr/include/boost/interprocess/xsi_key.hpp	/^   key_t m_key;$/;"	m	class:boost::interprocess::xsi_key	access:private
m_len	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type         m_len;$/;"	m	struct:boost::interprocess::ipcdetail::index_key	access:private
m_len	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t    m_len;$/;"	m	struct:boost::interprocess::ipcdetail::intrusive_compare_key	access:public
m_length	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::size_t             m_length;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(false)
m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      : mp_mutex(0), m_locked(scop.owns())$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(scop.owns())
m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::scoped_lock	access:private
m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(false)
m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      : mp_mutex(0), m_locked(upgr.owns())$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(upgr.owns())
m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::sharable_lock	access:private
m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(false)
m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^      : mp_mutex(0), m_locked(upgr.owns())$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(upgr.owns())
m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::upgradable_lock	access:private
m_map	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      ThreadSafeGlobalMap &m_map;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func	access:private
m_map	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      ThreadSafeGlobalMap &m_map;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func	access:private
m_mapped_region	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   mapped_region     m_mapped_region;$/;"	m	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private
m_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type                     m_max_cached_nodes;$/;"	m	class:boost::interprocess::ipcdetail::cache_impl	access:private
m_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const size_type            m_max_msg_size;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
m_max_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const size_type            m_max_num_msg;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
m_maxmsg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const size_type m_maxmsg;$/;"	m	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public
m_maxmsgsize	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const size_type m_maxmsgsize;$/;"	m	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public
m_mfile	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typename ipcdetail::mfile_open_or_create<AllocationAlgorithm>::type m_mfile;$/;"	m	class:boost::interprocess::basic_managed_mapped_file	access:private
m_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      size_type            m_min_segment_size;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
m_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mode_t      m_mode;$/;"	m	class:boost::interprocess::ipcdetail::file_wrapper	access:private
m_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mode_t            m_mode;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
m_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^   mode_t    m_mode;$/;"	m	class:boost::interprocess::file_mapping	access:private
m_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   ,  m_mode(read_only)$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(read_only)
m_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   mode_t            m_mode;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mode_t         m_mode;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
m_mode	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::ios_base::openmode m_mode;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
m_mode	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   std::ios_base::openmode m_mode;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
m_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mode_t         m_mode;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
m_ms_services	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      multi_segment_services &m_ms_services;$/;"	m	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
m_mtx	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      mutex_type     m_mtx;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:private
m_mtx	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      mutex_type     m_mtx;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:private
m_mtx_hnd	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void *m_mtx_hnd;$/;"	m	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:protected
m_mtx_lock	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   winapi_mutex_wrapper     m_mtx_lock;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:private
m_mtx_unblock_lock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      windows_mutex     m_mtx_unblock_lock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
m_mtx_unblock_lock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      winapi_mutex_wrapper       m_mtx_unblock_lock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
m_mtx_wrapper	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      winapi_mutex_wrapper&     m_mtx_wrapper;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:private
m_mtx_wrapper	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   winapi_mutex_wrapper m_mtx_wrapper;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private
m_mut	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      mutex_type     m_mut;$/;"	m	class:boost::interprocess::interprocess_condition_any::members	access:private
m_mut	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_mutex      m_mut;$/;"	m	class:boost::interprocess::interprocess_sharable_mutex	access:private
m_mut	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_mutex      m_mut;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
m_mut	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   internal_mutex_type m_mut;$/;"	m	class:boost::interprocess::named_mutex	access:public
m_mut	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   impl_t m_mut;$/;"	m	class:boost::interprocess::named_recursive_mutex	access:private
m_mut	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   pthread_mutex_t   m_mut;$/;"	m	class:boost::interprocess::ipcdetail::posix_mutex	access:private
m_mut	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   pthread_mutex_t   m_mut;$/;"	m	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:private
m_mutex	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_mutex         m_mutex;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
m_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   internal_mutex_type m_mutex;$/;"	m	class:boost::interprocess::interprocess_mutex	access:private
m_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   spin_mutex     m_mutex;$/;"	m	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private
m_nLockCount	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   unsigned int   m_nLockCount;$/;"	m	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private
m_nOwner	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   volatile ipcdetail::OS_systemwide_thread_id_t   m_nOwner;$/;"	m	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private
m_name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharType *m_name;$/;"	m	class:boost::interprocess::ipcdetail::char_ptr_holder	access:private
m_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   std::string       m_name;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
m_name	/usr/include/boost/interprocess/file_mapping.hpp	/^   const char * m_name;$/;"	m	class:boost::interprocess::remove_file_on_destroy	access:private
m_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   const char * m_name;$/;"	m	class:boost::interprocess::remove_shared_memory_on_destroy	access:private
m_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   std::string    m_name;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
m_named_index	/usr/include/boost/interprocess/segment_manager.hpp	/^      named_index_t           m_named_index;$/;"	m	struct:boost::interprocess::segment_manager::header_t	access:public
m_named_sync	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_sync   m_named_sync;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private
m_named_sync	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_sync m_named_sync;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private
m_named_sync	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_sync m_named_sync;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private
m_nat	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t m_nat;$/;"	m	struct:boost::interprocess::error_info	access:private
m_next	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      block_ctrl_ptr m_next;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public
m_next	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      block_ctrl_ptr m_next;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public
m_node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   node_pool_t m_node_pool;$/;"	m	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private
m_node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   node_pool_t m_node_pool;$/;"	m	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private
m_num	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   mutable std::size_t  m_num;$/;"	m	class:boost::interprocess::ipcdetail::named_proxy	access:private
m_num_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned short m_num_char;$/;"	m	struct:boost::interprocess::ipcdetail::block_header	access:public
m_num_waiters	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   volatile boost::uint32_t    m_num_waiters;$/;"	m	class:boost::interprocess::ipcdetail::spin_condition	access:private
m_nwaiters_blocked	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      boost::int32_t    m_nwaiters_blocked;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
m_nwaiters_blocked	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type               m_nwaiters_blocked;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
m_nwaiters_gone	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      boost::int32_t    m_nwaiters_gone;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
m_nwaiters_gone	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type               m_nwaiters_gone;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
m_nwaiters_to_unblock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      boost::int32_t    m_nwaiters_to_unblock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
m_nwaiters_to_unblock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      integer_type               m_nwaiters_to_unblock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
m_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^      OffsetType m_offset; \/\/Distance between this object and pointee address$/;"	m	union:boost::interprocess::ipcdetail::offset_ptr_internal	access:public
m_page_offset	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t       m_page_offset;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   std::string    m_path;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
m_perm	/usr/include/boost/interprocess/permissions.hpp	/^   os_permissions_type  m_perm;$/;"	m	class:boost::interprocess::permissions	access:private
m_perm	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int            m_perm;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
m_pi	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   counted_impl_ptr  m_pi;$/;"	m	class:boost::interprocess::ipcdetail::shared_count	access:private
m_pi	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   counted_impl_ptr  m_pi;$/;"	m	class:boost::interprocess::ipcdetail::weak_count	access:private
m_pn	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^      :  m_pn()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
m_pn	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   ipcdetail::shared_count<T, VoidAllocator, Deleter>   m_pn;    \/\/ reference counter$/;"	m	class:boost::interprocess::shared_ptr	access:private
m_pn	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   ipcdetail::weak_count<T, A, D> m_pn;      \/\/ reference counter$/;"	m	class:boost::interprocess::weak_ptr	access:private
m_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type m_prev_allocated :  1;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
m_prev_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type m_prev_size :  sizeof(size_type)*CHAR_BIT;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
m_ptr	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *            m_ptr;$/;"	m	class:boost::interprocess::ipcdetail::mem_algo_deallocator	access:private
m_ptr	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void_pointer    m_ptr;$/;"	m	struct:boost::interprocess::ipcdetail::index_data	access:public
m_ptr	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
m_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::intrusive_ptr	access:private
m_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::scoped_ptr	access:private
m_ptr_to_segment_info	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ptr_to_segment_info_t      m_ptr_to_segment_info;$/;"	m	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public
m_px	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer           m_px;$/;"	m	class:boost::interprocess::ipcdetail::shared_count	access:private
m_px	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer           m_px;$/;"	m	class:boost::interprocess::ipcdetail::weak_count	access:private
m_root	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      block_ctrl        m_root;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
m_root	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      block_ctrl        m_root;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
m_root_name	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   std::string    m_root_name;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
m_s	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   volatile boost::uint32_t m_s;$/;"	m	class:boost::interprocess::ipcdetail::spin_mutex	access:private
m_s	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   volatile boost::uint32_t m_s;$/;"	m	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private
m_second_gate	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_condition  m_second_gate;$/;"	m	class:boost::interprocess::interprocess_sharable_mutex	access:private
m_second_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_condition  m_second_gate;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
m_segment_number	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      size_type         m_segment_number;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
m_segments	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      vector<segment_data> m_segments;$/;"	m	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
m_sem	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^      ipcdetail::posix_semaphore m_sem;$/;"	m	class:boost::interprocess::interprocess_semaphore	access:private
m_sem	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^      ipcdetail::spin_semaphore m_sem;$/;"	m	class:boost::interprocess::interprocess_semaphore	access:private
m_sem	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^      ipcdetail::windows_semaphore m_sem;$/;"	m	class:boost::interprocess::interprocess_semaphore	access:private
m_sem	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   impl_t m_sem;$/;"	m	class:boost::interprocess::named_semaphore	access:private
m_sem	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_semaphore m_sem;$/;"	m	class:boost::interprocess::ipcdetail::posix_named_mutex	access:private
m_sem	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   sem_t       m_sem;$/;"	m	class:boost::interprocess::ipcdetail::posix_semaphore	access:private
m_sem_block_lock	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      windows_semaphore m_sem_block_lock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
m_sem_block_lock	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      winapi_semaphore_wrapper   m_sem_block_lock;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
m_sem_block_queue	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      windows_semaphore m_sem_block_queue;$/;"	m	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
m_sem_block_queue	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      winapi_semaphore_wrapper   m_sem_block_queue;$/;"	m	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
m_sem_count	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   winapi_semaphore_wrapper m_sem_count;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:private
m_sem_count	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      sem_count_t m_sem_count;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:private
m_sem_hnd	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void *m_sem_hnd;$/;"	m	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:protected
m_sem_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   winapi_semaphore_wrapper m_sem_map;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:private
m_sem_wrapper	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      winapi_semaphore_wrapper&     m_sem_wrapper;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:private
m_sem_wrapper	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   winapi_semaphore_wrapper m_sem_wrapper;$/;"	m	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private
m_semid	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int            m_semid;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
m_shm	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory m_shm;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
m_shmem	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::message_queue_t	access:private
m_shmem	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::named_sharable_mutex	access:private
m_shmem	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::named_upgradable_mutex	access:private
m_shmem	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
m_shmem	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
m_shmem	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private
m_shmem	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private
m_shmem	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private
m_shmem	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   open_create_impl_t m_shmem;$/;"	m	class:boost::interprocess::named_upgradable_mutex	access:private
m_shmem_list	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   shmem_list_t   m_shmem_list;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
m_shmid	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   int            m_shmid;$/;"	m	class:boost::interprocess::xsi_shared_memory	access:private
m_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t       m_size;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      size_type       m_size;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
m_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      size_type    m_size;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public
m_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type         m_size;$/;"	m	struct:boost::interprocess::ipcdetail::simple_seq_fit_impl::header_t	access:public
m_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      size_type    m_size;$/;"	m	class:boost::interprocess::ipcdetail::simple_seq_fit_impl::block_ctrl	access:public
m_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type            m_size;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
m_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      size_type m_size      :  sizeof(size_type)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
m_str	/usr/include/boost/interprocess/exceptions.hpp	/^   std::string       m_str;$/;"	m	class:boost::interprocess::interprocess_exception	access:private
m_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   create_enum_t           m_type;$/;"	m	class:boost::interprocess::ipcdetail::create_open_func	access:private
m_type	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      type_t            m_type;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
m_unique_index	/usr/include/boost/interprocess/segment_manager.hpp	/^      unique_index_t          m_unique_index;$/;"	m	struct:boost::interprocess::segment_manager::header_t	access:public
m_usecount	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      size_type m_usecount;    \/\/Number of attached allocators$/;"	m	struct:boost::interprocess::ipcdetail::shared_pool_impl::header_t	access:public
m_val	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const typename Iterator::value_type *m_val;$/;"	m	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public
m_value	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   T &m_value;$/;"	m	struct:boost::interprocess::operator_arrow_proxy	access:public
m_value	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   mutable PseudoReference m_value;$/;"	m	struct:boost::interprocess::operator_arrow_proxy	access:public
m_value_alignment	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char  m_value_alignment;$/;"	m	struct:boost::interprocess::ipcdetail::block_header	access:public
m_value_bytes	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type      m_value_bytes;$/;"	m	struct:boost::interprocess::ipcdetail::block_header	access:public
m_vect	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   mutable vector_type     m_vect;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
m_wshm	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typename ipcdetail::wshmem_open_or_create<AllocationAlgorithm>::type m_wshm;$/;"	m	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
madvise	/usr/include/boost/interprocess/mapped_region.hpp	/^extern "C" int madvise(caddr_t, size_t, int);$/;"	p	namespace:boost::interprocess	signature:(caddr_t, size_t, int)
make_lang_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long make_lang_id(unsigned long p, unsigned long s)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long p, unsigned long s)
make_managed_shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   make_managed_shared_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
make_managed_shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   make_managed_shared_ptr(T *constructed_object, ManagedMemory &managed_memory, std::nothrow_t)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory, std::nothrow_t)
make_managed_unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   make_managed_unique_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
make_managed_weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   make_managed_weak_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
make_transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^make_transform_iterator(Iterator it, UnaryFunc fun)$/;"	f	namespace:boost::interprocess	signature:(Iterator it, UnaryFunc fun)
managed_external_buffer	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_external_buffer;$/;"	t	namespace:boost::interprocess
managed_global_memory	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^typedef basic_managed_global_memory<shared_memory_object, true>    managed_global_memory;$/;"	t	namespace:boost::interprocess::ipcdetail
managed_heap_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_heap_memory;$/;"	t	namespace:boost::interprocess
managed_impl	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      managed_open_or_create_impl<shared_memory_object, MemoryAlgorithm::Alignment, true, false>  managed_impl;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
managed_mapped_file	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_mapped_file;$/;"	t	namespace:boost::interprocess
managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   managed_multi_shared_memory;$/;"	t	namespace:boost::interprocess
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:()
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(create_only_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(create_only_t, const device_id_t & id, std::size_t size, mode_t mode, const void *addr, const ConstructFunc &construct_func, const permissions &perm)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(create_only_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(create_only_t, const device_id_t & id, std::size_t size, mode_t mode, const void *addr, const permissions &perm)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_only_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(open_only_t, const device_id_t & id, mode_t mode, const void *addr)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_only_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(open_only_t, const device_id_t & id, mode_t mode, const void *addr, const ConstructFunc &construct_func)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_or_create_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(open_or_create_t, const device_id_t & id, std::size_t size, mode_t mode, const void *addr, const ConstructFunc &construct_func, const permissions &perm)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_or_create_t,$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(open_or_create_t, const device_id_t & id, std::size_t size, mode_t mode, const void *addr, const permissions &perm)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^class managed_open_or_create_impl$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:managed_open_or_create_impl_device_holder
managed_open_or_create_impl_device_holder	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^class managed_open_or_create_impl_device_holder$/;"	c	namespace:boost::interprocess::ipcdetail
managed_open_or_create_impl_device_holder	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^class managed_open_or_create_impl_device_holder<true, DeviceAbstraction>$/;"	c	namespace:boost::interprocess::ipcdetail
managed_open_or_create_impl_device_id_t	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^struct managed_open_or_create_impl_device_id_t$/;"	s	namespace:boost::interprocess
managed_open_or_create_impl_device_id_t	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^struct managed_open_or_create_impl_device_id_t<xsi_shared_memory_file_wrapper>$/;"	s	namespace:boost::interprocess
managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_shared_memory;$/;"	t	namespace:boost::interprocess
managed_shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^struct managed_shared_ptr$/;"	s	namespace:boost::interprocess
managed_unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^struct managed_unique_ptr$/;"	s	namespace:boost::interprocess
managed_weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^struct managed_weak_ptr$/;"	s	namespace:boost::interprocess
managed_windows_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_windows_shared_memory;$/;"	t	namespace:boost::interprocess
managed_xsi_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_xsi_shared_memory;$/;"	t	namespace:boost::interprocess
map_	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   map_type map_;$/;"	m	class:boost::interprocess::ipcdetail::sync_handles	access:private
map_addr_	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   const void * const map_addr_;$/;"	m	class:boost::interprocess::ipcdetail::sync_id	access:private
map_address	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   const void *map_address() const$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:public	signature:() const
map_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::map_index	access:public	signature:(segment_manager_base *segment_mngr)
map_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^class map_index$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::map_index_aux::index_t
map_index_aux	/usr/include/boost/interprocess/indexes/map_index.hpp	/^struct map_index_aux$/;"	s	namespace:boost::interprocess::ipcdetail
map_mem	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      char map_mem [sizeof(ThreadSafeGlobalMap)];$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_common::mem_holder_t	access:public
map_type	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   typedef std::map<std::string, ref_count_ptr> map_type;$/;"	t	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:private
map_type	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   typedef boost::container::map<const sync_id*, umap_type::iterator, address_less> map_type;$/;"	t	class:boost::interprocess::ipcdetail::sync_handles	access:private
map_view_of_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *map_view_of_file_ex(void *handle, unsigned long file_access, unsigned __int64 offset, std::size_t numbytes, void *base_addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, unsigned long file_access, unsigned __int64 offset, std::size_t numbytes, void *base_addr)
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region(const MemoryMappable& mapping$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(const MemoryMappable& mapping ,mode_t mode ,offset_t offset = 0 ,std::size_t size = 0 ,const void *address = 0)
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^class mapped_region$/;"	c	namespace:boost::interprocess
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region$/;"	f	class:boost::interprocess::mapped_region	signature:( const MemoryMappable &mapping , mode_t mode , offset_t offset , std::size_t size , const void *address)
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region$/;"	f	class:boost::interprocess::mapped_region	signature:(const MemoryMappable &mapping ,mode_t mode ,offset_t offset ,std::size_t size ,const void *address)
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region()$/;"	f	class:boost::interprocess::mapped_region	signature:()
mapped_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef index_data<void_pointer>              mapped_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
mapped_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
mapped_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
mapped_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
mapping_handle_from_file_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline mapping_handle_t mapping_handle_from_file_handle(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
mapping_handle_from_shm_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline mapping_handle_t mapping_handle_from_shm_handle(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
mapping_handle_impl_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef struct mapping_handle_impl_t{$/;"	s	namespace:boost::interprocess
mapping_handle_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^}  mapping_handle_t;$/;"	t	namespace:boost::interprocess	typeref:struct:boost::interprocess::mapping_handle_impl_t
mappings_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct mappings_t : Mutex$/;"	s	struct:boost::interprocess::flat_map_intersegment	inherits:Mutex	access:private
max_allocation_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
max_pointer_plus_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct max_pointer_plus_bits<boost::interprocess::offset_ptr<void, P, O, A>, OffsetAlignment>$/;"	s	namespace:boost::intrusive
max_readers	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      static const unsigned max_readers$/;"	m	struct:boost::interprocess::interprocess_sharable_mutex::base_constants_t	access:public
max_readers	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^const unsigned interprocess_sharable_mutex::base_constants_t<Dummy>::max_readers;$/;"	m	class:boost::interprocess::interprocess_sharable_mutex::base_constants_t
max_readers	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      static const unsigned max_readers$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::base_constants_t	access:public
max_readers	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^const unsigned interprocess_upgradable_mutex::base_constants_t<Dummy>::max_readers;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex::base_constants_t
max_segment_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t max_segment_size = std::size_t(1) << max_segment_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
max_segment_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t max_segment_size_bits = size_t_bits - 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
max_size	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   size_type max_size() const$/;"	f	class:boost::interprocess::allocator	access:public	signature:() const
max_size	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type max_size() const$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:() const
max_value	/usr/include/boost/interprocess/detail/min_max.hpp	/^const T &max_value(const T &a, const T &b)$/;"	f	namespace:boost::interprocess	signature:(const T &a, const T &b)
mem_algo	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef rbtree_best_fit<intermodule_singleton_mutex_family, offset_ptr<void> > mem_algo;$/;"	t	struct:boost::interprocess::ipcdetail::intermodule_types	access:public
mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   mem_algo_deallocator(void *ptr, MemoryAlgorithm &algo)$/;"	f	class:boost::interprocess::ipcdetail::mem_algo_deallocator	access:public	signature:(void *ptr, MemoryAlgorithm &algo)
mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class mem_algo_deallocator$/;"	c	namespace:boost::interprocess::ipcdetail
mem_holder	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   intermodule_singleton_common<ThreadSafeGlobalMap>::mem_holder;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common
mem_holder	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   } mem_holder;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	typeref:struct:boost::interprocess::ipcdetail::intermodule_singleton_common::mem_holder_t	access:private
mem_holder_t	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static struct mem_holder_t$/;"	s	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private
members	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   } members;$/;"	m	struct:boost::interprocess::intersegment_base	typeref:union:boost::interprocess::intersegment_base::members_t	access:public
members	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   class members$/;"	c	class:boost::interprocess::interprocess_condition_any	access:private
members_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   union members_t{$/;"	u	struct:boost::interprocess::intersegment_base	access:public
memory_algorithm	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef MemoryAlgorithm                            memory_algorithm;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
memory_algorithm	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef MemoryAlgorithm                memory_algorithm;$/;"	t	class:boost::interprocess::segment_manager	access:public
memory_algorithm	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef MemoryAlgorithm memory_algorithm;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
memory_algorithm_common	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^class memory_algorithm_common$/;"	c	namespace:boost::interprocess::ipcdetail
message_queue	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^typedef message_queue_t<offset_ptr<void> > message_queue;$/;"	t	namespace:boost::interprocess
message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t();$/;"	p	class:boost::interprocess::message_queue_t	access:private	signature:()
message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t(create_only_t create_only,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(create_only_t create_only, const char *name, size_type max_num_msg, size_type max_msg_size, const permissions &perm = permissions())
message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t(open_only_t open_only,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(open_only_t open_only, const char *name)
message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t(open_or_create_t open_or_create,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(open_or_create_t open_or_create, const char *name, size_type max_num_msg, size_type max_msg_size, const permissions &perm = permissions())
message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class message_queue_t$/;"	c	namespace:boost::interprocess
message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue_t<VoidPointer>::message_queue_t(create_only_t,$/;"	f	class:boost::interprocess::message_queue_t	signature:(create_only_t, const char *name, size_type max_num_msg, size_type max_msg_size, const permissions &perm)
message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue_t<VoidPointer>::message_queue_t(open_only_t, const char *name)$/;"	f	class:boost::interprocess::message_queue_t	signature:(open_only_t, const char *name)
message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue_t<VoidPointer>::message_queue_t(open_or_create_t,$/;"	f	class:boost::interprocess::message_queue_t	signature:(open_or_create_t, const char *name, size_type max_num_msg, size_type max_msg_size, const permissions &perm)
mfile_open_or_create	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^struct mfile_open_or_create$/;"	s	namespace:boost::interprocess::ipcdetail
microsec_clock	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	/^typedef boost::date_time::microsec_clock<boost::posix_time::ptime> microsec_clock;$/;"	t	namespace:boost::interprocess
min_value	/usr/include/boost/interprocess/detail/min_max.hpp	/^const T &min_value(const T &a, const T &b)$/;"	f	namespace:boost::interprocess	signature:(const T &a, const T &b)
mode_error	/usr/include/boost/interprocess/errors.hpp	/^   mode_error,$/;"	e	enum:boost::interprocess::error_code_t
mode_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             } mode_t;$/;"	t	namespace:boost::interprocess	typeref:enum:boost::interprocess::__anon2
modules_attached_to_gmem_count	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^   volatile boost::uint32_t modules_attached_to_gmem_count;$/;"	m	struct:boost::interprocess::ipcdetail::locking_file_serial_id	access:public
move	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^      :  base_t(::boost::move(static_cast<base_t&>(other)))$/;"	f	class:boost::interprocess::ipcdetail::basic_multiallocation_chain	access:public	signature:(static_cast<base_t&>(
move_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool move_file_ex(const char *source_filename, const char *destination_filename, unsigned long flags)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *source_filename, const char *destination_filename, unsigned long flags)
movefile_copy_allowed	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_copy_allowed            = 0x02;$/;"	m	namespace:boost::interprocess::winapi
movefile_create_hardlink	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_create_hardlink         = 0x10;$/;"	m	namespace:boost::interprocess::winapi
movefile_delay_until_reboot	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_delay_until_reboot      = 0x04;$/;"	m	namespace:boost::interprocess::winapi
movefile_fail_if_not_trackable	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_fail_if_not_trackable   = 0x20;$/;"	m	namespace:boost::interprocess::winapi
movefile_replace_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_replace_existing        = 0x01;$/;"	m	namespace:boost::interprocess::winapi
movefile_write_through	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_write_through           = 0x08;$/;"	m	namespace:boost::interprocess::winapi
mp_barrier	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_barrier_t *mp_barrier;$/;"	m	class:boost::interprocess::ipcdetail::barrier_initializer	access:private
mp_cond	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_cond_t *mp_cond;$/;"	m	class:boost::interprocess::ipcdetail::condition_initializer	access:private
mp_ctrl	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      control_word_t          *mp_ctrl;$/;"	m	struct:boost::interprocess::interprocess_sharable_mutex::exclusive_rollback	access:public
mp_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      control_word_t          *mp_ctrl;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public
mp_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      control_word_t          *mp_ctrl;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public
mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      frontend_t * const   mp_frontend;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      self_t * const    mp_frontend;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public
mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      self_t * const    mp_frontend;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
mp_header	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   segment_manager *mp_header;$/;"	m	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:private
mp_high_water	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   mutable char_type*      mp_high_water;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
mp_index	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_hdr_ptr_ptr_t          mp_index;$/;"	m	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public
mp_mngr	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   alloc_ptr_t mp_mngr;$/;"	m	class:boost::interprocess::allocator	access:private
mp_mngr	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   SegmentManager *     mp_mngr;$/;"	m	class:boost::interprocess::ipcdetail::named_proxy	access:private
mp_mngr	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   segment_manager_pointer mp_mngr;$/;"	m	class:boost::interprocess::deleter	access:private
mp_mut	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_mutex_t *mp_mut;$/;"	m	class:boost::interprocess::ipcdetail::mutex_initializer	access:private
mp_mutex	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type *mp_mutex;$/;"	m	class:boost::interprocess::scoped_lock	access:private
mp_mutex	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type *mp_mutex;$/;"	m	class:boost::interprocess::sharable_lock	access:private
mp_mutex	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type *mp_mutex;$/;"	m	class:boost::interprocess::upgradable_lock	access:private
mp_name	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const char_type *    mp_name;$/;"	m	class:boost::interprocess::ipcdetail::named_proxy	access:private
mp_node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   void_pointer   mp_node_pool;$/;"	m	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:private
mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool                            *mp_node_pool;$/;"	m	struct:boost::interprocess::ipcdetail::get_or_create_node_pool_func	access:public
mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool                           *mp_node_pool;$/;"	m	struct:boost::interprocess::ipcdetail::destroy_if_last_link_func	access:public
mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   node_pool_ptr                 mp_node_pool;$/;"	m	class:boost::interprocess::ipcdetail::cache_impl	access:private
mp_node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   void_pointer   mp_node_pool;$/;"	m	class:boost::interprocess::ipcdetail::node_allocator_base	access:private
mp_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typename NodePool::segment_manager  *mp_segment_manager;$/;"	m	struct:boost::interprocess::ipcdetail::get_or_create_node_pool_func	access:public
mp_sem	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   sem_t      *mp_sem;$/;"	m	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:private
mp_str	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharT *  mp_str;$/;"	m	struct:boost::interprocess::ipcdetail::intrusive_compare_key	access:public
mp_str	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const_char_ptr_t  mp_str;$/;"	m	struct:boost::interprocess::ipcdetail::index_key	access:private
mq_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   mq_hdr_t(size_type max_num_msg, size_type max_msg_size)$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(size_type max_num_msg, size_type max_msg_size)
mq_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class mq_hdr_t$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:ipcdetail::priority_functor
msg_hdr_ptr_ptr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<msg_hdr_ptr_t>::type                              msg_hdr_ptr_ptr_t;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
msg_hdr_ptr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<msg_hdr_t<VoidPointer> >::type                  msg_hdr_ptr_t;$/;"	t	class:boost::interprocess::ipcdetail::priority_functor	access:private
msg_hdr_ptr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^         rebind_pointer<msg_header>::type                                  msg_hdr_ptr_t;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
msg_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class msg_hdr_t$/;"	c	namespace:boost::interprocess::ipcdetail
msg_header	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef msg_hdr_t<void_pointer>                                         msg_header;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
msg_queue_initialization_func_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_queue_initialization_func_t(size_type maxmsg = 0,$/;"	f	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public	signature:(size_type maxmsg = 0, size_type maxmsgsize = 0)
msg_queue_initialization_func_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class msg_queue_initialization_func_t$/;"	c	namespace:boost::interprocess::ipcdetail
mshm	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      managed_global_memory &mshm;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:private
mshm_	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      managed_global_memory &mshm_;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	access:private
mtx	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   Mutex mtx;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private
mtx_	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   spin_mutex mtx_;$/;"	m	class:boost::interprocess::ipcdetail::sync_handles	access:private
multi_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   multi_allocate(size_type nbytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes)
multi_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* multi_allocate(size_type nbytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type nbytes)
multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^class multi_segment_services$/;"	c	namespace:boost::interprocess
multi_simple_seq_fit	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   multi_simple_seq_fit           (size_type size, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::multi_simple_seq_fit	access:public	signature:(size_type size, size_type extra_hdr_bytes)
multi_simple_seq_fit	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^class multi_simple_seq_fit $/;"	c	namespace:boost::interprocess	inherits:ipcdetail::simple_seq_fit_impl
multiallocation_chain	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::allocator	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      multiallocation_chain                     multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::multiallocation_chain         multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::cache_impl	access:private
multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::multiallocation_chain        multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
multiallocation_chain	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename segment_manager::multiallocation_chain  multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::multiallocation_chain     multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      basic_multiallocation_chain<VoidPointer>     multiallocation_chain;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef ipcdetail::basic_multiallocation_chain<VoidPointer>  multiallocation_chain;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
multiallocation_chain	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::multiallocation_chain    multiallocation_chain;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
multiple_of_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static size_type multiple_of_units(size_type size)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(size_type size)
mutex	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public	signature:() const
mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^      ipcdetail::posix_recursive_mutex mutex;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^      ipcdetail::spin_recursive_mutex mutex;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^      ipcdetail::windows_recursive_mutex mutex;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   interprocess_sharable_mutex *mutex() const$/;"	f	class:boost::interprocess::named_sharable_mutex	access:private	signature:() const
mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex *mutex() const$/;"	f	class:boost::interprocess::named_upgradable_mutex	access:private	signature:() const
mutex	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
mutex	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   interprocess_recursive_mutex *mutex() const$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private	signature:() const
mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex *mutex() const$/;"	f	class:boost::interprocess::named_upgradable_mutex	access:private	signature:() const
mutex	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
mutex_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long mutex_all_access     = (0x000F0000L)|(0x00100000L)|0x0001;$/;"	m	namespace:boost::interprocess::winapi
mutex_family	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename MemoryAlgorithm::mutex_family     mutex_family;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
mutex_family	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
mutex_family	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
mutex_family	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
mutex_family	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::mutex_family       mutex_family;$/;"	t	class:boost::interprocess::segment_manager	access:public
mutex_family	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::mutex_family  mutex_family;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
mutex_family	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^struct mutex_family$/;"	s	namespace:boost::interprocess
mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      mutex_initializer(pthread_mutex_t &mut, pthread_mutexattr_t &mut_attr)$/;"	f	class:boost::interprocess::ipcdetail::mutex_initializer	access:public	signature:(pthread_mutex_t &mut, pthread_mutexattr_t &mut_attr)
mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class mutex_initializer$/;"	c	namespace:boost::interprocess::ipcdetail
mutex_traits	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^class mutex_traits$/;"	c	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers
mutex_traits_t	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   typedef robust_emulation_helpers::mutex_traits<Mutex> mutex_traits_t;$/;"	t	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public
mutex_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename segment_manager::mutex_family::mutex_type mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::shared_pool_impl	access:private
mutex_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      typedef Mutex        mutex_type;$/;"	t	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public
mutex_type	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef boost::interprocess::ipcdetail::spin_mutex              mutex_type;$/;"	t	struct:boost::interprocess::ipcdetail::intermodule_singleton_mutex_family	access:public
mutex_type	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename MutexFamily::mutex_type                       mutex_type;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
mutex_type	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   typedef typename ConditionMembers::mutex_type      mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private
mutex_type	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   typedef typename ConditionAnyMembers::mutex_type      mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private
mutex_type	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   typedef typename Lock::mutex_type::internal_mutex_type  mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public
mutex_type	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^      typedef interprocess_mutex       mutex_type;$/;"	t	class:boost::interprocess::interprocess_condition_any::members	access:public
mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::interprocess_mutex                 mutex_type;$/;"	t	struct:boost::interprocess::mutex_family	access:public
mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::null_mutex                   mutex_type;$/;"	t	struct:boost::interprocess::null_mutex_family	access:public
mutex_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef Mutex mutex_type;$/;"	t	class:boost::interprocess::scoped_lock	access:public
mutex_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef SharableMutex mutex_type;$/;"	t	class:boost::interprocess::sharable_lock	access:public
mutex_type	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^      typedef interprocess_mutex       mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition::internal_condition_members	access:public
mutex_type	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^      typedef interprocess_mutex       mutex_type;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition_any::internal_condition_members	access:public
mutex_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef UpgradableMutex mutex_type;$/;"	t	class:boost::interprocess::upgradable_lock	access:public
mutex_type	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      typedef windows_mutex      mutex_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
mutex_type	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      typedef winapi_mutex_wrapper     mutex_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      mutexattr_wrapper(bool recursive = false)$/;"	f	struct:boost::interprocess::ipcdetail::mutexattr_wrapper	access:public	signature:(bool recursive = false)
mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct mutexattr_wrapper$/;"	s	namespace:boost::interprocess::ipcdetail
nFileIndexHigh	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^   unsigned long nFileIndexHigh;$/;"	m	struct:boost::interprocess::ipcdetail::locking_file_serial_id	access:public
nFileIndexHigh	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long nFileIndexHigh;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
nFileIndexLow	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^   unsigned long nFileIndexLow;$/;"	m	struct:boost::interprocess::ipcdetail::locking_file_serial_id	access:public
nFileIndexLow	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long nFileIndexLow;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
nFileSizeHigh	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long nFileSizeHigh;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
nFileSizeHigh	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nFileSizeHigh;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
nFileSizeLow	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long nFileSizeLow;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
nFileSizeLow	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nFileSizeLow;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
nLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nLength;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
nNumberOfLinks	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long nNumberOfLinks;$/;"	m	struct:boost::interprocess::winapi::interprocess_by_handle_file_information	access:public
name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   CharType *name() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   CharType *name() const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:() const
name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharT *name() const$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:() const
name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const char_type *name() const$/;"	f	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public	signature:() const
name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void name(const CharT *nm)$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:(const CharT *nm)
name	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_name_information_t name;$/;"	m	union:boost::interprocess::winapi::ntquery_mem_t	access:public
name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type name_length() const$/;"	f	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public	signature:() const
name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type name_length() const$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:() const
name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned short name_length() const$/;"	f	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public	signature:() const
name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned short name_length() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned short name_length() const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:() const
name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void name_length(size_type len)$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:(size_type len)
name_offset	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type name_offset() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
named_begin	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_named_iterator named_begin() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
named_begin	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_named_iterator named_begin() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
named_cond_callbacks	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      named_cond_callbacks(condition_data &cond_data)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:(condition_data &cond_data)
named_cond_callbacks	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   class named_cond_callbacks : public windows_named_sync_interface$/;"	c	class:boost::interprocess::ipcdetail::windows_named_condition_any	inherits:windows_named_sync_interface	access:private
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition();$/;"	p	class:boost::interprocess::named_condition	access:private	signature:()
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(const named_condition &);$/;"	p	class:boost::interprocess::named_condition	access:private	signature:(const named_condition &)
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(open_only_t open_only, const char *name)
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^class named_condition$/;"	c	namespace:boost::interprocess
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_condition	signature:(create_only_t, const char *name, const permissions &perm)
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(open_only_t, const char *name)
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_condition	signature:(open_or_create_t, const char *name, const permissions &perm)
named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any();$/;"	p	class:boost::interprocess::named_condition_any	access:private	signature:()
named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any(const named_condition_any &);$/;"	p	class:boost::interprocess::named_condition_any	access:private	signature:(const named_condition_any &)
named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any(create_only_t, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(create_only_t, const char *name, const permissions &perm = permissions())
named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(open_only_t, const char *name)
named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any(open_or_create_t, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(open_or_create_t, const char *name, const permissions &perm = permissions())
named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^class named_condition_any$/;"	c	namespace:boost::interprocess
named_creation_functor	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   named_creation_functor(create_enum_t type, Arg arg = Arg())$/;"	f	class:boost::interprocess::ipcdetail::named_creation_functor	access:public	signature:(create_enum_t type, Arg arg = Arg())
named_creation_functor	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^class named_creation_functor$/;"	c	namespace:boost::interprocess::ipcdetail
named_creation_functor_no_arg	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^struct named_creation_functor_no_arg{};$/;"	s	namespace:boost::interprocess::ipcdetail
named_end	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_named_iterator named_end() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
named_end	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_named_iterator named_end() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
named_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_named>                    named_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
named_mut_callbacks	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      named_mut_callbacks(winapi_mutex_wrapper &mtx_wrapper)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:(winapi_mutex_wrapper &mtx_wrapper)
named_mut_callbacks	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   class named_mut_callbacks : public windows_named_sync_interface$/;"	c	class:boost::interprocess::ipcdetail::windows_named_mutex	inherits:windows_named_sync_interface	access:private
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex();$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:()
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(const named_mutex &);$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:(const named_mutex &)
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(open_only_t open_only, const char *name)
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^class named_mutex$/;"	c	namespace:boost::interprocess
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_mutex	signature:(create_only_t, const char *name, const permissions &perm)
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(open_only_t, const char *name)
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
named_proxy	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   named_proxy(SegmentManager *mngr, const char_type *name, bool find, bool dothrow)$/;"	f	class:boost::interprocess::ipcdetail::named_proxy	access:public	signature:(SegmentManager *mngr, const char_type *name, bool find, bool dothrow)
named_proxy	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^class named_proxy$/;"	c	namespace:boost::interprocess::ipcdetail
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:()
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(const named_recursive_mutex &);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:(const named_recursive_mutex &)
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(open_only_t open_only, const char *name)
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^class named_recursive_mutex$/;"	c	namespace:boost::interprocess
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(create_only_t, const char *name, const permissions &perm)
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(open_only_t, const char *name)
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
named_sem_callbacks	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      named_sem_callbacks(winapi_semaphore_wrapper &sem_wrapper, sem_count_t sem_cnt)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:(winapi_semaphore_wrapper &sem_wrapper, sem_count_t sem_cnt)
named_sem_callbacks	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   class named_sem_callbacks : public windows_named_sync_interface$/;"	c	class:boost::interprocess::ipcdetail::windows_named_semaphore	inherits:windows_named_sync_interface	access:private
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore();$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:()
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(const named_semaphore &);$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:(const named_semaphore &)
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(open_only_t, const char *name);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(open_only_t, const char *name)
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^class named_semaphore$/;"	c	namespace:boost::interprocess
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore$/;"	f	class:boost::interprocess::named_semaphore	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm)
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore$/;"	f	class:boost::interprocess::named_semaphore	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm)
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_semaphore	signature:(open_only_t, const char *name)
named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:private	signature:()
named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex(const named_sharable_mutex &);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:private	signature:(const named_sharable_mutex &)
named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(open_only_t open_only, const char *name)
named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^class named_sharable_mutex$/;"	c	namespace:boost::interprocess
named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline named_sharable_mutex::named_sharable_mutex$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(create_only_t, const char *name, const permissions &perm)
named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline named_sharable_mutex::named_sharable_mutex$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(open_only_t, const char *name)
named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline named_sharable_mutex::named_sharable_mutex$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
named_transform	/usr/include/boost/interprocess/segment_manager.hpp	/^      ,is_intrusive_index<index_type>::value>   named_transform;$/;"	t	class:boost::interprocess::segment_manager	access:public
named_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_only_t open_only, const char *name)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^class named_upgradable_mutex$/;"	c	namespace:boost::interprocess
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(create_only_t, const char *name, const permissions &perm)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_only_t, const char *name)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_only_t open_only, const char *name)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^class named_upgradable_mutex$/;"	c	namespace:boost::interprocess
named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(create_only_t, const char *name, const permissions &perm)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_only_t, const char *name)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
names	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      } names[info_constants_t<0>::NumID];$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_t	typeref:struct:boost::interprocess::xsi_shared_memory_device::info_t::names_t	access:public
names_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      struct names_t$/;"	s	struct:boost::interprocess::xsi_shared_memory_device::info_t	access:public
nat	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct nat{};$/;"	s	namespace:boost::interprocess::ipcdetail
nat	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   struct nat {int for_bool_;};$/;"	s	class:boost::interprocess::unique_ptr	access:private
native_error_t	/usr/include/boost/interprocess/errors.hpp	/^typedef int    native_error_t;$/;"	t	namespace:boost::interprocess
new_segment_group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static segment_group_id new_segment_group(multi_segment_services *services)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(multi_segment_services *services)
no_arg_t	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   typedef named_creation_functor_no_arg no_arg_t;$/;"	t	class:boost::interprocess::ipcdetail::named_creation_functor	access:private
no_error	/usr/include/boost/interprocess/errors.hpp	/^   no_error = 0,$/;"	e	enum:boost::interprocess::error_code_t
no_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct no_type$/;"	s	namespace:boost::interprocess::ipcdetail
no_type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   struct no_type$/;"	s	struct:boost::interprocess::ipcdetail::is_same	access:public
node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator$/;"	f	class:boost::interprocess::node_allocator	access:public	signature:(const node_allocator<T2, SegmentManager, NodesPerBlock> &other)
node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::node_allocator	access:public	signature:(SegmentManager *segment_mngr)
node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::node_allocator_base
node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:(const node_allocator_base<Version, T2, SegmentManager, NodesPerBlock> &other)
node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base(const node_allocator_base &other)$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:(const node_allocator_base &other)
node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:(segment_manager *segment_mngr)
node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator_base$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:node_pool_allocation_impl
node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_v1$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_v1	access:public	signature:(const node_allocator_v1<T2, SegmentManager, NodesPerBlock> &other)
node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_v1(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr)
node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:node_allocator_base
node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
node_pool_allocation_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class node_pool_allocation_impl$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:array_allocation_impl
node_pool_ptr	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<NodePool>::type                     node_pool_ptr;$/;"	t	class:boost::interprocess::ipcdetail::cache_impl	access:private
node_pool_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef NodePool                                      node_pool_t;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
node_pool_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      > node_pool_t;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private
node_pool_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      > node_pool_t;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private
node_slist	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^struct node_slist$/;"	s	namespace:boost::interprocess::ipcdetail
node_slist_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^      <node_t, bi::linear<true>, bi::base_hook<slist_hook_t> >::type node_slist_t;$/;"	t	struct:boost::interprocess::ipcdetail::node_slist	access:public
node_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^   struct node_t$/;"	s	struct:boost::interprocess::ipcdetail::node_slist	inherits:slist_hook_t	access:public
nodes_per_block	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   static const size_type nodes_per_block = NodesPerBlock;$/;"	m	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public
nodes_per_block	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   static const size_type nodes_per_block = NodesPerBlock;$/;"	m	class:boost::interprocess::ipcdetail::private_node_pool	access:public
nodes_per_chunk	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   static const size_type nodes_per_chunk = NodesPerBlock;$/;"	m	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public
nodes_per_chunk	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   static const size_type nodes_per_chunk = NodesPerBlock;$/;"	m	class:boost::interprocess::ipcdetail::private_node_pool	access:public
non_blocking	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue_t::block_t
not_empty_error	/usr/include/boost/interprocess/errors.hpp	/^   not_empty_error,$/;"	e	enum:boost::interprocess::error_code_t
not_found_error	/usr/include/boost/interprocess/errors.hpp	/^   not_found_error,$/;"	e	enum:boost::interprocess::error_code_t
not_such_file_or_directory	/usr/include/boost/interprocess/errors.hpp	/^   not_such_file_or_directory,$/;"	e	enum:boost::interprocess::error_code_t
nothrow_allocation	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type nothrow_allocation = boost::container::nothrow_allocation;$/;"	m	namespace:boost::interprocess
notify	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void notify(boost::uint32_t command);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:private	signature:(boost::uint32_t command)
notify	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline void spin_condition::notify(boost::uint32_t command)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:(boost::uint32_t command)
notify_all	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::notify_all()$/;"	f	class:boost::interprocess::named_condition	signature:()
notify_all	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline void posix_condition::notify_all()$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:()
notify_all	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline void shm_named_condition::notify_all()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:()
notify_all	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline void spin_condition::notify_all()$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:()
notify_all	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   void notify_all()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::notify_one()$/;"	f	class:boost::interprocess::named_condition	signature:()
notify_one	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline void posix_condition::notify_one()$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:()
notify_one	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline void shm_named_condition::notify_one()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:()
notify_one	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline void spin_condition::notify_one()$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:()
notify_one	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   void notify_one()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:()
ntquery_mem_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^union ntquery_mem_t$/;"	u	namespace:boost::interprocess::winapi
null_index	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   null_index(segment_manager_base *){}$/;"	f	class:boost::interprocess::null_index	access:public	signature:(segment_manager_base *)
null_index	/usr/include/boost/interprocess/indexes/null_index.hpp	/^class null_index$/;"	c	namespace:boost::interprocess
null_mapped_region_function	/usr/include/boost/interprocess/mapped_region.hpp	/^struct null_mapped_region_function$/;"	s	namespace:boost::interprocess
null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex(const null_mutex&);$/;"	p	class:boost::interprocess::null_mutex	access:private	signature:(const null_mutex&)
null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^class null_mutex$/;"	c	namespace:boost::interprocess
null_mutex_family	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^struct null_mutex_family$/;"	s	namespace:boost::interprocess
num_shared	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      unsigned num_shared     : sizeof(unsigned)*CHAR_BIT-1;$/;"	m	struct:boost::interprocess::interprocess_sharable_mutex::control_word_t	access:public
num_upr_shar	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned num_upr_shar         : sizeof(unsigned)*CHAR_BIT-2;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
obj_case_insensitive	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long obj_case_insensitive = 0x00000040L;$/;"	m	namespace:boost::interprocess::winapi
object_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   Object *&object_;$/;"	m	struct:boost::interprocess::winapi::com_releaser	access:public
object_all_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_all_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
object_attributes_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct object_attributes_t {$/;"	s	namespace:boost::interprocess::winapi
object_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_basic_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
object_data_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_data_information$/;"	e	enum:boost::interprocess::winapi::object_information_class
object_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum object_information_class$/;"	g	namespace:boost::interprocess::winapi
object_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_name_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
object_name_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct object_name_information_t$/;"	s	namespace:boost::interprocess::winapi
object_type_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_type_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
obtain_mutex	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void *obtain_mutex(const sync_id &id, bool *popen_created = 0)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:public	signature:(const sync_id &id, bool *popen_created = 0)
obtain_semaphore	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void *obtain_semaphore(const sync_id &id, unsigned int initial_count, bool *popen_created = 0)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:public	signature:(const sync_id &id, unsigned int initial_count, bool *popen_created = 0)
obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_obufferstream<char>    obufferstream;$/;"	t	namespace:boost::interprocess
off	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::ptrdiff_t off   :  sizeof(std::ptrdiff_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
off	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t off      :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::off_type                 off_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::off_type     off_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
offset	/usr/include/boost/interprocess/detail/win32_api.hpp	/^         unsigned long offset;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped::__anon5::__anon6	access:public
offset_high	/usr/include/boost/interprocess/detail/win32_api.hpp	/^         unsigned long offset_high;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped::__anon5::__anon6	access:public
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr( T *ptr$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:( T *ptr , typename ipcdetail::enable_if< ipcdetail::is_convertible<T*, PointedType*> >::type * = 0)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr( const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:( const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr , typename ipcdetail::enable_if_c< ipcdetail::is_convertible<T2*, PointedType*>::value && !ipcdetail::offset_ptr_maintains_address<T2, PointedType>::value >::type * = 0)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr( const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:( const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr , typename ipcdetail::enable_if_c< ipcdetail::is_convertible<T2*, PointedType*>::value && ipcdetail::offset_ptr_maintains_address<T2, PointedType>::value >::type * = 0 )
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr()$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:()
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr& ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr& ptr)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::const_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::const_cast_tag)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::dynamic_cast_tag)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::reinterpret_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::reinterpret_cast_tag)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::static_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2, P2, O2, A2> & r, ipcdetail::static_cast_tag)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(pointer ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(pointer ptr)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^class offset_ptr$/;"	c	namespace:boost::interprocess
offset_ptr_internal	/usr/include/boost/interprocess/offset_ptr.hpp	/^      explicit offset_ptr_internal(OffsetType off)$/;"	f	union:boost::interprocess::ipcdetail::offset_ptr_internal	access:public	signature:(OffsetType off)
offset_ptr_internal	/usr/include/boost/interprocess/offset_ptr.hpp	/^   union offset_ptr_internal$/;"	u	namespace:boost::interprocess::ipcdetail
offset_ptr_maintains_address	/usr/include/boost/interprocess/offset_ptr.hpp	/^   struct offset_ptr_maintains_address$/;"	s	namespace:boost::interprocess::ipcdetail
offset_ptr_to_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   std::size_t offset_ptr_to_offset(const volatile void *ptr, const volatile void *this_ptr)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const volatile void *ptr, const volatile void *this_ptr)
offset_ptr_to_offset_from_other	/usr/include/boost/interprocess/offset_ptr.hpp	/^   std::size_t offset_ptr_to_offset_from_other$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const volatile void *this_ptr, const volatile void *other_ptr, std::size_t other_offset)
offset_ptr_to_raw_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void * offset_ptr_to_raw_pointer(const volatile void *this_ptr, std::size_t offset)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const volatile void *this_ptr, std::size_t offset)
offset_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef long long          offset_t;$/;"	t	namespace:boost::interprocess
offset_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef OffsetType                        offset_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
offset_type_alignment	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^static const std::size_t offset_type_alignment = 0;$/;"	m	namespace:boost::interprocess
open	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual bool open(create_enum_t, const char *id_name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:(create_enum_t, const char *id_name)
open	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual bool open(create_enum_t, const char *id_name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:(create_enum_t, const char *id_name)
open	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual bool open(create_enum_t, const char *id_name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:(create_enum_t, const char *id_name)
open	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual bool open(create_enum_t creation_type, const char *id_name) = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:(create_enum_t creation_type, const char *id_name)
open_always	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long open_always       = 4;$/;"	m	namespace:boost::interprocess::winapi
open_copy_on_write	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_copy_on_write_t open_copy_on_write = open_copy_on_write_t();$/;"	m	namespace:boost::interprocess
open_copy_on_write_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_copy_on_write_t {};$/;"	s	namespace:boost::interprocess
open_create_impl_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
open_create_impl_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::message_queue_t	access:private
open_create_impl_t	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::named_sharable_mutex	access:private
open_create_impl_t	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::named_upgradable_mutex	access:private
open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition	access:private
open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private
open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private
open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private
open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private
open_create_impl_t	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   typedef ipcdetail::managed_open_or_create_impl<shared_memory_object, 0, true, false> open_create_impl_t;$/;"	t	class:boost::interprocess::named_upgradable_mutex	access:private
open_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long open_existing     = 3;$/;"	m	namespace:boost::interprocess::winapi
open_existing_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t open_existing_file$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name, mode_t mode, bool temporary = false)
open_file_mapping	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * open_file_mapping (unsigned long access, const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long access, const char *name)
open_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool  open_impl     (void *addr, size_type)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(void *addr, size_type)
open_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_only_t      open_only      = open_only_t();$/;"	m	namespace:boost::interprocess
open_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_only_t {};$/;"	s	namespace:boost::interprocess
open_or_create	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_or_create_t open_or_create = open_or_create_t();$/;"	m	namespace:boost::interprocess
open_or_create	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   struct open_or_create$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_types	access:public
open_or_create	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   void open_or_create(create_enum_t creation_type, const char *name, const permissions &perm, windows_named_sync_interface &sync_interface);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:public	signature:(create_enum_t creation_type, const char *name, const permissions &perm, windows_named_sync_interface &sync_interface)
open_or_create	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^inline void windows_named_sync::open_or_create$/;"	f	class:boost::interprocess::ipcdetail::windows_named_sync	signature:( create_enum_t creation_type , const char *name , const permissions &perm , windows_named_sync_interface &sync_interface)
open_or_create	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   bool open_or_create(const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:(const char *name, const permissions &perm)
open_or_create	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   bool open_or_create( const char *name$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:( const char *name , long sem_count , long max_count , const permissions &perm , bool &created)
open_or_create_and_lock_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline int open_or_create_and_lock_file(const char *name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name)
open_or_create_directory	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool open_or_create_directory(const char *dir_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *dir_name)
open_or_create_mutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *open_or_create_mutex(const char *name, bool initial_owner, interprocess_security_attributes *attr)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name, bool initial_owner, interprocess_security_attributes *attr)
open_or_create_mutex	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void* open_or_create_mutex(const sync_id &id)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:private	signature:(const sync_id &id)
open_or_create_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *open_or_create_semaphore(const char *name, long initial_count, long maximum_count, interprocess_security_attributes *attr)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name, long initial_count, long maximum_count, interprocess_security_attributes *attr)
open_or_create_semaphore	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void* open_or_create_semaphore(const sync_id &id, unsigned int initial_count)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:private	signature:(const sync_id &id, unsigned int initial_count)
open_or_create_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_or_create_t {};$/;"	s	namespace:boost::interprocess
open_read_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_read_only_t open_read_only = open_read_only_t();$/;"	m	namespace:boost::interprocess
open_read_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_read_only_t {};$/;"	s	namespace:boost::interprocess
open_read_private_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_read_private_t {};$/;"	s	namespace:boost::interprocess
open_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *open_semaphore(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
open_semaphore	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   bool open_semaphore(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:(const char *name)
operator !	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
operator !	/usr/include/boost/interprocess/offset_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
operator !	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
operator !	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   bool operator! () const \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
operator !	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool operator! () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
operator !=	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator!=(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator!=(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/allocator.hpp	/^bool operator!=(const allocator<T, SegmentManager>  &alloc1,$/;"	f	namespace:boost::interprocess	signature:(const allocator<T, SegmentManager> &alloc1, const allocator<T, SegmentManager> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^bool operator!=(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^bool operator!=(const cached_node_allocator<T, S, NPC> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const cached_node_allocator<T, S, NPC> &alloc1, const cached_node_allocator<T, S, NPC> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^bool operator!=(const cached_allocator_impl<T, N, V> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const cached_allocator_impl<T, N, V> &alloc1, const cached_allocator_impl<T, N, V> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator!=(const node_allocator<T, S, NPC> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const node_allocator<T, S, NPC> &alloc1, const node_allocator<T, S, NPC> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator!=(const node_allocator_base<V, T, S, NPC> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const node_allocator_base<V, T, S, NPC> &alloc1, const node_allocator_base<V, T, S, NPC> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator!=(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator!=(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator!=(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator!=(const private_node_allocator_base<V, T, S, NPC> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const private_node_allocator_base<V, T, S, NPC> &alloc1, const private_node_allocator_base<V, T, S, NPC> &alloc2)
operator !=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator!= (const intersegment_ptr<T1> &pt1,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
operator !=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator!= (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator !=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator!= (const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
operator !=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator!= (const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
operator !=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator!= (pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(const typename intrusive_ptr<T, VP>::pointer &a,$/;"	f	namespace:boost::interprocess	signature:(const typename intrusive_ptr<T, VP>::pointer &a, intrusive_ptr<T, VP> const & b)
operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, const typename intrusive_ptr<T, VP>::pointer &b)
operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<U, VP> const & b)
operator !=	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator!=(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
operator !=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator ()	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::destroy_if_last_link_func	access:public	signature:()
operator ()	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::get_or_create_node_pool_func	access:public	signature:()
operator ()	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func	access:public	signature:()
operator ()	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func	access:public	signature:()
operator ()	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool operator()(void *addr, std::size_t size, bool created) const$/;"	f	class:boost::interprocess::ipcdetail::create_open_func	access:public	signature:(void *addr, std::size_t size, bool created) const
operator ()	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      bool operator()(void *addr, size_type size, bool created) const$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public	signature:(void *addr, size_type size, bool created) const
operator ()	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void operator()(const mapped_region &region, bool last) const$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public	signature:(const mapped_region &region, bool last) const
operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const T& operator()(const T& x) const$/;"	f	struct:boost::interprocess::ipcdetail::identity	access:public	signature:(const T& x) const
operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const OtherPair& x) const$/;"	f	struct:boost::interprocess::ipcdetail::select1st	access:public	signature:(const OtherPair& x) const
operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const typename Pair::first_type& x) const$/;"	f	struct:boost::interprocess::ipcdetail::select1st	access:public	signature:(const typename Pair::first_type& x) const
operator ()	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   T *operator()(Args &&...args) const$/;"	f	class:boost::interprocess::ipcdetail::named_proxy	access:public	signature:(Args &&....args) const
operator ()	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func	access:public	signature:()
operator ()	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      void operator()()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	access:public	signature:()
operator ()	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      void operator()(void)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:(void)
operator ()	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^      void operator()(const char *filepath, const char *filename)$/;"	f	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file::other_process_lock_remover	access:public	signature:(const char *filepath, const char *filename)
operator ()	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   result_type operator()(const typename Iterator::value_type &arg) const$/;"	f	struct:boost::interprocess::ipcdetail::segment_manager_iterator_transform	access:public	signature:(const typename Iterator::value_type &arg) const
operator ()	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      void operator()(){}$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	access:public	signature:()
operator ()	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      void operator()(void){}$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:(void)
operator ()	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      bool operator()(const intrusive_compare_key_type &i, const value_type &b) const$/;"	f	struct:boost::interprocess::iset_index::intrusive_key_value_less	access:public	signature:(const intrusive_compare_key_type &i, const value_type &b) const
operator ()	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      bool operator()(const value_type &b, const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iset_index::intrusive_key_value_less	access:public	signature:(const value_type &b, const intrusive_compare_key_type &i) const
operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^        std::size_t operator()(const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::hash_function	access:public	signature:(const intrusive_compare_key_type &i) const
operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^        std::size_t operator()(const value_type &val) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::hash_function	access:public	signature:(const value_type &val) const
operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const intrusive_compare_key_type &i, const value_type &b) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const intrusive_compare_key_type &i, const value_type &b) const
operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const value_type &b, const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const value_type &b, const intrusive_compare_key_type &i) const
operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const value_type &b1, const value_type &b2) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const value_type &b1, const value_type &b2) const
operator ()	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^        std::size_t operator()(const key_type &val) const$/;"	f	struct:boost::interprocess::unordered_map_index_aux::hasher	access:public	signature:(const key_type &val) const
operator ()	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool operator()(const msg_hdr_ptr_t &msg1,$/;"	f	class:boost::interprocess::ipcdetail::priority_functor	access:public	signature:(const msg_hdr_ptr_t &msg1, const msg_hdr_ptr_t &msg2) const
operator ()	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool operator()(void *address, size_type, bool created)$/;"	f	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public	signature:(void *address, size_type, bool created)
operator ()	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool operator()(void *, std::size_t , bool) const$/;"	f	struct:boost::interprocess::null_mapped_region_function	access:public	signature:(void *, std::size_t , bool) const
operator ()	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      bool operator()(const block_ctrl &block, size_type size) const$/;"	f	struct:boost::interprocess::rbtree_best_fit::size_block_ctrl_compare	access:public	signature:(const block_ctrl &block, size_type size) const
operator ()	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      bool operator()(size_type size, const block_ctrl &block) const$/;"	f	struct:boost::interprocess::rbtree_best_fit::size_block_ctrl_compare	access:public	signature:(size_type size, const block_ctrl &block) const
operator ()	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   void operator()(const pointer &p)$/;"	f	class:boost::interprocess::deleter	access:public	signature:(const pointer &p)
operator ()	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void operator()(pointer ptr)$/;"	f	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public	signature:(pointer ptr)
operator ()	/usr/include/boost/interprocess/sync/shm/named_creation_functor.hpp	/^   bool operator()(void *address, std::size_t, bool created) const$/;"	f	class:boost::interprocess::ipcdetail::named_creation_functor	access:public	signature:(void *address, std::size_t, bool created) const
operator ()	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^      bool operator()(sync_id const * const l, sync_id const * const r) const$/;"	f	struct:boost::interprocess::ipcdetail::sync_handles::address_less	access:public	signature:(sync_id const * const l, sync_id const * const r) const
operator *	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   reference operator* () const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
operator *	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type operator*() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reference operator* () const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
operator *	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   T & operator*() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
operator *	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   reference operator*() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
operator *	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   reference operator* () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
operator +	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator+ (std::ptrdiff_t idx) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
operator +	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^intersegment_ptr<T> operator+$/;"	f	namespace:boost::interprocess	signature:(std::ptrdiff_t diff, const intersegment_ptr<T>& right)
operator +	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend transform_iterator operator+(typename Iterator::difference_type off, const transform_iterator& right)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(typename Iterator::difference_type off, const transform_iterator& right)
operator +	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator+(typename Iterator::difference_type off) const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
operator +	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend offset_ptr operator+(difference_type diff, offset_ptr right)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(difference_type diff, offset_ptr right)
operator +	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend offset_ptr operator+(offset_ptr left, difference_type diff)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(offset_ptr left, difference_type diff)
operator ++	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator++ (int)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator++ (void)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(void)
operator ++	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   self_t  operator++(int) {  return ++*this;   *this;  }$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   self_t& operator++()$/;"	f	struct:boost::interprocess::ipcdetail::CtorNArg	access:public	signature:()
operator ++	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator++(int)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator++()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator++ (int)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator++ (void)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(void)
operator +=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr &operator+= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t offset)
operator +=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator+=(typename Iterator::difference_type off)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
operator +=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr &operator+= (difference_type offset)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(difference_type offset)
operator -	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator- (std::ptrdiff_t idx) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
operator -	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::ptrdiff_t operator- (const intersegment_ptr<T> &pt,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T> &pt, const intersegment_ptr<T2> &pt2)
operator -	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend typename Iterator::difference_type operator- (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator -	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator-(typename Iterator::difference_type off) const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
operator -	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend difference_type operator-(const offset_ptr &pt, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt, const offset_ptr &pt2)
operator -	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend offset_ptr operator-(difference_type diff, offset_ptr right)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(difference_type diff, offset_ptr right)
operator -	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend offset_ptr operator-(offset_ptr left, difference_type diff)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(offset_ptr left, difference_type diff)
operator --	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator-- (int)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator-- (void)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(void)
operator --	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator--(int)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator--()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
operator --	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator-- (int)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator-- (void)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(void)
operator -=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr &operator-= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t offset)
operator -=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator-=(typename Iterator::difference_type off)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
operator -=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr &operator-= (difference_type offset)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(difference_type offset)
operator ->	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   pointer operator->() const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^      operator->() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   PseudoReference* operator->() const { return &m_value; }$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   T* operator->() const { return const_cast<T*>(&m_value); }$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/offset_ptr.hpp	/^   pointer operator->() const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   const pointer &operator->() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer &operator->()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
operator ->	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   const pointer &operator->() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer &operator->()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
operator ->	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   pointer operator-> () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
operator <	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      friend bool operator< (const segment_group_t&l, const segment_group_t &r)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:friend	signature:(const segment_group_t&l, const segment_group_t &r)
operator <	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator <(const intersegment_ptr<T1> &left,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &left, const intersegment_ptr<T2> &right)
operator <	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator < (const index_key & right) const$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:(const index_key & right) const
operator <	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator <(const intrusive_value_type_impl<Hook, CharType, SizeType> & other) const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:(const intrusive_value_type_impl<Hook, CharType, SizeType> & other) const
operator <	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator< (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator <	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      friend bool operator<(const block_ctrl &a, const block_ctrl &b)$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:friend	signature:(const block_ctrl &a, const block_ctrl &b)
operator <	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<(const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
operator <	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<(const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
operator <	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<(pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
operator <	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator<(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)
operator <	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator<(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)
operator <	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator<(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<T, VP> const & b)
operator <	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator<(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
operator <	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator <(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator <	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^bool operator<(weak_ptr<T, A, D> const & a, weak_ptr<U, A2, D2> const & b)$/;"	f	namespace:boost::interprocess	signature:(weak_ptr<T, A, D> const & a, weak_ptr<U, A2, D2> const & b)
operator <<	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::basic_ostream<E, T> & operator<<$/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, const intersegment_ptr<U> & p)
operator <<	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline std::basic_ostream<E, T> & operator<<$/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, offset_ptr<W, X, Y, Z> const & p)
operator <<	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^inline std::basic_ostream<E, T> & operator<<$/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, intrusive_ptr<Y, VP> const & p)
operator <<	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^std::basic_ostream<E, T> & operator<<$/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, shared_ptr<Y, VoidAllocator, Deleter> const & p)
operator <=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator<= (const intersegment_ptr<T1> &pt1,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
operator <=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator<= (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator <=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<=(const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
operator <=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<=(const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
operator <=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator<=(pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
operator <=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator =	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base& operator=$/;"	p	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:private	signature:(const adaptive_pool_base<Version2, T2, SegmentManager2, N2, F2, O2>&)
operator =	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base& operator=(const adaptive_pool_base &other)$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base &other)
operator =	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator& operator=(const allocator&);$/;"	p	class:boost::interprocess::allocator	access:private	signature:(const allocator&)
operator =	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator& operator=(const allocator<T2, SegmentManager2>&);$/;"	p	class:boost::interprocess::allocator	access:private	signature:(const allocator<T2, SegmentManager2>&)
operator =	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool &operator=(const private_adaptive_node_pool &);$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:private	signature:(const private_adaptive_node_pool &)
operator =	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl & operator=(const cached_allocator_impl& other);$/;"	p	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:private	signature:(const cached_allocator_impl& other)
operator =	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool &operator=(const private_node_pool &);$/;"	p	class:boost::interprocess::ipcdetail::private_node_pool	access:private	signature:(const private_node_pool &)
operator =	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base& operator=$/;"	p	class:boost::interprocess::ipcdetail::node_allocator_base	access:private	signature:(const node_allocator_base<Version2, T2, SegmentManager2, N2>&)
operator =	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base& operator=(const node_allocator_base &other)$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:(const node_allocator_base &other)
operator =	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base& operator=$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private	signature:(const private_adaptive_pool_base<Version2, T2, MemoryAlgorithm2, N2, F2, OP2>&)
operator =	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base& operator=(const private_adaptive_pool_base&);$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private	signature:(const private_adaptive_pool_base&)
operator =	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base& operator=$/;"	p	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private	signature:(const private_node_allocator_base<Version2, T2, MemoryAlgorithm2, N2>&)
operator =	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base& operator=(const private_node_allocator_base&);$/;"	p	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private	signature:(const private_node_allocator_base&)
operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (const intersegment_ptr &ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr &ptr)
operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (const intersegment_ptr<T2> & ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> & ptr)
operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (pointer from)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(pointer from)
operator =	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl &operator=(const basic_managed_memory_impl &);$/;"	p	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:private	signature:(const basic_managed_memory_impl &)
operator =	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header &operator= (const T& )$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(const T& )
operator =	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl& operator=(const intrusive_value_type_impl &);$/;"	p	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:private	signature:(const intrusive_value_type_impl &)
operator =	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple& operator=(const tuple<VValues...>& other)$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:(const tuple<VValues...>& other)
operator =	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   handle_closer& operator=(const handle_closer &);$/;"	p	class:boost::interprocess::winapi::handle_closer	access:private	signature:(const handle_closer &)
operator =	/usr/include/boost/interprocess/errors.hpp	/^   error_info & operator =(error_code_t ec)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(error_code_t ec)
operator =	/usr/include/boost/interprocess/errors.hpp	/^   error_info & operator =(native_error_t sys_err_code)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(native_error_t sys_err_code)
operator =	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl &operator=(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
operator =	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl &operator=(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
operator =	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit &operator=(const rbtree_best_fit &);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const rbtree_best_fit &)
operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^      operator= (const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2, DifferenceType, OffsetType, OffsetAlignment> &ptr)
operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator= (const offset_ptr & ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr & ptr)
operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator= (pointer from)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(pointer from)
operator =	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager &operator=(const segment_manager &);$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:(const segment_manager &)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count & operator= (shared_count const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count & operator= (shared_count<Y, VoidAllocator, Deleter> const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (shared_count<Y, VoidAllocator, Deleter> const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (weak_count const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (weak_count<Y, VoidAllocator, Deleter> const& r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const& r)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base & operator= ( sp_counted_base const & );$/;"	p	class:boost::interprocess::ipcdetail::sp_counted_base	access:private	signature:( sp_counted_base const & )
operator =	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd & operator= ( sp_counted_impl_pd const & );$/;"	p	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private	signature:( sp_counted_impl_pd const & )
operator =	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this & operator=(enable_shared_from_this const &)$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:(enable_shared_from_this const &)
operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr & operator=(intrusive_ptr const & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr const & rhs)
operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr & operator=(pointer rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(pointer rhs)
operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   template<class U> intrusive_ptr & operator=$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr<U, VP> const & rhs)
operator =	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   scoped_ptr & operator=(scoped_ptr const &);$/;"	p	class:boost::interprocess::scoped_ptr	access:private	signature:(scoped_ptr const &)
operator =	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr & operator=(shared_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(unique_ptr<U, E>&)
operator =	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U> typename ipcdetail::unique_ptr_error<U>::type operator=(U&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(U&)
operator =	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr & operator=(shared_ptr<Y, A, D> const & r) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(shared_ptr<Y, A, D> const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr & operator=(weak_ptr<Y, A, D> const & r) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<Y, A, D> const & r)
operator =	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf & operator =(const basic_vectorbuf&);$/;"	p	class:boost::interprocess::basic_vectorbuf	access:private	signature:(const basic_vectorbuf&)
operator =	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_8a_wrapper &operator=(const condition_8a_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:private	signature:(const condition_8a_wrapper &)
operator =	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   condition_algorithm_8a &operator=(const condition_algorithm_8a &);$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private	signature:(const condition_algorithm_8a &)
operator =	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_algorithm &operator=(const condition_any_algorithm &);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:(const condition_any_algorithm &)
operator =	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   condition_any_wrapper &operator=(const condition_any_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:private	signature:(const condition_any_wrapper &)
operator =	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition &operator=(const interprocess_condition &);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(const interprocess_condition &)
operator =	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   interprocess_condition_any &operator=(const interprocess_condition_any &);$/;"	p	class:boost::interprocess::interprocess_condition_any	access:private	signature:(const interprocess_condition_any &)
operator =	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex &operator=(const interprocess_mutex &);$/;"	p	class:boost::interprocess::interprocess_mutex	access:private	signature:(const interprocess_mutex &)
operator =	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex &operator=(const interprocess_recursive_mutex &);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:private	signature:(const interprocess_recursive_mutex &)
operator =	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore &operator=(const interprocess_semaphore &);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:private	signature:(const interprocess_semaphore &)
operator =	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   interprocess_sharable_mutex &operator=(const interprocess_sharable_mutex &);$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:private	signature:(const interprocess_sharable_mutex &)
operator =	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex &operator=(const interprocess_upgradable_mutex &);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:private	signature:(const interprocess_upgradable_mutex &)
operator =	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition &operator=(const named_condition &);$/;"	p	class:boost::interprocess::named_condition	access:private	signature:(const named_condition &)
operator =	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   named_condition_any &operator=(const named_condition_any &);$/;"	p	class:boost::interprocess::named_condition_any	access:private	signature:(const named_condition_any &)
operator =	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex &operator=(const named_mutex &);$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:(const named_mutex &)
operator =	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex &operator=(const named_recursive_mutex &);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:(const named_recursive_mutex &)
operator =	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore &operator=(const named_semaphore &);$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:(const named_semaphore &)
operator =	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   named_sharable_mutex &operator=(const named_sharable_mutex &);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:private	signature:(const named_sharable_mutex &)
operator =	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex &operator=(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
operator =	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex &operator= (const null_mutex&);$/;"	p	class:boost::interprocess::null_mutex	access:private	signature:(const null_mutex&)
operator =	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   posix_condition &operator=(const posix_condition &);$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:private	signature:(const posix_condition &)
operator =	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   posix_mutex &operator=(const posix_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:private	signature:(const posix_mutex &)
operator =	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex &operator=(const posix_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:private	signature:(const posix_named_mutex &)
operator =	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore &operator= (const posix_named_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:private	signature:(const posix_named_semaphore &)
operator =	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   posix_recursive_mutex &operator=(const posix_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:private	signature:(const posix_recursive_mutex &)
operator =	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   posix_semaphore &operator= (const posix_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::posix_semaphore	access:private	signature:(const posix_semaphore &)
operator =	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition &operator=(const shm_named_condition &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:private	signature:(const shm_named_condition &)
operator =	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any &operator=(const shm_named_condition_any &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private	signature:(const shm_named_condition_any &)
operator =	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex &operator=(const shm_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private	signature:(const shm_named_mutex &)
operator =	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex &operator=(const shm_named_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private	signature:(const shm_named_recursive_mutex &)
operator =	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore &operator=(const shm_named_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private	signature:(const shm_named_semaphore &)
operator =	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   named_upgradable_mutex &operator=(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
operator =	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   spin_condition &operator=(const spin_condition &);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:private	signature:(const spin_condition &)
operator =	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   spin_mutex &operator=(const spin_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:private	signature:(const spin_mutex &)
operator =	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   spin_recursive_mutex &operator=(const spin_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private	signature:(const spin_recursive_mutex &)
operator =	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   spin_semaphore &operator=(const spin_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:private	signature:(const spin_semaphore &)
operator =	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   windows_condition &operator=(const windows_condition &);$/;"	p	class:boost::interprocess::ipcdetail::windows_condition	access:private	signature:(const windows_condition &)
operator =	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   windows_mutex &operator=(const windows_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:private	signature:(const windows_mutex &)
operator =	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any &operator=(const windows_named_condition_any &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private	signature:(const windows_named_condition_any &)
operator =	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex &operator=(const windows_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private	signature:(const windows_named_mutex &)
operator =	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex &operator=(const windows_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:private	signature:(const windows_named_mutex &)
operator =	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore &operator=(const windows_named_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private	signature:(const windows_named_semaphore &)
operator =	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   windows_named_sync &operator=(const windows_named_sync &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:private	signature:(const windows_named_sync &)
operator =	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^   windows_recursive_mutex &operator=(const windows_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_recursive_mutex	access:private	signature:(const windows_recursive_mutex &)
operator =	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   windows_semaphore &operator=(const windows_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:private	signature:(const windows_semaphore &)
operator =	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_functions &operator=(const winapi_mutex_functions &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:private	signature:(const winapi_mutex_functions &)
operator =	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_wrapper &operator=(const winapi_mutex_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:private	signature:(const winapi_mutex_wrapper &)
operator =	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_functions &operator=(const winapi_semaphore_functions &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:private	signature:(const winapi_semaphore_functions &)
operator =	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_wrapper &operator=(const winapi_semaphore_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:private	signature:(const winapi_semaphore_wrapper &)
operator =	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex &operator=(xsi_named_mutex &);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:(xsi_named_mutex &)
operator ==	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator==(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator==(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/allocator.hpp	/^bool operator==(const allocator<T , SegmentManager>  &alloc1,$/;"	f	namespace:boost::interprocess	signature:(const allocator<T , SegmentManager> &alloc1, const allocator<T, SegmentManager> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^bool operator==(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^bool operator==(const cached_node_allocator<T, S, NPC> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const cached_node_allocator<T, S, NPC> &alloc1, const cached_node_allocator<T, S, NPC> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^bool operator==(const cached_allocator_impl<T, N, V> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const cached_allocator_impl<T, N, V> &alloc1, const cached_allocator_impl<T, N, V> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator==(const node_allocator<T, S, NPC> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const node_allocator<T, S, NPC> &alloc1, const node_allocator<T, S, NPC> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator==(const node_allocator_base<V, T, S, NPC> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const node_allocator_base<V, T, S, NPC> &alloc1, const node_allocator_base<V, T, S, NPC> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator==(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator==(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator==(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1,$/;"	p	namespace:boost::interprocess	signature:(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator==(const private_node_allocator_base<V, T, S, NPC> &alloc1,$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const private_node_allocator_base<V, T, S, NPC> &alloc1, const private_node_allocator_base<V, T, S, NPC> &alloc2)
operator ==	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator ==(const intersegment_ptr<T1> &left,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &left, const intersegment_ptr<T2> &right)
operator ==	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator == (const index_key & right) const$/;"	f	struct:boost::interprocess::ipcdetail::index_key	access:public	signature:(const index_key & right) const
operator ==	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator ==(const intrusive_value_type_impl<Hook, CharType, SizeType> & other) const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:(const intrusive_value_type_impl<Hook, CharType, SizeType> & other) const
operator ==	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator== (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator ==	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      friend bool operator==(const block_ctrl &a, const block_ctrl &b)$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:friend	signature:(const block_ctrl &a, const block_ctrl &b)
operator ==	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator== (const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
operator ==	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator== (const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
operator ==	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator== (pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
operator ==	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator==(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)
operator ==	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator==(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)
operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(const typename intrusive_ptr<T, VP>::pointer &a,$/;"	f	namespace:boost::interprocess	signature:(const typename intrusive_ptr<T, VP>::pointer &a, intrusive_ptr<T, VP> const & b)
operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, const typename intrusive_ptr<T, VP>::pointer &b)
operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<U, VP> const & b)
operator ==	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator==(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
operator ==	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator ==	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   friend bool operator==(const sync_id &l, const sync_id &r)$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:friend	signature:(const sync_id &l, const sync_id &r)
operator >	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator> (const intersegment_ptr<T1> &pt1,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
operator >	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator> (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator >	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>(const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
operator >	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>(const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
operator >	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>(pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
operator >	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator >(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator >=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator>= (const intersegment_ptr<T1> &pt1,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
operator >=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator>= (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator >=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>=(const offset_ptr &pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, const offset_ptr &pt2)
operator >=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>=(const offset_ptr &pt1, pointer pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(const offset_ptr &pt1, pointer pt2)
operator >=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend bool operator>=(pointer pt1, const offset_ptr &pt2)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(pointer pt1, const offset_ptr &pt2)
operator >=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator >>	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::basic_istream<E, T> & operator>>$/;"	f	namespace:boost::interprocess	signature:(std::basic_istream<E, T> & os, intersegment_ptr<U> & p)
operator >>	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline std::basic_istream<E, T> & operator>>$/;"	f	namespace:boost::interprocess	signature:(std::basic_istream<E, T> & is, offset_ptr<W, X, Y, Z> & p)
operator []	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   reference operator[](std::ptrdiff_t idx) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
operator []	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const named_proxy &operator[](std::size_t num) const$/;"	f	class:boost::interprocess::ipcdetail::named_proxy	access:public	signature:(std::size_t num) const
operator []	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type operator[](typename Iterator::difference_type off) const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
operator []	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reference operator[](difference_type idx) const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(difference_type idx) const
operator const CharType *	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   operator const CharType *()$/;"	f	class:boost::interprocess::ipcdetail::char_ptr_holder	access:public	signature:()
operator pthread_barrierattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_barrierattr_t&()  {  return m_attr;  }$/;"	f	struct:boost::interprocess::ipcdetail::barrierattr_wrapper	access:public	signature:()
operator pthread_condattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_condattr_t&(){  return m_attr;  }$/;"	f	struct:boost::interprocess::ipcdetail::condattr_wrapper	access:public	signature:()
operator pthread_mutexattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_mutexattr_t&()  {  return m_attr;  }$/;"	f	struct:boost::interprocess::ipcdetail::mutexattr_wrapper	access:public	signature:()
operator unspecified_bool_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   operator unspecified_bool_type () const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   operator unspecified_bool_type() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   operator_arrow_proxy(T &px)$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:(T &px)
operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   operator_arrow_proxy(const PseudoReference &px)$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:(const PseudoReference &px)
operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^struct operator_arrow_proxy$/;"	s	namespace:boost::interprocess
operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^struct operator_arrow_proxy<T&>$/;"	s	namespace:boost::interprocess
os_permissions_type	/usr/include/boost/interprocess/permissions.hpp	/^   typedef void*  os_permissions_type;$/;"	t	class:boost::interprocess::permissions	access:private
other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::adaptive_pool::rebind	access:public
other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool_base<Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>       other;$/;"	t	struct:boost::interprocess::ipcdetail::adaptive_pool_base::rebind	access:public
other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::ipcdetail::adaptive_pool_v1::rebind	access:public
other	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      typedef allocator<T2, SegmentManager>     other;$/;"	t	struct:boost::interprocess::allocator::rebind	access:public
other	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::cached_adaptive_pool::rebind	access:public
other	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::ipcdetail::cached_adaptive_pool_v1::rebind	access:public
other	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         <T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::ipcdetail::cached_node_allocator_v1::rebind	access:public
other	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^      typedef cached_node_allocator<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::cached_node_allocator::rebind	access:public
other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::node_allocator::rebind	access:public
other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator_base<Version, T2, SegmentManager, NodesPerBlock>       other;$/;"	t	struct:boost::interprocess::ipcdetail::node_allocator_base::rebind	access:public
other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator_v1<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::ipcdetail::node_allocator_v1::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::private_adaptive_pool::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         <Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>   other;$/;"	t	struct:boost::interprocess::ipcdetail::private_adaptive_pool_base::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      typedef private_adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::ipcdetail::private_adaptive_pool_v1::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         <T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::private_node_allocator::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         <Version, T2, SegmentManager, NodesPerBlock>   other;$/;"	t	struct:boost::interprocess::ipcdetail::private_node_allocator_base::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      typedef private_node_allocator_v1<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::ipcdetail::private_node_allocator_v1::rebind	access:public
other	/usr/include/boost/interprocess/offset_ptr.hpp	/^   {  typedef offset_ptr<U, DifferenceType, OffsetType, OffsetAlignment> other;  };$/;"	t	struct:boost::interprocess::offset_ptr::rebind	access:public
other_error	/usr/include/boost/interprocess/errors.hpp	/^   other_error,      \/\/ library generated error$/;"	e	enum:boost::interprocess::error_code_t
other_process_lock_remover	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   class other_process_lock_remover$/;"	c	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:private
out_of_memory_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_memory_error,$/;"	e	enum:boost::interprocess::error_code_t
out_of_resource_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_resource_error,$/;"	e	enum:boost::interprocess::error_code_t
out_of_space_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_space_error,$/;"	e	enum:boost::interprocess::error_code_t
overflow	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type overflow(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(int_type c = CharTraits::eof())
overflow	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type overflow(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(int_type c = CharTraits::eof())
owner	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   volatile boost::uint32_t owner;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private
owner_to_filename	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   void owner_to_filename(boost::uint32_t own, std::string &s);$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private	signature:(boost::uint32_t own, std::string &s)
owner_to_filename	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void robust_spin_mutex<Mutex>::owner_to_filename(boost::uint32_t own, std::string &s)$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:(boost::uint32_t own, std::string &s)
owns	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
owns	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
owns	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
padding	/usr/include/boost/interprocess/detail/mpl.hpp	/^   char padding[8];$/;"	m	struct:boost::interprocess::ipcdetail::no_type	access:public
padding	/usr/include/boost/interprocess/detail/type_traits.hpp	/^      char padding[8];$/;"	m	struct:boost::interprocess::ipcdetail::is_same::no_type	access:public
page_noaccess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_noaccess        = 0x01;$/;"	m	namespace:boost::interprocess::winapi
page_readonly	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_readonly        = 0x02;$/;"	m	namespace:boost::interprocess::winapi
page_readwrite	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_readwrite       = 0x04;$/;"	m	namespace:boost::interprocess::winapi
page_size_holder	/usr/include/boost/interprocess/mapped_region.hpp	/^   struct page_size_holder$/;"	s	class:boost::interprocess::mapped_region	access:private
page_writecopy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_writecopy       = 0x08;$/;"	m	namespace:boost::interprocess::winapi
path_error	/usr/include/boost/interprocess/errors.hpp	/^   path_error,$/;"	e	enum:boost::interprocess::error_code_t
pbackfail	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type pbackfail(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(int_type c = CharTraits::eof())
pbackfail	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type pbackfail(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(int_type c = CharTraits::eof())
pbstrVal	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      wchar_t *pbstrVal;$/;"	m	union:boost::interprocess::winapi::wchar_variant::value_t	access:public
permissions	/usr/include/boost/interprocess/permissions.hpp	/^   permissions()$/;"	f	class:boost::interprocess::permissions	access:public	signature:()
permissions	/usr/include/boost/interprocess/permissions.hpp	/^   permissions(os_permissions_type type)$/;"	f	class:boost::interprocess::permissions	access:public	signature:(os_permissions_type type)
permissions	/usr/include/boost/interprocess/permissions.hpp	/^class permissions$/;"	c	namespace:boost::interprocess
pid_str_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef char pid_str_t[sizeof(OS_process_id_t)*3+1];$/;"	t	namespace:boost::interprocess::ipcdetail
placement_destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   placement_destroy()$/;"	f	struct:boost::interprocess::ipcdetail::placement_destroy	access:public	signature:()
placement_destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^struct placement_destroy :  public in_place_interface$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:in_place_interface
pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^         rebind_pointer<T>::type                pointer;$/;"	t	class:boost::interprocess::allocator	access:public
pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::pointer                      pointer;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef T *                                     pointer;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
pointer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      void *pointer;$/;"	m	union:boost::interprocess::winapi::interprocess_overlapped::__anon5	access:public
pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef PointedType *                     pointer;$/;"	t	class:boost::interprocess::offset_ptr	access:public
pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef boost::interprocess::offset_ptr<T, P, O, A>      pointer;$/;"	t	struct:boost::intrusive::pointer_plus_bits	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^         rebind_pointer<T>::type                pointer;$/;"	t	class:boost::interprocess::deleter	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::ipcdetail::weak_count	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename Allocator::pointer pointer;$/;"	t	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename D::pointer   pointer;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^         rebind_pointer<T>::type                pointer;$/;"	t	class:boost::interprocess::intrusive_ptr	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef typename ipcdetail::pointer_type<T, Deleter>::type pointer;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^         rebind_pointer<T>::type                               pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename ipcdetail::pointer_type<T, D>::type pointer;$/;"	t	class:boost::interprocess::unique_ptr	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^         rebind_pointer<T>::type                         pointer;$/;"	t	class:boost::interprocess::weak_ptr	access:private
pointer_plus_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct pointer_plus_bits<boost::interprocess::offset_ptr<T, P, O, A>, NumBits>$/;"	s	namespace:boost::intrusive
pointer_to	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static offset_ptr pointer_to(reference r)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(reference r)
pointer_to_other	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct pointer_to_other$/;"	s	namespace:boost
pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type$/;"	s	namespace:boost::interprocess::ipcdetail
pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type$/;"	s	namespace:boost::interprocess::ipcdetail::pointer_type_imp
pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type<T, D, false>$/;"	s	namespace:boost::interprocess::ipcdetail::pointer_type_imp
pointer_type_imp	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace pointer_type_imp {$/;"	n	namespace:boost::interprocess::ipcdetail
pop_back	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void pop_back()$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:()
pop_front	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   void *pop_front()$/;"	f	class:boost::interprocess::ipcdetail::basic_multiallocation_chain	access:public	signature:()
portable_intermodule_singleton	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^class portable_intermodule_singleton$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:intermodule_singleton_impl
pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::pos_type                 pos_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   posix_condition();$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:()
posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   posix_condition(const posix_condition &);$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:private	signature:(const posix_condition &)
posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^class posix_condition$/;"	c	namespace:boost::interprocess::ipcdetail
posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline posix_condition::posix_condition()$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:()
posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   posix_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:()
posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   posix_mutex(const posix_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:private	signature:(const posix_mutex &)
posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^class posix_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline posix_mutex::posix_mutex()$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:()
posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:private	signature:()
posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex(const posix_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:private	signature:(const posix_named_mutex &)
posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:(open_only_t open_only, const char *name)
posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   posix_named_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^class posix_named_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline posix_named_mutex::posix_named_mutex(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:(create_only_t, const char *name, const permissions &perm)
posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline posix_named_mutex::posix_named_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:(open_only_t, const char *name)
posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline posix_named_mutex::posix_named_mutex(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:private	signature:()
posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore(const posix_named_semaphore&);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:private	signature:(const posix_named_semaphore&)
posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:(open_only_t, const char *name)
posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   posix_named_semaphore(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^class posix_named_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   posix_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:()
posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   posix_recursive_mutex(const posix_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:private	signature:(const posix_recursive_mutex &)
posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^class posix_recursive_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline posix_recursive_mutex::posix_recursive_mutex()$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:()
posix_semaphore	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   posix_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::posix_semaphore	access:private	signature:()
posix_semaphore	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   posix_semaphore(const posix_semaphore&);$/;"	p	class:boost::interprocess::ipcdetail::posix_semaphore	access:private	signature:(const posix_semaphore&)
posix_semaphore	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   posix_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:(unsigned int initialCount)
posix_semaphore	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^class posix_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
posix_time	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^namespace posix_time$/;"	n	namespace:boost
posix_time	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^namespace posix_time$/;"	n	namespace:boost
posix_time	/usr/include/boost/interprocess/sync/lock_options.hpp	/^namespace posix_time$/;"	n	namespace:boost
posix_time	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^namespace posix_time$/;"	n	namespace:boost
post	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
post	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::post()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
post	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
post	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::post()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
post	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   void post()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:()
post	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   void post()$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:()
post	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:()
post	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline void shm_named_semaphore::post()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:()
post	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:()
post	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline void spin_semaphore::post()$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:()
post	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:()
post	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline void windows_named_semaphore::post()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:()
post	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   void post(long release_count = 1);$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:(long release_count = 1)
post	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline void windows_semaphore::post(long release_count)$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:(long release_count)
post	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void post(long count = 1)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:(long count = 1)
pow	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t pow      :  pow_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
pow_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t pow_size_bits =$/;"	m	struct:boost::interprocess::intersegment_base	access:public
pow_size_bits_helper	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t pow_size_bits_helper = static_log2<max_segment_size_bits>::value;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
previous_owner_dead	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool previous_owner_dead();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
previous_owner_dead	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::previous_owner_dead()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
priority	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   unsigned int            priority;\/\/ Message priority$/;"	m	class:boost::interprocess::ipcdetail::msg_hdr_t	access:public
priority_functor	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class priority_functor$/;"	c	namespace:boost::interprocess::ipcdetail
priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void priv_add_segment(void *addr, size_type size);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *addr, size_type size)
priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_add_segment(void *addr, size_type size)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *addr, size_type size)
priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_add_segment(void *addr, size_type size);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *addr, size_type size)
priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_add_segment(void *addr, size_type segment_size)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *addr, size_type segment_size)
priv_add_segment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_add_segment(void *addr, size_type segment_size)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void *addr, size_type segment_size)
priv_add_segment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_add_segment(void *addr, size_type size);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *addr, size_type size)
priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,size_type limit_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr)
priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr = 0)
priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,size_type limit_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr)
priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr = 0)
priv_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command ,size_type limit_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,size_type backwards_multiple)
priv_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command ,size_type limit_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr = 0 ,size_type backwards_multiple = 1)
priv_allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_allocate_aligned(size_type nbytes, size_type alignment)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nbytes, size_type alignment)
priv_allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_allocate_aligned     (size_type nbytes, size_type alignment);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(size_type nbytes, size_type alignment)
priv_allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void priv_allocate_many$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:private	signature:( MemoryAlgorithm *memory_algo , const size_type *elem_sizes , size_type n_elements , size_type sizeof_element , multiallocation_chain &chain)
priv_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_allocation_command (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, void *reuse_ptr, size_type sizeof_object)
priv_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocation_command(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,size_type sizeof_object)
priv_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      priv_allocation_command(boost::interprocess::allocation_type command,   size_type limit_size,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, void *reuse_ptr, size_type sizeof_object)
priv_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_allocation_command (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, void *reuse_ptr, size_type sizeof_object)
priv_block_end_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ::priv_block_end_offset() const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:() const
priv_block_end_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   size_type priv_block_end_offset() const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:() const
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_check_and_allocate(size_type units$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(size_type units ,block_ctrl* prev ,block_ctrl* block ,size_type &received_size)
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void* simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_check_and_allocate$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nunits ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* prev ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* block ,size_type &received_size)
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* priv_check_and_allocate(size_type units$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(size_type units ,block_ctrl* prev ,block_ctrl* block ,size_type &received_size)
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void* simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_check_and_allocate$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type nunits ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* prev ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* block ,size_type &received_size)
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* priv_check_and_allocate(size_type units$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(size_type units ,block_ctrl* block ,size_type &received_size)
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void* rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_check_and_allocate$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type nunits ,typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl* block ,size_type &received_size)
priv_close	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:private	signature:()
priv_close	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::priv_close()$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:()
priv_close	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   void priv_close()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:()
priv_close	/usr/include/boost/interprocess/file_mapping.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::file_mapping	access:private	signature:()
priv_close	/usr/include/boost/interprocess/file_mapping.hpp	/^inline void file_mapping::priv_close()$/;"	f	class:boost::interprocess::file_mapping	signature:()
priv_close	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   void priv_close()$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:private	signature:()
priv_close	/usr/include/boost/interprocess/mapped_region.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:()
priv_close	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::priv_close()$/;"	f	class:boost::interprocess::mapped_region	signature:()
priv_close	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::shared_memory_object	access:private	signature:()
priv_close	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::priv_close()$/;"	f	class:boost::interprocess::shared_memory_object	signature:()
priv_close	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:()
priv_close	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::priv_close()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
priv_close	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::windows_shared_memory	access:private	signature:()
priv_close	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline void windows_shared_memory::priv_close()$/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *addr)
priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void* addr)
priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *addr)
priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void* addr)
priv_deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *addr)
priv_deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void* addr)
priv_deallocate	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void priv_deallocate(const typename Allocator::pointer &p, allocator_v1)$/;"	f	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:private	signature:(const typename Allocator::pointer &p, allocator_v1)
priv_deallocate	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void priv_deallocate(const typename Allocator::pointer &p, allocator_v2)$/;"	f	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:private	signature:(const typename Allocator::pointer &p, allocator_v2)
priv_deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void priv_deallocate_many(MemoryAlgorithm *memory_algo, multiallocation_chain &chain)$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:private	signature:(MemoryAlgorithm *memory_algo, multiallocation_chain &chain)
priv_deallocate_n_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void priv_deallocate_n_nodes(size_type n)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:private	signature:(size_type n)
priv_deallocate_remaining_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void priv_deallocate_remaining_nodes()$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:private	signature:()
priv_destroy_ptr	/usr/include/boost/interprocess/segment_manager.hpp	/^   void priv_destroy_ptr(const void *ptr, ipcdetail::in_place_interface &dtor)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const void *ptr, ipcdetail::in_place_interface &dtor)
priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ::priv_end_block()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   block_ctrl *priv_end_block();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:()
priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_end_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *first_segment_block)
priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl * priv_end_block(block_ctrl *first_segment_block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *first_segment_block)
priv_expand	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *ptr ,size_type min_size, size_type preferred_size ,size_type &received_size)
priv_expand	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *ptr ,size_type min_size ,size_type preferred_size ,size_type &received_size)
priv_expand	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *ptr ,size_type min_size, size_type preferred_size ,size_type &received_size)
priv_expand	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *ptr ,size_type min_size ,size_type preferred_size ,size_type &received_size)
priv_expand	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *ptr ,const size_type min_size, const size_type preferred_size ,size_type &received_size)
priv_expand	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void *ptr ,const size_type min_size ,const size_type preferred_size ,size_type &received_size)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards ,size_type backwards_multiple)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command ,size_type min_size ,size_type preferred_size ,size_type &received_size ,void *reuse_ptr ,bool only_preferred_backwards ,size_type backwards_multiple)
priv_find__impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> priv_find__impl (const ipcdetail::unique_instance_t* name, bool lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const ipcdetail::unique_instance_t* name, bool lock)
priv_find_impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, size_type> priv_find_impl (const CharType* name, bool lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharType* name, bool lock)
priv_first_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ::priv_first_block()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
priv_first_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   block_ctrl *priv_first_block();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:()
priv_first_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_first_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *end_segment_block)
priv_first_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl * priv_first_block(block_ctrl *end_segment_block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *end_segment_block)
priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ::priv_first_block_offset(const void *this_ptr, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(const void *this_ptr, size_type extra_hdr_bytes)
priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static size_type priv_first_block_offset(const void *this_ptr, size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const void *this_ptr, size_type extra_hdr_bytes)
priv_first_block_offset_from_this	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ::priv_first_block_offset_from_this(const void *this_ptr, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *this_ptr, size_type extra_hdr_bytes)
priv_first_block_offset_from_this	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static size_type priv_first_block_offset_from_this(const void *this_ptr, size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const void *this_ptr, size_type extra_hdr_bytes)
priv_flush_param_check	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool priv_flush_param_check(std::size_t mapping_offset, void *&addr, std::size_t &numbytes) const;$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:(std::size_t mapping_offset, void *&addr, std::size_t &numbytes) const
priv_flush_param_check	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::priv_flush_param_check$/;"	f	class:boost::interprocess::mapped_region	signature:(std::size_t mapping_offset, void *&addr, std::size_t &numbytes) const
priv_generic_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_construct(const CharType *name,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharType *name, size_type num, bool try2find, bool dothrow, ipcdetail::in_place_interface &table)
priv_generic_find	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_find$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT* name, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, size_type &length, ipcdetail::false_ is_intrusive, bool use_lock)
priv_generic_find	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_find$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT* name, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, size_type &length, ipcdetail::true_ is_intrusive, bool use_lock)
priv_generic_named_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * priv_generic_named_construct(unsigned char type,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(unsigned char type, const CharT *name, size_type num, bool try2find, bool dothrow, ipcdetail::in_place_interface &table, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::false_ is_intrusive)
priv_generic_named_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * priv_generic_named_construct(unsigned char type,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(unsigned char type, const CharT *name, size_type num, bool try2find, bool dothrow, ipcdetail::in_place_interface &table, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::true_ is_intrusive)
priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *block_header, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, ipcdetail::false_ is_node_index)
priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *block_header, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, ipcdetail::true_ is_node_index)
priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy(const CharT *name,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT *name, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, ipcdetail::false_ is_intrusive_index)
priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy(const CharT *name,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT *name, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table, ipcdetail::true_ is_intrusive_index)
priv_generic_named_destroy_impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy_impl$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const typename IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> >::iterator &it, IndexType<ipcdetail::index_config<CharT, MemoryAlgorithm> > &index, ipcdetail::in_place_interface &table)
priv_get_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_get_block(const void *ptr)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(const void *ptr)
priv_get_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static block_ctrl *priv_get_block(const void *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const void *ptr)
priv_get_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_get_block(const void *ptr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *ptr)
priv_get_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl *priv_get_block(const void *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const void *ptr)
priv_get_instance_length	/usr/include/boost/interprocess/segment_manager.hpp	/^   static size_type priv_get_instance_length(block_header_t *ctrl_data, size_type sizeofvalue)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data, size_type sizeofvalue)
priv_get_instance_name	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const CharType *priv_get_instance_name(block_header_t *ctrl_data)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data)
priv_get_instance_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   static instance_type priv_get_instance_type(block_header_t *ctrl_data)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data)
priv_get_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   scoped_lock<rmutex> priv_get_lock(bool use_lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(bool use_lock)
priv_get_reserved_bytes	/usr/include/boost/interprocess/segment_manager.hpp	/^   static size_type priv_get_reserved_bytes()$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:()
priv_get_total_units	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_get_total_units(size_type userbytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type userbytes)
priv_get_total_units	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static size_type priv_get_total_units(size_type userbytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(size_type userbytes)
priv_get_total_units	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_get_total_units(size_type userbytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type userbytes)
priv_get_total_units	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static size_type priv_get_total_units(size_type userbytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(size_type userbytes)
priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_get_user_buffer(const typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(const typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)
priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static void *priv_get_user_buffer(const block_ctrl *block);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const block_ctrl *block)
priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      priv_get_user_buffer(const typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static void *priv_get_user_buffer(const block_ctrl *block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const block_ctrl *block)
priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool priv_is_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^bool simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_is_allocated_block$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)
priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_is_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^bool rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_is_allocated_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
priv_is_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_is_prev_allocated(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_is_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^bool rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_is_prev_allocated$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
priv_map_address	/usr/include/boost/interprocess/mapped_region.hpp	/^   void* priv_map_address()  const;$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:() const
priv_map_address	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void*    mapped_region::priv_map_address()  const$/;"	f	class:boost::interprocess::mapped_region	signature:() const
priv_map_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t priv_map_size()  const;$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:() const
priv_map_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::priv_map_size()  const$/;"	f	class:boost::interprocess::mapped_region	signature:() const
priv_mark_as_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_as_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_mark_as_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_mark_as_allocated_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
priv_mark_as_free_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_as_free_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_mark_as_free_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_mark_as_free_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_mark_new_allocated_block(block_ctrl *new_block)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(block_ctrl *new_block)
priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_mark_new_allocated_block(block_ctrl *block);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *block)
priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_new_allocated_block(block_ctrl *ptr)$/;"	f	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_new_segment	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   bool  priv_new_segment(typename create_open_func::type_t type,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:(typename create_open_func::type_t type, size_type size, const void *addr, const permissions &perm)
priv_next_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_next_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *ptr)
priv_next_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl * priv_next_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      priv_next_block_if_free$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   block_ctrl *priv_next_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_next_block_if_free$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   block_ctrl *priv_next_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
priv_obtain_index	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static void priv_obtain_index(mapped_region &m, xsi_named_mutex &m, std::string &path);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(mapped_region &m, xsi_named_mutex &m, std::string &path)
priv_obtain_index	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline void xsi_shared_memory_device::priv_obtain_index$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(mapped_region &reg, xsi_named_mutex &mut, std::string &path)
priv_open_or_create	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   bool priv_open_or_create(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm);$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:private	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm)
priv_open_or_create	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::priv_open_or_create$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm = permissions())
priv_open_or_create	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   bool  priv_open_or_create(typename create_open_func::type_t type,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:(typename create_open_func::type_t type, const char *name, size_type size, const permissions &perm)
priv_open_or_create	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void priv_open_or_create$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(create_enum_t type, const device_id_t & id, std::size_t size, mode_t mode, const void *addr, const permissions &perm, ConstructFunc construct_func)
priv_open_or_create	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   bool priv_open_or_create(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm);$/;"	p	class:boost::interprocess::shared_memory_object	access:private	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm)
priv_open_or_create	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::priv_open_or_create$/;"	f	class:boost::interprocess::shared_memory_object	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, const permissions &perm)
priv_open_or_create	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   bool priv_open_or_create( ipcdetail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:( ipcdetail::create_enum_t type , const char *path , boost::uint8_t id , int perm)
priv_open_or_create	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline bool xsi_named_mutex::priv_open_or_create$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:(ipcdetail::create_enum_t type, const char *path, boost::uint8_t id, int perm)
priv_open_or_create	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   bool priv_open_or_create(ipcdetail::create_enum_t type, const char *filename, mode_t mode, std::size_t size, const permissions& perm = permissions());$/;"	p	class:boost::interprocess::windows_shared_memory	access:private	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, std::size_t size, const permissions& perm = permissions())
priv_open_or_create	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline bool windows_shared_memory::priv_open_or_create$/;"	f	class:boost::interprocess::windows_shared_memory	signature:(ipcdetail::create_enum_t type, const char *filename, mode_t mode, std::size_t size, const permissions& perm)
priv_open_or_create	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   bool priv_open_or_create( ipcdetail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory	access:private	signature:( ipcdetail::create_enum_t type , const xsi_key &key , const permissions& perm , std::size_t size)
priv_open_or_create	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline bool xsi_shared_memory::priv_open_or_create$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(ipcdetail::create_enum_t type, const xsi_key &key, const permissions& permissions, std::size_t size)
priv_open_or_create_name_id	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   bool priv_open_or_create_name_id( ipcdetail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:( ipcdetail::create_enum_t type , const char *shmname , boost::uint8_t id , mode_t mode , std::size_t size)
priv_open_or_create_name_id	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_open_or_create_name_id$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(ipcdetail::create_enum_t type, const char *filepath, mode_t mode, std::size_t size)
priv_open_or_create_name_only	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   bool priv_open_or_create_name_only( ipcdetail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:( ipcdetail::create_enum_t type , const char *shmname , mode_t mode , std::size_t size)
priv_open_or_create_name_only	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_open_or_create_name_only$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(ipcdetail::create_enum_t type, const char *shmname, mode_t mode, std::size_t size)
priv_page_offset_addr_fixup	/usr/include/boost/interprocess/mapped_region.hpp	/^   static offset_t priv_page_offset_addr_fixup(offset_t page_offset, const void *&addr);$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:(offset_t page_offset, const void *&addr)
priv_page_offset_addr_fixup	/usr/include/boost/interprocess/mapped_region.hpp	/^inline offset_t mapped_region::priv_page_offset_addr_fixup(offset_t offset, const void *&address)$/;"	f	class:boost::interprocess::mapped_region	signature:(offset_t offset, const void *&address)
priv_prev_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_prev_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *ptr)
priv_prev_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl * priv_prev_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      priv_prev_block_if_free$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::pair<block_ctrl*, block_ctrl*>priv_prev_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_prev_block_if_free$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<block_ctrl*, block_ctrl*>priv_prev_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
priv_remove_dead_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool priv_remove_dead_memory(info_t *info, const char *path);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(info_t *info, const char *path)
priv_remove_dead_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_remove_dead_memory$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(xsi_shared_memory_device::info_t *info, const char *path)
priv_shrink	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool priv_shrink(void *ptr$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(void *ptr ,size_type max_size, size_type preferred_size ,size_type &received_size)
priv_shrink	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_shrink (void *ptr$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *ptr ,size_type max_size ,size_type preferred_size ,size_type &received_size)
priv_shrink_param_check	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool priv_shrink_param_check(std::size_t bytes, bool from_back, void *&shrink_page_start, std::size_t &shrink_page_bytes);$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:(std::size_t bytes, bool from_back, void *&shrink_page_start, std::size_t &shrink_page_bytes)
priv_shrink_param_check	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::priv_shrink_param_check$/;"	f	class:boost::interprocess::mapped_region	signature:(std::size_t bytes, bool from_back, void *&shrink_page_start, std::size_t &shrink_page_bytes)
priv_size_from_mapping_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   static void priv_size_from_mapping_size$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:(offset_t mapping_size, offset_t offset, offset_t page_offset, std::size_t &size)
priv_size_from_mapping_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::priv_size_from_mapping_size$/;"	f	class:boost::interprocess::mapped_region	signature:(offset_t mapping_size, offset_t offset, offset_t page_offset, std::size_t &size)
private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool();$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:private	signature:()
private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool(const private_adaptive_node_pool &);$/;"	p	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:private	signature:(const private_adaptive_node_pool &)
private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public	signature:(segment_manager *segment_mngr)
private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^class private_adaptive_node_pool$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:boost::container::container_detail::private_adaptive_node_pool_impl
private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool$/;"	f	class:boost::interprocess::private_adaptive_pool	access:public	signature:(const private_adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::private_adaptive_pool	access:public	signature:(SegmentManager *segment_mngr)
private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::private_adaptive_pool_base
private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:(const private_adaptive_pool_base <Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base(const private_adaptive_pool_base &other)$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:(const private_adaptive_pool_base &other)
private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:(segment_manager *segment_mngr)
private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool_base$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:node_pool_allocation_impl
private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_v1$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_v1	access:public	signature:(const private_adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_v1(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr)
private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:private_adaptive_pool_base
private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator$/;"	f	class:boost::interprocess::private_node_allocator	access:public	signature:(const private_node_allocator<T2, SegmentManager, NodesPerBlock> &other)
private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::private_node_allocator	access:public	signature:(SegmentManager *segment_mngr)
private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::private_node_allocator_base
private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:(const private_node_allocator_base <Version, T2, SegmentManager, NodesPerBlock> &other)
private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base(const private_node_allocator_base &other)$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:(const private_node_allocator_base &other)
private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:(segment_manager *segment_mngr)
private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator_base$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:node_pool_allocation_impl
private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_v1$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_v1	access:public	signature:(const private_node_allocator_v1<T2, SegmentManager, NodesPerBlock> &other)
private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_v1(SegmentManager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr)
private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator_v1$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:private_node_allocator_base
private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool();$/;"	p	class:boost::interprocess::ipcdetail::private_node_pool	access:private	signature:()
private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool(const private_node_pool &);$/;"	p	class:boost::interprocess::ipcdetail::private_node_pool	access:private	signature:(const private_node_pool &)
private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::private_node_pool	access:public	signature:(segment_manager *segment_mngr)
private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^class private_node_pool$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:boost::container::container_detail::private_node_pool_impl
prot_anonymous_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * prot_anonymous_construct$/;"	f	class:boost::interprocess::segment_manager_base	access:protected	signature:(size_type num, bool dothrow, ipcdetail::in_place_interface &table)
prot_anonymous_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   void prot_anonymous_destroy(const void *object, ipcdetail::in_place_interface &table)$/;"	f	class:boost::interprocess::segment_manager_base	access:protected	signature:(const void *object, ipcdetail::in_place_interface &table)
ptime	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef boost::posix_time::ptime ptime;$/;"	t	class:boost::interprocess::message_queue_t	access:private
ptime_to_timespec	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^inline timespec ptime_to_timespec (const boost::posix_time::ptime &tm)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const boost::posix_time::ptime &tm)
ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   void *ptr;$/;"	m	struct:boost::interprocess::ipcdetail::ref_count_ptr	access:public
ptr_	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^      : ptr_(u.release(), boost::forward<D>(u.get_deleter()))$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(u.release(), boost::forward<D>(u.get_deleter()))
ptr_to_segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ,std::less<const void *> >          ptr_to_segment_info_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:private
purge_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void purge_blocks()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
purge_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void purge_chunks()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
push_back	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void push_back(void *addr, std::size_t size)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(void *addr, std::size_t size)
query_performance_counter	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool query_performance_counter(__int64 *lpPerformanceCount)$/;"	f	namespace:boost::interprocess::winapi	signature:(__int64 *lpPerformanceCount)
queue_free_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_header & queue_free_msg(unsigned int priority)$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:(unsigned int priority)
rand_	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   internal_type rand_;$/;"	m	class:boost::interprocess::ipcdetail::sync_id	access:private
raw_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      raw_allocation_command  (boost::interprocess::allocation_type command,   size_type limit_size,$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size,size_type &received_size, void *reuse_ptr = 0, size_type sizeof_object = 1)
raw_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   raw_allocation_command  (boost::interprocess::allocation_type command,   size_type limit_objects,$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, size_type limit_objects, size_type preferred_objects,size_type &received_objects, void *reuse_ptr, size_type sizeof_object)
raw_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^     raw_allocation_command  (boost::interprocess::allocation_type command,   size_type limit_object,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_object, size_type preferred_object,size_type &received_object, void *reuse_ptr = 0, size_type sizeof_object = 1)
raw_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   raw_allocation_command  (boost::interprocess::allocation_type command,   size_type limit_objects,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, size_type limit_objects, size_type preferred_objects,size_type &received_objects, void *reuse_ptr, size_type sizeof_object)
raw_allocation_command	/usr/include/boost/interprocess/segment_manager.hpp	/^      raw_allocation_command  (boost::interprocess::allocation_type command,   size_type limit_objects,$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_objects, size_type preferred_objects,size_type &received_objects, void *reuse_ptr = 0, size_type sizeof_object = 1)
raw_mapped_region_creator	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^   class raw_mapped_region_creator$/;"	c	namespace:boost::interprocess::ipcdetail
rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit           (size_type size, size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(size_type size, size_type extra_hdr_bytes)
rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:()
rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit(const rbtree_best_fit &);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const rbtree_best_fit &)
rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit(size_type segment_size, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(size_type segment_size, size_type extra_hdr_bytes)
rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^class rbtree_best_fit$/;"	c	namespace:boost::interprocess
rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:() const
rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:() const
rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:() const
rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:() const
rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:() const
rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:() const
read_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool read_file(void *hnd, void *buffer, unsigned long bytes_to_read, unsigned long *bytes_read, interprocess_overlapped* overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, void *buffer, unsigned long bytes_to_read, unsigned long *bytes_read, interprocess_overlapped* overlapped)
read_only	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef enum { read_only      = winapi::generic_read$/;"	e	enum:boost::interprocess::__anon2
read_only_error	/usr/include/boost/interprocess/errors.hpp	/^   read_only_error,$/;"	e	enum:boost::interprocess::error_code_t
read_private	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , read_private$/;"	e	enum:boost::interprocess::__anon2
read_write	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , read_write     = winapi::generic_read | winapi::generic_write$/;"	e	enum:boost::interprocess::__anon2
rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::adaptive_pool	access:public
rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::adaptive_pool_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::allocator	access:public
rebind	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::cached_adaptive_pool	access:public
rebind	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::cached_adaptive_pool_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::cached_node_allocator	access:public
rebind	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::cached_node_allocator_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::node_allocator_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::node_allocator	access:public
rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::private_adaptive_pool_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::private_adaptive_pool	access:public
rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::ipcdetail::private_node_allocator_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::private_node_allocator	access:public
rebind	/usr/include/boost/interprocess/offset_ptr.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::offset_ptr	access:public
receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void receive (void *buffer,           size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(void *buffer, size_type buffer_size, size_type &recvd_size,unsigned int &priority)
receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline void message_queue_t<VoidPointer>::receive(void *buffer,        size_type buffer_size,$/;"	f	class:boost::interprocess::message_queue_t	signature:(void *buffer, size_type buffer_size, size_type &recvd_size, unsigned int &priority)
recursive_mutex_type	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef boost::interprocess::ipcdetail::spin_recursive_mutex    recursive_mutex_type;$/;"	t	struct:boost::interprocess::ipcdetail::intermodule_singleton_mutex_family	access:public
recursive_mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::interprocess_recursive_mutex       recursive_mutex_type;$/;"	t	struct:boost::interprocess::mutex_family	access:public
recursive_mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::null_mutex                   recursive_mutex_type;$/;"	t	struct:boost::interprocess::null_mutex_family	access:public
ref_count_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   ref_count_ptr(void *p, boost::uint32_t count)$/;"	f	struct:boost::interprocess::ipcdetail::ref_count_ptr	access:public	signature:(void *p, boost::uint32_t count)
ref_count_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^struct ref_count_ptr$/;"	s	namespace:boost::interprocess::ipcdetail
ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            ref_holder(T &&t)$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:(T &&t)
ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            ref_holder(T &t)$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:(T &t)
ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            ref_holder(const T &t)$/;"	f	struct:boost::interprocess::ipcdetail::ref_holder	access:public	signature:(const T &t)
ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^         struct ref_holder$/;"	s	namespace:boost::interprocess::ipcdetail
ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^         struct ref_holder<T &&>$/;"	s	namespace:boost::interprocess::ipcdetail
ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^         struct ref_holder<T &>$/;"	s	namespace:boost::interprocess::ipcdetail
ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^         struct ref_holder<const T &&>$/;"	s	namespace:boost::interprocess::ipcdetail
ref_holder	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^         struct ref_holder<const T>$/;"	s	namespace:boost::interprocess::ipcdetail
ref_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   bool ref_release() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
reference	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
reference	/usr/include/boost/interprocess/allocators/allocator.hpp	/^                     <value_type>::type         reference;$/;"	t	class:boost::interprocess::allocator	access:public
reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
reference	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
reference	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
reference	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
reference	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef typename ipcdetail::add_reference<T>::type reference;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
reference	/usr/include/boost/interprocess/offset_ptr.hpp	/^      add_reference<PointedType>::type       reference;$/;"	t	class:boost::interprocess::offset_ptr	access:public
reference	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef typename ipcdetail::add_reference<T>::type reference;$/;"	t	class:boost::interprocess::scoped_ptr	access:private
reference	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^                     <value_type>::type                        reference;$/;"	t	class:boost::interprocess::shared_ptr	access:public
reference	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^                     <T>::type            reference;$/;"	t	class:boost::interprocess::weak_ptr	access:private
reg_close_key	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long reg_close_key(void *hKey)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hKey)
reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   reg_closer(void *key) : key_(key){}$/;"	f	struct:boost::interprocess::winapi::reg_closer	access:public	signature:(void *key)
reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct reg_closer$/;"	s	namespace:boost::interprocess::winapi
reg_open_key_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long reg_open_key_ex(void *hKey, const char *lpSubKey, unsigned long ulOptions, unsigned long samDesired, void **phkResult)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hKey, const char *lpSubKey, unsigned long ulOptions, unsigned long samDesired, void **phkResult)
reg_query_value_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long reg_query_value_ex(void *hKey, const char *lpValueName, unsigned long*lpReserved, unsigned long*lpType, unsigned char *lpData, unsigned long*lpcbData)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hKey, const char *lpValueName, unsigned long*lpReserved, unsigned long*lpType, unsigned char *lpData, unsigned long*lpcbData)
register_lock_file	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      locking_file_serial_id * register_lock_file(int fd)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:private	signature:(int fd)
reinterpret_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct reinterpret_cast_tag {};$/;"	s	namespace:boost::interprocess::ipcdetail
reinterpret_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> reinterpret_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
reinterpret_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reinterpret_pointer_cast(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)
relative	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      relative_addressing  relative;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
relative_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct relative_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
relative_calculate_begin_addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void *relative_calculate_begin_addr() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
relative_set_begin_from_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void relative_set_begin_from_base(void *addr)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(void *addr)
relative_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::size_t relative_size() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
relative_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t relative_size_bits =$/;"	m	struct:boost::interprocess::intersegment_base	access:public
release	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void release()$/;"	f	class:boost::interprocess::ipcdetail::mem_algo_deallocator	access:public	signature:()
release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void release() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:()
release	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer release()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
release	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      void release()$/;"	f	struct:boost::interprocess::interprocess_sharable_mutex::exclusive_rollback	access:public	signature:()
release	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      void release()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:()
release	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      void release()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:()
release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release()       { mp_cond = 0; }$/;"	f	class:boost::interprocess::ipcdetail::condition_initializer	access:public	signature:()
release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release() {mp_barrier = 0; }$/;"	f	class:boost::interprocess::ipcdetail::barrier_initializer	access:public	signature:()
release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release() {mp_mut = 0; }$/;"	f	class:boost::interprocess::ipcdetail::mutex_initializer	access:public	signature:()
release	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
release	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
release	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
release	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void *release()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:()
release	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void *release()$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:()
release_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool release_file_lock(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
release_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool release_file_lock_sharable(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd)
release_mutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int release_mutex(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
release_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int release_semaphore(void *handle, long release_count, long *prev_count)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, long release_count, long *prev_count)
remove	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::remove(const char *filename)$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:(const char *filename)
remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool remove(const char *shmname);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(const char *shmname)
remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool remove(int shmid);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(int shmid)
remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::remove(const char *shmname)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(const char *shmname)
remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::remove(int shmid)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(int shmid)
remove	/usr/include/boost/interprocess/file_mapping.hpp	/^   static bool remove(const char *filename);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(const char *filename)
remove	/usr/include/boost/interprocess/file_mapping.hpp	/^inline bool file_mapping::remove(const char *filename)$/;"	f	class:boost::interprocess::file_mapping	signature:(const char *filename)
remove	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue_t<VoidPointer>::remove(const char *name)$/;"	f	class:boost::interprocess::message_queue_t	signature:(const char *name)
remove	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   static bool remove(int shmid)$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(int shmid)
remove	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::remove(const char *filename)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(const char *filename)
remove	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::remove(const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   static bool remove(const char *name)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::remove(const char *name)$/;"	f	class:boost::interprocess::named_semaphore	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline bool named_sharable_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline bool posix_named_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   static bool remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline bool shm_named_condition::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   static bool remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline bool shm_named_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline bool shm_named_recursive_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline bool shm_named_semaphore::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   static bool remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline bool windows_named_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline bool windows_named_semaphore::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^inline bool windows_named_sync::remove(const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_sync	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   bool remove();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
remove	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline bool xsi_named_mutex::remove()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
remove	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   static bool remove(int shmid);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:(int shmid)
remove	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline bool xsi_shared_memory::remove(int shmid)$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(int shmid)
remove_const	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_const$/;"	s	namespace:boost::interprocess::ipcdetail
remove_const	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_const<const T>$/;"	s	namespace:boost::interprocess::ipcdetail
remove_const_volatile	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_const_volatile$/;"	s	namespace:boost::interprocess::ipcdetail
remove_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool remove_directory(const char *lpPathName)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *lpPathName)
remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^   remove_file_on_destroy(const char *name)$/;"	f	class:boost::interprocess::remove_file_on_destroy	access:public	signature:(const char *name)
remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^class remove_file_on_destroy$/;"	c	namespace:boost::interprocess
remove_if_can_lock_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void remove_if_can_lock_file(const char *file_path)$/;"	f	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers	signature:(const char *file_path)
remove_old_gmem	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   static bool remove_old_gmem()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:()
remove_old_gmem	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   static bool remove_old_gmem()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public	signature:()
remove_old_robust_lock_files	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool remove_old_robust_lock_files()$/;"	f	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:private	signature:()
remove_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_reference$/;"	s	namespace:boost::interprocess::ipcdetail
remove_reference	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_reference<T&>$/;"	s	namespace:boost::interprocess::ipcdetail
remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   remove_shared_memory_on_destroy(const char *name)$/;"	f	class:boost::interprocess::remove_shared_memory_on_destroy	access:public	signature:(const char *name)
remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^class remove_shared_memory_on_destroy$/;"	c	namespace:boost::interprocess
remove_volatile	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_volatile$/;"	s	namespace:boost::interprocess::ipcdetail
remove_volatile	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct remove_volatile<volatile T>$/;"	s	namespace:boost::interprocess::ipcdetail
ren	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   } ren;$/;"	m	union:boost::interprocess::winapi::ntquery_mem_t	typeref:struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
ren_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   struct ren_t$/;"	s	union:boost::interprocess::winapi::ntquery_mem_t	access:public
reserve	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   void reserve(typename segment_manager_base::size_type n)$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:(typename segment_manager_base::size_type n)
reserve	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   void reserve(typename MapConfig::segment_manager_base::size_type)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(typename MapConfig::segment_manager_base::size_type)
reserve	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   void reserve(size_type new_n)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(size_type new_n)
reserve	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   void reserve(typename segment_manager_base::size_type)$/;"	f	class:boost::interprocess::map_index	access:public	signature:(typename segment_manager_base::size_type)
reserve	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   void reserve(typename segment_manager_base::size_type n)$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:(typename segment_manager_base::size_type n)
reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size)$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(typename vector_type::size_type size)
reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size)$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(typename vector_type::size_type size)
reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size)$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(typename vector_type::size_type size)
reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size)$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(typename vector_type::size_type size)
reserve_named_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void reserve_named_objects(size_type num)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type num)
reserve_named_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   void reserve_named_objects(size_type num)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(size_type num)
reserve_unique_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void reserve_unique_objects(size_type num)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(size_type num)
reserve_unique_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   void reserve_unique_objects(size_type num)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(size_type num)
reset	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void reset(const pointer &p = 0) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p = 0)
reset	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void reset(const pointer &p, const Deleter &d) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p, const Deleter &d)
reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset(const Pointer &p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const Pointer &p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())
reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset(shared_ptr<Y, VoidAllocator, Deleter> const & r, const pointer &p)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, const pointer &p)
reset	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void reset() \/\/ never throws in 1.30+$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:()
result_type	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef std::pair<void *, size_type>                  result_type;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
result_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef segment_manager_iterator_value_adaptor<Iterator, intrusive> result_type;$/;"	t	struct:boost::interprocess::ipcdetail::segment_manager_iterator_transform	access:public
ret_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void *ret_ptr;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::fini_atomic_func	access:private
ret_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      void *ret_ptr;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::init_atomic_func	access:private
retry	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      bool retry() const { return retry_with_new_map; }$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:() const
retry	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      bool retry() const { return retry_with_new_map; }$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:public	signature:() const
retry_with_new_map	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      bool retry_with_new_map;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:private
retry_with_new_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      const bool retry_with_new_map;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::lock_file_logic	access:private
rmutex	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::mutex_family::recursive_mutex_type   rmutex;$/;"	t	class:boost::interprocess::segment_manager	access:private
robust_check	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool robust_check();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private	signature:()
robust_check	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::robust_check()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
robust_emulation_helpers	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^namespace robust_emulation_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
robust_emulation_helpers	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^namespace robust_emulation_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
robust_emulation_helpers	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^namespace robust_emulation_helpers {$/;"	n	namespace:boost::interprocess::ipcdetail
robust_lock_path	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void robust_lock_path(std::string &s)$/;"	f	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers	signature:(std::string &s)
robust_lock_prefix	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline const char *robust_lock_prefix()$/;"	f	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers	signature:()
robust_lock_subdir_path	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline const char *robust_lock_subdir_path()$/;"	f	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers	signature:()
robust_mutex_lock_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   robust_mutex_lock_file()$/;"	f	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:public	signature:()
robust_mutex_lock_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^class robust_mutex_lock_file$/;"	c	namespace:boost::interprocess::ipcdetail::robust_emulation_helpers
robust_spin_mutex	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   robust_spin_mutex();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
robust_spin_mutex	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^class robust_spin_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
robust_spin_mutex	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline robust_spin_mutex<Mutex>::robust_spin_mutex()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
round_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static std::size_t round_size(std::size_t orig_size)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t orig_size)
rtl_init_empty_unicode_string	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void rtl_init_empty_unicode_string(unicode_string_t *ucStr, wchar_t *buf, unsigned short bufSize)$/;"	f	namespace:boost::interprocess::winapi	signature:(unicode_string_t *ucStr, wchar_t *buf, unsigned short bufSize)
s_groups	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment<Mutex>::s_groups;$/;"	m	class:boost::interprocess::flat_map_intersegment
s_groups	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static segment_groups_t s_groups;$/;"	m	struct:boost::interprocess::flat_map_intersegment	access:private
s_map	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment<Mutex>::s_map;$/;"	m	class:boost::interprocess::flat_map_intersegment
s_map	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static mappings_t       s_map;$/;"	m	struct:boost::interprocess::flat_map_intersegment	access:private
sa	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_security_attributes sa;$/;"	m	class:boost::interprocess::winapi::interprocess_all_access_security	access:private
sched_yield	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void sched_yield()$/;"	f	namespace:boost::interprocess::winapi	signature:()
scop	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(BOOST_RV_REF(scoped_lock<T>) scop$/;"	m	class:boost::interprocess::sharable_lock	access:public
scop	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(BOOST_RV_REF(scoped_lock<T>) scop$/;"	m	class:boost::interprocess::upgradable_lock	access:public
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   explicit scoped_lock(mutex_type& m)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m)
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, defer_lock_type)
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^class scoped_lock$/;"	c	namespace:boost::interprocess
scoped_lock_t	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   typedef scoped_lock<interprocess_mutex> scoped_lock_t;$/;"	t	class:boost::interprocess::interprocess_sharable_mutex	access:private
scoped_lock_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   typedef scoped_lock<interprocess_mutex> scoped_lock_t;$/;"	t	class:boost::interprocess::interprocess_upgradable_mutex	access:private
scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   explicit scoped_ptr(const pointer &p = 0, const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p = 0, const Deleter &d = Deleter())
scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   scoped_ptr(scoped_ptr const &);$/;"	p	class:boost::interprocess::scoped_ptr	access:private	signature:(scoped_ptr const &)
scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^class scoped_ptr$/;"	c	namespace:boost::interprocess	inherits:Deleter
scoped_ptr_dealloc_functor	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   scoped_ptr_dealloc_functor(Allocator& a)$/;"	f	struct:boost::interprocess::ipcdetail::scoped_ptr_dealloc_functor	access:public	signature:(Allocator& a)
scoped_ptr_dealloc_functor	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^struct scoped_ptr_dealloc_functor$/;"	s	namespace:boost::interprocess::ipcdetail
sd	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_security_descriptor sd;$/;"	m	class:boost::interprocess::winapi::interprocess_all_access_security	access:private
second_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::second_type second_type;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
section_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_all_access         = standard_rights_required |$/;"	m	namespace:boost::interprocess::winapi
section_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^  unsigned long   section_attributes;$/;"	m	struct:boost::interprocess::winapi::interprocess_section_basic_information	access:public
section_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   section_basic_information,$/;"	e	enum:boost::interprocess::winapi::section_information_class
section_extend_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_extend_size        = 0x0010;$/;"	m	namespace:boost::interprocess::winapi
section_image_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   section_image_information$/;"	e	enum:boost::interprocess::winapi::section_information_class
section_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum section_information_class$/;"	g	namespace:boost::interprocess::winapi
section_map_execute	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_execute        = 0x0008;$/;"	m	namespace:boost::interprocess::winapi
section_map_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_read           = 0x0004;$/;"	m	namespace:boost::interprocess::winapi
section_map_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_write          = 0x0002;$/;"	m	namespace:boost::interprocess::winapi
section_query	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_query              = 0x0001;$/;"	m	namespace:boost::interprocess::winapi
section_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^  __int64         section_size;$/;"	m	struct:boost::interprocess::winapi::interprocess_section_basic_information	access:public
security_descriptor_revision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long security_descriptor_revision = 1;$/;"	m	namespace:boost::interprocess::winapi
security_error	/usr/include/boost/interprocess/errors.hpp	/^   security_error,   \/\/ includes access rights, permissions failures$/;"	e	enum:boost::interprocess::error_code_t
seekoff	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual pos_type seekoff(off_type off, std::ios_base::seekdir dir,$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(off_type off, std::ios_base::seekdir dir, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
seekoff	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual pos_type seekoff(off_type off, std::ios_base::seekdir dir,$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(off_type off, std::ios_base::seekdir dir, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
seekpos	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual pos_type seekpos(pos_type pos, std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(pos_type pos, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
seekpos	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual pos_type seekpos(pos_type pos, std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(pos_type pos, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
segment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t segment  :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
segment_data	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      struct segment_data$/;"	s	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
segment_group_id	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef segment_group_t*      segment_group_id;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:public
segment_group_id	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef typename void_pointer::segment_group_id       segment_group_id;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
segment_group_id	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef typename void_pointer::segment_group_id       segment_group_id;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
segment_group_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_group_t(multi_segment_services &ms_services)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(multi_segment_services &ms_services)
segment_group_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   class segment_group_t$/;"	c	struct:boost::interprocess::flat_map_intersegment	access:private
segment_groups_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef set<segment_group_t>  segment_groups_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:private
segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_info_t()$/;"	f	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public	signature:()
segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct segment_info_t$/;"	s	struct:boost::interprocess::flat_map_intersegment	access:private
segment_manager	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
segment_manager	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::allocator	access:public
segment_manager	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   typedef SegmentManager              segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public
segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      segment_manager                           segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public
segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::segment_manager            segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::cache_impl	access:public
segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::segment_manager            segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
segment_manager	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   typedef SegmentManager              segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::private_node_pool	access:public
segment_manager	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
segment_manager	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
segment_manager	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
segment_manager	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      <CharType, MemoryAlgorithm, IndexType>::type    segment_manager;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   explicit segment_manager(size_type segment_size)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(size_type segment_size)
segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager();$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:()
segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager(const segment_manager &);$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:(const segment_manager &)
segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^class segment_manager$/;"	c	namespace:boost::interprocess	inherits:segment_manager_base
segment_manager_base	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^      <MemoryAlgorithm>::type                            segment_manager_base;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
segment_manager_base	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^      segment_manager_base                   segment_manager_base;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
segment_manager_base	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^      segment_manager_base          segment_manager_base;$/;"	t	class:boost::interprocess::flat_map_index	access:private
segment_manager_base	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      MapConfig::segment_manager_base                          segment_manager_base;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
segment_manager_base	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      MapConfig::segment_manager_base                 segment_manager_base;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
segment_manager_base	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      segment_manager_base             segment_manager_base;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
segment_manager_base	/usr/include/boost/interprocess/indexes/map_index.hpp	/^      segment_manager_base          segment_manager_base;$/;"	t	class:boost::interprocess::map_index	access:private
segment_manager_base	/usr/include/boost/interprocess/indexes/null_index.hpp	/^      segment_manager_base    segment_manager_base;$/;"	t	class:boost::interprocess::null_index	access:private
segment_manager_base	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^      MapConfig::segment_manager_base     segment_manager_base;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
segment_manager_base	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager_base(size_type sz, size_type reserved_bytes)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(size_type sz, size_type reserved_bytes)
segment_manager_base	/usr/include/boost/interprocess/segment_manager.hpp	/^class segment_manager_base$/;"	c	namespace:boost::interprocess	inherits:MemoryAlgorithm
segment_manager_base_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct segment_manager_base_type$/;"	s	namespace:boost::interprocess::ipcdetail
segment_manager_base_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm>   segment_manager_base_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
segment_manager_base_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm> segment_manager_base_type;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
segment_manager_iterator_transform	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct segment_manager_iterator_transform$/;"	s	namespace:boost::interprocess::ipcdetail	inherits:std::unary_function
segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   segment_manager_iterator_value_adaptor(const typename Iterator::value_type &val)$/;"	f	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public	signature:(const typename Iterator::value_type &val)
segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class segment_manager_iterator_value_adaptor$/;"	c	namespace:boost::interprocess::ipcdetail
segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class segment_manager_iterator_value_adaptor<Iterator, false>$/;"	c	namespace:boost::interprocess::ipcdetail
segment_manager_pointer	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^         rebind_pointer<SegmentManager>::type                segment_manager_pointer;$/;"	t	class:boost::interprocess::deleter	access:private
segment_manager_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^struct segment_manager_type$/;"	s	namespace:boost::interprocess::ipcdetail
segmented	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segmented_addressing segmented;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
segmented_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct segmented_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
select1st	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct select1st$/;"	s	namespace:boost::interprocess::ipcdetail
self_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      <Version, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>   self_t;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
self_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef allocator<T, SegmentManager>   self_t;$/;"	t	class:boost::interprocess::allocator	access:private
self_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      <Version, T, SegmentManager, NodesPerBlock>   self_t;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
self_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      , MaxFreeBlocks, OverheadPercent>                  self_t;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:private
self_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      < Version, T, SegmentManager, NodesPerBlock>       self_t;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:private
self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef flat_map_intersegment<Mutex>   self_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:public
self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef intersegment_base  self_t;$/;"	t	struct:boost::interprocess::intersegment_base	access:public
self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef intersegment_ptr<T>                  self_t;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
self_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^               <CharType, MemoryAlgorithm, IndexType, Offset> self_t;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:private
self_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^               <CharType, MemoryAlgorithm, IndexType>    self_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
self_t	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef CtorNArg<T, is_iterator, Args...> self_t;$/;"	t	struct:boost::interprocess::ipcdetail::CtorNArg	access:public
self_t	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef offset_ptr<PointedType, DifferenceType, OffsetType, OffsetAlignment>   self_t;$/;"	t	class:boost::interprocess::offset_ptr	access:private
sem_count_t	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      typedef __int64 sem_count_t;$/;"	t	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:private
sem_count_t	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      typedef __int64 sem_count_t;$/;"	t	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public
sem_counts	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      mutable sem_count_t sem_counts [2];$/;"	m	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:private
sem_error	/usr/include/boost/interprocess/errors.hpp	/^   sem_error,$/;"	e	enum:boost::interprocess::error_code_t
semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   interprocess_semaphore *semaphore() const$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private	signature:() const
semaphore_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long semaphore_all_access = (0x000F0000L)|(0x00100000L)|0x3;$/;"	m	namespace:boost::interprocess::winapi
semaphore_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   semaphore_basic_information = 0$/;"	e	enum:boost::interprocess::winapi::semaphore_information_class
semaphore_close	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_close(sem_t *handle)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle)
semaphore_destroy	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_destroy(sem_t *handle)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle)
semaphore_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum semaphore_information_class {$/;"	g	namespace:boost::interprocess::winapi
semaphore_init	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_init(sem_t *handle, unsigned int initialCount)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle, unsigned int initialCount)
semaphore_open	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_open$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *&handle, create_enum_t type, const char *origname, unsigned int count = 0, const permissions &perm = permissions())
semaphore_post	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_post(sem_t *handle)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle)
semaphore_timed_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_timed_wait(sem_t *handle, const boost::posix_time::ptime &abs_time)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle, const boost::posix_time::ptime &abs_time)
semaphore_try_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_try_wait(sem_t *handle)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle)
semaphore_type	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   typedef typename ConditionMembers::semaphore_type  semaphore_type;$/;"	t	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private
semaphore_type	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^      typedef windows_semaphore  semaphore_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_condition::condition_data	access:public
semaphore_type	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      typedef winapi_semaphore_wrapper semaphore_type;$/;"	t	struct:boost::interprocess::ipcdetail::windows_named_condition_any::condition_data	access:public
semaphore_unlink	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_unlink(const char *semname)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *semname)
semaphore_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_wait(sem_t *handle)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(sem_t *handle)
send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void send (const void *buffer,     size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(const void *buffer, size_type buffer_size, unsigned int priority)
send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline void message_queue_t<VoidPointer>::send$/;"	f	class:boost::interprocess::message_queue_t	signature:(const void *buffer, size_type buffer_size, unsigned int priority)
set_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static void set_bits(pointer &n, std::size_t b)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(pointer &n, std::size_t b)
set_default	/usr/include/boost/interprocess/permissions.hpp	/^   void set_default()$/;"	f	class:boost::interprocess::permissions	access:public	signature:()
set_end_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int set_end_of_file(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
set_file_pointer	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool set_file_pointer(file_handle_t hnd, offset_t off, file_pos_t pos)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, offset_t off, file_pos_t pos)
set_file_pointer_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool set_file_pointer_ex(void *handle, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)
set_from_other	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_other(const self_t &other)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &other)
set_from_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_pointer(const void *ptr)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const void *ptr)
set_from_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_pointer(const volatile void *ptr)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const volatile void *ptr)
set_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void set_group(segment_group_id group)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(segment_group_id group)
set_last_error	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void set_last_error(unsigned long err)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long err)
set_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void set_max_cached_nodes(size_type newmax)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(size_type newmax)
set_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void set_max_cached_nodes(size_type newmax)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public	signature:(size_type newmax)
set_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void set_min_segment_size(size_type min_segment_size)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(size_type min_segment_size)
set_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_mode(std::size_t mode)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t mode)
set_null	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_null()$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:()
set_permissions	/usr/include/boost/interprocess/permissions.hpp	/^   void set_permissions(os_permissions_type perm)$/;"	f	class:boost::interprocess::permissions	access:public	signature:(os_permissions_type perm)
set_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static void set_pointer(pointer &n, const pointer &p)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(pointer &n, const pointer &p)
set_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void set_pointer(const pointer &ptr)$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(const pointer &ptr)
set_pointers	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void set_pointers()$/;"	f	class:boost::interprocess::basic_bufferbuf	access:private	signature:()
set_unrestricted	/usr/include/boost/interprocess/permissions.hpp	/^   void set_unrestricted()$/;"	f	class:boost::interprocess::permissions	access:public	signature:()
shar	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
shar	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock( BOOST_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::upgradable_lock	access:public
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   explicit sharable_lock(mutex_type& m)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   explicit sharable_lock(scoped_lock<mutex_type>&);$/;"	p	class:boost::interprocess::sharable_lock	access:private	signature:(scoped_lock<mutex_type>&)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, defer_lock_type)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^class sharable_lock$/;"	c	namespace:boost::interprocess
shared_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   shared_adaptive_node_pool(SegmentManager *segment_mgnr)$/;"	f	class:boost::interprocess::ipcdetail::shared_adaptive_node_pool	access:public	signature:(SegmentManager *segment_mgnr)
shared_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^class shared_adaptive_node_pool$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:ipcdetail::shared_pool_impl
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(const pointer & ptr, shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(const pointer & ptr, shared_count<Y, VoidAllocator, Deleter> const & r)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(weak_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const & r)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count()$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:()
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(const Ptr &p, const VoidAllocator &a, Deleter d)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(const Ptr &p, const VoidAllocator &a, Deleter d)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(const shared_count &other_shared_count, const Ptr &p)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(const shared_count &other_shared_count, const Ptr &p)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(shared_count const & r)$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count const & r)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^class shared_count$/;"	c	namespace:boost::interprocess::ipcdetail
shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   shared_ptr<T const, A, D> shared_from_this() const$/;"	f	class:boost::interprocess::enable_shared_from_this	access:public	signature:() const
shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   shared_ptr<T, A, D> shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:public	signature:()
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object();$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:()
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(create_only_t, const char *name, mode_t mode, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(create_only_t, const char *name, mode_t mode, const permissions &perm = permissions())
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(open_only_t, const char *name, mode_t mode)
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(open_or_create_t, const char *name, mode_t mode, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(open_or_create_t, const char *name, mode_t mode, const permissions &perm = permissions())
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^class shared_memory_object$/;"	c	namespace:boost::interprocess
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline shared_memory_object::shared_memory_object()$/;"	f	class:boost::interprocess::shared_memory_object	signature:()
shared_memory_object_detail	/usr/include/boost/interprocess/shared_memory_object.hpp	/^namespace shared_memory_object_detail {$/;"	n	namespace:boost::interprocess
shared_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   shared_node_pool(SegmentManager *segment_mgnr)$/;"	f	class:boost::interprocess::ipcdetail::shared_node_pool	access:public	signature:(SegmentManager *segment_mgnr)
shared_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^class shared_node_pool$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:ipcdetail::shared_pool_impl
shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   shared_pool_impl(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:(segment_manager *segment_mngr)
shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class shared_pool_impl$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:private_node_allocator_t
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   explicit shared_ptr(const pointer&p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const pointer&p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   explicit shared_ptr(weak_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(weak_ptr<Y, VoidAllocator, Deleter> const & r)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(const shared_ptr &other, const pointer &p)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const shared_ptr &other, const pointer &p)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(const shared_ptr &r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const shared_ptr &r)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::const_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::const_cast_tag)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::dynamic_cast_tag)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::static_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, ipcdetail::static_cast_tag)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^class shared_ptr$/;"	c	namespace:boost::interprocess
shm_	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      managed_global_memory & shm_;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func	access:public
shm_name_	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      const char * const shm_name_;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func	access:public
shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:private	signature:()
shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition(const shm_named_condition &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:private	signature:(const shm_named_condition &)
shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(open_only_t open_only, const char *name)
shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   shm_named_condition(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^class shm_named_condition$/;"	c	namespace:boost::interprocess::ipcdetail
shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline shm_named_condition::shm_named_condition(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(create_only_t, const char *name, const permissions &perm)
shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline shm_named_condition::shm_named_condition(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(open_only_t, const char *name)
shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline shm_named_condition::shm_named_condition(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(open_or_create_t, const char *name, const permissions &perm)
shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private	signature:()
shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any(const shm_named_condition_any &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:private	signature:(const shm_named_condition_any &)
shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any(create_only_t create_only, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any(open_only_t open_only, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(open_only_t open_only, const char *name)
shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   shm_named_condition_any(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^class shm_named_condition_any$/;"	c	namespace:boost::interprocess::ipcdetail
shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private	signature:()
shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex(const shm_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:private	signature:(const shm_named_mutex &)
shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:(open_only_t open_only, const char *name)
shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   shm_named_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^class shm_named_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline shm_named_mutex::shm_named_mutex(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:(create_only_t, const char *name, const permissions &perm)
shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline shm_named_mutex::shm_named_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:(open_only_t, const char *name)
shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline shm_named_mutex::shm_named_mutex(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private	signature:()
shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex(const shm_named_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:private	signature:(const shm_named_recursive_mutex &)
shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex(create_only_t create_only, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:(create_only_t create_only, const char *name, const permissions &perm = permissions())
shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:(open_only_t open_only, const char *name)
shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   shm_named_recursive_mutex(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name, const permissions &perm = permissions())
shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^class shm_named_recursive_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline shm_named_recursive_mutex::shm_named_recursive_mutex(create_only_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:(create_only_t, const char *name, const permissions &perm)
shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline shm_named_recursive_mutex::shm_named_recursive_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:(open_only_t, const char *name)
shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline shm_named_recursive_mutex::shm_named_recursive_mutex(open_or_create_t, const char *name, const permissions &perm)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private	signature:()
shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore(const shm_named_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:private	signature:(const shm_named_semaphore &)
shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore(open_only_t, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:(open_only_t, const char *name)
shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   shm_named_semaphore(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^class shm_named_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline shm_named_semaphore::shm_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm)
shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline shm_named_semaphore::shm_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:(open_only_t, const char *name)
shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline shm_named_semaphore::shm_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm)
shmem_list_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef list<managed_impl> shmem_list_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
shmem_open_or_create	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^struct shmem_open_or_create$/;"	s	namespace:boost::interprocess::ipcdetail
shrink	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool shrink$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, void *ptr ,const size_type max_size, const size_type preferred_size ,size_type &received_size)
shrink_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static size_type shrink_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:( bucket_ptr buckets, size_type old_size , allocator_type &alloc, size_type new_size)
shrink_by	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool shrink_by(std::size_t bytes, bool from_back = true);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(std::size_t bytes, bool from_back = true)
shrink_by	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::shrink_by(std::size_t bytes, bool from_back)$/;"	f	class:boost::interprocess::mapped_region	signature:(std::size_t bytes, bool from_back)
shrink_in_place	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type shrink_in_place    = boost::container::shrink_in_place;$/;"	m	namespace:boost::interprocess
shrink_to_fit	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static bool shrink_to_fit(const char *filename)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(const char *filename)
shrink_to_fit	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:()
shrink_to_fit	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::iset_index	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::map_index	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   static bool shrink_to_fit(const char *filename)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(const char *filename)
shrink_to_fit	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   static bool shrink_to_fit(const char *shmname)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(const char *shmname)
shrink_to_fit	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void shrink_to_fit();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::shrink_to_fit()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
shrink_to_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void shrink_to_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::shrink_to_fit()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
shrink_to_fit	/usr/include/boost/interprocess/segment_manager.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
shrink_to_fit_indexes	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void shrink_to_fit_indexes()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
shrink_to_fit_indexes	/usr/include/boost/interprocess/segment_manager.hpp	/^   void shrink_to_fit_indexes()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
signal	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   static void signal(ConditionMembers &data, bool broadcast);$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:public	signature:(ConditionMembers &data, bool broadcast)
signal	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^inline void condition_algorithm_8a<ConditionMembers>::signal(ConditionMembers &data, bool broadcast)$/;"	f	class:boost::interprocess::ipcdetail::condition_algorithm_8a	signature:(ConditionMembers &data, bool broadcast)
signal	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   static void signal( ConditionAnyMembers &data, bool broadcast);$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:public	signature:( ConditionAnyMembers &data, bool broadcast)
signal	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^void condition_any_algorithm<ConditionAnyMembers>::signal(ConditionAnyMembers &data, bool broadcast)$/;"	f	class:boost::interprocess::ipcdetail::condition_any_algorithm	signature:(ConditionAnyMembers &data, bool broadcast)
simple_sem_op	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_op(int id, int value, bool undo = true)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id, int value, bool undo = true)
simple_sem_open_or_create	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_open_or_create(::key_t key, int initval, int &semid, int perm)$/;"	f	namespace:boost::interprocess::xsi	signature:(::key_t key, int initval, int &semid, int perm)
simple_sem_rm	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_rm(int id)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id)
simple_seq_fit	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^   simple_seq_fit(size_type segment_size, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::simple_seq_fit	access:public	signature:(size_type segment_size, size_type extra_hdr_bytes)
simple_seq_fit	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^class simple_seq_fit$/;"	c	namespace:boost::interprocess	inherits:ipcdetail::simple_seq_fit_impl
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl           (size_type size, size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type size, size_type extra_hdr_bytes)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:()
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(size_type size, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type size, size_type extra_hdr_bytes)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^class simple_seq_fit_impl$/;"	c	namespace:boost::interprocess::ipcdetail
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl           (size_type size, size_type extra_hdr_bytes);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(size_type size, size_type extra_hdr_bytes)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:()
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(size_type segment_size, size_type extra_hdr_bytes)$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(size_type segment_size, size_type extra_hdr_bytes)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^class simple_seq_fit_impl$/;"	c	namespace:boost::interprocess::ipcdetail
singleton_constructor	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void *singleton_constructor(ThreadSafeGlobalMap &map)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private	signature:(ThreadSafeGlobalMap &map)
singleton_constructor_t	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   typedef void*(singleton_constructor_t)(ThreadSafeGlobalMap &);$/;"	t	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
singleton_destructor	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void singleton_destructor(void *p, ThreadSafeGlobalMap &map)$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private	signature:(void *p, ThreadSafeGlobalMap &map)
singleton_destructor_t	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   typedef void (singleton_destructor_t)(void *, ThreadSafeGlobalMap &);$/;"	t	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:public
singleton_lock_file_path_	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      const char * const singleton_lock_file_path_;$/;"	m	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::gmem_erase_func	access:public
singleton_ref_count	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   volatile boost::uint32_t singleton_ref_count;$/;"	m	struct:boost::interprocess::ipcdetail::ref_count_ptr	access:public
size	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   size_type size(const pointer &p) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &p) const
size	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type size(const pointer &p) const$/;"	f	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public	signature:(const pointer &p) const
size	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   std::size_t size;$/;"	m	struct:boost::interprocess::ipcdetail::in_place_interface	access:public
size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^         std::size_t size;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_group_t::segment_data	access:public
size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t size;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   size(void *ptr) const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(void *ptr) const
size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   size_type size(void *ptr) const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(void *ptr) const
size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   size_type size(const void *ptr) const;$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:(const void *ptr) const
size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^simple_seq_fit_impl<MutexFamily, VoidPointer>::size(const void *ptr) const$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:(const void *ptr) const
size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   size(const void *ptr) const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *ptr) const
size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   size_type size(const void *ptr) const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(const void *ptr) const
size	/usr/include/boost/interprocess/segment_manager.hpp	/^   size_type size(const void *ptr) const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(const void *ptr) const
size_block_ctrl_compare	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct size_block_ctrl_compare$/;"	s	class:boost::interprocess::rbtree_best_fit	access:private
size_error	/usr/include/boost/interprocess/errors.hpp	/^   size_error,$/;"	e	enum:boost::interprocess::error_code_t
size_t_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t size_t_bits = (sizeof(void*)*CHAR_BIT == 32) ? 32 : 64;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
size_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef typename segment_manager::size_type           size_type;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
size_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename segment_manager::size_type               size_type;$/;"	t	class:boost::interprocess::allocator	access:public
size_type	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   typedef typename base_t::size_type size_type;$/;"	t	class:boost::interprocess::ipcdetail::cached_adaptive_pool_v1	access:public
size_type	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   typedef typename base_t::size_type size_type;$/;"	t	class:boost::interprocess::cached_node_allocator	access:public
size_type	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   typedef typename base_t::size_type size_type;$/;"	t	class:boost::interprocess::ipcdetail::cached_node_allocator_v1	access:public
size_type	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   typedef typename base_t::size_type  size_type;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_node_pool	access:public
size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^     size_type                                 size_type;$/;"	t	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public
size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::segment_manager::size_type    size_type;$/;"	t	class:boost::interprocess::ipcdetail::cache_impl	access:private
size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::size_type            size_type;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::size_type            size_type;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::size_type                    size_type;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
size_type	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   typedef typename base_t::size_type  size_type;$/;"	t	class:boost::interprocess::ipcdetail::private_node_pool	access:public
size_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef typename segment_manager::size_type           size_type;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
size_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef typename segment_manager::size_type           size_type;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
size_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef typename segment_manager::size_type           size_type;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
size_type	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_global_memory	access:public
size_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename BasicManagedMemoryImpl::size_type size_type;$/;"	t	class:boost::interprocess::ipcdetail::create_open_func	access:private
size_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename MemoryAlgorithm::size_type        size_type;$/;"	t	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public
size_type	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef typename base_t::size_type                   size_type;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
size_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef SizeType size_type;$/;"	t	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public
size_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type size_type;$/;"	t	struct:boost::interprocess::ipcdetail::index_key	access:public
size_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename first_type::size_type       size_type;$/;"	t	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:private
size_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::size_type                size_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
size_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type                  size_type;$/;"	t	class:boost::interprocess::ipcdetail::msg_hdr_t	access:private
size_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type            size_type;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
size_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type        size_type;$/;"	t	class:boost::interprocess::ipcdetail::msg_queue_initialization_func_t	access:public
size_type	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type        size_type;$/;"	t	class:boost::interprocess::message_queue_t	access:public
size_type	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_external_buffer	access:public
size_type	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_heap_memory	access:public
size_type	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:public
size_type	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:public
size_type	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:public
size_type	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   typedef typename base_t::size_type              size_type;$/;"	t	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public
size_type	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::size_type                 size_type;$/;"	t	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
size_type	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type size_type;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
size_type	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type size_type;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
size_type	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename boost::make_unsigned<difference_type>::type     size_type;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
size_type	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^   typedef typename base_t::size_type                            size_type;$/;"	t	class:boost::interprocess::simple_seq_fit	access:public
size_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::size_type       size_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
size_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::size_type        size_type;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
sizeof	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT(sizeof(members_t) == 2*sizeof(std::size_t));$/;"	m	struct:boost::interprocess::intersegment_base	access:public
sizeof_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char sizeof_char() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value$/;"	s	namespace:boost::interprocess
sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<const void>$/;"	s	namespace:boost::interprocess
sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<const volatile void>$/;"	s	namespace:boost::interprocess
sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<void>$/;"	s	namespace:boost::interprocess
sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<volatile void>$/;"	s	namespace:boost::interprocess
sleep	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void sleep(unsigned long ms)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long ms)
slist_hook_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^      <bi::void_pointer<VoidPointer>, bi::link_mode<bi::normal_link> >::type slist_hook_t;$/;"	t	struct:boost::interprocess::ipcdetail::node_slist	access:public
sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base( sp_counted_base const & );$/;"	p	class:boost::interprocess::ipcdetail::sp_counted_base	access:private	signature:( sp_counted_base const & )
sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base(): use_count_( 1 ), weak_count_( 1 )$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^class sp_counted_base$/;"	c	namespace:boost::interprocess::ipcdetail
sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd( sp_counted_impl_pd const & );$/;"	p	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private	signature:( sp_counted_impl_pd const & )
sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd(const Ptr & p, const A &a, const D &d )$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:(const Ptr & p, const A &a, const D &d )
sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^class sp_counted_impl_pd$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:sp_counted_base,boost::container::allocator_traits::,portable_rebind_alloc::type,D
sp_enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^inline void sp_enable_shared_from_this$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(shared_count<T, VoidAllocator, Deleter> const & pn ,enable_shared_from_this<T, VoidAllocator, Deleter> *pe ,T *ptr)
sp_enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^inline void sp_enable_shared_from_this(shared_count<T, VoidAllocator, Deleter> const &, ...)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(shared_count<T, VoidAllocator, Deleter> const &, ...)
spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   spin_condition();$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:()
spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   spin_condition(const spin_condition &);$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:private	signature:(const spin_condition &)
spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^class spin_condition$/;"	c	namespace:boost::interprocess::ipcdetail
spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline spin_condition::spin_condition()$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:()
spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   spin_mutex();$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   spin_mutex(const spin_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:private	signature:(const spin_mutex &)
spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^class spin_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline spin_mutex::spin_mutex()$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:()
spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   spin_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   spin_recursive_mutex(const spin_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:private	signature:(const spin_recursive_mutex &)
spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^class spin_recursive_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline spin_recursive_mutex::spin_recursive_mutex()$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   spin_semaphore(const spin_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:private	signature:(const spin_semaphore &)
spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   spin_semaphore(unsigned int initialCount);$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:(unsigned int initialCount)
spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^class spin_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline spin_semaphore::spin_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:(unsigned int initialCount)
spin_threshold	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   static const unsigned int spin_threshold = 100u;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private
stamp	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^         std::string stamp;$/;"	m	struct:boost::interprocess::ipcdetail::windows_bootstamp	access:public
standard_rights_required	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long standard_rights_required   = 0x000F0000L;$/;"	m	namespace:boost::interprocess::winapi
state	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   volatile boost::uint32_t state;$/;"	m	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:private
static_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct static_cast_tag {};$/;"	s	namespace:boost::interprocess::ipcdetail
static_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> static_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
static_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static_pointer_cast(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::offset_ptr<T2, P2, O2, A2> & r)
static_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> static_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
sublang_default	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long sublang_default      = (unsigned long)0x01;$/;"	m	namespace:boost::interprocess::winapi
swap	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:friend	signature:(self_t &alloc1, self_t &alloc2)
swap	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::allocator	access:friend	signature:(self_t &alloc1, self_t &alloc2)
swap	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   friend void swap(cached_allocator_impl &alloc1, cached_allocator_impl &alloc2)$/;"	f	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:friend	signature:(cached_allocator_impl &alloc1, cached_allocator_impl &alloc2)
swap	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void swap(cache_impl &other)$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:(cache_impl &other)
swap	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:friend	signature:(self_t &alloc1, self_t &alloc2)
swap	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   friend void swap(self_t &alloc1,self_t &alloc2)$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:friend	signature:(self_t &alloc1,self_t &alloc2)
swap	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   friend void swap(self_t &alloc1,self_t &alloc2)$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:friend	signature:(self_t &alloc1,self_t &alloc2)
swap	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void swap(file_wrapper &other);$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(file_wrapper &other)
swap	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::swap(file_wrapper &other)$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:(file_wrapper &other)
swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void swap(intersegment_ptr &other)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(intersegment_ptr &other)
swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void swap(self_t &other)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(self_t &other)
swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^void swap (boost::interprocess::intersegment_ptr<T> &pt,$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::intersegment_ptr<T> &pt, boost::interprocess::intersegment_ptr<T> &pt2)
swap	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void swap(basic_managed_memory_impl &other)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:(basic_managed_memory_impl &other)
swap	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   friend void swap(managed_open_or_create_impl &left, managed_open_or_create_impl &right)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:friend	signature:(managed_open_or_create_impl &left, managed_open_or_create_impl &right)
swap	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void swap(managed_open_or_create_impl &other)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:(managed_open_or_create_impl &other)
swap	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   void swap(xsi_shared_memory_device &other);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(xsi_shared_memory_device &other)
swap	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline void xsi_shared_memory_device::swap(xsi_shared_memory_device &other)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(xsi_shared_memory_device &other)
swap	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^   void swap(xsi_shared_memory_file_wrapper &other)$/;"	f	class:boost::interprocess::xsi_shared_memory_file_wrapper	access:public	signature:(xsi_shared_memory_file_wrapper &other)
swap	/usr/include/boost/interprocess/file_mapping.hpp	/^   void swap(file_mapping &other);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(file_mapping &other)
swap	/usr/include/boost/interprocess/file_mapping.hpp	/^inline void file_mapping::swap(file_mapping &other)$/;"	f	class:boost::interprocess::file_mapping	signature:(file_mapping &other)
swap	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   void swap(basic_managed_external_buffer &other)$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(basic_managed_external_buffer &other)
swap	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   void swap(basic_managed_heap_memory &other)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(basic_managed_heap_memory &other)
swap	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   void swap(basic_managed_mapped_file &other)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(basic_managed_mapped_file &other)
swap	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   void swap(basic_managed_shared_memory &other)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(basic_managed_shared_memory &other)
swap	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   void swap(basic_managed_windows_shared_memory &other)$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(basic_managed_windows_shared_memory &other)
swap	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   void swap(basic_managed_xsi_shared_memory &other)$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:(basic_managed_xsi_shared_memory &other)
swap	/usr/include/boost/interprocess/mapped_region.hpp	/^   void swap(mapped_region &other);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(mapped_region &other)
swap	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::swap(mapped_region &other)$/;"	f	class:boost::interprocess::mapped_region	signature:(mapped_region &other)
swap	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void swap(mapped_region &x, mapped_region &y)$/;"	f	namespace:boost::interprocess	signature:(mapped_region &x, mapped_region &y)
swap	/usr/include/boost/interprocess/offset_ptr.hpp	/^   friend void swap(offset_ptr &left, offset_ptr &right)$/;"	f	class:boost::interprocess::offset_ptr	access:friend	signature:(offset_ptr &left, offset_ptr &right)
swap	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void swap(shared_memory_object &moved);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(shared_memory_object &moved)
swap	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::swap(shared_memory_object &other)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(shared_memory_object &other)
swap	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void swap(shared_count & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:(shared_count & r)
swap	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void swap(weak_count & r) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count & r)
swap	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   void swap(intrusive_ptr & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr & rhs)
swap	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^void swap(intrusive_ptr<T, VP> & lhs,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> & lhs, intrusive_ptr<T, VP> & rhs)
swap	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void swap(scoped_ptr & b) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(scoped_ptr & b)
swap	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^void swap(scoped_ptr<T, D> & a, scoped_ptr<T, D> & b)$/;"	f	namespace:boost::interprocess	signature:(scoped_ptr<T, D> & a, scoped_ptr<T, D> & b)
swap	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void swap(shared_ptr<T, VoidAllocator, Deleter> & other) \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<T, VoidAllocator, Deleter> & other)
swap	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^void swap(shared_ptr<T, VoidAllocator, Deleter> & a, shared_ptr<T, VoidAllocator, Deleter> & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> & a, shared_ptr<T, VoidAllocator, Deleter> & b)
swap	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y)$/;"	f	namespace:boost::interprocess	signature:(unique_ptr<T, D>& x, unique_ptr<T, D>& y)
swap	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void swap(this_type & other) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(this_type & other)
swap	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^void swap(weak_ptr<T, A, D> & a, weak_ptr<T, A, D> & b)$/;"	f	namespace:boost::interprocess	signature:(weak_ptr<T, A, D> & a, weak_ptr<T, A, D> & b)
swap	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void swap(file_lock &other)$/;"	f	class:boost::interprocess::file_lock	access:public	signature:(file_lock &other)
swap	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void swap( scoped_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:( scoped_lock<mutex_type> &other)
swap	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void swap(sharable_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(sharable_lock<mutex_type> &other)
swap	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void swap(upgradable_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(upgradable_lock<mutex_type> &other)
swap	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void swap(winapi_mutex_wrapper &other)$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:(winapi_mutex_wrapper &other)
swap	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void swap(winapi_semaphore_wrapper &other)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:(winapi_semaphore_wrapper &other)
swap	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void swap(xsi_named_mutex &other);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:(xsi_named_mutex &other)
swap	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::swap(xsi_named_mutex &other)$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:(xsi_named_mutex &other)
swap	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void swap(windows_shared_memory &other);$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:(windows_shared_memory &other)
swap	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline void windows_shared_memory::swap(windows_shared_memory &other)$/;"	f	class:boost::interprocess::windows_shared_memory	signature:(windows_shared_memory &other)
swap	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   void swap(xsi_shared_memory &other);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:(xsi_shared_memory &other)
swap	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline void xsi_shared_memory::swap(xsi_shared_memory &other)$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(xsi_shared_memory &other)
swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(vector_type &vect)
swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(vector_type &vect)
swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(vector_type &vect)
swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(vector_type &vect)
sync_handles	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^class sync_handles$/;"	c	namespace:boost::interprocess::ipcdetail
sync_id	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   explicit sync_id(internal_type val, const void *map_addr)$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:public	signature:(internal_type val, const void *map_addr)
sync_id	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   sync_id(const void *map_addr)$/;"	f	class:boost::interprocess::ipcdetail::sync_id	access:public	signature:(const void *map_addr)
sync_id	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^class sync_id$/;"	c	namespace:boost::interprocess::ipcdetail
sys_ec	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t sys_ec;$/;"	m	struct:boost::interprocess::ec_xlate	access:public
system_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_basic_information = 0,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_error	/usr/include/boost/interprocess/errors.hpp	/^   system_error,     \/\/ system generated error; if possible, is translated$/;"	e	enum:boost::interprocess::error_code_t
system_error_code	/usr/include/boost/interprocess/errors.hpp	/^inline int system_error_code() \/\/ artifact of POSIX and WINDOWS error reporting$/;"	f	namespace:boost::interprocess	signature:()
system_exception_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_exception_information = 33,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct system_info {$/;"	s	namespace:boost::interprocess::winapi
system_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum system_information_class {$/;"	g	namespace:boost::interprocess::winapi
system_interrupt_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_interrupt_information = 23,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_lookaside_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_lookaside_information = 45$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_performance_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_performance_information = 2,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_process_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_process_information = 5,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_processor_performance_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_processor_performance_information = 8,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_registry_quota_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_registry_quota_information = 37,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_time_of_day_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_time_of_day_information = 3,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_timeofday_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^union system_timeofday_information$/;"	u	namespace:boost::interprocess::winapi
systemwide_thread_id_copy	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void systemwide_thread_id_copy$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const volatile OS_systemwide_thread_id_t &from, volatile OS_systemwide_thread_id_t &to)
t	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T &t;$/;"	m	struct:boost::interprocess::ipcdetail::ref_holder	access:public
t	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static T *t;$/;"	m	struct:boost::interprocess::ipcdetail::is_same	access:public
t_	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            T &t_;$/;"	m	struct:boost::interprocess::ipcdetail::ref_holder	access:public
t_	/usr/include/boost/interprocess/detail/preprocessor.hpp	/^            const T &t_;$/;"	m	struct:boost::interprocess::ipcdetail::ref_holder	access:public
tail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   const inherited& tail() const { return *this; }$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:() const
tail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   inherited& tail()             { return *this; }$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:()
take_ownership	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   static void take_ownership(T &t)$/;"	f	class:boost::interprocess::ipcdetail::robust_emulation_helpers::mutex_traits	access:public	signature:(T &t)
take_ownership	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      void take_ownership(){ m_mutex.take_ownership(); }$/;"	f	class:boost::interprocess::interprocess_mutex	access:private	signature:()
take_ownership	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^      void take_ownership(){ mutex.take_ownership(); }$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	access:private	signature:()
take_ownership	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   void take_ownership(){};$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
take_ownership	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   void take_ownership();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
take_ownership	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline void spin_recursive_mutex::take_ownership()$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
take_ownership	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   void take_ownership(){};$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
test	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^template <class U> static char test(typename U::pointer* = 0);$/;"	p	namespace:boost::interprocess::ipcdetail::pointer_type_imp	signature:(typename U::pointer* = 0)
test	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^template <class U> static two  test(...);$/;"	p	namespace:boost::interprocess::ipcdetail::pointer_type_imp	signature:(....)
this_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^            < this_type >::type              this_allocator;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
this_module_map_initialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static volatile boost::uint32_t this_module_map_initialized;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private
this_module_map_initialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^volatile boost::uint32_t intermodule_singleton_common<ThreadSafeGlobalMap>::this_module_map_initialized;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common
this_module_singleton_count	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static volatile boost::uint32_t this_module_singleton_count;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common	access:private
this_module_singleton_count	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^volatile boost::uint32_t intermodule_singleton_common<ThreadSafeGlobalMap>::this_module_singleton_count;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_common
this_module_singleton_initialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static volatile boost::uint32_t   this_module_singleton_initialized;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
this_module_singleton_initialized	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^volatile boost::uint32_t intermodule_singleton_impl<C, L, P, ThreadSafeGlobalMap>::this_module_singleton_initialized = 0;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl
this_module_singleton_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^   static void*                      this_module_singleton_ptr;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl	access:private
this_module_singleton_ptr	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^void *intermodule_singleton_impl<C, L, P, ThreadSafeGlobalMap>::this_module_singleton_ptr = 0;$/;"	m	class:boost::interprocess::ipcdetail::intermodule_singleton_impl
this_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename this_allocator::pointer  this_pointer;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
this_type	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef memory_algorithm_common<MemoryAlgorithm>            this_type;$/;"	t	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
this_type	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef sp_counted_impl_pd<A, D>          this_type;$/;"	t	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:private
this_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef intrusive_ptr this_type;$/;"	t	class:boost::interprocess::intrusive_ptr	access:private
this_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef scoped_ptr<T, Deleter> this_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:private
this_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef shared_ptr<T, VoidAllocator, Deleter> this_type;$/;"	t	class:boost::interprocess::shared_ptr	access:private
this_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef weak_ptr<T, A, D> this_type;$/;"	t	class:boost::interprocess::weak_ptr	access:private
this_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef scoped_lock<Mutex> this_type;$/;"	t	class:boost::interprocess::scoped_lock	access:private
this_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef sharable_lock<SharableMutex> this_type;$/;"	t	class:boost::interprocess::sharable_lock	access:private
this_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef upgradable_lock<UpgradableMutex> this_type;$/;"	t	class:boost::interprocess::upgradable_lock	access:private
thread_safe_global_map_dependant	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^struct thread_safe_global_map_dependant<managed_global_memory>$/;"	s	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers
thread_safe_global_map_dependant	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^struct thread_safe_global_map_dependant<windows_semaphore_based_map>$/;"	s	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers
thread_sleep	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void thread_sleep(unsigned int ms)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(unsigned int ms)
thread_yield	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void thread_yield()$/;"	f	namespace:boost::interprocess::ipcdetail	signature:()
throw_if_error	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   void throw_if_error(void *hnd_val)$/;"	f	class:boost::interprocess::ipcdetail::sync_handles	access:private	signature:(void *hnd_val)
tie_forward	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^tuple<Values&&...> tie_forward(Values&&... values)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(Values&&.... values)
timed	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue_t::block_t
timed_acquire_file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_acquire_file_lock$/;"	f	class:boost::interprocess::file_lock	access:private	signature:(file_handle_t hnd, bool &acquired, const boost::posix_time::ptime &abs_time)
timed_acquire_file_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_acquire_file_lock_sharable$/;"	f	class:boost::interprocess::file_lock	access:private	signature:(file_handle_t hnd, bool &acquired, const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::timed_lock$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::file_lock	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline bool interprocess_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline bool interprocess_sharable_mutex::timed_lock$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline bool named_sharable_mutex::timed_lock$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
timed_lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline bool posix_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline bool posix_named_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline bool posix_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
timed_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
timed_lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline bool shm_named_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline bool shm_named_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline bool spin_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline bool spin_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
timed_lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline bool windows_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline bool windows_named_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::timed_lock_sharable(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::file_lock	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline bool interprocess_sharable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline bool named_sharable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
timed_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock_upgradable$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_upgradable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_upgradable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool timed_receive (void *buffer,           size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(void *buffer, size_type buffer_size, size_type &recvd_size,unsigned int &priority, const boost::posix_time::ptime &abs_time)
timed_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t<VoidPointer>::timed_receive(void *buffer,            size_type buffer_size,$/;"	f	class:boost::interprocess::message_queue_t	signature:(void *buffer, size_type buffer_size, size_type &recvd_size, unsigned int &priority, const boost::posix_time::ptime &abs_time)
timed_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool timed_send    (const void *buffer,     size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(const void *buffer, size_type buffer_size, unsigned int priority, const boost::posix_time::ptime& abs_time)
timed_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue_t<VoidPointer>::timed_send$/;"	f	class:boost::interprocess::message_queue_t	signature:(const void *buffer, size_type buffer_size ,unsigned int priority, const boost::posix_time::ptime &abs_time)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_unlock_upgradable_and_lock$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_unlock_upgradable_and_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_unlock_upgradable_and_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::timed_wait$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::timed_wait$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_semaphore	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline bool shm_named_condition::timed_wait$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline bool shm_named_condition::timed_wait$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline bool shm_named_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline bool spin_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline bool windows_named_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline bool windows_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:(const boost::posix_time::ptime &abs_time)
timeout_when_locking_error	/usr/include/boost/interprocess/errors.hpp	/^   timeout_when_locking_error,$/;"	e	enum:boost::interprocess::error_code_t
timeout_when_waiting_error	/usr/include/boost/interprocess/errors.hpp	/^   timeout_when_waiting_error,$/;"	e	enum:boost::interprocess::error_code_t
tmp_filename	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void tmp_filename(const char *filename, std::string &tmp_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *filename, std::string &tmp_name)
tmp_folder	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void tmp_folder(std::string &tmp_name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(std::string &tmp_name)
to_first_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static Header *to_first_header(block_header<size_type> *bheader)$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:(block_header<size_type> *bheader)
to_raw_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void *to_raw_pointer() const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:() const
to_raw_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^T * to_raw_pointer(boost::interprocess::intersegment_ptr<T> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::intersegment_ptr<T> const & p)
to_raw_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^T * to_raw_pointer(boost::interprocess::intersegment_ptr<T> const & p)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::intersegment_ptr<T> const & p)
to_raw_pointer	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline T* to_raw_pointer(T* p)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(T* p)
to_raw_pointer	/usr/include/boost/interprocess/detail/utilities.hpp	/^to_raw_pointer(const Pointer &p)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const Pointer &p)
to_raw_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline T * to_raw_pointer(boost::interprocess::offset_ptr<T, P, O, A> const & p)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<T, P, O, A> const & p)
to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   const pointer &to_raw_pointer() const$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:() const
to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer &to_raw_pointer()$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:()
to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   to_raw_pointer(intrusive_ptr<T, VP> p)$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> p)
to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^inline T *to_raw_pointer(boost::interprocess::intrusive_ptr<T, VP> p)$/;"	f	namespace:boost	signature:(boost::interprocess::intrusive_ptr<T, VP> p)
to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^T *to_raw_pointer(boost::interprocess::scoped_ptr<T, D> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::scoped_ptr<T, D> const & p)
to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^typename scoped_ptr<T, D>::pointer to_raw_pointer(scoped_ptr<T, D> const & p)$/;"	f	namespace:boost::interprocess	signature:(scoped_ptr<T, D> const & p)
to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^T * to_raw_pointer(boost::interprocess::shared_ptr<T, VoidAllocator, Deleter> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::shared_ptr<T, VoidAllocator, Deleter> const & p)
to_raw_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^T * to_raw_pointer(shared_ptr<T, VoidAllocator, Deleter> const & p)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & p)
top_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_header &top_msg()$/;"	f	class:boost::interprocess::ipcdetail::mq_hdr_t	access:public	signature:()
total_size	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type total_size() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
total_size_with_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type total_size_with_header() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef CharTraits                                    traits_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharTraits                        traits_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   explicit transform_iterator()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   explicit transform_iterator(const Iterator &it, const UnaryFunction &f = UnaryFunction())$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(const Iterator &it, const UnaryFunction &f = UnaryFunction())
transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^class transform_iterator$/;"	c	namespace:boost::interprocess	inherits:UnaryFunction,std::iterator
trigger	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static T trigger();$/;"	p	class:boost::interprocess::ipcdetail::is_convertible	access:private	signature:()
true_	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef bool_<true>        true_;$/;"	t	namespace:boost::interprocess::ipcdetail
true_t	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef char true_t;$/;"	t	class:boost::interprocess::ipcdetail::is_convertible	access:private
true_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef true_  true_type;$/;"	t	namespace:boost::interprocess::ipcdetail
truncate	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void truncate(offset_t length);$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:(offset_t length)
truncate	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::truncate(offset_t length)$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:(offset_t length)
truncate	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void truncate(offset_t length);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(offset_t length)
truncate	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::truncate(offset_t length)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(offset_t length)
truncate_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void truncate_device(DeviceAbstraction &, offset_t, false_)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &, offset_t, false_)
truncate_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void truncate_device(DeviceAbstraction &dev, offset_t size, true_)$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, offset_t size, true_)
truncate_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long truncate_existing = 5;$/;"	m	namespace:boost::interprocess::winapi
truncate_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool truncate_file (file_handle_t hnd, std::size_t size)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, std::size_t size)
try_acquire_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool try_acquire_file_lock(file_handle_t hnd, bool &acquired)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, bool &acquired)
try_acquire_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool try_acquire_file_lock_sharable(file_handle_t hnd, bool &acquired)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, bool &acquired)
try_atomic_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool try_atomic_func(Func &f)$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:(Func &f)
try_atomic_func	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool try_atomic_func(Func &f)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(Func &f)
try_lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline bool robust_spin_mutex<Mutex>::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::try_lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
try_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline bool interprocess_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline bool interprocess_sharable_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::try_lock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline bool named_sharable_mutex::try_lock()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline bool posix_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline bool posix_named_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline bool posix_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline bool shm_named_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline bool shm_named_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline bool spin_mutex::try_lock(void)$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:(void)
try_lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline bool spin_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline bool windows_mutex::try_lock(void)$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:(void)
try_lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline bool windows_named_mutex::try_lock()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:public	signature:()
try_lock_locking_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline bool try_lock_locking_file(int fd)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(int fd)
try_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::try_lock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline bool interprocess_sharable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline bool named_sharable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock_sharable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock_upgradable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_open_and_lock_file	/usr/include/boost/interprocess/detail/file_locking_helpers.hpp	/^inline int try_open_and_lock_file(const char *name)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const char *name)
try_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool try_receive (void *buffer,           size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(void *buffer, size_type buffer_size, size_type &recvd_size,unsigned int &priority)
try_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue_t<VoidPointer>::try_receive(void *buffer,              size_type buffer_size,$/;"	f	class:boost::interprocess::message_queue_t	signature:(void *buffer, size_type buffer_size, size_type &recvd_size, unsigned int &priority)
try_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool try_send    (const void *buffer,     size_type buffer_size,$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:(const void *buffer, size_type buffer_size, unsigned int priority)
try_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue_t<VoidPointer>::try_send$/;"	f	class:boost::interprocess::message_queue_t	signature:(const void *buffer, size_type buffer_size, unsigned int priority)
try_shrink	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool try_shrink$/;"	f	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, void *ptr ,const size_type max_size, const size_type preferred_size ,size_type &received_size)
try_shrink_in_place	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type try_shrink_in_place= boost::container::try_shrink_in_place;$/;"	m	namespace:boost::interprocess
try_to_lock	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const try_to_lock_type     try_to_lock    = try_to_lock_type();$/;"	m	namespace:boost::interprocess
try_to_lock_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct try_to_lock_type {};$/;"	s	namespace:boost::interprocess
try_to_lock_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
try_to_lock_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(upgradable_lock<T>) upgr, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
try_to_lock_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock( BOOST_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::upgradable_lock	access:public
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   bool try_unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::try_wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
try_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::try_wait()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
try_wait	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   bool try_wait()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   bool try_wait()$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline bool shm_named_semaphore::try_wait()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:()
try_wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline bool spin_semaphore::try_wait()$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:()
try_wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline bool windows_named_semaphore::try_wait()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:()
try_wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline bool windows_semaphore::try_wait(void)$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:(void)
try_wait	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   bool try_wait()$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:()
tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple() { }$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:()
tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple(const tuple<VValues...>& other)$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:(const tuple<VValues...>& other)
tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple(typename add_const_reference<Head>::type v,$/;"	f	class:boost::interprocess::ipcdetail::tuple	access:public	signature:(typename add_const_reference<Head>::type v, typename add_const_reference<Tail>::type... vtail)
tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class tuple<Head, Tail...>$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:tuple
tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^template<> class tuple<>$/;"	c	namespace:boost::interprocess::ipcdetail
tuple_element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct tuple_element<0, tuple<Head, Tail...> >$/;"	s	namespace:boost::interprocess::ipcdetail
tuple_element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct tuple_element<I, tuple<Head, Tail...> >$/;"	s	namespace:boost::interprocess::ipcdetail
two	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct two {char _[2];};$/;"	s	namespace:boost::interprocess::ipcdetail
type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      < SegmentManager, sizeof_value<T>::value, NodesPerBlock, MaxFreeBlocks, OverheadPercent> type;$/;"	t	struct:boost::interprocess::ipcdetail::adaptive_pool_base::node_pool	access:public
type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      typedef typename Derived::template node_pool<0>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::node_pool_allocation_impl::node_pool	access:public
type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      < SegmentManager, sizeof_value<T>::value, NodesPerBlock> type;$/;"	t	struct:boost::interprocess::ipcdetail::node_allocator_base::node_pool	access:public
type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      > type;$/;"	t	struct:boost::interprocess::ipcdetail::private_adaptive_pool_base::node_pool	access:public
type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      > type;$/;"	t	struct:boost::interprocess::ipcdetail::private_node_allocator_base::node_pool	access:public
type	/usr/include/boost/interprocess/detail/managed_global_memory.hpp	/^            <Device, mem_algo::Alignment, FileBased, false> type;$/;"	t	struct:boost::interprocess::ipcdetail::intermodule_types::open_or_create	access:public
type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      typedef typename segment_manager::template allocator<T>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::basic_managed_memory_impl::allocator	access:public
type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      typedef typename segment_manager::template deleter<T>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::basic_managed_memory_impl::deleter	access:public
type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef segment_manager<CharType, MemoryAlgorithm, IndexType> type;$/;"	t	struct:boost::interprocess::ipcdetail::segment_manager_type	access:public
type	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   typedef const char *type;$/;"	t	struct:boost::interprocess::managed_open_or_create_impl_device_id_t	access:public
type	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   typedef xsi_key type;$/;"	t	struct:boost::interprocess::managed_open_or_create_impl_device_id_t	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^    typedef T1 type;$/;"	t	struct:boost::interprocess::ipcdetail::if_c	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^    typedef T2 type;$/;"	t	struct:boost::interprocess::ipcdetail::if_c	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::identity	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef integral_constant<T,val> type;$/;"	t	struct:boost::interprocess::ipcdetail::integral_constant	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef typename if_c<0 != T1::value, T2, T3>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::if_	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^  typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::enable_if_c	access:public
type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^        typename remove_reference<D>::type>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::pointer_type	access:public
type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    typedef T* type;$/;"	t	struct:boost::interprocess::ipcdetail::pointer_type_imp::pointer_type	access:public
type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    typedef typename D::pointer type;$/;"	t	struct:boost::interprocess::ipcdetail::pointer_type_imp::pointer_type	access:public
type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::char_if_void	access:public
type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef char type;$/;"	t	struct:boost::interprocess::ipcdetail::char_if_void	access:public
type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   {  typedef intrusive_value_type_impl<HeaderBase, CharT, typename segment_manager_base::size_type>  type; };$/;"	t	struct:boost::interprocess::ipcdetail::index_config::intrusive_value_type	access:public
type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^{  typedef segment_manager_base<MemoryAlgorithm> type;   };$/;"	t	struct:boost::interprocess::ipcdetail::segment_manager_base_type	access:public
type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    typedef T& type;$/;"	t	struct:boost::interprocess::ipcdetail::add_reference	access:public
type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    typedef const nat &type;$/;"	t	struct:boost::interprocess::ipcdetail::add_reference	access:public
type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    typedef nat &type;$/;"	t	struct:boost::interprocess::ipcdetail::add_reference	access:public
type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::remove_const	access:public
type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::remove_reference	access:public
type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::ipcdetail::remove_volatile	access:public
type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   typedef typename remove_const<typename remove_volatile<T>::type>::type type;$/;"	t	struct:boost::interprocess::ipcdetail::remove_const_volatile	access:public
type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^{  typedef T& type;   };$/;"	t	struct:boost::interprocess::ipcdetail::add_const_reference	access:public
type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^{  typedef const T &type;   };$/;"	t	struct:boost::interprocess::ipcdetail::add_const_reference	access:public
type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef Head type;$/;"	t	struct:boost::interprocess::ipcdetail::tuple_element	access:public
type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Element>::type                  type;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:public
type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Head>::type         type;$/;"	t	class:boost::interprocess::ipcdetail::get_impl	access:public
type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Tail...> >::type type;$/;"	t	struct:boost::interprocess::ipcdetail::tuple_element	access:public
type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^{  typedef index_tuple<Indexes...> type;  };$/;"	t	struct:boost::interprocess::ipcdetail::build_number_seq	access:public
type	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^      < file_wrapper, AllocationAlgorithm::Alignment, true, false> type;$/;"	t	struct:boost::interprocess::ipcdetail::mfile_open_or_create	access:public
type	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^      < shared_memory_object, AllocationAlgorithm::Alignment, true, false> type;$/;"	t	struct:boost::interprocess::ipcdetail::shmem_open_or_create	access:public
type	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^      < windows_shared_memory, AllocationAlgorithm::Alignment, false, false> type;$/;"	t	struct:boost::interprocess::ipcdetail::wshmem_open_or_create	access:public
type	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^      < xsi_shared_memory_file_wrapper, AllocationAlgorithm::Alignment, false, true> type;$/;"	t	struct:boost::interprocess::ipcdetail::xsishmem_open_or_create	access:public
type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef ::boost::interprocess::offset_ptr<U, DifferenceType, OffsetType, OffsetAlignment> type;$/;"	t	struct:boost::pointer_to_other	access:public
type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef boost::interprocess::allocator<T, segment_manager> type;$/;"	t	struct:boost::interprocess::segment_manager::allocator	access:public
type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef boost::interprocess::deleter<T, segment_manager> type;$/;"	t	struct:boost::interprocess::segment_manager::deleter	access:public
type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef ipcdetail::named_proxy<segment_manager, T, false>   type;$/;"	t	struct:boost::interprocess::segment_manager::construct_proxy	access:public
type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef ipcdetail::named_proxy<segment_manager, T, true>   type;$/;"	t	struct:boost::interprocess::segment_manager::construct_iter_proxy	access:public
type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef shared_ptr< T, void_allocator, deleter>                type;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^            >::type = nat())$/;"	m	class:boost::interprocess::unique_ptr::ipcdetail::enable_if_c	access:public
type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^    typedef unique_ptr<T, D> type;$/;"	t	struct:boost::interprocess::ipcdetail::unique_ptr_error	access:public
type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   > type;$/;"	t	struct:boost::interprocess::managed_unique_ptr	access:public
type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   > type;$/;"	t	struct:boost::interprocess::managed_weak_ptr	access:public
type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^               , typename ipcdetail::enable_if< ipcdetail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::ipcdetail::enable_if	access:public
type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^         , typename ipcdetail::enable_if< ipcdetail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::ipcdetail::enable_if	access:public
type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      , typename ipcdetail::enable_if< ipcdetail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::ipcdetail::enable_if	access:public
type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^               , typename ipcdetail::enable_if< ipcdetail::is_same<T, SharableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::sharable_lock::ipcdetail::enable_if	access:public
type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      , typename ipcdetail::enable_if< ipcdetail::is_same<T, SharableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::sharable_lock::ipcdetail::enable_if	access:public
type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^                  , typename ipcdetail::enable_if< ipcdetail::is_same<T, UpgradableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::upgradable_lock::ipcdetail::enable_if	access:public
type	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   enum type { MUTEX, SEMAPHORE };$/;"	g	class:boost::interprocess::ipcdetail::sync_handles	access:public
type_name	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   const char *type_name;$/;"	m	struct:boost::interprocess::ipcdetail::in_place_interface	access:public
type_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	g	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
u	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static U *u;$/;"	m	struct:boost::interprocess::ipcdetail::is_same	access:public
u	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr(BOOST_RV_REF_2_TEMPL_ARGS(unique_ptr, U, E) u,$/;"	m	class:boost::interprocess::unique_ptr	access:public
uCurrentTimeZoneId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      unsigned long uCurrentTimeZoneId;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
umap_	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   umap_type umap_;$/;"	m	class:boost::interprocess::ipcdetail::sync_handles	access:private
umap_type	/usr/include/boost/interprocess/sync/windows/sync_utils.hpp	/^   typedef boost::unordered_map<sync_id, void*> umap_type;$/;"	t	class:boost::interprocess::ipcdetail::sync_handles	access:private
underflow	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type underflow()$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:()
underflow	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type underflow()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:()
unicode_string_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct unicode_string_t {$/;"	s	namespace:boost::interprocess::winapi
unique	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool unique() const \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:() const
unique	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool unique() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
unique_begin	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_unique_iterator unique_begin() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
unique_begin	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_unique_iterator unique_begin() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
unique_end	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_unique_iterator unique_end() const$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:() const
unique_end	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_unique_iterator unique_end() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
unique_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_unique>                   unique_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
unique_instance	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^static const ipcdetail::unique_instance_t      * unique_instance = 0;$/;"	m	namespace:boost::interprocess
unique_instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^typedef instance_t<unique_type>     unique_instance_t;$/;"	t	namespace:boost::interprocess::ipcdetail
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   explicit unique_ptr(pointer p)$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(pointer p)
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U, class E> unique_ptr(unique_ptr<U, E>&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(unique_ptr<U, E>&)
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U> unique_ptr(U&, typename ipcdetail::unique_ptr_error<U>::type = 0);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(U&, typename ipcdetail::unique_ptr_error<U>::type = 0)
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr()$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:()
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr(pointer p$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(pointer p ,typename ipcdetail::if_<ipcdetail::is_reference<D> ,D ,typename ipcdetail::add_reference<const D>::type>::type d)
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^class unique_ptr$/;"	c	namespace:boost::interprocess
unique_ptr_error	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^struct unique_ptr_error<const unique_ptr<T, D> >$/;"	s	namespace:boost::interprocess::ipcdetail
unique_transform	/usr/include/boost/interprocess/segment_manager.hpp	/^      ,is_intrusive_index<index_type>::value>   unique_transform;$/;"	t	class:boost::interprocess::segment_manager	access:public
unique_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
unlink_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool unlink_file(const char *filename)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *filename)
unlink_map_logic	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^      unlink_map_logic(managed_global_memory &mshm)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	access:public	signature:(managed_global_memory &mshm)
unlink_map_logic	/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp	/^   struct unlink_map_logic$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public
unlink_map_logic	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^      unlink_map_logic(windows_semaphore_based_map &)$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant::unlink_map_logic	access:public	signature:(windows_semaphore_based_map &)
unlink_map_logic	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   struct unlink_map_logic$/;"	s	struct:boost::interprocess::ipcdetail::intermodule_singleton_helpers::thread_safe_global_map_dependant	access:public
unlock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::robust_spin_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^inline void robust_spin_mutex<Mutex>::unlock()$/;"	f	class:boost::interprocess::ipcdetail::robust_spin_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   void unlock()  {   l_.lock();     }$/;"	f	class:boost::interprocess::ipcdetail::lock_inverter	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   void unlock()  { l_.unlock(); }$/;"	f	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::unlock()$/;"	f	class:boost::interprocess::file_lock	signature:()
unlock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline void interprocess_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline void interprocess_sharable_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::unlock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline void named_sharable_mutex::unlock()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline void posix_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline void posix_named_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline void posix_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline void shm_named_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline void shm_named_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline void spin_mutex::unlock(void)$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:(void)
unlock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline void spin_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline void windows_mutex::unlock(void)$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:(void)
unlock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline void windows_named_mutex::unlock()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::unlock()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_and_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_and_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_and_lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_and_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_and_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_and_lock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool unlock_file_ex(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)
unlock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::unlock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline void interprocess_sharable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline void named_sharable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable_and_lock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable_and_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unmap_view_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int unmap_view_of_file(void *address)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *address)
unordered_map_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   unordered_map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:(segment_manager_base *segment_mngr)
unordered_map_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^class unordered_map_index$/;"	c	namespace:boost::interprocess	inherits:unordered_map_index_aux::index_t
unordered_map_index_aux	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^struct unordered_map_index_aux$/;"	s	namespace:boost::interprocess
unrestricted	/usr/include/boost/interprocess/permissions.hpp	/^   static winapi::interprocess_all_access_security unrestricted;$/;"	m	struct:boost::interprocess::ipcdetail::unrestricted_permissions_holder	access:public
unrestricted	/usr/include/boost/interprocess/permissions.hpp	/^winapi::interprocess_all_access_security unrestricted_permissions_holder<Dummy>::unrestricted;$/;"	m	class:boost::interprocess::ipcdetail::unrestricted_permissions_holder
unrestricted_permissions_holder	/usr/include/boost/interprocess/permissions.hpp	/^struct unrestricted_permissions_holder$/;"	s	namespace:boost::interprocess::ipcdetail
unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef pointer this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::intrusive_ptr::this_type	access:private
unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef pointer this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::scoped_ptr::this_type	access:public
unspecified_bool_type	/usr/include/boost/interprocess/sync/detail/locks.hpp	/^   typedef void (internal_mutex_lock::*unspecified_bool_type)();$/;"	t	class:boost::interprocess::ipcdetail::internal_mutex_lock	access:private
unspecified_bool_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::scoped_lock::this_type	access:private
unspecified_bool_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::sharable_lock::this_type	access:private
unspecified_bool_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::upgradable_lock::this_type	access:private
unspecified_bool_type_func	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::intersegment_ptr	access:private	signature:() const
unspecified_bool_type_func	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:() const
unspecified_bool_type_func	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
update_segments	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual bool update_segments ()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:()
update_segments	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual bool                           update_segments   () = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:()
upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   explicit scoped_lock(BOOST_RV_REF(upgradable_lock<T>) upgr$/;"	m	class:boost::interprocess::scoped_lock	access:public
upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(upgradable_lock<T>) upgr, boost::posix_time::ptime &abs_time$/;"	m	class:boost::interprocess::scoped_lock	access:public
upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_RV_REF(upgradable_lock<T>) upgr, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
upgr	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(BOOST_RV_REF(upgradable_lock<T>) upgr$/;"	m	class:boost::interprocess::sharable_lock	access:public
upgradable_in	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned upgradable_in        : 1;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   explicit upgradable_lock(mutex_type& m)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   explicit upgradable_lock(scoped_lock<mutex_type>&);$/;"	p	class:boost::interprocess::upgradable_lock	access:private	signature:(scoped_lock<mutex_type>&)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, defer_lock_type)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^class upgradable_lock$/;"	c	namespace:boost::interprocess
upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      upgradable_to_exclusive_rollback(control_word_t         &ctrl)$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:(control_word_t &ctrl)
upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct upgradable_to_exclusive_rollback$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
upper_power_of_2	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer upper_power_of_2(const Integer & A)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(const Integer & A)
use_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:() const
use_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:() const
use_count	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:() const
use_count	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   long use_count() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
use_count	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   long use_count() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
use_count_	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    boost::uint32_t use_count_;        \/\/ #shared$/;"	m	class:boost::interprocess::ipcdetail::sp_counted_base	access:private
use_filesystem_based_posix	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool use_filesystem_based_posix()$/;"	f	namespace:boost::interprocess::shared_memory_object_detail	signature:()
vallocator_traits	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   typedef boost::container::allocator_traits<VoidAllocator>         vallocator_traits;$/;"	t	class:boost::interprocess::ipcdetail::shared_count	access:private
value	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   static const bool value = true;$/;"	m	struct:boost::has_trivial_destructor	access:public
value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   static const std::size_t value = sizeof(T);$/;"	m	struct:boost::interprocess::sizeof_value	access:public
value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   static const std::size_t value = sizeof(void*);$/;"	m	struct:boost::interprocess::sizeof_value	access:public
value	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_multisegment_ptr	access:public
value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const T value = val;$/;"	m	struct:boost::interprocess::ipcdetail::integral_constant	access:public
value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const bool value = C_;$/;"	m	struct:boost::interprocess::ipcdetail::bool_	access:public
value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const bool value = sizeof(dispatch(trigger())) == sizeof(true_t);$/;"	m	class:boost::interprocess::ipcdetail::is_convertible	access:public
value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const std::size_t value = (S & std::size_t(1)) ? 0 : (1u + ls_zeros<(S >> 1u)>::value);$/;"	m	struct:boost::interprocess::ipcdetail::ls_zeros	access:public
value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const std::size_t value = 0;$/;"	m	struct:boost::interprocess::ipcdetail::ls_zeros	access:public
value	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    static const bool value = sizeof(pointer_type_imp::test<T>(0)) == 1;$/;"	m	struct:boost::interprocess::ipcdetail::has_pointer_type	access:public
value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const void *value() const$/;"	f	class:boost::interprocess::ipcdetail::segment_manager_iterator_value_adaptor	access:public	signature:() const
value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::ipcdetail::index_data	access:public	signature:() const
value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::ipcdetail::intrusive_value_type_impl	access:public	signature:() const
value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = false;$/;"	m	struct:boost::interprocess::ipcdetail::is_pointer	access:public
value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = false;$/;"	m	struct:boost::interprocess::ipcdetail::is_reference	access:public
value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = is_same< typename remove_const_volatile<T>::type$/;"	m	struct:boost::interprocess::ipcdetail::is_cv_same	access:public
value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = sizeof(yes_type) == sizeof(is_same_tester(t,u));$/;"	m	struct:boost::interprocess::ipcdetail::is_same	access:public
value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::ipcdetail::is_pointer	access:public
value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::ipcdetail::is_reference	access:public
value	/usr/include/boost/interprocess/detail/utilities.hpp	/^   static const std::size_t value = intermediate_value*RoundTo;$/;"	m	struct:boost::interprocess::ipcdetail::ct_rounded_size	access:public
value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   } value;$/;"	m	struct:boost::interprocess::winapi::wchar_variant	typeref:union:boost::interprocess::winapi::wchar_variant::value_t	access:public
value	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_intrusive_index	access:public
value	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_intrusive_index	access:public
value	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_node_index	access:public
value	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_node_index	access:public
value	/usr/include/boost/interprocess/offset_ptr.hpp	/^      static const bool value =    ipcdetail::is_cv_same<From, To>::value$/;"	m	struct:boost::interprocess::ipcdetail::offset_ptr_maintains_address	access:public
value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const bool value = true;$/;"	m	struct:boost::has_trivial_constructor	access:public
value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const bool value = true;$/;"	m	struct:boost::has_trivial_destructor	access:public
value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const std::size_t value = ::boost::interprocess::ipcdetail::ls_zeros<OffsetAlignment>::value - 1;$/;"	m	struct:boost::intrusive::max_pointer_plus_bits	access:public
value	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   long value() const$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:() const
value_bytes	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type value_bytes() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
value_compare	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef std::less<value_type>                               value_compare;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
value_equal	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef std::equal_to<value_type>                  value_equal;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
value_offset	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   size_type value_offset() const$/;"	f	struct:boost::interprocess::ipcdetail::block_header	access:public	signature:() const
value_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   union value_t{$/;"	u	struct:boost::interprocess::winapi::wchar_variant	access:public
value_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
value_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef T                                    value_type;$/;"	t	class:boost::interprocess::allocator	access:public
value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:public
value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:public
value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::value_type                   value_type;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
value_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
value_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
value_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
value_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef T                                       value_type;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
value_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef std::pair<key_type, mapped_type>        value_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
value_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      intrusive_value_type<derivation_hook>::type              value_type;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
value_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::value_type               value_type;$/;"	t	class:boost::interprocess::iset_index	access:public
value_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_value_type<derivation_hook>::type     value_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
value_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::value_type               value_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
value_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef std::pair<const key_type, mapped_type>  value_type;$/;"	t	struct:boost::interprocess::ipcdetail::map_index_aux	access:public
value_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef std::pair<const key_type, mapped_type>  value_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
value_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^            >::type                          value_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
value_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef T                                                   value_type;$/;"	t	class:boost::interprocess::shared_ptr	access:public
value_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef T value_type;$/;"	t	class:boost::interprocess::weak_ptr	access:public
vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:() const
vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:() const
vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:() const
vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:() const
vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                        vector_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
vectorbuf_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef basic_vectorbuf<CharVector, CharTraits>    vectorbuf_t;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:private
vectorbuf_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef basic_vectorbuf<CharVector, CharTraits>    vectorbuf_t;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:private
version	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::adaptive_pool	access:public
version	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<adaptive_pool_base, Version>   version;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
version	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef boost::interprocess::version_type<allocator, 2>   version;$/;"	t	class:boost::interprocess::allocator	access:public
version	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<cached_adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::cached_adaptive_pool	access:public
version	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   typedef boost::interprocess::version_type<cached_node_allocator, 2>   version;$/;"	t	class:boost::interprocess::cached_node_allocator	access:public
version	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef boost::interprocess::version_type<node_allocator, 2>   version;$/;"	t	class:boost::interprocess::node_allocator	access:public
version	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef boost::interprocess::version_type<node_allocator_base, Version>   version;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
version	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      <private_adaptive_pool_base, Version>              version;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
version	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<private_adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::private_adaptive_pool	access:public
version	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      <private_node_allocator_base, Version>              version;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
version	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef boost::interprocess::version_type<private_node_allocator, 2>   version;$/;"	t	class:boost::interprocess::private_node_allocator	access:public
virtual_protect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool virtual_protect(void *base_addr, std::size_t numbytes, unsigned long flNewProtect, unsigned long &lpflOldProtect)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *base_addr, std::size_t numbytes, unsigned long flNewProtect, unsigned long &lpflOldProtect)
virtual_unlock	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool virtual_unlock(void *base_addr, std::size_t numbytes)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *base_addr, std::size_t numbytes)
void_allocator	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef typename ManagedMemory::template allocator<void>::type void_allocator;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
void_pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public
void_pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::allocator	access:public
void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      void_pointer                                          void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::cache_impl	access:private
void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::array_allocation_impl	access:private
void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_pool_allocation_impl	access:private
void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename segment_manager::void_pointer        void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::cached_allocator_impl	access:public
void_pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::node_allocator_base	access:public
void_pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public
void_pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public
void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer    void_pointer;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer   void_pointer;$/;"	t	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public
void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer   void_pointer;$/;"	t	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef typename MemoryAlgorithm::void_pointer        void_pointer;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
void_pointer	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef VoidPointer void_pointer;$/;"	t	struct:boost::interprocess::ipcdetail::index_data	access:public
void_pointer	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename MemoryAlgorithm::void_pointer        void_pointer;$/;"	t	struct:boost::interprocess::ipcdetail::index_config	access:public
void_pointer	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      segment_manager_base::void_pointer                       void_pointer;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
void_pointer	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      segment_manager_base::void_pointer              void_pointer;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
void_pointer	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef VoidPointer                                                           void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::msg_hdr_t	access:private
void_pointer	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef VoidPointer                                                     void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::mq_hdr_t	access:private
void_pointer	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef VoidPointer                                                 void_pointer;$/;"	t	class:boost::interprocess::message_queue_t	access:public
void_pointer	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::void_pointer              void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::memory_algorithm_common	access:public
void_pointer	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
void_pointer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public
void_pointer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
void_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::void_pointer    void_pointer;$/;"	t	class:boost::interprocess::segment_manager	access:public
void_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::void_pointer  void_pointer;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
wProcessorArchitecture	/usr/include/boost/interprocess/detail/win32_api.hpp	/^            unsigned short wProcessorArchitecture;$/;"	m	struct:boost::interprocess::winapi::system_info::__anon7::__anon8	access:public
wProcessorLevel	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned short wProcessorLevel;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
wProcessorRevision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned short wProcessorRevision;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
wReserved	/usr/include/boost/interprocess/detail/win32_api.hpp	/^            unsigned short wReserved;$/;"	m	struct:boost::interprocess::winapi::system_info::__anon7::__anon8	access:public
wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   static bool wait  ( ConditionMembers &data, Lock &lock$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:public	signature:( ConditionMembers &data, Lock &lock , bool timeout_enabled, const boost::posix_time::ptime &abs_time)
wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^inline bool condition_algorithm_8a<ConditionMembers>::wait$/;"	f	class:boost::interprocess::ipcdetail::condition_algorithm_8a	signature:( ConditionMembers &data , Lock &lock , bool tout_enabled , const boost::posix_time::ptime &abs_time )
wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   static bool wait  ( ConditionAnyMembers &data, Lock &mut$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:public	signature:( ConditionAnyMembers &data, Lock &mut , bool timeout_enabled, const boost::posix_time::ptime &abs_time)
wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^bool condition_any_algorithm<ConditionAnyMembers>::wait$/;"	f	class:boost::interprocess::ipcdetail::condition_any_algorithm	signature:( ConditionAnyMembers &data , Lock &lock , bool tout_enabled , const boost::posix_time::ptime &abs_time)
wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void wait(L& lock);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void wait(L& lock, Pr pred);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::wait(L& lock)$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::wait()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   void wait()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   void wait()$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   void wait(L& lock);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   void wait(L& lock, Pr pred);$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline void shm_named_condition::wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline void shm_named_condition::wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline void shm_named_semaphore::wait()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:()
wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/spin/interprocess_barrier.hpp	/^inline bool barrier::wait()$/;"	f	class:boost::interprocess::barrier	signature:()
wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline void spin_semaphore::wait()$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:()
wait	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline void windows_named_semaphore::wait()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:()
wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline void windows_semaphore::wait(void)$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:(void)
wait	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   void wait()$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:()
wait_abandoned	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_abandoned       = 0x00000080L;$/;"	m	namespace:boost::interprocess::winapi
wait_failed	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_failed          = (unsigned long)0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
wait_for_single_object	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long wait_for_single_object(void *handle, unsigned long time)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, unsigned long time)
wait_object_0	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_object_0        = 0;$/;"	m	namespace:boost::interprocess::winapi
wait_timeout	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_timeout         = 258L;$/;"	m	namespace:boost::interprocess::winapi
wbufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferbuf<wchar_t>     wbufferbuf;$/;"	t	namespace:boost::interprocess
wbufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferstream<wchar_t>  wbufferstream;$/;"	t	namespace:boost::interprocess
wchar_variant	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct wchar_variant$/;"	s	namespace:boost::interprocess::winapi
weak_add_ref	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   void weak_add_ref() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit weak_count(shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(): m_px(0), m_pi(0) \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:()
weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(weak_count const & r)$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count const & r)
weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(weak_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const & r)
weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^class weak_count$/;"	c	namespace:boost::interprocess::ipcdetail
weak_count_	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    boost::uint32_t weak_count_;       \/\/ #weak + (#shared != 0)$/;"	m	class:boost::interprocess::ipcdetail::sp_counted_base	access:private
weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr()$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:()
weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr(shared_ptr<Y, A, D> const & r)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(shared_ptr<Y, A, D> const & r)
weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr(weak_ptr<Y, A, D> const & r)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<Y, A, D> const & r)
weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^class weak_ptr$/;"	c	namespace:boost::interprocess
weak_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   bool weak_release() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
weak_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void weak_release() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_impl_pd	access:public	signature:()
wfixed_managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wfixed_managed_shared_memory;$/;"	t	namespace:boost::interprocess
what	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual const char * what() const throw()$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
what	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual const char* what() const throw()$/;"	f	class:boost::interprocess::bad_alloc	access:public	signature:() const
what	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual const char* what() const throw()$/;"	f	class:boost::interprocess::lock_exception	access:public	signature:() const
what	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^   virtual char const * what() const throw()$/;"	f	class:boost::interprocess::bad_weak_ptr	access:public	signature:() const
wibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_ibufferstream<wchar_t> wibufferstream;$/;"	t	namespace:boost::interprocess
win32_find_data_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct win32_find_data_t$/;"	s	namespace:boost::interprocess::winapi
winapi	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace winapi {$/;"	n	namespace:boost::interprocess
winapi_mutex_functions	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_functions(const winapi_mutex_functions &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:private	signature:(const winapi_mutex_functions &)
winapi_mutex_functions	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_functions(void *mtx_hnd)$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_functions	access:public	signature:(void *mtx_hnd)
winapi_mutex_functions	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^class winapi_mutex_functions$/;"	c	namespace:boost::interprocess::ipcdetail
winapi_mutex_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_wrapper(const winapi_mutex_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:private	signature:(const winapi_mutex_wrapper &)
winapi_mutex_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   winapi_mutex_wrapper(void *mtx_hnd = winapi::invalid_handle_value)$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:(void *mtx_hnd = winapi::invalid_handle_value)
winapi_mutex_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^class winapi_mutex_wrapper$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:winapi_mutex_functions
winapi_semaphore_functions	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_functions(const winapi_semaphore_functions &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:private	signature:(const winapi_semaphore_functions &)
winapi_semaphore_functions	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_functions(void *hnd)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_functions	access:public	signature:(void *hnd)
winapi_semaphore_functions	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^class winapi_semaphore_functions$/;"	c	namespace:boost::interprocess::ipcdetail
winapi_semaphore_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_wrapper(const winapi_semaphore_wrapper &);$/;"	p	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:private	signature:(const winapi_semaphore_wrapper &)
winapi_semaphore_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   winapi_semaphore_wrapper(void *hnd = winapi::invalid_handle_value)$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:(void *hnd = winapi::invalid_handle_value)
winapi_semaphore_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^class winapi_semaphore_wrapper$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:winapi_semaphore_functions
windows_bootstamp	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^         windows_bootstamp()$/;"	f	struct:boost::interprocess::ipcdetail::windows_bootstamp	access:public	signature:()
windows_bootstamp	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^      struct windows_bootstamp$/;"	s	namespace:boost::interprocess::ipcdetail
windows_condition	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   windows_condition()$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:()
windows_condition	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   windows_condition(const windows_condition &);$/;"	p	class:boost::interprocess::ipcdetail::windows_condition	access:private	signature:(const windows_condition &)
windows_condition	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^class windows_condition$/;"	c	namespace:boost::interprocess::ipcdetail
windows_intermodule_singleton	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^class windows_intermodule_singleton$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:intermodule_singleton_impl
windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   windows_mutex();$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   windows_mutex(const windows_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:private	signature:(const windows_mutex &)
windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^class windows_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline windows_mutex::windows_mutex()$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:()
windows_named_condition	/usr/include/boost/interprocess/sync/windows/named_condition.hpp	/^typedef windows_named_condition_any windows_named_condition;$/;"	t	namespace:boost::interprocess::ipcdetail
windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(create_only_t, const char *name, const permissions &perm)
windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(open_or_create_t, const char *name, const permissions &perm)
windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private	signature:()
windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any(const windows_named_condition_any &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:private	signature:(const windows_named_condition_any &)
windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   windows_named_condition_any(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:(open_only_t, const char *name)
windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^class windows_named_condition_any$/;"	c	namespace:boost::interprocess::ipcdetail
windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private	signature:()
windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex(const windows_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:private	signature:(const windows_named_mutex &)
windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex(create_only_t, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:(create_only_t, const char *name, const permissions &perm = permissions())
windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex(open_only_t, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:(open_only_t, const char *name)
windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   windows_named_mutex(open_or_create_t, const char *name, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:(open_or_create_t, const char *name, const permissions &perm = permissions())
windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^class windows_named_mutex$/;"	c	namespace:boost::interprocess::ipcdetail
windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline windows_named_mutex::windows_named_mutex$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:(create_only_t, const char *name, const permissions &perm)
windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline windows_named_mutex::windows_named_mutex$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:(open_or_create_t, const char *name, const permissions &perm)
windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline windows_named_mutex::windows_named_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:(open_only_t, const char *name)
windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:private	signature:()
windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex(const windows_named_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:private	signature:(const windows_named_mutex &)
windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex(create_only_t, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:public	signature:(create_only_t, const char *name, const permissions &perm = permissions())
windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:public	signature:(open_only_t, const char *name)
windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^   windows_named_recursive_mutex(open_or_create_t, const char *name, const permissions &perm = permissions())$/;"	f	class:boost::interprocess::ipcdetail::windows_named_recursive_mutex	access:public	signature:(open_or_create_t, const char *name, const permissions &perm = permissions())
windows_named_recursive_mutex	/usr/include/boost/interprocess/sync/windows/named_recursive_mutex.hpp	/^class windows_named_recursive_mutex$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:windows_named_mutex
windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private	signature:()
windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore(const windows_named_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:private	signature:(const windows_named_semaphore &)
windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:(create_only_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore(open_only_t, const char *name);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:(open_only_t, const char *name)
windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   windows_named_semaphore(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions());$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:(open_or_create_t, const char *name, unsigned int initialCount, const permissions &perm = permissions())
windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^class windows_named_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline windows_named_semaphore::windows_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:(create_only_t, const char *name, unsigned int initial_count, const permissions &perm)
windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline windows_named_semaphore::windows_named_semaphore$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:(open_or_create_t, const char *name, unsigned int initial_count, const permissions &perm)
windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline windows_named_semaphore::windows_named_semaphore(open_only_t, const char *name)$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:(open_only_t, const char *name)
windows_named_sync	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   windows_named_sync();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:public	signature:()
windows_named_sync	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   windows_named_sync(const windows_named_sync &);$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync	access:private	signature:(const windows_named_sync &)
windows_named_sync	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^class windows_named_sync$/;"	c	namespace:boost::interprocess::ipcdetail
windows_named_sync	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^inline windows_named_sync::windows_named_sync()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_sync	signature:()
windows_named_sync_interface	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^class windows_named_sync_interface$/;"	c	namespace:boost::interprocess::ipcdetail
windows_recursive_mutex	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^   windows_recursive_mutex() : windows_mutex() {}$/;"	f	class:boost::interprocess::ipcdetail::windows_recursive_mutex	access:public	signature:()
windows_recursive_mutex	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^   windows_recursive_mutex(const windows_recursive_mutex &);$/;"	p	class:boost::interprocess::ipcdetail::windows_recursive_mutex	access:private	signature:(const windows_recursive_mutex &)
windows_recursive_mutex	/usr/include/boost/interprocess/sync/windows/recursive_mutex.hpp	/^class windows_recursive_mutex$/;"	c	namespace:boost::interprocess::ipcdetail	inherits:windows_mutex
windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   windows_semaphore(const windows_semaphore &);$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:private	signature:(const windows_semaphore &)
windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   windows_semaphore(unsigned int initialCount);$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:(unsigned int initialCount)
windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^class windows_semaphore$/;"	c	namespace:boost::interprocess::ipcdetail
windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline windows_semaphore::windows_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:(unsigned int initialCount)
windows_semaphore_based_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   windows_semaphore_based_map()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:()
windows_semaphore_based_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^class windows_semaphore_based_map$/;"	c	namespace:boost::interprocess::ipcdetail::intermodule_singleton_helpers
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory();$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:()
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(create_only_t, const char *name, mode_t mode, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(create_only_t, const char *name, mode_t mode, std::size_t size, const permissions& perm = permissions())
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(open_only_t, const char *name, mode_t mode)
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(open_or_create_t, const char *name, mode_t mode, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(open_or_create_t, const char *name, mode_t mode, std::size_t size, const permissions& perm = permissions())
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^class windows_shared_memory$/;"	c	namespace:boost::interprocess
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline windows_shared_memory::windows_shared_memory()$/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
wmanaged_external_buffer	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_external_buffer;$/;"	t	namespace:boost::interprocess
wmanaged_heap_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_heap_memory;$/;"	t	namespace:boost::interprocess
wmanaged_mapped_file	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_mapped_file;$/;"	t	namespace:boost::interprocess
wmanaged_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_shared_memory;$/;"	t	namespace:boost::interprocess
wmanaged_windows_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_windows_shared_memory;$/;"	t	namespace:boost::interprocess
wmanaged_xsi_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_xsi_shared_memory;$/;"	t	namespace:boost::interprocess
wobufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_obufferstream<wchar_t> wobufferstream;$/;"	t	namespace:boost::interprocess
write_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool write_file(file_handle_t hnd, const void *data, std::size_t numdata)$/;"	f	namespace:boost::interprocess::ipcdetail	signature:(file_handle_t hnd, const void *data, std::size_t numdata)
write_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool write_file(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)
wshmem_open_or_create	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^struct wshmem_open_or_create$/;"	s	namespace:boost::interprocess::ipcdetail
xsi	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^namespace xsi {$/;"	n	namespace:boost::interprocess
xsi	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^namespace xsi {$/;"	n	namespace:boost::interprocess
xsi_key	/usr/include/boost/interprocess/xsi_key.hpp	/^   xsi_key()$/;"	f	class:boost::interprocess::xsi_key	access:public	signature:()
xsi_key	/usr/include/boost/interprocess/xsi_key.hpp	/^   xsi_key(const char *path, boost::uint8_t id)$/;"	f	class:boost::interprocess::xsi_key	access:public	signature:(const char *path, boost::uint8_t id)
xsi_key	/usr/include/boost/interprocess/xsi_key.hpp	/^class xsi_key$/;"	c	namespace:boost::interprocess
xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex(open_or_create_t, const char *path, boost::uint8_t id, int perm = 0666)$/;"	f	class:boost::interprocess::xsi_named_mutex	access:public	signature:(open_or_create_t, const char *path, boost::uint8_t id, int perm = 0666)
xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex(xsi_named_mutex &);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:(xsi_named_mutex &)
xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^class xsi_named_mutex$/;"	c	namespace:boost::interprocess
xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline xsi_named_mutex::xsi_named_mutex()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   xsi_shared_memory();$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:()
xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   xsi_shared_memory(create_only_t, const xsi_key &key, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(create_only_t, const xsi_key &key, std::size_t size, const permissions& perm = permissions())
xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   xsi_shared_memory(open_only_t, const xsi_key &key)$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(open_only_t, const xsi_key &key)
xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   xsi_shared_memory(open_only_t, int shmid)$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(open_only_t, int shmid)
xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   xsi_shared_memory(open_or_create_t, const xsi_key &key, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(open_or_create_t, const xsi_key &key, std::size_t size, const permissions& perm = permissions())
xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^class xsi_shared_memory$/;"	c	namespace:boost::interprocess
xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline xsi_shared_memory::xsi_shared_memory()$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:()
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device();$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:()
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(create_only_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(create_only_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(create_only_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(create_only_t, const char *name, mode_t mode, std::size_t size)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_only_t, const char *filepath, boost::uint8_t id, mode_t mode)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_only_t, const char *filepath, boost::uint8_t id, mode_t mode)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_only_t, const char *name, mode_t mode)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_or_create_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_or_create_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_or_create_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_or_create_t, const char *name, mode_t mode, std::size_t size)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^class xsi_shared_memory_device$/;"	c	namespace:boost::interprocess
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline xsi_shared_memory_device::xsi_shared_memory_device()$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:()
xsi_shared_memory_file_wrapper	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^   xsi_shared_memory_file_wrapper() : xsi_shared_memory() {}$/;"	f	class:boost::interprocess::xsi_shared_memory_file_wrapper	access:public	signature:()
xsi_shared_memory_file_wrapper	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^   xsi_shared_memory_file_wrapper(create_only_t, const xsi_key &key, mode_t mode, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::xsi_shared_memory_file_wrapper	access:public	signature:(create_only_t, const xsi_key &key, mode_t mode, std::size_t size, const permissions& perm = permissions())
xsi_shared_memory_file_wrapper	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^   xsi_shared_memory_file_wrapper(open_only_t, const xsi_key &key, mode_t mode, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::xsi_shared_memory_file_wrapper	access:public	signature:(open_only_t, const xsi_key &key, mode_t mode, const permissions& perm = permissions())
xsi_shared_memory_file_wrapper	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^   xsi_shared_memory_file_wrapper(open_or_create_t, const xsi_key &key, mode_t mode, std::size_t size, const permissions& perm = permissions())$/;"	f	class:boost::interprocess::xsi_shared_memory_file_wrapper	access:public	signature:(open_or_create_t, const xsi_key &key, mode_t mode, std::size_t size, const permissions& perm = permissions())
xsi_shared_memory_file_wrapper	/usr/include/boost/interprocess/detail/xsi_shared_memory_file_wrapper.hpp	/^class xsi_shared_memory_file_wrapper$/;"	c	namespace:boost::interprocess	inherits:xsi_shared_memory
xsishmem_open_or_create	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^struct xsishmem_open_or_create$/;"	s	namespace:boost::interprocess::ipcdetail
yes_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef char yes_type;$/;"	t	namespace:boost::interprocess::ipcdetail
yes_type	/usr/include/boost/interprocess/detail/type_traits.hpp	/^   typedef char yes_type;$/;"	t	struct:boost::interprocess::ipcdetail::is_same	access:public
zero_free_memory	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void zero_free_memory()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:public	signature:()
zero_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void zero_free_memory();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
zero_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::zero_free_memory()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
zero_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void zero_free_memory();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
zero_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::zero_free_memory()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
zero_free_memory	/usr/include/boost/interprocess/segment_manager.hpp	/^   void zero_free_memory()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
zero_memory	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type zero_memory        = boost::container::zero_memory;$/;"	m	namespace:boost::interprocess
~adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   ~adaptive_pool_base()$/;"	f	class:boost::interprocess::ipcdetail::adaptive_pool_base	access:public	signature:()
~barrier	/usr/include/boost/interprocess/sync/spin/interprocess_barrier.hpp	/^inline barrier::~barrier(){}$/;"	f	class:boost::interprocess::barrier	signature:()
~barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~barrier_initializer() {  if(mp_barrier) pthread_barrier_destroy(mp_barrier);  }$/;"	f	class:boost::interprocess::ipcdetail::barrier_initializer	access:public	signature:()
~barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~barrierattr_wrapper()  {  pthread_barrierattr_destroy(&m_attr);  }$/;"	f	struct:boost::interprocess::ipcdetail::barrierattr_wrapper	access:public	signature:()
~basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual ~basic_bufferbuf(){}$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:()
~basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_bufferstream(){}$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:()
~basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_ibufferstream(){};$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:()
~basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_ivectorstream(){};$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:()
~basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   ~basic_managed_heap_memory()$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:()
~basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   ~basic_managed_mapped_file()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
~basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   ~basic_managed_memory_impl()$/;"	f	class:boost::interprocess::ipcdetail::basic_managed_memory_impl	access:protected	signature:()
~basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   ~basic_managed_multi_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:()
~basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   ~basic_managed_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:()
~basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   ~basic_managed_windows_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:()
~basic_managed_xsi_shared_memory	/usr/include/boost/interprocess/managed_xsi_shared_memory.hpp	/^   ~basic_managed_xsi_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_xsi_shared_memory	access:public	signature:()
~basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_obufferstream(){}$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:()
~basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_ovectorstream(){}$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:()
~basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual ~basic_vectorbuf(){}$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:()
~basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_vectorstream(){}$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:()
~cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   ~cache_impl()$/;"	f	class:boost::interprocess::ipcdetail::cache_impl	access:public	signature:()
~co_uninitializer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~co_uninitializer()$/;"	f	struct:boost::interprocess::winapi::co_uninitializer	access:public	signature:()
~com_releaser	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~com_releaser()  {  object_->Release();    object_ = 0;  }$/;"	f	struct:boost::interprocess::winapi::com_releaser	access:public	signature:()
~condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~condattr_wrapper() { pthread_condattr_destroy(&m_attr); }$/;"	f	struct:boost::interprocess::ipcdetail::condattr_wrapper	access:public	signature:()
~condition_8a_wrapper	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   ~condition_8a_wrapper(){}$/;"	f	class:boost::interprocess::ipcdetail::condition_8a_wrapper	access:public	signature:()
~condition_algorithm_8a	/usr/include/boost/interprocess/sync/detail/condition_algorithm_8a.hpp	/^   ~condition_algorithm_8a();$/;"	p	class:boost::interprocess::ipcdetail::condition_algorithm_8a	access:private	signature:()
~condition_any_algorithm	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   ~condition_any_algorithm();$/;"	p	class:boost::interprocess::ipcdetail::condition_any_algorithm	access:private	signature:()
~condition_any_wrapper	/usr/include/boost/interprocess/sync/detail/condition_any_algorithm.hpp	/^   ~condition_any_wrapper(){}$/;"	f	class:boost::interprocess::ipcdetail::condition_any_wrapper	access:public	signature:()
~condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~condition_initializer()   {  if(mp_cond) pthread_cond_destroy(mp_cond);  }$/;"	f	class:boost::interprocess::ipcdetail::condition_initializer	access:public	signature:()
~enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   ~enable_shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:()
~exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^      ~exclusive_rollback()$/;"	f	struct:boost::interprocess::interprocess_sharable_mutex::exclusive_rollback	access:public	signature:()
~exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      ~exclusive_rollback()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:()
~file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   ~file_lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
~file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline file_lock::~file_lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
~file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   ~file_mapping();$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:()
~file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::~file_mapping()$/;"	f	class:boost::interprocess::file_mapping	signature:()
~file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   ~file_wrapper();$/;"	p	class:boost::interprocess::ipcdetail::file_wrapper	access:public	signature:()
~file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline file_wrapper::~file_wrapper()$/;"	f	class:boost::interprocess::ipcdetail::file_wrapper	signature:()
~flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   ~flat_map_intersegment()$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:()
~group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual ~group_services(){}$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:()
~handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~handle_closer()$/;"	f	class:boost::interprocess::winapi::handle_closer	access:public	signature:()
~in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual ~in_place_interface(){}$/;"	f	struct:boost::interprocess::ipcdetail::in_place_interface	access:public	signature:()
~interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   ~interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:()
~interprocess_condition_any	/usr/include/boost/interprocess/sync/interprocess_condition_any.hpp	/^   ~interprocess_condition_any(){}$/;"	f	class:boost::interprocess::interprocess_condition_any	access:public	signature:()
~interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual ~interprocess_exception() throw(){}$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:()
~interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   ~interprocess_mutex();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
~interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^inline interprocess_mutex::~interprocess_mutex(){}$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
~interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^  ~interprocess_recursive_mutex();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
~interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::~interprocess_recursive_mutex(){}$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
~interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   ~interprocess_semaphore();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
~interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^inline interprocess_semaphore::~interprocess_semaphore(){}$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
~interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^   ~interprocess_sharable_mutex();$/;"	p	class:boost::interprocess::interprocess_sharable_mutex	access:public	signature:()
~interprocess_sharable_mutex	/usr/include/boost/interprocess/sync/interprocess_sharable_mutex.hpp	/^inline interprocess_sharable_mutex::~interprocess_sharable_mutex()$/;"	f	class:boost::interprocess::interprocess_sharable_mutex	signature:()
~interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   ~interprocess_upgradable_mutex();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
~interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline interprocess_upgradable_mutex::~interprocess_upgradable_mutex()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
~intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   ~intrusive_ptr()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
~iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   ~iunordered_set_index()$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:()
~library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~library_unloader(){ free_library(lib_);  }$/;"	f	struct:boost::interprocess::winapi::library_unloader	access:public	signature:()
~lifetime_type_lazy	/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp	/^      ~lifetime_type_lazy()$/;"	f	struct:boost::interprocess::ipcdetail::intermodule_singleton_impl::lifetime_type_lazy	access:public	signature:()
~managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   ~managed_open_or_create_impl()$/;"	f	class:boost::interprocess::ipcdetail::managed_open_or_create_impl	access:public	signature:()
~mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   ~mapped_region();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
~mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::~mapped_region()$/;"	f	class:boost::interprocess::mapped_region	signature:()
~mappings_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ~mappings_t()$/;"	f	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public	signature:()
~mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   ~mem_algo_deallocator()$/;"	f	class:boost::interprocess::ipcdetail::mem_algo_deallocator	access:public	signature:()
~message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   ~message_queue_t();$/;"	p	class:boost::interprocess::message_queue_t	access:public	signature:()
~message_queue_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue_t<VoidPointer>::~message_queue_t()$/;"	f	class:boost::interprocess::message_queue_t	signature:()
~multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual ~multi_segment_services() = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:()
~multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^inline multi_segment_services::~multi_segment_services()$/;"	f	class:boost::interprocess::multi_segment_services	signature:()
~mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~mutex_initializer() {  if(mp_mut) pthread_mutex_destroy(mp_mut);  }$/;"	f	class:boost::interprocess::ipcdetail::mutex_initializer	access:public	signature:()
~mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~mutexattr_wrapper()  {  pthread_mutexattr_destroy(&m_attr);  }$/;"	f	struct:boost::interprocess::ipcdetail::mutexattr_wrapper	access:public	signature:()
~named_cond_callbacks	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^      virtual ~named_cond_callbacks()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any::named_cond_callbacks	access:public	signature:()
~named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   ~named_condition();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
~named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::~named_condition()$/;"	f	class:boost::interprocess::named_condition	signature:()
~named_condition_any	/usr/include/boost/interprocess/sync/named_condition_any.hpp	/^   ~named_condition_any()$/;"	f	class:boost::interprocess::named_condition_any	access:public	signature:()
~named_mut_callbacks	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^      virtual ~named_mut_callbacks()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex::named_mut_callbacks	access:public	signature:()
~named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   ~named_mutex();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
~named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::~named_mutex()$/;"	f	class:boost::interprocess::named_mutex	signature:()
~named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   ~named_recursive_mutex();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
~named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::~named_recursive_mutex()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
~named_sem_callbacks	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^      virtual ~named_sem_callbacks()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore::named_sem_callbacks	access:public	signature:()
~named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   ~named_semaphore();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
~named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::~named_semaphore()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
~named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^   ~named_sharable_mutex();$/;"	p	class:boost::interprocess::named_sharable_mutex	access:public	signature:()
~named_sharable_mutex	/usr/include/boost/interprocess/sync/named_sharable_mutex.hpp	/^inline named_sharable_mutex::~named_sharable_mutex()$/;"	f	class:boost::interprocess::named_sharable_mutex	signature:()
~named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   ~named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
~named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::~named_upgradable_mutex()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
~named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^   ~named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
~named_upgradable_mutex	/usr/include/boost/interprocess/sync/shm/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::~named_upgradable_mutex()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
~node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   ~node_allocator_base()$/;"	f	class:boost::interprocess::ipcdetail::node_allocator_base	access:public	signature:()
~null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   ~null_mutex(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
~posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^   ~posix_condition();$/;"	p	class:boost::interprocess::ipcdetail::posix_condition	access:public	signature:()
~posix_condition	/usr/include/boost/interprocess/sync/posix/condition.hpp	/^inline posix_condition::~posix_condition()$/;"	f	class:boost::interprocess::ipcdetail::posix_condition	signature:()
~posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^   ~posix_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_mutex	access:public	signature:()
~posix_mutex	/usr/include/boost/interprocess/sync/posix/mutex.hpp	/^inline posix_mutex::~posix_mutex()$/;"	f	class:boost::interprocess::ipcdetail::posix_mutex	signature:()
~posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^   ~posix_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_named_mutex	access:public	signature:()
~posix_named_mutex	/usr/include/boost/interprocess/sync/posix/named_mutex.hpp	/^inline posix_named_mutex::~posix_named_mutex()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_mutex	signature:()
~posix_named_semaphore	/usr/include/boost/interprocess/sync/posix/named_semaphore.hpp	/^   ~posix_named_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::posix_named_semaphore	access:public	signature:()
~posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^   ~posix_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::posix_recursive_mutex	access:public	signature:()
~posix_recursive_mutex	/usr/include/boost/interprocess/sync/posix/recursive_mutex.hpp	/^inline posix_recursive_mutex::~posix_recursive_mutex()$/;"	f	class:boost::interprocess::ipcdetail::posix_recursive_mutex	signature:()
~posix_semaphore	/usr/include/boost/interprocess/sync/posix/semaphore.hpp	/^   ~posix_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::posix_semaphore	access:public	signature:()
~private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   ~private_adaptive_pool_base()$/;"	f	class:boost::interprocess::ipcdetail::private_adaptive_pool_base	access:public	signature:()
~private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   ~private_node_allocator_base()$/;"	f	class:boost::interprocess::ipcdetail::private_node_allocator_base	access:public	signature:()
~rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ~rbtree_best_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
~rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::~rbtree_best_fit()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
~reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~reg_closer(){ reg_close_key(key_);  }$/;"	f	struct:boost::interprocess::winapi::reg_closer	access:public	signature:()
~remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^   ~remove_file_on_destroy()$/;"	f	class:boost::interprocess::remove_file_on_destroy	access:public	signature:()
~remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   ~remove_shared_memory_on_destroy()$/;"	f	class:boost::interprocess::remove_shared_memory_on_destroy	access:public	signature:()
~robust_mutex_lock_file	/usr/include/boost/interprocess/detail/robust_emulation.hpp	/^   ~robust_mutex_lock_file()$/;"	f	class:boost::interprocess::ipcdetail::robust_emulation_helpers::robust_mutex_lock_file	access:public	signature:()
~scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   ~scoped_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
~scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   ~scoped_ptr()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
~sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   ~sharable_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
~shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   ~shared_count() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::shared_count	access:public	signature:()
~shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   ~shared_memory_object();$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:()
~shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline shared_memory_object::~shared_memory_object()$/;"	f	class:boost::interprocess::shared_memory_object	signature:()
~shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   ~shared_pool_impl()$/;"	f	class:boost::interprocess::ipcdetail::shared_pool_impl	access:public	signature:()
~shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^   ~shm_named_condition();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_condition	access:public	signature:()
~shm_named_condition	/usr/include/boost/interprocess/sync/shm/named_condition.hpp	/^inline shm_named_condition::~shm_named_condition()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition	signature:()
~shm_named_condition_any	/usr/include/boost/interprocess/sync/shm/named_condition_any.hpp	/^   ~shm_named_condition_any()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_condition_any	access:public	signature:()
~shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^   ~shm_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_mutex	access:public	signature:()
~shm_named_mutex	/usr/include/boost/interprocess/sync/shm/named_mutex.hpp	/^inline shm_named_mutex::~shm_named_mutex()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_mutex	signature:()
~shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^   ~shm_named_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	access:public	signature:()
~shm_named_recursive_mutex	/usr/include/boost/interprocess/sync/shm/named_recursive_mutex.hpp	/^inline shm_named_recursive_mutex::~shm_named_recursive_mutex()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_recursive_mutex	signature:()
~shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^   ~shm_named_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::shm_named_semaphore	access:public	signature:()
~shm_named_semaphore	/usr/include/boost/interprocess/sync/shm/named_semaphore.hpp	/^inline shm_named_semaphore::~shm_named_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::shm_named_semaphore	signature:()
~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   ~simple_seq_fit_impl();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline simple_seq_fit_impl<MutexFamily, VoidPointer>::~simple_seq_fit_impl()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ~simple_seq_fit_impl();$/;"	p	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	access:public	signature:()
~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline simple_seq_fit_impl<MutexFamily, VoidPointer>::~simple_seq_fit_impl()$/;"	f	class:boost::interprocess::ipcdetail::simple_seq_fit_impl	signature:()
~sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    ~sp_counted_base() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::sp_counted_base	access:public	signature:()
~spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^   ~spin_condition();$/;"	p	class:boost::interprocess::ipcdetail::spin_condition	access:public	signature:()
~spin_condition	/usr/include/boost/interprocess/sync/spin/condition.hpp	/^inline spin_condition::~spin_condition()$/;"	f	class:boost::interprocess::ipcdetail::spin_condition	signature:()
~spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^   ~spin_mutex();$/;"	p	class:boost::interprocess::ipcdetail::spin_mutex	access:public	signature:()
~spin_mutex	/usr/include/boost/interprocess/sync/spin/mutex.hpp	/^inline spin_mutex::~spin_mutex()$/;"	f	class:boost::interprocess::ipcdetail::spin_mutex	signature:()
~spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^   ~spin_recursive_mutex();$/;"	p	class:boost::interprocess::ipcdetail::spin_recursive_mutex	access:public	signature:()
~spin_recursive_mutex	/usr/include/boost/interprocess/sync/spin/recursive_mutex.hpp	/^inline spin_recursive_mutex::~spin_recursive_mutex(){}$/;"	f	class:boost::interprocess::ipcdetail::spin_recursive_mutex	signature:()
~spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^   ~spin_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::spin_semaphore	access:public	signature:()
~spin_semaphore	/usr/include/boost/interprocess/sync/spin/semaphore.hpp	/^inline spin_semaphore::~spin_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::spin_semaphore	signature:()
~upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   ~upgradable_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
~upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      ~upgradable_to_exclusive_rollback()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:()
~weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   ~weak_count() \/\/ nothrow$/;"	f	class:boost::interprocess::ipcdetail::weak_count	access:public	signature:()
~winapi_mutex_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_mutex_wrapper.hpp	/^   ~winapi_mutex_wrapper()$/;"	f	class:boost::interprocess::ipcdetail::winapi_mutex_wrapper	access:public	signature:()
~winapi_semaphore_wrapper	/usr/include/boost/interprocess/sync/windows/winapi_semaphore_wrapper.hpp	/^   ~winapi_semaphore_wrapper()$/;"	f	class:boost::interprocess::ipcdetail::winapi_semaphore_wrapper	access:public	signature:()
~windows_condition	/usr/include/boost/interprocess/sync/windows/condition.hpp	/^   ~windows_condition()$/;"	f	class:boost::interprocess::ipcdetail::windows_condition	access:public	signature:()
~windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^   ~windows_mutex();$/;"	p	class:boost::interprocess::ipcdetail::windows_mutex	access:public	signature:()
~windows_mutex	/usr/include/boost/interprocess/sync/windows/mutex.hpp	/^inline windows_mutex::~windows_mutex()$/;"	f	class:boost::interprocess::ipcdetail::windows_mutex	signature:()
~windows_named_condition_any	/usr/include/boost/interprocess/sync/windows/named_condition_any.hpp	/^   ~windows_named_condition_any()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_condition_any	access:public	signature:()
~windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^   ~windows_named_mutex();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_mutex	access:public	signature:()
~windows_named_mutex	/usr/include/boost/interprocess/sync/windows/named_mutex.hpp	/^inline windows_named_mutex::~windows_named_mutex()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_mutex	signature:()
~windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^   ~windows_named_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::windows_named_semaphore	access:public	signature:()
~windows_named_semaphore	/usr/include/boost/interprocess/sync/windows/named_semaphore.hpp	/^inline windows_named_semaphore::~windows_named_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_semaphore	signature:()
~windows_named_sync_interface	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^   virtual ~windows_named_sync_interface() = 0;$/;"	p	class:boost::interprocess::ipcdetail::windows_named_sync_interface	access:public	signature:()
~windows_named_sync_interface	/usr/include/boost/interprocess/sync/windows/named_sync.hpp	/^inline windows_named_sync_interface::~windows_named_sync_interface()$/;"	f	class:boost::interprocess::ipcdetail::windows_named_sync_interface	signature:()
~windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^   ~windows_semaphore();$/;"	p	class:boost::interprocess::ipcdetail::windows_semaphore	access:public	signature:()
~windows_semaphore	/usr/include/boost/interprocess/sync/windows/semaphore.hpp	/^inline windows_semaphore::~windows_semaphore()$/;"	f	class:boost::interprocess::ipcdetail::windows_semaphore	signature:()
~windows_semaphore_based_map	/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp	/^   ~windows_semaphore_based_map()$/;"	f	class:boost::interprocess::ipcdetail::intermodule_singleton_helpers::windows_semaphore_based_map	access:public	signature:()
~windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   ~windows_shared_memory();$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:()
~windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline windows_shared_memory::~windows_shared_memory()$/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
~xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   ~xsi_named_mutex();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
~xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline xsi_named_mutex::~xsi_named_mutex()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
~xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^   ~xsi_shared_memory();$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:()
~xsi_shared_memory	/usr/include/boost/interprocess/xsi_shared_memory.hpp	/^inline xsi_shared_memory::~xsi_shared_memory()$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:()
~xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   ~xsi_shared_memory_device();$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:()
~xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline xsi_shared_memory_device::~xsi_shared_memory_device()$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:()
