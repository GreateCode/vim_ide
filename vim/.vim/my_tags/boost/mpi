!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_ARCHIVE_FORWARD_IMPLEMENTATION	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	53;"	d
BOOST_ARCHIVE_FORWARD_IMPLEMENTATION	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	75;"	d
BOOST_ARCHIVE_FORWARD_IMPLEMENTATION	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	53;"	d
BOOST_ARCHIVE_FORWARD_IMPLEMENTATION	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	75;"	d
BOOST_ARCHIVE_IGNORE_IMPLEMENTATION	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	51;"	d
BOOST_ARCHIVE_IGNORE_IMPLEMENTATION	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	73;"	d
BOOST_DYN_LINK	/usr/include/boost/mpi/config.hpp	99;"	d
BOOST_DYN_LINK	/usr/include/boost/mpi/python/config.hpp	39;"	d
BOOST_IS_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	352;"	d
BOOST_LIB_DIAGNOSTIC	/usr/include/boost/mpi/config.hpp	102;"	d
BOOST_LIB_DIAGNOSTIC	/usr/include/boost/mpi/python/config.hpp	42;"	d
BOOST_LIB_NAME	/usr/include/boost/mpi/config.hpp	97;"	d
BOOST_LIB_NAME	/usr/include/boost/mpi/python/config.hpp	37;"	d
BOOST_MPI_ALLOCATOR_HPP	/usr/include/boost/mpi/allocator.hpp	13;"	d
BOOST_MPI_ALL_GATHER_HPP	/usr/include/boost/mpi/collectives/all_gather.hpp	9;"	d
BOOST_MPI_ALL_REDUCE_HPP	/usr/include/boost/mpi/collectives/all_reduce.hpp	13;"	d
BOOST_MPI_ALL_TO_ALL_HPP	/usr/include/boost/mpi/collectives/all_to_all.hpp	9;"	d
BOOST_MPI_BINARY_BUFFER_IPRIMITIVE_HPP	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	10;"	d
BOOST_MPI_BINARY_BUFFER_OPRIMITIVE_HPP	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	10;"	d
BOOST_MPI_BROADCAST_HPP	/usr/include/boost/mpi/collectives/broadcast.hpp	9;"	d
BOOST_MPI_BROADCAST_SC_HPP	/usr/include/boost/mpi/detail/broadcast_sc.hpp	12;"	d
BOOST_MPI_BUILD_DLL	/usr/include/boost/mpi/config.hpp	86;"	d
BOOST_MPI_CALLING_CONVENTION	/usr/include/boost/mpi/config.hpp	54;"	d
BOOST_MPI_CALLING_CONVENTION	/usr/include/boost/mpi/config.hpp	66;"	d
BOOST_MPI_CHECK_RESULT	/usr/include/boost/mpi/exception.hpp	94;"	d
BOOST_MPI_COLLECTIVES_FORWARD_ONLY	/usr/include/boost/mpi/collectives_fwd.hpp	18;"	d
BOOST_MPI_COLLECTIVES_FORWARD_ONLY	/usr/include/boost/mpi/collectives_fwd.hpp	20;"	d
BOOST_MPI_COLLECTIVES_FWD_HPP	/usr/include/boost/mpi/collectives_fwd.hpp	15;"	d
BOOST_MPI_COLLECTIVES_HPP	/usr/include/boost/mpi/collectives.hpp	19;"	d
BOOST_MPI_COMMUNICATOR_HPP	/usr/include/boost/mpi/communicator.hpp	14;"	d
BOOST_MPI_COMMUNICATOR_SC_HPP	/usr/include/boost/mpi/detail/communicator_sc.hpp	12;"	d
BOOST_MPI_COMPUTATION_TREE_HPP	/usr/include/boost/mpi/detail/computation_tree.hpp	10;"	d
BOOST_MPI_CONFIG_HPP	/usr/include/boost/mpi/config.hpp	14;"	d
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(__int64, MPI_LONG_LONG_INT, builtin); $/;"	p	namespace:boost::mpi	signature:(__int64, MPI_LONG_LONG_INT, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::class_id_optional_type, get_mpi_datatype(int_least16_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::class_id_optional_type, get_mpi_datatype(int_least16_t()), integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::class_id_reference_type, get_mpi_datatype(int_least16_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::class_id_reference_type, get_mpi_datatype(int_least16_t()), integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::class_id_type, get_mpi_datatype(int_least16_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::class_id_type, get_mpi_datatype(int_least16_t()), integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::library_version_type, get_mpi_datatype(uint_least16_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::library_version_type, get_mpi_datatype(uint_least16_t()), integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::object_id_type, get_mpi_datatype(uint_least32_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::object_id_type, get_mpi_datatype(uint_least32_t()), integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::object_reference_type, get_mpi_datatype(uint_least32_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::object_reference_type, get_mpi_datatype(uint_least32_t()), integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::tracking_type, get_mpi_datatype(bool()), builtin);$/;"	p	namespace:boost::mpi	signature:(boost::archive::tracking_type, get_mpi_datatype(bool()), builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::version_type, get_mpi_datatype(uint_least32_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::version_type, get_mpi_datatype(uint_least32_t()), integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::serialization::collection_size_type, get_mpi_datatype(std::size_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::serialization::collection_size_type, get_mpi_datatype(std::size_t()), integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::serialization::item_version_type, get_mpi_datatype(unsigned()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::serialization::item_version_type, get_mpi_datatype(unsigned()), integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(char, MPI_CHAR, builtin);$/;"	p	namespace:boost::mpi	signature:(char, MPI_CHAR, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(double, MPI_DOUBLE, floating_point);$/;"	p	namespace:boost::mpi	signature:(double, MPI_DOUBLE, floating_point)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(float, MPI_FLOAT, floating_point);$/;"	p	namespace:boost::mpi	signature:(float, MPI_FLOAT, floating_point)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(int, MPI_INT, integer);$/;"	p	namespace:boost::mpi	signature:(int, MPI_INT, integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(long double, MPI_LONG_DOUBLE, floating_point);$/;"	p	namespace:boost::mpi	signature:(long double, MPI_LONG_DOUBLE, floating_point)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(long long, MPI_LONG_LONG_INT, builtin);$/;"	p	namespace:boost::mpi	signature:(long long, MPI_LONG_LONG_INT, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(long, MPI_LONG, integer);$/;"	p	namespace:boost::mpi	signature:(long, MPI_LONG, integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(packed, MPI_PACKED, builtin);$/;"	p	namespace:boost::mpi	signature:(packed, MPI_PACKED, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(short, MPI_SHORT, integer);$/;"	p	namespace:boost::mpi	signature:(short, MPI_SHORT, integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(signed char, MPI_SIGNED_CHAR, builtin);$/;"	p	namespace:boost::mpi	signature:(signed char, MPI_SIGNED_CHAR, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(double, int)>, MPI_DOUBLE_INT, $/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(double, int)>, MPI_DOUBLE_INT, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(float, int)>, MPI_FLOAT_INT, $/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(float, int)>, MPI_FLOAT_INT, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(int, int>), MPI_2INT, builtin);$/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(int, int>)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(long double, int)>,$/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(long double, int)>, MPI_LONG_DOUBLE_INT, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(long, int>), MPI_LONG_INT, $/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(long, int>)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(short, int>), MPI_SHORT_INT, $/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(short, int>)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned __int64, MPI_UNSIGNED_LONG_LONG, builtin); $/;"	p	namespace:boost::mpi	signature:(unsigned __int64, MPI_UNSIGNED_LONG_LONG, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned char, MPI_UNSIGNED_CHAR, builtin);$/;"	p	namespace:boost::mpi	signature:(unsigned char, MPI_UNSIGNED_CHAR, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned long long, MPI_UNSIGNED_LONG_LONG, builtin);$/;"	p	namespace:boost::mpi	signature:(unsigned long long, MPI_UNSIGNED_LONG_LONG, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned long, MPI_UNSIGNED_LONG, integer);$/;"	p	namespace:boost::mpi	signature:(unsigned long, MPI_UNSIGNED_LONG, integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned short, MPI_UNSIGNED_SHORT, integer);$/;"	p	namespace:boost::mpi	signature:(unsigned short, MPI_UNSIGNED_SHORT, integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned, MPI_UNSIGNED, integer);$/;"	p	namespace:boost::mpi	signature:(unsigned, MPI_UNSIGNED, integer)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(wchar_t, MPI_WCHAR, builtin);$/;"	p	namespace:boost::mpi	signature:(wchar_t, MPI_WCHAR, builtin)
BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	194;"	d
BOOST_MPI_DATATYPE_FWD_HPP	/usr/include/boost/mpi/datatype_fwd.hpp	15;"	d
BOOST_MPI_DATATYPE_HPP	/usr/include/boost/mpi/datatype.hpp	18;"	d
BOOST_MPI_DECL	/usr/include/boost/mpi/config.hpp	85;"	d
BOOST_MPI_DECL	/usr/include/boost/mpi/config.hpp	88;"	d
BOOST_MPI_DECL	/usr/include/boost/mpi/config.hpp	93;"	d
BOOST_MPI_DETAIL_CONTENT_OARCHIVE_HPP	/usr/include/boost/mpi/detail/content_oarchive.hpp	10;"	d
BOOST_MPI_DETAIL_FORWARD_IPRIMITIVE_HPP	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	12;"	d
BOOST_MPI_DETAIL_FORWARD_OPRIMITIVE_HPP	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	10;"	d
BOOST_MPI_DETAIL_FORWARD_SKELETON_IARCHIVE_HPP	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	10;"	d
BOOST_MPI_DETAIL_FORWARD_SKELETON_OARCHIVE_HPP	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	10;"	d
BOOST_MPI_DETAIL_IGNORE_IPRIMITIVE_HPP	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	10;"	d
BOOST_MPI_DETAIL_IGNORE_OPRIMITIVE_HPP	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	10;"	d
BOOST_MPI_DETAIL_IGNORE_SKELETON_OARCHIVE_HPP	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	10;"	d
BOOST_MPI_DETAIL_MPI_DATATYPE_OARCHIVE_HPP	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	10;"	d
BOOST_MPI_DETAIL_MPI_DATATYPE_OPRIMITIVE_HPP	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	10;"	d
BOOST_MPI_DETAIL_POINT_TO_POINT_HPP	/usr/include/boost/mpi/detail/point_to_point.hpp	9;"	d
BOOST_MPI_DETAIL_TYPE_MPI_DATATYPE_CACHE_HPP	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	10;"	d
BOOST_MPI_ENVIRONMENT_HPP	/usr/include/boost/mpi/environment.hpp	14;"	d
BOOST_MPI_EXCEPTION_HPP	/usr/include/boost/mpi/exception.hpp	14;"	d
BOOST_MPI_GATHER_HPP	/usr/include/boost/mpi/collectives/gather.hpp	9;"	d
BOOST_MPI_GRAPH_COMMUNICATOR_HPP	/usr/include/boost/mpi/graph_communicator.hpp	22;"	d
BOOST_MPI_GROUP_HPP	/usr/include/boost/mpi/group.hpp	16;"	d
BOOST_MPI_HAS_MEMORY_ALLOCATION	/usr/include/boost/mpi/config.hpp	40;"	d
BOOST_MPI_HAS_MEMORY_ALLOCATION	/usr/include/boost/mpi/config.hpp	71;"	d
BOOST_MPI_HAS_NOARG_INITIALIZATION	/usr/include/boost/mpi/config.hpp	50;"	d
BOOST_MPI_HAS_NOARG_INITIALIZATION	/usr/include/boost/mpi/config.hpp	72;"	d
BOOST_MPI_INTERCOMMUNICATOR_HPP	/usr/include/boost/mpi/intercommunicator.hpp	16;"	d
BOOST_MPI_IS_MPI_OP_HPP	/usr/include/boost/mpi/operations.hpp	19;"	d
BOOST_MPI_LIST2	/usr/include/boost/mpi/datatype.hpp	241;"	d
BOOST_MPI_LIST2	/usr/include/boost/mpi/datatype.hpp	259;"	d
BOOST_MPI_NONBLOCKING_HPP	/usr/include/boost/mpi/nonblocking.hpp	13;"	d
BOOST_MPI_PACKED_IARCHIVE_HPP	/usr/include/boost/mpi/packed_iarchive.hpp	19;"	d
BOOST_MPI_PACKED_IPRIMITIVE_HPP	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	10;"	d
BOOST_MPI_PACKED_OARCHIVE_HPP	/usr/include/boost/mpi/packed_oarchive.hpp	19;"	d
BOOST_MPI_PACKED_OPRIMITIVE_HPP	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	10;"	d
BOOST_MPI_PYTHON_BUILD_DLL	/usr/include/boost/mpi/python/config.hpp	26;"	d
BOOST_MPI_PYTHON_CONFIG_HPP	/usr/include/boost/mpi/python/config.hpp	13;"	d
BOOST_MPI_PYTHON_DECL	/usr/include/boost/mpi/python/config.hpp	25;"	d
BOOST_MPI_PYTHON_DECL	/usr/include/boost/mpi/python/config.hpp	28;"	d
BOOST_MPI_PYTHON_DECL	/usr/include/boost/mpi/python/config.hpp	33;"	d
BOOST_MPI_PYTHON_FORWARD_ONLY	/usr/include/boost/mpi/python/serialize.hpp	44;"	d
BOOST_MPI_PYTHON_FORWARD_ONLY	/usr/include/boost/mpi/python/skeleton_and_content.hpp	18;"	d
BOOST_MPI_PYTHON_HPP	/usr/include/boost/mpi/python.hpp	9;"	d
BOOST_MPI_PYTHON_SERIALIZE_HPP	/usr/include/boost/mpi/python/serialize.hpp	21;"	d
BOOST_MPI_PYTHON_SKELETON_AND_CONTENT_HPP	/usr/include/boost/mpi/python/skeleton_and_content.hpp	9;"	d
BOOST_MPI_REDUCE_HPP	/usr/include/boost/mpi/collectives/reduce.hpp	13;"	d
BOOST_MPI_REQUEST_HPP	/usr/include/boost/mpi/request.hpp	13;"	d
BOOST_MPI_SCAN_HPP	/usr/include/boost/mpi/collectives/scan.hpp	13;"	d
BOOST_MPI_SCATTER_HPP	/usr/include/boost/mpi/collectives/scatter.hpp	9;"	d
BOOST_MPI_SKELETON_AND_CONTENT_FWD_HPP	/usr/include/boost/mpi/skeleton_and_content_fwd.hpp	18;"	d
BOOST_MPI_SKELETON_AND_CONTENT_HPP	/usr/include/boost/mpi/skeleton_and_content.hpp	24;"	d
BOOST_MPI_STATUS_HPP	/usr/include/boost/mpi/status.hpp	13;"	d
BOOST_MPI_TEXT_SKELETON_OARCHIVE_HPP	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	10;"	d
BOOST_MPI_TIMER_HPP	/usr/include/boost/mpi/timer.hpp	13;"	d
BOOST_PYTHON_DIRECT_SERIALIZATION_ARCHIVE	/usr/include/boost/mpi/python/serialize.hpp	87;"	d
BOOST_PYTHON_DIRECT_SERIALIZATION_ARCHIVE_IMPL	/usr/include/boost/mpi/python/serialize.hpp	116;"	d
BOOST_PYTHON_SERIALIZATION_ARCHIVE	/usr/include/boost/mpi/python/serialize.hpp	62;"	d
BOOST_PYTHON_SERIALIZATION_ARCHIVE	/usr/include/boost/mpi/python/serialize.hpp	71;"	d
MPICH_IGNORE_CXX_SEEK	/usr/include/boost/mpi/config.hpp	18;"	d
MPI_2INT	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(int, int>), MPI_2INT, builtin);$/;"	m	namespace:boost::mpi
MPI_LONG_INT	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(long, int>), MPI_LONG_INT, $/;"	m	namespace:boost::mpi
MPI_SHORT_INT	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(short, int>), MPI_SHORT_INT, $/;"	m	namespace:boost::mpi
abort	/usr/include/boost/mpi/communicator.hpp	/^  void abort(int errcode) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int errcode) const
abort	/usr/include/boost/mpi/environment.hpp	/^  static void abort(int errcode);$/;"	p	class:boost::mpi::environment	access:public	signature:(int errcode)
abort_on_exception	/usr/include/boost/mpi/environment.hpp	/^  bool abort_on_exception;$/;"	m	class:boost::mpi::environment	access:private
address	/usr/include/boost/mpi/allocator.hpp	/^  const_pointer address(const_reference x) const$/;"	f	class:boost::mpi::allocator	access:public	signature:(const_reference x) const
address	/usr/include/boost/mpi/allocator.hpp	/^  pointer address(reference x) const$/;"	f	class:boost::mpi::allocator	access:public	signature:(reference x) const
address	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void const* address () const$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:() const
address	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void* address ()$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:()
address	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void const * address() const$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:() const
address	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void const* address () const$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:() const
address	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void* address ()$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:()
address	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void const * address() const$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:() const
addresses	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    std::vector<MPI_Aint> addresses;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
adjacency_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef mpi::detail::comm_adj_iterator adjacency_iterator;$/;"	t	struct:boost::graph_traits	access:public
adjacent_vertices	/usr/include/boost/mpi/graph_communicator.hpp	/^adjacent_vertices(int vertex, const graph_communicator& comm);$/;"	p	namespace:boost::mpi	signature:(int vertex, const graph_communicator& comm)
advance	/usr/include/boost/mpi/graph_communicator.hpp	/^    void advance(int n) { index += n; }$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:(int n)
advance	/usr/include/boost/mpi/graph_communicator.hpp	/^    void advance(int n) { index += n; }$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:(int n)
all_gather	/usr/include/boost/mpi/collectives.hpp	/^all_gather(const communicator& comm, const T& in_value, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, std::vector<T>& out_values)
all_gather	/usr/include/boost/mpi/collectives.hpp	/^all_gather(const communicator& comm, const T& in_value, T* out_values);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T* out_values)
all_gather	/usr/include/boost/mpi/collectives.hpp	/^all_gather(const communicator& comm, const T* in_values, int n, T* out_values);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values)
all_gather	/usr/include/boost/mpi/collectives.hpp	/^all_gather(const communicator& comm, const T* in_values, int n,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, std::vector<T>& out_values)
all_gather	/usr/include/boost/mpi/collectives/all_gather.hpp	/^all_gather(const communicator& comm, const T& in_value, $/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, std::vector<T>& out_values)
all_gather	/usr/include/boost/mpi/collectives/all_gather.hpp	/^all_gather(const communicator& comm, const T& in_value, T* out_values)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T* out_values)
all_gather	/usr/include/boost/mpi/collectives/all_gather.hpp	/^all_gather(const communicator& comm, const T* in_values, int n, T* out_values)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values)
all_gather	/usr/include/boost/mpi/collectives/all_gather.hpp	/^all_gather(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, std::vector<T>& out_values)
all_gather_impl	/usr/include/boost/mpi/collectives/all_gather.hpp	/^  all_gather_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, mpl::false_)
all_gather_impl	/usr/include/boost/mpi/collectives/all_gather.hpp	/^  all_gather_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, mpl::true_)
all_reduce	/usr/include/boost/mpi/collectives.hpp	/^T all_reduce(const communicator& comm, const T& in_value, Op op);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op)
all_reduce	/usr/include/boost/mpi/collectives.hpp	/^all_reduce(const communicator& comm, const T& in_value, T& out_value, Op op);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op)
all_reduce	/usr/include/boost/mpi/collectives.hpp	/^all_reduce(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op)
all_reduce	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^T all_reduce(const communicator& comm, const T& in_value, Op op)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op)
all_reduce	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^all_reduce(const communicator& comm, const T& in_value, T& out_value, Op op)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op)
all_reduce	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^all_reduce(const communicator& comm, const T* in_values, int n, T* out_values,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op)
all_reduce_impl	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^  all_reduce_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op , mpl::true_ , mpl::true_ )
all_reduce_impl	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^  all_reduce_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, mpl::false_ , mpl::false_ )
all_reduce_impl	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^  all_reduce_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, mpl::false_ , mpl::true_ )
all_to_all	/usr/include/boost/mpi/collectives.hpp	/^all_to_all(const communicator& comm, const T* in_values, int n, T* out_values);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values)
all_to_all	/usr/include/boost/mpi/collectives.hpp	/^all_to_all(const communicator& comm, const std::vector<T>& in_values, int n,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, int n, std::vector<T>& out_values)
all_to_all	/usr/include/boost/mpi/collectives.hpp	/^all_to_all(const communicator& comm, const std::vector<T>& in_values,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, std::vector<T>& out_values)
all_to_all	/usr/include/boost/mpi/collectives.hpp	/^void all_to_all(const communicator& comm, const T* in_values, T* out_values);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T* out_values)
all_to_all	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^all_to_all(const communicator& comm, const T* in_values, T* out_values)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T* out_values)
all_to_all	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^all_to_all(const communicator& comm, const T* in_values, int n, T* out_values)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values)
all_to_all	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^all_to_all(const communicator& comm, const std::vector<T>& in_values, int n,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, int n, std::vector<T>& out_values)
all_to_all	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^all_to_all(const communicator& comm, const std::vector<T>& in_values,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, std::vector<T>& out_values)
all_to_all_impl	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^  all_to_all_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, mpl::true_)
all_to_all_impl	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^  all_to_all_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, mpl::false_)
allocate	/usr/include/boost/mpi/allocator.hpp	/^  pointer allocate(size_type n, allocator<void>::const_pointer \/*hint*\/ = 0)$/;"	f	class:boost::mpi::allocator	access:public	signature:(size_type n, allocator<void>::const_pointer = 0)
allocator	/usr/include/boost/mpi/allocator.hpp	/^  allocator() throw() { }$/;"	f	class:boost::mpi::allocator	access:public	signature:()
allocator	/usr/include/boost/mpi/allocator.hpp	/^  allocator(const allocator&) throw() { }$/;"	f	class:boost::mpi::allocator	access:public	signature:(const allocator&)
allocator	/usr/include/boost/mpi/allocator.hpp	/^  allocator(const allocator<U>&) throw() { }$/;"	f	class:boost::mpi::allocator	access:public	signature:(const allocator<U>&)
allocator	/usr/include/boost/mpi/allocator.hpp	/^class BOOST_MPI_DECL allocator $/;"	c	namespace:boost::mpi
allocator	/usr/include/boost/mpi/allocator.hpp	/^class BOOST_MPI_DECL allocator<void> $/;"	c	namespace:boost::mpi
any_source	/usr/include/boost/mpi/communicator.hpp	/^const int any_source = MPI_ANY_SOURCE;$/;"	m	namespace:boost::mpi
any_tag	/usr/include/boost/mpi/communicator.hpp	/^const int any_tag = MPI_ANY_TAG;$/;"	m	namespace:boost::mpi
array_irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_irecv_impl(int source, int tag, T* values, int n, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T* values, int n, mpl::false_) const
array_irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_irecv_impl(int source, int tag, T* values, int n, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T* values, int n, mpl::true_) const
array_irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_irecv_impl(int source, int tag, T* values, int n, $/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n, mpl::false_) const
array_irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_irecv_impl(int source, int tag, T* values, int n, $/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n, mpl::true_) const
array_isend_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_isend_impl(int dest, int tag, const T* values, int n, $/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T* values, int n, mpl::false_) const
array_isend_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_isend_impl(int dest, int tag, const T* values, int n, $/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T* values, int n, mpl::true_) const
array_isend_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_isend_impl(int dest, int tag, const T* values, int n, $/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n, mpl::false_) const
array_isend_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_isend_impl(int dest, int tag, const T* values, int n,$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n, mpl::true_) const
array_recv_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_recv_impl(int source, int tag, T* values, int n, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T* values, int n, mpl::false_) const
array_recv_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_recv_impl(int source, int tag, T* values, int n, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T* values, int n, mpl::true_) const
array_recv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_recv_impl(int source, int tag, T* values, int n, $/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n, mpl::false_) const
array_recv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_recv_impl(int source, int tag, T* values, int n, $/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n, mpl::true_) const
array_send_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_send_impl(int dest, int tag, const T* values, int n, $/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T* values, int n, mpl::false_) const
array_send_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_send_impl(int dest, int tag, const T* values, int n, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T* values, int n, mpl::true_) const
array_send_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_send_impl(int dest, int tag, const T* values, int n,$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n, mpl::false_) const
array_send_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_send_impl(int dest, int tag, const T* values, int n,$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n, mpl::true_) const
as_graph_communicator	/usr/include/boost/mpi/communicator.hpp	/^  optional<graph_communicator> as_graph_communicator() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
as_intercommunicator	/usr/include/boost/mpi/communicator.hpp	/^  optional<intercommunicator> as_intercommunicator() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
barrier	/usr/include/boost/mpi/communicator.hpp	/^  void (barrier)() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
barrier	/usr/include/boost/mpi/communicator.hpp	/^  void barrier() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
base	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  const inherited& base() const { return *this; }$/;"	f	class:boost::mpi::python::content	access:public	signature:() const
base	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  inherited&       base()       { return *this; }$/;"	f	class:boost::mpi::python::content	access:public	signature:()
binary_buffer_iprimitive	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    binary_buffer_iprimitive(buffer_type & b, MPI_Comm const &, int position = 0)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(buffer_type & b, MPI_Comm const &, int position = 0)
binary_buffer_iprimitive	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^class BOOST_MPI_DECL binary_buffer_iprimitive$/;"	c	namespace:boost::mpi
binary_buffer_oprimitive	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    binary_buffer_oprimitive(buffer_type & b, MPI_Comm const &)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(buffer_type & b, MPI_Comm const &)
binary_buffer_oprimitive	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^class BOOST_MPI_DECL binary_buffer_oprimitive$/;"	c	namespace:boost::mpi
bitwise_and	/usr/include/boost/mpi/operations.hpp	/^struct bitwise_and : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
bitwise_or	/usr/include/boost/mpi/operations.hpp	/^struct bitwise_or : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
bitwise_xor	/usr/include/boost/mpi/operations.hpp	/^struct bitwise_xor : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
boost	/usr/include/boost/mpi/allocator.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/collectives.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/collectives/all_gather.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/collectives/broadcast.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/collectives/gather.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/collectives/reduce.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/collectives/scan.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/collectives/scatter.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/communicator.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/datatype.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/datatype_fwd.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/detail/broadcast_sc.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/detail/computation_tree.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/detail/point_to_point.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n
boost	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/environment.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/exception.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/graph_communicator.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/graph_communicator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/mpi/group.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/intercommunicator.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/nonblocking.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/operations.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/packed_iarchive.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/packed_oarchive.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/python.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n
boost	/usr/include/boost/mpi/python/serialize.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n
boost	/usr/include/boost/mpi/python/serialize.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/python/serialize.hpp	/^namespace boost { namespace python {$/;"	n
boost	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n
boost	/usr/include/boost/mpi/request.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/skeleton_and_content.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/skeleton_and_content_fwd.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/status.hpp	/^namespace boost { namespace mpi {$/;"	n
boost	/usr/include/boost/mpi/timer.hpp	/^namespace boost { namespace mpi {$/;"	n
boost::graph_traits	/usr/include/boost/mpi/graph_communicator.hpp	/^struct graph_traits<mpi::graph_communicator> {$/;"	s	namespace:boost
boost::graph_traits::adjacency_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef mpi::detail::comm_adj_iterator adjacency_iterator;$/;"	t	struct:boost::graph_traits	access:public
boost::graph_traits::degree_size_type	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef int degree_size_type;$/;"	t	struct:boost::graph_traits	access:public
boost::graph_traits::directed_category	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef directed_tag               directed_category;$/;"	t	struct:boost::graph_traits	access:public
boost::graph_traits::edge_descriptor	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef std::pair<int, int>        edge_descriptor;$/;"	t	struct:boost::graph_traits	access:public
boost::graph_traits::edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef mpi::detail::comm_edge_iterator edge_iterator;$/;"	t	struct:boost::graph_traits	access:public
boost::graph_traits::edge_parallel_category	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef disallow_parallel_edge_tag edge_parallel_category;$/;"	t	struct:boost::graph_traits	access:public
boost::graph_traits::edges_size_type	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef int                             edges_size_type;$/;"	t	struct:boost::graph_traits	access:public
boost::graph_traits::null_vertex	/usr/include/boost/mpi/graph_communicator.hpp	/^  static vertex_descriptor null_vertex() { return -1; }$/;"	f	struct:boost::graph_traits	access:public	signature:()
boost::graph_traits::out_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef mpi::detail::comm_out_edge_iterator out_edge_iterator;$/;"	t	struct:boost::graph_traits	access:public
boost::graph_traits::traversal_category	/usr/include/boost/mpi/graph_communicator.hpp	/^  struct traversal_category$/;"	s	struct:boost::graph_traits	inherits:incidence_graph_tag,adjacency_graph_tag,vertex_list_graph_tag,edge_list_graph_tag	access:public
boost::graph_traits::vertex_descriptor	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef int                        vertex_descriptor;$/;"	t	struct:boost::graph_traits	access:public
boost::graph_traits::vertex_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef counting_iterator<int> vertex_iterator;$/;"	t	struct:boost::graph_traits	access:public
boost::graph_traits::vertices_size_type	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef int                    vertices_size_type;$/;"	t	struct:boost::graph_traits	access:public
boost::mpi	/usr/include/boost/mpi/allocator.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/collectives.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/collectives/all_gather.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/collectives/broadcast.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/collectives/gather.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/collectives/reduce.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/collectives/scan.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/collectives/scatter.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/communicator.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/datatype.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/datatype_fwd.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/broadcast_sc.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/computation_tree.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/point_to_point.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/environment.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/exception.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/graph_communicator.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/group.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/intercommunicator.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/nonblocking.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/operations.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/packed_iarchive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/packed_oarchive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/python.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/python/serialize.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/python/serialize.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/request.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/skeleton_and_content.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/skeleton_and_content_fwd.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/status.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi	/usr/include/boost/mpi/timer.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(__int64, MPI_LONG_LONG_INT, builtin); $/;"	p	namespace:boost::mpi	signature:(__int64, MPI_LONG_LONG_INT, builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::class_id_optional_type, get_mpi_datatype(int_least16_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::class_id_optional_type, get_mpi_datatype(int_least16_t()), integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::class_id_reference_type, get_mpi_datatype(int_least16_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::class_id_reference_type, get_mpi_datatype(int_least16_t()), integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::class_id_type, get_mpi_datatype(int_least16_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::class_id_type, get_mpi_datatype(int_least16_t()), integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::library_version_type, get_mpi_datatype(uint_least16_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::library_version_type, get_mpi_datatype(uint_least16_t()), integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::object_id_type, get_mpi_datatype(uint_least32_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::object_id_type, get_mpi_datatype(uint_least32_t()), integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::object_reference_type, get_mpi_datatype(uint_least32_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::object_reference_type, get_mpi_datatype(uint_least32_t()), integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::tracking_type, get_mpi_datatype(bool()), builtin);$/;"	p	namespace:boost::mpi	signature:(boost::archive::tracking_type, get_mpi_datatype(bool()), builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::archive::version_type, get_mpi_datatype(uint_least32_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::archive::version_type, get_mpi_datatype(uint_least32_t()), integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::serialization::collection_size_type, get_mpi_datatype(std::size_t()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::serialization::collection_size_type, get_mpi_datatype(std::size_t()), integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(boost::serialization::item_version_type, get_mpi_datatype(unsigned()), integer);$/;"	p	namespace:boost::mpi	signature:(boost::serialization::item_version_type, get_mpi_datatype(unsigned()), integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(char, MPI_CHAR, builtin);$/;"	p	namespace:boost::mpi	signature:(char, MPI_CHAR, builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(double, MPI_DOUBLE, floating_point);$/;"	p	namespace:boost::mpi	signature:(double, MPI_DOUBLE, floating_point)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(float, MPI_FLOAT, floating_point);$/;"	p	namespace:boost::mpi	signature:(float, MPI_FLOAT, floating_point)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(int, MPI_INT, integer);$/;"	p	namespace:boost::mpi	signature:(int, MPI_INT, integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(long double, MPI_LONG_DOUBLE, floating_point);$/;"	p	namespace:boost::mpi	signature:(long double, MPI_LONG_DOUBLE, floating_point)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(long long, MPI_LONG_LONG_INT, builtin);$/;"	p	namespace:boost::mpi	signature:(long long, MPI_LONG_LONG_INT, builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(long, MPI_LONG, integer);$/;"	p	namespace:boost::mpi	signature:(long, MPI_LONG, integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(packed, MPI_PACKED, builtin);$/;"	p	namespace:boost::mpi	signature:(packed, MPI_PACKED, builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(short, MPI_SHORT, integer);$/;"	p	namespace:boost::mpi	signature:(short, MPI_SHORT, integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(signed char, MPI_SIGNED_CHAR, builtin);$/;"	p	namespace:boost::mpi	signature:(signed char, MPI_SIGNED_CHAR, builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(double, int)>, MPI_DOUBLE_INT, $/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(double, int)>, MPI_DOUBLE_INT, builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(float, int)>, MPI_FLOAT_INT, $/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(float, int)>, MPI_FLOAT_INT, builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(int, int>), MPI_2INT, builtin);$/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(int, int>)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(long double, int)>,$/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(long double, int)>, MPI_LONG_DOUBLE_INT, builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(long, int>), MPI_LONG_INT, $/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(long, int>)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(short, int>), MPI_SHORT_INT, $/;"	p	namespace:boost::mpi	signature:(std::pair<BOOST_MPI_LIST2(short, int>)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned __int64, MPI_UNSIGNED_LONG_LONG, builtin); $/;"	p	namespace:boost::mpi	signature:(unsigned __int64, MPI_UNSIGNED_LONG_LONG, builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned char, MPI_UNSIGNED_CHAR, builtin);$/;"	p	namespace:boost::mpi	signature:(unsigned char, MPI_UNSIGNED_CHAR, builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned long long, MPI_UNSIGNED_LONG_LONG, builtin);$/;"	p	namespace:boost::mpi	signature:(unsigned long long, MPI_UNSIGNED_LONG_LONG, builtin)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned long, MPI_UNSIGNED_LONG, integer);$/;"	p	namespace:boost::mpi	signature:(unsigned long, MPI_UNSIGNED_LONG, integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned short, MPI_UNSIGNED_SHORT, integer);$/;"	p	namespace:boost::mpi	signature:(unsigned short, MPI_UNSIGNED_SHORT, integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(unsigned, MPI_UNSIGNED, integer);$/;"	p	namespace:boost::mpi	signature:(unsigned, MPI_UNSIGNED, integer)
boost::mpi::BOOST_MPI_DATATYPE	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(wchar_t, MPI_WCHAR, builtin);$/;"	p	namespace:boost::mpi	signature:(wchar_t, MPI_WCHAR, builtin)
boost::mpi::MPI_2INT	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(int, int>), MPI_2INT, builtin);$/;"	m	namespace:boost::mpi
boost::mpi::MPI_LONG_INT	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(long, int>), MPI_LONG_INT, $/;"	m	namespace:boost::mpi
boost::mpi::MPI_SHORT_INT	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(short, int>), MPI_SHORT_INT, $/;"	m	namespace:boost::mpi
boost::mpi::adjacent_vertices	/usr/include/boost/mpi/graph_communicator.hpp	/^adjacent_vertices(int vertex, const graph_communicator& comm);$/;"	p	namespace:boost::mpi	signature:(int vertex, const graph_communicator& comm)
boost::mpi::all_gather	/usr/include/boost/mpi/collectives.hpp	/^all_gather(const communicator& comm, const T& in_value, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, std::vector<T>& out_values)
boost::mpi::all_gather	/usr/include/boost/mpi/collectives.hpp	/^all_gather(const communicator& comm, const T& in_value, T* out_values);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T* out_values)
boost::mpi::all_gather	/usr/include/boost/mpi/collectives.hpp	/^all_gather(const communicator& comm, const T* in_values, int n, T* out_values);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values)
boost::mpi::all_gather	/usr/include/boost/mpi/collectives.hpp	/^all_gather(const communicator& comm, const T* in_values, int n,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, std::vector<T>& out_values)
boost::mpi::all_gather	/usr/include/boost/mpi/collectives/all_gather.hpp	/^all_gather(const communicator& comm, const T& in_value, $/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, std::vector<T>& out_values)
boost::mpi::all_gather	/usr/include/boost/mpi/collectives/all_gather.hpp	/^all_gather(const communicator& comm, const T& in_value, T* out_values)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T* out_values)
boost::mpi::all_gather	/usr/include/boost/mpi/collectives/all_gather.hpp	/^all_gather(const communicator& comm, const T* in_values, int n, T* out_values)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values)
boost::mpi::all_gather	/usr/include/boost/mpi/collectives/all_gather.hpp	/^all_gather(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, std::vector<T>& out_values)
boost::mpi::all_reduce	/usr/include/boost/mpi/collectives.hpp	/^T all_reduce(const communicator& comm, const T& in_value, Op op);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op)
boost::mpi::all_reduce	/usr/include/boost/mpi/collectives.hpp	/^all_reduce(const communicator& comm, const T& in_value, T& out_value, Op op);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op)
boost::mpi::all_reduce	/usr/include/boost/mpi/collectives.hpp	/^all_reduce(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op)
boost::mpi::all_reduce	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^T all_reduce(const communicator& comm, const T& in_value, Op op)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op)
boost::mpi::all_reduce	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^all_reduce(const communicator& comm, const T& in_value, T& out_value, Op op)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op)
boost::mpi::all_reduce	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^all_reduce(const communicator& comm, const T* in_values, int n, T* out_values,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op)
boost::mpi::all_to_all	/usr/include/boost/mpi/collectives.hpp	/^all_to_all(const communicator& comm, const T* in_values, int n, T* out_values);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values)
boost::mpi::all_to_all	/usr/include/boost/mpi/collectives.hpp	/^all_to_all(const communicator& comm, const std::vector<T>& in_values, int n,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, int n, std::vector<T>& out_values)
boost::mpi::all_to_all	/usr/include/boost/mpi/collectives.hpp	/^all_to_all(const communicator& comm, const std::vector<T>& in_values,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, std::vector<T>& out_values)
boost::mpi::all_to_all	/usr/include/boost/mpi/collectives.hpp	/^void all_to_all(const communicator& comm, const T* in_values, T* out_values);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T* out_values)
boost::mpi::all_to_all	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^all_to_all(const communicator& comm, const T* in_values, T* out_values)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T* out_values)
boost::mpi::all_to_all	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^all_to_all(const communicator& comm, const T* in_values, int n, T* out_values)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values)
boost::mpi::all_to_all	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^all_to_all(const communicator& comm, const std::vector<T>& in_values, int n,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, int n, std::vector<T>& out_values)
boost::mpi::all_to_all	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^all_to_all(const communicator& comm, const std::vector<T>& in_values,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, std::vector<T>& out_values)
boost::mpi::allocator	/usr/include/boost/mpi/allocator.hpp	/^class BOOST_MPI_DECL allocator $/;"	c	namespace:boost::mpi
boost::mpi::allocator	/usr/include/boost/mpi/allocator.hpp	/^class BOOST_MPI_DECL allocator<void> $/;"	c	namespace:boost::mpi
boost::mpi::allocator::address	/usr/include/boost/mpi/allocator.hpp	/^  const_pointer address(const_reference x) const$/;"	f	class:boost::mpi::allocator	access:public	signature:(const_reference x) const
boost::mpi::allocator::address	/usr/include/boost/mpi/allocator.hpp	/^  pointer address(reference x) const$/;"	f	class:boost::mpi::allocator	access:public	signature:(reference x) const
boost::mpi::allocator::allocate	/usr/include/boost/mpi/allocator.hpp	/^  pointer allocate(size_type n, allocator<void>::const_pointer \/*hint*\/ = 0)$/;"	f	class:boost::mpi::allocator	access:public	signature:(size_type n, allocator<void>::const_pointer = 0)
boost::mpi::allocator::allocator	/usr/include/boost/mpi/allocator.hpp	/^  allocator() throw() { }$/;"	f	class:boost::mpi::allocator	access:public	signature:()
boost::mpi::allocator::allocator	/usr/include/boost/mpi/allocator.hpp	/^  allocator(const allocator&) throw() { }$/;"	f	class:boost::mpi::allocator	access:public	signature:(const allocator&)
boost::mpi::allocator::allocator	/usr/include/boost/mpi/allocator.hpp	/^  allocator(const allocator<U>&) throw() { }$/;"	f	class:boost::mpi::allocator	access:public	signature:(const allocator<U>&)
boost::mpi::allocator::const_pointer	/usr/include/boost/mpi/allocator.hpp	/^  typedef const T*        const_pointer;$/;"	t	class:boost::mpi::allocator	access:public
boost::mpi::allocator::const_pointer	/usr/include/boost/mpi/allocator.hpp	/^  typedef const void* const_pointer; $/;"	t	class:boost::mpi::allocator	access:public
boost::mpi::allocator::const_reference	/usr/include/boost/mpi/allocator.hpp	/^  typedef const T&        const_reference;$/;"	t	class:boost::mpi::allocator	access:public
boost::mpi::allocator::construct	/usr/include/boost/mpi/allocator.hpp	/^  void construct(pointer p, const T& val)$/;"	f	class:boost::mpi::allocator	access:public	signature:(pointer p, const T& val)
boost::mpi::allocator::deallocate	/usr/include/boost/mpi/allocator.hpp	/^  void deallocate(pointer p, size_type \/*n*\/)$/;"	f	class:boost::mpi::allocator	access:public	signature:(pointer p, size_type )
boost::mpi::allocator::destroy	/usr/include/boost/mpi/allocator.hpp	/^  void destroy(pointer p)$/;"	f	class:boost::mpi::allocator	access:public	signature:(pointer p)
boost::mpi::allocator::difference_type	/usr/include/boost/mpi/allocator.hpp	/^  typedef std::ptrdiff_t  difference_type;$/;"	t	class:boost::mpi::allocator	access:public
boost::mpi::allocator::max_size	/usr/include/boost/mpi/allocator.hpp	/^  size_type max_size() const throw()$/;"	f	class:boost::mpi::allocator	access:public	signature:() const
boost::mpi::allocator::pointer	/usr/include/boost/mpi/allocator.hpp	/^  typedef T*              pointer;$/;"	t	class:boost::mpi::allocator	access:public
boost::mpi::allocator::pointer	/usr/include/boost/mpi/allocator.hpp	/^  typedef void* pointer; $/;"	t	class:boost::mpi::allocator	access:public
boost::mpi::allocator::rebind	/usr/include/boost/mpi/allocator.hpp	/^  struct rebind $/;"	s	class:boost::mpi::allocator	access:public
boost::mpi::allocator::rebind::other	/usr/include/boost/mpi/allocator.hpp	/^    typedef allocator<U> other; $/;"	t	struct:boost::mpi::allocator::rebind	access:public
boost::mpi::allocator::reference	/usr/include/boost/mpi/allocator.hpp	/^  typedef T&              reference;$/;"	t	class:boost::mpi::allocator	access:public
boost::mpi::allocator::size_type	/usr/include/boost/mpi/allocator.hpp	/^  typedef std::size_t     size_type;$/;"	t	class:boost::mpi::allocator	access:public
boost::mpi::allocator::value_type	/usr/include/boost/mpi/allocator.hpp	/^  typedef T               value_type;$/;"	t	class:boost::mpi::allocator	access:public
boost::mpi::allocator::value_type	/usr/include/boost/mpi/allocator.hpp	/^  typedef void value_type; $/;"	t	class:boost::mpi::allocator	access:public
boost::mpi::allocator::~allocator	/usr/include/boost/mpi/allocator.hpp	/^  ~allocator() throw() { }$/;"	f	class:boost::mpi::allocator	access:public	signature:()
boost::mpi::any_source	/usr/include/boost/mpi/communicator.hpp	/^const int any_source = MPI_ANY_SOURCE;$/;"	m	namespace:boost::mpi
boost::mpi::any_tag	/usr/include/boost/mpi/communicator.hpp	/^const int any_tag = MPI_ANY_TAG;$/;"	m	namespace:boost::mpi
boost::mpi::binary_buffer_iprimitive	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^class BOOST_MPI_DECL binary_buffer_iprimitive$/;"	c	namespace:boost::mpi
boost::mpi::binary_buffer_iprimitive::address	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void const* address () const$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:() const
boost::mpi::binary_buffer_iprimitive::address	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void* address ()$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:()
boost::mpi::binary_buffer_iprimitive::binary_buffer_iprimitive	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    binary_buffer_iprimitive(buffer_type & b, MPI_Comm const &, int position = 0)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(buffer_type & b, MPI_Comm const &, int position = 0)
boost::mpi::binary_buffer_iprimitive::buffer_	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    buffer_type & buffer_;$/;"	m	class:boost::mpi::binary_buffer_iprimitive	access:private
boost::mpi::binary_buffer_iprimitive::buffer_type	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    typedef std::vector<char, allocator<char> > buffer_type;$/;"	t	class:boost::mpi::binary_buffer_iprimitive	access:public
boost::mpi::binary_buffer_iprimitive::load	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load( T & t)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:( T & t)
boost::mpi::binary_buffer_iprimitive::load	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load(serialization::array<T> const& x)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(serialization::array<T> const& x)
boost::mpi::binary_buffer_iprimitive::load	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load(std::basic_string<CharType> & s)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(std::basic_string<CharType> & s)
boost::mpi::binary_buffer_iprimitive::load_array	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load_array(serialization::array<T> const& x, unsigned int \/* file_version *\/)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(serialization::array<T> const& x, unsigned int )
boost::mpi::binary_buffer_iprimitive::load_binary	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load_binary(void *address, std::size_t count)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(void *address, std::size_t count)
boost::mpi::binary_buffer_iprimitive::load_impl	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load_impl(void * p, int l)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:private	signature:(void * p, int l)
boost::mpi::binary_buffer_iprimitive::position	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    int position;$/;"	m	class:boost::mpi::binary_buffer_iprimitive	access:private
boost::mpi::binary_buffer_iprimitive::resize	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void resize(std::size_t s)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(std::size_t s)
boost::mpi::binary_buffer_iprimitive::size	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    const std::size_t& size() const$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:() const
boost::mpi::binary_buffer_iprimitive::size_	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    mutable std::size_t size_;$/;"	m	class:boost::mpi::binary_buffer_iprimitive	access:private
boost::mpi::binary_buffer_iprimitive::use_array_optimization	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    typedef serialization::is_bitwise_serializable<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::binary_buffer_iprimitive	access:public
boost::mpi::binary_buffer_oprimitive	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^class BOOST_MPI_DECL binary_buffer_oprimitive$/;"	c	namespace:boost::mpi
boost::mpi::binary_buffer_oprimitive::address	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void const * address() const$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:() const
boost::mpi::binary_buffer_oprimitive::binary_buffer_oprimitive	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    binary_buffer_oprimitive(buffer_type & b, MPI_Comm const &)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(buffer_type & b, MPI_Comm const &)
boost::mpi::binary_buffer_oprimitive::buffer_	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^  buffer_type& buffer_;$/;"	m	class:boost::mpi::binary_buffer_oprimitive	access:private
boost::mpi::binary_buffer_oprimitive::buffer_type	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    typedef std::vector<char, allocator<char> > buffer_type;$/;"	t	class:boost::mpi::binary_buffer_oprimitive	access:public
boost::mpi::binary_buffer_oprimitive::save	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save(const T & t)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(const T & t)
boost::mpi::binary_buffer_oprimitive::save	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save(const std::basic_string<CharType> &s)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(const std::basic_string<CharType> &s)
boost::mpi::binary_buffer_oprimitive::save	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save(serialization::array<T> const& x)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(serialization::array<T> const& x)
boost::mpi::binary_buffer_oprimitive::save_array	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save_array(serialization::array<T> const& x, unsigned int \/* file_version *\/)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(serialization::array<T> const& x, unsigned int )
boost::mpi::binary_buffer_oprimitive::save_binary	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save_binary(void const *address, std::size_t count)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(void const *address, std::size_t count)
boost::mpi::binary_buffer_oprimitive::save_impl	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save_impl(void const * p, int l)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:private	signature:(void const * p, int l)
boost::mpi::binary_buffer_oprimitive::size	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    const std::size_t& size() const$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:() const
boost::mpi::binary_buffer_oprimitive::size_	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^  mutable std::size_t size_;$/;"	m	class:boost::mpi::binary_buffer_oprimitive	access:private
boost::mpi::binary_buffer_oprimitive::use_array_optimization	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    typedef serialization::is_bitwise_serializable<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::binary_buffer_oprimitive	access:public
boost::mpi::bitwise_and	/usr/include/boost/mpi/operations.hpp	/^struct bitwise_and : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
boost::mpi::bitwise_and::operator ()	/usr/include/boost/mpi/operations.hpp	/^  T operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::bitwise_and	access:public	signature:(const T& x, const T& y) const
boost::mpi::bitwise_or	/usr/include/boost/mpi/operations.hpp	/^struct bitwise_or : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
boost::mpi::bitwise_or::operator ()	/usr/include/boost/mpi/operations.hpp	/^  T operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::bitwise_or	access:public	signature:(const T& x, const T& y) const
boost::mpi::bitwise_xor	/usr/include/boost/mpi/operations.hpp	/^struct bitwise_xor : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
boost::mpi::bitwise_xor::operator ()	/usr/include/boost/mpi/operations.hpp	/^  T operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::bitwise_xor	access:public	signature:(const T& x, const T& y) const
boost::mpi::broadcast	/usr/include/boost/mpi/collectives.hpp	/^broadcast(const communicator& comm, const skeleton_proxy<T>& value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const skeleton_proxy<T>& value, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives.hpp	/^void broadcast(const communicator& comm, T& value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, T& value, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives.hpp	/^void broadcast(const communicator& comm, T* values, int n, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, T* values, int n, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives.hpp	/^void broadcast(const communicator& comm, skeleton_proxy<T>& value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, skeleton_proxy<T>& value, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<const packed_oarchive>(const communicator& comm,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const packed_oarchive& oa, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<const packed_skeleton_oarchive>(const communicator& comm,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const packed_skeleton_oarchive& oa, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<packed_iarchive>(const communicator& comm, packed_iarchive& ia,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, packed_iarchive& ia, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<packed_oarchive>(const communicator& comm, packed_oarchive& oa,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, packed_oarchive& oa, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<packed_skeleton_iarchive>(const communicator& comm,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, packed_skeleton_iarchive& ia, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<packed_skeleton_oarchive>(const communicator& comm,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, packed_skeleton_oarchive& oa, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^void broadcast(const communicator& comm, T& value, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, T& value, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^void broadcast(const communicator& comm, T* values, int n, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, T* values, int n, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^void broadcast<const content>(const communicator& comm, const content& c,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const content& c, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^void broadcast<content>(const communicator& comm, content& c, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, content& c, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/detail/broadcast_sc.hpp	/^broadcast(const communicator& comm, const skeleton_proxy<T>& proxy, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const skeleton_proxy<T>& proxy, int root)
boost::mpi::broadcast	/usr/include/boost/mpi/detail/broadcast_sc.hpp	/^broadcast(const communicator& comm, skeleton_proxy<T>& proxy, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, skeleton_proxy<T>& proxy, int root)
boost::mpi::builtin	/usr/include/boost/mpi/datatype.hpp	/^                   builtin);$/;"	m	namespace:boost::mpi
boost::mpi::builtin	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(int, int>), MPI_2INT, builtin);$/;"	m	namespace:boost::mpi
boost::mpi::comm_attach	/usr/include/boost/mpi/communicator.hpp	/^enum comm_create_kind { comm_duplicate, comm_take_ownership, comm_attach };$/;"	e	enum:boost::mpi::comm_create_kind
boost::mpi::comm_create_kind	/usr/include/boost/mpi/communicator.hpp	/^enum comm_create_kind { comm_duplicate, comm_take_ownership, comm_attach };$/;"	g	namespace:boost::mpi
boost::mpi::comm_duplicate	/usr/include/boost/mpi/communicator.hpp	/^enum comm_create_kind { comm_duplicate, comm_take_ownership, comm_attach };$/;"	e	enum:boost::mpi::comm_create_kind
boost::mpi::comm_take_ownership	/usr/include/boost/mpi/communicator.hpp	/^enum comm_create_kind { comm_duplicate, comm_take_ownership, comm_attach };$/;"	e	enum:boost::mpi::comm_create_kind
boost::mpi::communicator	/usr/include/boost/mpi/communicator.hpp	/^class BOOST_MPI_DECL communicator$/;"	c	namespace:boost::mpi
boost::mpi::communicator::abort	/usr/include/boost/mpi/communicator.hpp	/^  void abort(int errcode) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int errcode) const
boost::mpi::communicator::array_irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_irecv_impl(int source, int tag, T* values, int n, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T* values, int n, mpl::false_) const
boost::mpi::communicator::array_irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_irecv_impl(int source, int tag, T* values, int n, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T* values, int n, mpl::true_) const
boost::mpi::communicator::array_irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_irecv_impl(int source, int tag, T* values, int n, $/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n, mpl::false_) const
boost::mpi::communicator::array_irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_irecv_impl(int source, int tag, T* values, int n, $/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n, mpl::true_) const
boost::mpi::communicator::array_isend_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_isend_impl(int dest, int tag, const T* values, int n, $/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T* values, int n, mpl::false_) const
boost::mpi::communicator::array_isend_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_isend_impl(int dest, int tag, const T* values, int n, $/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T* values, int n, mpl::true_) const
boost::mpi::communicator::array_isend_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_isend_impl(int dest, int tag, const T* values, int n, $/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n, mpl::false_) const
boost::mpi::communicator::array_isend_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_isend_impl(int dest, int tag, const T* values, int n,$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n, mpl::true_) const
boost::mpi::communicator::array_recv_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_recv_impl(int source, int tag, T* values, int n, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T* values, int n, mpl::false_) const
boost::mpi::communicator::array_recv_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_recv_impl(int source, int tag, T* values, int n, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T* values, int n, mpl::true_) const
boost::mpi::communicator::array_recv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_recv_impl(int source, int tag, T* values, int n, $/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n, mpl::false_) const
boost::mpi::communicator::array_recv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_recv_impl(int source, int tag, T* values, int n, $/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n, mpl::true_) const
boost::mpi::communicator::array_send_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_send_impl(int dest, int tag, const T* values, int n, $/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T* values, int n, mpl::false_) const
boost::mpi::communicator::array_send_impl	/usr/include/boost/mpi/communicator.hpp	/^  array_send_impl(int dest, int tag, const T* values, int n, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T* values, int n, mpl::true_) const
boost::mpi::communicator::array_send_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_send_impl(int dest, int tag, const T* values, int n,$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n, mpl::false_) const
boost::mpi::communicator::array_send_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::array_send_impl(int dest, int tag, const T* values, int n,$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n, mpl::true_) const
boost::mpi::communicator::as_graph_communicator	/usr/include/boost/mpi/communicator.hpp	/^  optional<graph_communicator> as_graph_communicator() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
boost::mpi::communicator::as_intercommunicator	/usr/include/boost/mpi/communicator.hpp	/^  optional<intercommunicator> as_intercommunicator() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
boost::mpi::communicator::barrier	/usr/include/boost/mpi/communicator.hpp	/^  void (barrier)() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
boost::mpi::communicator::barrier	/usr/include/boost/mpi/communicator.hpp	/^  void barrier() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
boost::mpi::communicator::comm_free	/usr/include/boost/mpi/communicator.hpp	/^  struct comm_free$/;"	s	class:boost::mpi::communicator	access:protected
boost::mpi::communicator::comm_free::operator ()	/usr/include/boost/mpi/communicator.hpp	/^    void operator()(MPI_Comm* comm) const$/;"	f	struct:boost::mpi::communicator::comm_free	access:public	signature:(MPI_Comm* comm) const
boost::mpi::communicator::comm_ptr	/usr/include/boost/mpi/communicator.hpp	/^  shared_ptr<MPI_Comm> comm_ptr;$/;"	m	class:boost::mpi::communicator	access:protected
boost::mpi::communicator::communicator	/usr/include/boost/mpi/communicator.hpp	/^  communicator();$/;"	p	class:boost::mpi::communicator	access:public	signature:()
boost::mpi::communicator::communicator	/usr/include/boost/mpi/communicator.hpp	/^  communicator(const MPI_Comm& comm, comm_create_kind kind);$/;"	p	class:boost::mpi::communicator	access:public	signature:(const MPI_Comm& comm, comm_create_kind kind)
boost::mpi::communicator::communicator	/usr/include/boost/mpi/communicator.hpp	/^  communicator(const communicator& comm, const boost::mpi::group& subgroup);$/;"	p	class:boost::mpi::communicator	access:public	signature:(const communicator& comm, const boost::mpi::group& subgroup)
boost::mpi::communicator::group	/usr/include/boost/mpi/communicator.hpp	/^  boost::mpi::group group() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
boost::mpi::communicator::has_cartesian_topology	/usr/include/boost/mpi/communicator.hpp	/^  bool has_cartesian_topology() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
boost::mpi::communicator::iprobe	/usr/include/boost/mpi/communicator.hpp	/^  iprobe(int source = any_source, int tag = any_tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source = any_source, int tag = any_tag) const
boost::mpi::communicator::irecv	/usr/include/boost/mpi/communicator.hpp	/^  request irecv(int source, int tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag) const
boost::mpi::communicator::irecv	/usr/include/boost/mpi/communicator.hpp	/^  request irecv(int source, int tag, T& value) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, T& value) const
boost::mpi::communicator::irecv	/usr/include/boost/mpi/communicator.hpp	/^  request irecv(int source, int tag, T* values, int n) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, T* values, int n) const
boost::mpi::communicator::irecv	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv(int source, int tag, T& value) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value) const
boost::mpi::communicator::irecv	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv<const content>(int source, int tag,$/;"	p	class:boost::mpi::communicator	signature:(int source, int tag, const content& c) const
boost::mpi::communicator::irecv	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv<content>(int source, int tag,$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, content& c) const
boost::mpi::communicator::irecv	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv<packed_skeleton_iarchive>$/;"	p	class:boost::mpi::communicator	signature:(int source, int tag, packed_skeleton_iarchive& ar) const
boost::mpi::communicator::irecv	/usr/include/boost/mpi/communicator.hpp	/^request communicator::irecv(int source, int tag, T* values, int n) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n) const
boost::mpi::communicator::irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^  request irecv_impl(int source, int tag, T& value, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T& value, mpl::false_) const
boost::mpi::communicator::irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^  request irecv_impl(int source, int tag, T& value, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T& value, mpl::true_) const
boost::mpi::communicator::irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv_impl(int source, int tag, T& value, mpl::false_) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value, mpl::false_) const
boost::mpi::communicator::irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv_impl(int source, int tag, T& value, mpl::true_) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value, mpl::true_) const
boost::mpi::communicator::isend	/usr/include/boost/mpi/communicator.hpp	/^  request isend(int dest, int tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag) const
boost::mpi::communicator::isend	/usr/include/boost/mpi/communicator.hpp	/^  request isend(int dest, int tag, const T& value) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const T& value) const
boost::mpi::communicator::isend	/usr/include/boost/mpi/communicator.hpp	/^  request isend(int dest, int tag, const T* values, int n) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const T* values, int n) const
boost::mpi::communicator::isend	/usr/include/boost/mpi/communicator.hpp	/^  request isend(int dest, int tag, const skeleton_proxy<T>& proxy) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const skeleton_proxy<T>& proxy) const
boost::mpi::communicator::isend	/usr/include/boost/mpi/communicator.hpp	/^communicator::isend<content>(int dest, int tag, const content& c) const;$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const content& c) const
boost::mpi::communicator::isend	/usr/include/boost/mpi/communicator.hpp	/^communicator::isend<packed_oarchive>(int dest, int tag,$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const packed_oarchive& ar) const
boost::mpi::communicator::isend	/usr/include/boost/mpi/communicator.hpp	/^communicator::isend<packed_skeleton_oarchive>$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const packed_skeleton_oarchive& ar) const
boost::mpi::communicator::isend	/usr/include/boost/mpi/communicator.hpp	/^request communicator::isend(int dest, int tag, const T& value) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value) const
boost::mpi::communicator::isend	/usr/include/boost/mpi/communicator.hpp	/^request communicator::isend(int dest, int tag, const T* values, int n) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n) const
boost::mpi::communicator::isend	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^communicator::isend(int dest, int tag, const skeleton_proxy<T>& proxy) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const skeleton_proxy<T>& proxy) const
boost::mpi::communicator::isend_impl	/usr/include/boost/mpi/communicator.hpp	/^  request isend_impl(int dest, int tag, const T& value, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T& value, mpl::false_) const
boost::mpi::communicator::isend_impl	/usr/include/boost/mpi/communicator.hpp	/^  request isend_impl(int dest, int tag, const T& value, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T& value, mpl::true_) const
boost::mpi::communicator::isend_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::isend_impl(int dest, int tag, const T& value, mpl::false_) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value, mpl::false_) const
boost::mpi::communicator::isend_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::isend_impl(int dest, int tag, const T& value, mpl::true_) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value, mpl::true_) const
boost::mpi::communicator::operator MPI_Comm	/usr/include/boost/mpi/communicator.hpp	/^  operator MPI_Comm() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
boost::mpi::communicator::operator bool	/usr/include/boost/mpi/communicator.hpp	/^  operator bool() const { return (bool)comm_ptr; }$/;"	f	class:boost::mpi::communicator	access:public	signature:() const
boost::mpi::communicator::probe	/usr/include/boost/mpi/communicator.hpp	/^  status probe(int source = any_source, int tag = any_tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source = any_source, int tag = any_tag) const
boost::mpi::communicator::rank	/usr/include/boost/mpi/communicator.hpp	/^  int rank() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
boost::mpi::communicator::recv	/usr/include/boost/mpi/communicator.hpp	/^  status recv(int source, int tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/communicator.hpp	/^  status recv(int source, int tag, T& value) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, T& value) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/communicator.hpp	/^  status recv(int source, int tag, T* values, int n) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, T* values, int n) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/communicator.hpp	/^  status recv(int source, int tag, const skeleton_proxy<T>& proxy) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, const skeleton_proxy<T>& proxy) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/communicator.hpp	/^  status recv(int source, int tag, skeleton_proxy<T>& proxy) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, skeleton_proxy<T>& proxy) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/communicator.hpp	/^communicator::recv<const content>(int source, int tag,$/;"	p	class:boost::mpi::communicator	signature:(int source, int tag, const content& c) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/communicator.hpp	/^communicator::recv<content>(int source, int tag,$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, content& c) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/communicator.hpp	/^communicator::recv<packed_iarchive>(int source, int tag,$/;"	p	class:boost::mpi::communicator	signature:(int source, int tag, packed_iarchive& ar) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/communicator.hpp	/^communicator::recv<packed_skeleton_iarchive>$/;"	p	class:boost::mpi::communicator	signature:(int source, int tag, packed_skeleton_iarchive& ar) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/communicator.hpp	/^status communicator::recv(int source, int tag, T& value) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/communicator.hpp	/^status communicator::recv(int source, int tag, T* values, int n) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^communicator::recv(int source, int tag, const skeleton_proxy<T>& proxy) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, const skeleton_proxy<T>& proxy) const
boost::mpi::communicator::recv	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^status communicator::recv(int source, int tag, skeleton_proxy<T>& proxy) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, skeleton_proxy<T>& proxy) const
boost::mpi::communicator::recv_impl	/usr/include/boost/mpi/communicator.hpp	/^  status recv_impl(int source, int tag, T& value, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T& value, mpl::false_) const
boost::mpi::communicator::recv_impl	/usr/include/boost/mpi/communicator.hpp	/^  status recv_impl(int source, int tag, T& value, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T& value, mpl::true_) const
boost::mpi::communicator::recv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::recv_impl(int source, int tag, T& value, mpl::false_) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value, mpl::false_) const
boost::mpi::communicator::recv_impl	/usr/include/boost/mpi/communicator.hpp	/^status communicator::recv_impl(int source, int tag, T& value, mpl::true_) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value, mpl::true_) const
boost::mpi::communicator::send	/usr/include/boost/mpi/communicator.hpp	/^  void send(int dest, int tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag) const
boost::mpi::communicator::send	/usr/include/boost/mpi/communicator.hpp	/^  void send(int dest, int tag, const T& value) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const T& value) const
boost::mpi::communicator::send	/usr/include/boost/mpi/communicator.hpp	/^  void send(int dest, int tag, const T* values, int n) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const T* values, int n) const
boost::mpi::communicator::send	/usr/include/boost/mpi/communicator.hpp	/^  void send(int dest, int tag, const skeleton_proxy<T>& proxy) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const skeleton_proxy<T>& proxy) const
boost::mpi::communicator::send	/usr/include/boost/mpi/communicator.hpp	/^communicator::send<content>(int dest, int tag, const content& c) const;$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const content& c) const
boost::mpi::communicator::send	/usr/include/boost/mpi/communicator.hpp	/^communicator::send<packed_oarchive>(int dest, int tag,$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const packed_oarchive& ar) const
boost::mpi::communicator::send	/usr/include/boost/mpi/communicator.hpp	/^communicator::send<packed_skeleton_oarchive>$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const packed_skeleton_oarchive& ar) const
boost::mpi::communicator::send	/usr/include/boost/mpi/communicator.hpp	/^void communicator::send(int dest, int tag, const T& value) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value) const
boost::mpi::communicator::send	/usr/include/boost/mpi/communicator.hpp	/^void communicator::send(int dest, int tag, const T* values, int n) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n) const
boost::mpi::communicator::send	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^communicator::send(int dest, int tag, const skeleton_proxy<T>& proxy) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const skeleton_proxy<T>& proxy) const
boost::mpi::communicator::send_impl	/usr/include/boost/mpi/communicator.hpp	/^  void send_impl(int dest, int tag, const T& value, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T& value, mpl::false_) const
boost::mpi::communicator::send_impl	/usr/include/boost/mpi/communicator.hpp	/^  void send_impl(int dest, int tag, const T& value, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T& value, mpl::true_) const
boost::mpi::communicator::send_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::send_impl(int dest, int tag, const T& value, mpl::false_) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value, mpl::false_) const
boost::mpi::communicator::send_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::send_impl(int dest, int tag, const T& value, mpl::true_) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value, mpl::true_) const
boost::mpi::communicator::size	/usr/include/boost/mpi/communicator.hpp	/^  int size() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
boost::mpi::communicator::split	/usr/include/boost/mpi/communicator.hpp	/^  communicator split(int color) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int color) const
boost::mpi::communicator::split	/usr/include/boost/mpi/communicator.hpp	/^  communicator split(int color, int key) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int color, int key) const
boost::mpi::content	/usr/include/boost/mpi/skeleton_and_content.hpp	/^class BOOST_MPI_DECL content$/;"	c	namespace:boost::mpi
boost::mpi::content::commit	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  void commit()$/;"	f	class:boost::mpi::content	access:public	signature:()
boost::mpi::content::content	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  content() {}$/;"	f	class:boost::mpi::content	access:public	signature:()
boost::mpi::content::content	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  content(MPI_Datatype d, bool committed=true)$/;"	f	class:boost::mpi::content	access:public	signature:(MPI_Datatype d, bool committed=true)
boost::mpi::content::get_mpi_datatype	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  MPI_Datatype get_mpi_datatype() const$/;"	f	class:boost::mpi::content	access:public	signature:() const
boost::mpi::content::holder	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  boost::shared_ptr<detail::mpi_datatype_holder> holder;$/;"	m	class:boost::mpi::content	access:private
boost::mpi::content::operator =	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  const content& operator=(MPI_Datatype d)$/;"	f	class:boost::mpi::content	access:public	signature:(MPI_Datatype d)
boost::mpi::detail	/usr/include/boost/mpi/collectives/all_gather.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/collectives/broadcast.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/collectives/gather.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/collectives/reduce.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/collectives/scan.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/collectives/scatter.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/communicator.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/datatype.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/computation_tree.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/point_to_point.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/graph_communicator.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/operations.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail	/usr/include/boost/mpi/skeleton_and_content.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
boost::mpi::detail::all_gather_impl	/usr/include/boost/mpi/collectives/all_gather.hpp	/^  all_gather_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, mpl::false_)
boost::mpi::detail::all_gather_impl	/usr/include/boost/mpi/collectives/all_gather.hpp	/^  all_gather_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, mpl::true_)
boost::mpi::detail::all_reduce_impl	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^  all_reduce_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op , mpl::true_ , mpl::true_ )
boost::mpi::detail::all_reduce_impl	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^  all_reduce_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, mpl::false_ , mpl::false_ )
boost::mpi::detail::all_reduce_impl	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^  all_reduce_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, mpl::false_ , mpl::true_ )
boost::mpi::detail::all_to_all_impl	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^  all_to_all_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, mpl::true_)
boost::mpi::detail::all_to_all_impl	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^  all_to_all_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, mpl::false_)
boost::mpi::detail::broadcast_impl	/usr/include/boost/mpi/collectives/broadcast.hpp	/^  broadcast_impl(const communicator& comm, T* values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, T* values, int n, int root, mpl::false_)
boost::mpi::detail::broadcast_impl	/usr/include/boost/mpi/collectives/broadcast.hpp	/^  broadcast_impl(const communicator& comm, T* values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, T* values, int n, int root, mpl::true_)
boost::mpi::detail::build_mpi_datatype_for_bool	/usr/include/boost/mpi/datatype.hpp	/^  inline MPI_Datatype build_mpi_datatype_for_bool()$/;"	f	namespace:boost::mpi::detail	signature:()
boost::mpi::detail::comm_adj_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  class comm_adj_iterator$/;"	c	namespace:boost::mpi::detail	inherits:iterator_facade
boost::mpi::detail::comm_adj_iterator::advance	/usr/include/boost/mpi/graph_communicator.hpp	/^    void advance(int n) { index += n; }$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:(int n)
boost::mpi::detail::comm_adj_iterator::comm_adj_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_adj_iterator() { }$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:public	signature:()
boost::mpi::detail::comm_adj_iterator::comm_adj_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_adj_iterator(shared_array<int> neighbors, int index)$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:public	signature:(shared_array<int> neighbors, int index)
boost::mpi::detail::comm_adj_iterator::decrement	/usr/include/boost/mpi/graph_communicator.hpp	/^    void decrement() { --index; }$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:()
boost::mpi::detail::comm_adj_iterator::dereference	/usr/include/boost/mpi/graph_communicator.hpp	/^    int dereference() const { return neighbors[index]; }$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:() const
boost::mpi::detail::comm_adj_iterator::distance_to	/usr/include/boost/mpi/graph_communicator.hpp	/^    int distance_to(const comm_adj_iterator& other) const$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:(const comm_adj_iterator& other) const
boost::mpi::detail::comm_adj_iterator::equal	/usr/include/boost/mpi/graph_communicator.hpp	/^    bool equal(const comm_adj_iterator& other) const$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:(const comm_adj_iterator& other) const
boost::mpi::detail::comm_adj_iterator::increment	/usr/include/boost/mpi/graph_communicator.hpp	/^    void increment() { ++index; }$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:()
boost::mpi::detail::comm_adj_iterator::index	/usr/include/boost/mpi/graph_communicator.hpp	/^    int index;$/;"	m	class:boost::mpi::detail::comm_adj_iterator	access:protected
boost::mpi::detail::comm_adj_iterator::neighbors	/usr/include/boost/mpi/graph_communicator.hpp	/^    shared_array<int> neighbors;$/;"	m	class:boost::mpi::detail::comm_adj_iterator	access:protected
boost::mpi::detail::comm_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  class comm_edge_iterator$/;"	c	namespace:boost::mpi::detail	inherits:iterator_facade
boost::mpi::detail::comm_edge_iterator::comm_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_edge_iterator() { }$/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:public	signature:()
boost::mpi::detail::comm_edge_iterator::comm_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_edge_iterator(int nedges) : edge_index(nedges) { }$/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:public	signature:(int nedges)
boost::mpi::detail::comm_edge_iterator::comm_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_edge_iterator(shared_array<int> indices, shared_array<int> edges)$/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:public	signature:(shared_array<int> indices, shared_array<int> edges)
boost::mpi::detail::comm_edge_iterator::dereference	/usr/include/boost/mpi/graph_communicator.hpp	/^    const std::pair<int, int>& dereference() const$/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:protected	signature:() const
boost::mpi::detail::comm_edge_iterator::edge	/usr/include/boost/mpi/graph_communicator.hpp	/^    mutable std::pair<int, int> edge;$/;"	m	class:boost::mpi::detail::comm_edge_iterator	access:protected
boost::mpi::detail::comm_edge_iterator::edge_index	/usr/include/boost/mpi/graph_communicator.hpp	/^    int edge_index;$/;"	m	class:boost::mpi::detail::comm_edge_iterator	access:protected
boost::mpi::detail::comm_edge_iterator::edges	/usr/include/boost/mpi/graph_communicator.hpp	/^    shared_array<int> edges;$/;"	m	class:boost::mpi::detail::comm_edge_iterator	access:protected
boost::mpi::detail::comm_edge_iterator::equal	/usr/include/boost/mpi/graph_communicator.hpp	/^    bool equal(const comm_edge_iterator& other) const$/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:protected	signature:(const comm_edge_iterator& other) const
boost::mpi::detail::comm_edge_iterator::increment	/usr/include/boost/mpi/graph_communicator.hpp	/^    void increment() $/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:protected	signature:()
boost::mpi::detail::comm_edge_iterator::indices	/usr/include/boost/mpi/graph_communicator.hpp	/^    shared_array<int> indices;$/;"	m	class:boost::mpi::detail::comm_edge_iterator	access:protected
boost::mpi::detail::comm_out_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  class comm_out_edge_iterator$/;"	c	namespace:boost::mpi::detail	inherits:iterator_facade
boost::mpi::detail::comm_out_edge_iterator::advance	/usr/include/boost/mpi/graph_communicator.hpp	/^    void advance(int n) { index += n; }$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:(int n)
boost::mpi::detail::comm_out_edge_iterator::comm_out_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_out_edge_iterator() { }$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:public	signature:()
boost::mpi::detail::comm_out_edge_iterator::comm_out_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_out_edge_iterator(int source, shared_array<int> neighbors, int index)$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:public	signature:(int source, shared_array<int> neighbors, int index)
boost::mpi::detail::comm_out_edge_iterator::decrement	/usr/include/boost/mpi/graph_communicator.hpp	/^    void decrement() { --index; }$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:()
boost::mpi::detail::comm_out_edge_iterator::dereference	/usr/include/boost/mpi/graph_communicator.hpp	/^    const std::pair<int, int>& dereference() const$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:() const
boost::mpi::detail::comm_out_edge_iterator::distance_to	/usr/include/boost/mpi/graph_communicator.hpp	/^    int distance_to(const comm_out_edge_iterator& other) const$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:(const comm_out_edge_iterator& other) const
boost::mpi::detail::comm_out_edge_iterator::edge	/usr/include/boost/mpi/graph_communicator.hpp	/^    mutable std::pair<int, int> edge;$/;"	m	class:boost::mpi::detail::comm_out_edge_iterator	access:protected
boost::mpi::detail::comm_out_edge_iterator::equal	/usr/include/boost/mpi/graph_communicator.hpp	/^    bool equal(const comm_out_edge_iterator& other) const$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:(const comm_out_edge_iterator& other) const
boost::mpi::detail::comm_out_edge_iterator::increment	/usr/include/boost/mpi/graph_communicator.hpp	/^    void increment() { ++index; }$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:()
boost::mpi::detail::comm_out_edge_iterator::index	/usr/include/boost/mpi/graph_communicator.hpp	/^    int index;$/;"	m	class:boost::mpi::detail::comm_out_edge_iterator	access:protected
boost::mpi::detail::comm_out_edge_iterator::neighbors	/usr/include/boost/mpi/graph_communicator.hpp	/^    shared_array<int> neighbors;$/;"	m	class:boost::mpi::detail::comm_out_edge_iterator	access:protected
boost::mpi::detail::computation_tree	/usr/include/boost/mpi/detail/computation_tree.hpp	/^class computation_tree$/;"	c	namespace:boost::mpi::detail
boost::mpi::detail::computation_tree::branching_factor	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int branching_factor() const { return branching_factor_; }$/;"	f	class:boost::mpi::detail::computation_tree	access:public	signature:() const
boost::mpi::detail::computation_tree::branching_factor_	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int branching_factor_;$/;"	m	class:boost::mpi::detail::computation_tree	access:protected
boost::mpi::detail::computation_tree::child_begin	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int child_begin() const;$/;"	p	class:boost::mpi::detail::computation_tree	access:public	signature:() const
boost::mpi::detail::computation_tree::computation_tree	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  computation_tree(int rank, int size, int root, int branching_factor = -1);$/;"	p	class:boost::mpi::detail::computation_tree	access:public	signature:(int rank, int size, int root, int branching_factor = -1)
boost::mpi::detail::computation_tree::default_branching_factor	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  static int default_branching_factor;$/;"	m	class:boost::mpi::detail::computation_tree	access:public
boost::mpi::detail::computation_tree::level	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int level() const { return level_; }$/;"	f	class:boost::mpi::detail::computation_tree	access:public	signature:() const
boost::mpi::detail::computation_tree::level_	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int level_;$/;"	m	class:boost::mpi::detail::computation_tree	access:protected
boost::mpi::detail::computation_tree::level_index	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int level_index(int n) const;$/;"	p	class:boost::mpi::detail::computation_tree	access:public	signature:(int n) const
boost::mpi::detail::computation_tree::parent	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int parent() const;$/;"	p	class:boost::mpi::detail::computation_tree	access:public	signature:() const
boost::mpi::detail::computation_tree::rank	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int rank;$/;"	m	class:boost::mpi::detail::computation_tree	access:protected
boost::mpi::detail::computation_tree::root	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int root;$/;"	m	class:boost::mpi::detail::computation_tree	access:protected
boost::mpi::detail::computation_tree::size	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int size;$/;"	m	class:boost::mpi::detail::computation_tree	access:protected
boost::mpi::detail::content_oarchive	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^  class BOOST_MPI_DECL content_oarchive$/;"	c	namespace:boost::mpi::detail	inherits:mpi_datatype_primitive,ignore_skeleton_oarchive
boost::mpi::detail::content_oarchive::c	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^    content c;$/;"	m	class:boost::mpi::detail::content_oarchive	access:private
boost::mpi::detail::content_oarchive::committed	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^    bool committed;$/;"	m	class:boost::mpi::detail::content_oarchive	access:private
boost::mpi::detail::content_oarchive::content_oarchive	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^      content_oarchive()$/;"	f	class:boost::mpi::detail::content_oarchive	access:public	signature:()
boost::mpi::detail::content_oarchive::get_content	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^      content get_content()$/;"	f	class:boost::mpi::detail::content_oarchive	access:public	signature:()
boost::mpi::detail::forward_iprimitive	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^class forward_iprimitive$/;"	c	namespace:boost::mpi::detail
boost::mpi::detail::forward_iprimitive::forward_iprimitive	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    forward_iprimitive(implementation_archive_type& ar)$/;"	f	class:boost::mpi::detail::forward_iprimitive	access:public	signature:(implementation_archive_type& ar)
boost::mpi::detail::forward_iprimitive::implementation_archive	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    implementation_archive_type& implementation_archive;$/;"	m	class:boost::mpi::detail::forward_iprimitive	access:private
boost::mpi::detail::forward_iprimitive::implementation_archive_type	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    typedef ImplementationArchive implementation_archive_type;$/;"	t	class:boost::mpi::detail::forward_iprimitive	access:public
boost::mpi::detail::forward_iprimitive::load	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    void load(T & t)$/;"	f	class:boost::mpi::detail::forward_iprimitive	access:public	signature:(T & t)
boost::mpi::detail::forward_iprimitive::load_array	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    void load_array(serialization::array<T> & x, unsigned int file_version )$/;"	f	class:boost::mpi::detail::forward_iprimitive	access:public	signature:(serialization::array<T> & x, unsigned int file_version )
boost::mpi::detail::forward_iprimitive::load_binary	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    void load_binary(void * address, std::size_t count )$/;"	f	class:boost::mpi::detail::forward_iprimitive	access:public	signature:(void * address, std::size_t count )
boost::mpi::detail::forward_iprimitive::use_array_optimization	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    typedef typename ImplementationArchive::use_array_optimization use_array_optimization;    $/;"	t	class:boost::mpi::detail::forward_iprimitive	access:public
boost::mpi::detail::forward_oprimitive	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^class forward_oprimitive$/;"	c	namespace:boost::mpi::detail
boost::mpi::detail::forward_oprimitive::forward_oprimitive	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    forward_oprimitive(implementation_archive_type& ar)$/;"	f	class:boost::mpi::detail::forward_oprimitive	access:public	signature:(implementation_archive_type& ar)
boost::mpi::detail::forward_oprimitive::implementation_archive	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    implementation_archive_type& implementation_archive;$/;"	m	class:boost::mpi::detail::forward_oprimitive	access:private
boost::mpi::detail::forward_oprimitive::implementation_archive_type	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    typedef ImplementationArchive implementation_archive_type;$/;"	t	class:boost::mpi::detail::forward_oprimitive	access:public
boost::mpi::detail::forward_oprimitive::save	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    void save(const T & t)$/;"	f	class:boost::mpi::detail::forward_oprimitive	access:public	signature:(const T & t)
boost::mpi::detail::forward_oprimitive::save_array	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    void save_array(serialization::array<T> const& x, unsigned int file_version )$/;"	f	class:boost::mpi::detail::forward_oprimitive	access:public	signature:(serialization::array<T> const& x, unsigned int file_version )
boost::mpi::detail::forward_oprimitive::save_binary	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    void save_binary(const void * address, std::size_t count)$/;"	f	class:boost::mpi::detail::forward_oprimitive	access:public	signature:(const void * address, std::size_t count)
boost::mpi::detail::forward_oprimitive::use_array_optimization	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    typedef typename ImplementationArchive::use_array_optimization use_array_optimization;$/;"	t	class:boost::mpi::detail::forward_oprimitive	access:public
boost::mpi::detail::forward_skeleton_iarchive	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^class forward_skeleton_iarchive $/;"	c	namespace:boost::mpi::detail	inherits:archive::detail::common_iarchive
boost::mpi::detail::forward_skeleton_iarchive::forward_skeleton_iarchive	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^    forward_skeleton_iarchive(implementation_archive_type& ar) $/;"	f	class:boost::mpi::detail::forward_skeleton_iarchive	access:public	signature:(implementation_archive_type& ar)
boost::mpi::detail::forward_skeleton_iarchive::implementation_archive	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^    implementation_archive_type& implementation_archive;$/;"	m	class:boost::mpi::detail::forward_skeleton_iarchive	access:protected
boost::mpi::detail::forward_skeleton_iarchive::implementation_archive_type	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^    typedef ImplementationArchive implementation_archive_type;$/;"	t	class:boost::mpi::detail::forward_skeleton_iarchive	access:public
boost::mpi::detail::forward_skeleton_iarchive::load_override	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^    void load_override(T & t, BOOST_PFTO int)$/;"	f	class:boost::mpi::detail::forward_skeleton_iarchive	access:protected	signature:(T & t, BOOST_PFTO int)
boost::mpi::detail::forward_skeleton_iarchive::load_override	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^    void load_override(std::string & s , int)    $/;"	f	class:boost::mpi::detail::forward_skeleton_iarchive	access:protected	signature:(std::string & s , int)
boost::mpi::detail::forward_skeleton_oarchive	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^class forward_skeleton_oarchive $/;"	c	namespace:boost::mpi::detail	inherits:archive::detail::common_oarchive
boost::mpi::detail::forward_skeleton_oarchive::forward_skeleton_oarchive	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^    forward_skeleton_oarchive(implementation_archive_type& ar) $/;"	f	class:boost::mpi::detail::forward_skeleton_oarchive	access:public	signature:(implementation_archive_type& ar)
boost::mpi::detail::forward_skeleton_oarchive::implementation_archive	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^    implementation_archive_type& implementation_archive;$/;"	m	class:boost::mpi::detail::forward_skeleton_oarchive	access:protected
boost::mpi::detail::forward_skeleton_oarchive::implementation_archive_type	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^    typedef ImplementationArchive implementation_archive_type;$/;"	t	class:boost::mpi::detail::forward_skeleton_oarchive	access:public
boost::mpi::detail::forward_skeleton_oarchive::save_override	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^    void save_override(T const& t, BOOST_PFTO int)$/;"	f	class:boost::mpi::detail::forward_skeleton_oarchive	access:protected	signature:(T const& t, BOOST_PFTO int)
boost::mpi::detail::forward_skeleton_oarchive::save_override	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^    void save_override(std::string const & t , int)    $/;"	f	class:boost::mpi::detail::forward_skeleton_oarchive	access:protected	signature:(std::string const & t , int)
boost::mpi::detail::gather_impl	/usr/include/boost/mpi/collectives/gather.hpp	/^  gather_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, int root, mpl::false_)
boost::mpi::detail::gather_impl	/usr/include/boost/mpi/collectives/gather.hpp	/^  gather_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, int root, mpl::true_)
boost::mpi::detail::gather_impl	/usr/include/boost/mpi/collectives/gather.hpp	/^  gather_impl(const communicator& comm, const T* in_values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, int root, mpl::false_)
boost::mpi::detail::gather_impl	/usr/include/boost/mpi/collectives/gather.hpp	/^  gather_impl(const communicator& comm, const T* in_values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, int root, mpl::true_)
boost::mpi::detail::ignore_iprimitive	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^class ignore_iprimitive$/;"	c	namespace:boost::mpi::detail
boost::mpi::detail::ignore_iprimitive::ignore_iprimitive	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^    ignore_iprimitive()$/;"	f	class:boost::mpi::detail::ignore_iprimitive	access:public	signature:()
boost::mpi::detail::ignore_iprimitive::load	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^    void load(T & t)$/;"	f	class:boost::mpi::detail::ignore_iprimitive	access:public	signature:(T & t)
boost::mpi::detail::ignore_iprimitive::load_array	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^    void load_array(serialization::array<T> &, unsigned int )$/;"	f	class:boost::mpi::detail::ignore_iprimitive	access:public	signature:(serialization::array<T> &, unsigned int )
boost::mpi::detail::ignore_iprimitive::load_binary	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^    void load_binary(void *, std::size_t )$/;"	f	class:boost::mpi::detail::ignore_iprimitive	access:public	signature:(void *, std::size_t )
boost::mpi::detail::ignore_iprimitive::use_array_optimization	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^    typedef is_mpi_datatype<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::detail::ignore_iprimitive	access:public
boost::mpi::detail::ignore_oprimitive	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^class ignore_oprimitive$/;"	c	namespace:boost::mpi::detail
boost::mpi::detail::ignore_oprimitive::ignore_oprimitive	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^    ignore_oprimitive()$/;"	f	class:boost::mpi::detail::ignore_oprimitive	access:public	signature:()
boost::mpi::detail::ignore_oprimitive::save	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^    void save(const T & t)$/;"	f	class:boost::mpi::detail::ignore_oprimitive	access:public	signature:(const T & t)
boost::mpi::detail::ignore_oprimitive::save_array	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^    void save_array(serialization::array<T> const&, unsigned int )$/;"	f	class:boost::mpi::detail::ignore_oprimitive	access:public	signature:(serialization::array<T> const&, unsigned int )
boost::mpi::detail::ignore_oprimitive::save_binary	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^    void save_binary(const void *, std::size_t )$/;"	f	class:boost::mpi::detail::ignore_oprimitive	access:public	signature:(const void *, std::size_t )
boost::mpi::detail::ignore_oprimitive::use_array_optimization	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^    typedef is_mpi_datatype<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::detail::ignore_oprimitive	access:public
boost::mpi::detail::ignore_skeleton_oarchive	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^class ignore_skeleton_oarchive $/;"	c	namespace:boost::mpi::detail	inherits:archive::detail::common_oarchive
boost::mpi::detail::ignore_skeleton_oarchive::ignore_skeleton_oarchive	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^    ignore_skeleton_oarchive()$/;"	f	class:boost::mpi::detail::ignore_skeleton_oarchive	access:public	signature:()
boost::mpi::detail::ignore_skeleton_oarchive::save_override	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^    void save_override(T const& t, BOOST_PFTO int)$/;"	f	class:boost::mpi::detail::ignore_skeleton_oarchive	access:protected	signature:(T const& t, BOOST_PFTO int)
boost::mpi::detail::ignore_skeleton_oarchive::save_override	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^    void save_override(std::string const & s, int)       $/;"	f	class:boost::mpi::detail::ignore_skeleton_oarchive	access:protected	signature:(std::string const & s, int)
boost::mpi::detail::mpi_datatype_cache	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^BOOST_MPI_DECL mpi_datatype_map& mpi_datatype_cache();$/;"	p	namespace:boost::mpi::detail	signature:()
boost::mpi::detail::mpi_datatype_holder	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  class BOOST_MPI_DECL mpi_datatype_holder : public boost::noncopyable$/;"	c	namespace:boost::mpi::detail	inherits:boost::noncopyable
boost::mpi::detail::mpi_datatype_holder::commit	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    void commit()$/;"	f	class:boost::mpi::detail::mpi_datatype_holder	access:public	signature:()
boost::mpi::detail::mpi_datatype_holder::d	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    MPI_Datatype d;$/;"	m	class:boost::mpi::detail::mpi_datatype_holder	access:private
boost::mpi::detail::mpi_datatype_holder::get_mpi_datatype	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    MPI_Datatype get_mpi_datatype() const$/;"	f	class:boost::mpi::detail::mpi_datatype_holder	access:public	signature:() const
boost::mpi::detail::mpi_datatype_holder::is_committed	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    bool is_committed;$/;"	m	class:boost::mpi::detail::mpi_datatype_holder	access:private
boost::mpi::detail::mpi_datatype_holder::mpi_datatype_holder	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    mpi_datatype_holder()$/;"	f	class:boost::mpi::detail::mpi_datatype_holder	access:public	signature:()
boost::mpi::detail::mpi_datatype_holder::mpi_datatype_holder	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    mpi_datatype_holder(MPI_Datatype t, bool committed = true)$/;"	f	class:boost::mpi::detail::mpi_datatype_holder	access:public	signature:(MPI_Datatype t, bool committed = true)
boost::mpi::detail::mpi_datatype_holder::~mpi_datatype_holder	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    ~mpi_datatype_holder()$/;"	f	class:boost::mpi::detail::mpi_datatype_holder	access:public	signature:()
boost::mpi::detail::mpi_datatype_map	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^class BOOST_MPI_DECL mpi_datatype_map$/;"	c	namespace:boost::mpi::detail	inherits:boost::noncopyable
boost::mpi::detail::mpi_datatype_map::clear	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  void clear(); $/;"	p	class:boost::mpi::detail::mpi_datatype_map	access:public	signature:()
boost::mpi::detail::mpi_datatype_map::datatype	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  MPI_Datatype datatype(const T& x = T(), typename boost::enable_if<is_mpi_builtin_datatype<T> >::type* =0)$/;"	f	class:boost::mpi::detail::mpi_datatype_map	access:public	signature:(const T& x = T(), typename boost::enable_if<is_mpi_builtin_datatype<T> >::type* =0)
boost::mpi::detail::mpi_datatype_map::datatype	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  MPI_Datatype datatype(const T& x =T(), typename boost::disable_if<is_mpi_builtin_datatype<T> >::type* =0 )$/;"	f	class:boost::mpi::detail::mpi_datatype_map	access:public	signature:(const T& x =T(), typename boost::disable_if<is_mpi_builtin_datatype<T> >::type* =0 )
boost::mpi::detail::mpi_datatype_map::get	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  MPI_Datatype get(const std::type_info* t);$/;"	p	class:boost::mpi::detail::mpi_datatype_map	access:private	signature:(const std::type_info* t)
boost::mpi::detail::mpi_datatype_map::impl	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  implementation *impl;$/;"	m	class:boost::mpi::detail::mpi_datatype_map	access:private
boost::mpi::detail::mpi_datatype_map::mpi_datatype_map	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  mpi_datatype_map();$/;"	p	class:boost::mpi::detail::mpi_datatype_map	access:public	signature:()
boost::mpi::detail::mpi_datatype_map::set	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  void set(const std::type_info* t, MPI_Datatype datatype);$/;"	p	class:boost::mpi::detail::mpi_datatype_map	access:private	signature:(const std::type_info* t, MPI_Datatype datatype)
boost::mpi::detail::mpi_datatype_map::~mpi_datatype_map	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  ~mpi_datatype_map();$/;"	p	class:boost::mpi::detail::mpi_datatype_map	access:public	signature:()
boost::mpi::detail::mpi_datatype_oarchive	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^class mpi_datatype_oarchive$/;"	c	namespace:boost::mpi::detail	inherits:mpi_datatype_primitive,ignore_skeleton_oarchive
boost::mpi::detail::mpi_datatype_oarchive::mpi_datatype_oarchive	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^    mpi_datatype_oarchive(const T& x)$/;"	f	class:boost::mpi::detail::mpi_datatype_oarchive	access:public	signature:(const T& x)
boost::mpi::detail::mpi_datatype_oarchive::save_enum	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^    void save_enum(T const& t, mpl::false_)$/;"	f	class:boost::mpi::detail::mpi_datatype_oarchive	access:public	signature:(T const& t, mpl::false_)
boost::mpi::detail::mpi_datatype_oarchive::save_enum	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^    void save_enum(T const& t, mpl::true_)$/;"	f	class:boost::mpi::detail::mpi_datatype_oarchive	access:public	signature:(T const& t, mpl::true_)
boost::mpi::detail::mpi_datatype_oarchive::save_override	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^    void save_override(T const& t, BOOST_PFTO int)$/;"	f	class:boost::mpi::detail::mpi_datatype_oarchive	access:public	signature:(T const& t, BOOST_PFTO int)
boost::mpi::detail::mpi_datatype_primitive	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^class mpi_datatype_primitive$/;"	c	namespace:boost::mpi::detail
boost::mpi::detail::mpi_datatype_primitive::addresses	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    std::vector<MPI_Aint> addresses;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
boost::mpi::detail::mpi_datatype_primitive::datatype_	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    MPI_Datatype datatype_;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
boost::mpi::detail::mpi_datatype_primitive::get_mpi_datatype	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    MPI_Datatype get_mpi_datatype()$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:()
boost::mpi::detail::mpi_datatype_primitive::is_committed	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    bool is_committed;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
boost::mpi::detail::mpi_datatype_primitive::lengths	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    std::vector<int> lengths;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
boost::mpi::detail::mpi_datatype_primitive::mpi_datatype_primitive	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    mpi_datatype_primitive()$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:()
boost::mpi::detail::mpi_datatype_primitive::mpi_datatype_primitive	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    mpi_datatype_primitive(void const* orig)$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:(void const* orig)
boost::mpi::detail::mpi_datatype_primitive::origin	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    MPI_Aint origin;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
boost::mpi::detail::mpi_datatype_primitive::save	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    void save(const T & t)$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:(const T & t)
boost::mpi::detail::mpi_datatype_primitive::save_array	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    void save_array(serialization::array<T> const& x, unsigned int \/* version *\/)$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:(serialization::array<T> const& x, unsigned int )
boost::mpi::detail::mpi_datatype_primitive::save_binary	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    void save_binary(void const *address, std::size_t count)$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:(void const *address, std::size_t count)
boost::mpi::detail::mpi_datatype_primitive::save_impl	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    void save_impl(void const * p, MPI_Datatype t, int l)$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:private	signature:(void const * p, MPI_Datatype t, int l)
boost::mpi::detail::mpi_datatype_primitive::types	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    std::vector<MPI_Datatype> types;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
boost::mpi::detail::mpi_datatype_primitive::use_array_optimization	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    typedef is_mpi_datatype<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::detail::mpi_datatype_primitive	access:public
boost::mpi::detail::packed_archive_isend	/usr/include/boost/mpi/detail/point_to_point.hpp	/^packed_archive_isend(MPI_Comm comm, int dest, int tag,$/;"	p	namespace:boost::mpi::detail	signature:(MPI_Comm comm, int dest, int tag, const packed_iarchive& ar, MPI_Request* out_requests, int num_out_requests)
boost::mpi::detail::packed_archive_isend	/usr/include/boost/mpi/detail/point_to_point.hpp	/^packed_archive_isend(MPI_Comm comm, int dest, int tag,$/;"	p	namespace:boost::mpi::detail	signature:(MPI_Comm comm, int dest, int tag, const packed_oarchive& ar, MPI_Request* out_requests, int num_out_requests)
boost::mpi::detail::packed_archive_recv	/usr/include/boost/mpi/detail/point_to_point.hpp	/^packed_archive_recv(MPI_Comm comm, int source, int tag, packed_iarchive& ar,$/;"	p	namespace:boost::mpi::detail	signature:(MPI_Comm comm, int source, int tag, packed_iarchive& ar, MPI_Status& status)
boost::mpi::detail::packed_archive_send	/usr/include/boost/mpi/detail/point_to_point.hpp	/^packed_archive_send(MPI_Comm comm, int dest, int tag,$/;"	p	namespace:boost::mpi::detail	signature:(MPI_Comm comm, int dest, int tag, const packed_oarchive& ar)
boost::mpi::detail::reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root, mpl::false_ , mpl::false_ )
boost::mpi::detail::reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root, mpl::false_ , mpl::true_ )
boost::mpi::detail::reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root, mpl::true_ , mpl::true_ )
boost::mpi::detail::reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, Op op, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, Op op, int root, mpl::false_ , mpl::false_ )
boost::mpi::detail::reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, Op op, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, Op op, int root, mpl::false_ , mpl::true_ )
boost::mpi::detail::reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, Op op, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, Op op, int root, mpl::true_ , mpl::true_ )
boost::mpi::detail::scan_impl	/usr/include/boost/mpi/collectives/scan.hpp	/^  scan_impl(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, mpl::false_ , mpl::false_ )
boost::mpi::detail::scan_impl	/usr/include/boost/mpi/collectives/scan.hpp	/^  scan_impl(const communicator& comm, const T* in_values, int n, T* out_values,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, mpl::false_ , mpl::true_ )
boost::mpi::detail::scan_impl	/usr/include/boost/mpi/collectives/scan.hpp	/^  scan_impl(const communicator& comm, const T* in_values, int n, T* out_values,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, mpl::true_ , mpl::true_ )
boost::mpi::detail::scatter_impl	/usr/include/boost/mpi/collectives/scatter.hpp	/^  scatter_impl(const communicator& comm, T* out_values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, T* out_values, int n, int root, mpl::false_)
boost::mpi::detail::scatter_impl	/usr/include/boost/mpi/collectives/scatter.hpp	/^  scatter_impl(const communicator& comm, T* out_values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, T* out_values, int n, int root, mpl::true_)
boost::mpi::detail::scatter_impl	/usr/include/boost/mpi/collectives/scatter.hpp	/^  scatter_impl(const communicator& comm, const T* in_values, T* out_values, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, T* out_values, int n, int root, mpl::false_)
boost::mpi::detail::scatter_impl	/usr/include/boost/mpi/collectives/scatter.hpp	/^  scatter_impl(const communicator& comm, const T* in_values, T* out_values, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, T* out_values, int n, int root, mpl::true_)
boost::mpi::detail::serialized_array_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^  struct serialized_array_irecv_data$/;"	s	namespace:boost::mpi::detail
boost::mpi::detail::serialized_array_irecv_data::comm	/usr/include/boost/mpi/communicator.hpp	/^    communicator comm;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
boost::mpi::detail::serialized_array_irecv_data::count	/usr/include/boost/mpi/communicator.hpp	/^    std::size_t count;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
boost::mpi::detail::serialized_array_irecv_data::deserialize	/usr/include/boost/mpi/communicator.hpp	/^    void deserialize(status& stat);$/;"	p	struct:boost::mpi::detail::serialized_array_irecv_data	access:public	signature:(status& stat)
boost::mpi::detail::serialized_array_irecv_data::deserialize	/usr/include/boost/mpi/communicator.hpp	/^  void serialized_array_irecv_data<T>::deserialize(status& stat)$/;"	f	class:boost::mpi::detail::serialized_array_irecv_data	signature:(status& stat)
boost::mpi::detail::serialized_array_irecv_data::ia	/usr/include/boost/mpi/communicator.hpp	/^    packed_iarchive ia;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
boost::mpi::detail::serialized_array_irecv_data::n	/usr/include/boost/mpi/communicator.hpp	/^    int n;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
boost::mpi::detail::serialized_array_irecv_data::serialized_array_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^    serialized_array_irecv_data(const communicator& comm, int source, int tag, $/;"	f	struct:boost::mpi::detail::serialized_array_irecv_data	access:public	signature:(const communicator& comm, int source, int tag, T* values, int n)
boost::mpi::detail::serialized_array_irecv_data::source	/usr/include/boost/mpi/communicator.hpp	/^    int source;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
boost::mpi::detail::serialized_array_irecv_data::tag	/usr/include/boost/mpi/communicator.hpp	/^    int tag;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
boost::mpi::detail::serialized_array_irecv_data::values	/usr/include/boost/mpi/communicator.hpp	/^    T* values;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^  struct serialized_irecv_data$/;"	s	namespace:boost::mpi::detail
boost::mpi::detail::serialized_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^  struct serialized_irecv_data<packed_iarchive>$/;"	s	namespace:boost::mpi::detail
boost::mpi::detail::serialized_irecv_data	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^  struct serialized_irecv_data<const skeleton_proxy<T> >$/;"	s	namespace:boost::mpi::detail
boost::mpi::detail::serialized_irecv_data	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^  struct serialized_irecv_data<skeleton_proxy<T> >$/;"	s	namespace:boost::mpi::detail	inherits:serialized_irecv_data
boost::mpi::detail::serialized_irecv_data::comm	/usr/include/boost/mpi/communicator.hpp	/^    communicator comm;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::comm	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    communicator comm;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::count	/usr/include/boost/mpi/communicator.hpp	/^    std::size_t count;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::count	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    std::size_t count;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::deserialize	/usr/include/boost/mpi/communicator.hpp	/^    void deserialize(status& stat) $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(status& stat)
boost::mpi::detail::serialized_irecv_data::deserialize	/usr/include/boost/mpi/communicator.hpp	/^    void deserialize(status&) { \/* Do nothing. *\/ }$/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(status&)
boost::mpi::detail::serialized_irecv_data::deserialize	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    void deserialize(status& stat) $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(status& stat)
boost::mpi::detail::serialized_irecv_data::ia	/usr/include/boost/mpi/communicator.hpp	/^    packed_iarchive ia;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::ia	/usr/include/boost/mpi/communicator.hpp	/^    packed_iarchive& ia;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::ia	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    packed_iarchive& ia;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::inherited	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    typedef serialized_irecv_data<const skeleton_proxy<T> > inherited;$/;"	t	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::isa	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    packed_skeleton_iarchive isa;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::proxy	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    skeleton_proxy<T> proxy;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::serialized_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^    serialized_irecv_data(const communicator& comm, int source, int tag, $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(const communicator& comm, int source, int tag, T& value)
boost::mpi::detail::serialized_irecv_data::serialized_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^    serialized_irecv_data(const communicator& comm, int source, int tag, $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(const communicator& comm, int source, int tag, packed_iarchive& ia)
boost::mpi::detail::serialized_irecv_data::serialized_irecv_data	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    serialized_irecv_data(const communicator& comm, int source, int tag, $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(const communicator& comm, int source, int tag, const skeleton_proxy<T>& proxy)
boost::mpi::detail::serialized_irecv_data::serialized_irecv_data	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    serialized_irecv_data(const communicator& comm, int source, int tag, $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(const communicator& comm, int source, int tag, skeleton_proxy<T> proxy)
boost::mpi::detail::serialized_irecv_data::source	/usr/include/boost/mpi/communicator.hpp	/^    int source;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::source	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    int source;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::tag	/usr/include/boost/mpi/communicator.hpp	/^    int tag;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::tag	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    int tag;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::serialized_irecv_data::value	/usr/include/boost/mpi/communicator.hpp	/^    T& value;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
boost::mpi::detail::tree_reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  tree_reduce_impl(const communicator& comm, const T* in_values, int n, Op op,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, Op op, int root, mpl::false_ )
boost::mpi::detail::tree_reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  tree_reduce_impl(const communicator& comm, const T* in_values, int n, Op op,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, Op op, int root, mpl::true_ )
boost::mpi::detail::tree_reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  tree_reduce_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root, mpl::false_ )
boost::mpi::detail::tree_reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  tree_reduce_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root, mpl::true_ )
boost::mpi::detail::type1	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  typedef boost::mpi::detail::forward_skeleton_oarchive<boost::mpi::packed_skeleton_oarchive,boost::mpi::packed_oarchive> type1;$/;"	t	namespace:boost::mpi::detail
boost::mpi::detail::type2	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  typedef boost::mpi::detail::forward_skeleton_iarchive<boost::mpi::packed_skeleton_iarchive,boost::mpi::packed_iarchive> type2;$/;"	t	namespace:boost::mpi::detail
boost::mpi::detail::type3	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^typedef boost::mpi::detail::forward_skeleton_oarchive<boost::mpi::text_skeleton_oarchive,boost::archive::text_oarchive> type3;$/;"	t	namespace:boost::mpi::detail
boost::mpi::detail::type_info_compare	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^struct type_info_compare$/;"	s	namespace:boost::mpi::detail
boost::mpi::detail::type_info_compare::operator ()	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  bool operator()(std::type_info const* lhs, std::type_info const* rhs) const$/;"	f	struct:boost::mpi::detail::type_info_compare	access:public	signature:(std::type_info const* lhs, std::type_info const* rhs) const
boost::mpi::detail::upper_lower_scan	/usr/include/boost/mpi/collectives/scan.hpp	/^  upper_lower_scan(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op& op, int lower, int upper)
boost::mpi::detail::user_op	/usr/include/boost/mpi/operations.hpp	/^  class user_op$/;"	c	namespace:boost::mpi::detail
boost::mpi::detail::user_op::get_mpi_op	/usr/include/boost/mpi/operations.hpp	/^    MPI_Op& get_mpi_op()$/;"	f	class:boost::mpi::detail::user_op	access:public	signature:()
boost::mpi::detail::user_op::mpi_op	/usr/include/boost/mpi/operations.hpp	/^    MPI_Op mpi_op;$/;"	m	class:boost::mpi::detail::user_op	access:private
boost::mpi::detail::user_op::op_ptr	/usr/include/boost/mpi/operations.hpp	/^    static Op* op_ptr;$/;"	m	class:boost::mpi::detail::user_op	access:private
boost::mpi::detail::user_op::op_ptr	/usr/include/boost/mpi/operations.hpp	/^  template<typename Op, typename T> Op* user_op<Op, T>::op_ptr = 0;$/;"	m	class:boost::mpi::detail::user_op
boost::mpi::detail::user_op::perform	/usr/include/boost/mpi/operations.hpp	/^    static void BOOST_MPI_CALLING_CONVENTION perform(void* vinvec, void* voutvec, int* plen, MPI_Datatype*)$/;"	f	class:boost::mpi::detail::user_op	access:private	signature:(void* vinvec, void* voutvec, int* plen, MPI_Datatype*)
boost::mpi::detail::user_op::user_op	/usr/include/boost/mpi/operations.hpp	/^    explicit user_op(Op& op)$/;"	f	class:boost::mpi::detail::user_op	access:public	signature:(Op& op)
boost::mpi::detail::user_op::~user_op	/usr/include/boost/mpi/operations.hpp	/^    ~user_op()$/;"	f	class:boost::mpi::detail::user_op	access:public	signature:()
boost::mpi::edges	/usr/include/boost/mpi/graph_communicator.hpp	/^edges(const graph_communicator& comm);$/;"	p	namespace:boost::mpi	signature:(const graph_communicator& comm)
boost::mpi::environment	/usr/include/boost/mpi/environment.hpp	/^class BOOST_MPI_DECL environment : noncopyable {$/;"	c	namespace:boost::mpi	inherits:noncopyable
boost::mpi::environment::abort	/usr/include/boost/mpi/environment.hpp	/^  static void abort(int errcode);$/;"	p	class:boost::mpi::environment	access:public	signature:(int errcode)
boost::mpi::environment::abort_on_exception	/usr/include/boost/mpi/environment.hpp	/^  bool abort_on_exception;$/;"	m	class:boost::mpi::environment	access:private
boost::mpi::environment::collectives_tag	/usr/include/boost/mpi/environment.hpp	/^  static int collectives_tag();$/;"	p	class:boost::mpi::environment	access:public	signature:()
boost::mpi::environment::environment	/usr/include/boost/mpi/environment.hpp	/^  environment(int& argc, char** &argv, bool abort_on_exception = true);$/;"	p	class:boost::mpi::environment	access:public	signature:(int& argc, char** &argv, bool abort_on_exception = true)
boost::mpi::environment::environment	/usr/include/boost/mpi/environment.hpp	/^  explicit environment(bool abort_on_exception = true);$/;"	p	class:boost::mpi::environment	access:public	signature:(bool abort_on_exception = true)
boost::mpi::environment::finalized	/usr/include/boost/mpi/environment.hpp	/^  static bool finalized();$/;"	p	class:boost::mpi::environment	access:public	signature:()
boost::mpi::environment::host_rank	/usr/include/boost/mpi/environment.hpp	/^  static optional<int> host_rank();$/;"	p	class:boost::mpi::environment	access:public	signature:()
boost::mpi::environment::i_initialized	/usr/include/boost/mpi/environment.hpp	/^  bool i_initialized;$/;"	m	class:boost::mpi::environment	access:private
boost::mpi::environment::initialized	/usr/include/boost/mpi/environment.hpp	/^  static bool initialized();$/;"	p	class:boost::mpi::environment	access:public	signature:()
boost::mpi::environment::io_rank	/usr/include/boost/mpi/environment.hpp	/^  static optional<int> io_rank();$/;"	p	class:boost::mpi::environment	access:public	signature:()
boost::mpi::environment::max_tag	/usr/include/boost/mpi/environment.hpp	/^  static int max_tag();$/;"	p	class:boost::mpi::environment	access:public	signature:()
boost::mpi::environment::num_reserved_tags	/usr/include/boost/mpi/environment.hpp	/^  static const int num_reserved_tags = 1;$/;"	m	class:boost::mpi::environment	access:private
boost::mpi::environment::processor_name	/usr/include/boost/mpi/environment.hpp	/^  static std::string processor_name();$/;"	p	class:boost::mpi::environment	access:public	signature:()
boost::mpi::environment::~environment	/usr/include/boost/mpi/environment.hpp	/^  ~environment();$/;"	p	class:boost::mpi::environment	access:public	signature:()
boost::mpi::exception	/usr/include/boost/mpi/exception.hpp	/^class BOOST_MPI_DECL exception : public std::exception$/;"	c	namespace:boost::mpi	inherits:std::exception
boost::mpi::exception::error_class	/usr/include/boost/mpi/exception.hpp	/^  int error_class() const $/;"	f	class:boost::mpi::exception	access:public	signature:() const
boost::mpi::exception::exception	/usr/include/boost/mpi/exception.hpp	/^  exception(const char* routine, int result_code);$/;"	p	class:boost::mpi::exception	access:public	signature:(const char* routine, int result_code)
boost::mpi::exception::message	/usr/include/boost/mpi/exception.hpp	/^  std::string message;$/;"	m	class:boost::mpi::exception	access:protected
boost::mpi::exception::result_code	/usr/include/boost/mpi/exception.hpp	/^  int result_code() const { return result_code_; }$/;"	f	class:boost::mpi::exception	access:public	signature:() const
boost::mpi::exception::result_code_	/usr/include/boost/mpi/exception.hpp	/^  int result_code_;$/;"	m	class:boost::mpi::exception	access:protected
boost::mpi::exception::routine	/usr/include/boost/mpi/exception.hpp	/^  const char* routine() const { return routine_; }$/;"	f	class:boost::mpi::exception	access:public	signature:() const
boost::mpi::exception::routine_	/usr/include/boost/mpi/exception.hpp	/^  const char* routine_;$/;"	m	class:boost::mpi::exception	access:protected
boost::mpi::exception::what	/usr/include/boost/mpi/exception.hpp	/^  virtual const char * what () const throw ()$/;"	f	class:boost::mpi::exception	access:public	signature:() const
boost::mpi::exception::~exception	/usr/include/boost/mpi/exception.hpp	/^  virtual ~exception() throw();$/;"	p	class:boost::mpi::exception	access:public	signature:()
boost::mpi::gather	/usr/include/boost/mpi/collectives.hpp	/^gather(const communicator& comm, const T& in_value, T* out_values, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T* out_values, int root)
boost::mpi::gather	/usr/include/boost/mpi/collectives.hpp	/^gather(const communicator& comm, const T& in_value, std::vector<T>& out_values,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, std::vector<T>& out_values, int root)
boost::mpi::gather	/usr/include/boost/mpi/collectives.hpp	/^gather(const communicator& comm, const T* in_values, int n, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, std::vector<T>& out_values, int root)
boost::mpi::gather	/usr/include/boost/mpi/collectives.hpp	/^gather(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, int root)
boost::mpi::gather	/usr/include/boost/mpi/collectives.hpp	/^void gather(const communicator& comm, const T& in_value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, int root)
boost::mpi::gather	/usr/include/boost/mpi/collectives.hpp	/^void gather(const communicator& comm, const T* in_values, int n, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, int root)
boost::mpi::gather	/usr/include/boost/mpi/collectives/gather.hpp	/^gather(const communicator& comm, const T& in_value, T* out_values, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T* out_values, int root)
boost::mpi::gather	/usr/include/boost/mpi/collectives/gather.hpp	/^gather(const communicator& comm, const T& in_value, std::vector<T>& out_values,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, std::vector<T>& out_values, int root)
boost::mpi::gather	/usr/include/boost/mpi/collectives/gather.hpp	/^gather(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, std::vector<T>& out_values, int root)
boost::mpi::gather	/usr/include/boost/mpi/collectives/gather.hpp	/^gather(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, int root)
boost::mpi::gather	/usr/include/boost/mpi/collectives/gather.hpp	/^void gather(const communicator& comm, const T& in_value, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, int root)
boost::mpi::gather	/usr/include/boost/mpi/collectives/gather.hpp	/^void gather(const communicator& comm, const T* in_values, int n, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, int root)
boost::mpi::get	/usr/include/boost/mpi/graph_communicator.hpp	/^inline identity_property_map get(vertex_index_t, const graph_communicator&)$/;"	f	namespace:boost::mpi	signature:(vertex_index_t, const graph_communicator&)
boost::mpi::get	/usr/include/boost/mpi/graph_communicator.hpp	/^inline int get(vertex_index_t, const graph_communicator&, int vertex)$/;"	f	namespace:boost::mpi	signature:(vertex_index_t, const graph_communicator&, int vertex)
boost::mpi::get_content	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^const content get_content(const T& x)$/;"	f	namespace:boost::mpi	signature:(const T& x)
boost::mpi::get_content	/usr/include/boost/mpi/skeleton_and_content.hpp	/^template <class T> const content get_content(const T& x);$/;"	p	namespace:boost::mpi	signature:(const T& x)
boost::mpi::get_content	/usr/include/boost/mpi/skeleton_and_content_fwd.hpp	/^template <class T> const content get_content(const T& x);$/;"	p	namespace:boost::mpi	signature:(const T& x)
boost::mpi::get_mpi_datatype	/usr/include/boost/mpi/datatype.hpp	/^inline MPI_Datatype get_mpi_datatype<bool>(const bool&)$/;"	f	namespace:boost::mpi	signature:(const bool&)
boost::mpi::get_mpi_datatype	/usr/include/boost/mpi/datatype.hpp	/^template<typename T> MPI_Datatype get_mpi_datatype(const T& x)$/;"	f	namespace:boost::mpi	signature:(const T& x)
boost::mpi::get_mpi_datatype	/usr/include/boost/mpi/datatype_fwd.hpp	/^template<typename T> MPI_Datatype get_mpi_datatype() $/;"	f	namespace:boost::mpi	signature:()
boost::mpi::get_mpi_datatype	/usr/include/boost/mpi/datatype_fwd.hpp	/^template<typename T> MPI_Datatype get_mpi_datatype(const T& x);$/;"	p	namespace:boost::mpi	signature:(const T& x)
boost::mpi::graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^class BOOST_MPI_DECL graph_communicator : public communicator$/;"	c	namespace:boost::mpi	inherits:communicator
boost::mpi::graph_communicator::graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^  explicit graph_communicator(const shared_ptr<MPI_Comm>& comm_ptr)$/;"	f	class:boost::mpi::graph_communicator	access:private	signature:(const shared_ptr<MPI_Comm>& comm_ptr)
boost::mpi::graph_communicator::graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^  graph_communicator(const MPI_Comm& comm, comm_create_kind kind)$/;"	f	class:boost::mpi::graph_communicator	access:public	signature:(const MPI_Comm& comm, comm_create_kind kind)
boost::mpi::graph_communicator::graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^  graph_communicator(const communicator& comm, const Graph& graph, $/;"	p	class:boost::mpi::graph_communicator	access:public	signature:(const communicator& comm, const Graph& graph, RankMap rank, bool reorder = false)
boost::mpi::graph_communicator::graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^  graph_communicator(const communicator& comm, const Graph& graph, $/;"	p	class:boost::mpi::graph_communicator	access:public	signature:(const communicator& comm, const Graph& graph, bool reorder = false)
boost::mpi::graph_communicator::graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^graph_communicator::graph_communicator(const communicator& comm, $/;"	f	class:boost::mpi::graph_communicator	signature:(const communicator& comm, const Graph& graph, RankMap rank, bool reorder)
boost::mpi::graph_communicator::graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^graph_communicator::graph_communicator(const communicator& comm, $/;"	f	class:boost::mpi::graph_communicator	signature:(const communicator& comm, const Graph& graph, bool reorder)
boost::mpi::graph_communicator::setup_graph	/usr/include/boost/mpi/graph_communicator.hpp	/^  setup_graph(const communicator& comm, const Graph& graph, RankMap rank, $/;"	p	class:boost::mpi::graph_communicator	access:protected	signature:(const communicator& comm, const Graph& graph, RankMap rank, bool reorder)
boost::mpi::graph_communicator::setup_graph	/usr/include/boost/mpi/graph_communicator.hpp	/^graph_communicator::setup_graph(const communicator& comm, const Graph& graph, $/;"	f	class:boost::mpi::graph_communicator	signature:(const communicator& comm, const Graph& graph, RankMap rank, bool reorder)
boost::mpi::group	/usr/include/boost/mpi/group.hpp	/^class BOOST_MPI_DECL group$/;"	c	namespace:boost::mpi
boost::mpi::group::exclude	/usr/include/boost/mpi/group.hpp	/^  group exclude(InputIterator first, InputIterator last);$/;"	p	class:boost::mpi::group	access:public	signature:(InputIterator first, InputIterator last)
boost::mpi::group::exclude	/usr/include/boost/mpi/group.hpp	/^group group::exclude(InputIterator first, InputIterator last)$/;"	f	class:boost::mpi::group	signature:(InputIterator first, InputIterator last)
boost::mpi::group::exclude	/usr/include/boost/mpi/group.hpp	/^template<> BOOST_MPI_DECL group group::exclude(int* first, int* last);$/;"	p	class:boost::mpi::group	signature:(int* first, int* last)
boost::mpi::group::group	/usr/include/boost/mpi/group.hpp	/^  group() : group_ptr() { }$/;"	f	class:boost::mpi::group	access:public	signature:()
boost::mpi::group::group	/usr/include/boost/mpi/group.hpp	/^  group(const MPI_Group& in_group, bool adopt);$/;"	p	class:boost::mpi::group	access:public	signature:(const MPI_Group& in_group, bool adopt)
boost::mpi::group::group_free	/usr/include/boost/mpi/group.hpp	/^  struct group_free$/;"	s	class:boost::mpi::group	access:protected
boost::mpi::group::group_free::operator ()	/usr/include/boost/mpi/group.hpp	/^    void operator()(MPI_Group* comm) const$/;"	f	struct:boost::mpi::group::group_free	access:public	signature:(MPI_Group* comm) const
boost::mpi::group::group_ptr	/usr/include/boost/mpi/group.hpp	/^  shared_ptr<MPI_Group> group_ptr;$/;"	m	class:boost::mpi::group	access:protected
boost::mpi::group::include	/usr/include/boost/mpi/group.hpp	/^  group include(InputIterator first, InputIterator last);$/;"	p	class:boost::mpi::group	access:public	signature:(InputIterator first, InputIterator last)
boost::mpi::group::include	/usr/include/boost/mpi/group.hpp	/^group group::include(InputIterator first, InputIterator last)$/;"	f	class:boost::mpi::group	signature:(InputIterator first, InputIterator last)
boost::mpi::group::include	/usr/include/boost/mpi/group.hpp	/^template<> BOOST_MPI_DECL group group::include(int* first, int* last);$/;"	p	class:boost::mpi::group	signature:(int* first, int* last)
boost::mpi::group::operator MPI_Group	/usr/include/boost/mpi/group.hpp	/^  operator MPI_Group() const$/;"	f	class:boost::mpi::group	access:public	signature:() const
boost::mpi::group::operator bool	/usr/include/boost/mpi/group.hpp	/^  operator bool() const { return (bool)group_ptr; }$/;"	f	class:boost::mpi::group	access:public	signature:() const
boost::mpi::group::rank	/usr/include/boost/mpi/group.hpp	/^  optional<int> rank() const;$/;"	p	class:boost::mpi::group	access:public	signature:() const
boost::mpi::group::size	/usr/include/boost/mpi/group.hpp	/^  int size() const;$/;"	p	class:boost::mpi::group	access:public	signature:() const
boost::mpi::group::translate_ranks	/usr/include/boost/mpi/group.hpp	/^  OutputIterator translate_ranks(InputIterator first, InputIterator last,$/;"	p	class:boost::mpi::group	access:public	signature:(InputIterator first, InputIterator last, const group& to_group, OutputIterator out)
boost::mpi::group::translate_ranks	/usr/include/boost/mpi/group.hpp	/^group::translate_ranks(InputIterator first, InputIterator last,$/;"	f	class:boost::mpi::group	signature:(InputIterator first, InputIterator last, const group& to_group, OutputIterator out)
boost::mpi::group::translate_ranks	/usr/include/boost/mpi/group.hpp	/^group::translate_ranks(int* first, int* last, const group& to_group, int* out);$/;"	p	class:boost::mpi::group	signature:(int* first, int* last, const group& to_group, int* out)
boost::mpi::intercommunicator	/usr/include/boost/mpi/intercommunicator.hpp	/^class BOOST_MPI_DECL intercommunicator : public communicator$/;"	c	namespace:boost::mpi	inherits:communicator
boost::mpi::intercommunicator::intercommunicator	/usr/include/boost/mpi/intercommunicator.hpp	/^  explicit intercommunicator(const shared_ptr<MPI_Comm>& cp)$/;"	f	class:boost::mpi::intercommunicator	access:private	signature:(const shared_ptr<MPI_Comm>& cp)
boost::mpi::intercommunicator::intercommunicator	/usr/include/boost/mpi/intercommunicator.hpp	/^  intercommunicator(const MPI_Comm& comm, comm_create_kind kind)$/;"	f	class:boost::mpi::intercommunicator	access:public	signature:(const MPI_Comm& comm, comm_create_kind kind)
boost::mpi::intercommunicator::intercommunicator	/usr/include/boost/mpi/intercommunicator.hpp	/^  intercommunicator(const communicator& local, int local_leader,$/;"	p	class:boost::mpi::intercommunicator	access:public	signature:(const communicator& local, int local_leader, const communicator& peer, int remote_leader)
boost::mpi::intercommunicator::local_group	/usr/include/boost/mpi/intercommunicator.hpp	/^  boost::mpi::group local_group() const;$/;"	p	class:boost::mpi::intercommunicator	access:public	signature:() const
boost::mpi::intercommunicator::local_rank	/usr/include/boost/mpi/intercommunicator.hpp	/^  int local_rank() const { return this->rank(); }$/;"	f	class:boost::mpi::intercommunicator	access:public	signature:() const
boost::mpi::intercommunicator::local_size	/usr/include/boost/mpi/intercommunicator.hpp	/^  int local_size() const { return this->size(); }$/;"	f	class:boost::mpi::intercommunicator	access:public	signature:() const
boost::mpi::intercommunicator::merge	/usr/include/boost/mpi/intercommunicator.hpp	/^  communicator merge(bool high) const;$/;"	p	class:boost::mpi::intercommunicator	access:public	signature:(bool high) const
boost::mpi::intercommunicator::remote_group	/usr/include/boost/mpi/intercommunicator.hpp	/^  boost::mpi::group remote_group() const;$/;"	p	class:boost::mpi::intercommunicator	access:public	signature:() const
boost::mpi::intercommunicator::remote_size	/usr/include/boost/mpi/intercommunicator.hpp	/^  int remote_size() const;$/;"	p	class:boost::mpi::intercommunicator	access:public	signature:() const
boost::mpi::iprimitive	/usr/include/boost/mpi/packed_iarchive.hpp	/^  typedef binary_buffer_iprimitive iprimitive;$/;"	t	namespace:boost::mpi
boost::mpi::is_commutative	/usr/include/boost/mpi/operations.hpp	/^struct is_commutative : public mpl::false_ { };$/;"	s	namespace:boost::mpi	inherits:mpl::false_
boost::mpi::is_mpi_builtin_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_builtin_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
boost::mpi::is_mpi_byte_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_byte_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::false_
boost::mpi::is_mpi_complex_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_complex_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::false_
boost::mpi::is_mpi_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_datatype$/;"	s	namespace:boost::mpi	inherits:is_mpi_builtin_datatype
boost::mpi::is_mpi_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_datatype<bool>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::bool_
boost::mpi::is_mpi_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_datatype<std::pair<T,U> >$/;"	s	namespace:boost::mpi	inherits:mpl::and_
boost::mpi::is_mpi_floating_point_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_floating_point_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::false_
boost::mpi::is_mpi_integer_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_integer_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::false_
boost::mpi::is_mpi_logical_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_logical_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::false_
boost::mpi::is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<bitwise_and<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
boost::mpi::is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<bitwise_or<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
boost::mpi::is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<bitwise_xor<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
boost::mpi::is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<logical_xor<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
boost::mpi::is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<std::logical_and<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
boost::mpi::is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<std::logical_or<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
boost::mpi::is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<std::multiplies<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
boost::mpi::is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<std::plus<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
boost::mpi::is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^struct is_mpi_op : public mpl::false_ { };$/;"	s	namespace:boost::mpi	inherits:mpl::false_
boost::mpi::is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^struct is_mpi_op<maximum<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
boost::mpi::is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^struct is_mpi_op<minimum<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
boost::mpi::is_mpi_op::op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_BAND; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
boost::mpi::is_mpi_op::op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_BOR; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
boost::mpi::is_mpi_op::op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_BXOR; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
boost::mpi::is_mpi_op::op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_LAND; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
boost::mpi::is_mpi_op::op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_LOR; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
boost::mpi::is_mpi_op::op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_LXOR; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
boost::mpi::is_mpi_op::op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_MAX; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
boost::mpi::is_mpi_op::op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_MIN; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
boost::mpi::is_mpi_op::op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_PROD; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
boost::mpi::is_mpi_op::op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_SUM; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
boost::mpi::logical_xor	/usr/include/boost/mpi/operations.hpp	/^struct logical_xor : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
boost::mpi::logical_xor::operator ()	/usr/include/boost/mpi/operations.hpp	/^  T operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::logical_xor	access:public	signature:(const T& x, const T& y) const
boost::mpi::maximum	/usr/include/boost/mpi/operations.hpp	/^struct maximum : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
boost::mpi::maximum::operator ()	/usr/include/boost/mpi/operations.hpp	/^  const T& operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::maximum	access:public	signature:(const T& x, const T& y) const
boost::mpi::minimum	/usr/include/boost/mpi/operations.hpp	/^struct minimum : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
boost::mpi::minimum::operator ()	/usr/include/boost/mpi/operations.hpp	/^  const T& operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::minimum	access:public	signature:(const T& x, const T& y) const
boost::mpi::num_edges	/usr/include/boost/mpi/graph_communicator.hpp	/^int num_edges(const graph_communicator& comm);$/;"	p	namespace:boost::mpi	signature:(const graph_communicator& comm)
boost::mpi::num_vertices	/usr/include/boost/mpi/graph_communicator.hpp	/^inline int num_vertices(const graph_communicator& comm) { return comm.size(); }$/;"	f	namespace:boost::mpi	signature:(const graph_communicator& comm)
boost::mpi::operator !=	/usr/include/boost/mpi/allocator.hpp	/^inline bool operator!=(const allocator<T1>&, const allocator<T2>&) throw()$/;"	f	namespace:boost::mpi	signature:(const allocator<T1>&, const allocator<T2>&)
boost::mpi::operator !=	/usr/include/boost/mpi/communicator.hpp	/^inline bool operator!=(const communicator& comm1, const communicator& comm2)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm1, const communicator& comm2)
boost::mpi::operator !=	/usr/include/boost/mpi/group.hpp	/^inline bool operator!=(const group& g1, const group& g2)$/;"	f	namespace:boost::mpi	signature:(const group& g1, const group& g2)
boost::mpi::operator &	/usr/include/boost/mpi/group.hpp	/^BOOST_MPI_DECL group operator&(const group& g1, const group& g2);$/;"	p	namespace:boost::mpi	signature:(const group& g1, const group& g2)
boost::mpi::operator -	/usr/include/boost/mpi/group.hpp	/^BOOST_MPI_DECL group operator-(const group& g1, const group& g2);$/;"	p	namespace:boost::mpi	signature:(const group& g1, const group& g2)
boost::mpi::operator ==	/usr/include/boost/mpi/allocator.hpp	/^inline bool operator==(const allocator<T1>&, const allocator<T2>&) throw()$/;"	f	namespace:boost::mpi	signature:(const allocator<T1>&, const allocator<T2>&)
boost::mpi::operator ==	/usr/include/boost/mpi/communicator.hpp	/^BOOST_MPI_DECL bool operator==(const communicator& comm1, const communicator& comm2);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm1, const communicator& comm2)
boost::mpi::operator ==	/usr/include/boost/mpi/group.hpp	/^BOOST_MPI_DECL bool operator==(const group& g1, const group& g2);$/;"	p	namespace:boost::mpi	signature:(const group& g1, const group& g2)
boost::mpi::operator |	/usr/include/boost/mpi/group.hpp	/^BOOST_MPI_DECL group operator|(const group& g1, const group& g2);$/;"	p	namespace:boost::mpi	signature:(const group& g1, const group& g2)
boost::mpi::oprimitive	/usr/include/boost/mpi/packed_oarchive.hpp	/^  typedef binary_buffer_oprimitive oprimitive;$/;"	t	namespace:boost::mpi
boost::mpi::out_degree	/usr/include/boost/mpi/graph_communicator.hpp	/^int out_degree(int vertex, const graph_communicator& comm);$/;"	p	namespace:boost::mpi	signature:(int vertex, const graph_communicator& comm)
boost::mpi::out_edges	/usr/include/boost/mpi/graph_communicator.hpp	/^out_edges(int vertex, const graph_communicator& comm);$/;"	p	namespace:boost::mpi	signature:(int vertex, const graph_communicator& comm)
boost::mpi::packed	/usr/include/boost/mpi/datatype_fwd.hpp	/^struct packed {};$/;"	s	namespace:boost::mpi
boost::mpi::packed_iarchive	/usr/include/boost/mpi/packed_iarchive.hpp	/^class BOOST_MPI_DECL packed_iarchive$/;"	c	namespace:boost::mpi	inherits:iprimitive,archive::detail::common_iarchive,archive::detail::shared_ptr_helper
boost::mpi::packed_iarchive::internal_buffer_	/usr/include/boost/mpi/packed_iarchive.hpp	/^  buffer_type internal_buffer_;$/;"	m	class:boost::mpi::packed_iarchive	access:private
boost::mpi::packed_iarchive::load_override	/usr/include/boost/mpi/packed_iarchive.hpp	/^  void load_override(T& x, int \/*version*\/, mpl::true_)$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(T& x, int , mpl::true_)
boost::mpi::packed_iarchive::load_override	/usr/include/boost/mpi/packed_iarchive.hpp	/^  void load_override(T& x, int version)$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(T& x, int version)
boost::mpi::packed_iarchive::load_override	/usr/include/boost/mpi/packed_iarchive.hpp	/^  void load_override(T& x, int version, mpl::false_)$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(T& x, int version, mpl::false_)
boost::mpi::packed_iarchive::load_override	/usr/include/boost/mpi/packed_iarchive.hpp	/^  void load_override(archive::class_id_optional_type & \/*t*\/, int){}$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(archive::class_id_optional_type & , int)
boost::mpi::packed_iarchive::load_override	/usr/include/boost/mpi/packed_iarchive.hpp	/^  void load_override(archive::class_name_type & t, int)$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(archive::class_name_type & t, int)
boost::mpi::packed_iarchive::packed_iarchive	/usr/include/boost/mpi/packed_iarchive.hpp	/^  packed_iarchive$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:( MPI_Comm const & comm , std::size_t s=0, unsigned int flags = boost::archive::no_header)
boost::mpi::packed_iarchive::packed_iarchive	/usr/include/boost/mpi/packed_iarchive.hpp	/^  packed_iarchive(MPI_Comm const & comm, buffer_type & b, unsigned int flags = boost::archive::no_header, int position = 0)$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(MPI_Comm const & comm, buffer_type & b, unsigned int flags = boost::archive::no_header, int position = 0)
boost::mpi::packed_iprimitive	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^class BOOST_MPI_DECL packed_iprimitive$/;"	c	namespace:boost::mpi
boost::mpi::packed_iprimitive::address	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void const* address () const$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:() const
boost::mpi::packed_iprimitive::address	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void* address ()$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:()
boost::mpi::packed_iprimitive::buffer_	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    buffer_type & buffer_;$/;"	m	class:boost::mpi::packed_iprimitive	access:private
boost::mpi::packed_iprimitive::buffer_type	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    typedef std::vector<char, allocator<char> > buffer_type;$/;"	t	class:boost::mpi::packed_iprimitive	access:public
boost::mpi::packed_iprimitive::comm	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    MPI_Comm comm;$/;"	m	class:boost::mpi::packed_iprimitive	access:private
boost::mpi::packed_iprimitive::load	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void load( T & t)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:( T & t)
boost::mpi::packed_iprimitive::load	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void load(std::basic_string<CharType> & s)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:(std::basic_string<CharType> & s)
boost::mpi::packed_iprimitive::load_array	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void load_array(serialization::array<T> const& x, unsigned int \/* file_version *\/)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:(serialization::array<T> const& x, unsigned int )
boost::mpi::packed_iprimitive::load_binary	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void load_binary(void *address, std::size_t count)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:(void *address, std::size_t count)
boost::mpi::packed_iprimitive::load_impl	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void load_impl(void * p, MPI_Datatype t, int l)$/;"	f	class:boost::mpi::packed_iprimitive	access:private	signature:(void * p, MPI_Datatype t, int l)
boost::mpi::packed_iprimitive::packed_iprimitive	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    packed_iprimitive(buffer_type & b, MPI_Comm const & comm, int position = 0)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:(buffer_type & b, MPI_Comm const & comm, int position = 0)
boost::mpi::packed_iprimitive::position	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    int position;$/;"	m	class:boost::mpi::packed_iprimitive	access:private
boost::mpi::packed_iprimitive::resize	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void resize(std::size_t s)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:(std::size_t s)
boost::mpi::packed_iprimitive::size	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    const std::size_t& size() const$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:() const
boost::mpi::packed_iprimitive::size_	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    mutable std::size_t size_;$/;"	m	class:boost::mpi::packed_iprimitive	access:private
boost::mpi::packed_iprimitive::use_array_optimization	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    typedef is_mpi_datatype<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::packed_iprimitive	access:public
boost::mpi::packed_oarchive	/usr/include/boost/mpi/packed_oarchive.hpp	/^class BOOST_MPI_DECL packed_oarchive$/;"	c	namespace:boost::mpi	inherits:oprimitive,archive::detail::common_oarchive,archive::detail::shared_ptr_helper
boost::mpi::packed_oarchive::internal_buffer_	/usr/include/boost/mpi/packed_oarchive.hpp	/^  buffer_type internal_buffer_;$/;"	m	class:boost::mpi::packed_oarchive	access:private
boost::mpi::packed_oarchive::packed_oarchive	/usr/include/boost/mpi/packed_oarchive.hpp	/^  packed_oarchive ( MPI_Comm const & comm, unsigned int flags =  boost::archive::no_header)$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:( MPI_Comm const & comm, unsigned int flags = boost::archive::no_header)
boost::mpi::packed_oarchive::packed_oarchive	/usr/include/boost/mpi/packed_oarchive.hpp	/^  packed_oarchive( MPI_Comm const & comm, buffer_type & b, unsigned int flags = boost::archive::no_header)$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:( MPI_Comm const & comm, buffer_type & b, unsigned int flags = boost::archive::no_header)
boost::mpi::packed_oarchive::save_override	/usr/include/boost/mpi/packed_oarchive.hpp	/^  void save_override(T const& x, int \/*version*\/, mpl::true_)$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:(T const& x, int , mpl::true_)
boost::mpi::packed_oarchive::save_override	/usr/include/boost/mpi/packed_oarchive.hpp	/^  void save_override(T const& x, int version)$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:(T const& x, int version)
boost::mpi::packed_oarchive::save_override	/usr/include/boost/mpi/packed_oarchive.hpp	/^  void save_override(T const& x, int version, mpl::false_)$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:(T const& x, int version, mpl::false_)
boost::mpi::packed_oarchive::save_override	/usr/include/boost/mpi/packed_oarchive.hpp	/^  void save_override(const archive::class_id_optional_type & \/*t*\/, int){}$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:(const archive::class_id_optional_type & , int)
boost::mpi::packed_oarchive::save_override	/usr/include/boost/mpi/packed_oarchive.hpp	/^  void save_override(const archive::class_name_type & t, int){$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:(const archive::class_name_type & t, int)
boost::mpi::packed_oprimitive	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^class BOOST_MPI_DECL packed_oprimitive$/;"	c	namespace:boost::mpi
boost::mpi::packed_oprimitive::address	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void const * address() const$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:() const
boost::mpi::packed_oprimitive::buffer_	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^  buffer_type& buffer_;$/;"	m	class:boost::mpi::packed_oprimitive	access:private
boost::mpi::packed_oprimitive::buffer_type	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    typedef std::vector<char, allocator<char> > buffer_type;$/;"	t	class:boost::mpi::packed_oprimitive	access:public
boost::mpi::packed_oprimitive::comm	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^  MPI_Comm comm;$/;"	m	class:boost::mpi::packed_oprimitive	access:private
boost::mpi::packed_oprimitive::packed_oprimitive	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    packed_oprimitive(buffer_type & b, MPI_Comm const & comm)$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:(buffer_type & b, MPI_Comm const & comm)
boost::mpi::packed_oprimitive::save	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void save(const T & t)$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:(const T & t)
boost::mpi::packed_oprimitive::save	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void save(const std::basic_string<CharType> &s)$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:(const std::basic_string<CharType> &s)
boost::mpi::packed_oprimitive::save_array	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void save_array(serialization::array<T> const& x, unsigned int \/* file_version *\/)$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:(serialization::array<T> const& x, unsigned int )
boost::mpi::packed_oprimitive::save_binary	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void save_binary(void const *address, std::size_t count)$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:(void const *address, std::size_t count)
boost::mpi::packed_oprimitive::save_impl	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void save_impl(void const * p, MPI_Datatype t, int l)$/;"	f	class:boost::mpi::packed_oprimitive	access:private	signature:(void const * p, MPI_Datatype t, int l)
boost::mpi::packed_oprimitive::size	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    const std::size_t& size() const$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:() const
boost::mpi::packed_oprimitive::size_	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^  mutable std::size_t size_;$/;"	m	class:boost::mpi::packed_oprimitive	access:private
boost::mpi::packed_oprimitive::use_array_optimization	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    typedef is_mpi_datatype<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::packed_oprimitive	access:public
boost::mpi::packed_skeleton_iarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^class BOOST_MPI_DECL packed_skeleton_iarchive$/;"	c	namespace:boost::mpi	inherits:detail::ignore_iprimitive,detail::forward_skeleton_iarchive
boost::mpi::packed_skeleton_iarchive::get_skeleton	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  const packed_iarchive& get_skeleton() const$/;"	f	class:boost::mpi::packed_skeleton_iarchive	access:public	signature:() const
boost::mpi::packed_skeleton_iarchive::get_skeleton	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  packed_iarchive& get_skeleton()$/;"	f	class:boost::mpi::packed_skeleton_iarchive	access:public	signature:()
boost::mpi::packed_skeleton_iarchive::packed_skeleton_iarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  explicit packed_skeleton_iarchive(packed_iarchive & archive)$/;"	f	class:boost::mpi::packed_skeleton_iarchive	access:public	signature:(packed_iarchive & archive)
boost::mpi::packed_skeleton_iarchive::packed_skeleton_iarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  packed_skeleton_iarchive(MPI_Comm const & comm,$/;"	f	class:boost::mpi::packed_skeleton_iarchive	access:public	signature:(MPI_Comm const & comm, unsigned int flags = boost::archive::no_header)
boost::mpi::packed_skeleton_iarchive::skeleton_archive_	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  packed_iarchive skeleton_archive_;$/;"	m	class:boost::mpi::packed_skeleton_iarchive	access:private
boost::mpi::packed_skeleton_oarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^class BOOST_MPI_DECL packed_skeleton_oarchive$/;"	c	namespace:boost::mpi	inherits:detail::ignore_oprimitive,detail::forward_skeleton_oarchive
boost::mpi::packed_skeleton_oarchive::get_skeleton	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  const packed_oarchive& get_skeleton() const$/;"	f	class:boost::mpi::packed_skeleton_oarchive	access:public	signature:() const
boost::mpi::packed_skeleton_oarchive::packed_skeleton_oarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  explicit packed_skeleton_oarchive(packed_oarchive & archive)$/;"	f	class:boost::mpi::packed_skeleton_oarchive	access:public	signature:(packed_oarchive & archive)
boost::mpi::packed_skeleton_oarchive::packed_skeleton_oarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  packed_skeleton_oarchive(MPI_Comm const & comm,$/;"	f	class:boost::mpi::packed_skeleton_oarchive	access:public	signature:(MPI_Comm const & comm, unsigned int flags = boost::archive::no_header)
boost::mpi::packed_skeleton_oarchive::skeleton_archive_	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  packed_oarchive skeleton_archive_;$/;"	m	class:boost::mpi::packed_skeleton_oarchive	access:private
boost::mpi::python	/usr/include/boost/mpi/python.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost::mpi
boost::mpi::python	/usr/include/boost/mpi/python/serialize.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost::mpi
boost::mpi::python	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost::mpi
boost::mpi::python::content	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^class content : public boost::mpi::content$/;"	c	namespace:boost::mpi::python	inherits:boost::mpi::content
boost::mpi::python::content::base	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  const inherited& base() const { return *this; }$/;"	f	class:boost::mpi::python::content	access:public	signature:() const
boost::mpi::python::content::base	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  inherited&       base()       { return *this; }$/;"	f	class:boost::mpi::python::content	access:public	signature:()
boost::mpi::python::content::content	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  content(const inherited& base, boost::python::object object) $/;"	f	class:boost::mpi::python::content	access:public	signature:(const inherited& base, boost::python::object object)
boost::mpi::python::content::inherited	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  typedef boost::mpi::content inherited;$/;"	t	class:boost::mpi::python::content	access:private
boost::mpi::python::content::object	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  boost::python::object object;$/;"	m	class:boost::mpi::python::content	access:public
boost::mpi::python::detail	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi::python
boost::mpi::python::detail::do_get_content	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  struct do_get_content$/;"	s	namespace:boost::mpi::python::detail
boost::mpi::python::detail::do_get_content::operator ()	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    content operator()(object value_obj) {$/;"	f	struct:boost::mpi::python::detail::do_get_content	access:public	signature:(object value_obj)
boost::mpi::python::detail::do_get_skeleton_proxy	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  struct do_get_skeleton_proxy$/;"	s	namespace:boost::mpi::python::detail
boost::mpi::python::detail::do_get_skeleton_proxy::operator ()	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    object operator()(object value) {$/;"	f	struct:boost::mpi::python::detail::do_get_skeleton_proxy	access:public	signature:(object value)
boost::mpi::python::detail::register_skeleton_and_content_handler	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  register_skeleton_and_content_handler(PyTypeObject*, $/;"	p	namespace:boost::mpi::python::detail	signature:(PyTypeObject*, const skeleton_content_handler&)
boost::mpi::python::detail::skeleton_and_content_handler_registered	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  skeleton_and_content_handler_registered(PyTypeObject* type);$/;"	p	namespace:boost::mpi::python::detail	signature:(PyTypeObject* type)
boost::mpi::python::detail::skeleton_content_handler	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  struct skeleton_content_handler {$/;"	s	namespace:boost::mpi::python::detail
boost::mpi::python::detail::skeleton_content_handler::get_content	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    function1<content, const object&> get_content;$/;"	m	struct:boost::mpi::python::detail::skeleton_content_handler	access:public
boost::mpi::python::detail::skeleton_content_handler::get_skeleton_proxy	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    function1<object, const object&> get_skeleton_proxy;$/;"	m	struct:boost::mpi::python::detail::skeleton_content_handler	access:public
boost::mpi::python::detail::skeleton_loader	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  struct skeleton_loader$/;"	s	namespace:boost::mpi::python::detail
boost::mpi::python::detail::skeleton_loader::operator ()	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    operator()(packed_iarchive& ar, object& obj, const unsigned int)$/;"	f	struct:boost::mpi::python::detail::skeleton_loader	access:public	signature:(packed_iarchive& ar, object& obj, const unsigned int)
boost::mpi::python::detail::skeleton_saver	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  struct skeleton_saver$/;"	s	namespace:boost::mpi::python::detail
boost::mpi::python::detail::skeleton_saver::operator ()	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    operator()(packed_oarchive& ar, const object& obj, const unsigned int)$/;"	f	struct:boost::mpi::python::detail::skeleton_saver	access:public	signature:(packed_oarchive& ar, const object& obj, const unsigned int)
boost::mpi::python::register_serialized	/usr/include/boost/mpi/python.hpp	/^register_serialized(const T& value = T(), PyTypeObject* type = 0);$/;"	p	namespace:boost::mpi::python	signature:(const T& value = T(), PyTypeObject* type = 0)
boost::mpi::python::register_serialized	/usr/include/boost/mpi/python/serialize.hpp	/^register_serialized(const T& value, PyTypeObject* type)$/;"	f	namespace:boost::mpi::python	signature:(const T& value, PyTypeObject* type)
boost::mpi::python::register_skeleton_and_content	/usr/include/boost/mpi/python.hpp	/^register_skeleton_and_content(const T& value = T(), PyTypeObject* type = 0);$/;"	p	namespace:boost::mpi::python	signature:(const T& value = T(), PyTypeObject* type = 0)
boost::mpi::python::register_skeleton_and_content	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^void register_skeleton_and_content(const T& value, PyTypeObject* type)$/;"	f	namespace:boost::mpi::python	signature:(const T& value, PyTypeObject* type)
boost::mpi::python::skeleton_proxy	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^class skeleton_proxy : public skeleton_proxy_base$/;"	c	namespace:boost::mpi::python	inherits:skeleton_proxy_base
boost::mpi::python::skeleton_proxy::skeleton_proxy	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  skeleton_proxy(const boost::python::object& object) $/;"	f	class:boost::mpi::python::skeleton_proxy	access:public	signature:(const boost::python::object& object)
boost::mpi::python::skeleton_proxy_base	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^class skeleton_proxy_base $/;"	c	namespace:boost::mpi::python
boost::mpi::python::skeleton_proxy_base::object	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  boost::python::object object;$/;"	m	class:boost::mpi::python::skeleton_proxy_base	access:public
boost::mpi::python::skeleton_proxy_base::skeleton_proxy_base	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  skeleton_proxy_base(const boost::python::object& object) : object(object) { }$/;"	f	class:boost::mpi::python::skeleton_proxy_base	access:public	signature:(const boost::python::object& object)
boost::mpi::reduce	/usr/include/boost/mpi/collectives.hpp	/^reduce(const communicator& comm, const T& in_value, T& out_value, Op op,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op, int root)
boost::mpi::reduce	/usr/include/boost/mpi/collectives.hpp	/^reduce(const communicator& comm, const T* in_values, int n, Op op, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, Op op, int root)
boost::mpi::reduce	/usr/include/boost/mpi/collectives.hpp	/^reduce(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root)
boost::mpi::reduce	/usr/include/boost/mpi/collectives.hpp	/^void reduce(const communicator& comm, const T& in_value, Op op, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op, int root)
boost::mpi::reduce	/usr/include/boost/mpi/collectives/reduce.hpp	/^reduce(const communicator& comm, const T& in_value, T& out_value, Op op,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op, int root)
boost::mpi::reduce	/usr/include/boost/mpi/collectives/reduce.hpp	/^reduce(const communicator& comm, const T* in_values, int n, Op op, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, Op op, int root)
boost::mpi::reduce	/usr/include/boost/mpi/collectives/reduce.hpp	/^reduce(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root)
boost::mpi::reduce	/usr/include/boost/mpi/collectives/reduce.hpp	/^void reduce(const communicator& comm, const T& in_value, Op op, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op, int root)
boost::mpi::request	/usr/include/boost/mpi/request.hpp	/^class BOOST_MPI_DECL request $/;"	c	namespace:boost::mpi
boost::mpi::request::cancel	/usr/include/boost/mpi/request.hpp	/^  void cancel();$/;"	p	class:boost::mpi::request	access:public	signature:()
boost::mpi::request::handle_serialized_array_irecv	/usr/include/boost/mpi/communicator.hpp	/^request::handle_serialized_array_irecv(request* self, request_action action)$/;"	f	class:boost::mpi::request	signature:(request* self, request_action action)
boost::mpi::request::handle_serialized_array_irecv	/usr/include/boost/mpi/request.hpp	/^  handle_serialized_array_irecv(request* self, request_action action);$/;"	p	class:boost::mpi::request	access:private	signature:(request* self, request_action action)
boost::mpi::request::handle_serialized_irecv	/usr/include/boost/mpi/communicator.hpp	/^request::handle_serialized_irecv(request* self, request_action action)$/;"	f	class:boost::mpi::request	signature:(request* self, request_action action)
boost::mpi::request::handle_serialized_irecv	/usr/include/boost/mpi/request.hpp	/^  handle_serialized_irecv(request* self, request_action action);$/;"	p	class:boost::mpi::request	access:private	signature:(request* self, request_action action)
boost::mpi::request::handler_type	/usr/include/boost/mpi/request.hpp	/^  typedef optional<status> (*handler_type)(request* self, $/;"	t	class:boost::mpi::request	access:private
boost::mpi::request::m_data	/usr/include/boost/mpi/request.hpp	/^  shared_ptr<void> m_data;$/;"	m	class:boost::mpi::request	access:public
boost::mpi::request::m_handler	/usr/include/boost/mpi/request.hpp	/^  handler_type m_handler;$/;"	m	class:boost::mpi::request	access:public
boost::mpi::request::m_requests	/usr/include/boost/mpi/request.hpp	/^  MPI_Request m_requests[2];$/;"	m	class:boost::mpi::request	access:public
boost::mpi::request::ra_cancel	/usr/include/boost/mpi/request.hpp	/^  enum request_action { ra_wait, ra_test, ra_cancel };$/;"	e	enum:boost::mpi::request::request_action
boost::mpi::request::ra_test	/usr/include/boost/mpi/request.hpp	/^  enum request_action { ra_wait, ra_test, ra_cancel };$/;"	e	enum:boost::mpi::request::request_action
boost::mpi::request::ra_wait	/usr/include/boost/mpi/request.hpp	/^  enum request_action { ra_wait, ra_test, ra_cancel };$/;"	e	enum:boost::mpi::request::request_action
boost::mpi::request::request	/usr/include/boost/mpi/request.hpp	/^  request();$/;"	p	class:boost::mpi::request	access:public	signature:()
boost::mpi::request::request_action	/usr/include/boost/mpi/request.hpp	/^  enum request_action { ra_wait, ra_test, ra_cancel };$/;"	g	class:boost::mpi::request	access:private
boost::mpi::request::test	/usr/include/boost/mpi/request.hpp	/^  optional<status> test();$/;"	p	class:boost::mpi::request	access:public	signature:()
boost::mpi::request::wait	/usr/include/boost/mpi/request.hpp	/^  status wait();$/;"	p	class:boost::mpi::request	access:public	signature:()
boost::mpi::scan	/usr/include/boost/mpi/collectives.hpp	/^scan(const communicator& comm, const T& in_value, Op op);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op)
boost::mpi::scan	/usr/include/boost/mpi/collectives.hpp	/^scan(const communicator& comm, const T& in_value, T& out_value, Op op);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op)
boost::mpi::scan	/usr/include/boost/mpi/collectives.hpp	/^scan(const communicator& comm, const T* in_values, int n, T* out_values, Op op);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op)
boost::mpi::scan	/usr/include/boost/mpi/collectives/scan.hpp	/^scan(const communicator& comm, const T& in_value, Op op)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op)
boost::mpi::scan	/usr/include/boost/mpi/collectives/scan.hpp	/^scan(const communicator& comm, const T& in_value, T& out_value, Op op)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op)
boost::mpi::scan	/usr/include/boost/mpi/collectives/scan.hpp	/^scan(const communicator& comm, const T* in_values, int n, T* out_values, Op op)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op)
boost::mpi::scatter	/usr/include/boost/mpi/collectives.hpp	/^scatter(const communicator& comm, const T* in_values, T& out_value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T& out_value, int root)
boost::mpi::scatter	/usr/include/boost/mpi/collectives.hpp	/^scatter(const communicator& comm, const T* in_values, T* out_values, int n,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T* out_values, int n, int root)
boost::mpi::scatter	/usr/include/boost/mpi/collectives.hpp	/^scatter(const communicator& comm, const std::vector<T>& in_values, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, T* out_values, int n, int root)
boost::mpi::scatter	/usr/include/boost/mpi/collectives.hpp	/^scatter(const communicator& comm, const std::vector<T>& in_values, T& out_value,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, T& out_value, int root)
boost::mpi::scatter	/usr/include/boost/mpi/collectives.hpp	/^void scatter(const communicator& comm, T& out_value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, T& out_value, int root)
boost::mpi::scatter	/usr/include/boost/mpi/collectives.hpp	/^void scatter(const communicator& comm, T* out_values, int n, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, T* out_values, int n, int root)
boost::mpi::scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^scatter(const communicator& comm, const T* in_values, T& out_value, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T& out_value, int root)
boost::mpi::scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^scatter(const communicator& comm, const T* in_values, T* out_values, int n,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T* out_values, int n, int root)
boost::mpi::scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^scatter(const communicator& comm, const std::vector<T>& in_values, $/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, T* out_values, int n, int root)
boost::mpi::scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^scatter(const communicator& comm, const std::vector<T>& in_values, T& out_value,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, T& out_value, int root)
boost::mpi::scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^void scatter(const communicator& comm, T& out_value, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, T& out_value, int root)
boost::mpi::scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^void scatter(const communicator& comm, T* out_values, int n, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, T* out_values, int n, int root)
boost::mpi::skeleton	/usr/include/boost/mpi/skeleton_and_content.hpp	/^inline const skeleton_proxy<T> skeleton(T& x)$/;"	f	namespace:boost::mpi	signature:(T& x)
boost::mpi::skeleton	/usr/include/boost/mpi/skeleton_and_content_fwd.hpp	/^template <class T> const skeleton_proxy<T> skeleton(T& x);$/;"	p	namespace:boost::mpi	signature:(T& x)
boost::mpi::skeleton_proxy	/usr/include/boost/mpi/skeleton_and_content.hpp	/^struct BOOST_MPI_DECL skeleton_proxy$/;"	s	namespace:boost::mpi
boost::mpi::skeleton_proxy::object	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  T& object;$/;"	m	struct:boost::mpi::skeleton_proxy	access:public
boost::mpi::skeleton_proxy::skeleton_proxy	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  skeleton_proxy(T& x)$/;"	f	struct:boost::mpi::skeleton_proxy	access:public	signature:(T& x)
boost::mpi::source	/usr/include/boost/mpi/graph_communicator.hpp	/^inline int source(const std::pair<int, int>& edge, const graph_communicator&)$/;"	f	namespace:boost::mpi	signature:(const std::pair<int, int>& edge, const graph_communicator&)
boost::mpi::status	/usr/include/boost/mpi/status.hpp	/^class BOOST_MPI_DECL status$/;"	c	namespace:boost::mpi
boost::mpi::status::cancelled	/usr/include/boost/mpi/status.hpp	/^  bool cancelled() const;$/;"	p	class:boost::mpi::status	access:public	signature:() const
boost::mpi::status::count	/usr/include/boost/mpi/communicator.hpp	/^inline optional<int> status::count() const$/;"	f	class:boost::mpi::status	signature:() const
boost::mpi::status::count	/usr/include/boost/mpi/status.hpp	/^  template<typename T> optional<int> count() const;$/;"	p	class:boost::mpi::status	access:public	signature:() const
boost::mpi::status::count_impl	/usr/include/boost/mpi/communicator.hpp	/^inline optional<int> status::count_impl(mpl::false_) const$/;"	f	class:boost::mpi::status	signature:(mpl::false_) const
boost::mpi::status::count_impl	/usr/include/boost/mpi/communicator.hpp	/^optional<int> status::count_impl(mpl::true_) const$/;"	f	class:boost::mpi::status	signature:(mpl::true_) const
boost::mpi::status::count_impl	/usr/include/boost/mpi/status.hpp	/^  template<typename T> optional<int> count_impl(mpl::false_) const;$/;"	p	class:boost::mpi::status	access:private	signature:(mpl::false_) const
boost::mpi::status::count_impl	/usr/include/boost/mpi/status.hpp	/^  template<typename T> optional<int> count_impl(mpl::true_) const;$/;"	p	class:boost::mpi::status	access:private	signature:(mpl::true_) const
boost::mpi::status::error	/usr/include/boost/mpi/status.hpp	/^  int error() const { return m_status.MPI_ERROR; }$/;"	f	class:boost::mpi::status	access:public	signature:() const
boost::mpi::status::m_count	/usr/include/boost/mpi/status.hpp	/^  mutable int m_count;$/;"	m	class:boost::mpi::status	access:public
boost::mpi::status::m_status	/usr/include/boost/mpi/status.hpp	/^  mutable MPI_Status m_status;$/;"	m	class:boost::mpi::status	access:public
boost::mpi::status::operator MPI_Status&	/usr/include/boost/mpi/status.hpp	/^  operator       MPI_Status&()       { return m_status; }$/;"	f	class:boost::mpi::status	access:public	signature:()
boost::mpi::status::operator const MPI_Status&	/usr/include/boost/mpi/status.hpp	/^  operator const MPI_Status&() const { return m_status; }$/;"	f	class:boost::mpi::status	access:public	signature:() const
boost::mpi::status::source	/usr/include/boost/mpi/status.hpp	/^  int source() const { return m_status.MPI_SOURCE; }$/;"	f	class:boost::mpi::status	access:public	signature:() const
boost::mpi::status::status	/usr/include/boost/mpi/status.hpp	/^  status() : m_count(-1) { }$/;"	f	class:boost::mpi::status	access:public	signature:()
boost::mpi::status::status	/usr/include/boost/mpi/status.hpp	/^  status(MPI_Status const& s) : m_status(s), m_count(-1) {}$/;"	f	class:boost::mpi::status	access:public	signature:(MPI_Status const& s)
boost::mpi::status::tag	/usr/include/boost/mpi/status.hpp	/^  int tag() const { return m_status.MPI_TAG; }$/;"	f	class:boost::mpi::status	access:public	signature:() const
boost::mpi::target	/usr/include/boost/mpi/graph_communicator.hpp	/^inline int target(const std::pair<int, int>& edge, const graph_communicator&)$/;"	f	namespace:boost::mpi	signature:(const std::pair<int, int>& edge, const graph_communicator&)
boost::mpi::test_all	/usr/include/boost/mpi/nonblocking.hpp	/^test_all(ForwardIterator first, ForwardIterator last)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last)
boost::mpi::test_all	/usr/include/boost/mpi/nonblocking.hpp	/^test_all(ForwardIterator first, ForwardIterator last, OutputIterator out)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last, OutputIterator out)
boost::mpi::test_any	/usr/include/boost/mpi/nonblocking.hpp	/^test_any(ForwardIterator first, ForwardIterator last)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last)
boost::mpi::test_some	/usr/include/boost/mpi/nonblocking.hpp	/^test_some(BidirectionalIterator first, BidirectionalIterator last)$/;"	f	namespace:boost::mpi	signature:(BidirectionalIterator first, BidirectionalIterator last)
boost::mpi::test_some	/usr/include/boost/mpi/nonblocking.hpp	/^test_some(BidirectionalIterator first, BidirectionalIterator last,$/;"	f	namespace:boost::mpi	signature:(BidirectionalIterator first, BidirectionalIterator last, OutputIterator out)
boost::mpi::text_skeleton_oarchive	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^class text_skeleton_oarchive $/;"	c	namespace:boost::mpi	inherits:detail::ignore_oprimitive,detail::forward_skeleton_oarchive
boost::mpi::text_skeleton_oarchive::skeleton_archive_	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^    boost::archive::text_oarchive skeleton_archive_;$/;"	m	class:boost::mpi::text_skeleton_oarchive	access:private
boost::mpi::text_skeleton_oarchive::text_skeleton_oarchive	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^    text_skeleton_oarchive(std::ostream & s, unsigned int flags = 0) $/;"	f	class:boost::mpi::text_skeleton_oarchive	access:public	signature:(std::ostream & s, unsigned int flags = 0)
boost::mpi::timer	/usr/include/boost/mpi/timer.hpp	/^class BOOST_MPI_DECL timer {$/;"	c	namespace:boost::mpi
boost::mpi::timer::elapsed	/usr/include/boost/mpi/timer.hpp	/^  double elapsed() const;$/;"	p	class:boost::mpi::timer	access:public	signature:() const
boost::mpi::timer::elapsed	/usr/include/boost/mpi/timer.hpp	/^inline double timer::elapsed() const$/;"	f	class:boost::mpi::timer	signature:() const
boost::mpi::timer::elapsed_max	/usr/include/boost/mpi/timer.hpp	/^  double elapsed_max() const;  $/;"	p	class:boost::mpi::timer	access:public	signature:() const
boost::mpi::timer::elapsed_max	/usr/include/boost/mpi/timer.hpp	/^inline double timer::elapsed_max() const$/;"	f	class:boost::mpi::timer	signature:() const
boost::mpi::timer::elapsed_min	/usr/include/boost/mpi/timer.hpp	/^  double elapsed_min() const;$/;"	p	class:boost::mpi::timer	access:public	signature:() const
boost::mpi::timer::elapsed_min	/usr/include/boost/mpi/timer.hpp	/^inline double timer::elapsed_min() const$/;"	f	class:boost::mpi::timer	signature:() const
boost::mpi::timer::restart	/usr/include/boost/mpi/timer.hpp	/^  void restart();$/;"	p	class:boost::mpi::timer	access:public	signature:()
boost::mpi::timer::restart	/usr/include/boost/mpi/timer.hpp	/^inline void timer::restart()$/;"	f	class:boost::mpi::timer	signature:()
boost::mpi::timer::start_time	/usr/include/boost/mpi/timer.hpp	/^  double start_time;$/;"	m	class:boost::mpi::timer	access:private
boost::mpi::timer::time_is_global	/usr/include/boost/mpi/timer.hpp	/^  static bool time_is_global();$/;"	p	class:boost::mpi::timer	access:public	signature:()
boost::mpi::timer::timer	/usr/include/boost/mpi/timer.hpp	/^  timer();$/;"	p	class:boost::mpi::timer	access:public	signature:()
boost::mpi::timer::timer	/usr/include/boost/mpi/timer.hpp	/^inline timer::timer() $/;"	f	class:boost::mpi::timer	signature:()
boost::mpi::vertices	/usr/include/boost/mpi/graph_communicator.hpp	/^vertices(const graph_communicator& comm)$/;"	f	namespace:boost::mpi	signature:(const graph_communicator& comm)
boost::mpi::wait_all	/usr/include/boost/mpi/nonblocking.hpp	/^wait_all(ForwardIterator first, ForwardIterator last)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last)
boost::mpi::wait_all	/usr/include/boost/mpi/nonblocking.hpp	/^wait_all(ForwardIterator first, ForwardIterator last, OutputIterator out)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last, OutputIterator out)
boost::mpi::wait_any	/usr/include/boost/mpi/nonblocking.hpp	/^wait_any(ForwardIterator first, ForwardIterator last)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last)
boost::mpi::wait_some	/usr/include/boost/mpi/nonblocking.hpp	/^wait_some(BidirectionalIterator first, BidirectionalIterator last)$/;"	f	namespace:boost::mpi	signature:(BidirectionalIterator first, BidirectionalIterator last)
boost::mpi::wait_some	/usr/include/boost/mpi/nonblocking.hpp	/^wait_some(BidirectionalIterator first, BidirectionalIterator last,$/;"	f	namespace:boost::mpi	signature:(BidirectionalIterator first, BidirectionalIterator last, OutputIterator out)
boost::property_map	/usr/include/boost/mpi/graph_communicator.hpp	/^struct property_map<mpi::graph_communicator, vertex_index_t>$/;"	s	namespace:boost
boost::property_map::const_type	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef identity_property_map const_type;$/;"	t	struct:boost::property_map	access:public
boost::property_map::type	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef identity_property_map type;$/;"	t	struct:boost::property_map	access:public
boost::python	/usr/include/boost/mpi/python/serialize.hpp	/^namespace boost { namespace python {$/;"	n	namespace:boost
boost::python::detail	/usr/include/boost/mpi/python/serialize.hpp	/^namespace detail {$/;"	n	namespace:boost::python
boost::python::detail::direct_serialization_table	/usr/include/boost/mpi/python/serialize.hpp	/^  class BOOST_MPI_PYTHON_DECL direct_serialization_table$/;"	c	namespace:boost::python::detail
boost::python::detail::direct_serialization_table::default_loader	/usr/include/boost/mpi/python/serialize.hpp	/^    struct default_loader {$/;"	s	class:boost::python::detail::direct_serialization_table	access:protected
boost::python::detail::direct_serialization_table::default_loader::default_loader	/usr/include/boost/mpi/python/serialize.hpp	/^      default_loader(PyTypeObject* type) : type(type) { }$/;"	f	struct:boost::python::detail::direct_serialization_table::default_loader	access:public	signature:(PyTypeObject* type)
boost::python::detail::direct_serialization_table::default_loader::operator ()	/usr/include/boost/mpi/python/serialize.hpp	/^      void operator()(IArchiver& ar, object& obj, const unsigned int) {$/;"	f	struct:boost::python::detail::direct_serialization_table::default_loader	access:public	signature:(IArchiver& ar, object& obj, const unsigned int)
boost::python::detail::direct_serialization_table::default_loader::type	/usr/include/boost/mpi/python/serialize.hpp	/^      PyTypeObject* type;$/;"	m	struct:boost::python::detail::direct_serialization_table::default_loader	access:private
boost::python::detail::direct_serialization_table::default_saver	/usr/include/boost/mpi/python/serialize.hpp	/^    struct default_saver {$/;"	s	class:boost::python::detail::direct_serialization_table	access:protected
boost::python::detail::direct_serialization_table::default_saver::operator ()	/usr/include/boost/mpi/python/serialize.hpp	/^      void operator()(OArchiver& ar, const object& obj, const unsigned int) {$/;"	f	struct:boost::python::detail::direct_serialization_table::default_saver	access:public	signature:(OArchiver& ar, const object& obj, const unsigned int)
boost::python::detail::direct_serialization_table::loader	/usr/include/boost/mpi/python/serialize.hpp	/^    loader_t loader(int descriptor)$/;"	f	class:boost::python::detail::direct_serialization_table	access:public	signature:(int descriptor)
boost::python::detail::direct_serialization_table::loader_t	/usr/include/boost/mpi/python/serialize.hpp	/^      loader_t;$/;"	t	class:boost::python::detail::direct_serialization_table	access:public
boost::python::detail::direct_serialization_table::loaders	/usr/include/boost/mpi/python/serialize.hpp	/^    loaders_t loaders;$/;"	m	class:boost::python::detail::direct_serialization_table	access:protected
boost::python::detail::direct_serialization_table::loaders_t	/usr/include/boost/mpi/python/serialize.hpp	/^    typedef std::map<int, loader_t> loaders_t;$/;"	t	class:boost::python::detail::direct_serialization_table	access:public
boost::python::detail::direct_serialization_table::register_type	/usr/include/boost/mpi/python/serialize.hpp	/^    void register_type(const T& value = T(), PyTypeObject* type = 0)$/;"	f	class:boost::python::detail::direct_serialization_table	access:public	signature:(const T& value = T(), PyTypeObject* type = 0)
boost::python::detail::direct_serialization_table::register_type	/usr/include/boost/mpi/python/serialize.hpp	/^    void register_type(const saver_t& saver, const loader_t& loader, $/;"	f	class:boost::python::detail::direct_serialization_table	access:public	signature:(const saver_t& saver, const loader_t& loader, const T& value = T(), PyTypeObject* type = 0)
boost::python::detail::direct_serialization_table::saver	/usr/include/boost/mpi/python/serialize.hpp	/^    saver_t saver(const object& obj, int& descriptor)$/;"	f	class:boost::python::detail::direct_serialization_table	access:public	signature:(const object& obj, int& descriptor)
boost::python::detail::direct_serialization_table::saver_t	/usr/include/boost/mpi/python/serialize.hpp	/^      saver_t;$/;"	t	class:boost::python::detail::direct_serialization_table	access:public
boost::python::detail::direct_serialization_table::savers	/usr/include/boost/mpi/python/serialize.hpp	/^    savers_t savers;$/;"	m	class:boost::python::detail::direct_serialization_table	access:protected
boost::python::detail::direct_serialization_table::savers_t	/usr/include/boost/mpi/python/serialize.hpp	/^    typedef std::map<PyTypeObject*, std::pair<int, saver_t> > savers_t;$/;"	t	class:boost::python::detail::direct_serialization_table	access:public
boost::python::detail::get_direct_serialization_table	/usr/include/boost/mpi/python/serialize.hpp	/^  get_direct_serialization_table();$/;"	p	namespace:boost::python::detail	signature:()
boost::python::detail::load_impl	/usr/include/boost/mpi/python/serialize.hpp	/^load_impl(Archiver& ar, boost::python::object& obj, $/;"	f	namespace:boost::python::detail	signature:(Archiver& ar, boost::python::object& obj, const unsigned int , mpl::false_ )
boost::python::detail::load_impl	/usr/include/boost/mpi/python/serialize.hpp	/^load_impl(Archiver& ar, boost::python::object& obj, $/;"	f	namespace:boost::python::detail	signature:(Archiver& ar, boost::python::object& obj, const unsigned int version, mpl::true_ )
boost::python::detail::save_impl	/usr/include/boost/mpi/python/serialize.hpp	/^save_impl(Archiver& ar, const boost::python::object& obj, $/;"	f	namespace:boost::python::detail	signature:(Archiver& ar, const boost::python::object& obj, const unsigned int , mpl::false_ )
boost::python::detail::save_impl	/usr/include/boost/mpi/python/serialize.hpp	/^save_impl(Archiver& ar, const boost::python::object& obj, $/;"	f	namespace:boost::python::detail	signature:(Archiver& ar, const boost::python::object& obj, const unsigned int version, mpl::true_ )
boost::python::has_direct_serialization	/usr/include/boost/mpi/python/serialize.hpp	/^struct has_direct_serialization : mpl::false_ { };$/;"	s	namespace:boost::python	inherits:mpl::false_
boost::python::input_archiver	/usr/include/boost/mpi/python/serialize.hpp	/^template<typename OArchiver> struct input_archiver { };$/;"	s	namespace:boost::python
boost::python::load	/usr/include/boost/mpi/python/serialize.hpp	/^load(Archiver& ar, boost::python::object& obj, $/;"	f	namespace:boost::python	signature:(Archiver& ar, boost::python::object& obj, const unsigned int version)
boost::python::output_archiver	/usr/include/boost/mpi/python/serialize.hpp	/^template<typename IArchiver> struct output_archiver { };$/;"	s	namespace:boost::python
boost::python::pickle	/usr/include/boost/mpi/python/serialize.hpp	/^class BOOST_MPI_PYTHON_DECL pickle {$/;"	c	namespace:boost::python
boost::python::pickle::data	/usr/include/boost/mpi/python/serialize.hpp	/^  static data_t* data;$/;"	m	class:boost::python::pickle	access:private
boost::python::pickle::dumps	/usr/include/boost/mpi/python/serialize.hpp	/^  static str dumps(object obj, int protocol = -1);$/;"	p	class:boost::python::pickle	access:public	signature:(object obj, int protocol = -1)
boost::python::pickle::initialize_data	/usr/include/boost/mpi/python/serialize.hpp	/^  static void initialize_data();$/;"	p	class:boost::python::pickle	access:private	signature:()
boost::python::pickle::loads	/usr/include/boost/mpi/python/serialize.hpp	/^  static object loads(str s);$/;"	p	class:boost::python::pickle	access:public	signature:(str s)
boost::python::register_serialized	/usr/include/boost/mpi/python/serialize.hpp	/^register_serialized(const T& value = T(), PyTypeObject* type = 0)$/;"	f	namespace:boost::python	signature:(const T& value = T(), PyTypeObject* type = 0)
boost::python::save	/usr/include/boost/mpi/python/serialize.hpp	/^save(Archiver& ar, const boost::python::object& obj, $/;"	f	namespace:boost::python	signature:(Archiver& ar, const boost::python::object& obj, const unsigned int version)
boost::python::serialize	/usr/include/boost/mpi/python/serialize.hpp	/^serialize(Archive& ar, boost::python::object& obj, const unsigned int version)$/;"	f	namespace:boost::python	signature:(Archive& ar, boost::python::object& obj, const unsigned int version)
branching_factor	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int branching_factor() const { return branching_factor_; }$/;"	f	class:boost::mpi::detail::computation_tree	access:public	signature:() const
branching_factor_	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int branching_factor_;$/;"	m	class:boost::mpi::detail::computation_tree	access:protected
broadcast	/usr/include/boost/mpi/collectives.hpp	/^broadcast(const communicator& comm, const skeleton_proxy<T>& value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const skeleton_proxy<T>& value, int root)
broadcast	/usr/include/boost/mpi/collectives.hpp	/^void broadcast(const communicator& comm, T& value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, T& value, int root)
broadcast	/usr/include/boost/mpi/collectives.hpp	/^void broadcast(const communicator& comm, T* values, int n, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, T* values, int n, int root)
broadcast	/usr/include/boost/mpi/collectives.hpp	/^void broadcast(const communicator& comm, skeleton_proxy<T>& value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, skeleton_proxy<T>& value, int root)
broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<const packed_oarchive>(const communicator& comm,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const packed_oarchive& oa, int root)
broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<const packed_skeleton_oarchive>(const communicator& comm,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const packed_skeleton_oarchive& oa, int root)
broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<packed_iarchive>(const communicator& comm, packed_iarchive& ia,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, packed_iarchive& ia, int root)
broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<packed_oarchive>(const communicator& comm, packed_oarchive& oa,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, packed_oarchive& oa, int root)
broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<packed_skeleton_iarchive>(const communicator& comm,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, packed_skeleton_iarchive& ia, int root)
broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^broadcast<packed_skeleton_oarchive>(const communicator& comm,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, packed_skeleton_oarchive& oa, int root)
broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^void broadcast(const communicator& comm, T& value, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, T& value, int root)
broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^void broadcast(const communicator& comm, T* values, int n, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, T* values, int n, int root)
broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^void broadcast<const content>(const communicator& comm, const content& c,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const content& c, int root)
broadcast	/usr/include/boost/mpi/collectives/broadcast.hpp	/^void broadcast<content>(const communicator& comm, content& c, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, content& c, int root)
broadcast	/usr/include/boost/mpi/detail/broadcast_sc.hpp	/^broadcast(const communicator& comm, const skeleton_proxy<T>& proxy, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const skeleton_proxy<T>& proxy, int root)
broadcast	/usr/include/boost/mpi/detail/broadcast_sc.hpp	/^broadcast(const communicator& comm, skeleton_proxy<T>& proxy, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, skeleton_proxy<T>& proxy, int root)
broadcast_impl	/usr/include/boost/mpi/collectives/broadcast.hpp	/^  broadcast_impl(const communicator& comm, T* values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, T* values, int n, int root, mpl::false_)
broadcast_impl	/usr/include/boost/mpi/collectives/broadcast.hpp	/^  broadcast_impl(const communicator& comm, T* values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, T* values, int n, int root, mpl::true_)
buffer_	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    buffer_type & buffer_;$/;"	m	class:boost::mpi::binary_buffer_iprimitive	access:private
buffer_	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^  buffer_type& buffer_;$/;"	m	class:boost::mpi::binary_buffer_oprimitive	access:private
buffer_	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    buffer_type & buffer_;$/;"	m	class:boost::mpi::packed_iprimitive	access:private
buffer_	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^  buffer_type& buffer_;$/;"	m	class:boost::mpi::packed_oprimitive	access:private
buffer_type	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    typedef std::vector<char, allocator<char> > buffer_type;$/;"	t	class:boost::mpi::binary_buffer_iprimitive	access:public
buffer_type	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    typedef std::vector<char, allocator<char> > buffer_type;$/;"	t	class:boost::mpi::binary_buffer_oprimitive	access:public
buffer_type	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    typedef std::vector<char, allocator<char> > buffer_type;$/;"	t	class:boost::mpi::packed_iprimitive	access:public
buffer_type	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    typedef std::vector<char, allocator<char> > buffer_type;$/;"	t	class:boost::mpi::packed_oprimitive	access:public
build_mpi_datatype_for_bool	/usr/include/boost/mpi/datatype.hpp	/^  inline MPI_Datatype build_mpi_datatype_for_bool()$/;"	f	namespace:boost::mpi::detail	signature:()
builtin	/usr/include/boost/mpi/datatype.hpp	/^                   builtin);$/;"	m	namespace:boost::mpi
builtin	/usr/include/boost/mpi/datatype.hpp	/^BOOST_MPI_DATATYPE(std::pair<BOOST_MPI_LIST2(int, int>), MPI_2INT, builtin);$/;"	m	namespace:boost::mpi
c	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^    content c;$/;"	m	class:boost::mpi::detail::content_oarchive	access:private
cancel	/usr/include/boost/mpi/request.hpp	/^  void cancel();$/;"	p	class:boost::mpi::request	access:public	signature:()
cancelled	/usr/include/boost/mpi/status.hpp	/^  bool cancelled() const;$/;"	p	class:boost::mpi::status	access:public	signature:() const
child_begin	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int child_begin() const;$/;"	p	class:boost::mpi::detail::computation_tree	access:public	signature:() const
clear	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  void clear(); $/;"	p	class:boost::mpi::detail::mpi_datatype_map	access:public	signature:()
collectives_tag	/usr/include/boost/mpi/environment.hpp	/^  static int collectives_tag();$/;"	p	class:boost::mpi::environment	access:public	signature:()
comm	/usr/include/boost/mpi/communicator.hpp	/^    communicator comm;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
comm	/usr/include/boost/mpi/communicator.hpp	/^    communicator comm;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
comm	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    communicator comm;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
comm	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    MPI_Comm comm;$/;"	m	class:boost::mpi::packed_iprimitive	access:private
comm	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^  MPI_Comm comm;$/;"	m	class:boost::mpi::packed_oprimitive	access:private
comm_adj_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_adj_iterator() { }$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:public	signature:()
comm_adj_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_adj_iterator(shared_array<int> neighbors, int index)$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:public	signature:(shared_array<int> neighbors, int index)
comm_adj_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  class comm_adj_iterator$/;"	c	namespace:boost::mpi::detail	inherits:iterator_facade
comm_attach	/usr/include/boost/mpi/communicator.hpp	/^enum comm_create_kind { comm_duplicate, comm_take_ownership, comm_attach };$/;"	e	enum:boost::mpi::comm_create_kind
comm_create_kind	/usr/include/boost/mpi/communicator.hpp	/^enum comm_create_kind { comm_duplicate, comm_take_ownership, comm_attach };$/;"	g	namespace:boost::mpi
comm_duplicate	/usr/include/boost/mpi/communicator.hpp	/^enum comm_create_kind { comm_duplicate, comm_take_ownership, comm_attach };$/;"	e	enum:boost::mpi::comm_create_kind
comm_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_edge_iterator() { }$/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:public	signature:()
comm_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_edge_iterator(int nedges) : edge_index(nedges) { }$/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:public	signature:(int nedges)
comm_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_edge_iterator(shared_array<int> indices, shared_array<int> edges)$/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:public	signature:(shared_array<int> indices, shared_array<int> edges)
comm_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  class comm_edge_iterator$/;"	c	namespace:boost::mpi::detail	inherits:iterator_facade
comm_free	/usr/include/boost/mpi/communicator.hpp	/^  struct comm_free$/;"	s	class:boost::mpi::communicator	access:protected
comm_out_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_out_edge_iterator() { }$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:public	signature:()
comm_out_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^    comm_out_edge_iterator(int source, shared_array<int> neighbors, int index)$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:public	signature:(int source, shared_array<int> neighbors, int index)
comm_out_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  class comm_out_edge_iterator$/;"	c	namespace:boost::mpi::detail	inherits:iterator_facade
comm_ptr	/usr/include/boost/mpi/communicator.hpp	/^  shared_ptr<MPI_Comm> comm_ptr;$/;"	m	class:boost::mpi::communicator	access:protected
comm_take_ownership	/usr/include/boost/mpi/communicator.hpp	/^enum comm_create_kind { comm_duplicate, comm_take_ownership, comm_attach };$/;"	e	enum:boost::mpi::comm_create_kind
commit	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    void commit()$/;"	f	class:boost::mpi::detail::mpi_datatype_holder	access:public	signature:()
commit	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  void commit()$/;"	f	class:boost::mpi::content	access:public	signature:()
committed	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^    bool committed;$/;"	m	class:boost::mpi::detail::content_oarchive	access:private
communicator	/usr/include/boost/mpi/communicator.hpp	/^  communicator();$/;"	p	class:boost::mpi::communicator	access:public	signature:()
communicator	/usr/include/boost/mpi/communicator.hpp	/^  communicator(const MPI_Comm& comm, comm_create_kind kind);$/;"	p	class:boost::mpi::communicator	access:public	signature:(const MPI_Comm& comm, comm_create_kind kind)
communicator	/usr/include/boost/mpi/communicator.hpp	/^  communicator(const communicator& comm, const boost::mpi::group& subgroup);$/;"	p	class:boost::mpi::communicator	access:public	signature:(const communicator& comm, const boost::mpi::group& subgroup)
communicator	/usr/include/boost/mpi/communicator.hpp	/^class BOOST_MPI_DECL communicator$/;"	c	namespace:boost::mpi
computation_tree	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  computation_tree(int rank, int size, int root, int branching_factor = -1);$/;"	p	class:boost::mpi::detail::computation_tree	access:public	signature:(int rank, int size, int root, int branching_factor = -1)
computation_tree	/usr/include/boost/mpi/detail/computation_tree.hpp	/^class computation_tree$/;"	c	namespace:boost::mpi::detail
const_pointer	/usr/include/boost/mpi/allocator.hpp	/^  typedef const T*        const_pointer;$/;"	t	class:boost::mpi::allocator	access:public
const_pointer	/usr/include/boost/mpi/allocator.hpp	/^  typedef const void* const_pointer; $/;"	t	class:boost::mpi::allocator	access:public
const_reference	/usr/include/boost/mpi/allocator.hpp	/^  typedef const T&        const_reference;$/;"	t	class:boost::mpi::allocator	access:public
const_type	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef identity_property_map const_type;$/;"	t	struct:boost::property_map	access:public
construct	/usr/include/boost/mpi/allocator.hpp	/^  void construct(pointer p, const T& val)$/;"	f	class:boost::mpi::allocator	access:public	signature:(pointer p, const T& val)
content	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  content(const inherited& base, boost::python::object object) $/;"	f	class:boost::mpi::python::content	access:public	signature:(const inherited& base, boost::python::object object)
content	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^class content : public boost::mpi::content$/;"	c	namespace:boost::mpi::python	inherits:boost::mpi::content
content	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  content() {}$/;"	f	class:boost::mpi::content	access:public	signature:()
content	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  content(MPI_Datatype d, bool committed=true)$/;"	f	class:boost::mpi::content	access:public	signature:(MPI_Datatype d, bool committed=true)
content	/usr/include/boost/mpi/skeleton_and_content.hpp	/^class BOOST_MPI_DECL content$/;"	c	namespace:boost::mpi
content_oarchive	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^      content_oarchive()$/;"	f	class:boost::mpi::detail::content_oarchive	access:public	signature:()
content_oarchive	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^  class BOOST_MPI_DECL content_oarchive$/;"	c	namespace:boost::mpi::detail	inherits:mpi_datatype_primitive,ignore_skeleton_oarchive
count	/usr/include/boost/mpi/communicator.hpp	/^    std::size_t count;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
count	/usr/include/boost/mpi/communicator.hpp	/^    std::size_t count;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
count	/usr/include/boost/mpi/communicator.hpp	/^inline optional<int> status::count() const$/;"	f	class:boost::mpi::status	signature:() const
count	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    std::size_t count;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
count	/usr/include/boost/mpi/status.hpp	/^  template<typename T> optional<int> count() const;$/;"	p	class:boost::mpi::status	access:public	signature:() const
count_impl	/usr/include/boost/mpi/communicator.hpp	/^inline optional<int> status::count_impl(mpl::false_) const$/;"	f	class:boost::mpi::status	signature:(mpl::false_) const
count_impl	/usr/include/boost/mpi/communicator.hpp	/^optional<int> status::count_impl(mpl::true_) const$/;"	f	class:boost::mpi::status	signature:(mpl::true_) const
count_impl	/usr/include/boost/mpi/status.hpp	/^  template<typename T> optional<int> count_impl(mpl::false_) const;$/;"	p	class:boost::mpi::status	access:private	signature:(mpl::false_) const
count_impl	/usr/include/boost/mpi/status.hpp	/^  template<typename T> optional<int> count_impl(mpl::true_) const;$/;"	p	class:boost::mpi::status	access:private	signature:(mpl::true_) const
d	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    MPI_Datatype d;$/;"	m	class:boost::mpi::detail::mpi_datatype_holder	access:private
data	/usr/include/boost/mpi/python/serialize.hpp	/^  static data_t* data;$/;"	m	class:boost::python::pickle	access:private
datatype	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  MPI_Datatype datatype(const T& x = T(), typename boost::enable_if<is_mpi_builtin_datatype<T> >::type* =0)$/;"	f	class:boost::mpi::detail::mpi_datatype_map	access:public	signature:(const T& x = T(), typename boost::enable_if<is_mpi_builtin_datatype<T> >::type* =0)
datatype	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  MPI_Datatype datatype(const T& x =T(), typename boost::disable_if<is_mpi_builtin_datatype<T> >::type* =0 )$/;"	f	class:boost::mpi::detail::mpi_datatype_map	access:public	signature:(const T& x =T(), typename boost::disable_if<is_mpi_builtin_datatype<T> >::type* =0 )
datatype_	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    MPI_Datatype datatype_;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
deallocate	/usr/include/boost/mpi/allocator.hpp	/^  void deallocate(pointer p, size_type \/*n*\/)$/;"	f	class:boost::mpi::allocator	access:public	signature:(pointer p, size_type )
decrement	/usr/include/boost/mpi/graph_communicator.hpp	/^    void decrement() { --index; }$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:()
decrement	/usr/include/boost/mpi/graph_communicator.hpp	/^    void decrement() { --index; }$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:()
default_branching_factor	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  static int default_branching_factor;$/;"	m	class:boost::mpi::detail::computation_tree	access:public
default_loader	/usr/include/boost/mpi/python/serialize.hpp	/^      default_loader(PyTypeObject* type) : type(type) { }$/;"	f	struct:boost::python::detail::direct_serialization_table::default_loader	access:public	signature:(PyTypeObject* type)
default_loader	/usr/include/boost/mpi/python/serialize.hpp	/^    struct default_loader {$/;"	s	class:boost::python::detail::direct_serialization_table	access:protected
default_saver	/usr/include/boost/mpi/python/serialize.hpp	/^    struct default_saver {$/;"	s	class:boost::python::detail::direct_serialization_table	access:protected
degree_size_type	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef int degree_size_type;$/;"	t	struct:boost::graph_traits	access:public
dereference	/usr/include/boost/mpi/graph_communicator.hpp	/^    const std::pair<int, int>& dereference() const$/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:protected	signature:() const
dereference	/usr/include/boost/mpi/graph_communicator.hpp	/^    const std::pair<int, int>& dereference() const$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:() const
dereference	/usr/include/boost/mpi/graph_communicator.hpp	/^    int dereference() const { return neighbors[index]; }$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:() const
deserialize	/usr/include/boost/mpi/communicator.hpp	/^    void deserialize(status& stat) $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(status& stat)
deserialize	/usr/include/boost/mpi/communicator.hpp	/^    void deserialize(status& stat);$/;"	p	struct:boost::mpi::detail::serialized_array_irecv_data	access:public	signature:(status& stat)
deserialize	/usr/include/boost/mpi/communicator.hpp	/^    void deserialize(status&) { \/* Do nothing. *\/ }$/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(status&)
deserialize	/usr/include/boost/mpi/communicator.hpp	/^  void serialized_array_irecv_data<T>::deserialize(status& stat)$/;"	f	class:boost::mpi::detail::serialized_array_irecv_data	signature:(status& stat)
deserialize	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    void deserialize(status& stat) $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(status& stat)
destroy	/usr/include/boost/mpi/allocator.hpp	/^  void destroy(pointer p)$/;"	f	class:boost::mpi::allocator	access:public	signature:(pointer p)
detail	/usr/include/boost/mpi/collectives/all_gather.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/collectives/broadcast.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/collectives/gather.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/collectives/reduce.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/collectives/scan.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/collectives/scatter.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/communicator.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/datatype.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/computation_tree.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/point_to_point.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/graph_communicator.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/operations.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
detail	/usr/include/boost/mpi/python/serialize.hpp	/^namespace detail {$/;"	n	namespace:boost::python
detail	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi::python
detail	/usr/include/boost/mpi/skeleton_and_content.hpp	/^namespace detail {$/;"	n	namespace:boost::mpi
difference_type	/usr/include/boost/mpi/allocator.hpp	/^  typedef std::ptrdiff_t  difference_type;$/;"	t	class:boost::mpi::allocator	access:public
direct_serialization_table	/usr/include/boost/mpi/python/serialize.hpp	/^  class BOOST_MPI_PYTHON_DECL direct_serialization_table$/;"	c	namespace:boost::python::detail
directed_category	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef directed_tag               directed_category;$/;"	t	struct:boost::graph_traits	access:public
distance_to	/usr/include/boost/mpi/graph_communicator.hpp	/^    int distance_to(const comm_adj_iterator& other) const$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:(const comm_adj_iterator& other) const
distance_to	/usr/include/boost/mpi/graph_communicator.hpp	/^    int distance_to(const comm_out_edge_iterator& other) const$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:(const comm_out_edge_iterator& other) const
do_get_content	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  struct do_get_content$/;"	s	namespace:boost::mpi::python::detail
do_get_skeleton_proxy	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  struct do_get_skeleton_proxy$/;"	s	namespace:boost::mpi::python::detail
dumps	/usr/include/boost/mpi/python/serialize.hpp	/^  static str dumps(object obj, int protocol = -1);$/;"	p	class:boost::python::pickle	access:public	signature:(object obj, int protocol = -1)
edge	/usr/include/boost/mpi/graph_communicator.hpp	/^    mutable std::pair<int, int> edge;$/;"	m	class:boost::mpi::detail::comm_edge_iterator	access:protected
edge	/usr/include/boost/mpi/graph_communicator.hpp	/^    mutable std::pair<int, int> edge;$/;"	m	class:boost::mpi::detail::comm_out_edge_iterator	access:protected
edge_descriptor	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef std::pair<int, int>        edge_descriptor;$/;"	t	struct:boost::graph_traits	access:public
edge_index	/usr/include/boost/mpi/graph_communicator.hpp	/^    int edge_index;$/;"	m	class:boost::mpi::detail::comm_edge_iterator	access:protected
edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef mpi::detail::comm_edge_iterator edge_iterator;$/;"	t	struct:boost::graph_traits	access:public
edge_parallel_category	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef disallow_parallel_edge_tag edge_parallel_category;$/;"	t	struct:boost::graph_traits	access:public
edges	/usr/include/boost/mpi/graph_communicator.hpp	/^    shared_array<int> edges;$/;"	m	class:boost::mpi::detail::comm_edge_iterator	access:protected
edges	/usr/include/boost/mpi/graph_communicator.hpp	/^edges(const graph_communicator& comm);$/;"	p	namespace:boost::mpi	signature:(const graph_communicator& comm)
edges_size_type	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef int                             edges_size_type;$/;"	t	struct:boost::graph_traits	access:public
elapsed	/usr/include/boost/mpi/timer.hpp	/^  double elapsed() const;$/;"	p	class:boost::mpi::timer	access:public	signature:() const
elapsed	/usr/include/boost/mpi/timer.hpp	/^inline double timer::elapsed() const$/;"	f	class:boost::mpi::timer	signature:() const
elapsed_max	/usr/include/boost/mpi/timer.hpp	/^  double elapsed_max() const;  $/;"	p	class:boost::mpi::timer	access:public	signature:() const
elapsed_max	/usr/include/boost/mpi/timer.hpp	/^inline double timer::elapsed_max() const$/;"	f	class:boost::mpi::timer	signature:() const
elapsed_min	/usr/include/boost/mpi/timer.hpp	/^  double elapsed_min() const;$/;"	p	class:boost::mpi::timer	access:public	signature:() const
elapsed_min	/usr/include/boost/mpi/timer.hpp	/^inline double timer::elapsed_min() const$/;"	f	class:boost::mpi::timer	signature:() const
environment	/usr/include/boost/mpi/environment.hpp	/^  environment(int& argc, char** &argv, bool abort_on_exception = true);$/;"	p	class:boost::mpi::environment	access:public	signature:(int& argc, char** &argv, bool abort_on_exception = true)
environment	/usr/include/boost/mpi/environment.hpp	/^  explicit environment(bool abort_on_exception = true);$/;"	p	class:boost::mpi::environment	access:public	signature:(bool abort_on_exception = true)
environment	/usr/include/boost/mpi/environment.hpp	/^class BOOST_MPI_DECL environment : noncopyable {$/;"	c	namespace:boost::mpi	inherits:noncopyable
equal	/usr/include/boost/mpi/graph_communicator.hpp	/^    bool equal(const comm_adj_iterator& other) const$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:(const comm_adj_iterator& other) const
equal	/usr/include/boost/mpi/graph_communicator.hpp	/^    bool equal(const comm_edge_iterator& other) const$/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:protected	signature:(const comm_edge_iterator& other) const
equal	/usr/include/boost/mpi/graph_communicator.hpp	/^    bool equal(const comm_out_edge_iterator& other) const$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:(const comm_out_edge_iterator& other) const
error	/usr/include/boost/mpi/status.hpp	/^  int error() const { return m_status.MPI_ERROR; }$/;"	f	class:boost::mpi::status	access:public	signature:() const
error_class	/usr/include/boost/mpi/exception.hpp	/^  int error_class() const $/;"	f	class:boost::mpi::exception	access:public	signature:() const
exception	/usr/include/boost/mpi/exception.hpp	/^  exception(const char* routine, int result_code);$/;"	p	class:boost::mpi::exception	access:public	signature:(const char* routine, int result_code)
exception	/usr/include/boost/mpi/exception.hpp	/^class BOOST_MPI_DECL exception : public std::exception$/;"	c	namespace:boost::mpi	inherits:std::exception
exclude	/usr/include/boost/mpi/group.hpp	/^  group exclude(InputIterator first, InputIterator last);$/;"	p	class:boost::mpi::group	access:public	signature:(InputIterator first, InputIterator last)
exclude	/usr/include/boost/mpi/group.hpp	/^group group::exclude(InputIterator first, InputIterator last)$/;"	f	class:boost::mpi::group	signature:(InputIterator first, InputIterator last)
exclude	/usr/include/boost/mpi/group.hpp	/^template<> BOOST_MPI_DECL group group::exclude(int* first, int* last);$/;"	p	class:boost::mpi::group	signature:(int* first, int* last)
finalized	/usr/include/boost/mpi/environment.hpp	/^  static bool finalized();$/;"	p	class:boost::mpi::environment	access:public	signature:()
forward_iprimitive	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    forward_iprimitive(implementation_archive_type& ar)$/;"	f	class:boost::mpi::detail::forward_iprimitive	access:public	signature:(implementation_archive_type& ar)
forward_iprimitive	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^class forward_iprimitive$/;"	c	namespace:boost::mpi::detail
forward_oprimitive	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    forward_oprimitive(implementation_archive_type& ar)$/;"	f	class:boost::mpi::detail::forward_oprimitive	access:public	signature:(implementation_archive_type& ar)
forward_oprimitive	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^class forward_oprimitive$/;"	c	namespace:boost::mpi::detail
forward_skeleton_iarchive	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^    forward_skeleton_iarchive(implementation_archive_type& ar) $/;"	f	class:boost::mpi::detail::forward_skeleton_iarchive	access:public	signature:(implementation_archive_type& ar)
forward_skeleton_iarchive	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^class forward_skeleton_iarchive $/;"	c	namespace:boost::mpi::detail	inherits:archive::detail::common_iarchive
forward_skeleton_oarchive	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^    forward_skeleton_oarchive(implementation_archive_type& ar) $/;"	f	class:boost::mpi::detail::forward_skeleton_oarchive	access:public	signature:(implementation_archive_type& ar)
forward_skeleton_oarchive	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^class forward_skeleton_oarchive $/;"	c	namespace:boost::mpi::detail	inherits:archive::detail::common_oarchive
gather	/usr/include/boost/mpi/collectives.hpp	/^gather(const communicator& comm, const T& in_value, T* out_values, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T* out_values, int root)
gather	/usr/include/boost/mpi/collectives.hpp	/^gather(const communicator& comm, const T& in_value, std::vector<T>& out_values,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, std::vector<T>& out_values, int root)
gather	/usr/include/boost/mpi/collectives.hpp	/^gather(const communicator& comm, const T* in_values, int n, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, std::vector<T>& out_values, int root)
gather	/usr/include/boost/mpi/collectives.hpp	/^gather(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, int root)
gather	/usr/include/boost/mpi/collectives.hpp	/^void gather(const communicator& comm, const T& in_value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, int root)
gather	/usr/include/boost/mpi/collectives.hpp	/^void gather(const communicator& comm, const T* in_values, int n, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, int root)
gather	/usr/include/boost/mpi/collectives/gather.hpp	/^gather(const communicator& comm, const T& in_value, T* out_values, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T* out_values, int root)
gather	/usr/include/boost/mpi/collectives/gather.hpp	/^gather(const communicator& comm, const T& in_value, std::vector<T>& out_values,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, std::vector<T>& out_values, int root)
gather	/usr/include/boost/mpi/collectives/gather.hpp	/^gather(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, std::vector<T>& out_values, int root)
gather	/usr/include/boost/mpi/collectives/gather.hpp	/^gather(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, int root)
gather	/usr/include/boost/mpi/collectives/gather.hpp	/^void gather(const communicator& comm, const T& in_value, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, int root)
gather	/usr/include/boost/mpi/collectives/gather.hpp	/^void gather(const communicator& comm, const T* in_values, int n, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, int root)
gather_impl	/usr/include/boost/mpi/collectives/gather.hpp	/^  gather_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, int root, mpl::false_)
gather_impl	/usr/include/boost/mpi/collectives/gather.hpp	/^  gather_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, int root, mpl::true_)
gather_impl	/usr/include/boost/mpi/collectives/gather.hpp	/^  gather_impl(const communicator& comm, const T* in_values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, int root, mpl::false_)
gather_impl	/usr/include/boost/mpi/collectives/gather.hpp	/^  gather_impl(const communicator& comm, const T* in_values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, int root, mpl::true_)
get	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  MPI_Datatype get(const std::type_info* t);$/;"	p	class:boost::mpi::detail::mpi_datatype_map	access:private	signature:(const std::type_info* t)
get	/usr/include/boost/mpi/graph_communicator.hpp	/^inline identity_property_map get(vertex_index_t, const graph_communicator&)$/;"	f	namespace:boost::mpi	signature:(vertex_index_t, const graph_communicator&)
get	/usr/include/boost/mpi/graph_communicator.hpp	/^inline int get(vertex_index_t, const graph_communicator&, int vertex)$/;"	f	namespace:boost::mpi	signature:(vertex_index_t, const graph_communicator&, int vertex)
get_content	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^      content get_content()$/;"	f	class:boost::mpi::detail::content_oarchive	access:public	signature:()
get_content	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^const content get_content(const T& x)$/;"	f	namespace:boost::mpi	signature:(const T& x)
get_content	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    function1<content, const object&> get_content;$/;"	m	struct:boost::mpi::python::detail::skeleton_content_handler	access:public
get_content	/usr/include/boost/mpi/skeleton_and_content.hpp	/^template <class T> const content get_content(const T& x);$/;"	p	namespace:boost::mpi	signature:(const T& x)
get_content	/usr/include/boost/mpi/skeleton_and_content_fwd.hpp	/^template <class T> const content get_content(const T& x);$/;"	p	namespace:boost::mpi	signature:(const T& x)
get_direct_serialization_table	/usr/include/boost/mpi/python/serialize.hpp	/^  get_direct_serialization_table();$/;"	p	namespace:boost::python::detail	signature:()
get_mpi_datatype	/usr/include/boost/mpi/datatype.hpp	/^inline MPI_Datatype get_mpi_datatype<bool>(const bool&)$/;"	f	namespace:boost::mpi	signature:(const bool&)
get_mpi_datatype	/usr/include/boost/mpi/datatype.hpp	/^template<typename T> MPI_Datatype get_mpi_datatype(const T& x)$/;"	f	namespace:boost::mpi	signature:(const T& x)
get_mpi_datatype	/usr/include/boost/mpi/datatype_fwd.hpp	/^template<typename T> MPI_Datatype get_mpi_datatype() $/;"	f	namespace:boost::mpi	signature:()
get_mpi_datatype	/usr/include/boost/mpi/datatype_fwd.hpp	/^template<typename T> MPI_Datatype get_mpi_datatype(const T& x);$/;"	p	namespace:boost::mpi	signature:(const T& x)
get_mpi_datatype	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    MPI_Datatype get_mpi_datatype()$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:()
get_mpi_datatype	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    MPI_Datatype get_mpi_datatype() const$/;"	f	class:boost::mpi::detail::mpi_datatype_holder	access:public	signature:() const
get_mpi_datatype	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  MPI_Datatype get_mpi_datatype() const$/;"	f	class:boost::mpi::content	access:public	signature:() const
get_mpi_op	/usr/include/boost/mpi/operations.hpp	/^    MPI_Op& get_mpi_op()$/;"	f	class:boost::mpi::detail::user_op	access:public	signature:()
get_skeleton	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  const packed_iarchive& get_skeleton() const$/;"	f	class:boost::mpi::packed_skeleton_iarchive	access:public	signature:() const
get_skeleton	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  const packed_oarchive& get_skeleton() const$/;"	f	class:boost::mpi::packed_skeleton_oarchive	access:public	signature:() const
get_skeleton	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  packed_iarchive& get_skeleton()$/;"	f	class:boost::mpi::packed_skeleton_iarchive	access:public	signature:()
get_skeleton_proxy	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    function1<object, const object&> get_skeleton_proxy;$/;"	m	struct:boost::mpi::python::detail::skeleton_content_handler	access:public
graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^  explicit graph_communicator(const shared_ptr<MPI_Comm>& comm_ptr)$/;"	f	class:boost::mpi::graph_communicator	access:private	signature:(const shared_ptr<MPI_Comm>& comm_ptr)
graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^  graph_communicator(const MPI_Comm& comm, comm_create_kind kind)$/;"	f	class:boost::mpi::graph_communicator	access:public	signature:(const MPI_Comm& comm, comm_create_kind kind)
graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^  graph_communicator(const communicator& comm, const Graph& graph, $/;"	p	class:boost::mpi::graph_communicator	access:public	signature:(const communicator& comm, const Graph& graph, RankMap rank, bool reorder = false)
graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^  graph_communicator(const communicator& comm, const Graph& graph, $/;"	p	class:boost::mpi::graph_communicator	access:public	signature:(const communicator& comm, const Graph& graph, bool reorder = false)
graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^class BOOST_MPI_DECL graph_communicator : public communicator$/;"	c	namespace:boost::mpi	inherits:communicator
graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^graph_communicator::graph_communicator(const communicator& comm, $/;"	f	class:boost::mpi::graph_communicator	signature:(const communicator& comm, const Graph& graph, RankMap rank, bool reorder)
graph_communicator	/usr/include/boost/mpi/graph_communicator.hpp	/^graph_communicator::graph_communicator(const communicator& comm, $/;"	f	class:boost::mpi::graph_communicator	signature:(const communicator& comm, const Graph& graph, bool reorder)
graph_traits	/usr/include/boost/mpi/graph_communicator.hpp	/^struct graph_traits<mpi::graph_communicator> {$/;"	s	namespace:boost
group	/usr/include/boost/mpi/communicator.hpp	/^  boost::mpi::group group() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
group	/usr/include/boost/mpi/group.hpp	/^  group() : group_ptr() { }$/;"	f	class:boost::mpi::group	access:public	signature:()
group	/usr/include/boost/mpi/group.hpp	/^  group(const MPI_Group& in_group, bool adopt);$/;"	p	class:boost::mpi::group	access:public	signature:(const MPI_Group& in_group, bool adopt)
group	/usr/include/boost/mpi/group.hpp	/^class BOOST_MPI_DECL group$/;"	c	namespace:boost::mpi
group_free	/usr/include/boost/mpi/group.hpp	/^  struct group_free$/;"	s	class:boost::mpi::group	access:protected
group_ptr	/usr/include/boost/mpi/group.hpp	/^  shared_ptr<MPI_Group> group_ptr;$/;"	m	class:boost::mpi::group	access:protected
handle_serialized_array_irecv	/usr/include/boost/mpi/communicator.hpp	/^request::handle_serialized_array_irecv(request* self, request_action action)$/;"	f	class:boost::mpi::request	signature:(request* self, request_action action)
handle_serialized_array_irecv	/usr/include/boost/mpi/request.hpp	/^  handle_serialized_array_irecv(request* self, request_action action);$/;"	p	class:boost::mpi::request	access:private	signature:(request* self, request_action action)
handle_serialized_irecv	/usr/include/boost/mpi/communicator.hpp	/^request::handle_serialized_irecv(request* self, request_action action)$/;"	f	class:boost::mpi::request	signature:(request* self, request_action action)
handle_serialized_irecv	/usr/include/boost/mpi/request.hpp	/^  handle_serialized_irecv(request* self, request_action action);$/;"	p	class:boost::mpi::request	access:private	signature:(request* self, request_action action)
handler_type	/usr/include/boost/mpi/request.hpp	/^  typedef optional<status> (*handler_type)(request* self, $/;"	t	class:boost::mpi::request	access:private
has_cartesian_topology	/usr/include/boost/mpi/communicator.hpp	/^  bool has_cartesian_topology() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
has_direct_serialization	/usr/include/boost/mpi/python/serialize.hpp	/^struct has_direct_serialization : mpl::false_ { };$/;"	s	namespace:boost::python	inherits:mpl::false_
holder	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  boost::shared_ptr<detail::mpi_datatype_holder> holder;$/;"	m	class:boost::mpi::content	access:private
host_rank	/usr/include/boost/mpi/environment.hpp	/^  static optional<int> host_rank();$/;"	p	class:boost::mpi::environment	access:public	signature:()
i_initialized	/usr/include/boost/mpi/environment.hpp	/^  bool i_initialized;$/;"	m	class:boost::mpi::environment	access:private
ia	/usr/include/boost/mpi/communicator.hpp	/^    packed_iarchive ia;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
ia	/usr/include/boost/mpi/communicator.hpp	/^    packed_iarchive ia;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
ia	/usr/include/boost/mpi/communicator.hpp	/^    packed_iarchive& ia;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
ia	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    packed_iarchive& ia;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
ignore_iprimitive	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^    ignore_iprimitive()$/;"	f	class:boost::mpi::detail::ignore_iprimitive	access:public	signature:()
ignore_iprimitive	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^class ignore_iprimitive$/;"	c	namespace:boost::mpi::detail
ignore_oprimitive	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^    ignore_oprimitive()$/;"	f	class:boost::mpi::detail::ignore_oprimitive	access:public	signature:()
ignore_oprimitive	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^class ignore_oprimitive$/;"	c	namespace:boost::mpi::detail
ignore_skeleton_oarchive	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^    ignore_skeleton_oarchive()$/;"	f	class:boost::mpi::detail::ignore_skeleton_oarchive	access:public	signature:()
ignore_skeleton_oarchive	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^class ignore_skeleton_oarchive $/;"	c	namespace:boost::mpi::detail	inherits:archive::detail::common_oarchive
impl	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  implementation *impl;$/;"	m	class:boost::mpi::detail::mpi_datatype_map	access:private
implementation_archive	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    implementation_archive_type& implementation_archive;$/;"	m	class:boost::mpi::detail::forward_iprimitive	access:private
implementation_archive	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    implementation_archive_type& implementation_archive;$/;"	m	class:boost::mpi::detail::forward_oprimitive	access:private
implementation_archive	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^    implementation_archive_type& implementation_archive;$/;"	m	class:boost::mpi::detail::forward_skeleton_iarchive	access:protected
implementation_archive	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^    implementation_archive_type& implementation_archive;$/;"	m	class:boost::mpi::detail::forward_skeleton_oarchive	access:protected
implementation_archive_type	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    typedef ImplementationArchive implementation_archive_type;$/;"	t	class:boost::mpi::detail::forward_iprimitive	access:public
implementation_archive_type	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    typedef ImplementationArchive implementation_archive_type;$/;"	t	class:boost::mpi::detail::forward_oprimitive	access:public
implementation_archive_type	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^    typedef ImplementationArchive implementation_archive_type;$/;"	t	class:boost::mpi::detail::forward_skeleton_iarchive	access:public
implementation_archive_type	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^    typedef ImplementationArchive implementation_archive_type;$/;"	t	class:boost::mpi::detail::forward_skeleton_oarchive	access:public
include	/usr/include/boost/mpi/group.hpp	/^  group include(InputIterator first, InputIterator last);$/;"	p	class:boost::mpi::group	access:public	signature:(InputIterator first, InputIterator last)
include	/usr/include/boost/mpi/group.hpp	/^group group::include(InputIterator first, InputIterator last)$/;"	f	class:boost::mpi::group	signature:(InputIterator first, InputIterator last)
include	/usr/include/boost/mpi/group.hpp	/^template<> BOOST_MPI_DECL group group::include(int* first, int* last);$/;"	p	class:boost::mpi::group	signature:(int* first, int* last)
increment	/usr/include/boost/mpi/graph_communicator.hpp	/^    void increment() $/;"	f	class:boost::mpi::detail::comm_edge_iterator	access:protected	signature:()
increment	/usr/include/boost/mpi/graph_communicator.hpp	/^    void increment() { ++index; }$/;"	f	class:boost::mpi::detail::comm_adj_iterator	access:protected	signature:()
increment	/usr/include/boost/mpi/graph_communicator.hpp	/^    void increment() { ++index; }$/;"	f	class:boost::mpi::detail::comm_out_edge_iterator	access:protected	signature:()
index	/usr/include/boost/mpi/graph_communicator.hpp	/^    int index;$/;"	m	class:boost::mpi::detail::comm_adj_iterator	access:protected
index	/usr/include/boost/mpi/graph_communicator.hpp	/^    int index;$/;"	m	class:boost::mpi::detail::comm_out_edge_iterator	access:protected
indices	/usr/include/boost/mpi/graph_communicator.hpp	/^    shared_array<int> indices;$/;"	m	class:boost::mpi::detail::comm_edge_iterator	access:protected
inherited	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    typedef serialized_irecv_data<const skeleton_proxy<T> > inherited;$/;"	t	struct:boost::mpi::detail::serialized_irecv_data	access:public
inherited	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  typedef boost::mpi::content inherited;$/;"	t	class:boost::mpi::python::content	access:private
initialize_data	/usr/include/boost/mpi/python/serialize.hpp	/^  static void initialize_data();$/;"	p	class:boost::python::pickle	access:private	signature:()
initialized	/usr/include/boost/mpi/environment.hpp	/^  static bool initialized();$/;"	p	class:boost::mpi::environment	access:public	signature:()
input_archiver	/usr/include/boost/mpi/python/serialize.hpp	/^template<typename OArchiver> struct input_archiver { };$/;"	s	namespace:boost::python
intercommunicator	/usr/include/boost/mpi/intercommunicator.hpp	/^  explicit intercommunicator(const shared_ptr<MPI_Comm>& cp)$/;"	f	class:boost::mpi::intercommunicator	access:private	signature:(const shared_ptr<MPI_Comm>& cp)
intercommunicator	/usr/include/boost/mpi/intercommunicator.hpp	/^  intercommunicator(const MPI_Comm& comm, comm_create_kind kind)$/;"	f	class:boost::mpi::intercommunicator	access:public	signature:(const MPI_Comm& comm, comm_create_kind kind)
intercommunicator	/usr/include/boost/mpi/intercommunicator.hpp	/^  intercommunicator(const communicator& local, int local_leader,$/;"	p	class:boost::mpi::intercommunicator	access:public	signature:(const communicator& local, int local_leader, const communicator& peer, int remote_leader)
intercommunicator	/usr/include/boost/mpi/intercommunicator.hpp	/^class BOOST_MPI_DECL intercommunicator : public communicator$/;"	c	namespace:boost::mpi	inherits:communicator
internal_buffer_	/usr/include/boost/mpi/packed_iarchive.hpp	/^  buffer_type internal_buffer_;$/;"	m	class:boost::mpi::packed_iarchive	access:private
internal_buffer_	/usr/include/boost/mpi/packed_oarchive.hpp	/^  buffer_type internal_buffer_;$/;"	m	class:boost::mpi::packed_oarchive	access:private
io_rank	/usr/include/boost/mpi/environment.hpp	/^  static optional<int> io_rank();$/;"	p	class:boost::mpi::environment	access:public	signature:()
iprimitive	/usr/include/boost/mpi/packed_iarchive.hpp	/^  typedef binary_buffer_iprimitive iprimitive;$/;"	t	namespace:boost::mpi
iprobe	/usr/include/boost/mpi/communicator.hpp	/^  iprobe(int source = any_source, int tag = any_tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source = any_source, int tag = any_tag) const
irecv	/usr/include/boost/mpi/communicator.hpp	/^  request irecv(int source, int tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag) const
irecv	/usr/include/boost/mpi/communicator.hpp	/^  request irecv(int source, int tag, T& value) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, T& value) const
irecv	/usr/include/boost/mpi/communicator.hpp	/^  request irecv(int source, int tag, T* values, int n) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, T* values, int n) const
irecv	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv(int source, int tag, T& value) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value) const
irecv	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv<const content>(int source, int tag,$/;"	p	class:boost::mpi::communicator	signature:(int source, int tag, const content& c) const
irecv	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv<content>(int source, int tag,$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, content& c) const
irecv	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv<packed_skeleton_iarchive>$/;"	p	class:boost::mpi::communicator	signature:(int source, int tag, packed_skeleton_iarchive& ar) const
irecv	/usr/include/boost/mpi/communicator.hpp	/^request communicator::irecv(int source, int tag, T* values, int n) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n) const
irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^  request irecv_impl(int source, int tag, T& value, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T& value, mpl::false_) const
irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^  request irecv_impl(int source, int tag, T& value, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T& value, mpl::true_) const
irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv_impl(int source, int tag, T& value, mpl::false_) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value, mpl::false_) const
irecv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::irecv_impl(int source, int tag, T& value, mpl::true_) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value, mpl::true_) const
is_committed	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    bool is_committed;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
is_committed	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    bool is_committed;$/;"	m	class:boost::mpi::detail::mpi_datatype_holder	access:private
is_commutative	/usr/include/boost/mpi/operations.hpp	/^struct is_commutative : public mpl::false_ { };$/;"	s	namespace:boost::mpi	inherits:mpl::false_
is_mpi_builtin_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_builtin_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
is_mpi_byte_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_byte_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::false_
is_mpi_complex_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_complex_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::false_
is_mpi_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_datatype$/;"	s	namespace:boost::mpi	inherits:is_mpi_builtin_datatype
is_mpi_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_datatype<bool>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::bool_
is_mpi_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_datatype<std::pair<T,U> >$/;"	s	namespace:boost::mpi	inherits:mpl::and_
is_mpi_floating_point_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_floating_point_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::false_
is_mpi_integer_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_integer_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::false_
is_mpi_logical_datatype	/usr/include/boost/mpi/datatype.hpp	/^struct is_mpi_logical_datatype$/;"	s	namespace:boost::mpi	inherits:boost::mpl::false_
is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<bitwise_and<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<bitwise_or<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<bitwise_xor<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<logical_xor<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<std::logical_and<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<std::logical_or<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<std::multiplies<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^ struct is_mpi_op<std::plus<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^struct is_mpi_op : public mpl::false_ { };$/;"	s	namespace:boost::mpi	inherits:mpl::false_
is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^struct is_mpi_op<maximum<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
is_mpi_op	/usr/include/boost/mpi/operations.hpp	/^struct is_mpi_op<minimum<T>, T>$/;"	s	namespace:boost::mpi	inherits:boost::mpl::or_
isa	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    packed_skeleton_iarchive isa;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
isend	/usr/include/boost/mpi/communicator.hpp	/^  request isend(int dest, int tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag) const
isend	/usr/include/boost/mpi/communicator.hpp	/^  request isend(int dest, int tag, const T& value) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const T& value) const
isend	/usr/include/boost/mpi/communicator.hpp	/^  request isend(int dest, int tag, const T* values, int n) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const T* values, int n) const
isend	/usr/include/boost/mpi/communicator.hpp	/^  request isend(int dest, int tag, const skeleton_proxy<T>& proxy) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const skeleton_proxy<T>& proxy) const
isend	/usr/include/boost/mpi/communicator.hpp	/^communicator::isend<content>(int dest, int tag, const content& c) const;$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const content& c) const
isend	/usr/include/boost/mpi/communicator.hpp	/^communicator::isend<packed_oarchive>(int dest, int tag,$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const packed_oarchive& ar) const
isend	/usr/include/boost/mpi/communicator.hpp	/^communicator::isend<packed_skeleton_oarchive>$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const packed_skeleton_oarchive& ar) const
isend	/usr/include/boost/mpi/communicator.hpp	/^request communicator::isend(int dest, int tag, const T& value) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value) const
isend	/usr/include/boost/mpi/communicator.hpp	/^request communicator::isend(int dest, int tag, const T* values, int n) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n) const
isend	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^communicator::isend(int dest, int tag, const skeleton_proxy<T>& proxy) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const skeleton_proxy<T>& proxy) const
isend_impl	/usr/include/boost/mpi/communicator.hpp	/^  request isend_impl(int dest, int tag, const T& value, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T& value, mpl::false_) const
isend_impl	/usr/include/boost/mpi/communicator.hpp	/^  request isend_impl(int dest, int tag, const T& value, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T& value, mpl::true_) const
isend_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::isend_impl(int dest, int tag, const T& value, mpl::false_) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value, mpl::false_) const
isend_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::isend_impl(int dest, int tag, const T& value, mpl::true_) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value, mpl::true_) const
lengths	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    std::vector<int> lengths;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
level	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int level() const { return level_; }$/;"	f	class:boost::mpi::detail::computation_tree	access:public	signature:() const
level_	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int level_;$/;"	m	class:boost::mpi::detail::computation_tree	access:protected
level_index	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int level_index(int n) const;$/;"	p	class:boost::mpi::detail::computation_tree	access:public	signature:(int n) const
load	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load( T & t)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:( T & t)
load	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load(serialization::array<T> const& x)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(serialization::array<T> const& x)
load	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load(std::basic_string<CharType> & s)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(std::basic_string<CharType> & s)
load	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    void load(T & t)$/;"	f	class:boost::mpi::detail::forward_iprimitive	access:public	signature:(T & t)
load	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^    void load(T & t)$/;"	f	class:boost::mpi::detail::ignore_iprimitive	access:public	signature:(T & t)
load	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void load( T & t)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:( T & t)
load	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void load(std::basic_string<CharType> & s)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:(std::basic_string<CharType> & s)
load	/usr/include/boost/mpi/python/serialize.hpp	/^load(Archiver& ar, boost::python::object& obj, $/;"	f	namespace:boost::python	signature:(Archiver& ar, boost::python::object& obj, const unsigned int version)
load_array	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load_array(serialization::array<T> const& x, unsigned int \/* file_version *\/)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(serialization::array<T> const& x, unsigned int )
load_array	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    void load_array(serialization::array<T> & x, unsigned int file_version )$/;"	f	class:boost::mpi::detail::forward_iprimitive	access:public	signature:(serialization::array<T> & x, unsigned int file_version )
load_array	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^    void load_array(serialization::array<T> &, unsigned int )$/;"	f	class:boost::mpi::detail::ignore_iprimitive	access:public	signature:(serialization::array<T> &, unsigned int )
load_array	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void load_array(serialization::array<T> const& x, unsigned int \/* file_version *\/)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:(serialization::array<T> const& x, unsigned int )
load_binary	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load_binary(void *address, std::size_t count)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(void *address, std::size_t count)
load_binary	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    void load_binary(void * address, std::size_t count )$/;"	f	class:boost::mpi::detail::forward_iprimitive	access:public	signature:(void * address, std::size_t count )
load_binary	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^    void load_binary(void *, std::size_t )$/;"	f	class:boost::mpi::detail::ignore_iprimitive	access:public	signature:(void *, std::size_t )
load_binary	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void load_binary(void *address, std::size_t count)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:(void *address, std::size_t count)
load_impl	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void load_impl(void * p, int l)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:private	signature:(void * p, int l)
load_impl	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void load_impl(void * p, MPI_Datatype t, int l)$/;"	f	class:boost::mpi::packed_iprimitive	access:private	signature:(void * p, MPI_Datatype t, int l)
load_impl	/usr/include/boost/mpi/python/serialize.hpp	/^load_impl(Archiver& ar, boost::python::object& obj, $/;"	f	namespace:boost::python::detail	signature:(Archiver& ar, boost::python::object& obj, const unsigned int , mpl::false_ )
load_impl	/usr/include/boost/mpi/python/serialize.hpp	/^load_impl(Archiver& ar, boost::python::object& obj, $/;"	f	namespace:boost::python::detail	signature:(Archiver& ar, boost::python::object& obj, const unsigned int version, mpl::true_ )
load_override	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^    void load_override(T & t, BOOST_PFTO int)$/;"	f	class:boost::mpi::detail::forward_skeleton_iarchive	access:protected	signature:(T & t, BOOST_PFTO int)
load_override	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^    void load_override(std::string & s , int)    $/;"	f	class:boost::mpi::detail::forward_skeleton_iarchive	access:protected	signature:(std::string & s , int)
load_override	/usr/include/boost/mpi/packed_iarchive.hpp	/^  void load_override(T& x, int \/*version*\/, mpl::true_)$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(T& x, int , mpl::true_)
load_override	/usr/include/boost/mpi/packed_iarchive.hpp	/^  void load_override(T& x, int version)$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(T& x, int version)
load_override	/usr/include/boost/mpi/packed_iarchive.hpp	/^  void load_override(T& x, int version, mpl::false_)$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(T& x, int version, mpl::false_)
load_override	/usr/include/boost/mpi/packed_iarchive.hpp	/^  void load_override(archive::class_id_optional_type & \/*t*\/, int){}$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(archive::class_id_optional_type & , int)
load_override	/usr/include/boost/mpi/packed_iarchive.hpp	/^  void load_override(archive::class_name_type & t, int)$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(archive::class_name_type & t, int)
loader	/usr/include/boost/mpi/python/serialize.hpp	/^    loader_t loader(int descriptor)$/;"	f	class:boost::python::detail::direct_serialization_table	access:public	signature:(int descriptor)
loader_t	/usr/include/boost/mpi/python/serialize.hpp	/^      loader_t;$/;"	t	class:boost::python::detail::direct_serialization_table	access:public
loaders	/usr/include/boost/mpi/python/serialize.hpp	/^    loaders_t loaders;$/;"	m	class:boost::python::detail::direct_serialization_table	access:protected
loaders_t	/usr/include/boost/mpi/python/serialize.hpp	/^    typedef std::map<int, loader_t> loaders_t;$/;"	t	class:boost::python::detail::direct_serialization_table	access:public
loads	/usr/include/boost/mpi/python/serialize.hpp	/^  static object loads(str s);$/;"	p	class:boost::python::pickle	access:public	signature:(str s)
local_group	/usr/include/boost/mpi/intercommunicator.hpp	/^  boost::mpi::group local_group() const;$/;"	p	class:boost::mpi::intercommunicator	access:public	signature:() const
local_rank	/usr/include/boost/mpi/intercommunicator.hpp	/^  int local_rank() const { return this->rank(); }$/;"	f	class:boost::mpi::intercommunicator	access:public	signature:() const
local_size	/usr/include/boost/mpi/intercommunicator.hpp	/^  int local_size() const { return this->size(); }$/;"	f	class:boost::mpi::intercommunicator	access:public	signature:() const
logical_xor	/usr/include/boost/mpi/operations.hpp	/^struct logical_xor : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
m_count	/usr/include/boost/mpi/status.hpp	/^  mutable int m_count;$/;"	m	class:boost::mpi::status	access:public
m_data	/usr/include/boost/mpi/request.hpp	/^  shared_ptr<void> m_data;$/;"	m	class:boost::mpi::request	access:public
m_handler	/usr/include/boost/mpi/request.hpp	/^  handler_type m_handler;$/;"	m	class:boost::mpi::request	access:public
m_requests	/usr/include/boost/mpi/request.hpp	/^  MPI_Request m_requests[2];$/;"	m	class:boost::mpi::request	access:public
m_status	/usr/include/boost/mpi/status.hpp	/^  mutable MPI_Status m_status;$/;"	m	class:boost::mpi::status	access:public
max_size	/usr/include/boost/mpi/allocator.hpp	/^  size_type max_size() const throw()$/;"	f	class:boost::mpi::allocator	access:public	signature:() const
max_tag	/usr/include/boost/mpi/environment.hpp	/^  static int max_tag();$/;"	p	class:boost::mpi::environment	access:public	signature:()
maximum	/usr/include/boost/mpi/operations.hpp	/^struct maximum : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
merge	/usr/include/boost/mpi/intercommunicator.hpp	/^  communicator merge(bool high) const;$/;"	p	class:boost::mpi::intercommunicator	access:public	signature:(bool high) const
message	/usr/include/boost/mpi/exception.hpp	/^  std::string message;$/;"	m	class:boost::mpi::exception	access:protected
minimum	/usr/include/boost/mpi/operations.hpp	/^struct minimum : public std::binary_function<T, T, T>$/;"	s	namespace:boost::mpi	inherits:std::binary_function
mpi	/usr/include/boost/mpi/allocator.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/collectives.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/collectives/all_gather.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/collectives/all_reduce.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/collectives/all_to_all.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/collectives/broadcast.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/collectives/gather.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/collectives/reduce.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/collectives/scan.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/collectives/scatter.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/communicator.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/datatype.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/datatype_fwd.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/broadcast_sc.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/computation_tree.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/content_oarchive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/forward_skeleton_iarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/point_to_point.hpp	/^namespace boost { namespace mpi { namespace detail {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/environment.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/exception.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/graph_communicator.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/group.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/intercommunicator.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/nonblocking.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/operations.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/packed_iarchive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/packed_oarchive.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/python.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/python/serialize.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/python/serialize.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/request.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/skeleton_and_content.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/skeleton_and_content_fwd.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/status.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi	/usr/include/boost/mpi/timer.hpp	/^namespace boost { namespace mpi {$/;"	n	namespace:boost
mpi_datatype_cache	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^BOOST_MPI_DECL mpi_datatype_map& mpi_datatype_cache();$/;"	p	namespace:boost::mpi::detail	signature:()
mpi_datatype_holder	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    mpi_datatype_holder()$/;"	f	class:boost::mpi::detail::mpi_datatype_holder	access:public	signature:()
mpi_datatype_holder	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    mpi_datatype_holder(MPI_Datatype t, bool committed = true)$/;"	f	class:boost::mpi::detail::mpi_datatype_holder	access:public	signature:(MPI_Datatype t, bool committed = true)
mpi_datatype_holder	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  class BOOST_MPI_DECL mpi_datatype_holder : public boost::noncopyable$/;"	c	namespace:boost::mpi::detail	inherits:boost::noncopyable
mpi_datatype_map	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  mpi_datatype_map();$/;"	p	class:boost::mpi::detail::mpi_datatype_map	access:public	signature:()
mpi_datatype_map	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^class BOOST_MPI_DECL mpi_datatype_map$/;"	c	namespace:boost::mpi::detail	inherits:boost::noncopyable
mpi_datatype_oarchive	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^    mpi_datatype_oarchive(const T& x)$/;"	f	class:boost::mpi::detail::mpi_datatype_oarchive	access:public	signature:(const T& x)
mpi_datatype_oarchive	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^class mpi_datatype_oarchive$/;"	c	namespace:boost::mpi::detail	inherits:mpi_datatype_primitive,ignore_skeleton_oarchive
mpi_datatype_primitive	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    mpi_datatype_primitive()$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:()
mpi_datatype_primitive	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    mpi_datatype_primitive(void const* orig)$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:(void const* orig)
mpi_datatype_primitive	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^class mpi_datatype_primitive$/;"	c	namespace:boost::mpi::detail
mpi_op	/usr/include/boost/mpi/operations.hpp	/^    MPI_Op mpi_op;$/;"	m	class:boost::mpi::detail::user_op	access:private
n	/usr/include/boost/mpi/communicator.hpp	/^    int n;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
neighbors	/usr/include/boost/mpi/graph_communicator.hpp	/^    shared_array<int> neighbors;$/;"	m	class:boost::mpi::detail::comm_adj_iterator	access:protected
neighbors	/usr/include/boost/mpi/graph_communicator.hpp	/^    shared_array<int> neighbors;$/;"	m	class:boost::mpi::detail::comm_out_edge_iterator	access:protected
null_vertex	/usr/include/boost/mpi/graph_communicator.hpp	/^  static vertex_descriptor null_vertex() { return -1; }$/;"	f	struct:boost::graph_traits	access:public	signature:()
num_edges	/usr/include/boost/mpi/graph_communicator.hpp	/^int num_edges(const graph_communicator& comm);$/;"	p	namespace:boost::mpi	signature:(const graph_communicator& comm)
num_reserved_tags	/usr/include/boost/mpi/environment.hpp	/^  static const int num_reserved_tags = 1;$/;"	m	class:boost::mpi::environment	access:private
num_vertices	/usr/include/boost/mpi/graph_communicator.hpp	/^inline int num_vertices(const graph_communicator& comm) { return comm.size(); }$/;"	f	namespace:boost::mpi	signature:(const graph_communicator& comm)
object	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  boost::python::object object;$/;"	m	class:boost::mpi::python::content	access:public
object	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  boost::python::object object;$/;"	m	class:boost::mpi::python::skeleton_proxy_base	access:public
object	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  T& object;$/;"	m	struct:boost::mpi::skeleton_proxy	access:public
op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_BAND; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_BOR; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_BXOR; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_LAND; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_LOR; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_LXOR; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_MAX; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_MIN; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_PROD; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
op	/usr/include/boost/mpi/operations.hpp	/^  static MPI_Op op() { return MPI_SUM; }$/;"	f	struct:boost::mpi::is_mpi_op	access:public	signature:()
op_ptr	/usr/include/boost/mpi/operations.hpp	/^    static Op* op_ptr;$/;"	m	class:boost::mpi::detail::user_op	access:private
op_ptr	/usr/include/boost/mpi/operations.hpp	/^  template<typename Op, typename T> Op* user_op<Op, T>::op_ptr = 0;$/;"	m	class:boost::mpi::detail::user_op
operator !=	/usr/include/boost/mpi/allocator.hpp	/^inline bool operator!=(const allocator<T1>&, const allocator<T2>&) throw()$/;"	f	namespace:boost::mpi	signature:(const allocator<T1>&, const allocator<T2>&)
operator !=	/usr/include/boost/mpi/communicator.hpp	/^inline bool operator!=(const communicator& comm1, const communicator& comm2)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm1, const communicator& comm2)
operator !=	/usr/include/boost/mpi/group.hpp	/^inline bool operator!=(const group& g1, const group& g2)$/;"	f	namespace:boost::mpi	signature:(const group& g1, const group& g2)
operator &	/usr/include/boost/mpi/group.hpp	/^BOOST_MPI_DECL group operator&(const group& g1, const group& g2);$/;"	p	namespace:boost::mpi	signature:(const group& g1, const group& g2)
operator ()	/usr/include/boost/mpi/communicator.hpp	/^    void operator()(MPI_Comm* comm) const$/;"	f	struct:boost::mpi::communicator::comm_free	access:public	signature:(MPI_Comm* comm) const
operator ()	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  bool operator()(std::type_info const* lhs, std::type_info const* rhs) const$/;"	f	struct:boost::mpi::detail::type_info_compare	access:public	signature:(std::type_info const* lhs, std::type_info const* rhs) const
operator ()	/usr/include/boost/mpi/group.hpp	/^    void operator()(MPI_Group* comm) const$/;"	f	struct:boost::mpi::group::group_free	access:public	signature:(MPI_Group* comm) const
operator ()	/usr/include/boost/mpi/operations.hpp	/^  T operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::bitwise_and	access:public	signature:(const T& x, const T& y) const
operator ()	/usr/include/boost/mpi/operations.hpp	/^  T operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::bitwise_or	access:public	signature:(const T& x, const T& y) const
operator ()	/usr/include/boost/mpi/operations.hpp	/^  T operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::bitwise_xor	access:public	signature:(const T& x, const T& y) const
operator ()	/usr/include/boost/mpi/operations.hpp	/^  T operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::logical_xor	access:public	signature:(const T& x, const T& y) const
operator ()	/usr/include/boost/mpi/operations.hpp	/^  const T& operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::maximum	access:public	signature:(const T& x, const T& y) const
operator ()	/usr/include/boost/mpi/operations.hpp	/^  const T& operator()(const T& x, const T& y) const$/;"	f	struct:boost::mpi::minimum	access:public	signature:(const T& x, const T& y) const
operator ()	/usr/include/boost/mpi/python/serialize.hpp	/^      void operator()(IArchiver& ar, object& obj, const unsigned int) {$/;"	f	struct:boost::python::detail::direct_serialization_table::default_loader	access:public	signature:(IArchiver& ar, object& obj, const unsigned int)
operator ()	/usr/include/boost/mpi/python/serialize.hpp	/^      void operator()(OArchiver& ar, const object& obj, const unsigned int) {$/;"	f	struct:boost::python::detail::direct_serialization_table::default_saver	access:public	signature:(OArchiver& ar, const object& obj, const unsigned int)
operator ()	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    content operator()(object value_obj) {$/;"	f	struct:boost::mpi::python::detail::do_get_content	access:public	signature:(object value_obj)
operator ()	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    object operator()(object value) {$/;"	f	struct:boost::mpi::python::detail::do_get_skeleton_proxy	access:public	signature:(object value)
operator ()	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    operator()(packed_iarchive& ar, object& obj, const unsigned int)$/;"	f	struct:boost::mpi::python::detail::skeleton_loader	access:public	signature:(packed_iarchive& ar, object& obj, const unsigned int)
operator ()	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^    operator()(packed_oarchive& ar, const object& obj, const unsigned int)$/;"	f	struct:boost::mpi::python::detail::skeleton_saver	access:public	signature:(packed_oarchive& ar, const object& obj, const unsigned int)
operator -	/usr/include/boost/mpi/group.hpp	/^BOOST_MPI_DECL group operator-(const group& g1, const group& g2);$/;"	p	namespace:boost::mpi	signature:(const group& g1, const group& g2)
operator =	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  const content& operator=(MPI_Datatype d)$/;"	f	class:boost::mpi::content	access:public	signature:(MPI_Datatype d)
operator ==	/usr/include/boost/mpi/allocator.hpp	/^inline bool operator==(const allocator<T1>&, const allocator<T2>&) throw()$/;"	f	namespace:boost::mpi	signature:(const allocator<T1>&, const allocator<T2>&)
operator ==	/usr/include/boost/mpi/communicator.hpp	/^BOOST_MPI_DECL bool operator==(const communicator& comm1, const communicator& comm2);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm1, const communicator& comm2)
operator ==	/usr/include/boost/mpi/group.hpp	/^BOOST_MPI_DECL bool operator==(const group& g1, const group& g2);$/;"	p	namespace:boost::mpi	signature:(const group& g1, const group& g2)
operator MPI_Comm	/usr/include/boost/mpi/communicator.hpp	/^  operator MPI_Comm() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
operator MPI_Group	/usr/include/boost/mpi/group.hpp	/^  operator MPI_Group() const$/;"	f	class:boost::mpi::group	access:public	signature:() const
operator MPI_Status&	/usr/include/boost/mpi/status.hpp	/^  operator       MPI_Status&()       { return m_status; }$/;"	f	class:boost::mpi::status	access:public	signature:()
operator bool	/usr/include/boost/mpi/communicator.hpp	/^  operator bool() const { return (bool)comm_ptr; }$/;"	f	class:boost::mpi::communicator	access:public	signature:() const
operator bool	/usr/include/boost/mpi/group.hpp	/^  operator bool() const { return (bool)group_ptr; }$/;"	f	class:boost::mpi::group	access:public	signature:() const
operator const MPI_Status&	/usr/include/boost/mpi/status.hpp	/^  operator const MPI_Status&() const { return m_status; }$/;"	f	class:boost::mpi::status	access:public	signature:() const
operator |	/usr/include/boost/mpi/group.hpp	/^BOOST_MPI_DECL group operator|(const group& g1, const group& g2);$/;"	p	namespace:boost::mpi	signature:(const group& g1, const group& g2)
oprimitive	/usr/include/boost/mpi/packed_oarchive.hpp	/^  typedef binary_buffer_oprimitive oprimitive;$/;"	t	namespace:boost::mpi
origin	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    MPI_Aint origin;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
other	/usr/include/boost/mpi/allocator.hpp	/^    typedef allocator<U> other; $/;"	t	struct:boost::mpi::allocator::rebind	access:public
out_degree	/usr/include/boost/mpi/graph_communicator.hpp	/^int out_degree(int vertex, const graph_communicator& comm);$/;"	p	namespace:boost::mpi	signature:(int vertex, const graph_communicator& comm)
out_edge_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef mpi::detail::comm_out_edge_iterator out_edge_iterator;$/;"	t	struct:boost::graph_traits	access:public
out_edges	/usr/include/boost/mpi/graph_communicator.hpp	/^out_edges(int vertex, const graph_communicator& comm);$/;"	p	namespace:boost::mpi	signature:(int vertex, const graph_communicator& comm)
output_archiver	/usr/include/boost/mpi/python/serialize.hpp	/^template<typename IArchiver> struct output_archiver { };$/;"	s	namespace:boost::python
packed	/usr/include/boost/mpi/datatype_fwd.hpp	/^struct packed {};$/;"	s	namespace:boost::mpi
packed_archive_isend	/usr/include/boost/mpi/detail/point_to_point.hpp	/^packed_archive_isend(MPI_Comm comm, int dest, int tag,$/;"	p	namespace:boost::mpi::detail	signature:(MPI_Comm comm, int dest, int tag, const packed_iarchive& ar, MPI_Request* out_requests, int num_out_requests)
packed_archive_isend	/usr/include/boost/mpi/detail/point_to_point.hpp	/^packed_archive_isend(MPI_Comm comm, int dest, int tag,$/;"	p	namespace:boost::mpi::detail	signature:(MPI_Comm comm, int dest, int tag, const packed_oarchive& ar, MPI_Request* out_requests, int num_out_requests)
packed_archive_recv	/usr/include/boost/mpi/detail/point_to_point.hpp	/^packed_archive_recv(MPI_Comm comm, int source, int tag, packed_iarchive& ar,$/;"	p	namespace:boost::mpi::detail	signature:(MPI_Comm comm, int source, int tag, packed_iarchive& ar, MPI_Status& status)
packed_archive_send	/usr/include/boost/mpi/detail/point_to_point.hpp	/^packed_archive_send(MPI_Comm comm, int dest, int tag,$/;"	p	namespace:boost::mpi::detail	signature:(MPI_Comm comm, int dest, int tag, const packed_oarchive& ar)
packed_iarchive	/usr/include/boost/mpi/packed_iarchive.hpp	/^  packed_iarchive$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:( MPI_Comm const & comm , std::size_t s=0, unsigned int flags = boost::archive::no_header)
packed_iarchive	/usr/include/boost/mpi/packed_iarchive.hpp	/^  packed_iarchive(MPI_Comm const & comm, buffer_type & b, unsigned int flags = boost::archive::no_header, int position = 0)$/;"	f	class:boost::mpi::packed_iarchive	access:public	signature:(MPI_Comm const & comm, buffer_type & b, unsigned int flags = boost::archive::no_header, int position = 0)
packed_iarchive	/usr/include/boost/mpi/packed_iarchive.hpp	/^class BOOST_MPI_DECL packed_iarchive$/;"	c	namespace:boost::mpi	inherits:iprimitive,archive::detail::common_iarchive,archive::detail::shared_ptr_helper
packed_iprimitive	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    packed_iprimitive(buffer_type & b, MPI_Comm const & comm, int position = 0)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:(buffer_type & b, MPI_Comm const & comm, int position = 0)
packed_iprimitive	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^class BOOST_MPI_DECL packed_iprimitive$/;"	c	namespace:boost::mpi
packed_oarchive	/usr/include/boost/mpi/packed_oarchive.hpp	/^  packed_oarchive ( MPI_Comm const & comm, unsigned int flags =  boost::archive::no_header)$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:( MPI_Comm const & comm, unsigned int flags = boost::archive::no_header)
packed_oarchive	/usr/include/boost/mpi/packed_oarchive.hpp	/^  packed_oarchive( MPI_Comm const & comm, buffer_type & b, unsigned int flags = boost::archive::no_header)$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:( MPI_Comm const & comm, buffer_type & b, unsigned int flags = boost::archive::no_header)
packed_oarchive	/usr/include/boost/mpi/packed_oarchive.hpp	/^class BOOST_MPI_DECL packed_oarchive$/;"	c	namespace:boost::mpi	inherits:oprimitive,archive::detail::common_oarchive,archive::detail::shared_ptr_helper
packed_oprimitive	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    packed_oprimitive(buffer_type & b, MPI_Comm const & comm)$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:(buffer_type & b, MPI_Comm const & comm)
packed_oprimitive	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^class BOOST_MPI_DECL packed_oprimitive$/;"	c	namespace:boost::mpi
packed_skeleton_iarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  explicit packed_skeleton_iarchive(packed_iarchive & archive)$/;"	f	class:boost::mpi::packed_skeleton_iarchive	access:public	signature:(packed_iarchive & archive)
packed_skeleton_iarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  packed_skeleton_iarchive(MPI_Comm const & comm,$/;"	f	class:boost::mpi::packed_skeleton_iarchive	access:public	signature:(MPI_Comm const & comm, unsigned int flags = boost::archive::no_header)
packed_skeleton_iarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^class BOOST_MPI_DECL packed_skeleton_iarchive$/;"	c	namespace:boost::mpi	inherits:detail::ignore_iprimitive,detail::forward_skeleton_iarchive
packed_skeleton_oarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  explicit packed_skeleton_oarchive(packed_oarchive & archive)$/;"	f	class:boost::mpi::packed_skeleton_oarchive	access:public	signature:(packed_oarchive & archive)
packed_skeleton_oarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  packed_skeleton_oarchive(MPI_Comm const & comm,$/;"	f	class:boost::mpi::packed_skeleton_oarchive	access:public	signature:(MPI_Comm const & comm, unsigned int flags = boost::archive::no_header)
packed_skeleton_oarchive	/usr/include/boost/mpi/skeleton_and_content.hpp	/^class BOOST_MPI_DECL packed_skeleton_oarchive$/;"	c	namespace:boost::mpi	inherits:detail::ignore_oprimitive,detail::forward_skeleton_oarchive
parent	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int parent() const;$/;"	p	class:boost::mpi::detail::computation_tree	access:public	signature:() const
perform	/usr/include/boost/mpi/operations.hpp	/^    static void BOOST_MPI_CALLING_CONVENTION perform(void* vinvec, void* voutvec, int* plen, MPI_Datatype*)$/;"	f	class:boost::mpi::detail::user_op	access:private	signature:(void* vinvec, void* voutvec, int* plen, MPI_Datatype*)
pickle	/usr/include/boost/mpi/python/serialize.hpp	/^class BOOST_MPI_PYTHON_DECL pickle {$/;"	c	namespace:boost::python
pointer	/usr/include/boost/mpi/allocator.hpp	/^  typedef T*              pointer;$/;"	t	class:boost::mpi::allocator	access:public
pointer	/usr/include/boost/mpi/allocator.hpp	/^  typedef void* pointer; $/;"	t	class:boost::mpi::allocator	access:public
position	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    int position;$/;"	m	class:boost::mpi::binary_buffer_iprimitive	access:private
position	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    int position;$/;"	m	class:boost::mpi::packed_iprimitive	access:private
probe	/usr/include/boost/mpi/communicator.hpp	/^  status probe(int source = any_source, int tag = any_tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source = any_source, int tag = any_tag) const
processor_name	/usr/include/boost/mpi/environment.hpp	/^  static std::string processor_name();$/;"	p	class:boost::mpi::environment	access:public	signature:()
property_map	/usr/include/boost/mpi/graph_communicator.hpp	/^struct property_map<mpi::graph_communicator, vertex_index_t>$/;"	s	namespace:boost
proxy	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    skeleton_proxy<T> proxy;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
python	/usr/include/boost/mpi/python.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost::mpi
python	/usr/include/boost/mpi/python/serialize.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost::mpi
python	/usr/include/boost/mpi/python/serialize.hpp	/^namespace boost { namespace python {$/;"	n	namespace:boost
python	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^namespace boost { namespace mpi { namespace python {$/;"	n	namespace:boost::mpi
ra_cancel	/usr/include/boost/mpi/request.hpp	/^  enum request_action { ra_wait, ra_test, ra_cancel };$/;"	e	enum:boost::mpi::request::request_action
ra_test	/usr/include/boost/mpi/request.hpp	/^  enum request_action { ra_wait, ra_test, ra_cancel };$/;"	e	enum:boost::mpi::request::request_action
ra_wait	/usr/include/boost/mpi/request.hpp	/^  enum request_action { ra_wait, ra_test, ra_cancel };$/;"	e	enum:boost::mpi::request::request_action
rank	/usr/include/boost/mpi/communicator.hpp	/^  int rank() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
rank	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int rank;$/;"	m	class:boost::mpi::detail::computation_tree	access:protected
rank	/usr/include/boost/mpi/group.hpp	/^  optional<int> rank() const;$/;"	p	class:boost::mpi::group	access:public	signature:() const
rebind	/usr/include/boost/mpi/allocator.hpp	/^  struct rebind $/;"	s	class:boost::mpi::allocator	access:public
recv	/usr/include/boost/mpi/communicator.hpp	/^  status recv(int source, int tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag) const
recv	/usr/include/boost/mpi/communicator.hpp	/^  status recv(int source, int tag, T& value) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, T& value) const
recv	/usr/include/boost/mpi/communicator.hpp	/^  status recv(int source, int tag, T* values, int n) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, T* values, int n) const
recv	/usr/include/boost/mpi/communicator.hpp	/^  status recv(int source, int tag, const skeleton_proxy<T>& proxy) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, const skeleton_proxy<T>& proxy) const
recv	/usr/include/boost/mpi/communicator.hpp	/^  status recv(int source, int tag, skeleton_proxy<T>& proxy) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int source, int tag, skeleton_proxy<T>& proxy) const
recv	/usr/include/boost/mpi/communicator.hpp	/^communicator::recv<const content>(int source, int tag,$/;"	p	class:boost::mpi::communicator	signature:(int source, int tag, const content& c) const
recv	/usr/include/boost/mpi/communicator.hpp	/^communicator::recv<content>(int source, int tag,$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, content& c) const
recv	/usr/include/boost/mpi/communicator.hpp	/^communicator::recv<packed_iarchive>(int source, int tag,$/;"	p	class:boost::mpi::communicator	signature:(int source, int tag, packed_iarchive& ar) const
recv	/usr/include/boost/mpi/communicator.hpp	/^communicator::recv<packed_skeleton_iarchive>$/;"	p	class:boost::mpi::communicator	signature:(int source, int tag, packed_skeleton_iarchive& ar) const
recv	/usr/include/boost/mpi/communicator.hpp	/^status communicator::recv(int source, int tag, T& value) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value) const
recv	/usr/include/boost/mpi/communicator.hpp	/^status communicator::recv(int source, int tag, T* values, int n) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T* values, int n) const
recv	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^communicator::recv(int source, int tag, const skeleton_proxy<T>& proxy) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, const skeleton_proxy<T>& proxy) const
recv	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^status communicator::recv(int source, int tag, skeleton_proxy<T>& proxy) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, skeleton_proxy<T>& proxy) const
recv_impl	/usr/include/boost/mpi/communicator.hpp	/^  status recv_impl(int source, int tag, T& value, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T& value, mpl::false_) const
recv_impl	/usr/include/boost/mpi/communicator.hpp	/^  status recv_impl(int source, int tag, T& value, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int source, int tag, T& value, mpl::true_) const
recv_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::recv_impl(int source, int tag, T& value, mpl::false_) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value, mpl::false_) const
recv_impl	/usr/include/boost/mpi/communicator.hpp	/^status communicator::recv_impl(int source, int tag, T& value, mpl::true_) const$/;"	f	class:boost::mpi::communicator	signature:(int source, int tag, T& value, mpl::true_) const
reduce	/usr/include/boost/mpi/collectives.hpp	/^reduce(const communicator& comm, const T& in_value, T& out_value, Op op,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op, int root)
reduce	/usr/include/boost/mpi/collectives.hpp	/^reduce(const communicator& comm, const T* in_values, int n, Op op, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, Op op, int root)
reduce	/usr/include/boost/mpi/collectives.hpp	/^reduce(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root)
reduce	/usr/include/boost/mpi/collectives.hpp	/^void reduce(const communicator& comm, const T& in_value, Op op, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op, int root)
reduce	/usr/include/boost/mpi/collectives/reduce.hpp	/^reduce(const communicator& comm, const T& in_value, T& out_value, Op op,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op, int root)
reduce	/usr/include/boost/mpi/collectives/reduce.hpp	/^reduce(const communicator& comm, const T* in_values, int n, Op op, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, Op op, int root)
reduce	/usr/include/boost/mpi/collectives/reduce.hpp	/^reduce(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root)
reduce	/usr/include/boost/mpi/collectives/reduce.hpp	/^void reduce(const communicator& comm, const T& in_value, Op op, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op, int root)
reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root, mpl::false_ , mpl::false_ )
reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root, mpl::false_ , mpl::true_ )
reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root, mpl::true_ , mpl::true_ )
reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, Op op, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, Op op, int root, mpl::false_ , mpl::false_ )
reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, Op op, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, Op op, int root, mpl::false_ , mpl::true_ )
reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  reduce_impl(const communicator& comm, const T* in_values, int n, Op op, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, Op op, int root, mpl::true_ , mpl::true_ )
reference	/usr/include/boost/mpi/allocator.hpp	/^  typedef T&              reference;$/;"	t	class:boost::mpi::allocator	access:public
register_serialized	/usr/include/boost/mpi/python.hpp	/^register_serialized(const T& value = T(), PyTypeObject* type = 0);$/;"	p	namespace:boost::mpi::python	signature:(const T& value = T(), PyTypeObject* type = 0)
register_serialized	/usr/include/boost/mpi/python/serialize.hpp	/^register_serialized(const T& value = T(), PyTypeObject* type = 0)$/;"	f	namespace:boost::python	signature:(const T& value = T(), PyTypeObject* type = 0)
register_serialized	/usr/include/boost/mpi/python/serialize.hpp	/^register_serialized(const T& value, PyTypeObject* type)$/;"	f	namespace:boost::mpi::python	signature:(const T& value, PyTypeObject* type)
register_skeleton_and_content	/usr/include/boost/mpi/python.hpp	/^register_skeleton_and_content(const T& value = T(), PyTypeObject* type = 0);$/;"	p	namespace:boost::mpi::python	signature:(const T& value = T(), PyTypeObject* type = 0)
register_skeleton_and_content	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^void register_skeleton_and_content(const T& value, PyTypeObject* type)$/;"	f	namespace:boost::mpi::python	signature:(const T& value, PyTypeObject* type)
register_skeleton_and_content_handler	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  register_skeleton_and_content_handler(PyTypeObject*, $/;"	p	namespace:boost::mpi::python::detail	signature:(PyTypeObject*, const skeleton_content_handler&)
register_type	/usr/include/boost/mpi/python/serialize.hpp	/^    void register_type(const T& value = T(), PyTypeObject* type = 0)$/;"	f	class:boost::python::detail::direct_serialization_table	access:public	signature:(const T& value = T(), PyTypeObject* type = 0)
register_type	/usr/include/boost/mpi/python/serialize.hpp	/^    void register_type(const saver_t& saver, const loader_t& loader, $/;"	f	class:boost::python::detail::direct_serialization_table	access:public	signature:(const saver_t& saver, const loader_t& loader, const T& value = T(), PyTypeObject* type = 0)
remote_group	/usr/include/boost/mpi/intercommunicator.hpp	/^  boost::mpi::group remote_group() const;$/;"	p	class:boost::mpi::intercommunicator	access:public	signature:() const
remote_size	/usr/include/boost/mpi/intercommunicator.hpp	/^  int remote_size() const;$/;"	p	class:boost::mpi::intercommunicator	access:public	signature:() const
request	/usr/include/boost/mpi/request.hpp	/^  request();$/;"	p	class:boost::mpi::request	access:public	signature:()
request	/usr/include/boost/mpi/request.hpp	/^class BOOST_MPI_DECL request $/;"	c	namespace:boost::mpi
request_action	/usr/include/boost/mpi/request.hpp	/^  enum request_action { ra_wait, ra_test, ra_cancel };$/;"	g	class:boost::mpi::request	access:private
resize	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    void resize(std::size_t s)$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:(std::size_t s)
resize	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    void resize(std::size_t s)$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:(std::size_t s)
restart	/usr/include/boost/mpi/timer.hpp	/^  void restart();$/;"	p	class:boost::mpi::timer	access:public	signature:()
restart	/usr/include/boost/mpi/timer.hpp	/^inline void timer::restart()$/;"	f	class:boost::mpi::timer	signature:()
result_code	/usr/include/boost/mpi/exception.hpp	/^  int result_code() const { return result_code_; }$/;"	f	class:boost::mpi::exception	access:public	signature:() const
result_code_	/usr/include/boost/mpi/exception.hpp	/^  int result_code_;$/;"	m	class:boost::mpi::exception	access:protected
root	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int root;$/;"	m	class:boost::mpi::detail::computation_tree	access:protected
routine	/usr/include/boost/mpi/exception.hpp	/^  const char* routine() const { return routine_; }$/;"	f	class:boost::mpi::exception	access:public	signature:() const
routine_	/usr/include/boost/mpi/exception.hpp	/^  const char* routine_;$/;"	m	class:boost::mpi::exception	access:protected
save	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save(const T & t)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(const T & t)
save	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save(const std::basic_string<CharType> &s)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(const std::basic_string<CharType> &s)
save	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save(serialization::array<T> const& x)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(serialization::array<T> const& x)
save	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    void save(const T & t)$/;"	f	class:boost::mpi::detail::forward_oprimitive	access:public	signature:(const T & t)
save	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^    void save(const T & t)$/;"	f	class:boost::mpi::detail::ignore_oprimitive	access:public	signature:(const T & t)
save	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    void save(const T & t)$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:(const T & t)
save	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void save(const T & t)$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:(const T & t)
save	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void save(const std::basic_string<CharType> &s)$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:(const std::basic_string<CharType> &s)
save	/usr/include/boost/mpi/python/serialize.hpp	/^save(Archiver& ar, const boost::python::object& obj, $/;"	f	namespace:boost::python	signature:(Archiver& ar, const boost::python::object& obj, const unsigned int version)
save_array	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save_array(serialization::array<T> const& x, unsigned int \/* file_version *\/)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(serialization::array<T> const& x, unsigned int )
save_array	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    void save_array(serialization::array<T> const& x, unsigned int file_version )$/;"	f	class:boost::mpi::detail::forward_oprimitive	access:public	signature:(serialization::array<T> const& x, unsigned int file_version )
save_array	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^    void save_array(serialization::array<T> const&, unsigned int )$/;"	f	class:boost::mpi::detail::ignore_oprimitive	access:public	signature:(serialization::array<T> const&, unsigned int )
save_array	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    void save_array(serialization::array<T> const& x, unsigned int \/* version *\/)$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:(serialization::array<T> const& x, unsigned int )
save_array	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void save_array(serialization::array<T> const& x, unsigned int \/* file_version *\/)$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:(serialization::array<T> const& x, unsigned int )
save_binary	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save_binary(void const *address, std::size_t count)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:(void const *address, std::size_t count)
save_binary	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    void save_binary(const void * address, std::size_t count)$/;"	f	class:boost::mpi::detail::forward_oprimitive	access:public	signature:(const void * address, std::size_t count)
save_binary	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^    void save_binary(const void *, std::size_t )$/;"	f	class:boost::mpi::detail::ignore_oprimitive	access:public	signature:(const void *, std::size_t )
save_binary	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    void save_binary(void const *address, std::size_t count)$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:public	signature:(void const *address, std::size_t count)
save_binary	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void save_binary(void const *address, std::size_t count)$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:(void const *address, std::size_t count)
save_enum	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^    void save_enum(T const& t, mpl::false_)$/;"	f	class:boost::mpi::detail::mpi_datatype_oarchive	access:public	signature:(T const& t, mpl::false_)
save_enum	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^    void save_enum(T const& t, mpl::true_)$/;"	f	class:boost::mpi::detail::mpi_datatype_oarchive	access:public	signature:(T const& t, mpl::true_)
save_impl	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    void save_impl(void const * p, int l)$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:private	signature:(void const * p, int l)
save_impl	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    void save_impl(void const * p, MPI_Datatype t, int l)$/;"	f	class:boost::mpi::detail::mpi_datatype_primitive	access:private	signature:(void const * p, MPI_Datatype t, int l)
save_impl	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    void save_impl(void const * p, MPI_Datatype t, int l)$/;"	f	class:boost::mpi::packed_oprimitive	access:private	signature:(void const * p, MPI_Datatype t, int l)
save_impl	/usr/include/boost/mpi/python/serialize.hpp	/^save_impl(Archiver& ar, const boost::python::object& obj, $/;"	f	namespace:boost::python::detail	signature:(Archiver& ar, const boost::python::object& obj, const unsigned int , mpl::false_ )
save_impl	/usr/include/boost/mpi/python/serialize.hpp	/^save_impl(Archiver& ar, const boost::python::object& obj, $/;"	f	namespace:boost::python::detail	signature:(Archiver& ar, const boost::python::object& obj, const unsigned int version, mpl::true_ )
save_override	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^    void save_override(T const& t, BOOST_PFTO int)$/;"	f	class:boost::mpi::detail::forward_skeleton_oarchive	access:protected	signature:(T const& t, BOOST_PFTO int)
save_override	/usr/include/boost/mpi/detail/forward_skeleton_oarchive.hpp	/^    void save_override(std::string const & t , int)    $/;"	f	class:boost::mpi::detail::forward_skeleton_oarchive	access:protected	signature:(std::string const & t , int)
save_override	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^    void save_override(T const& t, BOOST_PFTO int)$/;"	f	class:boost::mpi::detail::ignore_skeleton_oarchive	access:protected	signature:(T const& t, BOOST_PFTO int)
save_override	/usr/include/boost/mpi/detail/ignore_skeleton_oarchive.hpp	/^    void save_override(std::string const & s, int)       $/;"	f	class:boost::mpi::detail::ignore_skeleton_oarchive	access:protected	signature:(std::string const & s, int)
save_override	/usr/include/boost/mpi/detail/mpi_datatype_oarchive.hpp	/^    void save_override(T const& t, BOOST_PFTO int)$/;"	f	class:boost::mpi::detail::mpi_datatype_oarchive	access:public	signature:(T const& t, BOOST_PFTO int)
save_override	/usr/include/boost/mpi/packed_oarchive.hpp	/^  void save_override(T const& x, int \/*version*\/, mpl::true_)$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:(T const& x, int , mpl::true_)
save_override	/usr/include/boost/mpi/packed_oarchive.hpp	/^  void save_override(T const& x, int version)$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:(T const& x, int version)
save_override	/usr/include/boost/mpi/packed_oarchive.hpp	/^  void save_override(T const& x, int version, mpl::false_)$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:(T const& x, int version, mpl::false_)
save_override	/usr/include/boost/mpi/packed_oarchive.hpp	/^  void save_override(const archive::class_id_optional_type & \/*t*\/, int){}$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:(const archive::class_id_optional_type & , int)
save_override	/usr/include/boost/mpi/packed_oarchive.hpp	/^  void save_override(const archive::class_name_type & t, int){$/;"	f	class:boost::mpi::packed_oarchive	access:public	signature:(const archive::class_name_type & t, int)
saver	/usr/include/boost/mpi/python/serialize.hpp	/^    saver_t saver(const object& obj, int& descriptor)$/;"	f	class:boost::python::detail::direct_serialization_table	access:public	signature:(const object& obj, int& descriptor)
saver_t	/usr/include/boost/mpi/python/serialize.hpp	/^      saver_t;$/;"	t	class:boost::python::detail::direct_serialization_table	access:public
savers	/usr/include/boost/mpi/python/serialize.hpp	/^    savers_t savers;$/;"	m	class:boost::python::detail::direct_serialization_table	access:protected
savers_t	/usr/include/boost/mpi/python/serialize.hpp	/^    typedef std::map<PyTypeObject*, std::pair<int, saver_t> > savers_t;$/;"	t	class:boost::python::detail::direct_serialization_table	access:public
scan	/usr/include/boost/mpi/collectives.hpp	/^scan(const communicator& comm, const T& in_value, Op op);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op)
scan	/usr/include/boost/mpi/collectives.hpp	/^scan(const communicator& comm, const T& in_value, T& out_value, Op op);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op)
scan	/usr/include/boost/mpi/collectives.hpp	/^scan(const communicator& comm, const T* in_values, int n, T* out_values, Op op);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op)
scan	/usr/include/boost/mpi/collectives/scan.hpp	/^scan(const communicator& comm, const T& in_value, Op op)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, Op op)
scan	/usr/include/boost/mpi/collectives/scan.hpp	/^scan(const communicator& comm, const T& in_value, T& out_value, Op op)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T& in_value, T& out_value, Op op)
scan	/usr/include/boost/mpi/collectives/scan.hpp	/^scan(const communicator& comm, const T* in_values, int n, T* out_values, Op op)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op)
scan_impl	/usr/include/boost/mpi/collectives/scan.hpp	/^  scan_impl(const communicator& comm, const T* in_values, int n, T* out_values, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, mpl::false_ , mpl::false_ )
scan_impl	/usr/include/boost/mpi/collectives/scan.hpp	/^  scan_impl(const communicator& comm, const T* in_values, int n, T* out_values,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, mpl::false_ , mpl::true_ )
scan_impl	/usr/include/boost/mpi/collectives/scan.hpp	/^  scan_impl(const communicator& comm, const T* in_values, int n, T* out_values,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, mpl::true_ , mpl::true_ )
scatter	/usr/include/boost/mpi/collectives.hpp	/^scatter(const communicator& comm, const T* in_values, T& out_value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T& out_value, int root)
scatter	/usr/include/boost/mpi/collectives.hpp	/^scatter(const communicator& comm, const T* in_values, T* out_values, int n,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T* out_values, int n, int root)
scatter	/usr/include/boost/mpi/collectives.hpp	/^scatter(const communicator& comm, const std::vector<T>& in_values, $/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, T* out_values, int n, int root)
scatter	/usr/include/boost/mpi/collectives.hpp	/^scatter(const communicator& comm, const std::vector<T>& in_values, T& out_value,$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, T& out_value, int root)
scatter	/usr/include/boost/mpi/collectives.hpp	/^void scatter(const communicator& comm, T& out_value, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, T& out_value, int root)
scatter	/usr/include/boost/mpi/collectives.hpp	/^void scatter(const communicator& comm, T* out_values, int n, int root);$/;"	p	namespace:boost::mpi	signature:(const communicator& comm, T* out_values, int n, int root)
scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^scatter(const communicator& comm, const T* in_values, T& out_value, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T& out_value, int root)
scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^scatter(const communicator& comm, const T* in_values, T* out_values, int n,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const T* in_values, T* out_values, int n, int root)
scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^scatter(const communicator& comm, const std::vector<T>& in_values, $/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, T* out_values, int n, int root)
scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^scatter(const communicator& comm, const std::vector<T>& in_values, T& out_value,$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, const std::vector<T>& in_values, T& out_value, int root)
scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^void scatter(const communicator& comm, T& out_value, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, T& out_value, int root)
scatter	/usr/include/boost/mpi/collectives/scatter.hpp	/^void scatter(const communicator& comm, T* out_values, int n, int root)$/;"	f	namespace:boost::mpi	signature:(const communicator& comm, T* out_values, int n, int root)
scatter_impl	/usr/include/boost/mpi/collectives/scatter.hpp	/^  scatter_impl(const communicator& comm, T* out_values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, T* out_values, int n, int root, mpl::false_)
scatter_impl	/usr/include/boost/mpi/collectives/scatter.hpp	/^  scatter_impl(const communicator& comm, T* out_values, int n, int root, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, T* out_values, int n, int root, mpl::true_)
scatter_impl	/usr/include/boost/mpi/collectives/scatter.hpp	/^  scatter_impl(const communicator& comm, const T* in_values, T* out_values, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, T* out_values, int n, int root, mpl::false_)
scatter_impl	/usr/include/boost/mpi/collectives/scatter.hpp	/^  scatter_impl(const communicator& comm, const T* in_values, T* out_values, $/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, T* out_values, int n, int root, mpl::true_)
send	/usr/include/boost/mpi/communicator.hpp	/^  void send(int dest, int tag) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag) const
send	/usr/include/boost/mpi/communicator.hpp	/^  void send(int dest, int tag, const T& value) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const T& value) const
send	/usr/include/boost/mpi/communicator.hpp	/^  void send(int dest, int tag, const T* values, int n) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const T* values, int n) const
send	/usr/include/boost/mpi/communicator.hpp	/^  void send(int dest, int tag, const skeleton_proxy<T>& proxy) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int dest, int tag, const skeleton_proxy<T>& proxy) const
send	/usr/include/boost/mpi/communicator.hpp	/^communicator::send<content>(int dest, int tag, const content& c) const;$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const content& c) const
send	/usr/include/boost/mpi/communicator.hpp	/^communicator::send<packed_oarchive>(int dest, int tag,$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const packed_oarchive& ar) const
send	/usr/include/boost/mpi/communicator.hpp	/^communicator::send<packed_skeleton_oarchive>$/;"	p	class:boost::mpi::communicator	signature:(int dest, int tag, const packed_skeleton_oarchive& ar) const
send	/usr/include/boost/mpi/communicator.hpp	/^void communicator::send(int dest, int tag, const T& value) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value) const
send	/usr/include/boost/mpi/communicator.hpp	/^void communicator::send(int dest, int tag, const T* values, int n) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T* values, int n) const
send	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^communicator::send(int dest, int tag, const skeleton_proxy<T>& proxy) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const skeleton_proxy<T>& proxy) const
send_impl	/usr/include/boost/mpi/communicator.hpp	/^  void send_impl(int dest, int tag, const T& value, mpl::false_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T& value, mpl::false_) const
send_impl	/usr/include/boost/mpi/communicator.hpp	/^  void send_impl(int dest, int tag, const T& value, mpl::true_) const;$/;"	p	class:boost::mpi::communicator	access:protected	signature:(int dest, int tag, const T& value, mpl::true_) const
send_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::send_impl(int dest, int tag, const T& value, mpl::false_) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value, mpl::false_) const
send_impl	/usr/include/boost/mpi/communicator.hpp	/^communicator::send_impl(int dest, int tag, const T& value, mpl::true_) const$/;"	f	class:boost::mpi::communicator	signature:(int dest, int tag, const T& value, mpl::true_) const
serialize	/usr/include/boost/mpi/python/serialize.hpp	/^serialize(Archive& ar, boost::python::object& obj, const unsigned int version)$/;"	f	namespace:boost::python	signature:(Archive& ar, boost::python::object& obj, const unsigned int version)
serialized_array_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^    serialized_array_irecv_data(const communicator& comm, int source, int tag, $/;"	f	struct:boost::mpi::detail::serialized_array_irecv_data	access:public	signature:(const communicator& comm, int source, int tag, T* values, int n)
serialized_array_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^  struct serialized_array_irecv_data$/;"	s	namespace:boost::mpi::detail
serialized_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^    serialized_irecv_data(const communicator& comm, int source, int tag, $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(const communicator& comm, int source, int tag, T& value)
serialized_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^    serialized_irecv_data(const communicator& comm, int source, int tag, $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(const communicator& comm, int source, int tag, packed_iarchive& ia)
serialized_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^  struct serialized_irecv_data$/;"	s	namespace:boost::mpi::detail
serialized_irecv_data	/usr/include/boost/mpi/communicator.hpp	/^  struct serialized_irecv_data<packed_iarchive>$/;"	s	namespace:boost::mpi::detail
serialized_irecv_data	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    serialized_irecv_data(const communicator& comm, int source, int tag, $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(const communicator& comm, int source, int tag, const skeleton_proxy<T>& proxy)
serialized_irecv_data	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    serialized_irecv_data(const communicator& comm, int source, int tag, $/;"	f	struct:boost::mpi::detail::serialized_irecv_data	access:public	signature:(const communicator& comm, int source, int tag, skeleton_proxy<T> proxy)
serialized_irecv_data	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^  struct serialized_irecv_data<const skeleton_proxy<T> >$/;"	s	namespace:boost::mpi::detail
serialized_irecv_data	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^  struct serialized_irecv_data<skeleton_proxy<T> >$/;"	s	namespace:boost::mpi::detail	inherits:serialized_irecv_data
set	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  void set(const std::type_info* t, MPI_Datatype datatype);$/;"	p	class:boost::mpi::detail::mpi_datatype_map	access:private	signature:(const std::type_info* t, MPI_Datatype datatype)
setup_graph	/usr/include/boost/mpi/graph_communicator.hpp	/^  setup_graph(const communicator& comm, const Graph& graph, RankMap rank, $/;"	p	class:boost::mpi::graph_communicator	access:protected	signature:(const communicator& comm, const Graph& graph, RankMap rank, bool reorder)
setup_graph	/usr/include/boost/mpi/graph_communicator.hpp	/^graph_communicator::setup_graph(const communicator& comm, const Graph& graph, $/;"	f	class:boost::mpi::graph_communicator	signature:(const communicator& comm, const Graph& graph, RankMap rank, bool reorder)
size	/usr/include/boost/mpi/communicator.hpp	/^  int size() const;$/;"	p	class:boost::mpi::communicator	access:public	signature:() const
size	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    const std::size_t& size() const$/;"	f	class:boost::mpi::binary_buffer_iprimitive	access:public	signature:() const
size	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    const std::size_t& size() const$/;"	f	class:boost::mpi::binary_buffer_oprimitive	access:public	signature:() const
size	/usr/include/boost/mpi/detail/computation_tree.hpp	/^  int size;$/;"	m	class:boost::mpi::detail::computation_tree	access:protected
size	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    const std::size_t& size() const$/;"	f	class:boost::mpi::packed_iprimitive	access:public	signature:() const
size	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    const std::size_t& size() const$/;"	f	class:boost::mpi::packed_oprimitive	access:public	signature:() const
size	/usr/include/boost/mpi/group.hpp	/^  int size() const;$/;"	p	class:boost::mpi::group	access:public	signature:() const
size_	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    mutable std::size_t size_;$/;"	m	class:boost::mpi::binary_buffer_iprimitive	access:private
size_	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^  mutable std::size_t size_;$/;"	m	class:boost::mpi::binary_buffer_oprimitive	access:private
size_	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    mutable std::size_t size_;$/;"	m	class:boost::mpi::packed_iprimitive	access:private
size_	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^  mutable std::size_t size_;$/;"	m	class:boost::mpi::packed_oprimitive	access:private
size_type	/usr/include/boost/mpi/allocator.hpp	/^  typedef std::size_t     size_type;$/;"	t	class:boost::mpi::allocator	access:public
skeleton	/usr/include/boost/mpi/skeleton_and_content.hpp	/^inline const skeleton_proxy<T> skeleton(T& x)$/;"	f	namespace:boost::mpi	signature:(T& x)
skeleton	/usr/include/boost/mpi/skeleton_and_content_fwd.hpp	/^template <class T> const skeleton_proxy<T> skeleton(T& x);$/;"	p	namespace:boost::mpi	signature:(T& x)
skeleton_and_content_handler_registered	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  skeleton_and_content_handler_registered(PyTypeObject* type);$/;"	p	namespace:boost::mpi::python::detail	signature:(PyTypeObject* type)
skeleton_archive_	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^    boost::archive::text_oarchive skeleton_archive_;$/;"	m	class:boost::mpi::text_skeleton_oarchive	access:private
skeleton_archive_	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  packed_iarchive skeleton_archive_;$/;"	m	class:boost::mpi::packed_skeleton_iarchive	access:private
skeleton_archive_	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  packed_oarchive skeleton_archive_;$/;"	m	class:boost::mpi::packed_skeleton_oarchive	access:private
skeleton_content_handler	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  struct skeleton_content_handler {$/;"	s	namespace:boost::mpi::python::detail
skeleton_loader	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  struct skeleton_loader$/;"	s	namespace:boost::mpi::python::detail
skeleton_proxy	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  skeleton_proxy(const boost::python::object& object) $/;"	f	class:boost::mpi::python::skeleton_proxy	access:public	signature:(const boost::python::object& object)
skeleton_proxy	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^class skeleton_proxy : public skeleton_proxy_base$/;"	c	namespace:boost::mpi::python	inherits:skeleton_proxy_base
skeleton_proxy	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  skeleton_proxy(T& x)$/;"	f	struct:boost::mpi::skeleton_proxy	access:public	signature:(T& x)
skeleton_proxy	/usr/include/boost/mpi/skeleton_and_content.hpp	/^struct BOOST_MPI_DECL skeleton_proxy$/;"	s	namespace:boost::mpi
skeleton_proxy_base	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  skeleton_proxy_base(const boost::python::object& object) : object(object) { }$/;"	f	class:boost::mpi::python::skeleton_proxy_base	access:public	signature:(const boost::python::object& object)
skeleton_proxy_base	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^class skeleton_proxy_base $/;"	c	namespace:boost::mpi::python
skeleton_saver	/usr/include/boost/mpi/python/skeleton_and_content.hpp	/^  struct skeleton_saver$/;"	s	namespace:boost::mpi::python::detail
source	/usr/include/boost/mpi/communicator.hpp	/^    int source;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
source	/usr/include/boost/mpi/communicator.hpp	/^    int source;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
source	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    int source;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
source	/usr/include/boost/mpi/graph_communicator.hpp	/^inline int source(const std::pair<int, int>& edge, const graph_communicator&)$/;"	f	namespace:boost::mpi	signature:(const std::pair<int, int>& edge, const graph_communicator&)
source	/usr/include/boost/mpi/status.hpp	/^  int source() const { return m_status.MPI_SOURCE; }$/;"	f	class:boost::mpi::status	access:public	signature:() const
split	/usr/include/boost/mpi/communicator.hpp	/^  communicator split(int color) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int color) const
split	/usr/include/boost/mpi/communicator.hpp	/^  communicator split(int color, int key) const;$/;"	p	class:boost::mpi::communicator	access:public	signature:(int color, int key) const
start_time	/usr/include/boost/mpi/timer.hpp	/^  double start_time;$/;"	m	class:boost::mpi::timer	access:private
status	/usr/include/boost/mpi/status.hpp	/^  status() : m_count(-1) { }$/;"	f	class:boost::mpi::status	access:public	signature:()
status	/usr/include/boost/mpi/status.hpp	/^  status(MPI_Status const& s) : m_status(s), m_count(-1) {}$/;"	f	class:boost::mpi::status	access:public	signature:(MPI_Status const& s)
status	/usr/include/boost/mpi/status.hpp	/^class BOOST_MPI_DECL status$/;"	c	namespace:boost::mpi
std	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^namespace std{$/;"	n
tag	/usr/include/boost/mpi/communicator.hpp	/^    int tag;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
tag	/usr/include/boost/mpi/communicator.hpp	/^    int tag;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
tag	/usr/include/boost/mpi/detail/communicator_sc.hpp	/^    int tag;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
tag	/usr/include/boost/mpi/status.hpp	/^  int tag() const { return m_status.MPI_TAG; }$/;"	f	class:boost::mpi::status	access:public	signature:() const
target	/usr/include/boost/mpi/graph_communicator.hpp	/^inline int target(const std::pair<int, int>& edge, const graph_communicator&)$/;"	f	namespace:boost::mpi	signature:(const std::pair<int, int>& edge, const graph_communicator&)
test	/usr/include/boost/mpi/request.hpp	/^  optional<status> test();$/;"	p	class:boost::mpi::request	access:public	signature:()
test_all	/usr/include/boost/mpi/nonblocking.hpp	/^test_all(ForwardIterator first, ForwardIterator last)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last)
test_all	/usr/include/boost/mpi/nonblocking.hpp	/^test_all(ForwardIterator first, ForwardIterator last, OutputIterator out)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last, OutputIterator out)
test_any	/usr/include/boost/mpi/nonblocking.hpp	/^test_any(ForwardIterator first, ForwardIterator last)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last)
test_some	/usr/include/boost/mpi/nonblocking.hpp	/^test_some(BidirectionalIterator first, BidirectionalIterator last)$/;"	f	namespace:boost::mpi	signature:(BidirectionalIterator first, BidirectionalIterator last)
test_some	/usr/include/boost/mpi/nonblocking.hpp	/^test_some(BidirectionalIterator first, BidirectionalIterator last,$/;"	f	namespace:boost::mpi	signature:(BidirectionalIterator first, BidirectionalIterator last, OutputIterator out)
text_skeleton_oarchive	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^    text_skeleton_oarchive(std::ostream & s, unsigned int flags = 0) $/;"	f	class:boost::mpi::text_skeleton_oarchive	access:public	signature:(std::ostream & s, unsigned int flags = 0)
text_skeleton_oarchive	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^class text_skeleton_oarchive $/;"	c	namespace:boost::mpi	inherits:detail::ignore_oprimitive,detail::forward_skeleton_oarchive
time_is_global	/usr/include/boost/mpi/timer.hpp	/^  static bool time_is_global();$/;"	p	class:boost::mpi::timer	access:public	signature:()
timer	/usr/include/boost/mpi/timer.hpp	/^  timer();$/;"	p	class:boost::mpi::timer	access:public	signature:()
timer	/usr/include/boost/mpi/timer.hpp	/^class BOOST_MPI_DECL timer {$/;"	c	namespace:boost::mpi
timer	/usr/include/boost/mpi/timer.hpp	/^inline timer::timer() $/;"	f	class:boost::mpi::timer	signature:()
translate_ranks	/usr/include/boost/mpi/group.hpp	/^  OutputIterator translate_ranks(InputIterator first, InputIterator last,$/;"	p	class:boost::mpi::group	access:public	signature:(InputIterator first, InputIterator last, const group& to_group, OutputIterator out)
translate_ranks	/usr/include/boost/mpi/group.hpp	/^group::translate_ranks(InputIterator first, InputIterator last,$/;"	f	class:boost::mpi::group	signature:(InputIterator first, InputIterator last, const group& to_group, OutputIterator out)
translate_ranks	/usr/include/boost/mpi/group.hpp	/^group::translate_ranks(int* first, int* last, const group& to_group, int* out);$/;"	p	class:boost::mpi::group	signature:(int* first, int* last, const group& to_group, int* out)
traversal_category	/usr/include/boost/mpi/graph_communicator.hpp	/^  struct traversal_category$/;"	s	struct:boost::graph_traits	inherits:incidence_graph_tag,adjacency_graph_tag,vertex_list_graph_tag,edge_list_graph_tag	access:public
tree_reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  tree_reduce_impl(const communicator& comm, const T* in_values, int n, Op op,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, Op op, int root, mpl::false_ )
tree_reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  tree_reduce_impl(const communicator& comm, const T* in_values, int n, Op op,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, Op op, int root, mpl::true_ )
tree_reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  tree_reduce_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root, mpl::false_ )
tree_reduce_impl	/usr/include/boost/mpi/collectives/reduce.hpp	/^  tree_reduce_impl(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op op, int root, mpl::true_ )
type	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef identity_property_map type;$/;"	t	struct:boost::property_map	access:public
type	/usr/include/boost/mpi/python/serialize.hpp	/^      PyTypeObject* type;$/;"	m	struct:boost::python::detail::direct_serialization_table::default_loader	access:private
type1	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  typedef boost::mpi::detail::forward_skeleton_oarchive<boost::mpi::packed_skeleton_oarchive,boost::mpi::packed_oarchive> type1;$/;"	t	namespace:boost::mpi::detail
type2	/usr/include/boost/mpi/skeleton_and_content.hpp	/^  typedef boost::mpi::detail::forward_skeleton_iarchive<boost::mpi::packed_skeleton_iarchive,boost::mpi::packed_iarchive> type2;$/;"	t	namespace:boost::mpi::detail
type3	/usr/include/boost/mpi/detail/text_skeleton_oarchive.hpp	/^typedef boost::mpi::detail::forward_skeleton_oarchive<boost::mpi::text_skeleton_oarchive,boost::archive::text_oarchive> type3;$/;"	t	namespace:boost::mpi::detail
type_info_compare	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^struct type_info_compare$/;"	s	namespace:boost::mpi::detail
types	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    std::vector<MPI_Datatype> types;$/;"	m	class:boost::mpi::detail::mpi_datatype_primitive	access:private
upper_lower_scan	/usr/include/boost/mpi/collectives/scan.hpp	/^  upper_lower_scan(const communicator& comm, const T* in_values, int n,$/;"	f	namespace:boost::mpi::detail	signature:(const communicator& comm, const T* in_values, int n, T* out_values, Op& op, int lower, int upper)
use_array_optimization	/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp	/^    typedef serialization::is_bitwise_serializable<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::binary_buffer_iprimitive	access:public
use_array_optimization	/usr/include/boost/mpi/detail/binary_buffer_oprimitive.hpp	/^    typedef serialization::is_bitwise_serializable<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::binary_buffer_oprimitive	access:public
use_array_optimization	/usr/include/boost/mpi/detail/forward_iprimitive.hpp	/^    typedef typename ImplementationArchive::use_array_optimization use_array_optimization;    $/;"	t	class:boost::mpi::detail::forward_iprimitive	access:public
use_array_optimization	/usr/include/boost/mpi/detail/forward_oprimitive.hpp	/^    typedef typename ImplementationArchive::use_array_optimization use_array_optimization;$/;"	t	class:boost::mpi::detail::forward_oprimitive	access:public
use_array_optimization	/usr/include/boost/mpi/detail/ignore_iprimitive.hpp	/^    typedef is_mpi_datatype<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::detail::ignore_iprimitive	access:public
use_array_optimization	/usr/include/boost/mpi/detail/ignore_oprimitive.hpp	/^    typedef is_mpi_datatype<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::detail::ignore_oprimitive	access:public
use_array_optimization	/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp	/^    typedef is_mpi_datatype<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::detail::mpi_datatype_primitive	access:public
use_array_optimization	/usr/include/boost/mpi/detail/packed_iprimitive.hpp	/^    typedef is_mpi_datatype<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::packed_iprimitive	access:public
use_array_optimization	/usr/include/boost/mpi/detail/packed_oprimitive.hpp	/^    typedef is_mpi_datatype<mpl::_1> use_array_optimization;$/;"	t	class:boost::mpi::packed_oprimitive	access:public
user_op	/usr/include/boost/mpi/operations.hpp	/^    explicit user_op(Op& op)$/;"	f	class:boost::mpi::detail::user_op	access:public	signature:(Op& op)
user_op	/usr/include/boost/mpi/operations.hpp	/^  class user_op$/;"	c	namespace:boost::mpi::detail
value	/usr/include/boost/mpi/communicator.hpp	/^    T& value;$/;"	m	struct:boost::mpi::detail::serialized_irecv_data	access:public
value_type	/usr/include/boost/mpi/allocator.hpp	/^  typedef T               value_type;$/;"	t	class:boost::mpi::allocator	access:public
value_type	/usr/include/boost/mpi/allocator.hpp	/^  typedef void value_type; $/;"	t	class:boost::mpi::allocator	access:public
values	/usr/include/boost/mpi/communicator.hpp	/^    T* values;$/;"	m	struct:boost::mpi::detail::serialized_array_irecv_data	access:public
vertex_descriptor	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef int                        vertex_descriptor;$/;"	t	struct:boost::graph_traits	access:public
vertex_iterator	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef counting_iterator<int> vertex_iterator;$/;"	t	struct:boost::graph_traits	access:public
vertices	/usr/include/boost/mpi/graph_communicator.hpp	/^vertices(const graph_communicator& comm)$/;"	f	namespace:boost::mpi	signature:(const graph_communicator& comm)
vertices_size_type	/usr/include/boost/mpi/graph_communicator.hpp	/^  typedef int                    vertices_size_type;$/;"	t	struct:boost::graph_traits	access:public
wait	/usr/include/boost/mpi/request.hpp	/^  status wait();$/;"	p	class:boost::mpi::request	access:public	signature:()
wait_all	/usr/include/boost/mpi/nonblocking.hpp	/^wait_all(ForwardIterator first, ForwardIterator last)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last)
wait_all	/usr/include/boost/mpi/nonblocking.hpp	/^wait_all(ForwardIterator first, ForwardIterator last, OutputIterator out)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last, OutputIterator out)
wait_any	/usr/include/boost/mpi/nonblocking.hpp	/^wait_any(ForwardIterator first, ForwardIterator last)$/;"	f	namespace:boost::mpi	signature:(ForwardIterator first, ForwardIterator last)
wait_some	/usr/include/boost/mpi/nonblocking.hpp	/^wait_some(BidirectionalIterator first, BidirectionalIterator last)$/;"	f	namespace:boost::mpi	signature:(BidirectionalIterator first, BidirectionalIterator last)
wait_some	/usr/include/boost/mpi/nonblocking.hpp	/^wait_some(BidirectionalIterator first, BidirectionalIterator last,$/;"	f	namespace:boost::mpi	signature:(BidirectionalIterator first, BidirectionalIterator last, OutputIterator out)
what	/usr/include/boost/mpi/exception.hpp	/^  virtual const char * what () const throw ()$/;"	f	class:boost::mpi::exception	access:public	signature:() const
~allocator	/usr/include/boost/mpi/allocator.hpp	/^  ~allocator() throw() { }$/;"	f	class:boost::mpi::allocator	access:public	signature:()
~environment	/usr/include/boost/mpi/environment.hpp	/^  ~environment();$/;"	p	class:boost::mpi::environment	access:public	signature:()
~exception	/usr/include/boost/mpi/exception.hpp	/^  virtual ~exception() throw();$/;"	p	class:boost::mpi::exception	access:public	signature:()
~mpi_datatype_holder	/usr/include/boost/mpi/skeleton_and_content.hpp	/^    ~mpi_datatype_holder()$/;"	f	class:boost::mpi::detail::mpi_datatype_holder	access:public	signature:()
~mpi_datatype_map	/usr/include/boost/mpi/detail/mpi_datatype_cache.hpp	/^  ~mpi_datatype_map();$/;"	p	class:boost::mpi::detail::mpi_datatype_map	access:public	signature:()
~user_op	/usr/include/boost/mpi/operations.hpp	/^    ~user_op()$/;"	f	class:boost::mpi::detail::user_op	access:public	signature:()
