!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_DYN_LINK	/usr/include/boost/locale/config.hpp	26;"	d
BOOST_LIB_NAME	/usr/include/boost/locale/config.hpp	21;"	d
BOOST_LOCALE_BOUNDARY_BOUNDARY_POINT_HPP_INCLUDED	/usr/include/boost/locale/boundary/boundary_point.hpp	9;"	d
BOOST_LOCALE_BOUNDARY_FACETS_HPP_INCLUDED	/usr/include/boost/locale/boundary/facets.hpp	9;"	d
BOOST_LOCALE_BOUNDARY_HPP_INCLUDED	/usr/include/boost/locale/boundary.hpp	9;"	d
BOOST_LOCALE_BOUNDARY_INDEX_HPP_INCLUDED	/usr/include/boost/locale/boundary/index.hpp	9;"	d
BOOST_LOCALE_BOUNDARY_SEGMENT_HPP_INCLUDED	/usr/include/boost/locale/boundary/segment.hpp	9;"	d
BOOST_LOCALE_BOUNDARY_TYPES_HPP_INCLUDED	/usr/include/boost/locale/boundary/types.hpp	9;"	d
BOOST_LOCALE_COLLATOR_HPP_INCLUDED	/usr/include/boost/locale/collator.hpp	9;"	d
BOOST_LOCALE_CONFIG_HPP_INCLUDED	/usr/include/boost/locale/config.hpp	9;"	d
BOOST_LOCALE_CONVERTER_HPP_INCLUDED	/usr/include/boost/locale/conversion.hpp	9;"	d
BOOST_LOCALE_DATE_TIME_FACET_HPP_INCLUDED	/usr/include/boost/locale/date_time_facet.hpp	9;"	d
BOOST_LOCALE_DATE_TIME_HPP_INCLUDED	/usr/include/boost/locale/date_time.hpp	9;"	d
BOOST_LOCALE_DECL	/usr/include/boost/locale/definitions.hpp	21;"	d
BOOST_LOCALE_DECL	/usr/include/boost/locale/definitions.hpp	23;"	d
BOOST_LOCALE_DECL	/usr/include/boost/locale/definitions.hpp	29;"	d
BOOST_LOCALE_DEFINITIONS_HPP_INCLUDED	/usr/include/boost/locale/definitions.hpp	9;"	d
BOOST_LOCALE_ENCODING_ERRORS_HPP_INCLUDED	/usr/include/boost/locale/encoding_errors.hpp	9;"	d
BOOST_LOCALE_ENCODING_HPP_INCLUDED	/usr/include/boost/locale/encoding.hpp	9;"	d
BOOST_LOCALE_ENCODING_UTF_HPP_INCLUDED	/usr/include/boost/locale/encoding_utf.hpp	9;"	d
BOOST_LOCALE_FORMATTING_HPP_INCLUDED	/usr/include/boost/locale/formatting.hpp	9;"	d
BOOST_LOCALE_FORMAT_HPP_INCLUDED	/usr/include/boost/locale/format.hpp	9;"	d
BOOST_LOCALE_GENERATOR_HPP	/usr/include/boost/locale/generator.hpp	9;"	d
BOOST_LOCALE_HOLD_PTR_H	/usr/include/boost/locale/hold_ptr.hpp	9;"	d
BOOST_LOCALE_INFO_HPP_INCLUDED	/usr/include/boost/locale/info.hpp	9;"	d
BOOST_LOCALE_LIKELY	/usr/include/boost/locale/utf.hpp	23;"	d
BOOST_LOCALE_LOCALIZATION_BACKEND_HPP	/usr/include/boost/locale/localization_backend.hpp	9;"	d
BOOST_LOCALE_MESSAGE_HPP_INCLUDED	/usr/include/boost/locale/message.hpp	9;"	d
BOOST_LOCALE_TIME_ZONE_HPP_INCLUDED	/usr/include/boost/locale/time_zone.hpp	9;"	d
BOOST_LOCALE_UNLIKELY	/usr/include/boost/locale/utf.hpp	24;"	d
BOOST_LOCALE_UTF_HPP_INCLUDED	/usr/include/boost/locale/utf.hpp	9;"	d
BOOST_LOCALE_UTIL_HPP	/usr/include/boost/locale/util.hpp	9;"	d
BOOST_LOCLAE_GNU_GETTEXT_HPP	/usr/include/boost/locale/gnu_gettext.hpp	9;"	d
BOOST_SYMBOL_VISIBLE	/usr/include/boost/locale/definitions.hpp	15;"	d
__get_id	/usr/include/boost/locale/boundary/facets.hpp	/^                std::locale::id& __get_id (void) const { return id; }$/;"	f	class:boost::locale::boundary::boundary_indexing	access:public	signature:(void) const
__get_id	/usr/include/boost/locale/conversion.hpp	/^            std::locale::id& __get_id (void) const { return id; }$/;"	f	class:boost::locale::converter	access:public	signature:(void) const
__get_id	/usr/include/boost/locale/info.hpp	/^            std::locale::id& __get_id (void) const { return id; }$/;"	f	class:boost::locale::info	access:public	signature:(void) const
__get_id	/usr/include/boost/locale/message.hpp	/^            std::locale::id& __get_id (void) const { return id; }$/;"	f	class:boost::locale::message_format	access:public	signature:(void) const
absolute_maximum	/usr/include/boost/locale/date_time_facet.hpp	/^                absolute_maximum,   \/\/\/< Maximal value, for Gregorian day it would be 31.$/;"	e	enum:boost::locale::abstract_calendar::__anon4
absolute_minimum	/usr/include/boost/locale/date_time_facet.hpp	/^                absolute_minimum,   \/\/\/< Absolute possible minimum for the value, for example for day is 1$/;"	e	enum:boost::locale::abstract_calendar::__anon4
abstract_calendar	/usr/include/boost/locale/date_time_facet.hpp	/^        class abstract_calendar {$/;"	c	namespace:boost::locale
actual_maximum	/usr/include/boost/locale/date_time_facet.hpp	/^                actual_maximum,     \/\/\/< Actual maximum, for it can be 28, 29, 30, 31 for day according to current month$/;"	e	enum:boost::locale::abstract_calendar::__anon4
actual_minimum	/usr/include/boost/locale/date_time_facet.hpp	/^                actual_minimum,     \/\/\/< Actual minimal value for this period.$/;"	e	enum:boost::locale::abstract_calendar::__anon4
add	/usr/include/boost/locale/date_time.hpp	/^            void add(date_time_period f)$/;"	f	class:boost::locale::date_time_period_set	access:public	signature:(date_time_period f)
add	/usr/include/boost/locale/format.hpp	/^            void add(formattible_type const &param)$/;"	f	class:boost::locale::basic_format	access:private	signature:(formattible_type const &param)
add_backend	/usr/include/boost/locale/localization_backend.hpp	/^            void add_backend(std::string const &name,std::auto_ptr<localization_backend> backend);$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:(std::string const &name,std::auto_ptr<localization_backend> backend)
add_ftime	/usr/include/boost/locale/formatting.hpp	/^                struct add_ftime {$/;"	s	namespace:boost::locale::as::details
add_messages_domain	/usr/include/boost/locale/generator.hpp	/^            void add_messages_domain(std::string const &domain);$/;"	p	class:boost::locale::generator	access:public	signature:(std::string const &domain)
add_messages_path	/usr/include/boost/locale/generator.hpp	/^            void add_messages_path(std::string const &path);$/;"	p	class:boost::locale::generator	access:public	signature:(std::string const &path)
adjust_value	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void adjust_value(period::marks::period_mark p,update_type u,int difference) = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(period::marks::period_mark p,update_type u,int difference)
all_categories	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t    all_categories  = 0xFFFFFFFFu;   \/\/\/< Generate all of them$/;"	m	namespace:boost::locale
all_characters	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t all_characters = 0xFFFF;     \/\/\/< Special mask -- generate all$/;"	m	namespace:boost::locale
am	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period am() { return date_time_period(am_pm(),0); }$/;"	f	namespace:boost::locale::period	signature:()
am_pm	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period am_pm(int v) { return date_time_period(am_pm(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
am_pm	/usr/include/boost/locale/date_time.hpp	/^            inline int am_pm(date_time const &dt) { return dt.get(am_pm()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
am_pm	/usr/include/boost/locale/date_time.hpp	/^            inline int am_pm(date_time_duration const &dt) { return dt.get(am_pm()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
am_pm	/usr/include/boost/locale/date_time.hpp	/^            inline period_type am_pm(){ return period_type(marks::am_pm); }$/;"	f	namespace:boost::locale::period	signature:()
am_pm	/usr/include/boost/locale/date_time_facet.hpp	/^                    am_pm,                      \/\/\/< am or pm marker [0..1]$/;"	e	enum:boost::locale::period::marks::period_mark
apply	/usr/include/boost/locale/formatting.hpp	/^                    void apply(std::basic_ios<CharType> &ios) const$/;"	f	struct:boost::locale::as::details::add_ftime	access:public	signature:(std::basic_ios<CharType> &ios) const
april	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period april() { return date_time_period(month(),3); }$/;"	f	namespace:boost::locale::period	signature:()
as	/usr/include/boost/locale/formatting.hpp	/^        namespace as {$/;"	n	namespace:boost::locale
as	/usr/include/boost/locale/message.hpp	/^        namespace as {$/;"	n	namespace:boost::locale
august	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period august() { return date_time_period(month(),7); }$/;"	f	namespace:boost::locale::period	signature:()
base_converter	/usr/include/boost/locale/util.hpp	/^    class base_converter {$/;"	c	namespace:boost::locale::util
base_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef BaseIterator base_iterator;$/;"	t	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public
base_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef BaseIterator base_iterator;$/;"	t	class:boost::locale::boundary::details::mapping	access:public
base_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef BaseIterator base_iterator;$/;"	t	class:boost::locale::boundary::details::segment_index_iterator	access:public
base_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef BaseIterator base_iterator;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
base_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef BaseIterator base_iterator;$/;"	t	class:boost::locale::boundary::segment_index	access:public
base_message_format	/usr/include/boost/locale/message.hpp	/^            base_message_format(size_t refs = 0) : std::locale::facet(refs)$/;"	f	struct:boost::locale::base_message_format	access:public	signature:(size_t refs = 0)
base_message_format	/usr/include/boost/locale/message.hpp	/^        struct BOOST_LOCALE_DECL base_message_format<char16_t> : public std::locale::facet $/;"	s	namespace:boost::locale	inherits:std::locale::facet
base_message_format	/usr/include/boost/locale/message.hpp	/^        struct BOOST_LOCALE_DECL base_message_format<char32_t> : public std::locale::facet $/;"	s	namespace:boost::locale	inherits:std::locale::facet
base_message_format	/usr/include/boost/locale/message.hpp	/^        struct BOOST_LOCALE_DECL base_message_format<char> : public std::locale::facet $/;"	s	namespace:boost::locale	inherits:std::locale::facet
base_message_format	/usr/include/boost/locale/message.hpp	/^        struct BOOST_LOCALE_DECL base_message_format<wchar_t> : public std::locale::facet $/;"	s	namespace:boost::locale	inherits:std::locale::facet
base_message_format	/usr/include/boost/locale/message.hpp	/^        struct base_message_format: public std::locale::facet$/;"	s	namespace:boost::locale	inherits:std::locale::facet
base_params_	/usr/include/boost/locale/format.hpp	/^            static unsigned const base_params_ = 8;$/;"	m	class:boost::locale::basic_format	access:private
basic_	/usr/include/boost/locale/date_time.hpp	/^            date_time_period basic_[4];$/;"	m	class:boost::locale::date_time_period_set	access:private
basic_format	/usr/include/boost/locale/format.hpp	/^            basic_format(basic_format const &other);$/;"	p	class:boost::locale::basic_format	access:private	signature:(basic_format const &other)
basic_format	/usr/include/boost/locale/format.hpp	/^            basic_format(message_type const &trans) : $/;"	f	class:boost::locale::basic_format	access:public	signature:(message_type const &trans)
basic_format	/usr/include/boost/locale/format.hpp	/^            basic_format(string_type format_string) : $/;"	f	class:boost::locale::basic_format	access:public	signature:(string_type format_string)
basic_format	/usr/include/boost/locale/format.hpp	/^        class basic_format {$/;"	c	namespace:boost::locale
basic_message	/usr/include/boost/locale/message.hpp	/^            basic_message() :$/;"	f	class:boost::locale::basic_message	access:public	signature:()
basic_message	/usr/include/boost/locale/message.hpp	/^            basic_message(basic_message const &other) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(basic_message const &other)
basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(char_type const *context,char_type const *id) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(char_type const *context,char_type const *id)
basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(char_type const *context,char_type const *single,char_type const *plural,int n) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(char_type const *context,char_type const *single,char_type const *plural,int n)
basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(char_type const *id) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(char_type const *id)
basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(char_type const *single,char_type const *plural,int n) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(char_type const *single,char_type const *plural,int n)
basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(string_type const &context,string_type const &id) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(string_type const &context,string_type const &id)
basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(string_type const &context,string_type const &single,string_type const &plural,int number) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(string_type const &context,string_type const &single,string_type const &plural,int number)
basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(string_type const &id) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(string_type const &id)
basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(string_type const &single,string_type const &plural,int number) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(string_type const &single,string_type const &plural,int number)
basic_message	/usr/include/boost/locale/message.hpp	/^        class basic_message {$/;"	c	namespace:boost::locale
begin	/usr/include/boost/locale/boundary/index.hpp	/^                    base_iterator begin() const$/;"	f	class:boost::locale::boundary::details::mapping	access:public	signature:() const
begin	/usr/include/boost/locale/boundary/index.hpp	/^                iterator begin() const$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:() const
begin	/usr/include/boost/locale/boundary/index.hpp	/^                iterator begin() const$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:() const
begin	/usr/include/boost/locale/boundary/segment.hpp	/^        IteratorType begin() const $/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
begin	/usr/include/boost/locale/boundary/segment.hpp	/^        void begin(iterator const &v)$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(iterator const &v)
begin_	/usr/include/boost/locale/boundary/index.hpp	/^                    base_iterator begin_,end_;$/;"	m	class:boost::locale::boundary::details::mapping	access:private
between	/usr/include/boost/locale/encoding.hpp	/^            std::string between(char const *begin,$/;"	p	namespace:boost::locale::conv	signature:(char const *begin, char const *end, std::string const &to_encoding, std::string const &from_encoding, method_type how=default_method)
between	/usr/include/boost/locale/encoding.hpp	/^            std::string between(char const *text,$/;"	f	namespace:boost::locale::conv	signature:(char const *text, std::string const &to_encoding, std::string const &from_encoding, method_type how=default_method)
between	/usr/include/boost/locale/encoding.hpp	/^            std::string between(std::string const &text,$/;"	f	namespace:boost::locale::conv	signature:(std::string const &text, std::string const &to_encoding, std::string const &from_encoding, method_type how=default_method)
boost	/usr/include/boost/locale/boundary/boundary_point.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/boundary/facets.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/boundary/index.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/boundary/segment.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/boundary/types.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/collator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/conversion.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/date_time.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/date_time_facet.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/encoding.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/encoding_errors.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/encoding_utf.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/format.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/formatting.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/generator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/gnu_gettext.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/hold_ptr.hpp	/^namespace boost { $/;"	n
boost	/usr/include/boost/locale/info.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/localization_backend.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/message.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/time_zone.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/utf.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/locale/util.hpp	/^namespace boost {$/;"	n
boost::locale	/usr/include/boost/locale/boundary/boundary_point.hpp	/^namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/boundary/facets.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/boundary/index.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/boundary/segment.hpp	/^namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/boundary/types.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/collator.hpp	/^namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/conversion.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/date_time.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/date_time_facet.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/encoding.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/encoding_errors.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/encoding_utf.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/format.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/formatting.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/generator.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/gnu_gettext.hpp	/^namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/hold_ptr.hpp	/^namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/info.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/localization_backend.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/message.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/time_zone.hpp	/^    namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/utf.hpp	/^namespace locale {$/;"	n	namespace:boost
boost::locale	/usr/include/boost/locale/util.hpp	/^namespace locale {$/;"	n	namespace:boost
boost::locale::abstract_calendar	/usr/include/boost/locale/date_time_facet.hpp	/^        class abstract_calendar {$/;"	c	namespace:boost::locale
boost::locale::abstract_calendar::absolute_maximum	/usr/include/boost/locale/date_time_facet.hpp	/^                absolute_maximum,   \/\/\/< Maximal value, for Gregorian day it would be 31.$/;"	e	enum:boost::locale::abstract_calendar::__anon4
boost::locale::abstract_calendar::absolute_minimum	/usr/include/boost/locale/date_time_facet.hpp	/^                absolute_minimum,   \/\/\/< Absolute possible minimum for the value, for example for day is 1$/;"	e	enum:boost::locale::abstract_calendar::__anon4
boost::locale::abstract_calendar::actual_maximum	/usr/include/boost/locale/date_time_facet.hpp	/^                actual_maximum,     \/\/\/< Actual maximum, for it can be 28, 29, 30, 31 for day according to current month$/;"	e	enum:boost::locale::abstract_calendar::__anon4
boost::locale::abstract_calendar::actual_minimum	/usr/include/boost/locale/date_time_facet.hpp	/^                actual_minimum,     \/\/\/< Actual minimal value for this period.$/;"	e	enum:boost::locale::abstract_calendar::__anon4
boost::locale::abstract_calendar::adjust_value	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void adjust_value(period::marks::period_mark p,update_type u,int difference) = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(period::marks::period_mark p,update_type u,int difference)
boost::locale::abstract_calendar::calendar_option_type	/usr/include/boost/locale/date_time_facet.hpp	/^            } calendar_option_type;$/;"	t	class:boost::locale::abstract_calendar	typeref:enum:boost::locale::abstract_calendar::__anon6	access:public
boost::locale::abstract_calendar::clone	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual abstract_calendar *clone() const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:() const
boost::locale::abstract_calendar::current	/usr/include/boost/locale/date_time_facet.hpp	/^                current,            \/\/\/< Current value of this period$/;"	e	enum:boost::locale::abstract_calendar::__anon4
boost::locale::abstract_calendar::difference	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual int difference(abstract_calendar const *other,period::marks::period_mark p) const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(abstract_calendar const *other,period::marks::period_mark p) const
boost::locale::abstract_calendar::get_option	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual int get_option(calendar_option_type opt) const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(calendar_option_type opt) const
boost::locale::abstract_calendar::get_time	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual posix_time get_time() const  = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:() const
boost::locale::abstract_calendar::get_timezone	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual std::string get_timezone() const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:() const
boost::locale::abstract_calendar::get_value	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual int get_value(period::marks::period_mark p,value_type v) const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(period::marks::period_mark p,value_type v) const
boost::locale::abstract_calendar::greatest_minimum	/usr/include/boost/locale/date_time_facet.hpp	/^                greatest_minimum,   \/\/\/< Maximal minimum value that can be for this period$/;"	e	enum:boost::locale::abstract_calendar::__anon4
boost::locale::abstract_calendar::is_dst	/usr/include/boost/locale/date_time_facet.hpp	/^                is_dst          \/\/\/< Check if the current time is in daylight time savings$/;"	e	enum:boost::locale::abstract_calendar::__anon6
boost::locale::abstract_calendar::is_gregorian	/usr/include/boost/locale/date_time_facet.hpp	/^                is_gregorian,   \/\/\/< Check if the calendar is Gregorian$/;"	e	enum:boost::locale::abstract_calendar::__anon6
boost::locale::abstract_calendar::least_maximum	/usr/include/boost/locale/date_time_facet.hpp	/^                least_maximum,      \/\/\/< The last maximal value for this period, For example for Gregorian calendar$/;"	e	enum:boost::locale::abstract_calendar::__anon4
boost::locale::abstract_calendar::move	/usr/include/boost/locale/date_time_facet.hpp	/^                move,   \/\/\/< Change the value up or down effecting others for example 1990-12-31 + 1 day = 1991-01-01$/;"	e	enum:boost::locale::abstract_calendar::__anon5
boost::locale::abstract_calendar::normalize	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void normalize() = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:()
boost::locale::abstract_calendar::roll	/usr/include/boost/locale/date_time_facet.hpp	/^                roll,   \/\/\/< Change the value up or down not effecting others for example 1990-12-31 + 1 day = 1990-12-01$/;"	e	enum:boost::locale::abstract_calendar::__anon5
boost::locale::abstract_calendar::same	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual bool same(abstract_calendar const *other) const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(abstract_calendar const *other) const
boost::locale::abstract_calendar::set_option	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void set_option(calendar_option_type opt,int v) = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(calendar_option_type opt,int v)
boost::locale::abstract_calendar::set_time	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void set_time(posix_time const &p)  = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(posix_time const &p)
boost::locale::abstract_calendar::set_timezone	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void set_timezone(std::string const &tz) = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(std::string const &tz)
boost::locale::abstract_calendar::set_value	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void set_value(period::marks::period_mark p,int value) = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(period::marks::period_mark p,int value)
boost::locale::abstract_calendar::update_type	/usr/include/boost/locale/date_time_facet.hpp	/^            } update_type;$/;"	t	class:boost::locale::abstract_calendar	typeref:enum:boost::locale::abstract_calendar::__anon5	access:public
boost::locale::abstract_calendar::value_type	/usr/include/boost/locale/date_time_facet.hpp	/^            } value_type;$/;"	t	class:boost::locale::abstract_calendar	typeref:enum:boost::locale::abstract_calendar::__anon4	access:public
boost::locale::abstract_calendar::~abstract_calendar	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual ~abstract_calendar()$/;"	f	class:boost::locale::abstract_calendar	access:public	signature:()
boost::locale::all_categories	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t    all_categories  = 0xFFFFFFFFu;   \/\/\/< Generate all of them$/;"	m	namespace:boost::locale
boost::locale::all_characters	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t all_characters = 0xFFFF;     \/\/\/< Special mask -- generate all$/;"	m	namespace:boost::locale
boost::locale::as	/usr/include/boost/locale/formatting.hpp	/^        namespace as {$/;"	n	namespace:boost::locale
boost::locale::as	/usr/include/boost/locale/message.hpp	/^        namespace as {$/;"	n	namespace:boost::locale
boost::locale::as::currency	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & currency(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::currency_default	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & currency_default(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::currency_iso	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & currency_iso(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::currency_national	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & currency_national(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::date	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::date_default	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date_default(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::date_full	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date_full(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::date_long	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date_long(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::date_medium	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date_medium(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::date_short	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date_short(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::datetime	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & datetime(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::details	/usr/include/boost/locale/formatting.hpp	/^            namespace details {$/;"	n	namespace:boost::locale::as
boost::locale::as::details	/usr/include/boost/locale/message.hpp	/^            namespace details {$/;"	n	namespace:boost::locale::as
boost::locale::as::details::add_ftime	/usr/include/boost/locale/formatting.hpp	/^                struct add_ftime {$/;"	s	namespace:boost::locale::as::details
boost::locale::as::details::add_ftime::apply	/usr/include/boost/locale/formatting.hpp	/^                    void apply(std::basic_ios<CharType> &ios) const$/;"	f	struct:boost::locale::as::details::add_ftime	access:public	signature:(std::basic_ios<CharType> &ios) const
boost::locale::as::details::add_ftime::ftime	/usr/include/boost/locale/formatting.hpp	/^                    std::basic_string<CharType> ftime;$/;"	m	struct:boost::locale::as::details::add_ftime	access:public
boost::locale::as::details::operator <<	/usr/include/boost/locale/formatting.hpp	/^                std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out,add_ftime<CharType> const &fmt)$/;"	f	namespace:boost::locale::as::details	signature:(std::basic_ostream<CharType> &out,add_ftime<CharType> const &fmt)
boost::locale::as::details::operator <<	/usr/include/boost/locale/formatting.hpp	/^                std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out,set_timezone const &fmt)$/;"	f	namespace:boost::locale::as::details	signature:(std::basic_ostream<CharType> &out,set_timezone const &fmt)
boost::locale::as::details::operator <<	/usr/include/boost/locale/message.hpp	/^                std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out, set_domain const &dom)$/;"	f	namespace:boost::locale::as::details	signature:(std::basic_ostream<CharType> &out, set_domain const &dom)
boost::locale::as::details::operator >>	/usr/include/boost/locale/formatting.hpp	/^                std::basic_istream<CharType> &operator>>(std::basic_istream<CharType> &in,add_ftime<CharType> const &fmt)$/;"	f	namespace:boost::locale::as::details	signature:(std::basic_istream<CharType> &in,add_ftime<CharType> const &fmt)
boost::locale::as::details::operator >>	/usr/include/boost/locale/formatting.hpp	/^                std::basic_istream<CharType> &operator>>(std::basic_istream<CharType> &in,set_timezone const &fmt)$/;"	f	namespace:boost::locale::as::details	signature:(std::basic_istream<CharType> &in,set_timezone const &fmt)
boost::locale::as::details::set_domain	/usr/include/boost/locale/message.hpp	/^                struct set_domain {$/;"	s	namespace:boost::locale::as::details
boost::locale::as::details::set_domain::domain_id	/usr/include/boost/locale/message.hpp	/^                    std::string domain_id;$/;"	m	struct:boost::locale::as::details::set_domain	access:public
boost::locale::as::details::set_timezone	/usr/include/boost/locale/formatting.hpp	/^                struct set_timezone {$/;"	s	namespace:boost::locale::as::details
boost::locale::as::details::set_timezone::id	/usr/include/boost/locale/formatting.hpp	/^                    std::string id;$/;"	m	struct:boost::locale::as::details::set_timezone	access:public
boost::locale::as::domain	/usr/include/boost/locale/message.hpp	/^            domain(std::string const &id)$/;"	f	namespace:boost::locale::as	signature:(std::string const &id)
boost::locale::as::ftime	/usr/include/boost/locale/formatting.hpp	/^            ftime(CharType const *format)$/;"	f	namespace:boost::locale::as	signature:(CharType const *format)
boost::locale::as::ftime	/usr/include/boost/locale/formatting.hpp	/^            ftime(std::basic_string<CharType> const &format)$/;"	f	namespace:boost::locale::as	signature:(std::basic_string<CharType> const &format)
boost::locale::as::gmt	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base &gmt(std::ios_base &ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base &ios)
boost::locale::as::local_time	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base &local_time(std::ios_base &ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base &ios)
boost::locale::as::number	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & number(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::ordinal	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & ordinal(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::percent	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & percent(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::posix	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & posix(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::spellout	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & spellout(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::strftime	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & strftime(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::time	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::time_default	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time_default(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::time_full	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time_full(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::time_long	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time_long(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::time_medium	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time_medium(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::time_short	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time_short(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
boost::locale::as::time_zone	/usr/include/boost/locale/formatting.hpp	/^            time_zone(char const *id) $/;"	f	namespace:boost::locale::as	signature:(char const *id)
boost::locale::as::time_zone	/usr/include/boost/locale/formatting.hpp	/^            time_zone(std::string const &id) $/;"	f	namespace:boost::locale::as	signature:(std::string const &id)
boost::locale::base_message_format	/usr/include/boost/locale/message.hpp	/^        struct BOOST_LOCALE_DECL base_message_format<char16_t> : public std::locale::facet $/;"	s	namespace:boost::locale	inherits:std::locale::facet
boost::locale::base_message_format	/usr/include/boost/locale/message.hpp	/^        struct BOOST_LOCALE_DECL base_message_format<char32_t> : public std::locale::facet $/;"	s	namespace:boost::locale	inherits:std::locale::facet
boost::locale::base_message_format	/usr/include/boost/locale/message.hpp	/^        struct BOOST_LOCALE_DECL base_message_format<char> : public std::locale::facet $/;"	s	namespace:boost::locale	inherits:std::locale::facet
boost::locale::base_message_format	/usr/include/boost/locale/message.hpp	/^        struct BOOST_LOCALE_DECL base_message_format<wchar_t> : public std::locale::facet $/;"	s	namespace:boost::locale	inherits:std::locale::facet
boost::locale::base_message_format	/usr/include/boost/locale/message.hpp	/^        struct base_message_format: public std::locale::facet$/;"	s	namespace:boost::locale	inherits:std::locale::facet
boost::locale::base_message_format::base_message_format	/usr/include/boost/locale/message.hpp	/^            base_message_format(size_t refs = 0) : std::locale::facet(refs)$/;"	f	struct:boost::locale::base_message_format	access:public	signature:(size_t refs = 0)
boost::locale::base_message_format::id	/usr/include/boost/locale/message.hpp	/^            static std::locale::id id;$/;"	m	struct:boost::locale::base_message_format	access:public
boost::locale::basic_format	/usr/include/boost/locale/format.hpp	/^        class basic_format {$/;"	c	namespace:boost::locale
boost::locale::basic_format::add	/usr/include/boost/locale/format.hpp	/^            void add(formattible_type const &param)$/;"	f	class:boost::locale::basic_format	access:private	signature:(formattible_type const &param)
boost::locale::basic_format::base_params_	/usr/include/boost/locale/format.hpp	/^            static unsigned const base_params_ = 8;$/;"	m	class:boost::locale::basic_format	access:private
boost::locale::basic_format::basic_format	/usr/include/boost/locale/format.hpp	/^            basic_format(basic_format const &other);$/;"	p	class:boost::locale::basic_format	access:private	signature:(basic_format const &other)
boost::locale::basic_format::basic_format	/usr/include/boost/locale/format.hpp	/^            basic_format(message_type const &trans) : $/;"	f	class:boost::locale::basic_format	access:public	signature:(message_type const &trans)
boost::locale::basic_format::basic_format	/usr/include/boost/locale/format.hpp	/^            basic_format(string_type format_string) : $/;"	f	class:boost::locale::basic_format	access:public	signature:(string_type format_string)
boost::locale::basic_format::char_type	/usr/include/boost/locale/format.hpp	/^            typedef CharType char_type; \/\/\/< Underlying character type$/;"	t	class:boost::locale::basic_format	access:public
boost::locale::basic_format::ext_params_	/usr/include/boost/locale/format.hpp	/^            std::vector<formattible_type> ext_params_;$/;"	m	class:boost::locale::basic_format	access:private
boost::locale::basic_format::format_	/usr/include/boost/locale/format.hpp	/^            string_type format_;$/;"	m	class:boost::locale::basic_format	access:private
boost::locale::basic_format::format_guard	/usr/include/boost/locale/format.hpp	/^            class format_guard {$/;"	c	class:boost::locale::basic_format	access:private
boost::locale::basic_format::format_guard::fmt_	/usr/include/boost/locale/format.hpp	/^                details::format_parser *fmt_;$/;"	m	class:boost::locale::basic_format::format_guard	access:private
boost::locale::basic_format::format_guard::format_guard	/usr/include/boost/locale/format.hpp	/^                format_guard(details::format_parser &fmt) : $/;"	f	class:boost::locale::basic_format::format_guard	access:public	signature:(details::format_parser &fmt)
boost::locale::basic_format::format_guard::restore	/usr/include/boost/locale/format.hpp	/^                void restore()$/;"	f	class:boost::locale::basic_format::format_guard	access:public	signature:()
boost::locale::basic_format::format_guard::restored_	/usr/include/boost/locale/format.hpp	/^                bool restored_;$/;"	m	class:boost::locale::basic_format::format_guard	access:private
boost::locale::basic_format::format_guard::~format_guard	/usr/include/boost/locale/format.hpp	/^                ~format_guard()$/;"	f	class:boost::locale::basic_format::format_guard	access:public	signature:()
boost::locale::basic_format::format_output	/usr/include/boost/locale/format.hpp	/^            void format_output(stream_type &out,string_type const &sformat) const$/;"	f	class:boost::locale::basic_format	access:private	signature:(stream_type &out,string_type const &sformat) const
boost::locale::basic_format::formattible_type	/usr/include/boost/locale/format.hpp	/^            typedef details::formattible<CharType> formattible_type; $/;"	t	class:boost::locale::basic_format	access:public
boost::locale::basic_format::get	/usr/include/boost/locale/format.hpp	/^            formattible_type get(unsigned id) const$/;"	f	class:boost::locale::basic_format	access:private	signature:(unsigned id) const
boost::locale::basic_format::imbue_locale	/usr/include/boost/locale/format.hpp	/^            static void imbue_locale(void *ptr,std::locale const &l)$/;"	f	class:boost::locale::basic_format	access:private	signature:(void *ptr,std::locale const &l)
boost::locale::basic_format::message_	/usr/include/boost/locale/format.hpp	/^            message_type message_;$/;"	m	class:boost::locale::basic_format	access:private
boost::locale::basic_format::message_type	/usr/include/boost/locale/format.hpp	/^            typedef basic_message<char_type> message_type; \/\/\/< The translation message type$/;"	t	class:boost::locale::basic_format	access:public
boost::locale::basic_format::operator %	/usr/include/boost/locale/format.hpp	/^            basic_format &operator % (Formattible const &object)$/;"	f	class:boost::locale::basic_format	access:public	signature:(Formattible const &object)
boost::locale::basic_format::operator =	/usr/include/boost/locale/format.hpp	/^            void operator=(basic_format const &other);$/;"	p	class:boost::locale::basic_format	access:private	signature:(basic_format const &other)
boost::locale::basic_format::parameters_	/usr/include/boost/locale/format.hpp	/^            formattible_type parameters_[base_params_];$/;"	m	class:boost::locale::basic_format	access:private
boost::locale::basic_format::parameters_count_	/usr/include/boost/locale/format.hpp	/^            unsigned parameters_count_;$/;"	m	class:boost::locale::basic_format	access:private
boost::locale::basic_format::str	/usr/include/boost/locale/format.hpp	/^            string_type str(std::locale const &loc = std::locale()) const$/;"	f	class:boost::locale::basic_format	access:public	signature:(std::locale const &loc = std::locale()) const
boost::locale::basic_format::stream_type	/usr/include/boost/locale/format.hpp	/^            typedef std::basic_ostream<CharType> stream_type; \/\/\/< output stream type for this type of character$/;"	t	class:boost::locale::basic_format	access:public
boost::locale::basic_format::string_type	/usr/include/boost/locale/format.hpp	/^            typedef std::basic_string<CharType> string_type; \/\/\/< string type for this type of character$/;"	t	class:boost::locale::basic_format	access:public
boost::locale::basic_format::translate_	/usr/include/boost/locale/format.hpp	/^            bool translate_;$/;"	m	class:boost::locale::basic_format	access:private
boost::locale::basic_format::write	/usr/include/boost/locale/format.hpp	/^            void write(stream_type &out) const$/;"	f	class:boost::locale::basic_format	access:public	signature:(stream_type &out) const
boost::locale::basic_message	/usr/include/boost/locale/message.hpp	/^        class basic_message {$/;"	c	namespace:boost::locale
boost::locale::basic_message::basic_message	/usr/include/boost/locale/message.hpp	/^            basic_message() :$/;"	f	class:boost::locale::basic_message	access:public	signature:()
boost::locale::basic_message::basic_message	/usr/include/boost/locale/message.hpp	/^            basic_message(basic_message const &other) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(basic_message const &other)
boost::locale::basic_message::basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(char_type const *context,char_type const *id) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(char_type const *context,char_type const *id)
boost::locale::basic_message::basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(char_type const *context,char_type const *single,char_type const *plural,int n) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(char_type const *context,char_type const *single,char_type const *plural,int n)
boost::locale::basic_message::basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(char_type const *id) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(char_type const *id)
boost::locale::basic_message::basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(char_type const *single,char_type const *plural,int n) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(char_type const *single,char_type const *plural,int n)
boost::locale::basic_message::basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(string_type const &context,string_type const &id) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(string_type const &context,string_type const &id)
boost::locale::basic_message::basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(string_type const &context,string_type const &single,string_type const &plural,int number) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(string_type const &context,string_type const &single,string_type const &plural,int number)
boost::locale::basic_message::basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(string_type const &id) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(string_type const &id)
boost::locale::basic_message::basic_message	/usr/include/boost/locale/message.hpp	/^            explicit basic_message(string_type const &single,string_type const &plural,int number) :$/;"	f	class:boost::locale::basic_message	access:public	signature:(string_type const &single,string_type const &plural,int number)
boost::locale::basic_message::c_context_	/usr/include/boost/locale/message.hpp	/^            char_type const *c_context_;$/;"	m	class:boost::locale::basic_message	access:private
boost::locale::basic_message::c_id_	/usr/include/boost/locale/message.hpp	/^            char_type const *c_id_;$/;"	m	class:boost::locale::basic_message	access:private
boost::locale::basic_message::c_plural_	/usr/include/boost/locale/message.hpp	/^            char_type const *c_plural_;$/;"	m	class:boost::locale::basic_message	access:private
boost::locale::basic_message::char_type	/usr/include/boost/locale/message.hpp	/^            typedef CharType char_type; \/\/\/< The character this message object is used with$/;"	t	class:boost::locale::basic_message	access:public
boost::locale::basic_message::context	/usr/include/boost/locale/message.hpp	/^            char_type const *context() const$/;"	f	class:boost::locale::basic_message	access:private	signature:() const
boost::locale::basic_message::context_	/usr/include/boost/locale/message.hpp	/^            string_type context_;$/;"	m	class:boost::locale::basic_message	access:private
boost::locale::basic_message::facet_type	/usr/include/boost/locale/message.hpp	/^            typedef message_format<char_type> facet_type;   \/\/\/< The type of the facet the messages are fetched with$/;"	t	class:boost::locale::basic_message	access:public
boost::locale::basic_message::id	/usr/include/boost/locale/message.hpp	/^            char_type const *id() const$/;"	f	class:boost::locale::basic_message	access:private	signature:() const
boost::locale::basic_message::id_	/usr/include/boost/locale/message.hpp	/^            string_type id_;$/;"	m	class:boost::locale::basic_message	access:private
boost::locale::basic_message::n_	/usr/include/boost/locale/message.hpp	/^            int n_;$/;"	m	class:boost::locale::basic_message	access:private
boost::locale::basic_message::operator =	/usr/include/boost/locale/message.hpp	/^            basic_message const &operator=(basic_message const &other)$/;"	f	class:boost::locale::basic_message	access:public	signature:(basic_message const &other)
boost::locale::basic_message::operator string_type	/usr/include/boost/locale/message.hpp	/^            operator string_type () const$/;"	f	class:boost::locale::basic_message	access:public	signature:() const
boost::locale::basic_message::plural	/usr/include/boost/locale/message.hpp	/^            char_type const *plural() const$/;"	f	class:boost::locale::basic_message	access:private	signature:() const
boost::locale::basic_message::plural_	/usr/include/boost/locale/message.hpp	/^            string_type plural_;$/;"	m	class:boost::locale::basic_message	access:private
boost::locale::basic_message::str	/usr/include/boost/locale/message.hpp	/^            string_type str() const$/;"	f	class:boost::locale::basic_message	access:public	signature:() const
boost::locale::basic_message::str	/usr/include/boost/locale/message.hpp	/^            string_type str(std::locale const &loc,int id) const$/;"	f	class:boost::locale::basic_message	access:public	signature:(std::locale const &loc,int id) const
boost::locale::basic_message::str	/usr/include/boost/locale/message.hpp	/^            string_type str(std::locale const &locale) const$/;"	f	class:boost::locale::basic_message	access:public	signature:(std::locale const &locale) const
boost::locale::basic_message::str	/usr/include/boost/locale/message.hpp	/^            string_type str(std::locale const &locale,std::string const &domain_id) const$/;"	f	class:boost::locale::basic_message	access:public	signature:(std::locale const &locale,std::string const &domain_id) const
boost::locale::basic_message::str	/usr/include/boost/locale/message.hpp	/^            string_type str(std::string const &domain_id) const$/;"	f	class:boost::locale::basic_message	access:public	signature:(std::string const &domain_id) const
boost::locale::basic_message::string_type	/usr/include/boost/locale/message.hpp	/^            typedef std::basic_string<char_type> string_type;   \/\/\/< The string type this object can be used with$/;"	t	class:boost::locale::basic_message	access:public
boost::locale::basic_message::swap	/usr/include/boost/locale/message.hpp	/^            void swap(basic_message &other)$/;"	f	class:boost::locale::basic_message	access:public	signature:(basic_message &other)
boost::locale::basic_message::write	/usr/include/boost/locale/message.hpp	/^            char_type const *write(std::locale const &loc,int domain_id,string_type &buffer) const$/;"	f	class:boost::locale::basic_message	access:private	signature:(std::locale const &loc,int domain_id,string_type &buffer) const
boost::locale::basic_message::write	/usr/include/boost/locale/message.hpp	/^            void write(std::basic_ostream<char_type> &out) const$/;"	f	class:boost::locale::basic_message	access:public	signature:(std::basic_ostream<char_type> &out) const
boost::locale::boundary	/usr/include/boost/locale/boundary/boundary_point.hpp	/^namespace boundary {$/;"	n	namespace:boost::locale
boost::locale::boundary	/usr/include/boost/locale/boundary/facets.hpp	/^        namespace boundary {$/;"	n	namespace:boost::locale
boost::locale::boundary	/usr/include/boost/locale/boundary/index.hpp	/^        namespace boundary {$/;"	n	namespace:boost::locale
boost::locale::boundary	/usr/include/boost/locale/boundary/segment.hpp	/^namespace boundary {$/;"	n	namespace:boost::locale
boost::locale::boundary	/usr/include/boost/locale/boundary/types.hpp	/^        namespace boundary {$/;"	n	namespace:boost::locale
boost::locale::boundary::boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^            class BOOST_LOCALE_DECL boundary_indexing : public std::locale::facet {$/;"	c	namespace:boost::locale::boundary	inherits:std::locale::facet
boost::locale::boundary::boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^            class BOOST_LOCALE_DECL boundary_indexing<char16_t> : public std::locale::facet {$/;"	c	namespace:boost::locale::boundary	inherits:std::locale::facet
boost::locale::boundary::boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^            class BOOST_LOCALE_DECL boundary_indexing<char32_t> : public std::locale::facet {$/;"	c	namespace:boost::locale::boundary	inherits:std::locale::facet
boost::locale::boundary::boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^            class BOOST_LOCALE_DECL boundary_indexing<char> : public std::locale::facet {$/;"	c	namespace:boost::locale::boundary	inherits:std::locale::facet
boost::locale::boundary::boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^            class BOOST_LOCALE_DECL boundary_indexing<wchar_t> : public std::locale::facet {$/;"	c	namespace:boost::locale::boundary	inherits:std::locale::facet
boost::locale::boundary::boundary_indexing::__get_id	/usr/include/boost/locale/boundary/facets.hpp	/^                std::locale::id& __get_id (void) const { return id; }$/;"	f	class:boost::locale::boundary::boundary_indexing	access:public	signature:(void) const
boost::locale::boundary::boundary_indexing::boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^                boundary_indexing(size_t refs=0) : std::locale::facet(refs)$/;"	f	class:boost::locale::boundary::boundary_indexing	access:public	signature:(size_t refs=0)
boost::locale::boundary::boundary_indexing::id	/usr/include/boost/locale/boundary/facets.hpp	/^                static std::locale::id id;$/;"	m	class:boost::locale::boundary::boundary_indexing	access:public
boost::locale::boundary::boundary_indexing::map	/usr/include/boost/locale/boundary/facets.hpp	/^                virtual index_type map(boundary_type t,Char const *begin,Char const *end) const = 0;$/;"	p	class:boost::locale::boundary::boundary_indexing	access:public	signature:(boundary_type t,Char const *begin,Char const *end) const
boost::locale::boundary::boundary_indexing::map	/usr/include/boost/locale/boundary/facets.hpp	/^                virtual index_type map(boundary_type t,char const *begin,char const *end) const = 0;$/;"	p	class:boost::locale::boundary::boundary_indexing	access:public	signature:(boundary_type t,char const *begin,char const *end) const
boost::locale::boundary::boundary_indexing::map	/usr/include/boost/locale/boundary/facets.hpp	/^                virtual index_type map(boundary_type t,char16_t const *begin,char16_t const *end) const = 0;$/;"	p	class:boost::locale::boundary::boundary_indexing	access:public	signature:(boundary_type t,char16_t const *begin,char16_t const *end) const
boost::locale::boundary::boundary_indexing::map	/usr/include/boost/locale/boundary/facets.hpp	/^                virtual index_type map(boundary_type t,char32_t const *begin,char32_t const *end) const = 0;$/;"	p	class:boost::locale::boundary::boundary_indexing	access:public	signature:(boundary_type t,char32_t const *begin,char32_t const *end) const
boost::locale::boundary::boundary_indexing::map	/usr/include/boost/locale/boundary/facets.hpp	/^                virtual index_type map(boundary_type t,wchar_t const *begin,wchar_t const *end) const = 0;$/;"	p	class:boost::locale::boundary::boundary_indexing	access:public	signature:(boundary_type t,wchar_t const *begin,wchar_t const *end) const
boost::locale::boundary::boundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    class boundary_point  {$/;"	c	namespace:boost::locale::boundary
boost::locale::boundary::boundary_point::boundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        boundary_point() : rule_(0) {}$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:()
boost::locale::boundary::boundary_point::boundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        boundary_point(iterator_type p,rule_type r) :$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(iterator_type p,rule_type r)
boost::locale::boundary::boundary_point::iterator	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        iterator_type iterator() const $/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:() const
boost::locale::boundary::boundary_point::iterator	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        void iterator(iterator_type i)$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(iterator_type i)
boost::locale::boundary::boundary_point::iterator_	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        iterator_type iterator_;$/;"	m	class:boost::locale::boundary::boundary_point	access:private
boost::locale::boundary::boundary_point::iterator_type	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        typedef IteratorType iterator_type;$/;"	t	class:boost::locale::boundary::boundary_point	access:public
boost::locale::boundary::boundary_point::operator !=	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        bool operator!=(boundary_point const &other) const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(boundary_point const &other) const
boost::locale::boundary::boundary_point::operator !=	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        bool operator!=(iterator_type const &other) const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(iterator_type const &other) const
boost::locale::boundary::boundary_point::operator ==	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        bool operator==(boundary_point const &other) const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(boundary_point const &other) const
boost::locale::boundary::boundary_point::operator ==	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        bool operator==(iterator_type const &other) const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(iterator_type const &other) const
boost::locale::boundary::boundary_point::operator iterator_type	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        operator iterator_type ()const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:() const
boost::locale::boundary::boundary_point::rule	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        rule_type rule() const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:() const
boost::locale::boundary::boundary_point::rule	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        void rule(rule_type r)$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(rule_type r)
boost::locale::boundary::boundary_point::rule_	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        rule_type rule_;$/;"	m	class:boost::locale::boundary::boundary_point	access:private
boost::locale::boundary::boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            class boundary_point_index {$/;"	c	namespace:boost::locale::boundary
boost::locale::boundary::boundary_point_index::base_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef BaseIterator base_iterator;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
boost::locale::boundary::boundary_point_index::begin	/usr/include/boost/locale/boundary/index.hpp	/^                iterator begin() const$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:() const
boost::locale::boundary::boundary_point_index::boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^                boundary_point_index() : mask_(0xFFFFFFFFu)$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:()
boost::locale::boundary::boundary_point_index::boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^                boundary_point_index(boundary_type type,$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:(boundary_type type, base_iterator begin, base_iterator end, rule_type mask, std::locale const &loc=std::locale())
boost::locale::boundary::boundary_point_index::boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^                boundary_point_index(boundary_type type,$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:(boundary_type type, base_iterator begin, base_iterator end, std::locale const &loc=std::locale())
boost::locale::boundary::boundary_point_index::boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^                boundary_point_index(segment_index<base_iterator> const &other);$/;"	p	class:boost::locale::boundary::boundary_point_index	access:public	signature:(segment_index<base_iterator> const &other)
boost::locale::boundary::boundary_point_index::boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            boundary_point_index<BaseIterator>::boundary_point_index(segment_index<BaseIterator> const &other) :$/;"	f	class:boost::locale::boundary::boundary_point_index	signature:(segment_index<BaseIterator> const &other)
boost::locale::boundary::boundary_point_index::const_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::boundary_point_index_iterator<base_iterator> const_iterator;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
boost::locale::boundary::boundary_point_index::const_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef unspecified_iterator_type const_iterator;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
boost::locale::boundary::boundary_point_index::end	/usr/include/boost/locale/boundary/index.hpp	/^                iterator end() const$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:() const
boost::locale::boundary::boundary_point_index::find	/usr/include/boost/locale/boundary/index.hpp	/^                iterator find(base_iterator p) const$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:(base_iterator p) const
boost::locale::boundary::boundary_point_index::iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::boundary_point_index_iterator<base_iterator> iterator;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
boost::locale::boundary::boundary_point_index::iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef unspecified_iterator_type iterator;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
boost::locale::boundary::boundary_point_index::map	/usr/include/boost/locale/boundary/index.hpp	/^                void map(boundary_type type,base_iterator begin,base_iterator end,std::locale const &loc=std::locale())$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:(boundary_type type,base_iterator begin,base_iterator end,std::locale const &loc=std::locale())
boost::locale::boundary::boundary_point_index::map_	/usr/include/boost/locale/boundary/index.hpp	/^                mapping_type  map_;$/;"	m	class:boost::locale::boundary::boundary_point_index	access:private
boost::locale::boundary::boundary_point_index::mapping_type	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::mapping<base_iterator> mapping_type;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:private
boost::locale::boundary::boundary_point_index::mask_	/usr/include/boost/locale/boundary/index.hpp	/^                rule_type mask_;$/;"	m	class:boost::locale::boundary::boundary_point_index	access:private
boost::locale::boundary::boundary_point_index::operator =	/usr/include/boost/locale/boundary/index.hpp	/^                boundary_point_index const &operator=(segment_index<base_iterator> const &other);$/;"	p	class:boost::locale::boundary::boundary_point_index	access:public	signature:(segment_index<base_iterator> const &other)
boost::locale::boundary::boundary_point_index::operator =	/usr/include/boost/locale/boundary/index.hpp	/^            boundary_point_index<BaseIterator> const &boundary_point_index<BaseIterator>::operator=(segment_index<BaseIterator> const &other)$/;"	f	class:boost::locale::boundary::boundary_point_index	signature:(segment_index<BaseIterator> const &other)
boost::locale::boundary::boundary_point_index::rule	/usr/include/boost/locale/boundary/index.hpp	/^                rule_type rule() const$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:() const
boost::locale::boundary::boundary_point_index::rule	/usr/include/boost/locale/boundary/index.hpp	/^                void rule(rule_type v)$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:(rule_type v)
boost::locale::boundary::boundary_point_index::value_type	/usr/include/boost/locale/boundary/index.hpp	/^                typedef boundary_point<base_iterator> value_type;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
boost::locale::boundary::boundary_rule	/usr/include/boost/locale/boundary/types.hpp	/^            inline rule_type boundary_rule(boundary_type t)$/;"	f	namespace:boost::locale::boundary	signature:(boundary_type t)
boost::locale::boundary::boundary_type	/usr/include/boost/locale/boundary/types.hpp	/^            enum boundary_type {$/;"	g	namespace:boost::locale::boundary
boost::locale::boundary::break_info	/usr/include/boost/locale/boundary/facets.hpp	/^            struct break_info {$/;"	s	namespace:boost::locale::boundary
boost::locale::boundary::break_info::break_info	/usr/include/boost/locale/boundary/facets.hpp	/^                break_info() : $/;"	f	struct:boost::locale::boundary::break_info	access:public	signature:()
boost::locale::boundary::break_info::break_info	/usr/include/boost/locale/boundary/facets.hpp	/^                break_info(size_t v) :$/;"	f	struct:boost::locale::boundary::break_info	access:public	signature:(size_t v)
boost::locale::boundary::break_info::offset	/usr/include/boost/locale/boundary/facets.hpp	/^                size_t offset;$/;"	m	struct:boost::locale::boundary::break_info	access:public
boost::locale::boundary::break_info::operator <	/usr/include/boost/locale/boundary/facets.hpp	/^                bool operator<(break_info const &other) const$/;"	f	struct:boost::locale::boundary::break_info	access:public	signature:(break_info const &other) const
boost::locale::boundary::break_info::rule	/usr/include/boost/locale/boundary/facets.hpp	/^                rule_type rule;$/;"	m	struct:boost::locale::boundary::break_info	access:public
boost::locale::boundary::cboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<char const *> cboundary_point;                     \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::cboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<char const *> cboundary_point_index;       \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::character	/usr/include/boost/locale/boundary/types.hpp	/^                character,  \/\/\/< Analyse the text for character boundaries$/;"	e	enum:boost::locale::boundary::boundary_type
boost::locale::boundary::character_any	/usr/include/boost/locale/boundary/types.hpp	/^                character_any   =  0xF,     \/\/\/< Not in use, just for consistency$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::character_mask	/usr/include/boost/locale/boundary/types.hpp	/^                character_mask  =  0xF;     \/\/\/< Select all character breaking points$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::csegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<char const *> csegment;                     \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::csegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<char const *> csegment_index;                     \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::details	/usr/include/boost/locale/boundary/index.hpp	/^            namespace details {$/;"	n	namespace:boost::locale::boundary
boost::locale::boundary::details	/usr/include/boost/locale/boundary/segment.hpp	/^    namespace details {$/;"	n	namespace:boost::locale::boundary
boost::locale::boundary::details::boundary_point_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                class boundary_point_index_iterator : $/;"	c	namespace:boost::locale::boundary::details	inherits:boost::iterator_facade
boost::locale::boundary::details::boundary_point_index_iterator::base_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef BaseIterator base_iterator;$/;"	t	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public
boost::locale::boundary::details::boundary_point_index_iterator::boundary_point_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    boundary_point_index_iterator() : current_(0),map_(0)$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:()
boost::locale::boundary::details::boundary_point_index_iterator::boundary_point_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    boundary_point_index_iterator(base_iterator p,mapping_type const *map,rule_type mask) :$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:(base_iterator p,mapping_type const *map,rule_type mask)
boost::locale::boundary::details::boundary_point_index_iterator::boundary_point_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    boundary_point_index_iterator(bool is_begin,mapping_type const *map,rule_type mask) :$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:(bool is_begin,mapping_type const *map,rule_type mask)
boost::locale::boundary::details::boundary_point_index_iterator::boundary_point_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef boundary_point<base_iterator> boundary_point_type;$/;"	t	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public
boost::locale::boundary::details::boundary_point_index_iterator::current_	/usr/include/boost/locale/boundary/index.hpp	/^                    size_t current_;$/;"	m	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private
boost::locale::boundary::details::boundary_point_index_iterator::decrement	/usr/include/boost/locale/boundary/index.hpp	/^                    void decrement()$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:()
boost::locale::boundary::details::boundary_point_index_iterator::dereference	/usr/include/boost/locale/boundary/index.hpp	/^                    boundary_point_type const &dereference() const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:() const
boost::locale::boundary::details::boundary_point_index_iterator::equal	/usr/include/boost/locale/boundary/index.hpp	/^                    bool equal(boundary_point_index_iterator const &other) const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:(boundary_point_index_iterator const &other) const
boost::locale::boundary::details::boundary_point_index_iterator::get_offset	/usr/include/boost/locale/boundary/index.hpp	/^                    size_t get_offset(size_t ind) const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:(size_t ind) const
boost::locale::boundary::details::boundary_point_index_iterator::increment	/usr/include/boost/locale/boundary/index.hpp	/^                    void increment()$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:()
boost::locale::boundary::details::boundary_point_index_iterator::index	/usr/include/boost/locale/boundary/index.hpp	/^                    index_type const &index() const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:() const
boost::locale::boundary::details::boundary_point_index_iterator::map_	/usr/include/boost/locale/boundary/index.hpp	/^                    mapping_type const *map_;$/;"	m	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private
boost::locale::boundary::details::boundary_point_index_iterator::mapping_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef mapping<base_iterator> mapping_type;$/;"	t	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public
boost::locale::boundary::details::boundary_point_index_iterator::mask_	/usr/include/boost/locale/boundary/index.hpp	/^                    rule_type mask_;$/;"	m	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private
boost::locale::boundary::details::boundary_point_index_iterator::set	/usr/include/boost/locale/boundary/index.hpp	/^                    void set(base_iterator p)$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:(base_iterator p)
boost::locale::boundary::details::boundary_point_index_iterator::set_begin	/usr/include/boost/locale/boundary/index.hpp	/^                    void set_begin()$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:()
boost::locale::boundary::details::boundary_point_index_iterator::set_end	/usr/include/boost/locale/boundary/index.hpp	/^                    void set_end()$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:()
boost::locale::boundary::details::boundary_point_index_iterator::size	/usr/include/boost/locale/boundary/index.hpp	/^                    size_t size() const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:() const
boost::locale::boundary::details::boundary_point_index_iterator::update_current	/usr/include/boost/locale/boundary/index.hpp	/^                    void update_current(size_t pos)$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:(size_t pos)
boost::locale::boundary::details::boundary_point_index_iterator::update_rule	/usr/include/boost/locale/boundary/index.hpp	/^                    void update_rule()$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:()
boost::locale::boundary::details::boundary_point_index_iterator::valid_offset	/usr/include/boost/locale/boundary/index.hpp	/^                    bool valid_offset(size_t offset) const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:(size_t offset) const
boost::locale::boundary::details::boundary_point_index_iterator::value_	/usr/include/boost/locale/boundary/index.hpp	/^                    boundary_point_type value_;$/;"	m	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private
boost::locale::boundary::details::compare_string	/usr/include/boost/locale/boundary/segment.hpp	/^        int compare_string(Char const *begin,Right const &r)$/;"	f	namespace:boost::locale::boundary::details	signature:(Char const *begin,Right const &r)
boost::locale::boundary::details::compare_string	/usr/include/boost/locale/boundary/segment.hpp	/^        int compare_string(Left const &l,Char const *begin)$/;"	f	namespace:boost::locale::boundary::details	signature:(Left const &l,Char const *begin)
boost::locale::boundary::details::compare_text	/usr/include/boost/locale/boundary/segment.hpp	/^        int compare_text(Left const &l,Right const &r)$/;"	f	namespace:boost::locale::boundary::details	signature:(Left const &l,Right const &r)
boost::locale::boundary::details::compare_text	/usr/include/boost/locale/boundary/segment.hpp	/^        int compare_text(LeftIterator l_begin,LeftIterator l_end,RightIterator r_begin,RightIterator r_end)$/;"	f	namespace:boost::locale::boundary::details	signature:(LeftIterator l_begin,LeftIterator l_end,RightIterator r_begin,RightIterator r_end)
boost::locale::boundary::details::linear_iterator_traits	/usr/include/boost/locale/boundary/index.hpp	/^                struct linear_iterator_traits {$/;"	s	namespace:boost::locale::boundary::details
boost::locale::boundary::details::linear_iterator_traits::is_linear	/usr/include/boost/locale/boundary/index.hpp	/^                    static const bool is_linear =$/;"	m	struct:boost::locale::boundary::details::linear_iterator_traits	access:public
boost::locale::boundary::details::mapping	/usr/include/boost/locale/boundary/index.hpp	/^                class mapping {$/;"	c	namespace:boost::locale::boundary::details
boost::locale::boundary::details::mapping::base_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef BaseIterator base_iterator;$/;"	t	class:boost::locale::boundary::details::mapping	access:public
boost::locale::boundary::details::mapping::begin	/usr/include/boost/locale/boundary/index.hpp	/^                    base_iterator begin() const$/;"	f	class:boost::locale::boundary::details::mapping	access:public	signature:() const
boost::locale::boundary::details::mapping::begin_	/usr/include/boost/locale/boundary/index.hpp	/^                    base_iterator begin_,end_;$/;"	m	class:boost::locale::boundary::details::mapping	access:private
boost::locale::boundary::details::mapping::char_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef typename std::iterator_traits<base_iterator>::value_type char_type;$/;"	t	class:boost::locale::boundary::details::mapping	access:public
boost::locale::boundary::details::mapping::end	/usr/include/boost/locale/boundary/index.hpp	/^                    base_iterator end() const$/;"	f	class:boost::locale::boundary::details::mapping	access:public	signature:() const
boost::locale::boundary::details::mapping::end_	/usr/include/boost/locale/boundary/index.hpp	/^                    base_iterator begin_,end_;$/;"	m	class:boost::locale::boundary::details::mapping	access:private
boost::locale::boundary::details::mapping::index	/usr/include/boost/locale/boundary/index.hpp	/^                    index_type const &index() const$/;"	f	class:boost::locale::boundary::details::mapping	access:public	signature:() const
boost::locale::boundary::details::mapping::index_	/usr/include/boost/locale/boundary/index.hpp	/^                    boost::shared_ptr<index_type> index_;$/;"	m	class:boost::locale::boundary::details::mapping	access:private
boost::locale::boundary::details::mapping::mapping	/usr/include/boost/locale/boundary/index.hpp	/^                    mapping()$/;"	f	class:boost::locale::boundary::details::mapping	access:public	signature:()
boost::locale::boundary::details::mapping::mapping	/usr/include/boost/locale/boundary/index.hpp	/^                    mapping(boundary_type type,$/;"	f	class:boost::locale::boundary::details::mapping	access:public	signature:(boundary_type type, base_iterator begin, base_iterator end, std::locale const &loc)
boost::locale::boundary::details::mapping_traits	/usr/include/boost/locale/boundary/index.hpp	/^                struct mapping_traits {$/;"	s	namespace:boost::locale::boundary::details
boost::locale::boundary::details::mapping_traits	/usr/include/boost/locale/boundary/index.hpp	/^                struct mapping_traits<IteratorType,std::random_access_iterator_tag> {$/;"	s	namespace:boost::locale::boundary::details
boost::locale::boundary::details::mapping_traits::char_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef typename std::iterator_traits<IteratorType>::value_type char_type;$/;"	t	struct:boost::locale::boundary::details::mapping_traits	access:public
boost::locale::boundary::details::mapping_traits::map	/usr/include/boost/locale/boundary/index.hpp	/^                    static index_type map(boundary_type t,IteratorType b,IteratorType e,std::locale const &l)$/;"	f	struct:boost::locale::boundary::details::mapping_traits	access:public	signature:(boundary_type t,IteratorType b,IteratorType e,std::locale const &l)
boost::locale::boundary::details::segment_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                class segment_index_iterator : $/;"	c	namespace:boost::locale::boundary::details	inherits:boost::iterator_facade
boost::locale::boundary::details::segment_index_iterator::base_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef BaseIterator base_iterator;$/;"	t	class:boost::locale::boundary::details::segment_index_iterator	access:public
boost::locale::boundary::details::segment_index_iterator::current_	/usr/include/boost/locale/boundary/index.hpp	/^                    std::pair<size_t,size_t> current_;$/;"	m	class:boost::locale::boundary::details::segment_index_iterator	access:private
boost::locale::boundary::details::segment_index_iterator::decrement	/usr/include/boost/locale/boundary/index.hpp	/^                    void decrement()$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:()
boost::locale::boundary::details::segment_index_iterator::dereference	/usr/include/boost/locale/boundary/index.hpp	/^                    segment_type const &dereference() const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:() const
boost::locale::boundary::details::segment_index_iterator::equal	/usr/include/boost/locale/boundary/index.hpp	/^                    bool equal(segment_index_iterator const &other) const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:(segment_index_iterator const &other) const
boost::locale::boundary::details::segment_index_iterator::full_select_	/usr/include/boost/locale/boundary/index.hpp	/^                    bool full_select_;$/;"	m	class:boost::locale::boundary::details::segment_index_iterator	access:private
boost::locale::boundary::details::segment_index_iterator::get_offset	/usr/include/boost/locale/boundary/index.hpp	/^                    size_t get_offset(size_t ind) const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:(size_t ind) const
boost::locale::boundary::details::segment_index_iterator::increment	/usr/include/boost/locale/boundary/index.hpp	/^                    void increment()$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:()
boost::locale::boundary::details::segment_index_iterator::index	/usr/include/boost/locale/boundary/index.hpp	/^                    index_type const &index() const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:() const
boost::locale::boundary::details::segment_index_iterator::map_	/usr/include/boost/locale/boundary/index.hpp	/^                    mapping_type const *map_;$/;"	m	class:boost::locale::boundary::details::segment_index_iterator	access:private
boost::locale::boundary::details::segment_index_iterator::mapping_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef mapping<base_iterator> mapping_type;$/;"	t	class:boost::locale::boundary::details::segment_index_iterator	access:public
boost::locale::boundary::details::segment_index_iterator::mask_	/usr/include/boost/locale/boundary/index.hpp	/^                    rule_type mask_;$/;"	m	class:boost::locale::boundary::details::segment_index_iterator	access:private
boost::locale::boundary::details::segment_index_iterator::segment_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    segment_index_iterator() : current_(0,0),map_(0)$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:()
boost::locale::boundary::details::segment_index_iterator::segment_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    segment_index_iterator(base_iterator p,mapping_type const *map,rule_type mask,bool full_select) :$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:(base_iterator p,mapping_type const *map,rule_type mask,bool full_select)
boost::locale::boundary::details::segment_index_iterator::segment_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    segment_index_iterator(bool is_begin,mapping_type const *map,rule_type mask,bool full_select) :$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:(bool is_begin,mapping_type const *map,rule_type mask,bool full_select)
boost::locale::boundary::details::segment_index_iterator::segment_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef segment<base_iterator> segment_type;$/;"	t	class:boost::locale::boundary::details::segment_index_iterator	access:public
boost::locale::boundary::details::segment_index_iterator::set	/usr/include/boost/locale/boundary/index.hpp	/^                    void set(base_iterator p)$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:(base_iterator p)
boost::locale::boundary::details::segment_index_iterator::set_begin	/usr/include/boost/locale/boundary/index.hpp	/^                    void set_begin()$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:()
boost::locale::boundary::details::segment_index_iterator::set_end	/usr/include/boost/locale/boundary/index.hpp	/^                    void set_end()$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:()
boost::locale::boundary::details::segment_index_iterator::size	/usr/include/boost/locale/boundary/index.hpp	/^                    size_t size() const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:() const
boost::locale::boundary::details::segment_index_iterator::update_current	/usr/include/boost/locale/boundary/index.hpp	/^                    void update_current(std::pair<size_t,size_t> pos)$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:(std::pair<size_t,size_t> pos)
boost::locale::boundary::details::segment_index_iterator::update_rule	/usr/include/boost/locale/boundary/index.hpp	/^                    void update_rule()$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:()
boost::locale::boundary::details::segment_index_iterator::valid_offset	/usr/include/boost/locale/boundary/index.hpp	/^                    bool valid_offset(size_t offset) const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:(size_t offset) const
boost::locale::boundary::details::segment_index_iterator::value_	/usr/include/boost/locale/boundary/index.hpp	/^                    segment_type value_;$/;"	m	class:boost::locale::boundary::details::segment_index_iterator	access:private
boost::locale::boundary::index_type	/usr/include/boost/locale/boundary/facets.hpp	/^            typedef std::vector<break_info> index_type;$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::line	/usr/include/boost/locale/boundary/types.hpp	/^                line        \/\/\/< Analyse the text for positions suitable for line breaks$/;"	e	enum:boost::locale::boundary::boundary_type
boost::locale::boundary::line_any	/usr/include/boost/locale/boundary/types.hpp	/^                line_any        =  0xFF,   \/\/\/< Soft or Hard line break$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::line_hard	/usr/include/boost/locale/boundary/types.hpp	/^                line_hard       =  0xF0,   \/\/\/< Hard line break: like break is required (as per CR\/LF)$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::line_mask	/usr/include/boost/locale/boundary/types.hpp	/^                line_mask       =  0xFF;   \/\/\/< Select all types of line breaks$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::line_soft	/usr/include/boost/locale/boundary/types.hpp	/^                line_soft       =  0x0F,   \/\/\/< Soft line break: optional but not required$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::operator !=	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    bool operator!=(BaseIterator const &l,boundary_point<BaseIterator> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(BaseIterator const &l,boundary_point<BaseIterator> const &r)
boost::locale::boundary::operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator!=(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
boost::locale::boundary::operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator!=(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
boost::locale::boundary::operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator!=(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
boost::locale::boundary::operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator!=(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
boost::locale::boundary::operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator!=(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
boost::locale::boundary::operator <	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
boost::locale::boundary::operator <	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
boost::locale::boundary::operator <	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
boost::locale::boundary::operator <	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
boost::locale::boundary::operator <	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
boost::locale::boundary::operator <<	/usr/include/boost/locale/boundary/segment.hpp	/^    std::basic_ostream<CharType,TraitsType> &operator<<($/;"	f	namespace:boost::locale::boundary	signature:( std::basic_ostream<CharType,TraitsType> &out, segment<Iterator> const &tok)
boost::locale::boundary::operator <=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<=(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
boost::locale::boundary::operator <=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<=(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
boost::locale::boundary::operator <=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<=(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
boost::locale::boundary::operator <=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<=(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
boost::locale::boundary::operator <=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<=(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
boost::locale::boundary::operator ==	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    bool operator==(BaseIterator const &l,boundary_point<BaseIterator> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(BaseIterator const &l,boundary_point<BaseIterator> const &r)
boost::locale::boundary::operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator==(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
boost::locale::boundary::operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator==(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
boost::locale::boundary::operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator==(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
boost::locale::boundary::operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator==(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
boost::locale::boundary::operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator==(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
boost::locale::boundary::operator >	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
boost::locale::boundary::operator >	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
boost::locale::boundary::operator >	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
boost::locale::boundary::operator >	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
boost::locale::boundary::operator >	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
boost::locale::boundary::operator >=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>=(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
boost::locale::boundary::operator >=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>=(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
boost::locale::boundary::operator >=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>=(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
boost::locale::boundary::operator >=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>=(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
boost::locale::boundary::operator >=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>=(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
boost::locale::boundary::rule_type	/usr/include/boost/locale/boundary/types.hpp	/^            typedef uint32_t rule_type;$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::sboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<std::string::const_iterator> sboundary_point;      \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::sboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<std::string::const_iterator> sboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::segment	/usr/include/boost/locale/boundary/segment.hpp	/^    class segment : public std::pair<IteratorType,IteratorType> {$/;"	c	namespace:boost::locale::boundary	inherits:std::pair
boost::locale::boundary::segment::begin	/usr/include/boost/locale/boundary/segment.hpp	/^        IteratorType begin() const $/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
boost::locale::boundary::segment::begin	/usr/include/boost/locale/boundary/segment.hpp	/^        void begin(iterator const &v)$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(iterator const &v)
boost::locale::boundary::segment::char_type	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef typename std::iterator_traits<IteratorType>::value_type char_type;$/;"	t	class:boost::locale::boundary::segment	access:public
boost::locale::boundary::segment::const_iterator	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef IteratorType const_iterator;$/;"	t	class:boost::locale::boundary::segment	access:public
boost::locale::boundary::segment::difference_type	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef typename std::iterator_traits<IteratorType>::difference_type difference_type;$/;"	t	class:boost::locale::boundary::segment	access:public
boost::locale::boundary::segment::empty	/usr/include/boost/locale/boundary/segment.hpp	/^        bool empty() const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
boost::locale::boundary::segment::end	/usr/include/boost/locale/boundary/segment.hpp	/^         void end(iterator const &v)$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(iterator const &v)
boost::locale::boundary::segment::end	/usr/include/boost/locale/boundary/segment.hpp	/^        IteratorType end() const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
boost::locale::boundary::segment::iterator	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef IteratorType iterator;$/;"	t	class:boost::locale::boundary::segment	access:public
boost::locale::boundary::segment::length	/usr/include/boost/locale/boundary/segment.hpp	/^        size_t length() const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
boost::locale::boundary::segment::operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^        bool operator!=(segment const &other)$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(segment const &other)
boost::locale::boundary::segment::operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^        bool operator==(segment const &other)$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(segment const &other)
boost::locale::boundary::segment::operator std::basic_string<char_type, T, A>	/usr/include/boost/locale/boundary/segment.hpp	/^        operator std::basic_string<char_type, T, A> ()const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
boost::locale::boundary::segment::rule	/usr/include/boost/locale/boundary/segment.hpp	/^        rule_type rule() const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
boost::locale::boundary::segment::rule	/usr/include/boost/locale/boundary/segment.hpp	/^        void rule(rule_type r)$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(rule_type r)
boost::locale::boundary::segment::rule_	/usr/include/boost/locale/boundary/segment.hpp	/^        rule_type rule_;$/;"	m	class:boost::locale::boundary::segment	access:private
boost::locale::boundary::segment::segment	/usr/include/boost/locale/boundary/segment.hpp	/^        segment() {}$/;"	f	class:boost::locale::boundary::segment	access:public	signature:()
boost::locale::boundary::segment::segment	/usr/include/boost/locale/boundary/segment.hpp	/^        segment(iterator b,iterator e,rule_type r) :$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(iterator b,iterator e,rule_type r)
boost::locale::boundary::segment::str	/usr/include/boost/locale/boundary/segment.hpp	/^        string_type str() const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
boost::locale::boundary::segment::string_type	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef std::basic_string<char_type> string_type;$/;"	t	class:boost::locale::boundary::segment	access:public
boost::locale::boundary::segment::value_type	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef char_type value_type;$/;"	t	class:boost::locale::boundary::segment	access:public
boost::locale::boundary::segment_index	/usr/include/boost/locale/boundary/index.hpp	/^            class segment_index {$/;"	c	namespace:boost::locale::boundary
boost::locale::boundary::segment_index::base_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef BaseIterator base_iterator;$/;"	t	class:boost::locale::boundary::segment_index	access:public
boost::locale::boundary::segment_index::begin	/usr/include/boost/locale/boundary/index.hpp	/^                iterator begin() const$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:() const
boost::locale::boundary::segment_index::const_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::segment_index_iterator<base_iterator> const_iterator;$/;"	t	class:boost::locale::boundary::segment_index	access:public
boost::locale::boundary::segment_index::const_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef unspecified_iterator_type const_iterator;$/;"	t	class:boost::locale::boundary::segment_index	access:public
boost::locale::boundary::segment_index::end	/usr/include/boost/locale/boundary/index.hpp	/^                iterator end() const$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:() const
boost::locale::boundary::segment_index::find	/usr/include/boost/locale/boundary/index.hpp	/^                iterator find(base_iterator p) const$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(base_iterator p) const
boost::locale::boundary::segment_index::full_select	/usr/include/boost/locale/boundary/index.hpp	/^                bool full_select()  const $/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:() const
boost::locale::boundary::segment_index::full_select	/usr/include/boost/locale/boundary/index.hpp	/^                void full_select(bool v) $/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(bool v)
boost::locale::boundary::segment_index::full_select_	/usr/include/boost/locale/boundary/index.hpp	/^                bool full_select_;$/;"	m	class:boost::locale::boundary::segment_index	access:private
boost::locale::boundary::segment_index::iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::segment_index_iterator<base_iterator> iterator;$/;"	t	class:boost::locale::boundary::segment_index	access:public
boost::locale::boundary::segment_index::iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef unspecified_iterator_type iterator;$/;"	t	class:boost::locale::boundary::segment_index	access:public
boost::locale::boundary::segment_index::map	/usr/include/boost/locale/boundary/index.hpp	/^                void map(boundary_type type,base_iterator begin,base_iterator end,std::locale const &loc=std::locale())$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(boundary_type type,base_iterator begin,base_iterator end,std::locale const &loc=std::locale())
boost::locale::boundary::segment_index::map_	/usr/include/boost/locale/boundary/index.hpp	/^                mapping_type  map_;$/;"	m	class:boost::locale::boundary::segment_index	access:private
boost::locale::boundary::segment_index::mapping_type	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::mapping<base_iterator> mapping_type;$/;"	t	class:boost::locale::boundary::segment_index	access:private
boost::locale::boundary::segment_index::mask_	/usr/include/boost/locale/boundary/index.hpp	/^                rule_type mask_;$/;"	m	class:boost::locale::boundary::segment_index	access:private
boost::locale::boundary::segment_index::operator =	/usr/include/boost/locale/boundary/index.hpp	/^                segment_index const &operator = (boundary_point_index<base_iterator> const &);$/;"	p	class:boost::locale::boundary::segment_index	access:public	signature:(boundary_point_index<base_iterator> const &)
boost::locale::boundary::segment_index::operator =	/usr/include/boost/locale/boundary/index.hpp	/^            segment_index<BaseIterator> const &segment_index<BaseIterator>::operator=(boundary_point_index<BaseIterator> const &other)$/;"	f	class:boost::locale::boundary::segment_index	signature:(boundary_point_index<BaseIterator> const &other)
boost::locale::boundary::segment_index::rule	/usr/include/boost/locale/boundary/index.hpp	/^                rule_type rule() const$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:() const
boost::locale::boundary::segment_index::rule	/usr/include/boost/locale/boundary/index.hpp	/^                void rule(rule_type v)$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(rule_type v)
boost::locale::boundary::segment_index::segment_index	/usr/include/boost/locale/boundary/index.hpp	/^                segment_index() : mask_(0xFFFFFFFFu),full_select_(false)$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:()
boost::locale::boundary::segment_index::segment_index	/usr/include/boost/locale/boundary/index.hpp	/^                segment_index(boundary_point_index<base_iterator> const &);$/;"	p	class:boost::locale::boundary::segment_index	access:public	signature:(boundary_point_index<base_iterator> const &)
boost::locale::boundary::segment_index::segment_index	/usr/include/boost/locale/boundary/index.hpp	/^                segment_index(boundary_type type,$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(boundary_type type, base_iterator begin, base_iterator end, rule_type mask, std::locale const &loc=std::locale())
boost::locale::boundary::segment_index::segment_index	/usr/include/boost/locale/boundary/index.hpp	/^                segment_index(boundary_type type,$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(boundary_type type, base_iterator begin, base_iterator end, std::locale const &loc=std::locale())
boost::locale::boundary::segment_index::segment_index	/usr/include/boost/locale/boundary/index.hpp	/^            segment_index<BaseIterator>::segment_index(boundary_point_index<BaseIterator> const &other) :$/;"	f	class:boost::locale::boundary::segment_index	signature:(boundary_point_index<BaseIterator> const &other)
boost::locale::boundary::segment_index::value_type	/usr/include/boost/locale/boundary/index.hpp	/^                typedef segment<base_iterator> value_type;$/;"	t	class:boost::locale::boundary::segment_index	access:public
boost::locale::boundary::sentence	/usr/include/boost/locale/boundary/types.hpp	/^                sentence,   \/\/\/< Analyse the text for Find sentence boundaries$/;"	e	enum:boost::locale::boundary::boundary_type
boost::locale::boundary::sentence_any	/usr/include/boost/locale/boundary/types.hpp	/^                sentence_any    =  0xFF,    \/\/\/< Either first or second sentence break type;.$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::sentence_mask	/usr/include/boost/locale/boundary/types.hpp	/^                sentence_mask   =  0xFF;    \/\/\/< Select all sentence breaking points$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::sentence_sep	/usr/include/boost/locale/boundary/types.hpp	/^                sentence_sep    =  0xF0,    \/\/\/< \\brief The sentence does not contain terminator like ".", "!" but ended with hard separator$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::sentence_term	/usr/include/boost/locale/boundary/types.hpp	/^                sentence_term   =  0x0F,    \/\/\/< \\brief The sentence was terminated with a sentence terminator $/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::ssegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<std::string::const_iterator> ssegment;      \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::ssegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<std::string::const_iterator> ssegment_index;      \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u16cboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<char16_t const *> u16cboundary_point;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u16cboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<char16_t const *> u16cboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u16csegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<char16_t const *> u16csegment;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u16csegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<char16_t const *> u16csegment_index;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u16sboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<std::u16string::const_iterator> u16sboundary_point;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u16sboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<std::u16string::const_iterator> u16sboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u16ssegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<std::u16string::const_iterator> u16ssegment;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u16ssegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<std::u16string::const_iterator> u16ssegment_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u32cboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<char32_t const *> u32cboundary_point;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u32cboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<char32_t const *> u32cboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u32csegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<char32_t const *> u32csegment;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u32csegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<char32_t const *> u32csegment_index;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u32sboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<std::u32string::const_iterator> u32sboundary_point;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u32sboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<std::u32string::const_iterator> u32sboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u32ssegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<std::u32string::const_iterator> u32ssegment;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::u32ssegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<std::u32string::const_iterator> u32ssegment_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::wcboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<wchar_t const *> wcboundary_point;                 \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::wcboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<wchar_t const *> wcboundary_point_index;   \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::wcsegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<wchar_t const *> wcsegment;                 \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::wcsegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<wchar_t const *> wcsegment_index;                 \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::word	/usr/include/boost/locale/boundary/types.hpp	/^                word,       \/\/\/< Analyse the text for word boundaries$/;"	e	enum:boost::locale::boundary::boundary_type
boost::locale::boundary::word_any	/usr/include/boost/locale/boundary/types.hpp	/^                word_any        =  0xFFFF0,   \/\/\/< Any word including numbers, 0 is special flag, equivalent to 15$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::word_ideo	/usr/include/boost/locale/boundary/types.hpp	/^                word_ideo       =  0xF0000,   \/\/\/< Word that contains ideographic characters$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::word_kana	/usr/include/boost/locale/boundary/types.hpp	/^                word_kana       =  0x0F000,   \/\/\/< Word that contains kana characters$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::word_kana_ideo	/usr/include/boost/locale/boundary/types.hpp	/^                word_kana_ideo  =  0xFF000,   \/\/\/< Word that includes kana or ideographic characters$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::word_letter	/usr/include/boost/locale/boundary/types.hpp	/^                word_letter     =  0x00F00,   \/\/\/< Word that contains letters, excluding kana and ideographic characters $/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::word_letters	/usr/include/boost/locale/boundary/types.hpp	/^                word_letters    =  0xFFF00,   \/\/\/< Any word, excluding numbers but including letters, kana and ideograms.$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::word_mask	/usr/include/boost/locale/boundary/types.hpp	/^                word_mask       =  0xFFFFF;   \/\/\/< Full word mask - select all possible variants$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::word_none	/usr/include/boost/locale/boundary/types.hpp	/^                word_none       =  0x0000F,   \/\/\/< Not a word, like white space or punctuation mark$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::word_number	/usr/include/boost/locale/boundary/types.hpp	/^                word_number     =  0x000F0,   \/\/\/< Word that appear to be a number$/;"	m	namespace:boost::locale::boundary
boost::locale::boundary::wsboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<std::wstring::const_iterator> wsboundary_point;    \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::wsboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<std::wstring::const_iterator> wsboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::wssegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<std::wstring::const_iterator> wssegment;    \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary::wssegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<std::wstring::const_iterator> wssegment_index;    \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
boost::locale::boundary_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     boundary_facet  = 1 << 6;   \/\/\/< Generate boundary analysis facet$/;"	m	namespace:boost::locale
boost::locale::calendar	/usr/include/boost/locale/date_time.hpp	/^        class BOOST_LOCALE_DECL calendar {$/;"	c	namespace:boost::locale
boost::locale::calendar::calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar();$/;"	p	class:boost::locale::calendar	access:public	signature:()
boost::locale::calendar::calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar(calendar const &other);$/;"	p	class:boost::locale::calendar	access:public	signature:(calendar const &other)
boost::locale::calendar::calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar(std::ios_base &ios);$/;"	p	class:boost::locale::calendar	access:public	signature:(std::ios_base &ios)
boost::locale::calendar::calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar(std::locale const &l);$/;"	p	class:boost::locale::calendar	access:public	signature:(std::locale const &l)
boost::locale::calendar::calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar(std::locale const &l,std::string const &zone);$/;"	p	class:boost::locale::calendar	access:public	signature:(std::locale const &l,std::string const &zone)
boost::locale::calendar::calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar(std::string const &zone);$/;"	p	class:boost::locale::calendar	access:public	signature:(std::string const &zone)
boost::locale::calendar::first_day_of_week	/usr/include/boost/locale/date_time.hpp	/^            int first_day_of_week() const;$/;"	p	class:boost::locale::calendar	access:public	signature:() const
boost::locale::calendar::get_locale	/usr/include/boost/locale/date_time.hpp	/^            std::locale get_locale() const;$/;"	p	class:boost::locale::calendar	access:public	signature:() const
boost::locale::calendar::get_time_zone	/usr/include/boost/locale/date_time.hpp	/^            std::string get_time_zone() const;$/;"	p	class:boost::locale::calendar	access:public	signature:() const
boost::locale::calendar::greatest_minimum	/usr/include/boost/locale/date_time.hpp	/^            int greatest_minimum(period::period_type f) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(period::period_type f) const
boost::locale::calendar::impl_	/usr/include/boost/locale/date_time.hpp	/^            hold_ptr<abstract_calendar> impl_;$/;"	m	class:boost::locale::calendar	access:private
boost::locale::calendar::is_gregorian	/usr/include/boost/locale/date_time.hpp	/^            bool is_gregorian() const;$/;"	p	class:boost::locale::calendar	access:public	signature:() const
boost::locale::calendar::least_maximum	/usr/include/boost/locale/date_time.hpp	/^            int least_maximum(period::period_type f) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(period::period_type f) const
boost::locale::calendar::locale_	/usr/include/boost/locale/date_time.hpp	/^            std::locale locale_;$/;"	m	class:boost::locale::calendar	access:private
boost::locale::calendar::maximum	/usr/include/boost/locale/date_time.hpp	/^            int maximum(period::period_type f) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(period::period_type f) const
boost::locale::calendar::minimum	/usr/include/boost/locale/date_time.hpp	/^            int minimum(period::period_type f) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(period::period_type f) const
boost::locale::calendar::operator !=	/usr/include/boost/locale/date_time.hpp	/^            bool operator!=(calendar const &other) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(calendar const &other) const
boost::locale::calendar::operator =	/usr/include/boost/locale/date_time.hpp	/^            calendar const &operator=(calendar const &other);$/;"	p	class:boost::locale::calendar	access:public	signature:(calendar const &other)
boost::locale::calendar::operator ==	/usr/include/boost/locale/date_time.hpp	/^            bool operator==(calendar const &other) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(calendar const &other) const
boost::locale::calendar::tz_	/usr/include/boost/locale/date_time.hpp	/^            std::string tz_;$/;"	m	class:boost::locale::calendar	access:private
boost::locale::calendar::~calendar	/usr/include/boost/locale/date_time.hpp	/^            ~calendar();$/;"	p	class:boost::locale::calendar	access:public	signature:()
boost::locale::calendar_facet	/usr/include/boost/locale/date_time_facet.hpp	/^        class BOOST_LOCALE_DECL calendar_facet : public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:std::locale::facet
boost::locale::calendar_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     calendar_facet  = 1 << 16;   \/\/\/< Generate boundary analysis facet$/;"	m	namespace:boost::locale
boost::locale::calendar_facet::calendar_facet	/usr/include/boost/locale/date_time_facet.hpp	/^            calendar_facet(size_t refs = 0) : std::locale::facet(refs) $/;"	f	class:boost::locale::calendar_facet	access:public	signature:(size_t refs = 0)
boost::locale::calendar_facet::create_calendar	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual abstract_calendar *create_calendar() const = 0;$/;"	p	class:boost::locale::calendar_facet	access:public	signature:() const
boost::locale::calendar_facet::id	/usr/include/boost/locale/date_time_facet.hpp	/^            static std::locale::id id;$/;"	m	class:boost::locale::calendar_facet	access:public
boost::locale::char16_t_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t char16_t_facet  = 1 << 2;   \/\/\/< C++0x char16_t facets$/;"	m	namespace:boost::locale
boost::locale::char32_t_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t char32_t_facet  = 1 << 3;   \/\/\/< C++0x char32_t facets$/;"	m	namespace:boost::locale
boost::locale::char_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t char_facet      = 1 << 0;   \/\/\/< 8-bit character facets$/;"	m	namespace:boost::locale
boost::locale::character_facet_type	/usr/include/boost/locale/generator.hpp	/^        typedef uint32_t character_facet_type; \/\/\/<type that specifies the character type that locales can be generated for$/;"	t	namespace:boost::locale
boost::locale::character_first_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t character_first_facet = char_facet;  \/\/\/< First facet specific for character type$/;"	m	namespace:boost::locale
boost::locale::character_last_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t character_last_facet = char32_t_facet; \/\/\/< Last facet specific for character type$/;"	m	namespace:boost::locale
boost::locale::codepage_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     codepage_facet  = 1 << 5;   \/\/\/< Generate character set conversion facets (derived from std::codecvt)$/;"	m	namespace:boost::locale
boost::locale::collation_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     collation_facet = 1 << 1;   \/\/\/< Generate collation facets$/;"	m	namespace:boost::locale
boost::locale::collator	/usr/include/boost/locale/collator.hpp	/^    class collator : $/;"	c	namespace:boost::locale	inherits:std::collate,collator_base
boost::locale::collator::char_type	/usr/include/boost/locale/collator.hpp	/^        typedef CharType char_type;$/;"	t	class:boost::locale::collator	access:public
boost::locale::collator::collator	/usr/include/boost/locale/collator.hpp	/^        collator(size_t refs = 0) : std::collate<CharType>(refs) $/;"	f	class:boost::locale::collator	access:protected	signature:(size_t refs = 0)
boost::locale::collator::compare	/usr/include/boost/locale/collator.hpp	/^        int compare(level_type level,$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level, char_type const *b1,char_type const *e1, char_type const *b2,char_type const *e2) const
boost::locale::collator::compare	/usr/include/boost/locale/collator.hpp	/^        int compare(level_type level,string_type const &l,string_type const &r) const$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level,string_type const &l,string_type const &r) const
boost::locale::collator::do_compare	/usr/include/boost/locale/collator.hpp	/^        virtual int do_compare( char_type const *b1,char_type const *e1,$/;"	f	class:boost::locale::collator	access:protected	signature:( char_type const *b1,char_type const *e1, char_type const *b2,char_type const *e2) const
boost::locale::collator::do_compare	/usr/include/boost/locale/collator.hpp	/^        virtual int do_compare( level_type level,$/;"	p	class:boost::locale::collator	access:protected	signature:( level_type level, char_type const *b1,char_type const *e1, char_type const *b2,char_type const *e2) const
boost::locale::collator::do_hash	/usr/include/boost/locale/collator.hpp	/^        virtual long do_hash(char_type const *b,char_type const *e) const$/;"	f	class:boost::locale::collator	access:protected	signature:(char_type const *b,char_type const *e) const
boost::locale::collator::do_hash	/usr/include/boost/locale/collator.hpp	/^        virtual long do_hash(level_type level,char_type const *b,char_type const *e) const = 0;$/;"	p	class:boost::locale::collator	access:protected	signature:(level_type level,char_type const *b,char_type const *e) const
boost::locale::collator::do_transform	/usr/include/boost/locale/collator.hpp	/^        virtual string_type do_transform(char_type const *b,char_type const *e) const$/;"	f	class:boost::locale::collator	access:protected	signature:(char_type const *b,char_type const *e) const
boost::locale::collator::do_transform	/usr/include/boost/locale/collator.hpp	/^        virtual string_type do_transform(level_type level,char_type const *b,char_type const *e) const = 0;$/;"	p	class:boost::locale::collator	access:protected	signature:(level_type level,char_type const *b,char_type const *e) const
boost::locale::collator::hash	/usr/include/boost/locale/collator.hpp	/^        long hash(level_type level,char_type const *b,char_type const *e) const$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level,char_type const *b,char_type const *e) const
boost::locale::collator::hash	/usr/include/boost/locale/collator.hpp	/^        long hash(level_type level,string_type const &s) const$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level,string_type const &s) const
boost::locale::collator::string_type	/usr/include/boost/locale/collator.hpp	/^        typedef std::basic_string<CharType> string_type;$/;"	t	class:boost::locale::collator	access:public
boost::locale::collator::transform	/usr/include/boost/locale/collator.hpp	/^        string_type transform(level_type level,char_type const *b,char_type const *e) const$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level,char_type const *b,char_type const *e) const
boost::locale::collator::transform	/usr/include/boost/locale/collator.hpp	/^        string_type transform(level_type level,string_type const &s) const$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level,string_type const &s) const
boost::locale::collator::~collator	/usr/include/boost/locale/collator.hpp	/^        virtual ~collator()$/;"	f	class:boost::locale::collator	access:protected	signature:()
boost::locale::collator_base	/usr/include/boost/locale/collator.hpp	/^    class collator_base {$/;"	c	namespace:boost::locale
boost::locale::collator_base::identical	/usr/include/boost/locale/collator.hpp	/^            identical   = 4  \/\/\/< identical collation level: include code-point comparison$/;"	e	enum:boost::locale::collator_base::__anon1
boost::locale::collator_base::level_type	/usr/include/boost/locale/collator.hpp	/^        } level_type;$/;"	t	class:boost::locale::collator_base	typeref:enum:boost::locale::collator_base::__anon1	access:public
boost::locale::collator_base::primary	/usr/include/boost/locale/collator.hpp	/^            primary     = 0, \/\/\/< 1st collation level: base letters$/;"	e	enum:boost::locale::collator_base::__anon1
boost::locale::collator_base::quaternary	/usr/include/boost/locale/collator.hpp	/^            quaternary  = 3, \/\/\/< 4th collation level: letters, accents, case and punctuation$/;"	e	enum:boost::locale::collator_base::__anon1
boost::locale::collator_base::secondary	/usr/include/boost/locale/collator.hpp	/^            secondary   = 1, \/\/\/< 2nd collation level: letters and accents$/;"	e	enum:boost::locale::collator_base::__anon1
boost::locale::collator_base::tertiary	/usr/include/boost/locale/collator.hpp	/^            tertiary    = 2, \/\/\/< 3rd collation level: letters, accents and case$/;"	e	enum:boost::locale::collator_base::__anon1
boost::locale::comparator	/usr/include/boost/locale/collator.hpp	/^    struct comparator$/;"	s	namespace:boost::locale
boost::locale::comparator::comparator	/usr/include/boost/locale/collator.hpp	/^        comparator(std::locale const &l=std::locale(),collator_base::level_type level=default_level) : $/;"	f	struct:boost::locale::comparator	access:public	signature:(std::locale const &l=std::locale(),collator_base::level_type level=default_level)
boost::locale::comparator::level_	/usr/include/boost/locale/collator.hpp	/^        collator_base::level_type level_;$/;"	m	struct:boost::locale::comparator	access:private
boost::locale::comparator::locale_	/usr/include/boost/locale/collator.hpp	/^        std::locale locale_;$/;"	m	struct:boost::locale::comparator	access:private
boost::locale::comparator::operator ()	/usr/include/boost/locale/collator.hpp	/^        bool operator()(std::basic_string<CharType> const &left,std::basic_string<CharType> const &right) const$/;"	f	struct:boost::locale::comparator	access:public	signature:(std::basic_string<CharType> const &left,std::basic_string<CharType> const &right) const
boost::locale::conv	/usr/include/boost/locale/encoding.hpp	/^        namespace conv {$/;"	n	namespace:boost::locale
boost::locale::conv	/usr/include/boost/locale/encoding_errors.hpp	/^        namespace conv {$/;"	n	namespace:boost::locale
boost::locale::conv	/usr/include/boost/locale/encoding_utf.hpp	/^        namespace conv {$/;"	n	namespace:boost::locale
boost::locale::conv::between	/usr/include/boost/locale/encoding.hpp	/^            std::string between(char const *begin,$/;"	p	namespace:boost::locale::conv	signature:(char const *begin, char const *end, std::string const &to_encoding, std::string const &from_encoding, method_type how=default_method)
boost::locale::conv::between	/usr/include/boost/locale/encoding.hpp	/^            std::string between(char const *text,$/;"	f	namespace:boost::locale::conv	signature:(char const *text, std::string const &to_encoding, std::string const &from_encoding, method_type how=default_method)
boost::locale::conv::between	/usr/include/boost/locale/encoding.hpp	/^            std::string between(std::string const &text,$/;"	f	namespace:boost::locale::conv	signature:(std::string const &text, std::string const &to_encoding, std::string const &from_encoding, method_type how=default_method)
boost::locale::conv::conversion_error	/usr/include/boost/locale/encoding_errors.hpp	/^            class BOOST_SYMBOL_VISIBLE conversion_error : public std::runtime_error {$/;"	c	namespace:boost::locale::conv	inherits:std::runtime_error
boost::locale::conv::conversion_error::conversion_error	/usr/include/boost/locale/encoding_errors.hpp	/^                conversion_error() : std::runtime_error("Conversion failed") {}$/;"	f	class:boost::locale::conv::conversion_error	access:public	signature:()
boost::locale::conv::default_method	/usr/include/boost/locale/encoding_errors.hpp	/^                default_method  = skip  \/\/\/< Default method - skip$/;"	e	enum:boost::locale::conv::__anon7
boost::locale::conv::from_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::string from_utf(char const *begin,char const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how)
boost::locale::conv::from_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::string from_utf(char16_t const *begin,char16_t const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char16_t const *begin,char16_t const *end,std::string const &charset,method_type how)
boost::locale::conv::from_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::string from_utf(char32_t const *begin,char32_t const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char32_t const *begin,char32_t const *end,std::string const &charset,method_type how)
boost::locale::conv::from_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::string from_utf(wchar_t const *begin,wchar_t const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(wchar_t const *begin,wchar_t const *end,std::string const &charset,method_type how)
boost::locale::conv::from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(CharType const *begin,CharType const *end,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(CharType const *begin,CharType const *end,std::locale const &loc,method_type how=default_method)
boost::locale::conv::from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(CharType const *begin,CharType const *end,std::string const &charset,method_type how=default_method);$/;"	p	namespace:boost::locale::conv	signature:(CharType const *begin,CharType const *end,std::string const &charset,method_type how=default_method)
boost::locale::conv::from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(CharType const *text,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(CharType const *text,std::locale const &loc,method_type how=default_method)
boost::locale::conv::from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(CharType const *text,std::string const &charset,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(CharType const *text,std::string const &charset,method_type how=default_method)
boost::locale::conv::from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(std::basic_string<CharType> const &text,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(std::basic_string<CharType> const &text,std::locale const &loc,method_type how=default_method)
boost::locale::conv::from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(std::basic_string<CharType> const &text,std::string const &charset,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(std::basic_string<CharType> const &text,std::string const &charset,method_type how=default_method)
boost::locale::conv::invalid_charset_error	/usr/include/boost/locale/encoding_errors.hpp	/^            class BOOST_SYMBOL_VISIBLE invalid_charset_error : public std::runtime_error {$/;"	c	namespace:boost::locale::conv	inherits:std::runtime_error
boost::locale::conv::invalid_charset_error::invalid_charset_error	/usr/include/boost/locale/encoding_errors.hpp	/^                invalid_charset_error(std::string charset) : $/;"	f	class:boost::locale::conv::invalid_charset_error	access:public	signature:(std::string charset)
boost::locale::conv::method_type	/usr/include/boost/locale/encoding_errors.hpp	/^            } method_type;$/;"	t	namespace:boost::locale::conv	typeref:enum:boost::locale::conv::__anon7
boost::locale::conv::skip	/usr/include/boost/locale/encoding_errors.hpp	/^                skip            = 0,    \/\/\/< Skip illegal\/unconvertable characters$/;"	e	enum:boost::locale::conv::__anon7
boost::locale::conv::stop	/usr/include/boost/locale/encoding_errors.hpp	/^                stop            = 1,    \/\/\/< Stop conversion and throw conversion_error$/;"	e	enum:boost::locale::conv::__anon7
boost::locale::conv::to_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::basic_string<char16_t> to_utf(char const *begin,char const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how)
boost::locale::conv::to_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::basic_string<char32_t> to_utf(char const *begin,char const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how)
boost::locale::conv::to_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::basic_string<char> to_utf(char const *begin,char const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how)
boost::locale::conv::to_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::basic_string<wchar_t> to_utf(char const *begin,char const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how)
boost::locale::conv::to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(char const *begin,char const *end,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::locale const &loc,method_type how=default_method)
boost::locale::conv::to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(char const *begin,char const *end,std::string const &charset,method_type how=default_method);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how=default_method)
boost::locale::conv::to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(char const *text,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(char const *text,std::locale const &loc,method_type how=default_method)
boost::locale::conv::to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(char const *text,std::string const &charset,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(char const *text,std::string const &charset,method_type how=default_method)
boost::locale::conv::to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(std::string const &text,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(std::string const &text,std::locale const &loc,method_type how=default_method)
boost::locale::conv::to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(std::string const &text,std::string const &charset,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(std::string const &text,std::string const &charset,method_type how=default_method)
boost::locale::conv::utf_to_utf	/usr/include/boost/locale/encoding_utf.hpp	/^            utf_to_utf(CharIn const *begin,CharIn const *end,method_type how = default_method)$/;"	f	namespace:boost::locale::conv	signature:(CharIn const *begin,CharIn const *end,method_type how = default_method)
boost::locale::conv::utf_to_utf	/usr/include/boost/locale/encoding_utf.hpp	/^            utf_to_utf(CharIn const *str,method_type how = default_method)$/;"	f	namespace:boost::locale::conv	signature:(CharIn const *str,method_type how = default_method)
boost::locale::conv::utf_to_utf	/usr/include/boost/locale/encoding_utf.hpp	/^            utf_to_utf(std::basic_string<CharIn> const &str,method_type how = default_method)$/;"	f	namespace:boost::locale::conv	signature:(std::basic_string<CharIn> const &str,method_type how = default_method)
boost::locale::convert_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     convert_facet   = 1 << 0;   \/\/\/< Generate conversion facets$/;"	m	namespace:boost::locale
boost::locale::converter	/usr/include/boost/locale/conversion.hpp	/^        class BOOST_LOCALE_DECL converter: public converter_base, public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:converter_base,std::locale::facet
boost::locale::converter	/usr/include/boost/locale/conversion.hpp	/^        class BOOST_LOCALE_DECL converter<char16_t> : public converter_base, public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:converter_base,std::locale::facet
boost::locale::converter	/usr/include/boost/locale/conversion.hpp	/^        class BOOST_LOCALE_DECL converter<char32_t> : public converter_base, public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:converter_base,std::locale::facet
boost::locale::converter	/usr/include/boost/locale/conversion.hpp	/^        class BOOST_LOCALE_DECL converter<char> : public converter_base, public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:converter_base,std::locale::facet
boost::locale::converter	/usr/include/boost/locale/conversion.hpp	/^        class BOOST_LOCALE_DECL converter<wchar_t> : public converter_base, public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:converter_base,std::locale::facet
boost::locale::converter::__get_id	/usr/include/boost/locale/conversion.hpp	/^            std::locale::id& __get_id (void) const { return id; }$/;"	f	class:boost::locale::converter	access:public	signature:(void) const
boost::locale::converter::convert	/usr/include/boost/locale/conversion.hpp	/^             virtual std::wstring convert(conversion_type how,wchar_t const *begin,wchar_t const *end,int flags = 0) const = 0;$/;"	p	class:boost::locale::converter	access:public	signature:(conversion_type how,wchar_t const *begin,wchar_t const *end,int flags = 0) const
boost::locale::converter::convert	/usr/include/boost/locale/conversion.hpp	/^            virtual std::basic_string<Char> convert(conversion_type how,Char const *begin,Char const *end,int flags = 0) const = 0;$/;"	p	class:boost::locale::converter	access:public	signature:(conversion_type how,Char const *begin,Char const *end,int flags = 0) const
boost::locale::converter::convert	/usr/include/boost/locale/conversion.hpp	/^            virtual std::string convert(conversion_type how,char const *begin,char const *end,int flags = 0) const = 0;$/;"	p	class:boost::locale::converter	access:public	signature:(conversion_type how,char const *begin,char const *end,int flags = 0) const
boost::locale::converter::convert	/usr/include/boost/locale/conversion.hpp	/^            virtual std::u16string convert(conversion_type how,char16_t const *begin,char16_t const *end,int flags = 0) const = 0; $/;"	p	class:boost::locale::converter	access:public	signature:(conversion_type how,char16_t const *begin,char16_t const *end,int flags = 0) const
boost::locale::converter::convert	/usr/include/boost/locale/conversion.hpp	/^            virtual std::u32string convert(conversion_type how,char32_t const *begin,char32_t const *end,int flags = 0) const = 0;$/;"	p	class:boost::locale::converter	access:public	signature:(conversion_type how,char32_t const *begin,char32_t const *end,int flags = 0) const
boost::locale::converter::converter	/usr/include/boost/locale/conversion.hpp	/^            converter(size_t refs = 0) : std::locale::facet(refs)$/;"	f	class:boost::locale::converter	access:public	signature:(size_t refs = 0)
boost::locale::converter::id	/usr/include/boost/locale/conversion.hpp	/^            static std::locale::id id;$/;"	m	class:boost::locale::converter	access:public
boost::locale::converter_base	/usr/include/boost/locale/conversion.hpp	/^        class converter_base {$/;"	c	namespace:boost::locale
boost::locale::converter_base::case_folding	/usr/include/boost/locale/conversion.hpp	/^                case_folding,   \/\/\/< Fold case in the text$/;"	e	enum:boost::locale::converter_base::__anon2
boost::locale::converter_base::conversion_type	/usr/include/boost/locale/conversion.hpp	/^            } conversion_type;$/;"	t	class:boost::locale::converter_base	typeref:enum:boost::locale::converter_base::__anon2	access:public
boost::locale::converter_base::lower_case	/usr/include/boost/locale/conversion.hpp	/^                lower_case,     \/\/\/< Convert text to lower case$/;"	e	enum:boost::locale::converter_base::__anon2
boost::locale::converter_base::normalization	/usr/include/boost/locale/conversion.hpp	/^                normalization,  \/\/\/< Apply Unicode normalization on the text$/;"	e	enum:boost::locale::converter_base::__anon2
boost::locale::converter_base::title_case	/usr/include/boost/locale/conversion.hpp	/^                title_case      \/\/\/< Convert text to title case$/;"	e	enum:boost::locale::converter_base::__anon2
boost::locale::converter_base::upper_case	/usr/include/boost/locale/conversion.hpp	/^                upper_case,     \/\/\/< Convert text to upper case$/;"	e	enum:boost::locale::converter_base::__anon2
boost::locale::date_time	/usr/include/boost/locale/date_time.hpp	/^        class BOOST_LOCALE_DECL date_time {$/;"	c	namespace:boost::locale
boost::locale::date_time::date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time();$/;"	p	class:boost::locale::date_time	access:public	signature:()
boost::locale::date_time::date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(calendar const &cal);$/;"	p	class:boost::locale::date_time	access:public	signature:(calendar const &cal)
boost::locale::date_time::date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(date_time const &other);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other)
boost::locale::date_time::date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(date_time const &other,date_time_period_set const &set);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other,date_time_period_set const &set)
boost::locale::date_time::date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(date_time_period_set const &set);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &set)
boost::locale::date_time::date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(date_time_period_set const &set,calendar const &cal);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &set,calendar const &cal)
boost::locale::date_time::date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(double time);$/;"	p	class:boost::locale::date_time	access:public	signature:(double time)
boost::locale::date_time::date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(double time,calendar const &cal);$/;"	p	class:boost::locale::date_time	access:public	signature:(double time,calendar const &cal)
boost::locale::date_time::difference	/usr/include/boost/locale/date_time.hpp	/^            int difference(date_time const &other,period::period_type f) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other,period::period_type f) const
boost::locale::date_time::get	/usr/include/boost/locale/date_time.hpp	/^            int get(period::period_type f) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
boost::locale::date_time::impl_	/usr/include/boost/locale/date_time.hpp	/^            hold_ptr<abstract_calendar> impl_;$/;"	m	class:boost::locale::date_time	access:private
boost::locale::date_time::is_in_daylight_saving_time	/usr/include/boost/locale/date_time.hpp	/^            bool is_in_daylight_saving_time() const;$/;"	p	class:boost::locale::date_time	access:public	signature:() const
boost::locale::date_time::maximum	/usr/include/boost/locale/date_time.hpp	/^            int maximum(period::period_type f) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
boost::locale::date_time::minimum	/usr/include/boost/locale/date_time.hpp	/^            int minimum(period::period_type f) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
boost::locale::date_time::operator !=	/usr/include/boost/locale/date_time.hpp	/^            bool operator!=(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
boost::locale::date_time::operator +	/usr/include/boost/locale/date_time.hpp	/^            date_time operator+(date_time_period const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v) const
boost::locale::date_time::operator +	/usr/include/boost/locale/date_time.hpp	/^            date_time operator+(date_time_period_set const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v) const
boost::locale::date_time::operator +	/usr/include/boost/locale/date_time.hpp	/^            date_time operator+(period::period_type f) const$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
boost::locale::date_time::operator +=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator+=(date_time_period const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v)
boost::locale::date_time::operator +=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator+=(date_time_period_set const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v)
boost::locale::date_time::operator +=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator+=(period::period_type f)$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f)
boost::locale::date_time::operator -	/usr/include/boost/locale/date_time.hpp	/^            date_time operator-(date_time_period const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v) const
boost::locale::date_time::operator -	/usr/include/boost/locale/date_time.hpp	/^            date_time operator-(date_time_period_set const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v) const
boost::locale::date_time::operator -	/usr/include/boost/locale/date_time.hpp	/^            date_time operator-(period::period_type f) const$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
boost::locale::date_time::operator -=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator-=(date_time_period const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v)
boost::locale::date_time::operator -=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator-=(date_time_period_set const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v)
boost::locale::date_time::operator -=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator-=(period::period_type f)$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f)
boost::locale::date_time::operator /	/usr/include/boost/locale/date_time.hpp	/^            int operator\/(period::period_type f) const$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
boost::locale::date_time::operator <	/usr/include/boost/locale/date_time.hpp	/^            bool operator<(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
boost::locale::date_time::operator <<	/usr/include/boost/locale/date_time.hpp	/^            date_time operator<<(date_time_period const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v) const
boost::locale::date_time::operator <<	/usr/include/boost/locale/date_time.hpp	/^            date_time operator<<(date_time_period_set const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v) const
boost::locale::date_time::operator <<	/usr/include/boost/locale/date_time.hpp	/^            date_time operator<<(period::period_type f) const$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
boost::locale::date_time::operator <<=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator<<=(date_time_period const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v)
boost::locale::date_time::operator <<=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator<<=(date_time_period_set const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v)
boost::locale::date_time::operator <<=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator<<=(period::period_type f)$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f)
boost::locale::date_time::operator <=	/usr/include/boost/locale/date_time.hpp	/^            bool operator<=(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
boost::locale::date_time::operator =	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator=(date_time const &other);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other)
boost::locale::date_time::operator =	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator=(date_time_period_set const &f);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &f)
boost::locale::date_time::operator ==	/usr/include/boost/locale/date_time.hpp	/^            bool operator==(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
boost::locale::date_time::operator >	/usr/include/boost/locale/date_time.hpp	/^            bool operator>(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
boost::locale::date_time::operator >=	/usr/include/boost/locale/date_time.hpp	/^            bool operator>=(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
boost::locale::date_time::operator >>	/usr/include/boost/locale/date_time.hpp	/^            date_time operator>>(date_time_period const &v) const ;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v) const
boost::locale::date_time::operator >>	/usr/include/boost/locale/date_time.hpp	/^            date_time operator>>(date_time_period_set const &v) const ;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v) const
boost::locale::date_time::operator >>	/usr/include/boost/locale/date_time.hpp	/^            date_time operator>>(period::period_type f) const$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
boost::locale::date_time::operator >>=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator>>=(date_time_period const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v)
boost::locale::date_time::operator >>=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator>>=(date_time_period_set const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v)
boost::locale::date_time::operator >>=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator>>=(period::period_type f)$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f)
boost::locale::date_time::set	/usr/include/boost/locale/date_time.hpp	/^            void set(period::period_type f,int v);$/;"	p	class:boost::locale::date_time	access:public	signature:(period::period_type f,int v)
boost::locale::date_time::swap	/usr/include/boost/locale/date_time.hpp	/^            void swap(date_time &other);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time &other)
boost::locale::date_time::time	/usr/include/boost/locale/date_time.hpp	/^            double time() const;$/;"	p	class:boost::locale::date_time	access:public	signature:() const
boost::locale::date_time::time	/usr/include/boost/locale/date_time.hpp	/^            void time(double v);$/;"	p	class:boost::locale::date_time	access:public	signature:(double v)
boost::locale::date_time::~date_time	/usr/include/boost/locale/date_time.hpp	/^            ~date_time();$/;"	p	class:boost::locale::date_time	access:public	signature:()
boost::locale::date_time_duration	/usr/include/boost/locale/date_time.hpp	/^        class date_time_duration {$/;"	c	namespace:boost::locale
boost::locale::date_time_duration::date_time_duration	/usr/include/boost/locale/date_time.hpp	/^            date_time_duration(date_time const &first,date_time const &second) :$/;"	f	class:boost::locale::date_time_duration	access:public	signature:(date_time const &first,date_time const &second)
boost::locale::date_time_duration::e_	/usr/include/boost/locale/date_time.hpp	/^            date_time const &e_;$/;"	m	class:boost::locale::date_time_duration	access:private
boost::locale::date_time_duration::end	/usr/include/boost/locale/date_time.hpp	/^            date_time const &end() const { return e_; }$/;"	f	class:boost::locale::date_time_duration	access:public	signature:() const
boost::locale::date_time_duration::get	/usr/include/boost/locale/date_time.hpp	/^            int get(period::period_type f) const$/;"	f	class:boost::locale::date_time_duration	access:public	signature:(period::period_type f) const
boost::locale::date_time_duration::operator /	/usr/include/boost/locale/date_time.hpp	/^            int operator \/ (period::period_type f) const$/;"	f	class:boost::locale::date_time_duration	access:public	signature:(period::period_type f) const
boost::locale::date_time_duration::s_	/usr/include/boost/locale/date_time.hpp	/^            date_time const &s_;$/;"	m	class:boost::locale::date_time_duration	access:private
boost::locale::date_time_duration::start	/usr/include/boost/locale/date_time.hpp	/^            date_time const &start() const { return s_; }$/;"	f	class:boost::locale::date_time_duration	access:public	signature:() const
boost::locale::date_time_error	/usr/include/boost/locale/date_time.hpp	/^        class BOOST_SYMBOL_VISIBLE date_time_error : public std::runtime_error {$/;"	c	namespace:boost::locale	inherits:std::runtime_error
boost::locale::date_time_error::date_time_error	/usr/include/boost/locale/date_time.hpp	/^            date_time_error(std::string const &e) : std::runtime_error(e) {}$/;"	f	class:boost::locale::date_time_error	access:public	signature:(std::string const &e)
boost::locale::date_time_period	/usr/include/boost/locale/date_time.hpp	/^        struct date_time_period $/;"	s	namespace:boost::locale
boost::locale::date_time_period::date_time_period	/usr/include/boost/locale/date_time.hpp	/^            date_time_period(period::period_type f=period::period_type(),int v=1) : type(f), value(v) {}$/;"	f	struct:boost::locale::date_time_period	access:public	signature:(period::period_type f=period::period_type(),int v=1)
boost::locale::date_time_period::operator +	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator+() const { return *this; }$/;"	f	struct:boost::locale::date_time_period	access:public	signature:() const
boost::locale::date_time_period::operator -	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator-() const { return date_time_period(type,-value); }$/;"	f	struct:boost::locale::date_time_period	access:public	signature:() const
boost::locale::date_time_period::type	/usr/include/boost/locale/date_time.hpp	/^            period::period_type type;   \/\/\/< The type of period, i.e. era, year, day etc.$/;"	m	struct:boost::locale::date_time_period	access:public
boost::locale::date_time_period::value	/usr/include/boost/locale/date_time.hpp	/^            int value;                  \/\/\/< The value the actual number of \\a periods$/;"	m	struct:boost::locale::date_time_period	access:public
boost::locale::date_time_period_set	/usr/include/boost/locale/date_time.hpp	/^        class date_time_period_set {$/;"	c	namespace:boost::locale
boost::locale::date_time_period_set::add	/usr/include/boost/locale/date_time.hpp	/^            void add(date_time_period f)$/;"	f	class:boost::locale::date_time_period_set	access:public	signature:(date_time_period f)
boost::locale::date_time_period_set::basic_	/usr/include/boost/locale/date_time.hpp	/^            date_time_period basic_[4];$/;"	m	class:boost::locale::date_time_period_set	access:private
boost::locale::date_time_period_set::date_time_period_set	/usr/include/boost/locale/date_time.hpp	/^            date_time_period_set()$/;"	f	class:boost::locale::date_time_period_set	access:public	signature:()
boost::locale::date_time_period_set::date_time_period_set	/usr/include/boost/locale/date_time.hpp	/^            date_time_period_set(date_time_period const &fl)$/;"	f	class:boost::locale::date_time_period_set	access:public	signature:(date_time_period const &fl)
boost::locale::date_time_period_set::date_time_period_set	/usr/include/boost/locale/date_time.hpp	/^            date_time_period_set(period::period_type f)$/;"	f	class:boost::locale::date_time_period_set	access:public	signature:(period::period_type f)
boost::locale::date_time_period_set::operator []	/usr/include/boost/locale/date_time.hpp	/^            date_time_period const &operator[](size_t n) const $/;"	f	class:boost::locale::date_time_period_set	access:public	signature:(size_t n) const
boost::locale::date_time_period_set::periods_	/usr/include/boost/locale/date_time.hpp	/^            std::vector<date_time_period> periods_;$/;"	m	class:boost::locale::date_time_period_set	access:private
boost::locale::date_time_period_set::size	/usr/include/boost/locale/date_time.hpp	/^            size_t size() const$/;"	f	class:boost::locale::date_time_period_set	access:public	signature:() const
boost::locale::details	/usr/include/boost/locale/format.hpp	/^        namespace details {$/;"	n	namespace:boost::locale
boost::locale::details	/usr/include/boost/locale/message.hpp	/^        namespace details {$/;"	n	namespace:boost::locale
boost::locale::details::format_parser	/usr/include/boost/locale/format.hpp	/^            class BOOST_LOCALE_DECL format_parser  {$/;"	c	namespace:boost::locale::details
boost::locale::details::format_parser::d	/usr/include/boost/locale/format.hpp	/^                std::auto_ptr<data> d;$/;"	m	class:boost::locale::details::format_parser	access:private
boost::locale::details::format_parser::format_parser	/usr/include/boost/locale/format.hpp	/^                format_parser(format_parser const &);$/;"	p	class:boost::locale::details::format_parser	access:private	signature:(format_parser const &)
boost::locale::details::format_parser::format_parser	/usr/include/boost/locale/format.hpp	/^                format_parser(std::ios_base &ios,void *,void (*imbuer)(void *,std::locale const &));$/;"	p	class:boost::locale::details::format_parser	access:public	signature:(std::ios_base &ios,void *,void (*imbuer)(void *,std::locale const &))
boost::locale::details::format_parser::get_position	/usr/include/boost/locale/format.hpp	/^                unsigned get_position();$/;"	p	class:boost::locale::details::format_parser	access:public	signature:()
boost::locale::details::format_parser::imbue	/usr/include/boost/locale/format.hpp	/^                void imbue(std::locale const &);$/;"	p	class:boost::locale::details::format_parser	access:private	signature:(std::locale const &)
boost::locale::details::format_parser::ios_	/usr/include/boost/locale/format.hpp	/^                std::ios_base &ios_;$/;"	m	class:boost::locale::details::format_parser	access:private
boost::locale::details::format_parser::operator =	/usr/include/boost/locale/format.hpp	/^                void operator=(format_parser const &);$/;"	p	class:boost::locale::details::format_parser	access:private	signature:(format_parser const &)
boost::locale::details::format_parser::restore	/usr/include/boost/locale/format.hpp	/^                void restore();$/;"	p	class:boost::locale::details::format_parser	access:public	signature:()
boost::locale::details::format_parser::set_flag_with_str	/usr/include/boost/locale/format.hpp	/^                void set_flag_with_str(std::string const &key,std::basic_string<CharType> const &value)$/;"	f	class:boost::locale::details::format_parser	access:public	signature:(std::string const &key,std::basic_string<CharType> const &value)
boost::locale::details::format_parser::set_one_flag	/usr/include/boost/locale/format.hpp	/^                void set_one_flag(std::string const &key,std::string const &value);$/;"	p	class:boost::locale::details::format_parser	access:public	signature:(std::string const &key,std::string const &value)
boost::locale::details::format_parser::~format_parser	/usr/include/boost/locale/format.hpp	/^                ~format_parser();$/;"	p	class:boost::locale::details::format_parser	access:public	signature:()
boost::locale::details::formattible	/usr/include/boost/locale/format.hpp	/^            struct formattible {$/;"	s	namespace:boost::locale::details
boost::locale::details::formattible::formattible	/usr/include/boost/locale/format.hpp	/^                formattible() :$/;"	f	struct:boost::locale::details::formattible	access:public	signature:()
boost::locale::details::formattible::formattible	/usr/include/boost/locale/format.hpp	/^                formattible(Type const &value)$/;"	f	struct:boost::locale::details::formattible	access:public	signature:(Type const &value)
boost::locale::details::formattible::formattible	/usr/include/boost/locale/format.hpp	/^                formattible(formattible const &other) :$/;"	f	struct:boost::locale::details::formattible	access:public	signature:(formattible const &other)
boost::locale::details::formattible::operator <<	/usr/include/boost/locale/format.hpp	/^                friend stream_type &operator<<(stream_type &out,formattible const &fmt)$/;"	f	struct:boost::locale::details::formattible	access:friend	signature:(stream_type &out,formattible const &fmt)
boost::locale::details::formattible::operator =	/usr/include/boost/locale/format.hpp	/^                formattible const &operator=(Type const &other)$/;"	f	struct:boost::locale::details::formattible	access:public	signature:(Type const &other)
boost::locale::details::formattible::operator =	/usr/include/boost/locale/format.hpp	/^                formattible const &operator=(formattible const &other)$/;"	f	struct:boost::locale::details::formattible	access:public	signature:(formattible const &other)
boost::locale::details::formattible::pointer_	/usr/include/boost/locale/format.hpp	/^                void const *pointer_;$/;"	m	struct:boost::locale::details::formattible	access:private
boost::locale::details::formattible::stream_type	/usr/include/boost/locale/format.hpp	/^                typedef std::basic_ostream<CharType> stream_type;$/;"	t	struct:boost::locale::details::formattible	access:public
boost::locale::details::formattible::void_write	/usr/include/boost/locale/format.hpp	/^                static void void_write(stream_type &output,void const * \/*ptr*\/)$/;"	f	struct:boost::locale::details::formattible	access:private	signature:(stream_type &output,void const * )
boost::locale::details::formattible::write	/usr/include/boost/locale/format.hpp	/^                static void write(stream_type &output,void const *ptr)$/;"	f	struct:boost::locale::details::formattible	access:private	signature:(stream_type &output,void const *ptr)
boost::locale::details::formattible::writer_	/usr/include/boost/locale/format.hpp	/^                writer_type writer_;$/;"	m	struct:boost::locale::details::formattible	access:private
boost::locale::details::formattible::writer_type	/usr/include/boost/locale/format.hpp	/^                typedef void (*writer_type)(stream_type &output,void const *ptr);$/;"	t	struct:boost::locale::details::formattible	access:public
boost::locale::details::is_us_ascii_char	/usr/include/boost/locale/message.hpp	/^            inline bool is_us_ascii_char(char c)$/;"	f	namespace:boost::locale::details	signature:(char c)
boost::locale::details::is_us_ascii_string	/usr/include/boost/locale/message.hpp	/^            inline bool is_us_ascii_string(char const *msg)$/;"	f	namespace:boost::locale::details	signature:(char const *msg)
boost::locale::details::string_cast_traits	/usr/include/boost/locale/message.hpp	/^            struct string_cast_traits {$/;"	s	namespace:boost::locale::details
boost::locale::details::string_cast_traits	/usr/include/boost/locale/message.hpp	/^            struct string_cast_traits<char> {$/;"	s	namespace:boost::locale::details
boost::locale::details::string_cast_traits::cast	/usr/include/boost/locale/message.hpp	/^                static CharType const *cast(CharType const *msg,std::basic_string<CharType> &\/*unused*\/)$/;"	f	struct:boost::locale::details::string_cast_traits	access:public	signature:(CharType const *msg,std::basic_string<CharType> & )
boost::locale::details::string_cast_traits::cast	/usr/include/boost/locale/message.hpp	/^                static char const *cast(char const *msg,std::string &buffer)$/;"	f	struct:boost::locale::details::string_cast_traits	access:public	signature:(char const *msg,std::string &buffer)
boost::locale::dgettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  dgettext(  char const *domain,$/;"	f	namespace:boost::locale	signature:( char const *domain, CharType const *id, std::locale const &loc=std::locale())
boost::locale::dngettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  dngettext( char const *domain,$/;"	f	namespace:boost::locale	signature:( char const *domain, CharType const *s, CharType const *p, int n, std::locale const &loc=std::locale())
boost::locale::dnpgettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  dnpgettext(char const *domain,$/;"	f	namespace:boost::locale	signature:(char const *domain, CharType const *context, CharType const *s, CharType const *p, int n, std::locale const &loc=std::locale())
boost::locale::dpgettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  dpgettext( char const *domain,$/;"	f	namespace:boost::locale	signature:( char const *domain, CharType const *context, CharType const *id, std::locale const &loc=std::locale())
boost::locale::flags	/usr/include/boost/locale/formatting.hpp	/^        namespace flags {$/;"	n	namespace:boost::locale
boost::locale::flags::currency	/usr/include/boost/locale/formatting.hpp	/^                currency            = 2,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::currency_default	/usr/include/boost/locale/formatting.hpp	/^                currency_default    = 0 << 5,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::currency_flags_mask	/usr/include/boost/locale/formatting.hpp	/^                currency_flags_mask = 3 << 5,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::currency_iso	/usr/include/boost/locale/formatting.hpp	/^                currency_iso        = 1 << 5,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::currency_national	/usr/include/boost/locale/formatting.hpp	/^                currency_national   = 2 << 5,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::date	/usr/include/boost/locale/formatting.hpp	/^                date                = 4,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::date_default	/usr/include/boost/locale/formatting.hpp	/^                date_default        = 0 << 10,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::date_flags_mask	/usr/include/boost/locale/formatting.hpp	/^                date_flags_mask     = 7 << 10,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::date_full	/usr/include/boost/locale/formatting.hpp	/^                date_full           = 4 << 10,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::date_long	/usr/include/boost/locale/formatting.hpp	/^                date_long           = 3 << 10,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::date_medium	/usr/include/boost/locale/formatting.hpp	/^                date_medium         = 2 << 10,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::date_short	/usr/include/boost/locale/formatting.hpp	/^                date_short          = 1 << 10,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::datetime	/usr/include/boost/locale/formatting.hpp	/^                datetime            = 6,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::datetime_flags_mask	/usr/include/boost/locale/formatting.hpp	/^                datetime_flags_mask = date_flags_mask | time_flags_mask$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::datetime_pattern	/usr/include/boost/locale/formatting.hpp	/^                datetime_pattern,   \/\/\/< strftime like formatting$/;"	e	enum:boost::locale::flags::__anon9
boost::locale::flags::display_flags_mask	/usr/include/boost/locale/formatting.hpp	/^                display_flags_mask  = 31,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::display_flags_type	/usr/include/boost/locale/formatting.hpp	/^            } display_flags_type;$/;"	t	namespace:boost::locale::flags	typeref:enum:boost::locale::flags::__anon8
boost::locale::flags::domain_id	/usr/include/boost/locale/formatting.hpp	/^                domain_id           \/\/\/< Domain code - for message formatting$/;"	e	enum:boost::locale::flags::__anon10
boost::locale::flags::number	/usr/include/boost/locale/formatting.hpp	/^                number              = 1,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::ordinal	/usr/include/boost/locale/formatting.hpp	/^                ordinal             = 9,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::pattern_type	/usr/include/boost/locale/formatting.hpp	/^            } pattern_type;$/;"	t	namespace:boost::locale::flags	typeref:enum:boost::locale::flags::__anon9
boost::locale::flags::percent	/usr/include/boost/locale/formatting.hpp	/^                percent             = 3,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::posix	/usr/include/boost/locale/formatting.hpp	/^                posix               = 0,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::spellout	/usr/include/boost/locale/formatting.hpp	/^                spellout            = 8,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::strftime	/usr/include/boost/locale/formatting.hpp	/^                strftime            = 7,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::time	/usr/include/boost/locale/formatting.hpp	/^                time                = 5,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::time_default	/usr/include/boost/locale/formatting.hpp	/^                time_default        = 0 << 7,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::time_flags_mask	/usr/include/boost/locale/formatting.hpp	/^                time_flags_mask     = 7 << 7,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::time_full	/usr/include/boost/locale/formatting.hpp	/^                time_full           = 4 << 7,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::time_long	/usr/include/boost/locale/formatting.hpp	/^                time_long           = 3 << 7,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::time_medium	/usr/include/boost/locale/formatting.hpp	/^                time_medium         = 2 << 7,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::time_short	/usr/include/boost/locale/formatting.hpp	/^                time_short          = 1 << 7,$/;"	e	enum:boost::locale::flags::__anon8
boost::locale::flags::time_zone_id	/usr/include/boost/locale/formatting.hpp	/^                time_zone_id        \/\/\/< time zone name$/;"	e	enum:boost::locale::flags::__anon9
boost::locale::flags::value_type	/usr/include/boost/locale/formatting.hpp	/^            } value_type;$/;"	t	namespace:boost::locale::flags	typeref:enum:boost::locale::flags::__anon10
boost::locale::fold_case	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> fold_case(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())
boost::locale::fold_case	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> fold_case(CharType const *str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *str,std::locale const &loc=std::locale())
boost::locale::fold_case	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> fold_case(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())
boost::locale::format	/usr/include/boost/locale/format.hpp	/^        typedef basic_format<char> format;$/;"	t	namespace:boost::locale
boost::locale::formatting_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     formatting_facet= 1 << 2;   \/\/\/< Generate numbers, currency, date-time formatting facets$/;"	m	namespace:boost::locale
boost::locale::generator	/usr/include/boost/locale/generator.hpp	/^        class BOOST_LOCALE_DECL generator {$/;"	c	namespace:boost::locale
boost::locale::generator::add_messages_domain	/usr/include/boost/locale/generator.hpp	/^            void add_messages_domain(std::string const &domain);$/;"	p	class:boost::locale::generator	access:public	signature:(std::string const &domain)
boost::locale::generator::add_messages_path	/usr/include/boost/locale/generator.hpp	/^            void add_messages_path(std::string const &path);$/;"	p	class:boost::locale::generator	access:public	signature:(std::string const &path)
boost::locale::generator::categories	/usr/include/boost/locale/generator.hpp	/^            locale_category_type categories() const;$/;"	p	class:boost::locale::generator	access:public	signature:() const
boost::locale::generator::categories	/usr/include/boost/locale/generator.hpp	/^            void categories(locale_category_type cats);$/;"	p	class:boost::locale::generator	access:public	signature:(locale_category_type cats)
boost::locale::generator::characters	/usr/include/boost/locale/generator.hpp	/^            character_facet_type characters() const;$/;"	p	class:boost::locale::generator	access:public	signature:() const
boost::locale::generator::characters	/usr/include/boost/locale/generator.hpp	/^            void characters(character_facet_type chars);$/;"	p	class:boost::locale::generator	access:public	signature:(character_facet_type chars)
boost::locale::generator::clear_cache	/usr/include/boost/locale/generator.hpp	/^            void clear_cache();$/;"	p	class:boost::locale::generator	access:public	signature:()
boost::locale::generator::clear_domains	/usr/include/boost/locale/generator.hpp	/^            void clear_domains();$/;"	p	class:boost::locale::generator	access:public	signature:()
boost::locale::generator::clear_options	/usr/include/boost/locale/generator.hpp	/^            void clear_options();$/;"	p	class:boost::locale::generator	access:public	signature:()
boost::locale::generator::clear_paths	/usr/include/boost/locale/generator.hpp	/^            void clear_paths();$/;"	p	class:boost::locale::generator	access:public	signature:()
boost::locale::generator::d	/usr/include/boost/locale/generator.hpp	/^            std::auto_ptr<data> d;$/;"	m	class:boost::locale::generator	access:private
boost::locale::generator::generate	/usr/include/boost/locale/generator.hpp	/^            std::locale generate(std::locale const &base,std::string const &id) const;$/;"	p	class:boost::locale::generator	access:public	signature:(std::locale const &base,std::string const &id) const
boost::locale::generator::generate	/usr/include/boost/locale/generator.hpp	/^            std::locale generate(std::string const &id) const;$/;"	p	class:boost::locale::generator	access:public	signature:(std::string const &id) const
boost::locale::generator::generator	/usr/include/boost/locale/generator.hpp	/^            generator();$/;"	p	class:boost::locale::generator	access:public	signature:()
boost::locale::generator::generator	/usr/include/boost/locale/generator.hpp	/^            generator(generator const &);$/;"	p	class:boost::locale::generator	access:private	signature:(generator const &)
boost::locale::generator::generator	/usr/include/boost/locale/generator.hpp	/^            generator(localization_backend_manager const &);$/;"	p	class:boost::locale::generator	access:public	signature:(localization_backend_manager const &)
boost::locale::generator::locale_cache_enabled	/usr/include/boost/locale/generator.hpp	/^            bool locale_cache_enabled() const;$/;"	p	class:boost::locale::generator	access:public	signature:() const
boost::locale::generator::locale_cache_enabled	/usr/include/boost/locale/generator.hpp	/^            void locale_cache_enabled(bool on);$/;"	p	class:boost::locale::generator	access:public	signature:(bool on)
boost::locale::generator::operator ()	/usr/include/boost/locale/generator.hpp	/^            std::locale operator()(std::string const &id) const$/;"	f	class:boost::locale::generator	access:public	signature:(std::string const &id) const
boost::locale::generator::operator =	/usr/include/boost/locale/generator.hpp	/^            void operator=(generator const &);$/;"	p	class:boost::locale::generator	access:private	signature:(generator const &)
boost::locale::generator::set_all_options	/usr/include/boost/locale/generator.hpp	/^            void set_all_options(shared_ptr<localization_backend> backend,std::string const &id) const;$/;"	p	class:boost::locale::generator	access:private	signature:(shared_ptr<localization_backend> backend,std::string const &id) const
boost::locale::generator::set_default_messages_domain	/usr/include/boost/locale/generator.hpp	/^            void set_default_messages_domain(std::string const &domain);$/;"	p	class:boost::locale::generator	access:public	signature:(std::string const &domain)
boost::locale::generator::set_option	/usr/include/boost/locale/generator.hpp	/^            void set_option(std::string const &name,std::string const &value);$/;"	p	class:boost::locale::generator	access:public	signature:(std::string const &name,std::string const &value)
boost::locale::generator::use_ansi_encoding	/usr/include/boost/locale/generator.hpp	/^            bool use_ansi_encoding() const;$/;"	p	class:boost::locale::generator	access:public	signature:() const
boost::locale::generator::use_ansi_encoding	/usr/include/boost/locale/generator.hpp	/^            void use_ansi_encoding(bool enc);$/;"	p	class:boost::locale::generator	access:public	signature:(bool enc)
boost::locale::generator::~generator	/usr/include/boost/locale/generator.hpp	/^            ~generator();$/;"	p	class:boost::locale::generator	access:public	signature:()
boost::locale::gettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType> gettext(CharType const *id,$/;"	f	namespace:boost::locale	signature:(CharType const *id, std::locale const &loc=std::locale())
boost::locale::gnu_gettext	/usr/include/boost/locale/gnu_gettext.hpp	/^namespace gnu_gettext {$/;"	n	namespace:boost::locale
boost::locale::gnu_gettext::create_messages_facet	/usr/include/boost/locale/gnu_gettext.hpp	/^    BOOST_LOCALE_DECL message_format<char16_t> *create_messages_facet(messages_info const &info);$/;"	p	namespace:boost::locale::gnu_gettext	signature:(messages_info const &info)
boost::locale::gnu_gettext::create_messages_facet	/usr/include/boost/locale/gnu_gettext.hpp	/^    BOOST_LOCALE_DECL message_format<char32_t> *create_messages_facet(messages_info const &info);$/;"	p	namespace:boost::locale::gnu_gettext	signature:(messages_info const &info)
boost::locale::gnu_gettext::create_messages_facet	/usr/include/boost/locale/gnu_gettext.hpp	/^    BOOST_LOCALE_DECL message_format<char> *create_messages_facet(messages_info const &info);$/;"	p	namespace:boost::locale::gnu_gettext	signature:(messages_info const &info)
boost::locale::gnu_gettext::create_messages_facet	/usr/include/boost/locale/gnu_gettext.hpp	/^    BOOST_LOCALE_DECL message_format<wchar_t> *create_messages_facet(messages_info const &info);$/;"	p	namespace:boost::locale::gnu_gettext	signature:(messages_info const &info)
boost::locale::gnu_gettext::create_messages_facet	/usr/include/boost/locale/gnu_gettext.hpp	/^    message_format<CharType> *create_messages_facet(messages_info const &info);$/;"	p	namespace:boost::locale::gnu_gettext	signature:(messages_info const &info)
boost::locale::gnu_gettext::messages_info	/usr/include/boost/locale/gnu_gettext.hpp	/^    struct messages_info {$/;"	s	namespace:boost::locale::gnu_gettext
boost::locale::gnu_gettext::messages_info::callback	/usr/include/boost/locale/gnu_gettext.hpp	/^        callback_type callback;$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
boost::locale::gnu_gettext::messages_info::callback_type	/usr/include/boost/locale/gnu_gettext.hpp	/^                > callback_type;$/;"	t	struct:boost::locale::gnu_gettext::messages_info	access:public
boost::locale::gnu_gettext::messages_info::country	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::string country;    \/\/\/< The country we load the catalog for, like "US", "IL"$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
boost::locale::gnu_gettext::messages_info::domain	/usr/include/boost/locale/gnu_gettext.hpp	/^        struct domain {$/;"	s	struct:boost::locale::gnu_gettext::messages_info	access:public
boost::locale::gnu_gettext::messages_info::domain::domain	/usr/include/boost/locale/gnu_gettext.hpp	/^            domain() {}$/;"	f	struct:boost::locale::gnu_gettext::messages_info::domain	access:public	signature:()
boost::locale::gnu_gettext::messages_info::domain::domain	/usr/include/boost/locale/gnu_gettext.hpp	/^            domain(std::string const &n) $/;"	f	struct:boost::locale::gnu_gettext::messages_info::domain	access:public	signature:(std::string const &n)
boost::locale::gnu_gettext::messages_info::domain::encoding	/usr/include/boost/locale/gnu_gettext.hpp	/^            std::string encoding;   \/\/\/< The character encoding for the domain$/;"	m	struct:boost::locale::gnu_gettext::messages_info::domain	access:public
boost::locale::gnu_gettext::messages_info::domain::name	/usr/include/boost/locale/gnu_gettext.hpp	/^            std::string name; \/\/\/< The name of the domain$/;"	m	struct:boost::locale::gnu_gettext::messages_info::domain	access:public
boost::locale::gnu_gettext::messages_info::domain::operator !=	/usr/include/boost/locale/gnu_gettext.hpp	/^            bool operator!=(domain const &other) const$/;"	f	struct:boost::locale::gnu_gettext::messages_info::domain	access:public	signature:(domain const &other) const
boost::locale::gnu_gettext::messages_info::domain::operator ==	/usr/include/boost/locale/gnu_gettext.hpp	/^            bool operator==(domain const &other) const$/;"	f	struct:boost::locale::gnu_gettext::messages_info::domain	access:public	signature:(domain const &other) const
boost::locale::gnu_gettext::messages_info::domains	/usr/include/boost/locale/gnu_gettext.hpp	/^        domains_type domains;           \/\/\/< Message domains - application name, like my_app. So files named my_app.mo$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
boost::locale::gnu_gettext::messages_info::domains_type	/usr/include/boost/locale/gnu_gettext.hpp	/^        typedef std::vector<domain> domains_type;   \/\/\/< Type that defines a list of domains that are loaded$/;"	t	struct:boost::locale::gnu_gettext::messages_info	access:public
boost::locale::gnu_gettext::messages_info::encoding	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::string encoding;   \/\/\/< Required target charset encoding. Ignored for wide characters.$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
boost::locale::gnu_gettext::messages_info::language	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::string language;   \/\/\/< The language we load the catalog for, like "ru", "en", "de" $/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
boost::locale::gnu_gettext::messages_info::locale_category	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::string locale_category; \/\/\/< Locale category, is set by default to LC_MESSAGES, but may be changed$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
boost::locale::gnu_gettext::messages_info::messages_info	/usr/include/boost/locale/gnu_gettext.hpp	/^        messages_info() :$/;"	f	struct:boost::locale::gnu_gettext::messages_info	access:public	signature:()
boost::locale::gnu_gettext::messages_info::paths	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::vector<std::string> paths; \/\/\/< Paths to search files in. Under MS Windows it uses encoding$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
boost::locale::gnu_gettext::messages_info::variant	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::string variant;    \/\/\/< Language variant, like "euro" so it would look for catalog like de_DE\\@euro$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
boost::locale::hold_ptr	/usr/include/boost/locale/hold_ptr.hpp	/^    class hold_ptr {$/;"	c	namespace:boost::locale
boost::locale::hold_ptr::get	/usr/include/boost/locale/hold_ptr.hpp	/^        T *get() { return ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
boost::locale::hold_ptr::get	/usr/include/boost/locale/hold_ptr.hpp	/^        T const *get() const { return ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:() const
boost::locale::hold_ptr::hold_ptr	/usr/include/boost/locale/hold_ptr.hpp	/^        explicit hold_ptr(T *v) : ptr_(v) {}$/;"	f	class:boost::locale::hold_ptr	access:public	signature:(T *v)
boost::locale::hold_ptr::hold_ptr	/usr/include/boost/locale/hold_ptr.hpp	/^        hold_ptr() : ptr_(0) {}$/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
boost::locale::hold_ptr::hold_ptr	/usr/include/boost/locale/hold_ptr.hpp	/^        hold_ptr(hold_ptr const &other); \/\/ non copyable $/;"	p	class:boost::locale::hold_ptr	access:private	signature:(hold_ptr const &other)
boost::locale::hold_ptr::operator *	/usr/include/boost/locale/hold_ptr.hpp	/^        T &operator *() { return *ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
boost::locale::hold_ptr::operator *	/usr/include/boost/locale/hold_ptr.hpp	/^        T const &operator *() const { return *ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:() const
boost::locale::hold_ptr::operator ->	/usr/include/boost/locale/hold_ptr.hpp	/^        T *operator->() { return ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
boost::locale::hold_ptr::operator ->	/usr/include/boost/locale/hold_ptr.hpp	/^        T const *operator->() const { return ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:() const
boost::locale::hold_ptr::operator =	/usr/include/boost/locale/hold_ptr.hpp	/^        hold_ptr const &operator=(hold_ptr const &other); \/\/ non assignable$/;"	p	class:boost::locale::hold_ptr	access:private	signature:(hold_ptr const &other)
boost::locale::hold_ptr::ptr_	/usr/include/boost/locale/hold_ptr.hpp	/^        T *ptr_;$/;"	m	class:boost::locale::hold_ptr	access:private
boost::locale::hold_ptr::release	/usr/include/boost/locale/hold_ptr.hpp	/^        T *release() { T *tmp=ptr_; ptr_=0; return tmp; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
boost::locale::hold_ptr::reset	/usr/include/boost/locale/hold_ptr.hpp	/^        void reset(T *p=0)$/;"	f	class:boost::locale::hold_ptr	access:public	signature:(T *p=0)
boost::locale::hold_ptr::swap	/usr/include/boost/locale/hold_ptr.hpp	/^        void swap(hold_ptr &other)$/;"	f	class:boost::locale::hold_ptr	access:public	signature:(hold_ptr &other)
boost::locale::hold_ptr::~hold_ptr	/usr/include/boost/locale/hold_ptr.hpp	/^        ~hold_ptr() $/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
boost::locale::info	/usr/include/boost/locale/info.hpp	/^        class BOOST_LOCALE_DECL info : public std::locale::facet$/;"	c	namespace:boost::locale	inherits:std::locale::facet
boost::locale::info::__get_id	/usr/include/boost/locale/info.hpp	/^            std::locale::id& __get_id (void) const { return id; }$/;"	f	class:boost::locale::info	access:public	signature:(void) const
boost::locale::info::country	/usr/include/boost/locale/info.hpp	/^            std::string country() const$/;"	f	class:boost::locale::info	access:public	signature:() const
boost::locale::info::country_property	/usr/include/boost/locale/info.hpp	/^                country_property,   \/\/\/< ISO 3166 country id$/;"	e	enum:boost::locale::info::string_propery
boost::locale::info::encoding	/usr/include/boost/locale/info.hpp	/^            std::string encoding() const$/;"	f	class:boost::locale::info	access:public	signature:() const
boost::locale::info::encoding_property	/usr/include/boost/locale/info.hpp	/^                encoding_property,   \/\/\/< encoding name$/;"	e	enum:boost::locale::info::string_propery
boost::locale::info::get_integer_property	/usr/include/boost/locale/info.hpp	/^            virtual int get_integer_property(integer_property v) const = 0;$/;"	p	class:boost::locale::info	access:protected	signature:(integer_property v) const
boost::locale::info::get_string_property	/usr/include/boost/locale/info.hpp	/^            virtual std::string get_string_property(string_propery v) const = 0;$/;"	p	class:boost::locale::info	access:protected	signature:(string_propery v) const
boost::locale::info::id	/usr/include/boost/locale/info.hpp	/^            static std::locale::id id; \/\/\/< This member uniquely defines this facet, required by STL $/;"	m	class:boost::locale::info	access:public
boost::locale::info::info	/usr/include/boost/locale/info.hpp	/^            info(size_t refs = 0) : std::locale::facet(refs)$/;"	f	class:boost::locale::info	access:public	signature:(size_t refs = 0)
boost::locale::info::integer_property	/usr/include/boost/locale/info.hpp	/^            enum integer_property {$/;"	g	class:boost::locale::info	access:public
boost::locale::info::language	/usr/include/boost/locale/info.hpp	/^            std::string language() const $/;"	f	class:boost::locale::info	access:public	signature:() const
boost::locale::info::language_property	/usr/include/boost/locale/info.hpp	/^                language_property,  \/\/\/< ISO 639 language id$/;"	e	enum:boost::locale::info::string_propery
boost::locale::info::name	/usr/include/boost/locale/info.hpp	/^            std::string name() const$/;"	f	class:boost::locale::info	access:public	signature:() const
boost::locale::info::name_property	/usr/include/boost/locale/info.hpp	/^                name_property       \/\/\/< locale name$/;"	e	enum:boost::locale::info::string_propery
boost::locale::info::string_propery	/usr/include/boost/locale/info.hpp	/^            enum string_propery {$/;"	g	class:boost::locale::info	access:public
boost::locale::info::utf8	/usr/include/boost/locale/info.hpp	/^            bool utf8() const$/;"	f	class:boost::locale::info	access:public	signature:() const
boost::locale::info::utf8_property	/usr/include/boost/locale/info.hpp	/^                utf8_property       \/\/\/< Non zero value if uses UTF-8 encoding$/;"	e	enum:boost::locale::info::integer_property
boost::locale::info::variant	/usr/include/boost/locale/info.hpp	/^            std::string variant() const$/;"	f	class:boost::locale::info	access:public	signature:() const
boost::locale::info::variant_property	/usr/include/boost/locale/info.hpp	/^                variant_property,   \/\/\/< Variant for locale$/;"	e	enum:boost::locale::info::string_propery
boost::locale::information_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     information_facet = 1 << 17;   \/\/\/< Generate general locale information facet$/;"	m	namespace:boost::locale
boost::locale::ios_info	/usr/include/boost/locale/formatting.hpp	/^        class BOOST_LOCALE_DECL ios_info {$/;"	c	namespace:boost::locale
boost::locale::ios_info::currency_flags	/usr/include/boost/locale/formatting.hpp	/^            uint64_t currency_flags() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
boost::locale::ios_info::currency_flags	/usr/include/boost/locale/formatting.hpp	/^            void currency_flags(uint64_t flags);$/;"	p	class:boost::locale::ios_info	access:public	signature:(uint64_t flags)
boost::locale::ios_info::d	/usr/include/boost/locale/formatting.hpp	/^            data *d;$/;"	m	class:boost::locale::ios_info	access:private
boost::locale::ios_info::date_flags	/usr/include/boost/locale/formatting.hpp	/^            uint64_t date_flags() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
boost::locale::ios_info::date_flags	/usr/include/boost/locale/formatting.hpp	/^            void date_flags(uint64_t flags);$/;"	p	class:boost::locale::ios_info	access:public	signature:(uint64_t flags)
boost::locale::ios_info::date_time_pattern	/usr/include/boost/locale/formatting.hpp	/^            std::basic_string<CharType> date_time_pattern() const$/;"	f	class:boost::locale::ios_info	access:public	signature:() const
boost::locale::ios_info::date_time_pattern	/usr/include/boost/locale/formatting.hpp	/^            void date_time_pattern(std::basic_string<CharType> const &str)$/;"	f	class:boost::locale::ios_info	access:public	signature:(std::basic_string<CharType> const &str)
boost::locale::ios_info::date_time_pattern_set	/usr/include/boost/locale/formatting.hpp	/^            string_set &date_time_pattern_set();$/;"	p	class:boost::locale::ios_info	access:private	signature:()
boost::locale::ios_info::date_time_pattern_set	/usr/include/boost/locale/formatting.hpp	/^            string_set const &date_time_pattern_set() const;$/;"	p	class:boost::locale::ios_info	access:private	signature:() const
boost::locale::ios_info::datetime_	/usr/include/boost/locale/formatting.hpp	/^            string_set datetime_;$/;"	m	class:boost::locale::ios_info	access:private
boost::locale::ios_info::datetime_flags	/usr/include/boost/locale/formatting.hpp	/^            uint64_t datetime_flags() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
boost::locale::ios_info::datetime_flags	/usr/include/boost/locale/formatting.hpp	/^            void datetime_flags(uint64_t flags);$/;"	p	class:boost::locale::ios_info	access:public	signature:(uint64_t flags)
boost::locale::ios_info::display_flags	/usr/include/boost/locale/formatting.hpp	/^            uint64_t display_flags() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
boost::locale::ios_info::display_flags	/usr/include/boost/locale/formatting.hpp	/^            void display_flags(uint64_t flags);$/;"	p	class:boost::locale::ios_info	access:public	signature:(uint64_t flags)
boost::locale::ios_info::domain_id	/usr/include/boost/locale/formatting.hpp	/^            int domain_id() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
boost::locale::ios_info::domain_id	/usr/include/boost/locale/formatting.hpp	/^            void domain_id(int);$/;"	p	class:boost::locale::ios_info	access:public	signature:(int)
boost::locale::ios_info::domain_id_	/usr/include/boost/locale/formatting.hpp	/^            int domain_id_;$/;"	m	class:boost::locale::ios_info	access:private
boost::locale::ios_info::flags_	/usr/include/boost/locale/formatting.hpp	/^            uint64_t flags_;$/;"	m	class:boost::locale::ios_info	access:private
boost::locale::ios_info::get	/usr/include/boost/locale/formatting.hpp	/^            static ios_info &get(std::ios_base &ios);$/;"	p	class:boost::locale::ios_info	access:public	signature:(std::ios_base &ios)
boost::locale::ios_info::ios_info	/usr/include/boost/locale/formatting.hpp	/^            ios_info();$/;"	p	class:boost::locale::ios_info	access:public	signature:()
boost::locale::ios_info::ios_info	/usr/include/boost/locale/formatting.hpp	/^            ios_info(ios_info const &);$/;"	p	class:boost::locale::ios_info	access:public	signature:(ios_info const &)
boost::locale::ios_info::on_imbue	/usr/include/boost/locale/formatting.hpp	/^            void on_imbue();$/;"	p	class:boost::locale::ios_info	access:public	signature:()
boost::locale::ios_info::operator =	/usr/include/boost/locale/formatting.hpp	/^            ios_info const &operator=(ios_info const &);$/;"	p	class:boost::locale::ios_info	access:public	signature:(ios_info const &)
boost::locale::ios_info::string_set	/usr/include/boost/locale/formatting.hpp	/^            class BOOST_LOCALE_DECL string_set {$/;"	c	class:boost::locale::ios_info	access:private
boost::locale::ios_info::string_set::get	/usr/include/boost/locale/formatting.hpp	/^                std::basic_string<Char> get() const$/;"	f	class:boost::locale::ios_info::string_set	access:public	signature:() const
boost::locale::ios_info::string_set::operator =	/usr/include/boost/locale/formatting.hpp	/^                string_set const &operator=(string_set const &other);$/;"	p	class:boost::locale::ios_info::string_set	access:public	signature:(string_set const &other)
boost::locale::ios_info::string_set::ptr	/usr/include/boost/locale/formatting.hpp	/^                char *ptr;$/;"	m	class:boost::locale::ios_info::string_set	access:private
boost::locale::ios_info::string_set::set	/usr/include/boost/locale/formatting.hpp	/^                void set(Char const *s)$/;"	f	class:boost::locale::ios_info::string_set	access:public	signature:(Char const *s)
boost::locale::ios_info::string_set::size	/usr/include/boost/locale/formatting.hpp	/^                size_t size;$/;"	m	class:boost::locale::ios_info::string_set	access:private
boost::locale::ios_info::string_set::std::type	/usr/include/boost/locale/formatting.hpp	/^                std::type_info const *type;$/;"	m	class:boost::locale::ios_info::string_set::std	access:private
boost::locale::ios_info::string_set::string_set	/usr/include/boost/locale/formatting.hpp	/^                string_set(); $/;"	p	class:boost::locale::ios_info::string_set	access:public	signature:()
boost::locale::ios_info::string_set::string_set	/usr/include/boost/locale/formatting.hpp	/^                string_set(string_set const &other);$/;"	p	class:boost::locale::ios_info::string_set	access:public	signature:(string_set const &other)
boost::locale::ios_info::string_set::swap	/usr/include/boost/locale/formatting.hpp	/^                void swap(string_set &other);$/;"	p	class:boost::locale::ios_info::string_set	access:public	signature:(string_set &other)
boost::locale::ios_info::string_set::~string_set	/usr/include/boost/locale/formatting.hpp	/^                ~string_set();$/;"	p	class:boost::locale::ios_info::string_set	access:public	signature:()
boost::locale::ios_info::time_flags	/usr/include/boost/locale/formatting.hpp	/^            uint64_t time_flags() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
boost::locale::ios_info::time_flags	/usr/include/boost/locale/formatting.hpp	/^            void time_flags(uint64_t flags);$/;"	p	class:boost::locale::ios_info	access:public	signature:(uint64_t flags)
boost::locale::ios_info::time_zone	/usr/include/boost/locale/formatting.hpp	/^            std::string time_zone() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
boost::locale::ios_info::time_zone	/usr/include/boost/locale/formatting.hpp	/^            void time_zone(std::string const &);$/;"	p	class:boost::locale::ios_info	access:public	signature:(std::string const &)
boost::locale::ios_info::time_zone_	/usr/include/boost/locale/formatting.hpp	/^            std::string time_zone_;$/;"	m	class:boost::locale::ios_info	access:private
boost::locale::ios_info::~ios_info	/usr/include/boost/locale/formatting.hpp	/^            ~ios_info();$/;"	p	class:boost::locale::ios_info	access:public	signature:()
boost::locale::locale_category_type	/usr/include/boost/locale/generator.hpp	/^        typedef uint32_t locale_category_type; \/\/\/< a type used for more fine grained generation of facets$/;"	t	namespace:boost::locale
boost::locale::localization_backend	/usr/include/boost/locale/localization_backend.hpp	/^        class localization_backend {$/;"	c	namespace:boost::locale
boost::locale::localization_backend::clear_options	/usr/include/boost/locale/localization_backend.hpp	/^            virtual void clear_options() = 0;$/;"	p	class:boost::locale::localization_backend	access:public	signature:()
boost::locale::localization_backend::clone	/usr/include/boost/locale/localization_backend.hpp	/^            virtual localization_backend *clone() const = 0;$/;"	p	class:boost::locale::localization_backend	access:public	signature:() const
boost::locale::localization_backend::install	/usr/include/boost/locale/localization_backend.hpp	/^            virtual std::locale install(std::locale const &base,locale_category_type category,character_facet_type type = nochar_facet) = 0;$/;"	p	class:boost::locale::localization_backend	access:public	signature:(std::locale const &base,locale_category_type category,character_facet_type type = nochar_facet)
boost::locale::localization_backend::localization_backend	/usr/include/boost/locale/localization_backend.hpp	/^            localization_backend()$/;"	f	class:boost::locale::localization_backend	access:public	signature:()
boost::locale::localization_backend::localization_backend	/usr/include/boost/locale/localization_backend.hpp	/^            localization_backend(localization_backend const &);$/;"	p	class:boost::locale::localization_backend	access:private	signature:(localization_backend const &)
boost::locale::localization_backend::operator =	/usr/include/boost/locale/localization_backend.hpp	/^            void operator=(localization_backend const &);$/;"	p	class:boost::locale::localization_backend	access:private	signature:(localization_backend const &)
boost::locale::localization_backend::set_option	/usr/include/boost/locale/localization_backend.hpp	/^            virtual void set_option(std::string const &name,std::string const &value) = 0;$/;"	p	class:boost::locale::localization_backend	access:public	signature:(std::string const &name,std::string const &value)
boost::locale::localization_backend::~localization_backend	/usr/include/boost/locale/localization_backend.hpp	/^            virtual ~localization_backend()$/;"	f	class:boost::locale::localization_backend	access:public	signature:()
boost::locale::localization_backend_manager	/usr/include/boost/locale/localization_backend.hpp	/^        class BOOST_LOCALE_DECL localization_backend_manager {$/;"	c	namespace:boost::locale
boost::locale::localization_backend_manager::add_backend	/usr/include/boost/locale/localization_backend.hpp	/^            void add_backend(std::string const &name,std::auto_ptr<localization_backend> backend);$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:(std::string const &name,std::auto_ptr<localization_backend> backend)
boost::locale::localization_backend_manager::get	/usr/include/boost/locale/localization_backend.hpp	/^            std::auto_ptr<localization_backend> get() const;$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:() const
boost::locale::localization_backend_manager::get_all_backends	/usr/include/boost/locale/localization_backend.hpp	/^            std::vector<std::string> get_all_backends() const;$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:() const
boost::locale::localization_backend_manager::global	/usr/include/boost/locale/localization_backend.hpp	/^            static localization_backend_manager global();$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:()
boost::locale::localization_backend_manager::global	/usr/include/boost/locale/localization_backend.hpp	/^            static localization_backend_manager global(localization_backend_manager const &);$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:(localization_backend_manager const &)
boost::locale::localization_backend_manager::localization_backend_manager	/usr/include/boost/locale/localization_backend.hpp	/^            localization_backend_manager();$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:()
boost::locale::localization_backend_manager::localization_backend_manager	/usr/include/boost/locale/localization_backend.hpp	/^            localization_backend_manager(localization_backend_manager const &);$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:(localization_backend_manager const &)
boost::locale::localization_backend_manager::operator =	/usr/include/boost/locale/localization_backend.hpp	/^            localization_backend_manager const &operator=(localization_backend_manager const &);$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:(localization_backend_manager const &)
boost::locale::localization_backend_manager::pimpl_	/usr/include/boost/locale/localization_backend.hpp	/^            std::auto_ptr<impl> pimpl_;$/;"	m	class:boost::locale::localization_backend_manager	access:private
boost::locale::localization_backend_manager::remove_all_backends	/usr/include/boost/locale/localization_backend.hpp	/^            void remove_all_backends();$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:()
boost::locale::localization_backend_manager::select	/usr/include/boost/locale/localization_backend.hpp	/^            void select(std::string const &backend_name,locale_category_type category = all_categories);$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:(std::string const &backend_name,locale_category_type category = all_categories)
boost::locale::localization_backend_manager::~localization_backend_manager	/usr/include/boost/locale/localization_backend.hpp	/^            ~localization_backend_manager();$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:()
boost::locale::message	/usr/include/boost/locale/message.hpp	/^        typedef basic_message<char> message;$/;"	t	namespace:boost::locale
boost::locale::message_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     message_facet   = 1 << 4;   \/\/\/< Generate message facets$/;"	m	namespace:boost::locale
boost::locale::message_format	/usr/include/boost/locale/message.hpp	/^        class message_format : public base_message_format<CharType>$/;"	c	namespace:boost::locale	inherits:base_message_format
boost::locale::message_format::__get_id	/usr/include/boost/locale/message.hpp	/^            std::locale::id& __get_id (void) const { return id; }$/;"	f	class:boost::locale::message_format	access:public	signature:(void) const
boost::locale::message_format::char_type	/usr/include/boost/locale/message.hpp	/^            typedef CharType char_type;$/;"	t	class:boost::locale::message_format	access:public
boost::locale::message_format::convert	/usr/include/boost/locale/message.hpp	/^            virtual char_type const *convert(char_type const *msg,string_type &buffer) const = 0;$/;"	p	class:boost::locale::message_format	access:public	signature:(char_type const *msg,string_type &buffer) const
boost::locale::message_format::domain	/usr/include/boost/locale/message.hpp	/^            virtual int domain(std::string const &domain) const = 0;$/;"	p	class:boost::locale::message_format	access:public	signature:(std::string const &domain) const
boost::locale::message_format::get	/usr/include/boost/locale/message.hpp	/^            virtual char_type const *get(int domain_id,char_type const *context,char_type const *id) const = 0;$/;"	p	class:boost::locale::message_format	access:public	signature:(int domain_id,char_type const *context,char_type const *id) const
boost::locale::message_format::get	/usr/include/boost/locale/message.hpp	/^            virtual char_type const *get(int domain_id,char_type const *context,char_type const *single_id,int n) const = 0;$/;"	p	class:boost::locale::message_format	access:public	signature:(int domain_id,char_type const *context,char_type const *single_id,int n) const
boost::locale::message_format::message_format	/usr/include/boost/locale/message.hpp	/^            message_format(size_t refs = 0) : $/;"	f	class:boost::locale::message_format	access:public	signature:(size_t refs = 0)
boost::locale::message_format::string_type	/usr/include/boost/locale/message.hpp	/^            typedef std::basic_string<CharType> string_type;$/;"	t	class:boost::locale::message_format	access:public
boost::locale::message_format::~message_format	/usr/include/boost/locale/message.hpp	/^            virtual ~message_format()$/;"	f	class:boost::locale::message_format	access:protected	signature:()
boost::locale::ngettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType> ngettext(   CharType const *s,$/;"	f	namespace:boost::locale	signature:( CharType const *s, CharType const *p, int n, std::locale const &loc=std::locale())
boost::locale::nochar_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t nochar_facet    = 0;        \/\/\/< Unspecified character category for character independent facets$/;"	m	namespace:boost::locale
boost::locale::non_character_facet_first	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t    non_character_facet_first = calendar_facet; \/\/\/< First character independent facet $/;"	m	namespace:boost::locale
boost::locale::non_character_facet_last	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t    non_character_facet_last = information_facet;\/\/\/< Last character independent facet $/;"	m	namespace:boost::locale
boost::locale::norm_default	/usr/include/boost/locale/conversion.hpp	/^            norm_default = norm_nfc, \/\/\/< Default normalization - canonical decomposition followed by canonical composition$/;"	e	enum:boost::locale::__anon3
boost::locale::norm_nfc	/usr/include/boost/locale/conversion.hpp	/^            norm_nfc,   \/\/\/< Canonical decomposition followed by canonical composition$/;"	e	enum:boost::locale::__anon3
boost::locale::norm_nfd	/usr/include/boost/locale/conversion.hpp	/^            norm_nfd,   \/\/\/< Canonical decomposition$/;"	e	enum:boost::locale::__anon3
boost::locale::norm_nfkc	/usr/include/boost/locale/conversion.hpp	/^            norm_nfkc,  \/\/\/< Compatibility decomposition followed by canonical composition.$/;"	e	enum:boost::locale::__anon3
boost::locale::norm_nfkd	/usr/include/boost/locale/conversion.hpp	/^            norm_nfkd,  \/\/\/< Compatibility decomposition$/;"	e	enum:boost::locale::__anon3
boost::locale::norm_type	/usr/include/boost/locale/conversion.hpp	/^        } norm_type;$/;"	t	namespace:boost::locale	typeref:enum:boost::locale::__anon3
boost::locale::normalize	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> normalize(  CharType const *begin,$/;"	f	namespace:boost::locale	signature:( CharType const *begin, CharType const *end, norm_type n=norm_default, std::locale const &loc=std::locale())
boost::locale::normalize	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> normalize(CharType const *str,norm_type n=norm_default,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *str,norm_type n=norm_default,std::locale const &loc=std::locale())
boost::locale::normalize	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> normalize(std::basic_string<CharType> const &str,norm_type n=norm_default,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &str,norm_type n=norm_default,std::locale const &loc=std::locale())
boost::locale::npgettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  npgettext( CharType const *context,$/;"	f	namespace:boost::locale	signature:( CharType const *context, CharType const *s, CharType const *p, int n, std::locale const &loc=std::locale())
boost::locale::operator +	/usr/include/boost/locale/date_time.hpp	/^        inline date_time_period_set operator+(date_time_period_set const &a,date_time_period_set const &b)$/;"	f	namespace:boost::locale	signature:(date_time_period_set const &a,date_time_period_set const &b)
boost::locale::operator -	/usr/include/boost/locale/date_time.hpp	/^        inline date_time_duration operator-(date_time const &later,date_time const &earlier)$/;"	f	namespace:boost::locale	signature:(date_time const &later,date_time const &earlier)
boost::locale::operator -	/usr/include/boost/locale/date_time.hpp	/^        inline date_time_period_set operator-(date_time_period_set const &a,date_time_period_set const &b)$/;"	f	namespace:boost::locale	signature:(date_time_period_set const &a,date_time_period_set const &b)
boost::locale::operator <<	/usr/include/boost/locale/date_time.hpp	/^        std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out,date_time const &t)$/;"	f	namespace:boost::locale	signature:(std::basic_ostream<CharType> &out,date_time const &t)
boost::locale::operator <<	/usr/include/boost/locale/format.hpp	/^        std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out,basic_format<CharType> const &fmt)$/;"	f	namespace:boost::locale	signature:(std::basic_ostream<CharType> &out,basic_format<CharType> const &fmt)
boost::locale::operator <<	/usr/include/boost/locale/message.hpp	/^        std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out,basic_message<CharType> const &msg)$/;"	f	namespace:boost::locale	signature:(std::basic_ostream<CharType> &out,basic_message<CharType> const &msg)
boost::locale::operator >>	/usr/include/boost/locale/date_time.hpp	/^        std::basic_istream<CharType> &operator>>(std::basic_istream<CharType> &in,date_time &t)$/;"	f	namespace:boost::locale	signature:(std::basic_istream<CharType> &in,date_time &t)
boost::locale::parsing_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     parsing_facet   = 1 << 3;   \/\/\/< Generate numbers, currency, date-time formatting facets$/;"	m	namespace:boost::locale
boost::locale::per_character_facet_first	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     per_character_facet_first = convert_facet; \/\/\/< First facet specific for character$/;"	m	namespace:boost::locale
boost::locale::per_character_facet_last	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     per_character_facet_last = boundary_facet; \/\/\/< Last facet specific for character$/;"	m	namespace:boost::locale
boost::locale::period	/usr/include/boost/locale/date_time.hpp	/^        namespace period {$/;"	n	namespace:boost::locale
boost::locale::period	/usr/include/boost/locale/date_time_facet.hpp	/^        namespace period {$/;"	n	namespace:boost::locale
boost::locale::period::am	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period am() { return date_time_period(am_pm(),0); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::am_pm	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period am_pm(int v) { return date_time_period(am_pm(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::am_pm	/usr/include/boost/locale/date_time.hpp	/^            inline int am_pm(date_time const &dt) { return dt.get(am_pm()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::am_pm	/usr/include/boost/locale/date_time.hpp	/^            inline int am_pm(date_time_duration const &dt) { return dt.get(am_pm()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::am_pm	/usr/include/boost/locale/date_time.hpp	/^            inline period_type am_pm(){ return period_type(marks::am_pm); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::april	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period april() { return date_time_period(month(),3); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::august	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period august() { return date_time_period(month(),7); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::day	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period day(int v) { return date_time_period(day(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::day	/usr/include/boost/locale/date_time.hpp	/^            inline int day(date_time const &dt) { return dt.get(day()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::day	/usr/include/boost/locale/date_time.hpp	/^            inline int day(date_time_duration const &dt) { return dt.get(day()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::day	/usr/include/boost/locale/date_time.hpp	/^            inline period_type day(){ return period_type(marks::day); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period day_of_week(int v) { return date_time_period(day_of_week(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week(date_time const &dt) { return dt.get(day_of_week()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week(date_time_duration const &dt) { return dt.get(day_of_week()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline period_type day_of_week(){ return period_type(marks::day_of_week); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::day_of_week_in_month	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period day_of_week_in_month(int v) { return date_time_period(day_of_week_in_month(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::day_of_week_in_month	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week_in_month(date_time const &dt) { return dt.get(day_of_week_in_month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::day_of_week_in_month	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week_in_month(date_time_duration const &dt) { return dt.get(day_of_week_in_month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::day_of_week_in_month	/usr/include/boost/locale/date_time.hpp	/^            inline period_type day_of_week_in_month(){ return period_type(marks::day_of_week_in_month); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::day_of_week_local	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period day_of_week_local(int v) { return date_time_period(day_of_week_local(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::day_of_week_local	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week_local(date_time const &dt) { return dt.get(day_of_week_local()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::day_of_week_local	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week_local(date_time_duration const &dt) { return dt.get(day_of_week_local()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::day_of_week_local	/usr/include/boost/locale/date_time.hpp	/^            inline period_type day_of_week_local(){ return period_type(marks::day_of_week_local); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::day_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period day_of_year(int v) { return date_time_period(day_of_year(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::day_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_year(date_time const &dt) { return dt.get(day_of_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::day_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_year(date_time_duration const &dt) { return dt.get(day_of_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::day_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline period_type day_of_year(){ return period_type(marks::day_of_year); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::december	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period december() { return date_time_period(month(),11); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::era	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period era(int v) { return date_time_period(era(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::era	/usr/include/boost/locale/date_time.hpp	/^            inline int era(date_time const &dt) { return dt.get(era()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::era	/usr/include/boost/locale/date_time.hpp	/^            inline int era(date_time_duration const &dt) { return dt.get(era()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::era	/usr/include/boost/locale/date_time.hpp	/^            inline period_type era(){ return period_type(marks::era); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::extended_year	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period extended_year(int v) { return date_time_period(extended_year(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::extended_year	/usr/include/boost/locale/date_time.hpp	/^            inline int extended_year(date_time const &dt) { return dt.get(extended_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::extended_year	/usr/include/boost/locale/date_time.hpp	/^            inline int extended_year(date_time_duration const &dt) { return dt.get(extended_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::extended_year	/usr/include/boost/locale/date_time.hpp	/^            inline period_type extended_year(){ return period_type(marks::extended_year); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::february	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period february() { return date_time_period(month(),1); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::first_day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period first_day_of_week(int v) { return date_time_period(first_day_of_week(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::first_day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline int first_day_of_week(date_time const &dt) { return dt.get(first_day_of_week()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::first_day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline int first_day_of_week(date_time_duration const &dt) { return dt.get(first_day_of_week()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::first_day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline period_type first_day_of_week(){ return period_type(marks::first_day_of_week); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::friday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period friday() { return date_time_period(day_of_week(),6); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::hour	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period hour(int v) { return date_time_period(hour(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::hour	/usr/include/boost/locale/date_time.hpp	/^            inline int hour(date_time const &dt) { return dt.get(hour()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::hour	/usr/include/boost/locale/date_time.hpp	/^            inline int hour(date_time_duration const &dt) { return dt.get(hour()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::hour	/usr/include/boost/locale/date_time.hpp	/^            inline period_type hour(){ return period_type(marks::hour); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::hour_12	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period hour_12(int v) { return date_time_period(hour_12(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::hour_12	/usr/include/boost/locale/date_time.hpp	/^            inline int hour_12(date_time const &dt) { return dt.get(hour_12()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::hour_12	/usr/include/boost/locale/date_time.hpp	/^            inline int hour_12(date_time_duration const &dt) { return dt.get(hour_12()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::hour_12	/usr/include/boost/locale/date_time.hpp	/^            inline period_type hour_12(){ return period_type(marks::hour_12); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::invalid	/usr/include/boost/locale/date_time.hpp	/^            inline period_type invalid(){ return period_type(marks::invalid); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::january	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period january() { return date_time_period(month(),0); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::july	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period july() { return date_time_period(month(),6); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::june	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period june() { return date_time_period(month(),5); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::march	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period march() { return date_time_period(month(),2); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::marks	/usr/include/boost/locale/date_time_facet.hpp	/^            namespace marks {$/;"	n	namespace:boost::locale::period
boost::locale::period::marks::am_pm	/usr/include/boost/locale/date_time_facet.hpp	/^                    am_pm,                      \/\/\/< am or pm marker [0..1]$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::day	/usr/include/boost/locale/date_time_facet.hpp	/^                    day,                        \/\/\/< The day of month, calendar specific, in Gregorian [1..31]$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::day_of_week	/usr/include/boost/locale/date_time_facet.hpp	/^                    day_of_week,                \/\/\/< Day of week, Sunday=1, Monday=2,..., Saturday=7.$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::day_of_week_in_month	/usr/include/boost/locale/date_time_facet.hpp	/^                    day_of_week_in_month,       \/\/\/< Original number of the day of the week in month. For example 1st Sunday, $/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::day_of_week_local	/usr/include/boost/locale/date_time_facet.hpp	/^                    day_of_week_local,          \/\/\/< Local day of week, for example in France Monday is 1, in US Sunday is 1, [1..7]$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::day_of_year	/usr/include/boost/locale/date_time_facet.hpp	/^                    day_of_year,                \/\/\/< The number of day in year, starting from 1, in Gregorian  [1..366]$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::era	/usr/include/boost/locale/date_time_facet.hpp	/^                    era,                        \/\/\/< Era i.e. AC, BC in Gregorian and Julian calendar, range [0,1]$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::extended_year	/usr/include/boost/locale/date_time_facet.hpp	/^                    extended_year,              \/\/\/< Extended year for Gregorian\/Julian calendars, where 1 BC == 0, 2 BC == -1.$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::first_day_of_week	/usr/include/boost/locale/date_time_facet.hpp	/^                    first_day_of_week,          \/\/\/< First day of week, constant, for example Sunday in US = 1, Monday in France = 2$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::hour	/usr/include/boost/locale/date_time_facet.hpp	/^                    hour,                       \/\/\/< 24 clock hour [0..23]$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::hour_12	/usr/include/boost/locale/date_time_facet.hpp	/^                    hour_12,                    \/\/\/< 12 clock hour [0..11]$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::invalid	/usr/include/boost/locale/date_time_facet.hpp	/^                    invalid,                    \/\/\/< Special invalid value, should not be used directly$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::minute	/usr/include/boost/locale/date_time_facet.hpp	/^                    minute,                     \/\/\/< minute [0..59]$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::month	/usr/include/boost/locale/date_time_facet.hpp	/^                    month,                      \/\/\/< The month of year, calendar specific, in Gregorian [0..11]$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::period_mark	/usr/include/boost/locale/date_time_facet.hpp	/^                enum period_mark {$/;"	g	namespace:boost::locale::period::marks
boost::locale::period::marks::second	/usr/include/boost/locale/date_time_facet.hpp	/^                    second,                     \/\/\/< second [0..59]$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::week_of_month	/usr/include/boost/locale/date_time_facet.hpp	/^                    week_of_month,              \/\/\/< The week number within current month$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::week_of_year	/usr/include/boost/locale/date_time_facet.hpp	/^                    week_of_year,               \/\/\/< The week number in the year$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::marks::year	/usr/include/boost/locale/date_time_facet.hpp	/^                    year,                       \/\/\/< Year, it is calendar specific, for example 2011 in Gregorian calendar.$/;"	e	enum:boost::locale::period::marks::period_mark
boost::locale::period::may	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period may() { return date_time_period(month(),4); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::minute	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period minute(int v) { return date_time_period(minute(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::minute	/usr/include/boost/locale/date_time.hpp	/^            inline int minute(date_time const &dt) { return dt.get(minute()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::minute	/usr/include/boost/locale/date_time.hpp	/^            inline int minute(date_time_duration const &dt) { return dt.get(minute()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::minute	/usr/include/boost/locale/date_time.hpp	/^            inline period_type minute(){ return period_type(marks::minute); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::monday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period monday() { return date_time_period(day_of_week(),2); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::month	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period month(int v) { return date_time_period(month(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::month	/usr/include/boost/locale/date_time.hpp	/^            inline int month(date_time const &dt) { return dt.get(month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::month	/usr/include/boost/locale/date_time.hpp	/^            inline int month(date_time_duration const &dt) { return dt.get(month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::month	/usr/include/boost/locale/date_time.hpp	/^            inline period_type month(){ return period_type(marks::month); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::november	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period november() { return date_time_period(month(),10); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::october	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period october() { return date_time_period(month(),9); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::operator *	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator*(T v,date_time_period f)$/;"	f	namespace:boost::locale::period	signature:(T v,date_time_period f)
boost::locale::period::operator *	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator*(T v,period::period_type f)$/;"	f	namespace:boost::locale::period	signature:(T v,period::period_type f)
boost::locale::period::operator *	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator*(date_time_period f,T v)$/;"	f	namespace:boost::locale::period	signature:(date_time_period f,T v)
boost::locale::period::operator *	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator*(period::period_type f,T v)$/;"	f	namespace:boost::locale::period	signature:(period::period_type f,T v)
boost::locale::period::operator +	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period operator+(period::period_type f) $/;"	f	namespace:boost::locale::period	signature:(period::period_type f)
boost::locale::period::operator -	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period operator-(period::period_type f)$/;"	f	namespace:boost::locale::period	signature:(period::period_type f)
boost::locale::period::period_type	/usr/include/boost/locale/date_time_facet.hpp	/^            class period_type {$/;"	c	namespace:boost::locale::period
boost::locale::period::period_type::mark	/usr/include/boost/locale/date_time_facet.hpp	/^                marks::period_mark mark() const$/;"	f	class:boost::locale::period::period_type	access:public	signature:() const
boost::locale::period::period_type::mark_	/usr/include/boost/locale/date_time_facet.hpp	/^                marks::period_mark mark_;$/;"	m	class:boost::locale::period::period_type	access:private
boost::locale::period::period_type::operator !=	/usr/include/boost/locale/date_time_facet.hpp	/^                bool operator!=(period_type const &other) const$/;"	f	class:boost::locale::period::period_type	access:public	signature:(period_type const &other) const
boost::locale::period::period_type::operator ==	/usr/include/boost/locale/date_time_facet.hpp	/^                bool operator==(period_type const &other) const$/;"	f	class:boost::locale::period::period_type	access:public	signature:(period_type const &other) const
boost::locale::period::period_type::period_type	/usr/include/boost/locale/date_time_facet.hpp	/^                period_type(marks::period_mark m = marks::invalid) : mark_(m) $/;"	f	class:boost::locale::period::period_type	access:public	signature:(marks::period_mark m = marks::invalid)
boost::locale::period::pm	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period pm() { return date_time_period(am_pm(),1); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::saturday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period saturday() { return date_time_period(day_of_week(),7); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::second	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period second(int v) { return date_time_period(second(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::second	/usr/include/boost/locale/date_time.hpp	/^            inline int second(date_time const &dt) { return dt.get(second()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::second	/usr/include/boost/locale/date_time.hpp	/^            inline int second(date_time_duration const &dt) { return dt.get(second()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::second	/usr/include/boost/locale/date_time.hpp	/^            inline period_type second(){ return period_type(marks::second); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::september	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period september() { return date_time_period(month(),8); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::sunday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period sunday() { return date_time_period(day_of_week(),1); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::thursday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period thursday() { return date_time_period(day_of_week(),5); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::tuesday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period tuesday() { return date_time_period(day_of_week(),3); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::wednesday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period wednesday() { return date_time_period(day_of_week(),4); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::week_of_month	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period week_of_month(int v) { return date_time_period(week_of_month(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::week_of_month	/usr/include/boost/locale/date_time.hpp	/^            inline int week_of_month(date_time const &dt) { return dt.get(week_of_month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::week_of_month	/usr/include/boost/locale/date_time.hpp	/^            inline int week_of_month(date_time_duration const &dt) { return dt.get(week_of_month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::week_of_month	/usr/include/boost/locale/date_time.hpp	/^            inline period_type week_of_month(){ return period_type(marks::week_of_month); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::week_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period week_of_year(int v) { return date_time_period(week_of_year(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::week_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline int week_of_year(date_time const &dt) { return dt.get(week_of_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::week_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline int week_of_year(date_time_duration const &dt) { return dt.get(week_of_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::week_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline period_type week_of_year(){ return period_type(marks::week_of_year); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::period::year	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period year(int v) { return date_time_period(year(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
boost::locale::period::year	/usr/include/boost/locale/date_time.hpp	/^            inline int year(date_time const &dt) { return dt.get(year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
boost::locale::period::year	/usr/include/boost/locale/date_time.hpp	/^            inline int year(date_time_duration const &dt) { return dt.get(year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
boost::locale::period::year	/usr/include/boost/locale/date_time.hpp	/^            inline period_type year(){ return period_type(marks::year); }$/;"	f	namespace:boost::locale::period	signature:()
boost::locale::pgettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  pgettext(  CharType const *context,$/;"	f	namespace:boost::locale	signature:( CharType const *context, CharType const *id, std::locale const &loc=std::locale())
boost::locale::posix_time	/usr/include/boost/locale/date_time_facet.hpp	/^        struct posix_time {$/;"	s	namespace:boost::locale
boost::locale::posix_time::nanoseconds	/usr/include/boost/locale/date_time_facet.hpp	/^            uint32_t nanoseconds;  \/\/\/< Nanoseconds resolution$/;"	m	struct:boost::locale::posix_time	access:public
boost::locale::posix_time::seconds	/usr/include/boost/locale/date_time_facet.hpp	/^            int64_t seconds; \/\/\/< Seconds since epoch$/;"	m	struct:boost::locale::posix_time	access:public
boost::locale::time_zone	/usr/include/boost/locale/time_zone.hpp	/^        namespace time_zone {$/;"	n	namespace:boost::locale
boost::locale::time_zone::global	/usr/include/boost/locale/time_zone.hpp	/^            BOOST_LOCALE_DECL std::string global();$/;"	p	namespace:boost::locale::time_zone	signature:()
boost::locale::time_zone::global	/usr/include/boost/locale/time_zone.hpp	/^            BOOST_LOCALE_DECL std::string global(std::string const &new_tz);$/;"	p	namespace:boost::locale::time_zone	signature:(std::string const &new_tz)
boost::locale::to_lower	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_lower(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())
boost::locale::to_lower	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_lower(CharType const *str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *str,std::locale const &loc=std::locale())
boost::locale::to_lower	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_lower(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())
boost::locale::to_title	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_title(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())
boost::locale::to_title	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_title(CharType const *str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *str,std::locale const &loc=std::locale())
boost::locale::to_title	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_title(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())
boost::locale::to_upper	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_upper(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())
boost::locale::to_upper	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_upper(CharType const *str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *str,std::locale const &loc=std::locale())
boost::locale::to_upper	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_upper(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())
boost::locale::translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   CharType const *context,$/;"	f	namespace:boost::locale	signature:( CharType const *context, CharType const *msg)
boost::locale::translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   CharType const *context,$/;"	f	namespace:boost::locale	signature:( CharType const *context, CharType const *single, CharType const *plural, int n)
boost::locale::translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   CharType const *single,$/;"	f	namespace:boost::locale	signature:( CharType const *single, CharType const *plural, int n)
boost::locale::translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   std::basic_string<CharType> const &context,$/;"	f	namespace:boost::locale	signature:( std::basic_string<CharType> const &context, std::basic_string<CharType> const &msg)
boost::locale::translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   std::basic_string<CharType> const &context,$/;"	f	namespace:boost::locale	signature:( std::basic_string<CharType> const &context, std::basic_string<CharType> const &single, std::basic_string<CharType> const &plural, int n)
boost::locale::translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   std::basic_string<CharType> const &single,$/;"	f	namespace:boost::locale	signature:( std::basic_string<CharType> const &single, std::basic_string<CharType> const &plural, int n)
boost::locale::translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(CharType const *msg)$/;"	f	namespace:boost::locale	signature:(CharType const *msg)
boost::locale::translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(std::basic_string<CharType> const &msg)$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &msg)
boost::locale::u16format	/usr/include/boost/locale/format.hpp	/^        typedef basic_format<char16_t> u16format;$/;"	t	namespace:boost::locale
boost::locale::u16message	/usr/include/boost/locale/message.hpp	/^        typedef basic_message<char16_t> u16message;$/;"	t	namespace:boost::locale
boost::locale::u32format	/usr/include/boost/locale/format.hpp	/^        typedef basic_format<char32_t> u32format;$/;"	t	namespace:boost::locale
boost::locale::u32message	/usr/include/boost/locale/message.hpp	/^        typedef basic_message<char32_t> u32message;$/;"	t	namespace:boost::locale
boost::locale::utf	/usr/include/boost/locale/utf.hpp	/^namespace utf {$/;"	n	namespace:boost::locale
boost::locale::utf::code_point	/usr/include/boost/locale/utf.hpp	/^    typedef uint32_t code_point;$/;"	t	namespace:boost::locale::utf
boost::locale::utf::illegal	/usr/include/boost/locale/utf.hpp	/^    static const code_point illegal = 0xFFFFFFFFu;$/;"	m	namespace:boost::locale::utf
boost::locale::utf::incomplete	/usr/include/boost/locale/utf.hpp	/^    static const code_point incomplete = 0xFFFFFFFEu;$/;"	m	namespace:boost::locale::utf
boost::locale::utf::is_valid_codepoint	/usr/include/boost/locale/utf.hpp	/^    inline bool is_valid_codepoint(code_point v)$/;"	f	namespace:boost::locale::utf	signature:(code_point v)
boost::locale::utf::utf_traits	/usr/include/boost/locale/utf.hpp	/^    struct utf_traits {$/;"	s	namespace:boost::locale::utf
boost::locale::utf::utf_traits	/usr/include/boost/locale/utf.hpp	/^    struct utf_traits<CharType,1> {$/;"	s	namespace:boost::locale::utf
boost::locale::utf::utf_traits	/usr/include/boost/locale/utf.hpp	/^    struct utf_traits<CharType,2> {$/;"	s	namespace:boost::locale::utf
boost::locale::utf::utf_traits	/usr/include/boost/locale/utf.hpp	/^    struct utf_traits<CharType,4> {$/;"	s	namespace:boost::locale::utf
boost::locale::utf::utf_traits::char_type	/usr/include/boost/locale/utf.hpp	/^        typedef CharType char_type;$/;"	t	struct:boost::locale::utf::utf_traits	access:public
boost::locale::utf::utf_traits::combine_surrogate	/usr/include/boost/locale/utf.hpp	/^        static code_point combine_surrogate(uint16_t w1,uint16_t w2)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(uint16_t w1,uint16_t w2)
boost::locale::utf::utf_traits::decode	/usr/include/boost/locale/utf.hpp	/^        static code_point decode(It &current,It last)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(It &current,It last)
boost::locale::utf::utf_traits::decode	/usr/include/boost/locale/utf.hpp	/^        static code_point decode(Iterator &p,Iterator e)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(Iterator &p,Iterator e)
boost::locale::utf::utf_traits::decode	/usr/include/boost/locale/utf.hpp	/^        static code_point decode(Iterator &p,Iterator e);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(Iterator &p,Iterator e)
boost::locale::utf::utf_traits::decode_valid	/usr/include/boost/locale/utf.hpp	/^        static code_point decode_valid(It &current)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(It &current)
boost::locale::utf::utf_traits::decode_valid	/usr/include/boost/locale/utf.hpp	/^        static code_point decode_valid(Iterator &p)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(Iterator &p)
boost::locale::utf::utf_traits::decode_valid	/usr/include/boost/locale/utf.hpp	/^        static code_point decode_valid(Iterator &p);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(Iterator &p)
boost::locale::utf::utf_traits::encode	/usr/include/boost/locale/utf.hpp	/^        static It encode(code_point u,It out)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point u,It out)
boost::locale::utf::utf_traits::encode	/usr/include/boost/locale/utf.hpp	/^        static Iterator encode(code_point value,Iterator out)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point value,Iterator out)
boost::locale::utf::utf_traits::encode	/usr/include/boost/locale/utf.hpp	/^        static Iterator encode(code_point value,Iterator out);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point value,Iterator out)
boost::locale::utf::utf_traits::is_first_surrogate	/usr/include/boost/locale/utf.hpp	/^        static bool is_first_surrogate(uint16_t x)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(uint16_t x)
boost::locale::utf::utf_traits::is_lead	/usr/include/boost/locale/utf.hpp	/^        static bool is_lead(char_type \/*c*\/)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type )
boost::locale::utf::utf_traits::is_lead	/usr/include/boost/locale/utf.hpp	/^        static bool is_lead(char_type c)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
boost::locale::utf::utf_traits::is_lead	/usr/include/boost/locale/utf.hpp	/^        static bool is_lead(char_type c);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
boost::locale::utf::utf_traits::is_lead	/usr/include/boost/locale/utf.hpp	/^        static bool is_lead(char_type ci)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type ci)
boost::locale::utf::utf_traits::is_second_surrogate	/usr/include/boost/locale/utf.hpp	/^        static bool is_second_surrogate(uint16_t x)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(uint16_t x)
boost::locale::utf::utf_traits::is_trail	/usr/include/boost/locale/utf.hpp	/^        static bool is_trail(char_type \/*c*\/)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type )
boost::locale::utf::utf_traits::is_trail	/usr/include/boost/locale/utf.hpp	/^        static bool is_trail(char_type c)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
boost::locale::utf::utf_traits::is_trail	/usr/include/boost/locale/utf.hpp	/^        static bool is_trail(char_type c);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
boost::locale::utf::utf_traits::is_trail	/usr/include/boost/locale/utf.hpp	/^        static bool is_trail(char_type ci)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type ci)
boost::locale::utf::utf_traits::max_width	/usr/include/boost/locale/utf.hpp	/^        static const int max_width = 1;$/;"	m	struct:boost::locale::utf::utf_traits	access:public
boost::locale::utf::utf_traits::max_width	/usr/include/boost/locale/utf.hpp	/^        static const int max_width = 2;$/;"	m	struct:boost::locale::utf::utf_traits	access:public
boost::locale::utf::utf_traits::max_width	/usr/include/boost/locale/utf.hpp	/^        static const int max_width = 4;$/;"	m	struct:boost::locale::utf::utf_traits	access:public
boost::locale::utf::utf_traits::max_width	/usr/include/boost/locale/utf.hpp	/^        static const int max_width;$/;"	m	struct:boost::locale::utf::utf_traits	access:public
boost::locale::utf::utf_traits::trail_length	/usr/include/boost/locale/utf.hpp	/^        static int trail_length(char_type c)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
boost::locale::utf::utf_traits::trail_length	/usr/include/boost/locale/utf.hpp	/^        static int trail_length(char_type c);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
boost::locale::utf::utf_traits::trail_length	/usr/include/boost/locale/utf.hpp	/^        static int trail_length(char_type ci) $/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type ci)
boost::locale::utf::utf_traits::width	/usr/include/boost/locale/utf.hpp	/^        static int width(code_point \/*u*\/)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point )
boost::locale::utf::utf_traits::width	/usr/include/boost/locale/utf.hpp	/^        static int width(code_point u)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point u)
boost::locale::utf::utf_traits::width	/usr/include/boost/locale/utf.hpp	/^        static int width(code_point value)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point value)
boost::locale::utf::utf_traits::width	/usr/include/boost/locale/utf.hpp	/^        static int width(code_point value);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point value)
boost::locale::util	/usr/include/boost/locale/util.hpp	/^namespace util {$/;"	n	namespace:boost::locale
boost::locale::util::base_converter	/usr/include/boost/locale/util.hpp	/^    class base_converter {$/;"	c	namespace:boost::locale::util
boost::locale::util::base_converter::clone	/usr/include/boost/locale/util.hpp	/^        virtual base_converter *clone() const $/;"	f	class:boost::locale::util::base_converter	access:public	signature:() const
boost::locale::util::base_converter::from_unicode	/usr/include/boost/locale/util.hpp	/^        virtual uint32_t from_unicode(uint32_t u,char *begin,char const *end) $/;"	f	class:boost::locale::util::base_converter	access:public	signature:(uint32_t u,char *begin,char const *end)
boost::locale::util::base_converter::illegal	/usr/include/boost/locale/util.hpp	/^        static const uint32_t illegal=utf::illegal;$/;"	m	class:boost::locale::util::base_converter	access:public
boost::locale::util::base_converter::incomplete	/usr/include/boost/locale/util.hpp	/^        static const uint32_t incomplete=utf::incomplete;$/;"	m	class:boost::locale::util::base_converter	access:public
boost::locale::util::base_converter::is_thread_safe	/usr/include/boost/locale/util.hpp	/^        virtual bool is_thread_safe() const $/;"	f	class:boost::locale::util::base_converter	access:public	signature:() const
boost::locale::util::base_converter::max_len	/usr/include/boost/locale/util.hpp	/^        virtual int max_len() const $/;"	f	class:boost::locale::util::base_converter	access:public	signature:() const
boost::locale::util::base_converter::to_unicode	/usr/include/boost/locale/util.hpp	/^        virtual uint32_t to_unicode(char const *&begin,char const *end) $/;"	f	class:boost::locale::util::base_converter	access:public	signature:(char const *&begin,char const *end)
boost::locale::util::base_converter::~base_converter	/usr/include/boost/locale/util.hpp	/^        virtual ~base_converter() $/;"	f	class:boost::locale::util::base_converter	access:public	signature:()
boost::locale::util::create_codecvt	/usr/include/boost/locale/util.hpp	/^    std::locale create_codecvt(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type);$/;"	p	namespace:boost::locale::util	signature:(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type)
boost::locale::util::create_info	/usr/include/boost/locale/util.hpp	/^    std::locale create_info(std::locale const &in,std::string const &name); $/;"	p	namespace:boost::locale::util	signature:(std::locale const &in,std::string const &name)
boost::locale::util::create_simple_converter	/usr/include/boost/locale/util.hpp	/^    BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_simple_converter(std::string const &encoding);$/;"	p	namespace:boost::locale::util	signature:(std::string const &encoding)
boost::locale::util::create_utf8_converter	/usr/include/boost/locale/util.hpp	/^    BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_utf8_converter();$/;"	p	namespace:boost::locale::util	signature:()
boost::locale::util::get_system_locale	/usr/include/boost/locale/util.hpp	/^    std::string get_system_locale(bool use_utf8_on_windows = false);$/;"	p	namespace:boost::locale::util	signature:(bool use_utf8_on_windows = false)
boost::locale::wchar_t_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t wchar_t_facet   = 1 << 1;   \/\/\/< wide character facets$/;"	m	namespace:boost::locale
boost::locale::wformat	/usr/include/boost/locale/format.hpp	/^        typedef basic_format<wchar_t> wformat;$/;"	t	namespace:boost::locale
boost::locale::wmessage	/usr/include/boost/locale/message.hpp	/^        typedef basic_message<wchar_t> wmessage;$/;"	t	namespace:boost::locale
boundary	/usr/include/boost/locale/boundary/boundary_point.hpp	/^namespace boundary {$/;"	n	namespace:boost::locale
boundary	/usr/include/boost/locale/boundary/facets.hpp	/^        namespace boundary {$/;"	n	namespace:boost::locale
boundary	/usr/include/boost/locale/boundary/index.hpp	/^        namespace boundary {$/;"	n	namespace:boost::locale
boundary	/usr/include/boost/locale/boundary/segment.hpp	/^namespace boundary {$/;"	n	namespace:boost::locale
boundary	/usr/include/boost/locale/boundary/types.hpp	/^        namespace boundary {$/;"	n	namespace:boost::locale
boundary_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     boundary_facet  = 1 << 6;   \/\/\/< Generate boundary analysis facet$/;"	m	namespace:boost::locale
boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^                boundary_indexing(size_t refs=0) : std::locale::facet(refs)$/;"	f	class:boost::locale::boundary::boundary_indexing	access:public	signature:(size_t refs=0)
boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^            class BOOST_LOCALE_DECL boundary_indexing : public std::locale::facet {$/;"	c	namespace:boost::locale::boundary	inherits:std::locale::facet
boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^            class BOOST_LOCALE_DECL boundary_indexing<char16_t> : public std::locale::facet {$/;"	c	namespace:boost::locale::boundary	inherits:std::locale::facet
boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^            class BOOST_LOCALE_DECL boundary_indexing<char32_t> : public std::locale::facet {$/;"	c	namespace:boost::locale::boundary	inherits:std::locale::facet
boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^            class BOOST_LOCALE_DECL boundary_indexing<char> : public std::locale::facet {$/;"	c	namespace:boost::locale::boundary	inherits:std::locale::facet
boundary_indexing	/usr/include/boost/locale/boundary/facets.hpp	/^            class BOOST_LOCALE_DECL boundary_indexing<wchar_t> : public std::locale::facet {$/;"	c	namespace:boost::locale::boundary	inherits:std::locale::facet
boundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        boundary_point() : rule_(0) {}$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:()
boundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        boundary_point(iterator_type p,rule_type r) :$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(iterator_type p,rule_type r)
boundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    class boundary_point  {$/;"	c	namespace:boost::locale::boundary
boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^                boundary_point_index() : mask_(0xFFFFFFFFu)$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:()
boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^                boundary_point_index(boundary_type type,$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:(boundary_type type, base_iterator begin, base_iterator end, rule_type mask, std::locale const &loc=std::locale())
boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^                boundary_point_index(boundary_type type,$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:(boundary_type type, base_iterator begin, base_iterator end, std::locale const &loc=std::locale())
boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^                boundary_point_index(segment_index<base_iterator> const &other);$/;"	p	class:boost::locale::boundary::boundary_point_index	access:public	signature:(segment_index<base_iterator> const &other)
boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            boundary_point_index<BaseIterator>::boundary_point_index(segment_index<BaseIterator> const &other) :$/;"	f	class:boost::locale::boundary::boundary_point_index	signature:(segment_index<BaseIterator> const &other)
boundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            class boundary_point_index {$/;"	c	namespace:boost::locale::boundary
boundary_point_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    boundary_point_index_iterator() : current_(0),map_(0)$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:()
boundary_point_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    boundary_point_index_iterator(base_iterator p,mapping_type const *map,rule_type mask) :$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:(base_iterator p,mapping_type const *map,rule_type mask)
boundary_point_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    boundary_point_index_iterator(bool is_begin,mapping_type const *map,rule_type mask) :$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:(bool is_begin,mapping_type const *map,rule_type mask)
boundary_point_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                class boundary_point_index_iterator : $/;"	c	namespace:boost::locale::boundary::details	inherits:boost::iterator_facade
boundary_point_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef boundary_point<base_iterator> boundary_point_type;$/;"	t	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public
boundary_rule	/usr/include/boost/locale/boundary/types.hpp	/^            inline rule_type boundary_rule(boundary_type t)$/;"	f	namespace:boost::locale::boundary	signature:(boundary_type t)
boundary_type	/usr/include/boost/locale/boundary/types.hpp	/^            enum boundary_type {$/;"	g	namespace:boost::locale::boundary
break_info	/usr/include/boost/locale/boundary/facets.hpp	/^                break_info() : $/;"	f	struct:boost::locale::boundary::break_info	access:public	signature:()
break_info	/usr/include/boost/locale/boundary/facets.hpp	/^                break_info(size_t v) :$/;"	f	struct:boost::locale::boundary::break_info	access:public	signature:(size_t v)
break_info	/usr/include/boost/locale/boundary/facets.hpp	/^            struct break_info {$/;"	s	namespace:boost::locale::boundary
c_context_	/usr/include/boost/locale/message.hpp	/^            char_type const *c_context_;$/;"	m	class:boost::locale::basic_message	access:private
c_id_	/usr/include/boost/locale/message.hpp	/^            char_type const *c_id_;$/;"	m	class:boost::locale::basic_message	access:private
c_plural_	/usr/include/boost/locale/message.hpp	/^            char_type const *c_plural_;$/;"	m	class:boost::locale::basic_message	access:private
calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar();$/;"	p	class:boost::locale::calendar	access:public	signature:()
calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar(calendar const &other);$/;"	p	class:boost::locale::calendar	access:public	signature:(calendar const &other)
calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar(std::ios_base &ios);$/;"	p	class:boost::locale::calendar	access:public	signature:(std::ios_base &ios)
calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar(std::locale const &l);$/;"	p	class:boost::locale::calendar	access:public	signature:(std::locale const &l)
calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar(std::locale const &l,std::string const &zone);$/;"	p	class:boost::locale::calendar	access:public	signature:(std::locale const &l,std::string const &zone)
calendar	/usr/include/boost/locale/date_time.hpp	/^            calendar(std::string const &zone);$/;"	p	class:boost::locale::calendar	access:public	signature:(std::string const &zone)
calendar	/usr/include/boost/locale/date_time.hpp	/^        class BOOST_LOCALE_DECL calendar {$/;"	c	namespace:boost::locale
calendar_facet	/usr/include/boost/locale/date_time_facet.hpp	/^            calendar_facet(size_t refs = 0) : std::locale::facet(refs) $/;"	f	class:boost::locale::calendar_facet	access:public	signature:(size_t refs = 0)
calendar_facet	/usr/include/boost/locale/date_time_facet.hpp	/^        class BOOST_LOCALE_DECL calendar_facet : public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:std::locale::facet
calendar_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     calendar_facet  = 1 << 16;   \/\/\/< Generate boundary analysis facet$/;"	m	namespace:boost::locale
calendar_option_type	/usr/include/boost/locale/date_time_facet.hpp	/^            } calendar_option_type;$/;"	t	class:boost::locale::abstract_calendar	typeref:enum:boost::locale::abstract_calendar::__anon6	access:public
callback	/usr/include/boost/locale/gnu_gettext.hpp	/^        callback_type callback;$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
callback_type	/usr/include/boost/locale/gnu_gettext.hpp	/^                > callback_type;$/;"	t	struct:boost::locale::gnu_gettext::messages_info	access:public
case_folding	/usr/include/boost/locale/conversion.hpp	/^                case_folding,   \/\/\/< Fold case in the text$/;"	e	enum:boost::locale::converter_base::__anon2
cast	/usr/include/boost/locale/message.hpp	/^                static CharType const *cast(CharType const *msg,std::basic_string<CharType> &\/*unused*\/)$/;"	f	struct:boost::locale::details::string_cast_traits	access:public	signature:(CharType const *msg,std::basic_string<CharType> & )
cast	/usr/include/boost/locale/message.hpp	/^                static char const *cast(char const *msg,std::string &buffer)$/;"	f	struct:boost::locale::details::string_cast_traits	access:public	signature:(char const *msg,std::string &buffer)
categories	/usr/include/boost/locale/generator.hpp	/^            locale_category_type categories() const;$/;"	p	class:boost::locale::generator	access:public	signature:() const
categories	/usr/include/boost/locale/generator.hpp	/^            void categories(locale_category_type cats);$/;"	p	class:boost::locale::generator	access:public	signature:(locale_category_type cats)
cboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<char const *> cboundary_point;                     \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
cboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<char const *> cboundary_point_index;       \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
char16_t_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t char16_t_facet  = 1 << 2;   \/\/\/< C++0x char16_t facets$/;"	m	namespace:boost::locale
char32_t_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t char32_t_facet  = 1 << 3;   \/\/\/< C++0x char32_t facets$/;"	m	namespace:boost::locale
char_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t char_facet      = 1 << 0;   \/\/\/< 8-bit character facets$/;"	m	namespace:boost::locale
char_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef typename std::iterator_traits<IteratorType>::value_type char_type;$/;"	t	struct:boost::locale::boundary::details::mapping_traits	access:public
char_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef typename std::iterator_traits<base_iterator>::value_type char_type;$/;"	t	class:boost::locale::boundary::details::mapping	access:public
char_type	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef typename std::iterator_traits<IteratorType>::value_type char_type;$/;"	t	class:boost::locale::boundary::segment	access:public
char_type	/usr/include/boost/locale/collator.hpp	/^        typedef CharType char_type;$/;"	t	class:boost::locale::collator	access:public
char_type	/usr/include/boost/locale/format.hpp	/^            typedef CharType char_type; \/\/\/< Underlying character type$/;"	t	class:boost::locale::basic_format	access:public
char_type	/usr/include/boost/locale/message.hpp	/^            typedef CharType char_type; \/\/\/< The character this message object is used with$/;"	t	class:boost::locale::basic_message	access:public
char_type	/usr/include/boost/locale/message.hpp	/^            typedef CharType char_type;$/;"	t	class:boost::locale::message_format	access:public
char_type	/usr/include/boost/locale/utf.hpp	/^        typedef CharType char_type;$/;"	t	struct:boost::locale::utf::utf_traits	access:public
character	/usr/include/boost/locale/boundary/types.hpp	/^                character,  \/\/\/< Analyse the text for character boundaries$/;"	e	enum:boost::locale::boundary::boundary_type
character_any	/usr/include/boost/locale/boundary/types.hpp	/^                character_any   =  0xF,     \/\/\/< Not in use, just for consistency$/;"	m	namespace:boost::locale::boundary
character_facet_type	/usr/include/boost/locale/generator.hpp	/^        typedef uint32_t character_facet_type; \/\/\/<type that specifies the character type that locales can be generated for$/;"	t	namespace:boost::locale
character_first_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t character_first_facet = char_facet;  \/\/\/< First facet specific for character type$/;"	m	namespace:boost::locale
character_last_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t character_last_facet = char32_t_facet; \/\/\/< Last facet specific for character type$/;"	m	namespace:boost::locale
character_mask	/usr/include/boost/locale/boundary/types.hpp	/^                character_mask  =  0xF;     \/\/\/< Select all character breaking points$/;"	m	namespace:boost::locale::boundary
characters	/usr/include/boost/locale/generator.hpp	/^            character_facet_type characters() const;$/;"	p	class:boost::locale::generator	access:public	signature:() const
characters	/usr/include/boost/locale/generator.hpp	/^            void characters(character_facet_type chars);$/;"	p	class:boost::locale::generator	access:public	signature:(character_facet_type chars)
clear_cache	/usr/include/boost/locale/generator.hpp	/^            void clear_cache();$/;"	p	class:boost::locale::generator	access:public	signature:()
clear_domains	/usr/include/boost/locale/generator.hpp	/^            void clear_domains();$/;"	p	class:boost::locale::generator	access:public	signature:()
clear_options	/usr/include/boost/locale/generator.hpp	/^            void clear_options();$/;"	p	class:boost::locale::generator	access:public	signature:()
clear_options	/usr/include/boost/locale/localization_backend.hpp	/^            virtual void clear_options() = 0;$/;"	p	class:boost::locale::localization_backend	access:public	signature:()
clear_paths	/usr/include/boost/locale/generator.hpp	/^            void clear_paths();$/;"	p	class:boost::locale::generator	access:public	signature:()
clone	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual abstract_calendar *clone() const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:() const
clone	/usr/include/boost/locale/localization_backend.hpp	/^            virtual localization_backend *clone() const = 0;$/;"	p	class:boost::locale::localization_backend	access:public	signature:() const
clone	/usr/include/boost/locale/util.hpp	/^        virtual base_converter *clone() const $/;"	f	class:boost::locale::util::base_converter	access:public	signature:() const
code_point	/usr/include/boost/locale/utf.hpp	/^    typedef uint32_t code_point;$/;"	t	namespace:boost::locale::utf
codepage_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     codepage_facet  = 1 << 5;   \/\/\/< Generate character set conversion facets (derived from std::codecvt)$/;"	m	namespace:boost::locale
collation_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     collation_facet = 1 << 1;   \/\/\/< Generate collation facets$/;"	m	namespace:boost::locale
collator	/usr/include/boost/locale/collator.hpp	/^        collator(size_t refs = 0) : std::collate<CharType>(refs) $/;"	f	class:boost::locale::collator	access:protected	signature:(size_t refs = 0)
collator	/usr/include/boost/locale/collator.hpp	/^    class collator : $/;"	c	namespace:boost::locale	inherits:std::collate,collator_base
collator_base	/usr/include/boost/locale/collator.hpp	/^    class collator_base {$/;"	c	namespace:boost::locale
combine_surrogate	/usr/include/boost/locale/utf.hpp	/^        static code_point combine_surrogate(uint16_t w1,uint16_t w2)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(uint16_t w1,uint16_t w2)
comparator	/usr/include/boost/locale/collator.hpp	/^        comparator(std::locale const &l=std::locale(),collator_base::level_type level=default_level) : $/;"	f	struct:boost::locale::comparator	access:public	signature:(std::locale const &l=std::locale(),collator_base::level_type level=default_level)
comparator	/usr/include/boost/locale/collator.hpp	/^    struct comparator$/;"	s	namespace:boost::locale
compare	/usr/include/boost/locale/collator.hpp	/^        int compare(level_type level,$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level, char_type const *b1,char_type const *e1, char_type const *b2,char_type const *e2) const
compare	/usr/include/boost/locale/collator.hpp	/^        int compare(level_type level,string_type const &l,string_type const &r) const$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level,string_type const &l,string_type const &r) const
compare_string	/usr/include/boost/locale/boundary/segment.hpp	/^        int compare_string(Char const *begin,Right const &r)$/;"	f	namespace:boost::locale::boundary::details	signature:(Char const *begin,Right const &r)
compare_string	/usr/include/boost/locale/boundary/segment.hpp	/^        int compare_string(Left const &l,Char const *begin)$/;"	f	namespace:boost::locale::boundary::details	signature:(Left const &l,Char const *begin)
compare_text	/usr/include/boost/locale/boundary/segment.hpp	/^        int compare_text(Left const &l,Right const &r)$/;"	f	namespace:boost::locale::boundary::details	signature:(Left const &l,Right const &r)
compare_text	/usr/include/boost/locale/boundary/segment.hpp	/^        int compare_text(LeftIterator l_begin,LeftIterator l_end,RightIterator r_begin,RightIterator r_end)$/;"	f	namespace:boost::locale::boundary::details	signature:(LeftIterator l_begin,LeftIterator l_end,RightIterator r_begin,RightIterator r_end)
const_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::boundary_point_index_iterator<base_iterator> const_iterator;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
const_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::segment_index_iterator<base_iterator> const_iterator;$/;"	t	class:boost::locale::boundary::segment_index	access:public
const_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef unspecified_iterator_type const_iterator;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
const_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef unspecified_iterator_type const_iterator;$/;"	t	class:boost::locale::boundary::segment_index	access:public
const_iterator	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef IteratorType const_iterator;$/;"	t	class:boost::locale::boundary::segment	access:public
context	/usr/include/boost/locale/message.hpp	/^            char_type const *context() const$/;"	f	class:boost::locale::basic_message	access:private	signature:() const
context_	/usr/include/boost/locale/message.hpp	/^            string_type context_;$/;"	m	class:boost::locale::basic_message	access:private
conv	/usr/include/boost/locale/encoding.hpp	/^        namespace conv {$/;"	n	namespace:boost::locale
conv	/usr/include/boost/locale/encoding_errors.hpp	/^        namespace conv {$/;"	n	namespace:boost::locale
conv	/usr/include/boost/locale/encoding_utf.hpp	/^        namespace conv {$/;"	n	namespace:boost::locale
conversion_error	/usr/include/boost/locale/encoding_errors.hpp	/^                conversion_error() : std::runtime_error("Conversion failed") {}$/;"	f	class:boost::locale::conv::conversion_error	access:public	signature:()
conversion_error	/usr/include/boost/locale/encoding_errors.hpp	/^            class BOOST_SYMBOL_VISIBLE conversion_error : public std::runtime_error {$/;"	c	namespace:boost::locale::conv	inherits:std::runtime_error
conversion_type	/usr/include/boost/locale/conversion.hpp	/^            } conversion_type;$/;"	t	class:boost::locale::converter_base	typeref:enum:boost::locale::converter_base::__anon2	access:public
convert	/usr/include/boost/locale/conversion.hpp	/^             virtual std::wstring convert(conversion_type how,wchar_t const *begin,wchar_t const *end,int flags = 0) const = 0;$/;"	p	class:boost::locale::converter	access:public	signature:(conversion_type how,wchar_t const *begin,wchar_t const *end,int flags = 0) const
convert	/usr/include/boost/locale/conversion.hpp	/^            virtual std::basic_string<Char> convert(conversion_type how,Char const *begin,Char const *end,int flags = 0) const = 0;$/;"	p	class:boost::locale::converter	access:public	signature:(conversion_type how,Char const *begin,Char const *end,int flags = 0) const
convert	/usr/include/boost/locale/conversion.hpp	/^            virtual std::string convert(conversion_type how,char const *begin,char const *end,int flags = 0) const = 0;$/;"	p	class:boost::locale::converter	access:public	signature:(conversion_type how,char const *begin,char const *end,int flags = 0) const
convert	/usr/include/boost/locale/conversion.hpp	/^            virtual std::u16string convert(conversion_type how,char16_t const *begin,char16_t const *end,int flags = 0) const = 0; $/;"	p	class:boost::locale::converter	access:public	signature:(conversion_type how,char16_t const *begin,char16_t const *end,int flags = 0) const
convert	/usr/include/boost/locale/conversion.hpp	/^            virtual std::u32string convert(conversion_type how,char32_t const *begin,char32_t const *end,int flags = 0) const = 0;$/;"	p	class:boost::locale::converter	access:public	signature:(conversion_type how,char32_t const *begin,char32_t const *end,int flags = 0) const
convert	/usr/include/boost/locale/message.hpp	/^            virtual char_type const *convert(char_type const *msg,string_type &buffer) const = 0;$/;"	p	class:boost::locale::message_format	access:public	signature:(char_type const *msg,string_type &buffer) const
convert_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     convert_facet   = 1 << 0;   \/\/\/< Generate conversion facets$/;"	m	namespace:boost::locale
converter	/usr/include/boost/locale/conversion.hpp	/^            converter(size_t refs = 0) : std::locale::facet(refs)$/;"	f	class:boost::locale::converter	access:public	signature:(size_t refs = 0)
converter	/usr/include/boost/locale/conversion.hpp	/^        class BOOST_LOCALE_DECL converter: public converter_base, public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:converter_base,std::locale::facet
converter	/usr/include/boost/locale/conversion.hpp	/^        class BOOST_LOCALE_DECL converter<char16_t> : public converter_base, public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:converter_base,std::locale::facet
converter	/usr/include/boost/locale/conversion.hpp	/^        class BOOST_LOCALE_DECL converter<char32_t> : public converter_base, public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:converter_base,std::locale::facet
converter	/usr/include/boost/locale/conversion.hpp	/^        class BOOST_LOCALE_DECL converter<char> : public converter_base, public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:converter_base,std::locale::facet
converter	/usr/include/boost/locale/conversion.hpp	/^        class BOOST_LOCALE_DECL converter<wchar_t> : public converter_base, public std::locale::facet {$/;"	c	namespace:boost::locale	inherits:converter_base,std::locale::facet
converter_base	/usr/include/boost/locale/conversion.hpp	/^        class converter_base {$/;"	c	namespace:boost::locale
country	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::string country;    \/\/\/< The country we load the catalog for, like "US", "IL"$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
country	/usr/include/boost/locale/info.hpp	/^            std::string country() const$/;"	f	class:boost::locale::info	access:public	signature:() const
country_property	/usr/include/boost/locale/info.hpp	/^                country_property,   \/\/\/< ISO 3166 country id$/;"	e	enum:boost::locale::info::string_propery
create_calendar	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual abstract_calendar *create_calendar() const = 0;$/;"	p	class:boost::locale::calendar_facet	access:public	signature:() const
create_codecvt	/usr/include/boost/locale/util.hpp	/^    std::locale create_codecvt(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type);$/;"	p	namespace:boost::locale::util	signature:(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type)
create_info	/usr/include/boost/locale/util.hpp	/^    std::locale create_info(std::locale const &in,std::string const &name); $/;"	p	namespace:boost::locale::util	signature:(std::locale const &in,std::string const &name)
create_messages_facet	/usr/include/boost/locale/gnu_gettext.hpp	/^    BOOST_LOCALE_DECL message_format<char16_t> *create_messages_facet(messages_info const &info);$/;"	p	namespace:boost::locale::gnu_gettext	signature:(messages_info const &info)
create_messages_facet	/usr/include/boost/locale/gnu_gettext.hpp	/^    BOOST_LOCALE_DECL message_format<char32_t> *create_messages_facet(messages_info const &info);$/;"	p	namespace:boost::locale::gnu_gettext	signature:(messages_info const &info)
create_messages_facet	/usr/include/boost/locale/gnu_gettext.hpp	/^    BOOST_LOCALE_DECL message_format<char> *create_messages_facet(messages_info const &info);$/;"	p	namespace:boost::locale::gnu_gettext	signature:(messages_info const &info)
create_messages_facet	/usr/include/boost/locale/gnu_gettext.hpp	/^    BOOST_LOCALE_DECL message_format<wchar_t> *create_messages_facet(messages_info const &info);$/;"	p	namespace:boost::locale::gnu_gettext	signature:(messages_info const &info)
create_messages_facet	/usr/include/boost/locale/gnu_gettext.hpp	/^    message_format<CharType> *create_messages_facet(messages_info const &info);$/;"	p	namespace:boost::locale::gnu_gettext	signature:(messages_info const &info)
create_simple_converter	/usr/include/boost/locale/util.hpp	/^    BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_simple_converter(std::string const &encoding);$/;"	p	namespace:boost::locale::util	signature:(std::string const &encoding)
create_utf8_converter	/usr/include/boost/locale/util.hpp	/^    BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_utf8_converter();$/;"	p	namespace:boost::locale::util	signature:()
csegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<char const *> csegment;                     \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
csegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<char const *> csegment_index;                     \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
currency	/usr/include/boost/locale/formatting.hpp	/^                currency            = 2,$/;"	e	enum:boost::locale::flags::__anon8
currency	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & currency(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
currency_default	/usr/include/boost/locale/formatting.hpp	/^                currency_default    = 0 << 5,$/;"	e	enum:boost::locale::flags::__anon8
currency_default	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & currency_default(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
currency_flags	/usr/include/boost/locale/formatting.hpp	/^            uint64_t currency_flags() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
currency_flags	/usr/include/boost/locale/formatting.hpp	/^            void currency_flags(uint64_t flags);$/;"	p	class:boost::locale::ios_info	access:public	signature:(uint64_t flags)
currency_flags_mask	/usr/include/boost/locale/formatting.hpp	/^                currency_flags_mask = 3 << 5,$/;"	e	enum:boost::locale::flags::__anon8
currency_iso	/usr/include/boost/locale/formatting.hpp	/^                currency_iso        = 1 << 5,$/;"	e	enum:boost::locale::flags::__anon8
currency_iso	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & currency_iso(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
currency_national	/usr/include/boost/locale/formatting.hpp	/^                currency_national   = 2 << 5,$/;"	e	enum:boost::locale::flags::__anon8
currency_national	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & currency_national(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
current	/usr/include/boost/locale/date_time_facet.hpp	/^                current,            \/\/\/< Current value of this period$/;"	e	enum:boost::locale::abstract_calendar::__anon4
current_	/usr/include/boost/locale/boundary/index.hpp	/^                    size_t current_;$/;"	m	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private
current_	/usr/include/boost/locale/boundary/index.hpp	/^                    std::pair<size_t,size_t> current_;$/;"	m	class:boost::locale::boundary::details::segment_index_iterator	access:private
d	/usr/include/boost/locale/format.hpp	/^                std::auto_ptr<data> d;$/;"	m	class:boost::locale::details::format_parser	access:private
d	/usr/include/boost/locale/formatting.hpp	/^            data *d;$/;"	m	class:boost::locale::ios_info	access:private
d	/usr/include/boost/locale/generator.hpp	/^            std::auto_ptr<data> d;$/;"	m	class:boost::locale::generator	access:private
date	/usr/include/boost/locale/formatting.hpp	/^                date                = 4,$/;"	e	enum:boost::locale::flags::__anon8
date	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
date_default	/usr/include/boost/locale/formatting.hpp	/^                date_default        = 0 << 10,$/;"	e	enum:boost::locale::flags::__anon8
date_default	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date_default(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
date_flags	/usr/include/boost/locale/formatting.hpp	/^            uint64_t date_flags() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
date_flags	/usr/include/boost/locale/formatting.hpp	/^            void date_flags(uint64_t flags);$/;"	p	class:boost::locale::ios_info	access:public	signature:(uint64_t flags)
date_flags_mask	/usr/include/boost/locale/formatting.hpp	/^                date_flags_mask     = 7 << 10,$/;"	e	enum:boost::locale::flags::__anon8
date_full	/usr/include/boost/locale/formatting.hpp	/^                date_full           = 4 << 10,$/;"	e	enum:boost::locale::flags::__anon8
date_full	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date_full(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
date_long	/usr/include/boost/locale/formatting.hpp	/^                date_long           = 3 << 10,$/;"	e	enum:boost::locale::flags::__anon8
date_long	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date_long(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
date_medium	/usr/include/boost/locale/formatting.hpp	/^                date_medium         = 2 << 10,$/;"	e	enum:boost::locale::flags::__anon8
date_medium	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date_medium(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
date_short	/usr/include/boost/locale/formatting.hpp	/^                date_short          = 1 << 10,$/;"	e	enum:boost::locale::flags::__anon8
date_short	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & date_short(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time();$/;"	p	class:boost::locale::date_time	access:public	signature:()
date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(calendar const &cal);$/;"	p	class:boost::locale::date_time	access:public	signature:(calendar const &cal)
date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(date_time const &other);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other)
date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(date_time const &other,date_time_period_set const &set);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other,date_time_period_set const &set)
date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(date_time_period_set const &set);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &set)
date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(date_time_period_set const &set,calendar const &cal);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &set,calendar const &cal)
date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(double time);$/;"	p	class:boost::locale::date_time	access:public	signature:(double time)
date_time	/usr/include/boost/locale/date_time.hpp	/^            date_time(double time,calendar const &cal);$/;"	p	class:boost::locale::date_time	access:public	signature:(double time,calendar const &cal)
date_time	/usr/include/boost/locale/date_time.hpp	/^        class BOOST_LOCALE_DECL date_time {$/;"	c	namespace:boost::locale
date_time_duration	/usr/include/boost/locale/date_time.hpp	/^            date_time_duration(date_time const &first,date_time const &second) :$/;"	f	class:boost::locale::date_time_duration	access:public	signature:(date_time const &first,date_time const &second)
date_time_duration	/usr/include/boost/locale/date_time.hpp	/^        class date_time_duration {$/;"	c	namespace:boost::locale
date_time_error	/usr/include/boost/locale/date_time.hpp	/^            date_time_error(std::string const &e) : std::runtime_error(e) {}$/;"	f	class:boost::locale::date_time_error	access:public	signature:(std::string const &e)
date_time_error	/usr/include/boost/locale/date_time.hpp	/^        class BOOST_SYMBOL_VISIBLE date_time_error : public std::runtime_error {$/;"	c	namespace:boost::locale	inherits:std::runtime_error
date_time_pattern	/usr/include/boost/locale/formatting.hpp	/^            std::basic_string<CharType> date_time_pattern() const$/;"	f	class:boost::locale::ios_info	access:public	signature:() const
date_time_pattern	/usr/include/boost/locale/formatting.hpp	/^            void date_time_pattern(std::basic_string<CharType> const &str)$/;"	f	class:boost::locale::ios_info	access:public	signature:(std::basic_string<CharType> const &str)
date_time_pattern_set	/usr/include/boost/locale/formatting.hpp	/^            string_set &date_time_pattern_set();$/;"	p	class:boost::locale::ios_info	access:private	signature:()
date_time_pattern_set	/usr/include/boost/locale/formatting.hpp	/^            string_set const &date_time_pattern_set() const;$/;"	p	class:boost::locale::ios_info	access:private	signature:() const
date_time_period	/usr/include/boost/locale/date_time.hpp	/^            date_time_period(period::period_type f=period::period_type(),int v=1) : type(f), value(v) {}$/;"	f	struct:boost::locale::date_time_period	access:public	signature:(period::period_type f=period::period_type(),int v=1)
date_time_period	/usr/include/boost/locale/date_time.hpp	/^        struct date_time_period $/;"	s	namespace:boost::locale
date_time_period_set	/usr/include/boost/locale/date_time.hpp	/^            date_time_period_set()$/;"	f	class:boost::locale::date_time_period_set	access:public	signature:()
date_time_period_set	/usr/include/boost/locale/date_time.hpp	/^            date_time_period_set(date_time_period const &fl)$/;"	f	class:boost::locale::date_time_period_set	access:public	signature:(date_time_period const &fl)
date_time_period_set	/usr/include/boost/locale/date_time.hpp	/^            date_time_period_set(period::period_type f)$/;"	f	class:boost::locale::date_time_period_set	access:public	signature:(period::period_type f)
date_time_period_set	/usr/include/boost/locale/date_time.hpp	/^        class date_time_period_set {$/;"	c	namespace:boost::locale
datetime	/usr/include/boost/locale/formatting.hpp	/^                datetime            = 6,$/;"	e	enum:boost::locale::flags::__anon8
datetime	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & datetime(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
datetime_	/usr/include/boost/locale/formatting.hpp	/^            string_set datetime_;$/;"	m	class:boost::locale::ios_info	access:private
datetime_flags	/usr/include/boost/locale/formatting.hpp	/^            uint64_t datetime_flags() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
datetime_flags	/usr/include/boost/locale/formatting.hpp	/^            void datetime_flags(uint64_t flags);$/;"	p	class:boost::locale::ios_info	access:public	signature:(uint64_t flags)
datetime_flags_mask	/usr/include/boost/locale/formatting.hpp	/^                datetime_flags_mask = date_flags_mask | time_flags_mask$/;"	e	enum:boost::locale::flags::__anon8
datetime_pattern	/usr/include/boost/locale/formatting.hpp	/^                datetime_pattern,   \/\/\/< strftime like formatting$/;"	e	enum:boost::locale::flags::__anon9
day	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period day(int v) { return date_time_period(day(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
day	/usr/include/boost/locale/date_time.hpp	/^            inline int day(date_time const &dt) { return dt.get(day()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
day	/usr/include/boost/locale/date_time.hpp	/^            inline int day(date_time_duration const &dt) { return dt.get(day()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
day	/usr/include/boost/locale/date_time.hpp	/^            inline period_type day(){ return period_type(marks::day); }$/;"	f	namespace:boost::locale::period	signature:()
day	/usr/include/boost/locale/date_time_facet.hpp	/^                    day,                        \/\/\/< The day of month, calendar specific, in Gregorian [1..31]$/;"	e	enum:boost::locale::period::marks::period_mark
day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period day_of_week(int v) { return date_time_period(day_of_week(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week(date_time const &dt) { return dt.get(day_of_week()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week(date_time_duration const &dt) { return dt.get(day_of_week()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline period_type day_of_week(){ return period_type(marks::day_of_week); }$/;"	f	namespace:boost::locale::period	signature:()
day_of_week	/usr/include/boost/locale/date_time_facet.hpp	/^                    day_of_week,                \/\/\/< Day of week, Sunday=1, Monday=2,..., Saturday=7.$/;"	e	enum:boost::locale::period::marks::period_mark
day_of_week_in_month	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period day_of_week_in_month(int v) { return date_time_period(day_of_week_in_month(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
day_of_week_in_month	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week_in_month(date_time const &dt) { return dt.get(day_of_week_in_month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
day_of_week_in_month	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week_in_month(date_time_duration const &dt) { return dt.get(day_of_week_in_month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
day_of_week_in_month	/usr/include/boost/locale/date_time.hpp	/^            inline period_type day_of_week_in_month(){ return period_type(marks::day_of_week_in_month); }$/;"	f	namespace:boost::locale::period	signature:()
day_of_week_in_month	/usr/include/boost/locale/date_time_facet.hpp	/^                    day_of_week_in_month,       \/\/\/< Original number of the day of the week in month. For example 1st Sunday, $/;"	e	enum:boost::locale::period::marks::period_mark
day_of_week_local	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period day_of_week_local(int v) { return date_time_period(day_of_week_local(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
day_of_week_local	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week_local(date_time const &dt) { return dt.get(day_of_week_local()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
day_of_week_local	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_week_local(date_time_duration const &dt) { return dt.get(day_of_week_local()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
day_of_week_local	/usr/include/boost/locale/date_time.hpp	/^            inline period_type day_of_week_local(){ return period_type(marks::day_of_week_local); }$/;"	f	namespace:boost::locale::period	signature:()
day_of_week_local	/usr/include/boost/locale/date_time_facet.hpp	/^                    day_of_week_local,          \/\/\/< Local day of week, for example in France Monday is 1, in US Sunday is 1, [1..7]$/;"	e	enum:boost::locale::period::marks::period_mark
day_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period day_of_year(int v) { return date_time_period(day_of_year(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
day_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_year(date_time const &dt) { return dt.get(day_of_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
day_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline int day_of_year(date_time_duration const &dt) { return dt.get(day_of_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
day_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline period_type day_of_year(){ return period_type(marks::day_of_year); }$/;"	f	namespace:boost::locale::period	signature:()
day_of_year	/usr/include/boost/locale/date_time_facet.hpp	/^                    day_of_year,                \/\/\/< The number of day in year, starting from 1, in Gregorian  [1..366]$/;"	e	enum:boost::locale::period::marks::period_mark
december	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period december() { return date_time_period(month(),11); }$/;"	f	namespace:boost::locale::period	signature:()
decode	/usr/include/boost/locale/utf.hpp	/^        static code_point decode(It &current,It last)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(It &current,It last)
decode	/usr/include/boost/locale/utf.hpp	/^        static code_point decode(Iterator &p,Iterator e)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(Iterator &p,Iterator e)
decode	/usr/include/boost/locale/utf.hpp	/^        static code_point decode(Iterator &p,Iterator e);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(Iterator &p,Iterator e)
decode_valid	/usr/include/boost/locale/utf.hpp	/^        static code_point decode_valid(It &current)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(It &current)
decode_valid	/usr/include/boost/locale/utf.hpp	/^        static code_point decode_valid(Iterator &p)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(Iterator &p)
decode_valid	/usr/include/boost/locale/utf.hpp	/^        static code_point decode_valid(Iterator &p);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(Iterator &p)
decrement	/usr/include/boost/locale/boundary/index.hpp	/^                    void decrement()$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:()
decrement	/usr/include/boost/locale/boundary/index.hpp	/^                    void decrement()$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:()
default_method	/usr/include/boost/locale/encoding_errors.hpp	/^                default_method  = skip  \/\/\/< Default method - skip$/;"	e	enum:boost::locale::conv::__anon7
dereference	/usr/include/boost/locale/boundary/index.hpp	/^                    boundary_point_type const &dereference() const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:() const
dereference	/usr/include/boost/locale/boundary/index.hpp	/^                    segment_type const &dereference() const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:() const
details	/usr/include/boost/locale/boundary/index.hpp	/^            namespace details {$/;"	n	namespace:boost::locale::boundary
details	/usr/include/boost/locale/boundary/segment.hpp	/^    namespace details {$/;"	n	namespace:boost::locale::boundary
details	/usr/include/boost/locale/format.hpp	/^        namespace details {$/;"	n	namespace:boost::locale
details	/usr/include/boost/locale/formatting.hpp	/^            namespace details {$/;"	n	namespace:boost::locale::as
details	/usr/include/boost/locale/message.hpp	/^            namespace details {$/;"	n	namespace:boost::locale::as
details	/usr/include/boost/locale/message.hpp	/^        namespace details {$/;"	n	namespace:boost::locale
dgettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  dgettext(  char const *domain,$/;"	f	namespace:boost::locale	signature:( char const *domain, CharType const *id, std::locale const &loc=std::locale())
difference	/usr/include/boost/locale/date_time.hpp	/^            int difference(date_time const &other,period::period_type f) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other,period::period_type f) const
difference	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual int difference(abstract_calendar const *other,period::marks::period_mark p) const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(abstract_calendar const *other,period::marks::period_mark p) const
difference_type	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef typename std::iterator_traits<IteratorType>::difference_type difference_type;$/;"	t	class:boost::locale::boundary::segment	access:public
display_flags	/usr/include/boost/locale/formatting.hpp	/^            uint64_t display_flags() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
display_flags	/usr/include/boost/locale/formatting.hpp	/^            void display_flags(uint64_t flags);$/;"	p	class:boost::locale::ios_info	access:public	signature:(uint64_t flags)
display_flags_mask	/usr/include/boost/locale/formatting.hpp	/^                display_flags_mask  = 31,$/;"	e	enum:boost::locale::flags::__anon8
display_flags_type	/usr/include/boost/locale/formatting.hpp	/^            } display_flags_type;$/;"	t	namespace:boost::locale::flags	typeref:enum:boost::locale::flags::__anon8
dngettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  dngettext( char const *domain,$/;"	f	namespace:boost::locale	signature:( char const *domain, CharType const *s, CharType const *p, int n, std::locale const &loc=std::locale())
dnpgettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  dnpgettext(char const *domain,$/;"	f	namespace:boost::locale	signature:(char const *domain, CharType const *context, CharType const *s, CharType const *p, int n, std::locale const &loc=std::locale())
do_compare	/usr/include/boost/locale/collator.hpp	/^        virtual int do_compare( char_type const *b1,char_type const *e1,$/;"	f	class:boost::locale::collator	access:protected	signature:( char_type const *b1,char_type const *e1, char_type const *b2,char_type const *e2) const
do_compare	/usr/include/boost/locale/collator.hpp	/^        virtual int do_compare( level_type level,$/;"	p	class:boost::locale::collator	access:protected	signature:( level_type level, char_type const *b1,char_type const *e1, char_type const *b2,char_type const *e2) const
do_hash	/usr/include/boost/locale/collator.hpp	/^        virtual long do_hash(char_type const *b,char_type const *e) const$/;"	f	class:boost::locale::collator	access:protected	signature:(char_type const *b,char_type const *e) const
do_hash	/usr/include/boost/locale/collator.hpp	/^        virtual long do_hash(level_type level,char_type const *b,char_type const *e) const = 0;$/;"	p	class:boost::locale::collator	access:protected	signature:(level_type level,char_type const *b,char_type const *e) const
do_transform	/usr/include/boost/locale/collator.hpp	/^        virtual string_type do_transform(char_type const *b,char_type const *e) const$/;"	f	class:boost::locale::collator	access:protected	signature:(char_type const *b,char_type const *e) const
do_transform	/usr/include/boost/locale/collator.hpp	/^        virtual string_type do_transform(level_type level,char_type const *b,char_type const *e) const = 0;$/;"	p	class:boost::locale::collator	access:protected	signature:(level_type level,char_type const *b,char_type const *e) const
domain	/usr/include/boost/locale/gnu_gettext.hpp	/^            domain() {}$/;"	f	struct:boost::locale::gnu_gettext::messages_info::domain	access:public	signature:()
domain	/usr/include/boost/locale/gnu_gettext.hpp	/^            domain(std::string const &n) $/;"	f	struct:boost::locale::gnu_gettext::messages_info::domain	access:public	signature:(std::string const &n)
domain	/usr/include/boost/locale/gnu_gettext.hpp	/^        struct domain {$/;"	s	struct:boost::locale::gnu_gettext::messages_info	access:public
domain	/usr/include/boost/locale/message.hpp	/^            domain(std::string const &id)$/;"	f	namespace:boost::locale::as	signature:(std::string const &id)
domain	/usr/include/boost/locale/message.hpp	/^            virtual int domain(std::string const &domain) const = 0;$/;"	p	class:boost::locale::message_format	access:public	signature:(std::string const &domain) const
domain_id	/usr/include/boost/locale/formatting.hpp	/^                domain_id           \/\/\/< Domain code - for message formatting$/;"	e	enum:boost::locale::flags::__anon10
domain_id	/usr/include/boost/locale/formatting.hpp	/^            int domain_id() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
domain_id	/usr/include/boost/locale/formatting.hpp	/^            void domain_id(int);$/;"	p	class:boost::locale::ios_info	access:public	signature:(int)
domain_id	/usr/include/boost/locale/message.hpp	/^                    std::string domain_id;$/;"	m	struct:boost::locale::as::details::set_domain	access:public
domain_id_	/usr/include/boost/locale/formatting.hpp	/^            int domain_id_;$/;"	m	class:boost::locale::ios_info	access:private
domains	/usr/include/boost/locale/gnu_gettext.hpp	/^        domains_type domains;           \/\/\/< Message domains - application name, like my_app. So files named my_app.mo$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
domains_type	/usr/include/boost/locale/gnu_gettext.hpp	/^        typedef std::vector<domain> domains_type;   \/\/\/< Type that defines a list of domains that are loaded$/;"	t	struct:boost::locale::gnu_gettext::messages_info	access:public
dpgettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  dpgettext( char const *domain,$/;"	f	namespace:boost::locale	signature:( char const *domain, CharType const *context, CharType const *id, std::locale const &loc=std::locale())
e_	/usr/include/boost/locale/date_time.hpp	/^            date_time const &e_;$/;"	m	class:boost::locale::date_time_duration	access:private
empty	/usr/include/boost/locale/boundary/segment.hpp	/^        bool empty() const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
encode	/usr/include/boost/locale/utf.hpp	/^        static It encode(code_point u,It out)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point u,It out)
encode	/usr/include/boost/locale/utf.hpp	/^        static Iterator encode(code_point value,Iterator out)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point value,Iterator out)
encode	/usr/include/boost/locale/utf.hpp	/^        static Iterator encode(code_point value,Iterator out);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point value,Iterator out)
encoding	/usr/include/boost/locale/gnu_gettext.hpp	/^            std::string encoding;   \/\/\/< The character encoding for the domain$/;"	m	struct:boost::locale::gnu_gettext::messages_info::domain	access:public
encoding	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::string encoding;   \/\/\/< Required target charset encoding. Ignored for wide characters.$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
encoding	/usr/include/boost/locale/info.hpp	/^            std::string encoding() const$/;"	f	class:boost::locale::info	access:public	signature:() const
encoding_property	/usr/include/boost/locale/info.hpp	/^                encoding_property,   \/\/\/< encoding name$/;"	e	enum:boost::locale::info::string_propery
end	/usr/include/boost/locale/boundary/index.hpp	/^                    base_iterator end() const$/;"	f	class:boost::locale::boundary::details::mapping	access:public	signature:() const
end	/usr/include/boost/locale/boundary/index.hpp	/^                iterator end() const$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:() const
end	/usr/include/boost/locale/boundary/index.hpp	/^                iterator end() const$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:() const
end	/usr/include/boost/locale/boundary/segment.hpp	/^         void end(iterator const &v)$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(iterator const &v)
end	/usr/include/boost/locale/boundary/segment.hpp	/^        IteratorType end() const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
end	/usr/include/boost/locale/date_time.hpp	/^            date_time const &end() const { return e_; }$/;"	f	class:boost::locale::date_time_duration	access:public	signature:() const
end_	/usr/include/boost/locale/boundary/index.hpp	/^                    base_iterator begin_,end_;$/;"	m	class:boost::locale::boundary::details::mapping	access:private
equal	/usr/include/boost/locale/boundary/index.hpp	/^                    bool equal(boundary_point_index_iterator const &other) const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:(boundary_point_index_iterator const &other) const
equal	/usr/include/boost/locale/boundary/index.hpp	/^                    bool equal(segment_index_iterator const &other) const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:(segment_index_iterator const &other) const
era	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period era(int v) { return date_time_period(era(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
era	/usr/include/boost/locale/date_time.hpp	/^            inline int era(date_time const &dt) { return dt.get(era()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
era	/usr/include/boost/locale/date_time.hpp	/^            inline int era(date_time_duration const &dt) { return dt.get(era()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
era	/usr/include/boost/locale/date_time.hpp	/^            inline period_type era(){ return period_type(marks::era); }$/;"	f	namespace:boost::locale::period	signature:()
era	/usr/include/boost/locale/date_time_facet.hpp	/^                    era,                        \/\/\/< Era i.e. AC, BC in Gregorian and Julian calendar, range [0,1]$/;"	e	enum:boost::locale::period::marks::period_mark
ext_params_	/usr/include/boost/locale/format.hpp	/^            std::vector<formattible_type> ext_params_;$/;"	m	class:boost::locale::basic_format	access:private
extended_year	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period extended_year(int v) { return date_time_period(extended_year(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
extended_year	/usr/include/boost/locale/date_time.hpp	/^            inline int extended_year(date_time const &dt) { return dt.get(extended_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
extended_year	/usr/include/boost/locale/date_time.hpp	/^            inline int extended_year(date_time_duration const &dt) { return dt.get(extended_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
extended_year	/usr/include/boost/locale/date_time.hpp	/^            inline period_type extended_year(){ return period_type(marks::extended_year); }$/;"	f	namespace:boost::locale::period	signature:()
extended_year	/usr/include/boost/locale/date_time_facet.hpp	/^                    extended_year,              \/\/\/< Extended year for Gregorian\/Julian calendars, where 1 BC == 0, 2 BC == -1.$/;"	e	enum:boost::locale::period::marks::period_mark
facet_type	/usr/include/boost/locale/message.hpp	/^            typedef message_format<char_type> facet_type;   \/\/\/< The type of the facet the messages are fetched with$/;"	t	class:boost::locale::basic_message	access:public
february	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period february() { return date_time_period(month(),1); }$/;"	f	namespace:boost::locale::period	signature:()
find	/usr/include/boost/locale/boundary/index.hpp	/^                iterator find(base_iterator p) const$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:(base_iterator p) const
find	/usr/include/boost/locale/boundary/index.hpp	/^                iterator find(base_iterator p) const$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(base_iterator p) const
first_day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period first_day_of_week(int v) { return date_time_period(first_day_of_week(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
first_day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline int first_day_of_week(date_time const &dt) { return dt.get(first_day_of_week()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
first_day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline int first_day_of_week(date_time_duration const &dt) { return dt.get(first_day_of_week()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
first_day_of_week	/usr/include/boost/locale/date_time.hpp	/^            inline period_type first_day_of_week(){ return period_type(marks::first_day_of_week); }$/;"	f	namespace:boost::locale::period	signature:()
first_day_of_week	/usr/include/boost/locale/date_time.hpp	/^            int first_day_of_week() const;$/;"	p	class:boost::locale::calendar	access:public	signature:() const
first_day_of_week	/usr/include/boost/locale/date_time_facet.hpp	/^                    first_day_of_week,          \/\/\/< First day of week, constant, for example Sunday in US = 1, Monday in France = 2$/;"	e	enum:boost::locale::period::marks::period_mark
flags	/usr/include/boost/locale/formatting.hpp	/^        namespace flags {$/;"	n	namespace:boost::locale
flags_	/usr/include/boost/locale/formatting.hpp	/^            uint64_t flags_;$/;"	m	class:boost::locale::ios_info	access:private
fmt_	/usr/include/boost/locale/format.hpp	/^                details::format_parser *fmt_;$/;"	m	class:boost::locale::basic_format::format_guard	access:private
fold_case	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> fold_case(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())
fold_case	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> fold_case(CharType const *str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *str,std::locale const &loc=std::locale())
fold_case	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> fold_case(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())
format	/usr/include/boost/locale/format.hpp	/^        typedef basic_format<char> format;$/;"	t	namespace:boost::locale
format_	/usr/include/boost/locale/format.hpp	/^            string_type format_;$/;"	m	class:boost::locale::basic_format	access:private
format_guard	/usr/include/boost/locale/format.hpp	/^                format_guard(details::format_parser &fmt) : $/;"	f	class:boost::locale::basic_format::format_guard	access:public	signature:(details::format_parser &fmt)
format_guard	/usr/include/boost/locale/format.hpp	/^            class format_guard {$/;"	c	class:boost::locale::basic_format	access:private
format_output	/usr/include/boost/locale/format.hpp	/^            void format_output(stream_type &out,string_type const &sformat) const$/;"	f	class:boost::locale::basic_format	access:private	signature:(stream_type &out,string_type const &sformat) const
format_parser	/usr/include/boost/locale/format.hpp	/^                format_parser(format_parser const &);$/;"	p	class:boost::locale::details::format_parser	access:private	signature:(format_parser const &)
format_parser	/usr/include/boost/locale/format.hpp	/^                format_parser(std::ios_base &ios,void *,void (*imbuer)(void *,std::locale const &));$/;"	p	class:boost::locale::details::format_parser	access:public	signature:(std::ios_base &ios,void *,void (*imbuer)(void *,std::locale const &))
format_parser	/usr/include/boost/locale/format.hpp	/^            class BOOST_LOCALE_DECL format_parser  {$/;"	c	namespace:boost::locale::details
formattible	/usr/include/boost/locale/format.hpp	/^                formattible() :$/;"	f	struct:boost::locale::details::formattible	access:public	signature:()
formattible	/usr/include/boost/locale/format.hpp	/^                formattible(Type const &value)$/;"	f	struct:boost::locale::details::formattible	access:public	signature:(Type const &value)
formattible	/usr/include/boost/locale/format.hpp	/^                formattible(formattible const &other) :$/;"	f	struct:boost::locale::details::formattible	access:public	signature:(formattible const &other)
formattible	/usr/include/boost/locale/format.hpp	/^            struct formattible {$/;"	s	namespace:boost::locale::details
formattible_type	/usr/include/boost/locale/format.hpp	/^            typedef details::formattible<CharType> formattible_type; $/;"	t	class:boost::locale::basic_format	access:public
formatting_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     formatting_facet= 1 << 2;   \/\/\/< Generate numbers, currency, date-time formatting facets$/;"	m	namespace:boost::locale
friday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period friday() { return date_time_period(day_of_week(),6); }$/;"	f	namespace:boost::locale::period	signature:()
from_unicode	/usr/include/boost/locale/util.hpp	/^        virtual uint32_t from_unicode(uint32_t u,char *begin,char const *end) $/;"	f	class:boost::locale::util::base_converter	access:public	signature:(uint32_t u,char *begin,char const *end)
from_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::string from_utf(char const *begin,char const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how)
from_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::string from_utf(char16_t const *begin,char16_t const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char16_t const *begin,char16_t const *end,std::string const &charset,method_type how)
from_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::string from_utf(char32_t const *begin,char32_t const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char32_t const *begin,char32_t const *end,std::string const &charset,method_type how)
from_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::string from_utf(wchar_t const *begin,wchar_t const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(wchar_t const *begin,wchar_t const *end,std::string const &charset,method_type how)
from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(CharType const *begin,CharType const *end,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(CharType const *begin,CharType const *end,std::locale const &loc,method_type how=default_method)
from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(CharType const *begin,CharType const *end,std::string const &charset,method_type how=default_method);$/;"	p	namespace:boost::locale::conv	signature:(CharType const *begin,CharType const *end,std::string const &charset,method_type how=default_method)
from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(CharType const *text,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(CharType const *text,std::locale const &loc,method_type how=default_method)
from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(CharType const *text,std::string const &charset,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(CharType const *text,std::string const &charset,method_type how=default_method)
from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(std::basic_string<CharType> const &text,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(std::basic_string<CharType> const &text,std::locale const &loc,method_type how=default_method)
from_utf	/usr/include/boost/locale/encoding.hpp	/^            std::string from_utf(std::basic_string<CharType> const &text,std::string const &charset,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(std::basic_string<CharType> const &text,std::string const &charset,method_type how=default_method)
ftime	/usr/include/boost/locale/formatting.hpp	/^                    std::basic_string<CharType> ftime;$/;"	m	struct:boost::locale::as::details::add_ftime	access:public
ftime	/usr/include/boost/locale/formatting.hpp	/^            ftime(CharType const *format)$/;"	f	namespace:boost::locale::as	signature:(CharType const *format)
ftime	/usr/include/boost/locale/formatting.hpp	/^            ftime(std::basic_string<CharType> const &format)$/;"	f	namespace:boost::locale::as	signature:(std::basic_string<CharType> const &format)
full_select	/usr/include/boost/locale/boundary/index.hpp	/^                bool full_select()  const $/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:() const
full_select	/usr/include/boost/locale/boundary/index.hpp	/^                void full_select(bool v) $/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(bool v)
full_select_	/usr/include/boost/locale/boundary/index.hpp	/^                    bool full_select_;$/;"	m	class:boost::locale::boundary::details::segment_index_iterator	access:private
full_select_	/usr/include/boost/locale/boundary/index.hpp	/^                bool full_select_;$/;"	m	class:boost::locale::boundary::segment_index	access:private
generate	/usr/include/boost/locale/generator.hpp	/^            std::locale generate(std::locale const &base,std::string const &id) const;$/;"	p	class:boost::locale::generator	access:public	signature:(std::locale const &base,std::string const &id) const
generate	/usr/include/boost/locale/generator.hpp	/^            std::locale generate(std::string const &id) const;$/;"	p	class:boost::locale::generator	access:public	signature:(std::string const &id) const
generator	/usr/include/boost/locale/generator.hpp	/^            generator();$/;"	p	class:boost::locale::generator	access:public	signature:()
generator	/usr/include/boost/locale/generator.hpp	/^            generator(generator const &);$/;"	p	class:boost::locale::generator	access:private	signature:(generator const &)
generator	/usr/include/boost/locale/generator.hpp	/^            generator(localization_backend_manager const &);$/;"	p	class:boost::locale::generator	access:public	signature:(localization_backend_manager const &)
generator	/usr/include/boost/locale/generator.hpp	/^        class BOOST_LOCALE_DECL generator {$/;"	c	namespace:boost::locale
get	/usr/include/boost/locale/date_time.hpp	/^            int get(period::period_type f) const$/;"	f	class:boost::locale::date_time_duration	access:public	signature:(period::period_type f) const
get	/usr/include/boost/locale/date_time.hpp	/^            int get(period::period_type f) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
get	/usr/include/boost/locale/format.hpp	/^            formattible_type get(unsigned id) const$/;"	f	class:boost::locale::basic_format	access:private	signature:(unsigned id) const
get	/usr/include/boost/locale/formatting.hpp	/^                std::basic_string<Char> get() const$/;"	f	class:boost::locale::ios_info::string_set	access:public	signature:() const
get	/usr/include/boost/locale/formatting.hpp	/^            static ios_info &get(std::ios_base &ios);$/;"	p	class:boost::locale::ios_info	access:public	signature:(std::ios_base &ios)
get	/usr/include/boost/locale/hold_ptr.hpp	/^        T *get() { return ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
get	/usr/include/boost/locale/hold_ptr.hpp	/^        T const *get() const { return ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:() const
get	/usr/include/boost/locale/localization_backend.hpp	/^            std::auto_ptr<localization_backend> get() const;$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:() const
get	/usr/include/boost/locale/message.hpp	/^            virtual char_type const *get(int domain_id,char_type const *context,char_type const *id) const = 0;$/;"	p	class:boost::locale::message_format	access:public	signature:(int domain_id,char_type const *context,char_type const *id) const
get	/usr/include/boost/locale/message.hpp	/^            virtual char_type const *get(int domain_id,char_type const *context,char_type const *single_id,int n) const = 0;$/;"	p	class:boost::locale::message_format	access:public	signature:(int domain_id,char_type const *context,char_type const *single_id,int n) const
get_all_backends	/usr/include/boost/locale/localization_backend.hpp	/^            std::vector<std::string> get_all_backends() const;$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:() const
get_integer_property	/usr/include/boost/locale/info.hpp	/^            virtual int get_integer_property(integer_property v) const = 0;$/;"	p	class:boost::locale::info	access:protected	signature:(integer_property v) const
get_locale	/usr/include/boost/locale/date_time.hpp	/^            std::locale get_locale() const;$/;"	p	class:boost::locale::calendar	access:public	signature:() const
get_offset	/usr/include/boost/locale/boundary/index.hpp	/^                    size_t get_offset(size_t ind) const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:(size_t ind) const
get_offset	/usr/include/boost/locale/boundary/index.hpp	/^                    size_t get_offset(size_t ind) const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:(size_t ind) const
get_option	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual int get_option(calendar_option_type opt) const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(calendar_option_type opt) const
get_position	/usr/include/boost/locale/format.hpp	/^                unsigned get_position();$/;"	p	class:boost::locale::details::format_parser	access:public	signature:()
get_string_property	/usr/include/boost/locale/info.hpp	/^            virtual std::string get_string_property(string_propery v) const = 0;$/;"	p	class:boost::locale::info	access:protected	signature:(string_propery v) const
get_system_locale	/usr/include/boost/locale/util.hpp	/^    std::string get_system_locale(bool use_utf8_on_windows = false);$/;"	p	namespace:boost::locale::util	signature:(bool use_utf8_on_windows = false)
get_time	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual posix_time get_time() const  = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:() const
get_time_zone	/usr/include/boost/locale/date_time.hpp	/^            std::string get_time_zone() const;$/;"	p	class:boost::locale::calendar	access:public	signature:() const
get_timezone	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual std::string get_timezone() const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:() const
get_value	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual int get_value(period::marks::period_mark p,value_type v) const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(period::marks::period_mark p,value_type v) const
gettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType> gettext(CharType const *id,$/;"	f	namespace:boost::locale	signature:(CharType const *id, std::locale const &loc=std::locale())
global	/usr/include/boost/locale/localization_backend.hpp	/^            static localization_backend_manager global();$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:()
global	/usr/include/boost/locale/localization_backend.hpp	/^            static localization_backend_manager global(localization_backend_manager const &);$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:(localization_backend_manager const &)
global	/usr/include/boost/locale/time_zone.hpp	/^            BOOST_LOCALE_DECL std::string global();$/;"	p	namespace:boost::locale::time_zone	signature:()
global	/usr/include/boost/locale/time_zone.hpp	/^            BOOST_LOCALE_DECL std::string global(std::string const &new_tz);$/;"	p	namespace:boost::locale::time_zone	signature:(std::string const &new_tz)
gmt	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base &gmt(std::ios_base &ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base &ios)
gnu_gettext	/usr/include/boost/locale/gnu_gettext.hpp	/^namespace gnu_gettext {$/;"	n	namespace:boost::locale
greatest_minimum	/usr/include/boost/locale/date_time.hpp	/^            int greatest_minimum(period::period_type f) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(period::period_type f) const
greatest_minimum	/usr/include/boost/locale/date_time_facet.hpp	/^                greatest_minimum,   \/\/\/< Maximal minimum value that can be for this period$/;"	e	enum:boost::locale::abstract_calendar::__anon4
hash	/usr/include/boost/locale/collator.hpp	/^        long hash(level_type level,char_type const *b,char_type const *e) const$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level,char_type const *b,char_type const *e) const
hash	/usr/include/boost/locale/collator.hpp	/^        long hash(level_type level,string_type const &s) const$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level,string_type const &s) const
hold_ptr	/usr/include/boost/locale/hold_ptr.hpp	/^        explicit hold_ptr(T *v) : ptr_(v) {}$/;"	f	class:boost::locale::hold_ptr	access:public	signature:(T *v)
hold_ptr	/usr/include/boost/locale/hold_ptr.hpp	/^        hold_ptr() : ptr_(0) {}$/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
hold_ptr	/usr/include/boost/locale/hold_ptr.hpp	/^        hold_ptr(hold_ptr const &other); \/\/ non copyable $/;"	p	class:boost::locale::hold_ptr	access:private	signature:(hold_ptr const &other)
hold_ptr	/usr/include/boost/locale/hold_ptr.hpp	/^    class hold_ptr {$/;"	c	namespace:boost::locale
hour	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period hour(int v) { return date_time_period(hour(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
hour	/usr/include/boost/locale/date_time.hpp	/^            inline int hour(date_time const &dt) { return dt.get(hour()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
hour	/usr/include/boost/locale/date_time.hpp	/^            inline int hour(date_time_duration const &dt) { return dt.get(hour()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
hour	/usr/include/boost/locale/date_time.hpp	/^            inline period_type hour(){ return period_type(marks::hour); }$/;"	f	namespace:boost::locale::period	signature:()
hour	/usr/include/boost/locale/date_time_facet.hpp	/^                    hour,                       \/\/\/< 24 clock hour [0..23]$/;"	e	enum:boost::locale::period::marks::period_mark
hour_12	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period hour_12(int v) { return date_time_period(hour_12(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
hour_12	/usr/include/boost/locale/date_time.hpp	/^            inline int hour_12(date_time const &dt) { return dt.get(hour_12()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
hour_12	/usr/include/boost/locale/date_time.hpp	/^            inline int hour_12(date_time_duration const &dt) { return dt.get(hour_12()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
hour_12	/usr/include/boost/locale/date_time.hpp	/^            inline period_type hour_12(){ return period_type(marks::hour_12); }$/;"	f	namespace:boost::locale::period	signature:()
hour_12	/usr/include/boost/locale/date_time_facet.hpp	/^                    hour_12,                    \/\/\/< 12 clock hour [0..11]$/;"	e	enum:boost::locale::period::marks::period_mark
id	/usr/include/boost/locale/boundary/facets.hpp	/^                static std::locale::id id;$/;"	m	class:boost::locale::boundary::boundary_indexing	access:public
id	/usr/include/boost/locale/conversion.hpp	/^            static std::locale::id id;$/;"	m	class:boost::locale::converter	access:public
id	/usr/include/boost/locale/date_time_facet.hpp	/^            static std::locale::id id;$/;"	m	class:boost::locale::calendar_facet	access:public
id	/usr/include/boost/locale/formatting.hpp	/^                    std::string id;$/;"	m	struct:boost::locale::as::details::set_timezone	access:public
id	/usr/include/boost/locale/info.hpp	/^            static std::locale::id id; \/\/\/< This member uniquely defines this facet, required by STL $/;"	m	class:boost::locale::info	access:public
id	/usr/include/boost/locale/message.hpp	/^            char_type const *id() const$/;"	f	class:boost::locale::basic_message	access:private	signature:() const
id	/usr/include/boost/locale/message.hpp	/^            static std::locale::id id;$/;"	m	struct:boost::locale::base_message_format	access:public
id_	/usr/include/boost/locale/message.hpp	/^            string_type id_;$/;"	m	class:boost::locale::basic_message	access:private
identical	/usr/include/boost/locale/collator.hpp	/^            identical   = 4  \/\/\/< identical collation level: include code-point comparison$/;"	e	enum:boost::locale::collator_base::__anon1
illegal	/usr/include/boost/locale/utf.hpp	/^    static const code_point illegal = 0xFFFFFFFFu;$/;"	m	namespace:boost::locale::utf
illegal	/usr/include/boost/locale/util.hpp	/^        static const uint32_t illegal=utf::illegal;$/;"	m	class:boost::locale::util::base_converter	access:public
imbue	/usr/include/boost/locale/format.hpp	/^                void imbue(std::locale const &);$/;"	p	class:boost::locale::details::format_parser	access:private	signature:(std::locale const &)
imbue_locale	/usr/include/boost/locale/format.hpp	/^            static void imbue_locale(void *ptr,std::locale const &l)$/;"	f	class:boost::locale::basic_format	access:private	signature:(void *ptr,std::locale const &l)
impl_	/usr/include/boost/locale/date_time.hpp	/^            hold_ptr<abstract_calendar> impl_;$/;"	m	class:boost::locale::calendar	access:private
impl_	/usr/include/boost/locale/date_time.hpp	/^            hold_ptr<abstract_calendar> impl_;$/;"	m	class:boost::locale::date_time	access:private
incomplete	/usr/include/boost/locale/utf.hpp	/^    static const code_point incomplete = 0xFFFFFFFEu;$/;"	m	namespace:boost::locale::utf
incomplete	/usr/include/boost/locale/util.hpp	/^        static const uint32_t incomplete=utf::incomplete;$/;"	m	class:boost::locale::util::base_converter	access:public
increment	/usr/include/boost/locale/boundary/index.hpp	/^                    void increment()$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public	signature:()
increment	/usr/include/boost/locale/boundary/index.hpp	/^                    void increment()$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:()
index	/usr/include/boost/locale/boundary/index.hpp	/^                    index_type const &index() const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:() const
index	/usr/include/boost/locale/boundary/index.hpp	/^                    index_type const &index() const$/;"	f	class:boost::locale::boundary::details::mapping	access:public	signature:() const
index	/usr/include/boost/locale/boundary/index.hpp	/^                    index_type const &index() const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:() const
index_	/usr/include/boost/locale/boundary/index.hpp	/^                    boost::shared_ptr<index_type> index_;$/;"	m	class:boost::locale::boundary::details::mapping	access:private
index_type	/usr/include/boost/locale/boundary/facets.hpp	/^            typedef std::vector<break_info> index_type;$/;"	t	namespace:boost::locale::boundary
info	/usr/include/boost/locale/info.hpp	/^            info(size_t refs = 0) : std::locale::facet(refs)$/;"	f	class:boost::locale::info	access:public	signature:(size_t refs = 0)
info	/usr/include/boost/locale/info.hpp	/^        class BOOST_LOCALE_DECL info : public std::locale::facet$/;"	c	namespace:boost::locale	inherits:std::locale::facet
information_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     information_facet = 1 << 17;   \/\/\/< Generate general locale information facet$/;"	m	namespace:boost::locale
install	/usr/include/boost/locale/localization_backend.hpp	/^            virtual std::locale install(std::locale const &base,locale_category_type category,character_facet_type type = nochar_facet) = 0;$/;"	p	class:boost::locale::localization_backend	access:public	signature:(std::locale const &base,locale_category_type category,character_facet_type type = nochar_facet)
integer_property	/usr/include/boost/locale/info.hpp	/^            enum integer_property {$/;"	g	class:boost::locale::info	access:public
invalid	/usr/include/boost/locale/date_time.hpp	/^            inline period_type invalid(){ return period_type(marks::invalid); }$/;"	f	namespace:boost::locale::period	signature:()
invalid	/usr/include/boost/locale/date_time_facet.hpp	/^                    invalid,                    \/\/\/< Special invalid value, should not be used directly$/;"	e	enum:boost::locale::period::marks::period_mark
invalid_charset_error	/usr/include/boost/locale/encoding_errors.hpp	/^                invalid_charset_error(std::string charset) : $/;"	f	class:boost::locale::conv::invalid_charset_error	access:public	signature:(std::string charset)
invalid_charset_error	/usr/include/boost/locale/encoding_errors.hpp	/^            class BOOST_SYMBOL_VISIBLE invalid_charset_error : public std::runtime_error {$/;"	c	namespace:boost::locale::conv	inherits:std::runtime_error
ios_	/usr/include/boost/locale/format.hpp	/^                std::ios_base &ios_;$/;"	m	class:boost::locale::details::format_parser	access:private
ios_info	/usr/include/boost/locale/formatting.hpp	/^            ios_info();$/;"	p	class:boost::locale::ios_info	access:public	signature:()
ios_info	/usr/include/boost/locale/formatting.hpp	/^            ios_info(ios_info const &);$/;"	p	class:boost::locale::ios_info	access:public	signature:(ios_info const &)
ios_info	/usr/include/boost/locale/formatting.hpp	/^        class BOOST_LOCALE_DECL ios_info {$/;"	c	namespace:boost::locale
is_dst	/usr/include/boost/locale/date_time_facet.hpp	/^                is_dst          \/\/\/< Check if the current time is in daylight time savings$/;"	e	enum:boost::locale::abstract_calendar::__anon6
is_first_surrogate	/usr/include/boost/locale/utf.hpp	/^        static bool is_first_surrogate(uint16_t x)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(uint16_t x)
is_gregorian	/usr/include/boost/locale/date_time.hpp	/^            bool is_gregorian() const;$/;"	p	class:boost::locale::calendar	access:public	signature:() const
is_gregorian	/usr/include/boost/locale/date_time_facet.hpp	/^                is_gregorian,   \/\/\/< Check if the calendar is Gregorian$/;"	e	enum:boost::locale::abstract_calendar::__anon6
is_in_daylight_saving_time	/usr/include/boost/locale/date_time.hpp	/^            bool is_in_daylight_saving_time() const;$/;"	p	class:boost::locale::date_time	access:public	signature:() const
is_lead	/usr/include/boost/locale/utf.hpp	/^        static bool is_lead(char_type \/*c*\/)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type )
is_lead	/usr/include/boost/locale/utf.hpp	/^        static bool is_lead(char_type c)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
is_lead	/usr/include/boost/locale/utf.hpp	/^        static bool is_lead(char_type c);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
is_lead	/usr/include/boost/locale/utf.hpp	/^        static bool is_lead(char_type ci)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type ci)
is_linear	/usr/include/boost/locale/boundary/index.hpp	/^                    static const bool is_linear =$/;"	m	struct:boost::locale::boundary::details::linear_iterator_traits	access:public
is_second_surrogate	/usr/include/boost/locale/utf.hpp	/^        static bool is_second_surrogate(uint16_t x)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(uint16_t x)
is_thread_safe	/usr/include/boost/locale/util.hpp	/^        virtual bool is_thread_safe() const $/;"	f	class:boost::locale::util::base_converter	access:public	signature:() const
is_trail	/usr/include/boost/locale/utf.hpp	/^        static bool is_trail(char_type \/*c*\/)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type )
is_trail	/usr/include/boost/locale/utf.hpp	/^        static bool is_trail(char_type c)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
is_trail	/usr/include/boost/locale/utf.hpp	/^        static bool is_trail(char_type c);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
is_trail	/usr/include/boost/locale/utf.hpp	/^        static bool is_trail(char_type ci)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type ci)
is_us_ascii_char	/usr/include/boost/locale/message.hpp	/^            inline bool is_us_ascii_char(char c)$/;"	f	namespace:boost::locale::details	signature:(char c)
is_us_ascii_string	/usr/include/boost/locale/message.hpp	/^            inline bool is_us_ascii_string(char const *msg)$/;"	f	namespace:boost::locale::details	signature:(char const *msg)
is_valid_codepoint	/usr/include/boost/locale/utf.hpp	/^    inline bool is_valid_codepoint(code_point v)$/;"	f	namespace:boost::locale::utf	signature:(code_point v)
iterator	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        iterator_type iterator() const $/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:() const
iterator	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        void iterator(iterator_type i)$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(iterator_type i)
iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::boundary_point_index_iterator<base_iterator> iterator;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::segment_index_iterator<base_iterator> iterator;$/;"	t	class:boost::locale::boundary::segment_index	access:public
iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef unspecified_iterator_type iterator;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
iterator	/usr/include/boost/locale/boundary/index.hpp	/^                typedef unspecified_iterator_type iterator;$/;"	t	class:boost::locale::boundary::segment_index	access:public
iterator	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef IteratorType iterator;$/;"	t	class:boost::locale::boundary::segment	access:public
iterator_	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        iterator_type iterator_;$/;"	m	class:boost::locale::boundary::boundary_point	access:private
iterator_type	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        typedef IteratorType iterator_type;$/;"	t	class:boost::locale::boundary::boundary_point	access:public
january	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period january() { return date_time_period(month(),0); }$/;"	f	namespace:boost::locale::period	signature:()
july	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period july() { return date_time_period(month(),6); }$/;"	f	namespace:boost::locale::period	signature:()
june	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period june() { return date_time_period(month(),5); }$/;"	f	namespace:boost::locale::period	signature:()
language	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::string language;   \/\/\/< The language we load the catalog for, like "ru", "en", "de" $/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
language	/usr/include/boost/locale/info.hpp	/^            std::string language() const $/;"	f	class:boost::locale::info	access:public	signature:() const
language_property	/usr/include/boost/locale/info.hpp	/^                language_property,  \/\/\/< ISO 639 language id$/;"	e	enum:boost::locale::info::string_propery
least_maximum	/usr/include/boost/locale/date_time.hpp	/^            int least_maximum(period::period_type f) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(period::period_type f) const
least_maximum	/usr/include/boost/locale/date_time_facet.hpp	/^                least_maximum,      \/\/\/< The last maximal value for this period, For example for Gregorian calendar$/;"	e	enum:boost::locale::abstract_calendar::__anon4
length	/usr/include/boost/locale/boundary/segment.hpp	/^        size_t length() const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
level_	/usr/include/boost/locale/collator.hpp	/^        collator_base::level_type level_;$/;"	m	struct:boost::locale::comparator	access:private
level_type	/usr/include/boost/locale/collator.hpp	/^        } level_type;$/;"	t	class:boost::locale::collator_base	typeref:enum:boost::locale::collator_base::__anon1	access:public
line	/usr/include/boost/locale/boundary/types.hpp	/^                line        \/\/\/< Analyse the text for positions suitable for line breaks$/;"	e	enum:boost::locale::boundary::boundary_type
line_any	/usr/include/boost/locale/boundary/types.hpp	/^                line_any        =  0xFF,   \/\/\/< Soft or Hard line break$/;"	m	namespace:boost::locale::boundary
line_hard	/usr/include/boost/locale/boundary/types.hpp	/^                line_hard       =  0xF0,   \/\/\/< Hard line break: like break is required (as per CR\/LF)$/;"	m	namespace:boost::locale::boundary
line_mask	/usr/include/boost/locale/boundary/types.hpp	/^                line_mask       =  0xFF;   \/\/\/< Select all types of line breaks$/;"	m	namespace:boost::locale::boundary
line_soft	/usr/include/boost/locale/boundary/types.hpp	/^                line_soft       =  0x0F,   \/\/\/< Soft line break: optional but not required$/;"	m	namespace:boost::locale::boundary
linear_iterator_traits	/usr/include/boost/locale/boundary/index.hpp	/^                struct linear_iterator_traits {$/;"	s	namespace:boost::locale::boundary::details
local_time	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base &local_time(std::ios_base &ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base &ios)
locale	/usr/include/boost/locale/boundary/boundary_point.hpp	/^namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/boundary/facets.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/boundary/index.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/boundary/segment.hpp	/^namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/boundary/types.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/collator.hpp	/^namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/conversion.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/date_time.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/date_time_facet.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/encoding.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/encoding_errors.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/encoding_utf.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/format.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/formatting.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/generator.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/gnu_gettext.hpp	/^namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/hold_ptr.hpp	/^namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/info.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/localization_backend.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/message.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/time_zone.hpp	/^    namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/utf.hpp	/^namespace locale {$/;"	n	namespace:boost
locale	/usr/include/boost/locale/util.hpp	/^namespace locale {$/;"	n	namespace:boost
locale_	/usr/include/boost/locale/collator.hpp	/^        std::locale locale_;$/;"	m	struct:boost::locale::comparator	access:private
locale_	/usr/include/boost/locale/date_time.hpp	/^            std::locale locale_;$/;"	m	class:boost::locale::calendar	access:private
locale_cache_enabled	/usr/include/boost/locale/generator.hpp	/^            bool locale_cache_enabled() const;$/;"	p	class:boost::locale::generator	access:public	signature:() const
locale_cache_enabled	/usr/include/boost/locale/generator.hpp	/^            void locale_cache_enabled(bool on);$/;"	p	class:boost::locale::generator	access:public	signature:(bool on)
locale_category	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::string locale_category; \/\/\/< Locale category, is set by default to LC_MESSAGES, but may be changed$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
locale_category_type	/usr/include/boost/locale/generator.hpp	/^        typedef uint32_t locale_category_type; \/\/\/< a type used for more fine grained generation of facets$/;"	t	namespace:boost::locale
localization_backend	/usr/include/boost/locale/localization_backend.hpp	/^            localization_backend()$/;"	f	class:boost::locale::localization_backend	access:public	signature:()
localization_backend	/usr/include/boost/locale/localization_backend.hpp	/^            localization_backend(localization_backend const &);$/;"	p	class:boost::locale::localization_backend	access:private	signature:(localization_backend const &)
localization_backend	/usr/include/boost/locale/localization_backend.hpp	/^        class localization_backend {$/;"	c	namespace:boost::locale
localization_backend_manager	/usr/include/boost/locale/localization_backend.hpp	/^            localization_backend_manager();$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:()
localization_backend_manager	/usr/include/boost/locale/localization_backend.hpp	/^            localization_backend_manager(localization_backend_manager const &);$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:(localization_backend_manager const &)
localization_backend_manager	/usr/include/boost/locale/localization_backend.hpp	/^        class BOOST_LOCALE_DECL localization_backend_manager {$/;"	c	namespace:boost::locale
lower_case	/usr/include/boost/locale/conversion.hpp	/^                lower_case,     \/\/\/< Convert text to lower case$/;"	e	enum:boost::locale::converter_base::__anon2
map	/usr/include/boost/locale/boundary/facets.hpp	/^                virtual index_type map(boundary_type t,Char const *begin,Char const *end) const = 0;$/;"	p	class:boost::locale::boundary::boundary_indexing	access:public	signature:(boundary_type t,Char const *begin,Char const *end) const
map	/usr/include/boost/locale/boundary/facets.hpp	/^                virtual index_type map(boundary_type t,char const *begin,char const *end) const = 0;$/;"	p	class:boost::locale::boundary::boundary_indexing	access:public	signature:(boundary_type t,char const *begin,char const *end) const
map	/usr/include/boost/locale/boundary/facets.hpp	/^                virtual index_type map(boundary_type t,char16_t const *begin,char16_t const *end) const = 0;$/;"	p	class:boost::locale::boundary::boundary_indexing	access:public	signature:(boundary_type t,char16_t const *begin,char16_t const *end) const
map	/usr/include/boost/locale/boundary/facets.hpp	/^                virtual index_type map(boundary_type t,char32_t const *begin,char32_t const *end) const = 0;$/;"	p	class:boost::locale::boundary::boundary_indexing	access:public	signature:(boundary_type t,char32_t const *begin,char32_t const *end) const
map	/usr/include/boost/locale/boundary/facets.hpp	/^                virtual index_type map(boundary_type t,wchar_t const *begin,wchar_t const *end) const = 0;$/;"	p	class:boost::locale::boundary::boundary_indexing	access:public	signature:(boundary_type t,wchar_t const *begin,wchar_t const *end) const
map	/usr/include/boost/locale/boundary/index.hpp	/^                    static index_type map(boundary_type t,IteratorType b,IteratorType e,std::locale const &l)$/;"	f	struct:boost::locale::boundary::details::mapping_traits	access:public	signature:(boundary_type t,IteratorType b,IteratorType e,std::locale const &l)
map	/usr/include/boost/locale/boundary/index.hpp	/^                void map(boundary_type type,base_iterator begin,base_iterator end,std::locale const &loc=std::locale())$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:(boundary_type type,base_iterator begin,base_iterator end,std::locale const &loc=std::locale())
map	/usr/include/boost/locale/boundary/index.hpp	/^                void map(boundary_type type,base_iterator begin,base_iterator end,std::locale const &loc=std::locale())$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(boundary_type type,base_iterator begin,base_iterator end,std::locale const &loc=std::locale())
map_	/usr/include/boost/locale/boundary/index.hpp	/^                    mapping_type const *map_;$/;"	m	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private
map_	/usr/include/boost/locale/boundary/index.hpp	/^                    mapping_type const *map_;$/;"	m	class:boost::locale::boundary::details::segment_index_iterator	access:private
map_	/usr/include/boost/locale/boundary/index.hpp	/^                mapping_type  map_;$/;"	m	class:boost::locale::boundary::boundary_point_index	access:private
map_	/usr/include/boost/locale/boundary/index.hpp	/^                mapping_type  map_;$/;"	m	class:boost::locale::boundary::segment_index	access:private
mapping	/usr/include/boost/locale/boundary/index.hpp	/^                    mapping()$/;"	f	class:boost::locale::boundary::details::mapping	access:public	signature:()
mapping	/usr/include/boost/locale/boundary/index.hpp	/^                    mapping(boundary_type type,$/;"	f	class:boost::locale::boundary::details::mapping	access:public	signature:(boundary_type type, base_iterator begin, base_iterator end, std::locale const &loc)
mapping	/usr/include/boost/locale/boundary/index.hpp	/^                class mapping {$/;"	c	namespace:boost::locale::boundary::details
mapping_traits	/usr/include/boost/locale/boundary/index.hpp	/^                struct mapping_traits {$/;"	s	namespace:boost::locale::boundary::details
mapping_traits	/usr/include/boost/locale/boundary/index.hpp	/^                struct mapping_traits<IteratorType,std::random_access_iterator_tag> {$/;"	s	namespace:boost::locale::boundary::details
mapping_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef mapping<base_iterator> mapping_type;$/;"	t	class:boost::locale::boundary::details::boundary_point_index_iterator	access:public
mapping_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef mapping<base_iterator> mapping_type;$/;"	t	class:boost::locale::boundary::details::segment_index_iterator	access:public
mapping_type	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::mapping<base_iterator> mapping_type;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:private
mapping_type	/usr/include/boost/locale/boundary/index.hpp	/^                typedef details::mapping<base_iterator> mapping_type;$/;"	t	class:boost::locale::boundary::segment_index	access:private
march	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period march() { return date_time_period(month(),2); }$/;"	f	namespace:boost::locale::period	signature:()
mark	/usr/include/boost/locale/date_time_facet.hpp	/^                marks::period_mark mark() const$/;"	f	class:boost::locale::period::period_type	access:public	signature:() const
mark_	/usr/include/boost/locale/date_time_facet.hpp	/^                marks::period_mark mark_;$/;"	m	class:boost::locale::period::period_type	access:private
marks	/usr/include/boost/locale/date_time_facet.hpp	/^            namespace marks {$/;"	n	namespace:boost::locale::period
mask_	/usr/include/boost/locale/boundary/index.hpp	/^                    rule_type mask_;$/;"	m	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private
mask_	/usr/include/boost/locale/boundary/index.hpp	/^                    rule_type mask_;$/;"	m	class:boost::locale::boundary::details::segment_index_iterator	access:private
mask_	/usr/include/boost/locale/boundary/index.hpp	/^                rule_type mask_;$/;"	m	class:boost::locale::boundary::boundary_point_index	access:private
mask_	/usr/include/boost/locale/boundary/index.hpp	/^                rule_type mask_;$/;"	m	class:boost::locale::boundary::segment_index	access:private
max_len	/usr/include/boost/locale/util.hpp	/^        virtual int max_len() const $/;"	f	class:boost::locale::util::base_converter	access:public	signature:() const
max_width	/usr/include/boost/locale/utf.hpp	/^        static const int max_width = 1;$/;"	m	struct:boost::locale::utf::utf_traits	access:public
max_width	/usr/include/boost/locale/utf.hpp	/^        static const int max_width = 2;$/;"	m	struct:boost::locale::utf::utf_traits	access:public
max_width	/usr/include/boost/locale/utf.hpp	/^        static const int max_width = 4;$/;"	m	struct:boost::locale::utf::utf_traits	access:public
max_width	/usr/include/boost/locale/utf.hpp	/^        static const int max_width;$/;"	m	struct:boost::locale::utf::utf_traits	access:public
maximum	/usr/include/boost/locale/date_time.hpp	/^            int maximum(period::period_type f) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(period::period_type f) const
maximum	/usr/include/boost/locale/date_time.hpp	/^            int maximum(period::period_type f) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
may	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period may() { return date_time_period(month(),4); }$/;"	f	namespace:boost::locale::period	signature:()
message	/usr/include/boost/locale/message.hpp	/^        typedef basic_message<char> message;$/;"	t	namespace:boost::locale
message_	/usr/include/boost/locale/format.hpp	/^            message_type message_;$/;"	m	class:boost::locale::basic_format	access:private
message_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     message_facet   = 1 << 4;   \/\/\/< Generate message facets$/;"	m	namespace:boost::locale
message_format	/usr/include/boost/locale/message.hpp	/^            message_format(size_t refs = 0) : $/;"	f	class:boost::locale::message_format	access:public	signature:(size_t refs = 0)
message_format	/usr/include/boost/locale/message.hpp	/^        class message_format : public base_message_format<CharType>$/;"	c	namespace:boost::locale	inherits:base_message_format
message_type	/usr/include/boost/locale/format.hpp	/^            typedef basic_message<char_type> message_type; \/\/\/< The translation message type$/;"	t	class:boost::locale::basic_format	access:public
messages_info	/usr/include/boost/locale/gnu_gettext.hpp	/^        messages_info() :$/;"	f	struct:boost::locale::gnu_gettext::messages_info	access:public	signature:()
messages_info	/usr/include/boost/locale/gnu_gettext.hpp	/^    struct messages_info {$/;"	s	namespace:boost::locale::gnu_gettext
method_type	/usr/include/boost/locale/encoding_errors.hpp	/^            } method_type;$/;"	t	namespace:boost::locale::conv	typeref:enum:boost::locale::conv::__anon7
minimum	/usr/include/boost/locale/date_time.hpp	/^            int minimum(period::period_type f) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(period::period_type f) const
minimum	/usr/include/boost/locale/date_time.hpp	/^            int minimum(period::period_type f) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
minute	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period minute(int v) { return date_time_period(minute(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
minute	/usr/include/boost/locale/date_time.hpp	/^            inline int minute(date_time const &dt) { return dt.get(minute()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
minute	/usr/include/boost/locale/date_time.hpp	/^            inline int minute(date_time_duration const &dt) { return dt.get(minute()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
minute	/usr/include/boost/locale/date_time.hpp	/^            inline period_type minute(){ return period_type(marks::minute); }$/;"	f	namespace:boost::locale::period	signature:()
minute	/usr/include/boost/locale/date_time_facet.hpp	/^                    minute,                     \/\/\/< minute [0..59]$/;"	e	enum:boost::locale::period::marks::period_mark
monday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period monday() { return date_time_period(day_of_week(),2); }$/;"	f	namespace:boost::locale::period	signature:()
month	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period month(int v) { return date_time_period(month(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
month	/usr/include/boost/locale/date_time.hpp	/^            inline int month(date_time const &dt) { return dt.get(month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
month	/usr/include/boost/locale/date_time.hpp	/^            inline int month(date_time_duration const &dt) { return dt.get(month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
month	/usr/include/boost/locale/date_time.hpp	/^            inline period_type month(){ return period_type(marks::month); }$/;"	f	namespace:boost::locale::period	signature:()
month	/usr/include/boost/locale/date_time_facet.hpp	/^                    month,                      \/\/\/< The month of year, calendar specific, in Gregorian [0..11]$/;"	e	enum:boost::locale::period::marks::period_mark
move	/usr/include/boost/locale/date_time_facet.hpp	/^                move,   \/\/\/< Change the value up or down effecting others for example 1990-12-31 + 1 day = 1991-01-01$/;"	e	enum:boost::locale::abstract_calendar::__anon5
n_	/usr/include/boost/locale/message.hpp	/^            int n_;$/;"	m	class:boost::locale::basic_message	access:private
name	/usr/include/boost/locale/gnu_gettext.hpp	/^            std::string name; \/\/\/< The name of the domain$/;"	m	struct:boost::locale::gnu_gettext::messages_info::domain	access:public
name	/usr/include/boost/locale/info.hpp	/^            std::string name() const$/;"	f	class:boost::locale::info	access:public	signature:() const
name_property	/usr/include/boost/locale/info.hpp	/^                name_property       \/\/\/< locale name$/;"	e	enum:boost::locale::info::string_propery
nanoseconds	/usr/include/boost/locale/date_time_facet.hpp	/^            uint32_t nanoseconds;  \/\/\/< Nanoseconds resolution$/;"	m	struct:boost::locale::posix_time	access:public
ngettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType> ngettext(   CharType const *s,$/;"	f	namespace:boost::locale	signature:( CharType const *s, CharType const *p, int n, std::locale const &loc=std::locale())
nochar_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t nochar_facet    = 0;        \/\/\/< Unspecified character category for character independent facets$/;"	m	namespace:boost::locale
non_character_facet_first	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t    non_character_facet_first = calendar_facet; \/\/\/< First character independent facet $/;"	m	namespace:boost::locale
non_character_facet_last	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t    non_character_facet_last = information_facet;\/\/\/< Last character independent facet $/;"	m	namespace:boost::locale
norm_default	/usr/include/boost/locale/conversion.hpp	/^            norm_default = norm_nfc, \/\/\/< Default normalization - canonical decomposition followed by canonical composition$/;"	e	enum:boost::locale::__anon3
norm_nfc	/usr/include/boost/locale/conversion.hpp	/^            norm_nfc,   \/\/\/< Canonical decomposition followed by canonical composition$/;"	e	enum:boost::locale::__anon3
norm_nfd	/usr/include/boost/locale/conversion.hpp	/^            norm_nfd,   \/\/\/< Canonical decomposition$/;"	e	enum:boost::locale::__anon3
norm_nfkc	/usr/include/boost/locale/conversion.hpp	/^            norm_nfkc,  \/\/\/< Compatibility decomposition followed by canonical composition.$/;"	e	enum:boost::locale::__anon3
norm_nfkd	/usr/include/boost/locale/conversion.hpp	/^            norm_nfkd,  \/\/\/< Compatibility decomposition$/;"	e	enum:boost::locale::__anon3
norm_type	/usr/include/boost/locale/conversion.hpp	/^        } norm_type;$/;"	t	namespace:boost::locale	typeref:enum:boost::locale::__anon3
normalization	/usr/include/boost/locale/conversion.hpp	/^                normalization,  \/\/\/< Apply Unicode normalization on the text$/;"	e	enum:boost::locale::converter_base::__anon2
normalize	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> normalize(  CharType const *begin,$/;"	f	namespace:boost::locale	signature:( CharType const *begin, CharType const *end, norm_type n=norm_default, std::locale const &loc=std::locale())
normalize	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> normalize(CharType const *str,norm_type n=norm_default,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *str,norm_type n=norm_default,std::locale const &loc=std::locale())
normalize	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> normalize(std::basic_string<CharType> const &str,norm_type n=norm_default,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &str,norm_type n=norm_default,std::locale const &loc=std::locale())
normalize	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void normalize() = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:()
november	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period november() { return date_time_period(month(),10); }$/;"	f	namespace:boost::locale::period	signature:()
npgettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  npgettext( CharType const *context,$/;"	f	namespace:boost::locale	signature:( CharType const *context, CharType const *s, CharType const *p, int n, std::locale const &loc=std::locale())
number	/usr/include/boost/locale/formatting.hpp	/^                number              = 1,$/;"	e	enum:boost::locale::flags::__anon8
number	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & number(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
october	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period october() { return date_time_period(month(),9); }$/;"	f	namespace:boost::locale::period	signature:()
offset	/usr/include/boost/locale/boundary/facets.hpp	/^                size_t offset;$/;"	m	struct:boost::locale::boundary::break_info	access:public
on_imbue	/usr/include/boost/locale/formatting.hpp	/^            void on_imbue();$/;"	p	class:boost::locale::ios_info	access:public	signature:()
operator !=	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        bool operator!=(boundary_point const &other) const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(boundary_point const &other) const
operator !=	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        bool operator!=(iterator_type const &other) const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(iterator_type const &other) const
operator !=	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    bool operator!=(BaseIterator const &l,boundary_point<BaseIterator> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(BaseIterator const &l,boundary_point<BaseIterator> const &r)
operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^        bool operator!=(segment const &other)$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(segment const &other)
operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator!=(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator!=(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator!=(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator!=(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
operator !=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator!=(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
operator !=	/usr/include/boost/locale/date_time.hpp	/^            bool operator!=(calendar const &other) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(calendar const &other) const
operator !=	/usr/include/boost/locale/date_time.hpp	/^            bool operator!=(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
operator !=	/usr/include/boost/locale/date_time_facet.hpp	/^                bool operator!=(period_type const &other) const$/;"	f	class:boost::locale::period::period_type	access:public	signature:(period_type const &other) const
operator !=	/usr/include/boost/locale/gnu_gettext.hpp	/^            bool operator!=(domain const &other) const$/;"	f	struct:boost::locale::gnu_gettext::messages_info::domain	access:public	signature:(domain const &other) const
operator %	/usr/include/boost/locale/format.hpp	/^            basic_format &operator % (Formattible const &object)$/;"	f	class:boost::locale::basic_format	access:public	signature:(Formattible const &object)
operator ()	/usr/include/boost/locale/collator.hpp	/^        bool operator()(std::basic_string<CharType> const &left,std::basic_string<CharType> const &right) const$/;"	f	struct:boost::locale::comparator	access:public	signature:(std::basic_string<CharType> const &left,std::basic_string<CharType> const &right) const
operator ()	/usr/include/boost/locale/generator.hpp	/^            std::locale operator()(std::string const &id) const$/;"	f	class:boost::locale::generator	access:public	signature:(std::string const &id) const
operator *	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator*(T v,date_time_period f)$/;"	f	namespace:boost::locale::period	signature:(T v,date_time_period f)
operator *	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator*(T v,period::period_type f)$/;"	f	namespace:boost::locale::period	signature:(T v,period::period_type f)
operator *	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator*(date_time_period f,T v)$/;"	f	namespace:boost::locale::period	signature:(date_time_period f,T v)
operator *	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator*(period::period_type f,T v)$/;"	f	namespace:boost::locale::period	signature:(period::period_type f,T v)
operator *	/usr/include/boost/locale/hold_ptr.hpp	/^        T &operator *() { return *ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
operator *	/usr/include/boost/locale/hold_ptr.hpp	/^        T const &operator *() const { return *ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:() const
operator +	/usr/include/boost/locale/date_time.hpp	/^            date_time operator+(date_time_period const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v) const
operator +	/usr/include/boost/locale/date_time.hpp	/^            date_time operator+(date_time_period_set const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v) const
operator +	/usr/include/boost/locale/date_time.hpp	/^            date_time operator+(period::period_type f) const$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
operator +	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator+() const { return *this; }$/;"	f	struct:boost::locale::date_time_period	access:public	signature:() const
operator +	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period operator+(period::period_type f) $/;"	f	namespace:boost::locale::period	signature:(period::period_type f)
operator +	/usr/include/boost/locale/date_time.hpp	/^        inline date_time_period_set operator+(date_time_period_set const &a,date_time_period_set const &b)$/;"	f	namespace:boost::locale	signature:(date_time_period_set const &a,date_time_period_set const &b)
operator +=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator+=(date_time_period const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v)
operator +=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator+=(date_time_period_set const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v)
operator +=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator+=(period::period_type f)$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f)
operator -	/usr/include/boost/locale/date_time.hpp	/^            date_time operator-(date_time_period const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v) const
operator -	/usr/include/boost/locale/date_time.hpp	/^            date_time operator-(date_time_period_set const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v) const
operator -	/usr/include/boost/locale/date_time.hpp	/^            date_time operator-(period::period_type f) const$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
operator -	/usr/include/boost/locale/date_time.hpp	/^            date_time_period operator-() const { return date_time_period(type,-value); }$/;"	f	struct:boost::locale::date_time_period	access:public	signature:() const
operator -	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period operator-(period::period_type f)$/;"	f	namespace:boost::locale::period	signature:(period::period_type f)
operator -	/usr/include/boost/locale/date_time.hpp	/^        inline date_time_duration operator-(date_time const &later,date_time const &earlier)$/;"	f	namespace:boost::locale	signature:(date_time const &later,date_time const &earlier)
operator -	/usr/include/boost/locale/date_time.hpp	/^        inline date_time_period_set operator-(date_time_period_set const &a,date_time_period_set const &b)$/;"	f	namespace:boost::locale	signature:(date_time_period_set const &a,date_time_period_set const &b)
operator -=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator-=(date_time_period const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v)
operator -=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator-=(date_time_period_set const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v)
operator -=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator-=(period::period_type f)$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f)
operator ->	/usr/include/boost/locale/hold_ptr.hpp	/^        T *operator->() { return ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
operator ->	/usr/include/boost/locale/hold_ptr.hpp	/^        T const *operator->() const { return ptr_; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:() const
operator /	/usr/include/boost/locale/date_time.hpp	/^            int operator \/ (period::period_type f) const$/;"	f	class:boost::locale::date_time_duration	access:public	signature:(period::period_type f) const
operator /	/usr/include/boost/locale/date_time.hpp	/^            int operator\/(period::period_type f) const$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
operator <	/usr/include/boost/locale/boundary/facets.hpp	/^                bool operator<(break_info const &other) const$/;"	f	struct:boost::locale::boundary::break_info	access:public	signature:(break_info const &other) const
operator <	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
operator <	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
operator <	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
operator <	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
operator <	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
operator <	/usr/include/boost/locale/date_time.hpp	/^            bool operator<(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
operator <<	/usr/include/boost/locale/boundary/segment.hpp	/^    std::basic_ostream<CharType,TraitsType> &operator<<($/;"	f	namespace:boost::locale::boundary	signature:( std::basic_ostream<CharType,TraitsType> &out, segment<Iterator> const &tok)
operator <<	/usr/include/boost/locale/date_time.hpp	/^            date_time operator<<(date_time_period const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v) const
operator <<	/usr/include/boost/locale/date_time.hpp	/^            date_time operator<<(date_time_period_set const &v) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v) const
operator <<	/usr/include/boost/locale/date_time.hpp	/^            date_time operator<<(period::period_type f) const$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
operator <<	/usr/include/boost/locale/date_time.hpp	/^        std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out,date_time const &t)$/;"	f	namespace:boost::locale	signature:(std::basic_ostream<CharType> &out,date_time const &t)
operator <<	/usr/include/boost/locale/format.hpp	/^                friend stream_type &operator<<(stream_type &out,formattible const &fmt)$/;"	f	struct:boost::locale::details::formattible	access:friend	signature:(stream_type &out,formattible const &fmt)
operator <<	/usr/include/boost/locale/format.hpp	/^        std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out,basic_format<CharType> const &fmt)$/;"	f	namespace:boost::locale	signature:(std::basic_ostream<CharType> &out,basic_format<CharType> const &fmt)
operator <<	/usr/include/boost/locale/formatting.hpp	/^                std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out,add_ftime<CharType> const &fmt)$/;"	f	namespace:boost::locale::as::details	signature:(std::basic_ostream<CharType> &out,add_ftime<CharType> const &fmt)
operator <<	/usr/include/boost/locale/formatting.hpp	/^                std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out,set_timezone const &fmt)$/;"	f	namespace:boost::locale::as::details	signature:(std::basic_ostream<CharType> &out,set_timezone const &fmt)
operator <<	/usr/include/boost/locale/message.hpp	/^                std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out, set_domain const &dom)$/;"	f	namespace:boost::locale::as::details	signature:(std::basic_ostream<CharType> &out, set_domain const &dom)
operator <<	/usr/include/boost/locale/message.hpp	/^        std::basic_ostream<CharType> &operator<<(std::basic_ostream<CharType> &out,basic_message<CharType> const &msg)$/;"	f	namespace:boost::locale	signature:(std::basic_ostream<CharType> &out,basic_message<CharType> const &msg)
operator <<=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator<<=(date_time_period const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v)
operator <<=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator<<=(date_time_period_set const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v)
operator <<=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator<<=(period::period_type f)$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f)
operator <=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<=(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
operator <=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<=(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
operator <=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<=(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
operator <=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<=(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
operator <=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator<=(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
operator <=	/usr/include/boost/locale/date_time.hpp	/^            bool operator<=(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
operator =	/usr/include/boost/locale/boundary/index.hpp	/^                boundary_point_index const &operator=(segment_index<base_iterator> const &other);$/;"	p	class:boost::locale::boundary::boundary_point_index	access:public	signature:(segment_index<base_iterator> const &other)
operator =	/usr/include/boost/locale/boundary/index.hpp	/^                segment_index const &operator = (boundary_point_index<base_iterator> const &);$/;"	p	class:boost::locale::boundary::segment_index	access:public	signature:(boundary_point_index<base_iterator> const &)
operator =	/usr/include/boost/locale/boundary/index.hpp	/^            boundary_point_index<BaseIterator> const &boundary_point_index<BaseIterator>::operator=(segment_index<BaseIterator> const &other)$/;"	f	class:boost::locale::boundary::boundary_point_index	signature:(segment_index<BaseIterator> const &other)
operator =	/usr/include/boost/locale/boundary/index.hpp	/^            segment_index<BaseIterator> const &segment_index<BaseIterator>::operator=(boundary_point_index<BaseIterator> const &other)$/;"	f	class:boost::locale::boundary::segment_index	signature:(boundary_point_index<BaseIterator> const &other)
operator =	/usr/include/boost/locale/date_time.hpp	/^            calendar const &operator=(calendar const &other);$/;"	p	class:boost::locale::calendar	access:public	signature:(calendar const &other)
operator =	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator=(date_time const &other);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other)
operator =	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator=(date_time_period_set const &f);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &f)
operator =	/usr/include/boost/locale/format.hpp	/^                formattible const &operator=(Type const &other)$/;"	f	struct:boost::locale::details::formattible	access:public	signature:(Type const &other)
operator =	/usr/include/boost/locale/format.hpp	/^                formattible const &operator=(formattible const &other)$/;"	f	struct:boost::locale::details::formattible	access:public	signature:(formattible const &other)
operator =	/usr/include/boost/locale/format.hpp	/^                void operator=(format_parser const &);$/;"	p	class:boost::locale::details::format_parser	access:private	signature:(format_parser const &)
operator =	/usr/include/boost/locale/format.hpp	/^            void operator=(basic_format const &other);$/;"	p	class:boost::locale::basic_format	access:private	signature:(basic_format const &other)
operator =	/usr/include/boost/locale/formatting.hpp	/^                string_set const &operator=(string_set const &other);$/;"	p	class:boost::locale::ios_info::string_set	access:public	signature:(string_set const &other)
operator =	/usr/include/boost/locale/formatting.hpp	/^            ios_info const &operator=(ios_info const &);$/;"	p	class:boost::locale::ios_info	access:public	signature:(ios_info const &)
operator =	/usr/include/boost/locale/generator.hpp	/^            void operator=(generator const &);$/;"	p	class:boost::locale::generator	access:private	signature:(generator const &)
operator =	/usr/include/boost/locale/hold_ptr.hpp	/^        hold_ptr const &operator=(hold_ptr const &other); \/\/ non assignable$/;"	p	class:boost::locale::hold_ptr	access:private	signature:(hold_ptr const &other)
operator =	/usr/include/boost/locale/localization_backend.hpp	/^            localization_backend_manager const &operator=(localization_backend_manager const &);$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:(localization_backend_manager const &)
operator =	/usr/include/boost/locale/localization_backend.hpp	/^            void operator=(localization_backend const &);$/;"	p	class:boost::locale::localization_backend	access:private	signature:(localization_backend const &)
operator =	/usr/include/boost/locale/message.hpp	/^            basic_message const &operator=(basic_message const &other)$/;"	f	class:boost::locale::basic_message	access:public	signature:(basic_message const &other)
operator ==	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        bool operator==(boundary_point const &other) const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(boundary_point const &other) const
operator ==	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        bool operator==(iterator_type const &other) const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(iterator_type const &other) const
operator ==	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    bool operator==(BaseIterator const &l,boundary_point<BaseIterator> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(BaseIterator const &l,boundary_point<BaseIterator> const &r)
operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^        bool operator==(segment const &other)$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(segment const &other)
operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator==(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator==(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator==(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator==(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
operator ==	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator==(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
operator ==	/usr/include/boost/locale/date_time.hpp	/^            bool operator==(calendar const &other) const;$/;"	p	class:boost::locale::calendar	access:public	signature:(calendar const &other) const
operator ==	/usr/include/boost/locale/date_time.hpp	/^            bool operator==(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
operator ==	/usr/include/boost/locale/date_time_facet.hpp	/^                bool operator==(period_type const &other) const$/;"	f	class:boost::locale::period::period_type	access:public	signature:(period_type const &other) const
operator ==	/usr/include/boost/locale/gnu_gettext.hpp	/^            bool operator==(domain const &other) const$/;"	f	struct:boost::locale::gnu_gettext::messages_info::domain	access:public	signature:(domain const &other) const
operator >	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
operator >	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
operator >	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
operator >	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
operator >	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
operator >	/usr/include/boost/locale/date_time.hpp	/^            bool operator>(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
operator >=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>=(CharType const *l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(CharType const *l,segment<IteratorR> const &r)
operator >=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>=(segment<Iterator> const &l,CharType const *r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,CharType const *r)
operator >=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>=(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<Iterator> const &l,std::basic_string<CharType,Traits,Alloc> const &r)
operator >=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>=(segment<IteratorL> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(segment<IteratorL> const &l,segment<IteratorR> const &r)
operator >=	/usr/include/boost/locale/boundary/segment.hpp	/^    bool operator>=(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)$/;"	f	namespace:boost::locale::boundary	signature:(std::basic_string<CharType,Traits,Alloc> const &l,segment<IteratorR> const &r)
operator >=	/usr/include/boost/locale/date_time.hpp	/^            bool operator>=(date_time const &other) const;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time const &other) const
operator >>	/usr/include/boost/locale/date_time.hpp	/^            date_time operator>>(date_time_period const &v) const ;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v) const
operator >>	/usr/include/boost/locale/date_time.hpp	/^            date_time operator>>(date_time_period_set const &v) const ;$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v) const
operator >>	/usr/include/boost/locale/date_time.hpp	/^            date_time operator>>(period::period_type f) const$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f) const
operator >>	/usr/include/boost/locale/date_time.hpp	/^        std::basic_istream<CharType> &operator>>(std::basic_istream<CharType> &in,date_time &t)$/;"	f	namespace:boost::locale	signature:(std::basic_istream<CharType> &in,date_time &t)
operator >>	/usr/include/boost/locale/formatting.hpp	/^                std::basic_istream<CharType> &operator>>(std::basic_istream<CharType> &in,add_ftime<CharType> const &fmt)$/;"	f	namespace:boost::locale::as::details	signature:(std::basic_istream<CharType> &in,add_ftime<CharType> const &fmt)
operator >>	/usr/include/boost/locale/formatting.hpp	/^                std::basic_istream<CharType> &operator>>(std::basic_istream<CharType> &in,set_timezone const &fmt)$/;"	f	namespace:boost::locale::as::details	signature:(std::basic_istream<CharType> &in,set_timezone const &fmt)
operator >>=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator>>=(date_time_period const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period const &v)
operator >>=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator>>=(date_time_period_set const &v);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time_period_set const &v)
operator >>=	/usr/include/boost/locale/date_time.hpp	/^            date_time const &operator>>=(period::period_type f)$/;"	f	class:boost::locale::date_time	access:public	signature:(period::period_type f)
operator []	/usr/include/boost/locale/date_time.hpp	/^            date_time_period const &operator[](size_t n) const $/;"	f	class:boost::locale::date_time_period_set	access:public	signature:(size_t n) const
operator iterator_type	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        operator iterator_type ()const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:() const
operator std::basic_string<char_type, T, A>	/usr/include/boost/locale/boundary/segment.hpp	/^        operator std::basic_string<char_type, T, A> ()const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
operator string_type	/usr/include/boost/locale/message.hpp	/^            operator string_type () const$/;"	f	class:boost::locale::basic_message	access:public	signature:() const
ordinal	/usr/include/boost/locale/formatting.hpp	/^                ordinal             = 9,$/;"	e	enum:boost::locale::flags::__anon8
ordinal	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & ordinal(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
parameters_	/usr/include/boost/locale/format.hpp	/^            formattible_type parameters_[base_params_];$/;"	m	class:boost::locale::basic_format	access:private
parameters_count_	/usr/include/boost/locale/format.hpp	/^            unsigned parameters_count_;$/;"	m	class:boost::locale::basic_format	access:private
parsing_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     parsing_facet   = 1 << 3;   \/\/\/< Generate numbers, currency, date-time formatting facets$/;"	m	namespace:boost::locale
paths	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::vector<std::string> paths; \/\/\/< Paths to search files in. Under MS Windows it uses encoding$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
pattern_type	/usr/include/boost/locale/formatting.hpp	/^            } pattern_type;$/;"	t	namespace:boost::locale::flags	typeref:enum:boost::locale::flags::__anon9
per_character_facet_first	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     per_character_facet_first = convert_facet; \/\/\/< First facet specific for character$/;"	m	namespace:boost::locale
per_character_facet_last	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t     per_character_facet_last = boundary_facet; \/\/\/< Last facet specific for character$/;"	m	namespace:boost::locale
percent	/usr/include/boost/locale/formatting.hpp	/^                percent             = 3,$/;"	e	enum:boost::locale::flags::__anon8
percent	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & percent(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
period	/usr/include/boost/locale/date_time.hpp	/^        namespace period {$/;"	n	namespace:boost::locale
period	/usr/include/boost/locale/date_time_facet.hpp	/^        namespace period {$/;"	n	namespace:boost::locale
period_mark	/usr/include/boost/locale/date_time_facet.hpp	/^                enum period_mark {$/;"	g	namespace:boost::locale::period::marks
period_type	/usr/include/boost/locale/date_time_facet.hpp	/^                period_type(marks::period_mark m = marks::invalid) : mark_(m) $/;"	f	class:boost::locale::period::period_type	access:public	signature:(marks::period_mark m = marks::invalid)
period_type	/usr/include/boost/locale/date_time_facet.hpp	/^            class period_type {$/;"	c	namespace:boost::locale::period
periods_	/usr/include/boost/locale/date_time.hpp	/^            std::vector<date_time_period> periods_;$/;"	m	class:boost::locale::date_time_period_set	access:private
pgettext	/usr/include/boost/locale/message.hpp	/^        std::basic_string<CharType>  pgettext(  CharType const *context,$/;"	f	namespace:boost::locale	signature:( CharType const *context, CharType const *id, std::locale const &loc=std::locale())
pimpl_	/usr/include/boost/locale/localization_backend.hpp	/^            std::auto_ptr<impl> pimpl_;$/;"	m	class:boost::locale::localization_backend_manager	access:private
plural	/usr/include/boost/locale/message.hpp	/^            char_type const *plural() const$/;"	f	class:boost::locale::basic_message	access:private	signature:() const
plural_	/usr/include/boost/locale/message.hpp	/^            string_type plural_;$/;"	m	class:boost::locale::basic_message	access:private
pm	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period pm() { return date_time_period(am_pm(),1); }$/;"	f	namespace:boost::locale::period	signature:()
pointer_	/usr/include/boost/locale/format.hpp	/^                void const *pointer_;$/;"	m	struct:boost::locale::details::formattible	access:private
posix	/usr/include/boost/locale/formatting.hpp	/^                posix               = 0,$/;"	e	enum:boost::locale::flags::__anon8
posix	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & posix(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
posix_time	/usr/include/boost/locale/date_time_facet.hpp	/^        struct posix_time {$/;"	s	namespace:boost::locale
primary	/usr/include/boost/locale/collator.hpp	/^            primary     = 0, \/\/\/< 1st collation level: base letters$/;"	e	enum:boost::locale::collator_base::__anon1
ptr	/usr/include/boost/locale/formatting.hpp	/^                char *ptr;$/;"	m	class:boost::locale::ios_info::string_set	access:private
ptr_	/usr/include/boost/locale/hold_ptr.hpp	/^        T *ptr_;$/;"	m	class:boost::locale::hold_ptr	access:private
quaternary	/usr/include/boost/locale/collator.hpp	/^            quaternary  = 3, \/\/\/< 4th collation level: letters, accents, case and punctuation$/;"	e	enum:boost::locale::collator_base::__anon1
release	/usr/include/boost/locale/hold_ptr.hpp	/^        T *release() { T *tmp=ptr_; ptr_=0; return tmp; }$/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
remove_all_backends	/usr/include/boost/locale/localization_backend.hpp	/^            void remove_all_backends();$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:()
reset	/usr/include/boost/locale/hold_ptr.hpp	/^        void reset(T *p=0)$/;"	f	class:boost::locale::hold_ptr	access:public	signature:(T *p=0)
restore	/usr/include/boost/locale/format.hpp	/^                void restore()$/;"	f	class:boost::locale::basic_format::format_guard	access:public	signature:()
restore	/usr/include/boost/locale/format.hpp	/^                void restore();$/;"	p	class:boost::locale::details::format_parser	access:public	signature:()
restored_	/usr/include/boost/locale/format.hpp	/^                bool restored_;$/;"	m	class:boost::locale::basic_format::format_guard	access:private
roll	/usr/include/boost/locale/date_time_facet.hpp	/^                roll,   \/\/\/< Change the value up or down not effecting others for example 1990-12-31 + 1 day = 1990-12-01$/;"	e	enum:boost::locale::abstract_calendar::__anon5
rule	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        rule_type rule() const$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:() const
rule	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        void rule(rule_type r)$/;"	f	class:boost::locale::boundary::boundary_point	access:public	signature:(rule_type r)
rule	/usr/include/boost/locale/boundary/facets.hpp	/^                rule_type rule;$/;"	m	struct:boost::locale::boundary::break_info	access:public
rule	/usr/include/boost/locale/boundary/index.hpp	/^                rule_type rule() const$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:() const
rule	/usr/include/boost/locale/boundary/index.hpp	/^                rule_type rule() const$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:() const
rule	/usr/include/boost/locale/boundary/index.hpp	/^                void rule(rule_type v)$/;"	f	class:boost::locale::boundary::boundary_point_index	access:public	signature:(rule_type v)
rule	/usr/include/boost/locale/boundary/index.hpp	/^                void rule(rule_type v)$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(rule_type v)
rule	/usr/include/boost/locale/boundary/segment.hpp	/^        rule_type rule() const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
rule	/usr/include/boost/locale/boundary/segment.hpp	/^        void rule(rule_type r)$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(rule_type r)
rule_	/usr/include/boost/locale/boundary/boundary_point.hpp	/^        rule_type rule_;$/;"	m	class:boost::locale::boundary::boundary_point	access:private
rule_	/usr/include/boost/locale/boundary/segment.hpp	/^        rule_type rule_;$/;"	m	class:boost::locale::boundary::segment	access:private
rule_type	/usr/include/boost/locale/boundary/types.hpp	/^            typedef uint32_t rule_type;$/;"	t	namespace:boost::locale::boundary
s_	/usr/include/boost/locale/date_time.hpp	/^            date_time const &s_;$/;"	m	class:boost::locale::date_time_duration	access:private
same	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual bool same(abstract_calendar const *other) const = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(abstract_calendar const *other) const
saturday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period saturday() { return date_time_period(day_of_week(),7); }$/;"	f	namespace:boost::locale::period	signature:()
sboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<std::string::const_iterator> sboundary_point;      \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
sboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<std::string::const_iterator> sboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
second	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period second(int v) { return date_time_period(second(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
second	/usr/include/boost/locale/date_time.hpp	/^            inline int second(date_time const &dt) { return dt.get(second()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
second	/usr/include/boost/locale/date_time.hpp	/^            inline int second(date_time_duration const &dt) { return dt.get(second()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
second	/usr/include/boost/locale/date_time.hpp	/^            inline period_type second(){ return period_type(marks::second); }$/;"	f	namespace:boost::locale::period	signature:()
second	/usr/include/boost/locale/date_time_facet.hpp	/^                    second,                     \/\/\/< second [0..59]$/;"	e	enum:boost::locale::period::marks::period_mark
secondary	/usr/include/boost/locale/collator.hpp	/^            secondary   = 1, \/\/\/< 2nd collation level: letters and accents$/;"	e	enum:boost::locale::collator_base::__anon1
seconds	/usr/include/boost/locale/date_time_facet.hpp	/^            int64_t seconds; \/\/\/< Seconds since epoch$/;"	m	struct:boost::locale::posix_time	access:public
segment	/usr/include/boost/locale/boundary/segment.hpp	/^        segment() {}$/;"	f	class:boost::locale::boundary::segment	access:public	signature:()
segment	/usr/include/boost/locale/boundary/segment.hpp	/^        segment(iterator b,iterator e,rule_type r) :$/;"	f	class:boost::locale::boundary::segment	access:public	signature:(iterator b,iterator e,rule_type r)
segment	/usr/include/boost/locale/boundary/segment.hpp	/^    class segment : public std::pair<IteratorType,IteratorType> {$/;"	c	namespace:boost::locale::boundary	inherits:std::pair
segment_index	/usr/include/boost/locale/boundary/index.hpp	/^                segment_index() : mask_(0xFFFFFFFFu),full_select_(false)$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:()
segment_index	/usr/include/boost/locale/boundary/index.hpp	/^                segment_index(boundary_point_index<base_iterator> const &);$/;"	p	class:boost::locale::boundary::segment_index	access:public	signature:(boundary_point_index<base_iterator> const &)
segment_index	/usr/include/boost/locale/boundary/index.hpp	/^                segment_index(boundary_type type,$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(boundary_type type, base_iterator begin, base_iterator end, rule_type mask, std::locale const &loc=std::locale())
segment_index	/usr/include/boost/locale/boundary/index.hpp	/^                segment_index(boundary_type type,$/;"	f	class:boost::locale::boundary::segment_index	access:public	signature:(boundary_type type, base_iterator begin, base_iterator end, std::locale const &loc=std::locale())
segment_index	/usr/include/boost/locale/boundary/index.hpp	/^            class segment_index {$/;"	c	namespace:boost::locale::boundary
segment_index	/usr/include/boost/locale/boundary/index.hpp	/^            segment_index<BaseIterator>::segment_index(boundary_point_index<BaseIterator> const &other) :$/;"	f	class:boost::locale::boundary::segment_index	signature:(boundary_point_index<BaseIterator> const &other)
segment_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    segment_index_iterator() : current_(0,0),map_(0)$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:()
segment_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    segment_index_iterator(base_iterator p,mapping_type const *map,rule_type mask,bool full_select) :$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:(base_iterator p,mapping_type const *map,rule_type mask,bool full_select)
segment_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                    segment_index_iterator(bool is_begin,mapping_type const *map,rule_type mask,bool full_select) :$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:public	signature:(bool is_begin,mapping_type const *map,rule_type mask,bool full_select)
segment_index_iterator	/usr/include/boost/locale/boundary/index.hpp	/^                class segment_index_iterator : $/;"	c	namespace:boost::locale::boundary::details	inherits:boost::iterator_facade
segment_type	/usr/include/boost/locale/boundary/index.hpp	/^                    typedef segment<base_iterator> segment_type;$/;"	t	class:boost::locale::boundary::details::segment_index_iterator	access:public
select	/usr/include/boost/locale/localization_backend.hpp	/^            void select(std::string const &backend_name,locale_category_type category = all_categories);$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:(std::string const &backend_name,locale_category_type category = all_categories)
sentence	/usr/include/boost/locale/boundary/types.hpp	/^                sentence,   \/\/\/< Analyse the text for Find sentence boundaries$/;"	e	enum:boost::locale::boundary::boundary_type
sentence_any	/usr/include/boost/locale/boundary/types.hpp	/^                sentence_any    =  0xFF,    \/\/\/< Either first or second sentence break type;.$/;"	m	namespace:boost::locale::boundary
sentence_mask	/usr/include/boost/locale/boundary/types.hpp	/^                sentence_mask   =  0xFF;    \/\/\/< Select all sentence breaking points$/;"	m	namespace:boost::locale::boundary
sentence_sep	/usr/include/boost/locale/boundary/types.hpp	/^                sentence_sep    =  0xF0,    \/\/\/< \\brief The sentence does not contain terminator like ".", "!" but ended with hard separator$/;"	m	namespace:boost::locale::boundary
sentence_term	/usr/include/boost/locale/boundary/types.hpp	/^                sentence_term   =  0x0F,    \/\/\/< \\brief The sentence was terminated with a sentence terminator $/;"	m	namespace:boost::locale::boundary
september	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period september() { return date_time_period(month(),8); }$/;"	f	namespace:boost::locale::period	signature:()
set	/usr/include/boost/locale/boundary/index.hpp	/^                    void set(base_iterator p)$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:(base_iterator p)
set	/usr/include/boost/locale/boundary/index.hpp	/^                    void set(base_iterator p)$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:(base_iterator p)
set	/usr/include/boost/locale/date_time.hpp	/^            void set(period::period_type f,int v);$/;"	p	class:boost::locale::date_time	access:public	signature:(period::period_type f,int v)
set	/usr/include/boost/locale/formatting.hpp	/^                void set(Char const *s)$/;"	f	class:boost::locale::ios_info::string_set	access:public	signature:(Char const *s)
set_all_options	/usr/include/boost/locale/generator.hpp	/^            void set_all_options(shared_ptr<localization_backend> backend,std::string const &id) const;$/;"	p	class:boost::locale::generator	access:private	signature:(shared_ptr<localization_backend> backend,std::string const &id) const
set_begin	/usr/include/boost/locale/boundary/index.hpp	/^                    void set_begin()$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:()
set_begin	/usr/include/boost/locale/boundary/index.hpp	/^                    void set_begin()$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:()
set_default_messages_domain	/usr/include/boost/locale/generator.hpp	/^            void set_default_messages_domain(std::string const &domain);$/;"	p	class:boost::locale::generator	access:public	signature:(std::string const &domain)
set_domain	/usr/include/boost/locale/message.hpp	/^                struct set_domain {$/;"	s	namespace:boost::locale::as::details
set_end	/usr/include/boost/locale/boundary/index.hpp	/^                    void set_end()$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:()
set_end	/usr/include/boost/locale/boundary/index.hpp	/^                    void set_end()$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:()
set_flag_with_str	/usr/include/boost/locale/format.hpp	/^                void set_flag_with_str(std::string const &key,std::basic_string<CharType> const &value)$/;"	f	class:boost::locale::details::format_parser	access:public	signature:(std::string const &key,std::basic_string<CharType> const &value)
set_one_flag	/usr/include/boost/locale/format.hpp	/^                void set_one_flag(std::string const &key,std::string const &value);$/;"	p	class:boost::locale::details::format_parser	access:public	signature:(std::string const &key,std::string const &value)
set_option	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void set_option(calendar_option_type opt,int v) = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(calendar_option_type opt,int v)
set_option	/usr/include/boost/locale/generator.hpp	/^            void set_option(std::string const &name,std::string const &value);$/;"	p	class:boost::locale::generator	access:public	signature:(std::string const &name,std::string const &value)
set_option	/usr/include/boost/locale/localization_backend.hpp	/^            virtual void set_option(std::string const &name,std::string const &value) = 0;$/;"	p	class:boost::locale::localization_backend	access:public	signature:(std::string const &name,std::string const &value)
set_time	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void set_time(posix_time const &p)  = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(posix_time const &p)
set_timezone	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void set_timezone(std::string const &tz) = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(std::string const &tz)
set_timezone	/usr/include/boost/locale/formatting.hpp	/^                struct set_timezone {$/;"	s	namespace:boost::locale::as::details
set_value	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual void set_value(period::marks::period_mark p,int value) = 0;$/;"	p	class:boost::locale::abstract_calendar	access:public	signature:(period::marks::period_mark p,int value)
size	/usr/include/boost/locale/boundary/index.hpp	/^                    size_t size() const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:() const
size	/usr/include/boost/locale/boundary/index.hpp	/^                    size_t size() const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:() const
size	/usr/include/boost/locale/date_time.hpp	/^            size_t size() const$/;"	f	class:boost::locale::date_time_period_set	access:public	signature:() const
size	/usr/include/boost/locale/formatting.hpp	/^                size_t size;$/;"	m	class:boost::locale::ios_info::string_set	access:private
skip	/usr/include/boost/locale/encoding_errors.hpp	/^                skip            = 0,    \/\/\/< Skip illegal\/unconvertable characters$/;"	e	enum:boost::locale::conv::__anon7
spellout	/usr/include/boost/locale/formatting.hpp	/^                spellout            = 8,$/;"	e	enum:boost::locale::flags::__anon8
spellout	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & spellout(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
ssegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<std::string::const_iterator> ssegment;      \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
ssegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<std::string::const_iterator> ssegment_index;      \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
start	/usr/include/boost/locale/date_time.hpp	/^            date_time const &start() const { return s_; }$/;"	f	class:boost::locale::date_time_duration	access:public	signature:() const
stop	/usr/include/boost/locale/encoding_errors.hpp	/^                stop            = 1,    \/\/\/< Stop conversion and throw conversion_error$/;"	e	enum:boost::locale::conv::__anon7
str	/usr/include/boost/locale/boundary/segment.hpp	/^        string_type str() const$/;"	f	class:boost::locale::boundary::segment	access:public	signature:() const
str	/usr/include/boost/locale/format.hpp	/^            string_type str(std::locale const &loc = std::locale()) const$/;"	f	class:boost::locale::basic_format	access:public	signature:(std::locale const &loc = std::locale()) const
str	/usr/include/boost/locale/message.hpp	/^            string_type str() const$/;"	f	class:boost::locale::basic_message	access:public	signature:() const
str	/usr/include/boost/locale/message.hpp	/^            string_type str(std::locale const &loc,int id) const$/;"	f	class:boost::locale::basic_message	access:public	signature:(std::locale const &loc,int id) const
str	/usr/include/boost/locale/message.hpp	/^            string_type str(std::locale const &locale) const$/;"	f	class:boost::locale::basic_message	access:public	signature:(std::locale const &locale) const
str	/usr/include/boost/locale/message.hpp	/^            string_type str(std::locale const &locale,std::string const &domain_id) const$/;"	f	class:boost::locale::basic_message	access:public	signature:(std::locale const &locale,std::string const &domain_id) const
str	/usr/include/boost/locale/message.hpp	/^            string_type str(std::string const &domain_id) const$/;"	f	class:boost::locale::basic_message	access:public	signature:(std::string const &domain_id) const
stream_type	/usr/include/boost/locale/format.hpp	/^                typedef std::basic_ostream<CharType> stream_type;$/;"	t	struct:boost::locale::details::formattible	access:public
stream_type	/usr/include/boost/locale/format.hpp	/^            typedef std::basic_ostream<CharType> stream_type; \/\/\/< output stream type for this type of character$/;"	t	class:boost::locale::basic_format	access:public
strftime	/usr/include/boost/locale/formatting.hpp	/^                strftime            = 7,$/;"	e	enum:boost::locale::flags::__anon8
strftime	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & strftime(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
string_cast_traits	/usr/include/boost/locale/message.hpp	/^            struct string_cast_traits {$/;"	s	namespace:boost::locale::details
string_cast_traits	/usr/include/boost/locale/message.hpp	/^            struct string_cast_traits<char> {$/;"	s	namespace:boost::locale::details
string_propery	/usr/include/boost/locale/info.hpp	/^            enum string_propery {$/;"	g	class:boost::locale::info	access:public
string_set	/usr/include/boost/locale/formatting.hpp	/^                string_set(); $/;"	p	class:boost::locale::ios_info::string_set	access:public	signature:()
string_set	/usr/include/boost/locale/formatting.hpp	/^                string_set(string_set const &other);$/;"	p	class:boost::locale::ios_info::string_set	access:public	signature:(string_set const &other)
string_set	/usr/include/boost/locale/formatting.hpp	/^            class BOOST_LOCALE_DECL string_set {$/;"	c	class:boost::locale::ios_info	access:private
string_type	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef std::basic_string<char_type> string_type;$/;"	t	class:boost::locale::boundary::segment	access:public
string_type	/usr/include/boost/locale/collator.hpp	/^        typedef std::basic_string<CharType> string_type;$/;"	t	class:boost::locale::collator	access:public
string_type	/usr/include/boost/locale/format.hpp	/^            typedef std::basic_string<CharType> string_type; \/\/\/< string type for this type of character$/;"	t	class:boost::locale::basic_format	access:public
string_type	/usr/include/boost/locale/message.hpp	/^            typedef std::basic_string<CharType> string_type;$/;"	t	class:boost::locale::message_format	access:public
string_type	/usr/include/boost/locale/message.hpp	/^            typedef std::basic_string<char_type> string_type;   \/\/\/< The string type this object can be used with$/;"	t	class:boost::locale::basic_message	access:public
sunday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period sunday() { return date_time_period(day_of_week(),1); }$/;"	f	namespace:boost::locale::period	signature:()
swap	/usr/include/boost/locale/date_time.hpp	/^            void swap(date_time &other);$/;"	p	class:boost::locale::date_time	access:public	signature:(date_time &other)
swap	/usr/include/boost/locale/formatting.hpp	/^                void swap(string_set &other);$/;"	p	class:boost::locale::ios_info::string_set	access:public	signature:(string_set &other)
swap	/usr/include/boost/locale/hold_ptr.hpp	/^        void swap(hold_ptr &other)$/;"	f	class:boost::locale::hold_ptr	access:public	signature:(hold_ptr &other)
swap	/usr/include/boost/locale/message.hpp	/^            void swap(basic_message &other)$/;"	f	class:boost::locale::basic_message	access:public	signature:(basic_message &other)
tertiary	/usr/include/boost/locale/collator.hpp	/^            tertiary    = 2, \/\/\/< 3rd collation level: letters, accents and case$/;"	e	enum:boost::locale::collator_base::__anon1
thursday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period thursday() { return date_time_period(day_of_week(),5); }$/;"	f	namespace:boost::locale::period	signature:()
time	/usr/include/boost/locale/date_time.hpp	/^            double time() const;$/;"	p	class:boost::locale::date_time	access:public	signature:() const
time	/usr/include/boost/locale/date_time.hpp	/^            void time(double v);$/;"	p	class:boost::locale::date_time	access:public	signature:(double v)
time	/usr/include/boost/locale/formatting.hpp	/^                time                = 5,$/;"	e	enum:boost::locale::flags::__anon8
time	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
time_default	/usr/include/boost/locale/formatting.hpp	/^                time_default        = 0 << 7,$/;"	e	enum:boost::locale::flags::__anon8
time_default	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time_default(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
time_flags	/usr/include/boost/locale/formatting.hpp	/^            uint64_t time_flags() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
time_flags	/usr/include/boost/locale/formatting.hpp	/^            void time_flags(uint64_t flags);$/;"	p	class:boost::locale::ios_info	access:public	signature:(uint64_t flags)
time_flags_mask	/usr/include/boost/locale/formatting.hpp	/^                time_flags_mask     = 7 << 7,$/;"	e	enum:boost::locale::flags::__anon8
time_full	/usr/include/boost/locale/formatting.hpp	/^                time_full           = 4 << 7,$/;"	e	enum:boost::locale::flags::__anon8
time_full	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time_full(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
time_long	/usr/include/boost/locale/formatting.hpp	/^                time_long           = 3 << 7,$/;"	e	enum:boost::locale::flags::__anon8
time_long	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time_long(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
time_medium	/usr/include/boost/locale/formatting.hpp	/^                time_medium         = 2 << 7,$/;"	e	enum:boost::locale::flags::__anon8
time_medium	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time_medium(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
time_short	/usr/include/boost/locale/formatting.hpp	/^                time_short          = 1 << 7,$/;"	e	enum:boost::locale::flags::__anon8
time_short	/usr/include/boost/locale/formatting.hpp	/^            inline std::ios_base & time_short(std::ios_base & ios)$/;"	f	namespace:boost::locale::as	signature:(std::ios_base & ios)
time_zone	/usr/include/boost/locale/formatting.hpp	/^            std::string time_zone() const;$/;"	p	class:boost::locale::ios_info	access:public	signature:() const
time_zone	/usr/include/boost/locale/formatting.hpp	/^            time_zone(char const *id) $/;"	f	namespace:boost::locale::as	signature:(char const *id)
time_zone	/usr/include/boost/locale/formatting.hpp	/^            time_zone(std::string const &id) $/;"	f	namespace:boost::locale::as	signature:(std::string const &id)
time_zone	/usr/include/boost/locale/formatting.hpp	/^            void time_zone(std::string const &);$/;"	p	class:boost::locale::ios_info	access:public	signature:(std::string const &)
time_zone	/usr/include/boost/locale/time_zone.hpp	/^        namespace time_zone {$/;"	n	namespace:boost::locale
time_zone_	/usr/include/boost/locale/formatting.hpp	/^            std::string time_zone_;$/;"	m	class:boost::locale::ios_info	access:private
time_zone_id	/usr/include/boost/locale/formatting.hpp	/^                time_zone_id        \/\/\/< time zone name$/;"	e	enum:boost::locale::flags::__anon9
title_case	/usr/include/boost/locale/conversion.hpp	/^                title_case      \/\/\/< Convert text to title case$/;"	e	enum:boost::locale::converter_base::__anon2
to_lower	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_lower(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())
to_lower	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_lower(CharType const *str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *str,std::locale const &loc=std::locale())
to_lower	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_lower(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())
to_title	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_title(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())
to_title	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_title(CharType const *str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *str,std::locale const &loc=std::locale())
to_title	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_title(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())
to_unicode	/usr/include/boost/locale/util.hpp	/^        virtual uint32_t to_unicode(char const *&begin,char const *end) $/;"	f	class:boost::locale::util::base_converter	access:public	signature:(char const *&begin,char const *end)
to_upper	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_upper(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *begin,CharType const *end,std::locale const &loc=std::locale())
to_upper	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_upper(CharType const *str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(CharType const *str,std::locale const &loc=std::locale())
to_upper	/usr/include/boost/locale/conversion.hpp	/^        std::basic_string<CharType> to_upper(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &str,std::locale const &loc=std::locale())
to_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::basic_string<char16_t> to_utf(char const *begin,char const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how)
to_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::basic_string<char32_t> to_utf(char const *begin,char const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how)
to_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::basic_string<char> to_utf(char const *begin,char const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how)
to_utf	/usr/include/boost/locale/encoding.hpp	/^            BOOST_LOCALE_DECL std::basic_string<wchar_t> to_utf(char const *begin,char const *end,std::string const &charset,method_type how);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how)
to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(char const *begin,char const *end,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::locale const &loc,method_type how=default_method)
to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(char const *begin,char const *end,std::string const &charset,method_type how=default_method);$/;"	p	namespace:boost::locale::conv	signature:(char const *begin,char const *end,std::string const &charset,method_type how=default_method)
to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(char const *text,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(char const *text,std::locale const &loc,method_type how=default_method)
to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(char const *text,std::string const &charset,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(char const *text,std::string const &charset,method_type how=default_method)
to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(std::string const &text,std::locale const &loc,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(std::string const &text,std::locale const &loc,method_type how=default_method)
to_utf	/usr/include/boost/locale/encoding.hpp	/^            std::basic_string<CharType> to_utf(std::string const &text,std::string const &charset,method_type how=default_method)$/;"	f	namespace:boost::locale::conv	signature:(std::string const &text,std::string const &charset,method_type how=default_method)
trail_length	/usr/include/boost/locale/utf.hpp	/^        static int trail_length(char_type c)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
trail_length	/usr/include/boost/locale/utf.hpp	/^        static int trail_length(char_type c);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type c)
trail_length	/usr/include/boost/locale/utf.hpp	/^        static int trail_length(char_type ci) $/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(char_type ci)
transform	/usr/include/boost/locale/collator.hpp	/^        string_type transform(level_type level,char_type const *b,char_type const *e) const$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level,char_type const *b,char_type const *e) const
transform	/usr/include/boost/locale/collator.hpp	/^        string_type transform(level_type level,string_type const &s) const$/;"	f	class:boost::locale::collator	access:public	signature:(level_type level,string_type const &s) const
translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   CharType const *context,$/;"	f	namespace:boost::locale	signature:( CharType const *context, CharType const *msg)
translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   CharType const *context,$/;"	f	namespace:boost::locale	signature:( CharType const *context, CharType const *single, CharType const *plural, int n)
translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   CharType const *single,$/;"	f	namespace:boost::locale	signature:( CharType const *single, CharType const *plural, int n)
translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   std::basic_string<CharType> const &context,$/;"	f	namespace:boost::locale	signature:( std::basic_string<CharType> const &context, std::basic_string<CharType> const &msg)
translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   std::basic_string<CharType> const &context,$/;"	f	namespace:boost::locale	signature:( std::basic_string<CharType> const &context, std::basic_string<CharType> const &single, std::basic_string<CharType> const &plural, int n)
translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(   std::basic_string<CharType> const &single,$/;"	f	namespace:boost::locale	signature:( std::basic_string<CharType> const &single, std::basic_string<CharType> const &plural, int n)
translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(CharType const *msg)$/;"	f	namespace:boost::locale	signature:(CharType const *msg)
translate	/usr/include/boost/locale/message.hpp	/^        inline basic_message<CharType> translate(std::basic_string<CharType> const &msg)$/;"	f	namespace:boost::locale	signature:(std::basic_string<CharType> const &msg)
translate_	/usr/include/boost/locale/format.hpp	/^            bool translate_;$/;"	m	class:boost::locale::basic_format	access:private
tuesday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period tuesday() { return date_time_period(day_of_week(),3); }$/;"	f	namespace:boost::locale::period	signature:()
type	/usr/include/boost/locale/date_time.hpp	/^            period::period_type type;   \/\/\/< The type of period, i.e. era, year, day etc.$/;"	m	struct:boost::locale::date_time_period	access:public
type	/usr/include/boost/locale/formatting.hpp	/^                std::type_info const *type;$/;"	m	class:boost::locale::ios_info::string_set::std	access:private
tz_	/usr/include/boost/locale/date_time.hpp	/^            std::string tz_;$/;"	m	class:boost::locale::calendar	access:private
u16cboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<char16_t const *> u16cboundary_point;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u16cboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<char16_t const *> u16cboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u16csegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<char16_t const *> u16csegment;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u16csegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<char16_t const *> u16csegment_index;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u16format	/usr/include/boost/locale/format.hpp	/^        typedef basic_format<char16_t> u16format;$/;"	t	namespace:boost::locale
u16message	/usr/include/boost/locale/message.hpp	/^        typedef basic_message<char16_t> u16message;$/;"	t	namespace:boost::locale
u16sboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<std::u16string::const_iterator> u16sboundary_point;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u16sboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<std::u16string::const_iterator> u16sboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u16ssegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<std::u16string::const_iterator> u16ssegment;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u16ssegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<std::u16string::const_iterator> u16ssegment_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u32cboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<char32_t const *> u32cboundary_point;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u32cboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<char32_t const *> u32cboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u32csegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<char32_t const *> u32csegment;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u32csegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<char32_t const *> u32csegment_index;              \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u32format	/usr/include/boost/locale/format.hpp	/^        typedef basic_format<char32_t> u32format;$/;"	t	namespace:boost::locale
u32message	/usr/include/boost/locale/message.hpp	/^        typedef basic_message<char32_t> u32message;$/;"	t	namespace:boost::locale
u32sboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<std::u32string::const_iterator> u32sboundary_point;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u32sboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<std::u32string::const_iterator> u32sboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u32ssegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<std::u32string::const_iterator> u32ssegment;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
u32ssegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<std::u32string::const_iterator> u32ssegment_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
update_current	/usr/include/boost/locale/boundary/index.hpp	/^                    void update_current(size_t pos)$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:(size_t pos)
update_current	/usr/include/boost/locale/boundary/index.hpp	/^                    void update_current(std::pair<size_t,size_t> pos)$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:(std::pair<size_t,size_t> pos)
update_rule	/usr/include/boost/locale/boundary/index.hpp	/^                    void update_rule()$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:()
update_rule	/usr/include/boost/locale/boundary/index.hpp	/^                    void update_rule()$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:()
update_type	/usr/include/boost/locale/date_time_facet.hpp	/^            } update_type;$/;"	t	class:boost::locale::abstract_calendar	typeref:enum:boost::locale::abstract_calendar::__anon5	access:public
upper_case	/usr/include/boost/locale/conversion.hpp	/^                upper_case,     \/\/\/< Convert text to upper case$/;"	e	enum:boost::locale::converter_base::__anon2
use_ansi_encoding	/usr/include/boost/locale/generator.hpp	/^            bool use_ansi_encoding() const;$/;"	p	class:boost::locale::generator	access:public	signature:() const
use_ansi_encoding	/usr/include/boost/locale/generator.hpp	/^            void use_ansi_encoding(bool enc);$/;"	p	class:boost::locale::generator	access:public	signature:(bool enc)
utf	/usr/include/boost/locale/utf.hpp	/^namespace utf {$/;"	n	namespace:boost::locale
utf8	/usr/include/boost/locale/info.hpp	/^            bool utf8() const$/;"	f	class:boost::locale::info	access:public	signature:() const
utf8_property	/usr/include/boost/locale/info.hpp	/^                utf8_property       \/\/\/< Non zero value if uses UTF-8 encoding$/;"	e	enum:boost::locale::info::integer_property
utf_to_utf	/usr/include/boost/locale/encoding_utf.hpp	/^            utf_to_utf(CharIn const *begin,CharIn const *end,method_type how = default_method)$/;"	f	namespace:boost::locale::conv	signature:(CharIn const *begin,CharIn const *end,method_type how = default_method)
utf_to_utf	/usr/include/boost/locale/encoding_utf.hpp	/^            utf_to_utf(CharIn const *str,method_type how = default_method)$/;"	f	namespace:boost::locale::conv	signature:(CharIn const *str,method_type how = default_method)
utf_to_utf	/usr/include/boost/locale/encoding_utf.hpp	/^            utf_to_utf(std::basic_string<CharIn> const &str,method_type how = default_method)$/;"	f	namespace:boost::locale::conv	signature:(std::basic_string<CharIn> const &str,method_type how = default_method)
utf_traits	/usr/include/boost/locale/utf.hpp	/^    struct utf_traits {$/;"	s	namespace:boost::locale::utf
utf_traits	/usr/include/boost/locale/utf.hpp	/^    struct utf_traits<CharType,1> {$/;"	s	namespace:boost::locale::utf
utf_traits	/usr/include/boost/locale/utf.hpp	/^    struct utf_traits<CharType,2> {$/;"	s	namespace:boost::locale::utf
utf_traits	/usr/include/boost/locale/utf.hpp	/^    struct utf_traits<CharType,4> {$/;"	s	namespace:boost::locale::utf
util	/usr/include/boost/locale/util.hpp	/^namespace util {$/;"	n	namespace:boost::locale
valid_offset	/usr/include/boost/locale/boundary/index.hpp	/^                    bool valid_offset(size_t offset) const$/;"	f	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private	signature:(size_t offset) const
valid_offset	/usr/include/boost/locale/boundary/index.hpp	/^                    bool valid_offset(size_t offset) const$/;"	f	class:boost::locale::boundary::details::segment_index_iterator	access:private	signature:(size_t offset) const
value	/usr/include/boost/locale/date_time.hpp	/^            int value;                  \/\/\/< The value the actual number of \\a periods$/;"	m	struct:boost::locale::date_time_period	access:public
value_	/usr/include/boost/locale/boundary/index.hpp	/^                    boundary_point_type value_;$/;"	m	class:boost::locale::boundary::details::boundary_point_index_iterator	access:private
value_	/usr/include/boost/locale/boundary/index.hpp	/^                    segment_type value_;$/;"	m	class:boost::locale::boundary::details::segment_index_iterator	access:private
value_type	/usr/include/boost/locale/boundary/index.hpp	/^                typedef boundary_point<base_iterator> value_type;$/;"	t	class:boost::locale::boundary::boundary_point_index	access:public
value_type	/usr/include/boost/locale/boundary/index.hpp	/^                typedef segment<base_iterator> value_type;$/;"	t	class:boost::locale::boundary::segment_index	access:public
value_type	/usr/include/boost/locale/boundary/segment.hpp	/^        typedef char_type value_type;$/;"	t	class:boost::locale::boundary::segment	access:public
value_type	/usr/include/boost/locale/date_time_facet.hpp	/^            } value_type;$/;"	t	class:boost::locale::abstract_calendar	typeref:enum:boost::locale::abstract_calendar::__anon4	access:public
value_type	/usr/include/boost/locale/formatting.hpp	/^            } value_type;$/;"	t	namespace:boost::locale::flags	typeref:enum:boost::locale::flags::__anon10
variant	/usr/include/boost/locale/gnu_gettext.hpp	/^        std::string variant;    \/\/\/< Language variant, like "euro" so it would look for catalog like de_DE\\@euro$/;"	m	struct:boost::locale::gnu_gettext::messages_info	access:public
variant	/usr/include/boost/locale/info.hpp	/^            std::string variant() const$/;"	f	class:boost::locale::info	access:public	signature:() const
variant_property	/usr/include/boost/locale/info.hpp	/^                variant_property,   \/\/\/< Variant for locale$/;"	e	enum:boost::locale::info::string_propery
void_write	/usr/include/boost/locale/format.hpp	/^                static void void_write(stream_type &output,void const * \/*ptr*\/)$/;"	f	struct:boost::locale::details::formattible	access:private	signature:(stream_type &output,void const * )
wcboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<wchar_t const *> wcboundary_point;                 \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
wcboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<wchar_t const *> wcboundary_point_index;   \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
wchar_t_facet	/usr/include/boost/locale/generator.hpp	/^        static const uint32_t wchar_t_facet   = 1 << 1;   \/\/\/< wide character facets$/;"	m	namespace:boost::locale
wcsegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<wchar_t const *> wcsegment;                 \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
wcsegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<wchar_t const *> wcsegment_index;                 \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
wednesday	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period wednesday() { return date_time_period(day_of_week(),4); }$/;"	f	namespace:boost::locale::period	signature:()
week_of_month	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period week_of_month(int v) { return date_time_period(week_of_month(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
week_of_month	/usr/include/boost/locale/date_time.hpp	/^            inline int week_of_month(date_time const &dt) { return dt.get(week_of_month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
week_of_month	/usr/include/boost/locale/date_time.hpp	/^            inline int week_of_month(date_time_duration const &dt) { return dt.get(week_of_month()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
week_of_month	/usr/include/boost/locale/date_time.hpp	/^            inline period_type week_of_month(){ return period_type(marks::week_of_month); }$/;"	f	namespace:boost::locale::period	signature:()
week_of_month	/usr/include/boost/locale/date_time_facet.hpp	/^                    week_of_month,              \/\/\/< The week number within current month$/;"	e	enum:boost::locale::period::marks::period_mark
week_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period week_of_year(int v) { return date_time_period(week_of_year(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
week_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline int week_of_year(date_time const &dt) { return dt.get(week_of_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
week_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline int week_of_year(date_time_duration const &dt) { return dt.get(week_of_year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
week_of_year	/usr/include/boost/locale/date_time.hpp	/^            inline period_type week_of_year(){ return period_type(marks::week_of_year); }$/;"	f	namespace:boost::locale::period	signature:()
week_of_year	/usr/include/boost/locale/date_time_facet.hpp	/^                    week_of_year,               \/\/\/< The week number in the year$/;"	e	enum:boost::locale::period::marks::period_mark
wformat	/usr/include/boost/locale/format.hpp	/^        typedef basic_format<wchar_t> wformat;$/;"	t	namespace:boost::locale
width	/usr/include/boost/locale/utf.hpp	/^        static int width(code_point \/*u*\/)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point )
width	/usr/include/boost/locale/utf.hpp	/^        static int width(code_point u)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point u)
width	/usr/include/boost/locale/utf.hpp	/^        static int width(code_point value)$/;"	f	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point value)
width	/usr/include/boost/locale/utf.hpp	/^        static int width(code_point value);$/;"	p	struct:boost::locale::utf::utf_traits	access:public	signature:(code_point value)
wmessage	/usr/include/boost/locale/message.hpp	/^        typedef basic_message<wchar_t> wmessage;$/;"	t	namespace:boost::locale
word	/usr/include/boost/locale/boundary/types.hpp	/^                word,       \/\/\/< Analyse the text for word boundaries$/;"	e	enum:boost::locale::boundary::boundary_type
word_any	/usr/include/boost/locale/boundary/types.hpp	/^                word_any        =  0xFFFF0,   \/\/\/< Any word including numbers, 0 is special flag, equivalent to 15$/;"	m	namespace:boost::locale::boundary
word_ideo	/usr/include/boost/locale/boundary/types.hpp	/^                word_ideo       =  0xF0000,   \/\/\/< Word that contains ideographic characters$/;"	m	namespace:boost::locale::boundary
word_kana	/usr/include/boost/locale/boundary/types.hpp	/^                word_kana       =  0x0F000,   \/\/\/< Word that contains kana characters$/;"	m	namespace:boost::locale::boundary
word_kana_ideo	/usr/include/boost/locale/boundary/types.hpp	/^                word_kana_ideo  =  0xFF000,   \/\/\/< Word that includes kana or ideographic characters$/;"	m	namespace:boost::locale::boundary
word_letter	/usr/include/boost/locale/boundary/types.hpp	/^                word_letter     =  0x00F00,   \/\/\/< Word that contains letters, excluding kana and ideographic characters $/;"	m	namespace:boost::locale::boundary
word_letters	/usr/include/boost/locale/boundary/types.hpp	/^                word_letters    =  0xFFF00,   \/\/\/< Any word, excluding numbers but including letters, kana and ideograms.$/;"	m	namespace:boost::locale::boundary
word_mask	/usr/include/boost/locale/boundary/types.hpp	/^                word_mask       =  0xFFFFF;   \/\/\/< Full word mask - select all possible variants$/;"	m	namespace:boost::locale::boundary
word_none	/usr/include/boost/locale/boundary/types.hpp	/^                word_none       =  0x0000F,   \/\/\/< Not a word, like white space or punctuation mark$/;"	m	namespace:boost::locale::boundary
word_number	/usr/include/boost/locale/boundary/types.hpp	/^                word_number     =  0x000F0,   \/\/\/< Word that appear to be a number$/;"	m	namespace:boost::locale::boundary
write	/usr/include/boost/locale/format.hpp	/^                static void write(stream_type &output,void const *ptr)$/;"	f	struct:boost::locale::details::formattible	access:private	signature:(stream_type &output,void const *ptr)
write	/usr/include/boost/locale/format.hpp	/^            void write(stream_type &out) const$/;"	f	class:boost::locale::basic_format	access:public	signature:(stream_type &out) const
write	/usr/include/boost/locale/message.hpp	/^            char_type const *write(std::locale const &loc,int domain_id,string_type &buffer) const$/;"	f	class:boost::locale::basic_message	access:private	signature:(std::locale const &loc,int domain_id,string_type &buffer) const
write	/usr/include/boost/locale/message.hpp	/^            void write(std::basic_ostream<char_type> &out) const$/;"	f	class:boost::locale::basic_message	access:public	signature:(std::basic_ostream<char_type> &out) const
writer_	/usr/include/boost/locale/format.hpp	/^                writer_type writer_;$/;"	m	struct:boost::locale::details::formattible	access:private
writer_type	/usr/include/boost/locale/format.hpp	/^                typedef void (*writer_type)(stream_type &output,void const *ptr);$/;"	t	struct:boost::locale::details::formattible	access:public
wsboundary_point	/usr/include/boost/locale/boundary/boundary_point.hpp	/^    typedef boundary_point<std::wstring::const_iterator> wsboundary_point;    \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
wsboundary_point_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef boundary_point_index<std::wstring::const_iterator> wsboundary_point_index;\/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
wssegment	/usr/include/boost/locale/boundary/segment.hpp	/^    typedef segment<std::wstring::const_iterator> wssegment;    \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
wssegment_index	/usr/include/boost/locale/boundary/index.hpp	/^            typedef segment_index<std::wstring::const_iterator> wssegment_index;    \/\/\/< convenience typedef$/;"	t	namespace:boost::locale::boundary
year	/usr/include/boost/locale/date_time.hpp	/^            inline date_time_period year(int v) { return date_time_period(year(),v); } $/;"	f	namespace:boost::locale::period	signature:(int v)
year	/usr/include/boost/locale/date_time.hpp	/^            inline int year(date_time const &dt) { return dt.get(year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time const &dt)
year	/usr/include/boost/locale/date_time.hpp	/^            inline int year(date_time_duration const &dt) { return dt.get(year()); } $/;"	f	namespace:boost::locale::period	signature:(date_time_duration const &dt)
year	/usr/include/boost/locale/date_time.hpp	/^            inline period_type year(){ return period_type(marks::year); }$/;"	f	namespace:boost::locale::period	signature:()
year	/usr/include/boost/locale/date_time_facet.hpp	/^                    year,                       \/\/\/< Year, it is calendar specific, for example 2011 in Gregorian calendar.$/;"	e	enum:boost::locale::period::marks::period_mark
~abstract_calendar	/usr/include/boost/locale/date_time_facet.hpp	/^            virtual ~abstract_calendar()$/;"	f	class:boost::locale::abstract_calendar	access:public	signature:()
~base_converter	/usr/include/boost/locale/util.hpp	/^        virtual ~base_converter() $/;"	f	class:boost::locale::util::base_converter	access:public	signature:()
~calendar	/usr/include/boost/locale/date_time.hpp	/^            ~calendar();$/;"	p	class:boost::locale::calendar	access:public	signature:()
~collator	/usr/include/boost/locale/collator.hpp	/^        virtual ~collator()$/;"	f	class:boost::locale::collator	access:protected	signature:()
~date_time	/usr/include/boost/locale/date_time.hpp	/^            ~date_time();$/;"	p	class:boost::locale::date_time	access:public	signature:()
~format_guard	/usr/include/boost/locale/format.hpp	/^                ~format_guard()$/;"	f	class:boost::locale::basic_format::format_guard	access:public	signature:()
~format_parser	/usr/include/boost/locale/format.hpp	/^                ~format_parser();$/;"	p	class:boost::locale::details::format_parser	access:public	signature:()
~generator	/usr/include/boost/locale/generator.hpp	/^            ~generator();$/;"	p	class:boost::locale::generator	access:public	signature:()
~hold_ptr	/usr/include/boost/locale/hold_ptr.hpp	/^        ~hold_ptr() $/;"	f	class:boost::locale::hold_ptr	access:public	signature:()
~ios_info	/usr/include/boost/locale/formatting.hpp	/^            ~ios_info();$/;"	p	class:boost::locale::ios_info	access:public	signature:()
~localization_backend	/usr/include/boost/locale/localization_backend.hpp	/^            virtual ~localization_backend()$/;"	f	class:boost::locale::localization_backend	access:public	signature:()
~localization_backend_manager	/usr/include/boost/locale/localization_backend.hpp	/^            ~localization_backend_manager();$/;"	p	class:boost::locale::localization_backend_manager	access:public	signature:()
~message_format	/usr/include/boost/locale/message.hpp	/^            virtual ~message_format()$/;"	f	class:boost::locale::message_format	access:protected	signature:()
~string_set	/usr/include/boost/locale/formatting.hpp	/^                ~string_set();$/;"	p	class:boost::locale::ios_info::string_set	access:public	signature:()
