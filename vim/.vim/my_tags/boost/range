!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ATL	/usr/include/boost/range/atl.hpp	/^namespace ATL {$/;"	n
BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^             BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)$/;"	f	struct:boost::range_detail::BidirectionalIteratorConcept	access:public	signature:(BidirectionalIteratorConcept)
BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^             BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)$/;"	f	struct:boost::range_detail::RandomAccessIteratorConcept	access:public	signature:(RandomAccessIteratorConcept)
BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^            BOOST_CONCEPT_USAGE(ForwardIteratorConcept)$/;"	f	struct:boost::range_detail::ForwardIteratorConcept	access:public	signature:(ForwardIteratorConcept)
BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^            BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)$/;"	f	struct:boost::range_detail::IncrementableIteratorConcept	access:public	signature:(IncrementableIteratorConcept)
BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^            BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)$/;"	f	struct:boost::range_detail::SinglePassIteratorConcept	access:public	signature:(SinglePassIteratorConcept)
BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)$/;"	f	struct:boost::SinglePassRangeConcept	access:public	signature:(SinglePassRangeConcept)
BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^        BOOST_CONCEPT_USAGE(WriteableRangeConcept)$/;"	f	struct:boost::WriteableRangeConcept	access:public	signature:(WriteableRangeConcept)
BOOST_CONCEPT_USAGE	/usr/include/boost/range/detail/misc_concept.hpp	/^            BOOST_CONCEPT_USAGE(SameTypeConcept)$/;"	f	class:boost::range_detail::SameTypeConcept	access:public	signature:(SameTypeConcept)
BOOST_DEFINE_RANGE_ADAPTOR	/usr/include/boost/range/adaptor/define_adaptor.hpp	16;"	d
BOOST_DEFINE_RANGE_ADAPTOR_1	/usr/include/boost/range/adaptor/define_adaptor.hpp	47;"	d
BOOST_DEMOTE_TRAVERSAL_TAG	/usr/include/boost/range/detail/demote_iterator_traversal_tag.hpp	29;"	d
BOOST_DEMOTE_TRAVERSAL_TAG	/usr/include/boost/range/detail/demote_iterator_traversal_tag.hpp	77;"	d
BOOST_MPL_ASSERT	/usr/include/boost/range/concepts.hpp	/^            BOOST_MPL_ASSERT((is_integral<difference_type>));$/;"	p	struct:boost::range_detail::ForwardIteratorConcept	access:public	signature:(is_integral<difference_type>)
BOOST_MPL_ASSERT_RELATION	/usr/include/boost/range/concepts.hpp	/^            BOOST_MPL_ASSERT_RELATION(std::numeric_limits<difference_type>::is_signed, ==, true);$/;"	p	struct:boost::range_detail::ForwardIteratorConcept	access:public	signature:(std::numeric_limits<difference_type>::is_signed, ==, true)
BOOST_OLD_IOSTREAMS	/usr/include/boost/range/iterator_range_io.hpp	26;"	d
BOOST_OLD_IOSTREAMS	/usr/include/boost/range/iterator_range_io.hpp	87;"	d
BOOST_RANGE_ADAPTORS_HPP	/usr/include/boost/range/adaptors.hpp	13;"	d
BOOST_RANGE_ADAPTOR_2	/usr/include/boost/range/adaptor/define_adaptor.hpp	81;"	d
BOOST_RANGE_ADAPTOR_ADJACENT_FILTER_IMPL_HPP	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	12;"	d
BOOST_RANGE_ADAPTOR_ARGUMENT_FWD_HPP	/usr/include/boost/range/adaptor/argument_fwd.hpp	12;"	d
BOOST_RANGE_ADAPTOR_COPIED_HPP	/usr/include/boost/range/adaptor/copied.hpp	12;"	d
BOOST_RANGE_ADAPTOR_FILTERED_HPP	/usr/include/boost/range/adaptor/filtered.hpp	12;"	d
BOOST_RANGE_ADAPTOR_INDEXED_IMPL_HPP	/usr/include/boost/range/adaptor/indexed.hpp	12;"	d
BOOST_RANGE_ADAPTOR_INDIRECTED_HPP	/usr/include/boost/range/adaptor/indirected.hpp	12;"	d
BOOST_RANGE_ADAPTOR_MAP_HPP	/usr/include/boost/range/adaptor/map.hpp	12;"	d
BOOST_RANGE_ADAPTOR_REPLACED_IF_IMPL_HPP_INCLUDED	/usr/include/boost/range/adaptor/replaced_if.hpp	12;"	d
BOOST_RANGE_ADAPTOR_REPLACED_IMPL_HPP_INCLUDED	/usr/include/boost/range/adaptor/replaced.hpp	12;"	d
BOOST_RANGE_ADAPTOR_REVERSED_HPP	/usr/include/boost/range/adaptor/reversed.hpp	12;"	d
BOOST_RANGE_ADAPTOR_SLICED_HPP	/usr/include/boost/range/adaptor/sliced.hpp	12;"	d
BOOST_RANGE_ADAPTOR_STRIDED_HPP_INCLUDED	/usr/include/boost/range/adaptor/strided.hpp	12;"	d
BOOST_RANGE_ADAPTOR_TOKENIZED_HPP	/usr/include/boost/range/adaptor/tokenized.hpp	12;"	d
BOOST_RANGE_ADAPTOR_TRANSFORMED_HPP	/usr/include/boost/range/adaptor/transformed.hpp	12;"	d
BOOST_RANGE_ADAPTOR_TYPE_ERASED_HPP_INCLUDED	/usr/include/boost/range/adaptor/type_erased.hpp	11;"	d
BOOST_RANGE_ADAPTOR_UNIQUED_IMPL_HPP	/usr/include/boost/range/adaptor/uniqued.hpp	12;"	d
BOOST_RANGE_ALGORITHM_ADJACENT_FIND_HPP_INCLUDED	/usr/include/boost/range/algorithm/adjacent_find.hpp	10;"	d
BOOST_RANGE_ALGORITHM_BINARY_SEARCH_HPP_INCLUDED	/usr/include/boost/range/algorithm/binary_search.hpp	10;"	d
BOOST_RANGE_ALGORITHM_COPY_BACKWARD_HPP_INCLUDED	/usr/include/boost/range/algorithm/copy_backward.hpp	10;"	d
BOOST_RANGE_ALGORITHM_COPY_HPP_INCLUDED	/usr/include/boost/range/algorithm/copy.hpp	10;"	d
BOOST_RANGE_ALGORITHM_COPY_N_HPP_INCLUDED	/usr/include/boost/range/algorithm_ext/copy_n.hpp	10;"	d
BOOST_RANGE_ALGORITHM_COUNT_HPP_INCLUDED	/usr/include/boost/range/algorithm/count.hpp	10;"	d
BOOST_RANGE_ALGORITHM_COUNT_IF_HPP_INCLUDED	/usr/include/boost/range/algorithm/count_if.hpp	10;"	d
BOOST_RANGE_ALGORITHM_EQUAL_HPP_INCLUDED	/usr/include/boost/range/algorithm/equal.hpp	11;"	d
BOOST_RANGE_ALGORITHM_EQUAL_RANGE_HPP_INCLUDED	/usr/include/boost/range/algorithm/equal_range.hpp	10;"	d
BOOST_RANGE_ALGORITHM_EXT_ERASE_HPP_INCLUDED	/usr/include/boost/range/algorithm_ext/erase.hpp	11;"	d
BOOST_RANGE_ALGORITHM_EXT_FOR_EACH_HPP_INCLUDED	/usr/include/boost/range/algorithm_ext/for_each.hpp	11;"	d
BOOST_RANGE_ALGORITHM_EXT_HPP	/usr/include/boost/range/algorithm_ext.hpp	16;"	d
BOOST_RANGE_ALGORITHM_EXT_INSERT_HPP_INCLUDED	/usr/include/boost/range/algorithm_ext/insert.hpp	11;"	d
BOOST_RANGE_ALGORITHM_EXT_IOTA_HPP_INCLUDED	/usr/include/boost/range/algorithm_ext/iota.hpp	11;"	d
BOOST_RANGE_ALGORITHM_EXT_IS_SORTED_HPP_INCLUDED	/usr/include/boost/range/algorithm_ext/is_sorted.hpp	11;"	d
BOOST_RANGE_ALGORITHM_EXT_OVERWRITE_HPP_INCLUDED	/usr/include/boost/range/algorithm_ext/overwrite.hpp	11;"	d
BOOST_RANGE_ALGORITHM_EXT_PUSH_BACK_HPP_INCLUDED	/usr/include/boost/range/algorithm_ext/push_back.hpp	11;"	d
BOOST_RANGE_ALGORITHM_EXT_PUSH_FRONT_HPP_INCLUDED	/usr/include/boost/range/algorithm_ext/push_front.hpp	11;"	d
BOOST_RANGE_ALGORITHM_FILL_HPP_INCLUDED	/usr/include/boost/range/algorithm/fill.hpp	10;"	d
BOOST_RANGE_ALGORITHM_FILL_N_HPP_INCLUDED	/usr/include/boost/range/algorithm/fill_n.hpp	10;"	d
BOOST_RANGE_ALGORITHM_FIND_END_HPP_INCLUDED	/usr/include/boost/range/algorithm/find_end.hpp	10;"	d
BOOST_RANGE_ALGORITHM_FIND_FIRST_OF_HPP_INCLUDED	/usr/include/boost/range/algorithm/find_first_of.hpp	10;"	d
BOOST_RANGE_ALGORITHM_FIND_HPP_INCLUDED	/usr/include/boost/range/algorithm/find.hpp	10;"	d
BOOST_RANGE_ALGORITHM_FIND_IF_HPP_INCLUDED	/usr/include/boost/range/algorithm/find_if.hpp	10;"	d
BOOST_RANGE_ALGORITHM_FOR_EACH_HPP_INCLUDED	/usr/include/boost/range/algorithm/for_each.hpp	10;"	d
BOOST_RANGE_ALGORITHM_GENERATE_HPP_INCLUDED	/usr/include/boost/range/algorithm/generate.hpp	10;"	d
BOOST_RANGE_ALGORITHM_HEAP_ALGORITHM_HPP_INCLUDED	/usr/include/boost/range/algorithm/heap_algorithm.hpp	10;"	d
BOOST_RANGE_ALGORITHM_HPP_INCLUDED_01012009	/usr/include/boost/range/algorithm.hpp	27;"	d
BOOST_RANGE_ALGORITHM_INPLACE_MERGE_HPP_INCLUDED	/usr/include/boost/range/algorithm/inplace_merge.hpp	10;"	d
BOOST_RANGE_ALGORITHM_LEXICOGRAPHICAL_COMPARE_HPP_INCLUDED	/usr/include/boost/range/algorithm/lexicographical_compare.hpp	10;"	d
BOOST_RANGE_ALGORITHM_LOWER_BOUND_HPP_INCLUDED	/usr/include/boost/range/algorithm/lower_bound.hpp	10;"	d
BOOST_RANGE_ALGORITHM_MAX_ELEMENT_HPP_INCLUDED	/usr/include/boost/range/algorithm/max_element.hpp	10;"	d
BOOST_RANGE_ALGORITHM_MERGE_HPP_INCLUDED	/usr/include/boost/range/algorithm/merge.hpp	10;"	d
BOOST_RANGE_ALGORITHM_MIN_ELEMENT_HPP_INCLUDED	/usr/include/boost/range/algorithm/min_element.hpp	10;"	d
BOOST_RANGE_ALGORITHM_MISMATCH_HPP_INCLUDED	/usr/include/boost/range/algorithm/mismatch.hpp	10;"	d
BOOST_RANGE_ALGORITHM_NTH_ELEMENT_HPP_INCLUDED	/usr/include/boost/range/algorithm/nth_element.hpp	10;"	d
BOOST_RANGE_ALGORITHM_PARTIAL_SORT_COPY_HPP_INCLUDED	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	10;"	d
BOOST_RANGE_ALGORITHM_PARTIAL_SORT_HPP_INCLUDED	/usr/include/boost/range/algorithm/partial_sort.hpp	10;"	d
BOOST_RANGE_ALGORITHM_PARTITION__HPP_INCLUDED	/usr/include/boost/range/algorithm/partition.hpp	10;"	d
BOOST_RANGE_ALGORITHM_PERMUTATION_HPP_INCLUDED	/usr/include/boost/range/algorithm/permutation.hpp	10;"	d
BOOST_RANGE_ALGORITHM_RANDOM_SHUFFLE_HPP_INCLUDED	/usr/include/boost/range/algorithm/random_shuffle.hpp	10;"	d
BOOST_RANGE_ALGORITHM_REMOVE_COPY_HPP_INCLUDED	/usr/include/boost/range/algorithm/remove_copy.hpp	10;"	d
BOOST_RANGE_ALGORITHM_REMOVE_COPY_IF_HPP_INCLUDED	/usr/include/boost/range/algorithm/remove_copy_if.hpp	10;"	d
BOOST_RANGE_ALGORITHM_REMOVE_HPP_INCLUDED	/usr/include/boost/range/algorithm/remove.hpp	10;"	d
BOOST_RANGE_ALGORITHM_REMOVE_IF_HPP_INCLUDED	/usr/include/boost/range/algorithm/remove_if.hpp	10;"	d
BOOST_RANGE_ALGORITHM_REPLACE_COPY_HPP_INCLUDED	/usr/include/boost/range/algorithm/replace_copy.hpp	10;"	d
BOOST_RANGE_ALGORITHM_REPLACE_COPY_IF_HPP_INCLUDED	/usr/include/boost/range/algorithm/replace_copy_if.hpp	10;"	d
BOOST_RANGE_ALGORITHM_REPLACE_HPP_INCLUDED	/usr/include/boost/range/algorithm/replace.hpp	10;"	d
BOOST_RANGE_ALGORITHM_REPLACE_IF_HPP_INCLUDED	/usr/include/boost/range/algorithm/replace_if.hpp	10;"	d
BOOST_RANGE_ALGORITHM_REVERSE_COPY_HPP_INCLUDED	/usr/include/boost/range/algorithm/reverse_copy.hpp	10;"	d
BOOST_RANGE_ALGORITHM_REVERSE_HPP_INCLUDED	/usr/include/boost/range/algorithm/reverse.hpp	10;"	d
BOOST_RANGE_ALGORITHM_ROTATE_COPY_HPP_INCLUDED	/usr/include/boost/range/algorithm/rotate_copy.hpp	10;"	d
BOOST_RANGE_ALGORITHM_ROTATE_HPP_INCLUDED	/usr/include/boost/range/algorithm/rotate.hpp	10;"	d
BOOST_RANGE_ALGORITHM_SEARCH_HPP_INCLUDED	/usr/include/boost/range/algorithm/search.hpp	10;"	d
BOOST_RANGE_ALGORITHM_SEARCH_N_HPP_INCLUDED	/usr/include/boost/range/algorithm/search_n.hpp	10;"	d
BOOST_RANGE_ALGORITHM_SET_ALGORITHM_HPP_INCLUDED	/usr/include/boost/range/algorithm/set_algorithm.hpp	10;"	d
BOOST_RANGE_ALGORITHM_SORT_HPP_INCLUDED	/usr/include/boost/range/algorithm/sort.hpp	10;"	d
BOOST_RANGE_ALGORITHM_STABLE_PARTITION_HPP_INCLUDED	/usr/include/boost/range/algorithm/stable_partition.hpp	10;"	d
BOOST_RANGE_ALGORITHM_STABLE_SORT_HPP_INCLUDED	/usr/include/boost/range/algorithm/stable_sort.hpp	10;"	d
BOOST_RANGE_ALGORITHM_SWAP_RANGES_HPP_INCLUDED	/usr/include/boost/range/algorithm/swap_ranges.hpp	10;"	d
BOOST_RANGE_ALGORITHM_TRANSFORM_HPP_INCLUDED	/usr/include/boost/range/algorithm/transform.hpp	10;"	d
BOOST_RANGE_ALGORITHM_UNIQUE_COPY_HPP_INCLUDED	/usr/include/boost/range/algorithm/unique_copy.hpp	10;"	d
BOOST_RANGE_ALGORITHM_UNIQUE_HPP_INCLUDED	/usr/include/boost/range/algorithm/unique.hpp	10;"	d
BOOST_RANGE_ALGORITHM_UPPER_BOUND_HPP_INCLUDED	/usr/include/boost/range/algorithm/upper_bound.hpp	10;"	d
BOOST_RANGE_ANY_RANGE_HPP_INCLUDED	/usr/include/boost/range/any_range.hpp	10;"	d
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/config.hpp	45;"	d
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/config.hpp	48;"	d
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/begin.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/detail_str.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/end.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline T* array_end( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const T* array_end( const T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t array_size( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t array_size( const T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:()
BOOST_RANGE_AS_ARRAY_HPP	/usr/include/boost/range/as_array.hpp	12;"	d
BOOST_RANGE_AS_LITERAL_HPP	/usr/include/boost/range/as_literal.hpp	12;"	d
BOOST_RANGE_ATL_HAS_OLD_CSIMPLESTRING	/usr/include/boost/range/atl.hpp	40;"	d
BOOST_RANGE_ATL_HAS_OLD_CSIMPLE_XXX	/usr/include/boost/range/atl.hpp	33;"	d
BOOST_RANGE_ATL_HPP	/usr/include/boost/range/atl.hpp	2;"	d
BOOST_RANGE_ATL_NO_COLLECTIONS	/usr/include/boost/range/atl.hpp	26;"	d
BOOST_RANGE_BEGIN_HPP	/usr/include/boost/range/begin.hpp	12;"	d
BOOST_RANGE_CATEGORY_HPP	/usr/include/boost/range/category.hpp	12;"	d
BOOST_RANGE_COMBINE_HPP	/usr/include/boost/range/combine.hpp	10;"	d
BOOST_RANGE_CONCEPTS_HPP	/usr/include/boost/range/concepts.hpp	17;"	d
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/any_range.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<WrappedRange> ));$/;"	p	struct:boost::range_detail::any_range_type_generator	access:public	signature:( SinglePassRangeConcept<WrappedRange> )
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^             BOOST_RANGE_CONCEPT_ASSERT(($/;"	p	struct:boost::range_detail::BidirectionalIteratorConcept	access:public	signature:( Convertible< BOOST_DEDUCED_TYPENAME BidirectionalIteratorConcept::traversal_category, bidirectional_traversal_tag >)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^             BOOST_RANGE_CONCEPT_ASSERT(($/;"	p	struct:boost::range_detail::RandomAccessIteratorConcept	access:public	signature:( Convertible< BOOST_DEDUCED_TYPENAME RandomAccessIteratorConcept::traversal_category, random_access_traversal_tag >)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(($/;"	p	struct:boost::range_detail::ForwardIteratorConcept	access:public	signature:( Convertible< BOOST_DEDUCED_TYPENAME ForwardIteratorConcept::traversal_category, forward_traversal_tag >)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(($/;"	p	struct:boost::range_detail::IncrementableIteratorConcept	access:public	signature:( Convertible< traversal_category, incrementable_traversal_tag >)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(($/;"	p	struct:boost::range_detail::SinglePassIteratorConcept	access:public	signature:( Convertible< BOOST_DEDUCED_TYPENAME SinglePassIteratorConcept::traversal_category, single_pass_traversal_tag >)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^         BOOST_RANGE_CONCEPT_ASSERT((range_detail::SinglePassIteratorConcept<const_iterator>));$/;"	p	struct:boost::SinglePassRangeConcept	access:public	signature:(range_detail::SinglePassIteratorConcept<const_iterator>)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^         BOOST_RANGE_CONCEPT_ASSERT((range_detail::SinglePassIteratorConcept<iterator>));$/;"	p	struct:boost::SinglePassRangeConcept	access:public	signature:(range_detail::SinglePassIteratorConcept<iterator>)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((BidirectionalIteratorConcept<BOOST_DEDUCED_TYPENAME BidirectionalRangeConcept::const_iterator>));$/;"	p	struct:boost::BidirectionalRangeConcept	access:public	signature:(BidirectionalIteratorConcept<BOOST_DEDUCED_TYPENAME BidirectionalRangeConcept::const_iterator>)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((BidirectionalIteratorConcept<BOOST_DEDUCED_TYPENAME BidirectionalRangeConcept::iterator>));$/;"	p	struct:boost::BidirectionalRangeConcept	access:public	signature:(BidirectionalIteratorConcept<BOOST_DEDUCED_TYPENAME BidirectionalRangeConcept::iterator>)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((RandomAccessIteratorConcept<BOOST_DEDUCED_TYPENAME RandomAccessRangeConcept::const_iterator>));$/;"	p	struct:boost::RandomAccessRangeConcept	access:public	signature:(RandomAccessIteratorConcept<BOOST_DEDUCED_TYPENAME RandomAccessRangeConcept::const_iterator>)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((RandomAccessIteratorConcept<BOOST_DEDUCED_TYPENAME RandomAccessRangeConcept::iterator>));$/;"	p	struct:boost::RandomAccessRangeConcept	access:public	signature:(RandomAccessIteratorConcept<BOOST_DEDUCED_TYPENAME RandomAccessRangeConcept::iterator>)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((range_detail::ForwardIteratorConcept<BOOST_DEDUCED_TYPENAME ForwardRangeConcept::const_iterator>));$/;"	p	struct:boost::ForwardRangeConcept	access:public	signature:(range_detail::ForwardIteratorConcept<BOOST_DEDUCED_TYPENAME ForwardRangeConcept::const_iterator>)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((range_detail::ForwardIteratorConcept<BOOST_DEDUCED_TYPENAME ForwardRangeConcept::iterator>));$/;"	p	struct:boost::ForwardRangeConcept	access:public	signature:(range_detail::ForwardIteratorConcept<BOOST_DEDUCED_TYPENAME ForwardRangeConcept::iterator>)
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	92;"	d
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( BidirectionalIteratorConcept<WrappedIterator> ));$/;"	p	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:private	signature:( BidirectionalIteratorConcept<WrappedIterator> )
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( ForwardIteratorConcept<WrappedIterator> ));$/;"	p	class:boost::range_detail::any_forward_iterator_wrapper	access:private	signature:( ForwardIteratorConcept<WrappedIterator> )
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( IncrementableIteratorConcept<WrappedIterator> ));$/;"	p	class:boost::range_detail::any_incrementable_iterator_wrapper	access:private	signature:( IncrementableIteratorConcept<WrappedIterator> )
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessIteratorConcept<WrappedIterator> ));$/;"	p	class:boost::range_detail::any_random_access_iterator_wrapper	access:private	signature:( RandomAccessIteratorConcept<WrappedIterator> )
BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( SinglePassIteratorConcept<WrappedIterator> ));$/;"	p	class:boost::range_detail::any_single_pass_iterator_wrapper	access:private	signature:( SinglePassIteratorConcept<WrappedIterator> )
BOOST_RANGE_CONFIG_HPP	/usr/include/boost/range/config.hpp	12;"	d
BOOST_RANGE_CONST_ITERATOR_HPP	/usr/include/boost/range/const_iterator.hpp	12;"	d
BOOST_RANGE_CONST_REVERSE_ITERATOR_HPP	/usr/include/boost/range/const_reverse_iterator.hpp	12;"	d
BOOST_RANGE_COUNTING_RANGE_HPP_INCLUDED	/usr/include/boost/range/counting_range.hpp	10;"	d
BOOST_RANGE_DEDUCED_TYPENAME	/usr/include/boost/range/config.hpp	27;"	d
BOOST_RANGE_DEDUCED_TYPENAME	/usr/include/boost/range/config.hpp	30;"	d
BOOST_RANGE_DEDUCED_TYPENAME	/usr/include/boost/range/config.hpp	32;"	d
BOOST_RANGE_DEFINE_ADAPTOR_HPP_INCLUDED	/usr/include/boost/range/adaptor/define_adaptor.hpp	12;"	d
BOOST_RANGE_DETAIL_ANY_ITERATOR_BUFFER_HPP_INCLUDED	/usr/include/boost/range/detail/any_iterator_buffer.hpp	11;"	d
BOOST_RANGE_DETAIL_ANY_ITERATOR_HPP_INCLUDED	/usr/include/boost/range/detail/any_iterator.hpp	11;"	d
BOOST_RANGE_DETAIL_ANY_ITERATOR_INTERFACE_HPP_INCLUDED	/usr/include/boost/range/detail/any_iterator_interface.hpp	11;"	d
BOOST_RANGE_DETAIL_ANY_ITERATOR_WRAPPER_HPP_INCLUDED	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	11;"	d
BOOST_RANGE_DETAIL_AS_LITERAL_HPP	/usr/include/boost/range/detail/as_literal.hpp	12;"	d
BOOST_RANGE_DETAIL_BEGIN_HPP	/usr/include/boost/range/detail/begin.hpp	12;"	d
BOOST_RANGE_DETAIL_COMMON_HPP	/usr/include/boost/range/detail/common.hpp	12;"	d
BOOST_RANGE_DETAIL_CONST_ITERATOR_HPP	/usr/include/boost/range/detail/const_iterator.hpp	12;"	d
BOOST_RANGE_DETAIL_DEMOTE_ITERATOR_TRAVERSAL_TAG_HPP_INCLUDED	/usr/include/boost/range/detail/demote_iterator_traversal_tag.hpp	15;"	d
BOOST_RANGE_DETAIL_DETAIL_STR_HPP	/usr/include/boost/range/detail/detail_str.hpp	12;"	d
BOOST_RANGE_DETAIL_DIFFERENCE_TYPE_HPP	/usr/include/boost/range/detail/difference_type.hpp	12;"	d
BOOST_RANGE_DETAIL_EMPTY_HPP	/usr/include/boost/range/detail/empty.hpp	12;"	d
BOOST_RANGE_DETAIL_END_HPP	/usr/include/boost/range/detail/end.hpp	12;"	d
BOOST_RANGE_DETAIL_EXTRACT_OPTIONAL_TYPE_HPP_INCLUDED	/usr/include/boost/range/detail/extract_optional_type.hpp	11;"	d
BOOST_RANGE_DETAIL_IMPLEMENTATION_HELP_HPP	/usr/include/boost/range/detail/implementation_help.hpp	12;"	d
BOOST_RANGE_DETAIL_ITERATOR_HPP	/usr/include/boost/range/detail/iterator.hpp	12;"	d
BOOST_RANGE_DETAIL_JOIN_ITERATOR_HPP_INCLUDED	/usr/include/boost/range/detail/join_iterator.hpp	15;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE	/usr/include/boost/range/detail/microsoft.hpp	350;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_begin	/usr/include/boost/range/detail/microsoft.hpp	472;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_begin_const	/usr/include/boost/range/detail/microsoft.hpp	482;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_const_iterator	/usr/include/boost/range/detail/microsoft.hpp	453;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_end	/usr/include/boost/range/detail/microsoft.hpp	492;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_end_const	/usr/include/boost/range/detail/microsoft.hpp	502;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_fullname	/usr/include/boost/range/detail/microsoft.hpp	428;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_impl	/usr/include/boost/range/detail/microsoft.hpp	369;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	445;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_params	/usr/include/boost/range/detail/microsoft.hpp	419;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_params_op	/usr/include/boost/range/detail/microsoft.hpp	423;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_size	/usr/include/boost/range/detail/microsoft.hpp	514;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_size_type	/usr/include/boost/range/detail/microsoft.hpp	461;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_tag	/usr/include/boost/range/detail/microsoft.hpp	434;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_to_param_seq	/usr/include/boost/range/detail/microsoft.hpp	357;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_to_param_seq_op	/usr/include/boost/range/detail/microsoft.hpp	364;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE	/usr/include/boost/range/detail/microsoft.hpp	227;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_begin	/usr/include/boost/range/detail/microsoft.hpp	291;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_begin_const	/usr/include/boost/range/detail/microsoft.hpp	301;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_const_iterator	/usr/include/boost/range/detail/microsoft.hpp	272;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_end	/usr/include/boost/range/detail/microsoft.hpp	311;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_end_const	/usr/include/boost/range/detail/microsoft.hpp	321;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_fullname	/usr/include/boost/range/detail/microsoft.hpp	248;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	264;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_size	/usr/include/boost/range/detail/microsoft.hpp	333;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_size_type	/usr/include/boost/range/detail/microsoft.hpp	280;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_tag	/usr/include/boost/range/detail/microsoft.hpp	253;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_namespace_close	/usr/include/boost/range/detail/microsoft.hpp	213;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_namespace_close_op	/usr/include/boost/range/detail/microsoft.hpp	217;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_namespace_expand_op	/usr/include/boost/range/detail/microsoft.hpp	222;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_namespace_open	/usr/include/boost/range/detail/microsoft.hpp	204;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_namespace_open_op	/usr/include/boost/range/detail/microsoft.hpp	208;"	d
BOOST_RANGE_DETAIL_MICROSOFT_HPP	/usr/include/boost/range/detail/microsoft.hpp	2;"	d
BOOST_RANGE_DETAIL_MICROSOFT_RANGE_VERSION_1	/usr/include/boost/range/detail/microsoft.hpp	21;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_begin	/usr/include/boost/range/detail/microsoft.hpp	26;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_begin	/usr/include/boost/range/detail/microsoft.hpp	30;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_end	/usr/include/boost/range/detail/microsoft.hpp	27;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_end	/usr/include/boost/range/detail/microsoft.hpp	31;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	25;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	29;"	d
BOOST_RANGE_DETAIL_MISC_CONCEPT_HPP_INCLUDED	/usr/include/boost/range/detail/misc_concept.hpp	9;"	d
BOOST_RANGE_DETAIL_RANGE_RETURN_HPP_INCLUDED	/usr/include/boost/range/detail/range_return.hpp	10;"	d
BOOST_RANGE_DETAIL_REMOVE_BOUNDS_HPP	/usr/include/boost/range/detail/remove_extent.hpp	13;"	d
BOOST_RANGE_DETAIL_SFINAE_HPP	/usr/include/boost/range/detail/sfinae.hpp	12;"	d
BOOST_RANGE_DETAIL_SIZER_HPP	/usr/include/boost/range/detail/sizer.hpp	12;"	d
BOOST_RANGE_DETAIL_SIZE_HPP	/usr/include/boost/range/detail/size.hpp	13;"	d
BOOST_RANGE_DETAIL_SIZE_TYPE_HPP	/usr/include/boost/range/detail/size_type.hpp	12;"	d
BOOST_RANGE_DETAIL_STR_TYPES_HPP	/usr/include/boost/range/detail/str_types.hpp	12;"	d
BOOST_RANGE_DETAIL_VALUE_TYPE_HPP	/usr/include/boost/range/detail/value_type.hpp	12;"	d
BOOST_RANGE_DETAIL_VC6_END_HPP	/usr/include/boost/range/detail/vc6/end.hpp	12;"	d
BOOST_RANGE_DETAIL_VC6_SIZE_HPP	/usr/include/boost/range/detail/vc6/size.hpp	13;"	d
BOOST_RANGE_DIFFERENCE_TYPE_HPP	/usr/include/boost/range/difference_type.hpp	12;"	d
BOOST_RANGE_DISTANCE_HPP	/usr/include/boost/range/distance.hpp	12;"	d
BOOST_RANGE_EMPTY_HPP	/usr/include/boost/range/empty.hpp	12;"	d
BOOST_RANGE_ENABLE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	71;"	d
BOOST_RANGE_ENABLE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	76;"	d
BOOST_RANGE_ENABLE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	80;"	d
BOOST_RANGE_ENABLE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	86;"	d
BOOST_RANGE_END_HPP	/usr/include/boost/range/end.hpp	12;"	d
BOOST_RANGE_EXTRACT_OPTIONAL_TYPE	/usr/include/boost/range/detail/extract_optional_type.hpp	21;"	d
BOOST_RANGE_EXTRACT_OPTIONAL_TYPE	/usr/include/boost/range/detail/extract_optional_type.hpp	39;"	d
BOOST_RANGE_FUNCTIONS_HPP	/usr/include/boost/range/functions.hpp	12;"	d
BOOST_RANGE_HAS_ITERATOR_HPP_INCLUDED	/usr/include/boost/range/has_range_iterator.hpp	11;"	d
BOOST_RANGE_IRANGE_HPP_INCLUDED	/usr/include/boost/range/irange.hpp	12;"	d
BOOST_RANGE_ISTREAM_RANGE_HPP_INCLUDED	/usr/include/boost/range/istream_range.hpp	10;"	d
BOOST_RANGE_ITERATOR_HPP	/usr/include/boost/range/iterator.hpp	12;"	d
BOOST_RANGE_ITERATOR_RANGE_CORE_HPP_INCLUDED	/usr/include/boost/range/iterator_range_core.hpp	11;"	d
BOOST_RANGE_ITERATOR_RANGE_HPP_INCLUDED	/usr/include/boost/range/iterator_range.hpp	11;"	d
BOOST_RANGE_ITERATOR_RANGE_IO_HPP_INCLUDED	/usr/include/boost/range/iterator_range_io.hpp	11;"	d
BOOST_RANGE_JOIN_HPP_INCLUDED	/usr/include/boost/range/join.hpp	12;"	d
BOOST_RANGE_METAFUNCTIONS_HPP	/usr/include/boost/range/metafunctions.hpp	12;"	d
BOOST_RANGE_MFC_CONST_COL_RETURNS_NON_REF	/usr/include/boost/range/mfc.hpp	42;"	d
BOOST_RANGE_MFC_HAS_LEGACY_STRING	/usr/include/boost/range/mfc.hpp	33;"	d
BOOST_RANGE_MFC_HPP	/usr/include/boost/range/mfc.hpp	2;"	d
BOOST_RANGE_MFC_NO_CPAIR	/usr/include/boost/range/mfc.hpp	26;"	d
BOOST_RANGE_MUTABLE_ITERATOR_HPP	/usr/include/boost/range/mutable_iterator.hpp	12;"	d
BOOST_RANGE_NO_ARRAY_SUPPORT	/usr/include/boost/range/config.hpp	41;"	d
BOOST_RANGE_NO_STATIC_ASSERT	/usr/include/boost/range/config.hpp	46;"	d
BOOST_RANGE_NUMERIC_HPP	/usr/include/boost/range/numeric.hpp	27;"	d
BOOST_RANGE_POINTER_TYPE_HPP	/usr/include/boost/range/pointer.hpp	12;"	d
BOOST_RANGE_RBEGIN_HPP	/usr/include/boost/range/rbegin.hpp	12;"	d
BOOST_RANGE_REFERENCE_TYPE_HPP	/usr/include/boost/range/reference.hpp	12;"	d
BOOST_RANGE_REND_HPP	/usr/include/boost/range/rend.hpp	12;"	d
BOOST_RANGE_RESULT_ITERATOR_HPP	/usr/include/boost/range/result_iterator.hpp	12;"	d
BOOST_RANGE_REVERSE_ITERATOR_HPP	/usr/include/boost/range/reverse_iterator.hpp	12;"	d
BOOST_RANGE_REVERSE_RESULT_ITERATOR_HPP	/usr/include/boost/range/reverse_result_iterator.hpp	12;"	d
BOOST_RANGE_SAFE_BOOL_INCLUDED_HPP	/usr/include/boost/range/detail/safe_bool.hpp	11;"	d
BOOST_RANGE_SIZE_HPP	/usr/include/boost/range/size.hpp	12;"	d
BOOST_RANGE_SIZE_TYPE_HPP	/usr/include/boost/range/size_type.hpp	12;"	d
BOOST_RANGE_STRING_COLLECTION_TRAITS_HPP	/usr/include/boost/range/detail/collection_traits.hpp	23;"	d
BOOST_RANGE_STRING_DETAIL_COLLECTION_TRAITS_HPP	/usr/include/boost/range/detail/collection_traits_detail.hpp	11;"	d
BOOST_RANGE_SUB_RANGE_HPP	/usr/include/boost/range/sub_range.hpp	13;"	d
BOOST_RANGE_VALUE_TYPE_HPP	/usr/include/boost/range/value_type.hpp	12;"	d
BOOST_STATIC_ASSERT	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        BOOST_STATIC_ASSERT(( StackBufferSize > 0 ));$/;"	p	class:boost::any_iterator_buffer	access:private	signature:( StackBufferSize > 0 )
BOOST_STATIC_ASSERT	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        BOOST_STATIC_ASSERT(( StackBufferSize > 0 ));$/;"	p	class:boost::any_iterator_stack_only_buffer	access:private	signature:( StackBufferSize > 0 )
BOOST_STATIC_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_STATIC_ASSERT(( is_convertible<$/;"	p	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:( is_convertible< typename iterator_reference<WrappedIterator>::type , Reference >::value )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    BOOST_STATIC_CONSTANT($/;"	p	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( size_type, array_size=TraitsT::array_size )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( bool, value=$/;"	p	struct:boost::algorithm::detail::is_pair	access:public	signature:( bool, value= sizeof(is_pair_impl(t))==sizeof(yes_type) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = sizeof(T)\/sizeof(BaseT) );$/;"	p	struct:boost::algorithm::detail::array_traits_impl	access:public	signature:( size_type, array_size = sizeof(T)/sizeof(BaseT) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = sz );$/;"	p	struct:boost::algorithm::detail::array_traits	access:public	signature:( size_type, array_size = sz )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = traits_type::array_size );$/;"	p	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( size_type, array_size = traits_type::array_size )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = traits_type::array_size );$/;"	p	struct:boost::algorithm::detail::array_traits	access:public	signature:( size_type, array_size = traits_type::array_size )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_array_               = boost::is_array<C>::value );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_array_ = boost::is_array<C>::value )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_char_array_          = sizeof( boost::range_detail::is_char_array_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_char_array_ = sizeof( boost::range_detail::is_char_array_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_char_ptr_            = sizeof( boost::range_detail::is_char_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_char_ptr_ = sizeof( boost::range_detail::is_char_ptr_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_const_char_ptr_      = sizeof( boost::range_detail::is_const_char_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_const_char_ptr_ = sizeof( boost::range_detail::is_const_char_ptr_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_const_wchar_t_ptr_   = sizeof( boost::range_detail::is_const_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_const_wchar_t_ptr_ = sizeof( boost::range_detail::is_const_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_pair_                = sizeof( boost::range_detail::is_pair_impl( c ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_pair_ = sizeof( boost::range_detail::is_pair_impl( c ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_string_              = (boost::type_traits::ice_or<is_const_char_ptr_, is_const_wchar_t_ptr_>::value ));$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_string_ = (boost::type_traits::ice_or<is_const_char_ptr_, is_const_wchar_t_ptr_>::value ))
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_wchar_t_array_       = sizeof( boost::range_detail::is_wchar_t_array_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_wchar_t_array_ = sizeof( boost::range_detail::is_wchar_t_array_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_wchar_t_ptr_         = sizeof( boost::range_detail::is_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_wchar_t_ptr_ = sizeof( boost::range_detail::is_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/remove_extent.hpp	/^            BOOST_STATIC_CONSTANT(std::size_t, size = sizeof(*ar) \/ sizeof((*ar)[0]));$/;"	p	struct:boost::range_detail::remove_extent	access:public	signature:(std::size_t, size = sizeof(*ar) / sizeof((*ar)[0]))
BidirectionalIteratorConcept	/usr/include/boost/range/concepts.hpp	/^         struct BidirectionalIteratorConcept$/;"	s	namespace:boost::range_detail	inherits:ForwardIteratorConcept
BidirectionalRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct BidirectionalRangeConcept : ForwardRangeConcept<T>$/;"	s	namespace:boost	inherits:ForwardRangeConcept
Fn	/usr/include/boost/range/adaptor/replaced.hpp	/^            typedef replace_value< BOOST_DEDUCED_TYPENAME range_value<R>::type > Fn;$/;"	t	class:boost::range_detail::replaced_range	access:private
Fn	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            typedef replace_value_if< Pred, BOOST_DEDUCED_TYPENAME range_value<R>::type > Fn;$/;"	t	class:boost::range_detail::replaced_if_range	access:private
ForwardIteratorConcept	/usr/include/boost/range/concepts.hpp	/^        struct ForwardIteratorConcept$/;"	s	namespace:boost::range_detail	inherits:SinglePassIteratorConcept,DefaultConstructible
ForwardRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct ForwardRangeConcept : SinglePassRangeConcept<T>$/;"	s	namespace:boost	inherits:SinglePassRangeConcept
IncrementableIteratorConcept	/usr/include/boost/range/concepts.hpp	/^        struct IncrementableIteratorConcept : CopyConstructible<Iterator>$/;"	s	namespace:boost::range_detail	inherits:CopyConstructible
POSITION	/usr/include/boost/range/detail/microsoft.hpp	/^typedef __POSITION *POSITION;$/;"	t
RandomAccessIteratorConcept	/usr/include/boost/range/concepts.hpp	/^         struct RandomAccessIteratorConcept$/;"	s	namespace:boost::range_detail	inherits:BidirectionalIteratorConcept
RandomAccessRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct RandomAccessRangeConcept : BidirectionalRangeConcept<T>$/;"	s	namespace:boost	inherits:BidirectionalRangeConcept
SameTypeConcept	/usr/include/boost/range/detail/misc_concept.hpp	/^        class SameTypeConcept$/;"	c	namespace:boost::range_detail
SinglePassIteratorConcept	/usr/include/boost/range/concepts.hpp	/^        struct SinglePassIteratorConcept$/;"	s	namespace:boost::range_detail	inherits:IncrementableIteratorConcept,EqualityComparable
SinglePassRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct SinglePassRangeConcept$/;"	s	namespace:boost
WriteableBidirectionalRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct WriteableBidirectionalRangeConcept$/;"	s	namespace:boost	inherits:BidirectionalRangeConcept,WriteableRangeConcept
WriteableForwardRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct WriteableForwardRangeConcept$/;"	s	namespace:boost	inherits:ForwardRangeConcept,WriteableRangeConcept
WriteableRandomAccessRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct WriteableRandomAccessRangeConcept$/;"	s	namespace:boost	inherits:RandomAccessRangeConcept,WriteableRangeConcept
WriteableRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct WriteableRangeConcept$/;"	s	namespace:boost
a	/usr/include/boost/range/detail/misc_concept.hpp	/^            T1 a;$/;"	m	class:boost::range_detail::SameTypeConcept	access:private
abstract_base_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            >::type abstract_base_type;$/;"	t	class:boost::range_detail::any_iterator	access:private
abstract_value_type	/usr/include/boost/range/iterator_range_core.hpp	/^                                 reference, value_type >::type abstract_value_type;$/;"	t	class:boost::iterator_range	access:private
accumulate	/usr/include/boost/range/numeric.hpp	/^    inline Value accumulate( const SinglePassRange& rng, Value init )$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, Value init )
accumulate	/usr/include/boost/range/numeric.hpp	/^    inline Value accumulate( const SinglePassRange& rng, Value init, BinaryOperation op )$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, Value init, BinaryOperation op )
adaptors	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/copied.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/filtered.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/indexed.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/indirected.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/map.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/replaced.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/replaced_if.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/reversed.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/sliced.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/strided.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/tokenized.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/transformed.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/type_erased.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adaptors	/usr/include/boost/range/adaptor/uniqued.hpp	/^    namespace adaptors$/;"	n	namespace:boost
adjacent_difference	/usr/include/boost/range/numeric.hpp	/^    inline OutputIterator adjacent_difference ( const SinglePassRange& rng,$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, OutputIterator result )
adjacent_difference	/usr/include/boost/range/numeric.hpp	/^    inline OutputIterator adjacent_difference ( const SinglePassRange& rng,$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, OutputIterator result, BinaryOperation op )
adjacent_excl_holder	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            adjacent_excl_holder( T r ) : holder<T>(r)$/;"	f	struct:boost::range_detail::adjacent_excl_holder	access:public	signature:( T r )
adjacent_excl_holder	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        struct adjacent_excl_holder : holder<T>$/;"	s	namespace:boost::range_detail	inherits:holder
adjacent_filter	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        adjacent_filter(ForwardRng& rng, BinPredicate filter_pred)$/;"	f	namespace:boost::adaptors	signature:(ForwardRng& rng, BinPredicate filter_pred)
adjacent_filter	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        adjacent_filter(const ForwardRng& rng, BinPredicate filter_pred)$/;"	f	namespace:boost::adaptors	signature:(const ForwardRng& rng, BinPredicate filter_pred)
adjacent_filtered	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^                adjacent_filtered =$/;"	m	namespace:boost::adaptors::__anon1
adjacent_filtered_excl	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^                adjacent_filtered_excl =$/;"	m	namespace:boost::adaptors::__anon1
adjacent_filtered_range	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            adjacent_filtered_range( const P& p, R& r )$/;"	f	struct:boost::range_detail::adjacent_filtered_range	access:public	signature:( const P& p, R& r )
adjacent_filtered_range	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        struct adjacent_filtered_range$/;"	s	namespace:boost::range_detail	inherits:iterator_range
adjacent_find	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^adjacent_find(ForwardRange & rng)$/;"	f	namespace:boost::range	signature:(ForwardRange & rng)
adjacent_find	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^adjacent_find(ForwardRange & rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange & rng, BinaryPredicate pred)
adjacent_find	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^adjacent_find(ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, BinaryPredicate pred)
adjacent_find	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^adjacent_find(const ForwardRange& rng)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng)
adjacent_find	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^adjacent_find(const ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, BinaryPredicate pred)
adjacent_holder	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            adjacent_holder( T r ) : holder<T>(r)$/;"	f	struct:boost::range_detail::adjacent_holder	access:public	signature:( T r )
adjacent_holder	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        struct adjacent_holder : holder<T>$/;"	s	namespace:boost::range_detail	inherits:holder
adl_begin	/usr/include/boost/range/iterator_range_core.hpp	/^            static IteratorT adl_begin( ForwardRange& r )$/;"	f	struct:boost::iterator_range_detail::iterator_range_impl	access:public	signature:( ForwardRange& r )
adl_end	/usr/include/boost/range/iterator_range_core.hpp	/^            static IteratorT adl_end( ForwardRange& r )$/;"	f	struct:boost::iterator_range_detail::iterator_range_impl	access:public	signature:( ForwardRange& r )
advance	/usr/include/boost/range/adaptor/indexed.hpp	/^            void advance( index_type n )$/;"	f	class:boost::range_detail::indexed_iterator	access:private	signature:( index_type n )
advance	/usr/include/boost/range/adaptor/strided.hpp	/^            void advance(difference_type offset)$/;"	f	class:boost::range_detail::strided_iterator	access:private	signature:(difference_type offset)
advance	/usr/include/boost/range/detail/any_iterator.hpp	/^            void advance(Difference offset)$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:(Difference offset)
advance	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual void advance(Difference offset) = 0;$/;"	p	struct:boost::range_detail::any_random_access_iterator_interface	access:public	signature:(Difference offset)
advance	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void advance(Difference offset)$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:(Difference offset)
advance	/usr/include/boost/range/detail/join_iterator.hpp	/^    void advance(typename join_iterator::difference_type offset)$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:(typename join_iterator::difference_type offset)
advance	/usr/include/boost/range/irange.hpp	/^            void advance(difference_type offset)$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:(difference_type offset)
advance	/usr/include/boost/range/irange.hpp	/^            void advance(difference_type offset)$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:(difference_type offset)
advance_begin	/usr/include/boost/range/iterator_range_core.hpp	/^           iterator_range& advance_begin( difference_type n )$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type n )
advance_end	/usr/include/boost/range/iterator_range_core.hpp	/^           iterator_range& advance_end( difference_type n )$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type n )
advance_from_range1	/usr/include/boost/range/detail/join_iterator.hpp	/^    void advance_from_range1(typename join_iterator::difference_type offset)$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:(typename join_iterator::difference_type offset)
advance_from_range2	/usr/include/boost/range/detail/join_iterator.hpp	/^    void advance_from_range2(typename join_iterator::difference_type offset)$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:(typename join_iterator::difference_type offset)
algorithm	/usr/include/boost/range/detail/collection_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
allocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void* allocate(std::size_t bytes)$/;"	f	class:boost::any_iterator_buffer	access:public	signature:(std::size_t bytes)
allocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void* allocate(std::size_t bytes)$/;"	f	class:boost::any_iterator_heap_only_buffer	access:public	signature:(std::size_t bytes)
allocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void* allocate(std::size_t bytes)$/;"	f	class:boost::any_iterator_stack_only_buffer	access:public	signature:(std::size_t bytes)
any_bidirectional_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_bidirectional_iterator_interface$/;"	s	namespace:boost::range_detail	inherits:any_forward_iterator_interface
any_bidirectional_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            any_bidirectional_iterator_wrapper()$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:()
any_bidirectional_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            explicit any_bidirectional_iterator_wrapper(const WrappedIterator& it)$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:(const WrappedIterator& it)
any_bidirectional_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        class any_bidirectional_iterator_wrapper$/;"	c	namespace:boost::range_detail	inherits:any_bidirectional_iterator_interface
any_forward_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_forward_iterator_interface$/;"	s	namespace:boost::range_detail	inherits:any_single_pass_iterator_interface
any_forward_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            any_forward_iterator_wrapper()$/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:()
any_forward_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            explicit any_forward_iterator_wrapper(const WrappedIterator& it)$/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:(const WrappedIterator& it)
any_forward_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        class any_forward_iterator_wrapper$/;"	c	namespace:boost::range_detail	inherits:any_forward_iterator_interface
any_incrementable_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_incrementable_iterator_interface$/;"	s	namespace:boost::range_detail
any_incrementable_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            any_incrementable_iterator_wrapper()$/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:()
any_incrementable_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            explicit any_incrementable_iterator_wrapper(wrapped_type it)$/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:(wrapped_type it)
any_incrementable_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        class any_incrementable_iterator_wrapper$/;"	c	namespace:boost::range_detail	inherits:any_incrementable_iterator_interface
any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator()$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:()
any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator(const any_iterator& other)$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:(const any_iterator& other)
any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator(const any_iterator<$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:(const any_iterator< OtherValue , OtherTraversal , OtherReference , OtherDifference , Buffer >& other, typename enable_if< typename is_convertible_to_value_as_reference< OtherReference , Reference >::type, enabler >::type* = 0 )
any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator(const any_iterator<$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:(const any_iterator< OtherValue , OtherTraversal , OtherReference , OtherDifference , Buffer >& other, typename enable_if< typename mpl::or_< typename mpl::and_< typename is_mutable_reference<OtherReference>::type, typename is_mutable_reference<Reference>::type >::type, typename mpl::and_< typename is_const_reference<OtherReference>::type, typename is_const_reference<Reference>::type >::type >::type, enabler >::type* = 0 )
any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator(const any_iterator<$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:(const any_iterator< OtherValue, OtherTraversal, OtherReference, OtherDifference, Buffer >& other, typename enable_if< typename mpl::and_< typename is_mutable_reference<OtherReference>::type, typename is_const_reference<Reference>::type >::type, enabler >::type* = 0 )
any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            explicit any_iterator($/;"	f	class:boost::range_detail::any_iterator	access:public	signature:( const WrappedIterator& wrapped_iterator, typename disable_if< typename is_any_iterator<WrappedIterator>::type , disabler >::type* = 0 )
any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^        class any_iterator$/;"	c	namespace:boost::range_detail	inherits:iterator_facade
any_iterator_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        any_iterator_buffer()$/;"	f	class:boost::any_iterator_buffer	access:public	signature:()
any_iterator_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        any_iterator_buffer(const any_iterator_buffer&);$/;"	p	class:boost::any_iterator_buffer	access:private	signature:(const any_iterator_buffer&)
any_iterator_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^    class any_iterator_buffer$/;"	c	namespace:boost	inherits:noncopyable
any_iterator_default_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^    typedef any_iterator_buffer<64> any_iterator_default_buffer;$/;"	t	namespace:boost
any_iterator_heap_only_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        any_iterator_heap_only_buffer()$/;"	f	class:boost::any_iterator_heap_only_buffer	access:public	signature:()
any_iterator_heap_only_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^    class any_iterator_heap_only_buffer$/;"	c	namespace:boost	inherits:noncopyable
any_iterator_interface_type_generator	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_iterator_interface_type_generator<$/;"	s	namespace:boost::range_detail
any_iterator_stack_only_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^    class any_iterator_stack_only_buffer$/;"	c	namespace:boost
any_iterator_type	/usr/include/boost/range/detail/any_iterator.hpp	/^                    > any_iterator_type;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:private
any_iterator_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            > any_iterator_type;$/;"	t	class:boost::detail::postfix_increment_proxy	access:private
any_iterator_wrapper_type_generator	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        struct any_iterator_wrapper_type_generator<$/;"	s	namespace:boost::range_detail
any_random_access_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_random_access_iterator_interface$/;"	s	namespace:boost::range_detail	inherits:any_bidirectional_iterator_interface
any_random_access_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            any_random_access_iterator_wrapper()$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:()
any_random_access_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            explicit any_random_access_iterator_wrapper(const WrappedIterator& other)$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:(const WrappedIterator& other)
any_random_access_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        class any_random_access_iterator_wrapper$/;"	c	namespace:boost::range_detail	inherits:any_random_access_iterator_interface
any_range	/usr/include/boost/range/any_range.hpp	/^            any_range()$/;"	f	class:boost::range_detail::any_range	access:public	signature:()
any_range	/usr/include/boost/range/any_range.hpp	/^            any_range(Iterator first, Iterator last)$/;"	f	class:boost::range_detail::any_range	access:public	signature:(Iterator first, Iterator last)
any_range	/usr/include/boost/range/any_range.hpp	/^            any_range(WrappedRange& wrapped_range)$/;"	f	class:boost::range_detail::any_range	access:public	signature:(WrappedRange& wrapped_range)
any_range	/usr/include/boost/range/any_range.hpp	/^            any_range(const WrappedRange& wrapped_range)$/;"	f	class:boost::range_detail::any_range	access:public	signature:(const WrappedRange& wrapped_range)
any_range	/usr/include/boost/range/any_range.hpp	/^            any_range(const any_range& other)$/;"	f	class:boost::range_detail::any_range	access:public	signature:(const any_range& other)
any_range	/usr/include/boost/range/any_range.hpp	/^            any_range(const any_range<$/;"	f	class:boost::range_detail::any_range	access:public	signature:(const any_range< OtherValue , OtherTraversal , OtherReference , OtherDifference , Buffer >& other)
any_range	/usr/include/boost/range/any_range.hpp	/^        class any_range$/;"	c	namespace:boost::range_detail	inherits:iterator_range
any_range_default_help	/usr/include/boost/range/any_range.hpp	/^        struct any_range_default_help$/;"	s	namespace:boost::range_detail	inherits:mpl::eval_if
any_range_type_generator	/usr/include/boost/range/any_range.hpp	/^        struct any_range_type_generator$/;"	s	namespace:boost::range_detail
any_range_value_type	/usr/include/boost/range/any_range.hpp	/^        struct any_range_value_type$/;"	s	namespace:boost::range_detail
any_single_pass_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_single_pass_iterator_interface$/;"	s	namespace:boost::range_detail	inherits:any_incrementable_iterator_interface
any_single_pass_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            any_single_pass_iterator_wrapper()$/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:()
any_single_pass_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            explicit any_single_pass_iterator_wrapper(const WrappedIterator& it)$/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:(const WrappedIterator& it)
any_single_pass_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        class any_single_pass_iterator_wrapper$/;"	c	namespace:boost::range_detail	inherits:any_single_pass_iterator_interface
apply	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                struct apply$/;"	s	struct:boost::algorithm::detail::array_traits_select	access:public
ar	/usr/include/boost/range/detail/remove_extent.hpp	/^            static T* ar;$/;"	m	struct:boost::range_detail::remove_extent	access:public
argument_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_reference<Map>::type argument_type;$/;"	t	struct:boost::range_detail::select_second_mutable	access:public
argument_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_reference<const Map>::type argument_type;$/;"	t	struct:boost::range_detail::select_first	access:public
argument_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_reference<const Map>::type argument_type;$/;"	t	struct:boost::range_detail::select_second_const	access:public
array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<4>::type    array_;$/;"	t	namespace:boost::range_detail
array_base_types	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                >::type array_base_types;$/;"	t	struct:boost::algorithm::detail::array_traits_selector	access:private
array_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_container_traits$/;"	s	namespace:boost::algorithm::detail
array_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
array_functions	/usr/include/boost/range/detail/microsoft.hpp	/^    struct array_functions$/;"	s	namespace:boost::range_detail_microsoft
array_length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                struct array_length$/;"	s	struct:boost::algorithm::detail::array_length_selector	access:public
array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector$/;"	s	namespace:boost::algorithm::detail
array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector<char>$/;"	s	namespace:boost::algorithm::detail
array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector<wchar_t>$/;"	s	namespace:boost::algorithm::detail
array_length_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        BOOST_NESTED_TEMPLATE array_length<traits_type> array_length_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    pair_t >::type array_t;$/;"	t	class:boost::range_detail::range	access:private
array_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits$/;"	s	namespace:boost::algorithm::detail
array_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits<T[sz]>$/;"	s	namespace:boost::algorithm::detail
array_traits_cv_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_cv_selector$/;"	s	namespace:boost::algorithm::detail
array_traits_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_impl$/;"	s	namespace:boost::algorithm::detail
array_traits_impl_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_impl_selector$/;"	s	namespace:boost::algorithm::detail
array_traits_select	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_select$/;"	s	namespace:boost::algorithm::detail
array_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_selector $/;"	s	namespace:boost::algorithm::detail
array_traits_void	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_void$/;"	s	namespace:boost::algorithm::detail
as_array	/usr/include/boost/range/as_array.hpp	/^    as_array( R& r )$/;"	f	namespace:boost	signature:( R& r )
as_array	/usr/include/boost/range/as_array.hpp	/^    as_array( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
as_literal	/usr/include/boost/range/as_literal.hpp	/^    as_literal( Range& r )$/;"	f	namespace:boost	signature:( Range& r )
as_literal	/usr/include/boost/range/as_literal.hpp	/^    as_literal( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
as_literal	/usr/include/boost/range/detail/as_literal.hpp	/^    as_literal( Range& r )$/;"	f	namespace:boost	signature:( Range& r )
atl_array_functions	/usr/include/boost/range/atl.hpp	/^    struct atl_array_functions :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
atl_rb_tree_tag	/usr/include/boost/range/atl.hpp	/^    struct atl_rb_tree_tag$/;"	s	namespace:boost::range_detail_microsoft
atl_string_tag	/usr/include/boost/range/atl.hpp	/^    struct atl_string_tag$/;"	s	namespace:boost::range_detail_microsoft
b	/usr/include/boost/range/detail/misc_concept.hpp	/^            T2 b;$/;"	m	class:boost::range_detail::SameTypeConcept	access:private
back	/usr/include/boost/range/iterator_range_core.hpp	/^           reference back() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
back	/usr/include/boost/range/sub_range.hpp	/^        const_reference back() const$/;"	f	class:boost::sub_range	access:public	signature:() const
back	/usr/include/boost/range/sub_range.hpp	/^        reference back()$/;"	f	class:boost::sub_range	access:public	signature:()
bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
base	/usr/include/boost/range/adaptor/filtered.hpp	/^                    > base;$/;"	t	struct:boost::range_detail::filtered_range	access:private
base	/usr/include/boost/range/adaptor/indexed.hpp	/^                  base;$/;"	t	class:boost::range_detail::indexed_iterator	access:private
base	/usr/include/boost/range/adaptor/indexed.hpp	/^                base;$/;"	t	struct:boost::range_detail::indexed_range	access:private
base	/usr/include/boost/range/adaptor/indirected.hpp	/^                base;$/;"	t	struct:boost::range_detail::indirected_range	access:private
base	/usr/include/boost/range/adaptor/map.hpp	/^            typedef transformed_range<select_first<StdPairRng>, const StdPairRng> base;$/;"	t	class:boost::range_detail::select_first_range	access:private
base	/usr/include/boost/range/adaptor/map.hpp	/^            typedef transformed_range<select_second_const<StdPairRng>, const StdPairRng> base;$/;"	t	class:boost::range_detail::select_second_const_range	access:private
base	/usr/include/boost/range/adaptor/map.hpp	/^            typedef transformed_range<select_second_mutable<StdPairRng>, StdPairRng> base;$/;"	t	class:boost::range_detail::select_second_mutable_range	access:private
base	/usr/include/boost/range/adaptor/reversed.hpp	/^                base;$/;"	t	struct:boost::range_detail::reversed_range	access:private
base	/usr/include/boost/range/adaptor/tokenized.hpp	/^                base;$/;"	t	struct:boost::range_detail::tokenized_range	access:private
base	/usr/include/boost/range/adaptor/transformed.hpp	/^                base;$/;"	t	struct:boost::range_detail::transformed_range	access:private
base	/usr/include/boost/range/adaptor/uniqued.hpp	/^            typedef adjacent_filtered_range<unique_not_equal_to, ForwardRng, true> base;$/;"	t	class:boost::range_detail::uniqued_range	access:private
base	/usr/include/boost/range/sub_range.hpp	/^        typedef iterator_range< iterator_t  > base;$/;"	t	class:boost::sub_range	access:private
base_begin	/usr/include/boost/range/adaptor/strided.hpp	/^            base_iterator base_begin() const { return m_first; }$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:() const
base_end	/usr/include/boost/range/adaptor/strided.hpp	/^            base_iterator base_end() const { return m_last; }$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:() const
base_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            typedef BaseIterator base_iterator;$/;"	t	class:boost::range_detail::strided_iterator	access:public
base_range	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^                base_range;$/;"	t	struct:boost::range_detail::adjacent_filtered_range	access:private
base_t	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^                    > base_t;$/;"	t	class:boost::range_detail::skip_iterator	access:private
base_t	/usr/include/boost/range/adaptor/replaced.hpp	/^                    BOOST_DEDUCED_TYPENAME range_iterator<R>::type > > base_t;$/;"	t	class:boost::range_detail::replaced_range	access:private
base_t	/usr/include/boost/range/adaptor/replaced_if.hpp	/^                    BOOST_DEDUCED_TYPENAME range_iterator<R>::type > > base_t;$/;"	t	class:boost::range_detail::replaced_if_range	access:private
base_t	/usr/include/boost/range/adaptor/sliced.hpp	/^            typedef boost::iterator_range< BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type > base_t;$/;"	t	class:boost::adaptors::sliced_range	access:private
base_t	/usr/include/boost/range/combine.hpp	/^            typedef iterator_range<zip_iter_t>               base_t;$/;"	t	struct:boost::range_detail::zip_rng	access:private
base_t	/usr/include/boost/range/combine.hpp	/^            typedef iterator_range<zip_iter_t> base_t;$/;"	t	struct:boost::range_detail::zip_range	access:private
base_t	/usr/include/boost/range/combine.hpp	/^            typedef iterator_range<zip_iter_t> base_t;$/;"	t	struct:boost::range_detail::zip_range3	access:private
base_t	/usr/include/boost/range/irange.hpp	/^                    > base_t;$/;"	t	class:boost::range_detail::integer_iterator	access:private
base_t	/usr/include/boost/range/irange.hpp	/^                    > base_t;$/;"	t	class:boost::range_detail::integer_iterator_with_step	access:private
base_t	/usr/include/boost/range/irange.hpp	/^        typedef iterator_range<iterator_t> base_t;$/;"	t	class:boost::integer_range	access:private
base_t	/usr/include/boost/range/irange.hpp	/^        typedef iterator_range<iterator_t> base_t;$/;"	t	class:boost::strided_integer_range	access:private
base_t	/usr/include/boost/range/join.hpp	/^                    SinglePassRange1, SinglePassRange2>::type base_t;$/;"	t	class:boost::range::joined_range	access:private
base_type	/usr/include/boost/range/any_range.hpp	/^                    > base_type;$/;"	t	class:boost::range_detail::any_range	access:private
base_type	/usr/include/boost/range/detail/any_iterator.hpp	/^                  > base_type;$/;"	t	class:boost::range_detail::any_iterator	access:private
begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x) \/\/ redefine$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::indirected_list_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/atl.hpp	/^        typename mutable_<Iterator, X>::type begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
begin	/usr/include/boost/range/begin.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<T>::type begin( T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( T& r )
begin	/usr/include/boost/range/begin.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<const T>::type begin( const T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( const T& r )
begin	/usr/include/boost/range/combine.hpp	/^                static BOOST_DEDUCED_TYPENAME ::boost::tuples::element<N,tuple_t>::type begin( Z& z, R& )$/;"	f	struct:boost::range_detail::zip_rng::get	access:public	signature:( Z& z, R& )
begin	/usr/include/boost/range/combine.hpp	/^            static type begin( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )$/;"	f	struct:boost::range_detail::generate_tuple	access:public	signature:( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )
begin	/usr/include/boost/range/detail/begin.hpp	/^        begin( C& c )$/;"	f	namespace:boost::range_adl_barrier	signature:( C& c )
begin	/usr/include/boost/range/detail/collection_traits.hpp	/^        begin( C& c )$/;"	f	namespace:boost::algorithm	signature:( C& c )
begin	/usr/include/boost/range/detail/collection_traits.hpp	/^        begin( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
begin	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::array_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::list_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/iterator_range_core.hpp	/^            IteratorT begin() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_map_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/mfc.hpp	/^        typename mutable_<Iterator, X>::type begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
begin	/usr/include/boost/range/sub_range.hpp	/^        const_iterator  begin() const    { return base::begin(); }$/;"	f	class:boost::sub_range	access:public	signature:() const
begin	/usr/include/boost/range/sub_range.hpp	/^        iterator        begin()          { return base::begin(); }$/;"	f	class:boost::sub_range	access:public	signature:()
begin_of	/usr/include/boost/range/detail/microsoft.hpp	/^    begin_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
begin_of	/usr/include/boost/range/detail/microsoft.hpp	/^    begin_of(T& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T& x)
binary_search	/usr/include/boost/range/algorithm/binary_search.hpp	/^inline bool binary_search(const ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val)
binary_search	/usr/include/boost/range/algorithm/binary_search.hpp	/^inline bool binary_search(const ForwardRange& rng, const Value& val,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val, BinaryPredicate pred)
boost	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/copied.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/filtered.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/indexed.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/indirected.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/map.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/replaced.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/replaced_if.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/reversed.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/sliced.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/strided.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/tokenized.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/transformed.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/type_erased.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/adaptor/uniqued.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/binary_search.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/copy.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/copy_backward.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/count.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/count_if.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/equal.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/equal_range.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/fill.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/fill_n.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/find.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/find_end.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/find_first_of.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/find_if.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/for_each.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/generate.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/inplace_merge.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/lexicographical_compare.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/lower_bound.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/max_element.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/merge.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/min_element.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/mismatch.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/nth_element.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/partial_sort.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/partition.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/permutation.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/random_shuffle.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/remove.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/remove_copy.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/remove_copy_if.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/remove_if.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/replace.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/replace_copy.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/replace_copy_if.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/replace_if.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/reverse.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/reverse_copy.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/rotate.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/rotate_copy.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/search.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/search_n.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/sort.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/stable_partition.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/stable_sort.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/transform.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/unique.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/unique_copy.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm/upper_bound.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm_ext/copy_n.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm_ext/erase.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm_ext/insert.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm_ext/iota.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm_ext/is_sorted.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm_ext/overwrite.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm_ext/push_back.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/algorithm_ext/push_front.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/any_range.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/as_array.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/as_literal.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/atl.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n
boost	/usr/include/boost/range/atl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/range/begin.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/category.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/combine.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/concepts.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/range/const_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/const_reverse_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/counting_range.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/any_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/as_literal.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/begin.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/collection_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/range/detail/common.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/const_iterator.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/demote_iterator_traversal_tag.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/detail_str.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/difference_type.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/empty.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/end.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/extract_optional_type.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/range/detail/implementation_help.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/iterator.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/join_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/microsoft.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n
boost	/usr/include/boost/range/detail/misc_concept.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/range_return.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/remove_extent.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/safe_bool.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/sfinae.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/size.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/size_type.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/sizer.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/str_types.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/value_type.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/vc6/end.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/vc6/size.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/difference_type.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/distance.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/empty.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/end.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/has_range_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/irange.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/istream_range.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/iterator_range_core.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/iterator_range_io.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/join.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/mfc.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n
boost	/usr/include/boost/range/mutable_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/numeric.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/pointer.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/rbegin.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/reference.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/rend.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/result_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/reverse_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/reverse_result_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/size.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/size_type.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/sub_range.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/value_type.hpp	/^namespace boost$/;"	n
boost::BidirectionalRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct BidirectionalRangeConcept : ForwardRangeConcept<T>$/;"	s	namespace:boost	inherits:ForwardRangeConcept
boost::BidirectionalRangeConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((BidirectionalIteratorConcept<BOOST_DEDUCED_TYPENAME BidirectionalRangeConcept::const_iterator>));$/;"	p	struct:boost::BidirectionalRangeConcept	access:public	signature:(BidirectionalIteratorConcept<BOOST_DEDUCED_TYPENAME BidirectionalRangeConcept::const_iterator>)
boost::BidirectionalRangeConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((BidirectionalIteratorConcept<BOOST_DEDUCED_TYPENAME BidirectionalRangeConcept::iterator>));$/;"	p	struct:boost::BidirectionalRangeConcept	access:public	signature:(BidirectionalIteratorConcept<BOOST_DEDUCED_TYPENAME BidirectionalRangeConcept::iterator>)
boost::ForwardRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct ForwardRangeConcept : SinglePassRangeConcept<T>$/;"	s	namespace:boost	inherits:SinglePassRangeConcept
boost::ForwardRangeConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((range_detail::ForwardIteratorConcept<BOOST_DEDUCED_TYPENAME ForwardRangeConcept::const_iterator>));$/;"	p	struct:boost::ForwardRangeConcept	access:public	signature:(range_detail::ForwardIteratorConcept<BOOST_DEDUCED_TYPENAME ForwardRangeConcept::const_iterator>)
boost::ForwardRangeConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((range_detail::ForwardIteratorConcept<BOOST_DEDUCED_TYPENAME ForwardRangeConcept::iterator>));$/;"	p	struct:boost::ForwardRangeConcept	access:public	signature:(range_detail::ForwardIteratorConcept<BOOST_DEDUCED_TYPENAME ForwardRangeConcept::iterator>)
boost::RandomAccessRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct RandomAccessRangeConcept : BidirectionalRangeConcept<T>$/;"	s	namespace:boost	inherits:BidirectionalRangeConcept
boost::RandomAccessRangeConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((RandomAccessIteratorConcept<BOOST_DEDUCED_TYPENAME RandomAccessRangeConcept::const_iterator>));$/;"	p	struct:boost::RandomAccessRangeConcept	access:public	signature:(RandomAccessIteratorConcept<BOOST_DEDUCED_TYPENAME RandomAccessRangeConcept::const_iterator>)
boost::RandomAccessRangeConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^        BOOST_RANGE_CONCEPT_ASSERT((RandomAccessIteratorConcept<BOOST_DEDUCED_TYPENAME RandomAccessRangeConcept::iterator>));$/;"	p	struct:boost::RandomAccessRangeConcept	access:public	signature:(RandomAccessIteratorConcept<BOOST_DEDUCED_TYPENAME RandomAccessRangeConcept::iterator>)
boost::SinglePassRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct SinglePassRangeConcept$/;"	s	namespace:boost
boost::SinglePassRangeConcept::BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)$/;"	f	struct:boost::SinglePassRangeConcept	access:public	signature:(SinglePassRangeConcept)
boost::SinglePassRangeConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^         BOOST_RANGE_CONCEPT_ASSERT((range_detail::SinglePassIteratorConcept<const_iterator>));$/;"	p	struct:boost::SinglePassRangeConcept	access:public	signature:(range_detail::SinglePassIteratorConcept<const_iterator>)
boost::SinglePassRangeConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^         BOOST_RANGE_CONCEPT_ASSERT((range_detail::SinglePassIteratorConcept<iterator>));$/;"	p	struct:boost::SinglePassRangeConcept	access:public	signature:(range_detail::SinglePassIteratorConcept<iterator>)
boost::SinglePassRangeConcept::const_constraints	/usr/include/boost/range/concepts.hpp	/^        void const_constraints(const T& const_range)$/;"	f	struct:boost::SinglePassRangeConcept	access:private	signature:(const T& const_range)
boost::SinglePassRangeConcept::const_iterator	/usr/include/boost/range/concepts.hpp	/^         typedef BOOST_DEDUCED_TYPENAME range_iterator<T const>::type  const_iterator;$/;"	t	struct:boost::SinglePassRangeConcept	access:public
boost::SinglePassRangeConcept::iterator	/usr/include/boost/range/concepts.hpp	/^         typedef BOOST_DEDUCED_TYPENAME range_iterator<T>::type        iterator;$/;"	t	struct:boost::SinglePassRangeConcept	access:public
boost::SinglePassRangeConcept::m_range	/usr/include/boost/range/concepts.hpp	/^       T* m_range;$/;"	m	struct:boost::SinglePassRangeConcept	access:private
boost::WriteableBidirectionalRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct WriteableBidirectionalRangeConcept$/;"	s	namespace:boost	inherits:BidirectionalRangeConcept,WriteableRangeConcept
boost::WriteableForwardRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct WriteableForwardRangeConcept$/;"	s	namespace:boost	inherits:ForwardRangeConcept,WriteableRangeConcept
boost::WriteableRandomAccessRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct WriteableRandomAccessRangeConcept$/;"	s	namespace:boost	inherits:RandomAccessRangeConcept,WriteableRangeConcept
boost::WriteableRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct WriteableRangeConcept$/;"	s	namespace:boost
boost::WriteableRangeConcept::BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^        BOOST_CONCEPT_USAGE(WriteableRangeConcept)$/;"	f	struct:boost::WriteableRangeConcept	access:public	signature:(WriteableRangeConcept)
boost::WriteableRangeConcept::i	/usr/include/boost/range/concepts.hpp	/^        iterator i;$/;"	m	struct:boost::WriteableRangeConcept	access:private
boost::WriteableRangeConcept::iterator	/usr/include/boost/range/concepts.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<Range>::type iterator;$/;"	t	struct:boost::WriteableRangeConcept	access:public
boost::WriteableRangeConcept::v	/usr/include/boost/range/concepts.hpp	/^        BOOST_DEDUCED_TYPENAME range_value<Range>::type v;$/;"	m	struct:boost::WriteableRangeConcept	access:private
boost::accumulate	/usr/include/boost/range/numeric.hpp	/^    inline Value accumulate( const SinglePassRange& rng, Value init )$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, Value init )
boost::accumulate	/usr/include/boost/range/numeric.hpp	/^    inline Value accumulate( const SinglePassRange& rng, Value init, BinaryOperation op )$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, Value init, BinaryOperation op )
boost::adaptors	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/copied.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/filtered.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/indexed.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/indirected.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/map.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/replaced.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/replaced_if.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/reversed.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/sliced.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/strided.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/tokenized.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/transformed.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/type_erased.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors	/usr/include/boost/range/adaptor/uniqued.hpp	/^    namespace adaptors$/;"	n	namespace:boost
boost::adaptors::__anon10::transformed	/usr/include/boost/range/adaptor/transformed.hpp	/^                    transformed =$/;"	m	namespace:boost::adaptors::__anon10
boost::adaptors::__anon11::uniqued	/usr/include/boost/range/adaptor/uniqued.hpp	/^            const range_detail::unique_forwarder uniqued =$/;"	m	namespace:boost::adaptors::__anon11
boost::adaptors::__anon1::adjacent_filtered	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^                adjacent_filtered =$/;"	m	namespace:boost::adaptors::__anon1
boost::adaptors::__anon1::adjacent_filtered_excl	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^                adjacent_filtered_excl =$/;"	m	namespace:boost::adaptors::__anon1
boost::adaptors::__anon2::filtered	/usr/include/boost/range/adaptor/filtered.hpp	/^                    filtered =$/;"	m	namespace:boost::adaptors::__anon2
boost::adaptors::__anon3::indirected	/usr/include/boost/range/adaptor/indirected.hpp	/^            const range_detail::indirect_forwarder indirected =$/;"	m	namespace:boost::adaptors::__anon3
boost::adaptors::__anon4::map_keys	/usr/include/boost/range/adaptor/map.hpp	/^            const range_detail::map_keys_forwarder map_keys =$/;"	m	namespace:boost::adaptors::__anon4
boost::adaptors::__anon4::map_values	/usr/include/boost/range/adaptor/map.hpp	/^            const range_detail::map_values_forwarder map_values =$/;"	m	namespace:boost::adaptors::__anon4
boost::adaptors::__anon5::replaced	/usr/include/boost/range/adaptor/replaced.hpp	/^                replaced =$/;"	m	namespace:boost::adaptors::__anon5
boost::adaptors::__anon6::replaced_if	/usr/include/boost/range/adaptor/replaced_if.hpp	/^                replaced_if =$/;"	m	namespace:boost::adaptors::__anon6
boost::adaptors::__anon7::reversed	/usr/include/boost/range/adaptor/reversed.hpp	/^            const range_detail::reverse_forwarder reversed = $/;"	m	namespace:boost::adaptors::__anon7
boost::adaptors::__anon8::strided	/usr/include/boost/range/adaptor/strided.hpp	/^                strided = range_detail::forwarder<range_detail::strided_holder>();$/;"	m	namespace:boost::adaptors::__anon8
boost::adaptors::__anon9::tokenized	/usr/include/boost/range/adaptor/tokenized.hpp	/^            const range_detail::regex_forwarder tokenized = $/;"	m	namespace:boost::adaptors::__anon9
boost::adaptors::adjacent_filter	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        adjacent_filter(ForwardRng& rng, BinPredicate filter_pred)$/;"	f	namespace:boost::adaptors	signature:(ForwardRng& rng, BinPredicate filter_pred)
boost::adaptors::adjacent_filter	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        adjacent_filter(const ForwardRng& rng, BinPredicate filter_pred)$/;"	f	namespace:boost::adaptors	signature:(const ForwardRng& rng, BinPredicate filter_pred)
boost::adaptors::copied	/usr/include/boost/range/adaptor/copied.hpp	/^        struct copied$/;"	s	namespace:boost::adaptors
boost::adaptors::copied::copied	/usr/include/boost/range/adaptor/copied.hpp	/^            copied(std::size_t t_, std::size_t u_)$/;"	f	struct:boost::adaptors::copied	access:public	signature:(std::size_t t_, std::size_t u_)
boost::adaptors::copied::t	/usr/include/boost/range/adaptor/copied.hpp	/^            std::size_t t;$/;"	m	struct:boost::adaptors::copied	access:public
boost::adaptors::copied::u	/usr/include/boost/range/adaptor/copied.hpp	/^            std::size_t u;$/;"	m	struct:boost::adaptors::copied	access:public
boost::adaptors::copy	/usr/include/boost/range/adaptor/copied.hpp	/^        copy(const CopyableRandomAccessRange& rng, std::size_t t, std::size_t u)$/;"	f	namespace:boost::adaptors	signature:(const CopyableRandomAccessRange& rng, std::size_t t, std::size_t u)
boost::adaptors::filter	/usr/include/boost/range/adaptor/filtered.hpp	/^        filter(InputRange& rng, Predicate filter_pred)$/;"	f	namespace:boost::adaptors	signature:(InputRange& rng, Predicate filter_pred)
boost::adaptors::filter	/usr/include/boost/range/adaptor/filtered.hpp	/^        filter(const InputRange& rng, Predicate filter_pred)$/;"	f	namespace:boost::adaptors	signature:(const InputRange& rng, Predicate filter_pred)
boost::adaptors::index	/usr/include/boost/range/adaptor/indexed.hpp	/^        index(SinglePassRange& rng, Index index_value)$/;"	f	namespace:boost::adaptors	signature:(SinglePassRange& rng, Index index_value)
boost::adaptors::index	/usr/include/boost/range/adaptor/indexed.hpp	/^        index(const SinglePassRange& rng, Index index_value)$/;"	f	namespace:boost::adaptors	signature:(const SinglePassRange& rng, Index index_value)
boost::adaptors::indexed	/usr/include/boost/range/adaptor/indexed.hpp	/^        struct indexed$/;"	s	namespace:boost::adaptors
boost::adaptors::indexed::indexed	/usr/include/boost/range/adaptor/indexed.hpp	/^            explicit indexed(std::size_t x) : val(x) {}$/;"	f	struct:boost::adaptors::indexed	access:public	signature:(std::size_t x)
boost::adaptors::indexed::val	/usr/include/boost/range/adaptor/indexed.hpp	/^            std::size_t val;$/;"	m	struct:boost::adaptors::indexed	access:public
boost::adaptors::indirect	/usr/include/boost/range/adaptor/indirected.hpp	/^        indirect(InputRange& rng)$/;"	f	namespace:boost::adaptors	signature:(InputRange& rng)
boost::adaptors::indirect	/usr/include/boost/range/adaptor/indirected.hpp	/^        indirect(const InputRange& rng)$/;"	f	namespace:boost::adaptors	signature:(const InputRange& rng)
boost::adaptors::keys	/usr/include/boost/range/adaptor/map.hpp	/^        keys(const StdPairRange& rng)$/;"	f	namespace:boost::adaptors	signature:(const StdPairRange& rng)
boost::adaptors::operator |	/usr/include/boost/range/adaptor/copied.hpp	/^        operator|( const CopyableRandomAccessRng& r, const copied& f )$/;"	f	namespace:boost::adaptors	signature:( const CopyableRandomAccessRng& r, const copied& f )
boost::adaptors::operator |	/usr/include/boost/range/adaptor/indexed.hpp	/^        operator|( SinglePassRange& r,$/;"	f	namespace:boost::adaptors	signature:( SinglePassRange& r, const indexed& f )
boost::adaptors::operator |	/usr/include/boost/range/adaptor/indexed.hpp	/^        operator|( const SinglePassRange& r,$/;"	f	namespace:boost::adaptors	signature:( const SinglePassRange& r, const indexed& f )
boost::adaptors::operator |	/usr/include/boost/range/adaptor/sliced.hpp	/^        operator|( RandomAccessRange& r, const sliced& f )$/;"	f	namespace:boost::adaptors	signature:( RandomAccessRange& r, const sliced& f )
boost::adaptors::operator |	/usr/include/boost/range/adaptor/sliced.hpp	/^        operator|( const RandomAccessRange& r, const sliced& f )$/;"	f	namespace:boost::adaptors	signature:( const RandomAccessRange& r, const sliced& f )
boost::adaptors::operator |	/usr/include/boost/range/adaptor/type_erased.hpp	/^        operator|(SinglePassRange& rng,$/;"	f	namespace:boost::adaptors	signature:(SinglePassRange& rng, type_erased< Value , Traversal , Reference , Difference , Buffer >)
boost::adaptors::operator |	/usr/include/boost/range/adaptor/type_erased.hpp	/^        operator|(const SinglePassRange& rng,$/;"	f	namespace:boost::adaptors	signature:(const SinglePassRange& rng, type_erased< Value , Traversal , Reference , Difference , Buffer >)
boost::adaptors::replace	/usr/include/boost/range/adaptor/replaced.hpp	/^        replace(InputRange& rng,$/;"	f	namespace:boost::adaptors	signature:(InputRange& rng, BOOST_DEDUCED_TYPENAME range_value<InputRange>::type from, BOOST_DEDUCED_TYPENAME range_value<InputRange>::type to)
boost::adaptors::replace	/usr/include/boost/range/adaptor/replaced.hpp	/^        replace(const InputRange& rng,$/;"	f	namespace:boost::adaptors	signature:(const InputRange& rng, BOOST_DEDUCED_TYPENAME range_value<const InputRange>::type from, BOOST_DEDUCED_TYPENAME range_value<const InputRange>::type to)
boost::adaptors::replace_if	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        replace_if(InputRange& rng, Pred pred,$/;"	f	namespace:boost::adaptors	signature:(InputRange& rng, Pred pred, BOOST_DEDUCED_TYPENAME range_value<InputRange>::type to)
boost::adaptors::replace_if	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        replace_if(const InputRange& rng, Pred pred,$/;"	f	namespace:boost::adaptors	signature:(const InputRange& rng, Pred pred, BOOST_DEDUCED_TYPENAME range_value<const InputRange>::type to)
boost::adaptors::reverse	/usr/include/boost/range/adaptor/reversed.hpp	/^        reverse(BidirectionalRange& rng)$/;"	f	namespace:boost::adaptors	signature:(BidirectionalRange& rng)
boost::adaptors::reverse	/usr/include/boost/range/adaptor/reversed.hpp	/^        reverse(const BidirectionalRange& rng)$/;"	f	namespace:boost::adaptors	signature:(const BidirectionalRange& rng)
boost::adaptors::slice	/usr/include/boost/range/adaptor/sliced.hpp	/^        slice( RandomAccessRange& rng, std::size_t t, std::size_t u )$/;"	f	namespace:boost::adaptors	signature:( RandomAccessRange& rng, std::size_t t, std::size_t u )
boost::adaptors::slice	/usr/include/boost/range/adaptor/sliced.hpp	/^        slice( const RandomAccessRange& rng, std::size_t t, std::size_t u )$/;"	f	namespace:boost::adaptors	signature:( const RandomAccessRange& rng, std::size_t t, std::size_t u )
boost::adaptors::sliced	/usr/include/boost/range/adaptor/sliced.hpp	/^        struct sliced$/;"	s	namespace:boost::adaptors
boost::adaptors::sliced::sliced	/usr/include/boost/range/adaptor/sliced.hpp	/^            sliced(std::size_t t_, std::size_t u_)$/;"	f	struct:boost::adaptors::sliced	access:public	signature:(std::size_t t_, std::size_t u_)
boost::adaptors::sliced::t	/usr/include/boost/range/adaptor/sliced.hpp	/^            std::size_t t;$/;"	m	struct:boost::adaptors::sliced	access:public
boost::adaptors::sliced::u	/usr/include/boost/range/adaptor/sliced.hpp	/^            std::size_t u;$/;"	m	struct:boost::adaptors::sliced	access:public
boost::adaptors::sliced_range	/usr/include/boost/range/adaptor/sliced.hpp	/^        class sliced_range : public boost::iterator_range< BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type >$/;"	c	namespace:boost::adaptors	inherits:boost::iterator_range
boost::adaptors::sliced_range::base_t	/usr/include/boost/range/adaptor/sliced.hpp	/^            typedef boost::iterator_range< BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type > base_t;$/;"	t	class:boost::adaptors::sliced_range	access:private
boost::adaptors::sliced_range::sliced_range	/usr/include/boost/range/adaptor/sliced.hpp	/^            sliced_range(Rng& rng, T t, U u)$/;"	f	class:boost::adaptors::sliced_range	access:public	signature:(Rng& rng, T t, U u)
boost::adaptors::stride	/usr/include/boost/range/adaptor/strided.hpp	/^        stride(Range& rng, Difference step)$/;"	f	namespace:boost::adaptors	signature:(Range& rng, Difference step)
boost::adaptors::stride	/usr/include/boost/range/adaptor/strided.hpp	/^        stride(const Range& rng, Difference step)$/;"	f	namespace:boost::adaptors	signature:(const Range& rng, Difference step)
boost::adaptors::tokenize	/usr/include/boost/range/adaptor/tokenized.hpp	/^        tokenize(BidirectionalRange& rng, const Regex& reg, const Submatch& sub, Flag f)$/;"	f	namespace:boost::adaptors	signature:(BidirectionalRange& rng, const Regex& reg, const Submatch& sub, Flag f)
boost::adaptors::tokenize	/usr/include/boost/range/adaptor/tokenized.hpp	/^        tokenize(const BidirectionalRange& rng, const Regex& reg, const Submatch& sub, Flag f)$/;"	f	namespace:boost::adaptors	signature:(const BidirectionalRange& rng, const Regex& reg, const Submatch& sub, Flag f)
boost::adaptors::transform	/usr/include/boost/range/adaptor/transformed.hpp	/^        transform(InputRange& rng, UnaryFunction fn)$/;"	f	namespace:boost::adaptors	signature:(InputRange& rng, UnaryFunction fn)
boost::adaptors::transform	/usr/include/boost/range/adaptor/transformed.hpp	/^        transform(const InputRange& rng, UnaryFunction fn)$/;"	f	namespace:boost::adaptors	signature:(const InputRange& rng, UnaryFunction fn)
boost::adaptors::type_erase	/usr/include/boost/range/adaptor/type_erased.hpp	/^        type_erase(SinglePassRange& rng$/;"	f	namespace:boost::adaptors	signature:(SinglePassRange& rng , type_erased< Value , Traversal , Reference , Difference , Buffer > = type_erased<>() )
boost::adaptors::type_erase	/usr/include/boost/range/adaptor/type_erased.hpp	/^        type_erase(const SinglePassRange& rng$/;"	f	namespace:boost::adaptors	signature:(const SinglePassRange& rng , type_erased< Value , Traversal , Reference , Difference , Buffer > = type_erased<>() )
boost::adaptors::type_erased	/usr/include/boost/range/adaptor/type_erased.hpp	/^        struct type_erased$/;"	s	namespace:boost::adaptors
boost::adaptors::unique	/usr/include/boost/range/adaptor/uniqued.hpp	/^        unique(ForwardRange& rng)$/;"	f	namespace:boost::adaptors	signature:(ForwardRange& rng)
boost::adaptors::unique	/usr/include/boost/range/adaptor/uniqued.hpp	/^        unique(const ForwardRange& rng)$/;"	f	namespace:boost::adaptors	signature:(const ForwardRange& rng)
boost::adaptors::values	/usr/include/boost/range/adaptor/map.hpp	/^        values(StdPairRange& rng)$/;"	f	namespace:boost::adaptors	signature:(StdPairRange& rng)
boost::adaptors::values	/usr/include/boost/range/adaptor/map.hpp	/^        values(const StdPairRange& rng)$/;"	f	namespace:boost::adaptors	signature:(const StdPairRange& rng)
boost::adjacent_difference	/usr/include/boost/range/numeric.hpp	/^    inline OutputIterator adjacent_difference ( const SinglePassRange& rng,$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, OutputIterator result )
boost::adjacent_difference	/usr/include/boost/range/numeric.hpp	/^    inline OutputIterator adjacent_difference ( const SinglePassRange& rng,$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, OutputIterator result, BinaryOperation op )
boost::algorithm	/usr/include/boost/range/detail/collection_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm::begin	/usr/include/boost/range/detail/collection_traits.hpp	/^        begin( C& c )$/;"	f	namespace:boost::algorithm	signature:( C& c )
boost::algorithm::begin	/usr/include/boost/range/detail/collection_traits.hpp	/^        begin( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
boost::algorithm::collection_traits	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct collection_traits$/;"	s	namespace:boost::algorithm
boost::algorithm::collection_traits::const_iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::container_helper_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                >::type container_helper_type;$/;"	t	struct:boost::algorithm::collection_traits	access:private
boost::algorithm::collection_traits::difference_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::function_type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef container_helper_type function_type;        $/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::iterator iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::result_iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::result_iterator result_iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::size_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::size_type size_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::value_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::value_type value_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::const_iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct const_iterator_of$/;"	s	namespace:boost::algorithm
boost::algorithm::const_iterator_of::type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::const_iterator type;$/;"	t	struct:boost::algorithm::const_iterator_of	access:public
boost::algorithm::detail	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail::array_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_container_traits$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_container_traits::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = traits_type::array_size );$/;"	p	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( size_type, array_size = traits_type::array_size )
boost::algorithm::detail::array_container_traits::array_length_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        BOOST_NESTED_TEMPLATE array_length<traits_type> array_length_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
boost::algorithm::detail::array_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
boost::algorithm::detail::array_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
boost::algorithm::detail::array_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
boost::algorithm::detail::array_container_traits::char_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_cv<value_type>::type char_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
boost::algorithm::detail::array_container_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
boost::algorithm::detail::array_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
boost::algorithm::detail::array_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
boost::algorithm::detail::array_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
boost::algorithm::detail::array_container_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::iterator iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits::result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits::size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
boost::algorithm::detail::array_container_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits::traits_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_traits<T> traits_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
boost::algorithm::detail::array_container_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::value_type value_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_container_traits_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::array_container_traits_selector	access:public
boost::algorithm::detail::array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector<char>$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector<wchar_t>$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_length_selector::array_length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                struct array_length$/;"	s	struct:boost::algorithm::detail::array_length_selector	access:public
boost::algorithm::detail::array_length_selector::array_length::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    BOOST_STATIC_CONSTANT($/;"	p	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( size_type, array_size=TraitsT::array_size )
boost::algorithm::detail::array_length_selector::array_length::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static bool empty( const A& )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& )
boost::algorithm::detail::array_length_selector::array_length::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static bool empty( const A& a )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& a )
boost::algorithm::detail::array_length_selector::array_length::length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static size_type length( const A& )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& )
boost::algorithm::detail::array_length_selector::array_length::length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static size_type length( const A& a )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& a )
boost::algorithm::detail::array_length_selector::array_length::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        TraitsT::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_length_selector::array_length	access:public
boost::algorithm::detail::array_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits<T[sz]>$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = sz );$/;"	p	struct:boost::algorithm::detail::array_traits	access:public	signature:( size_type, array_size = sz )
boost::algorithm::detail::array_traits::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = traits_type::array_size );$/;"	p	struct:boost::algorithm::detail::array_traits	access:public	signature:( size_type, array_size = traits_type::array_size )
boost::algorithm::detail::array_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const T* const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::iterator iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef T* iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::traits_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    array_traits_selector<T>::type traits_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::value_type value_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef T value_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits_cv_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_cv_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_cv_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_cv_selector	access:public
boost::algorithm::detail::array_traits_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_impl$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_impl::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = sizeof(T)\/sizeof(BaseT) );$/;"	p	struct:boost::algorithm::detail::array_traits_impl	access:public	signature:( size_type, array_size = sizeof(T)/sizeof(BaseT) )
boost::algorithm::detail::array_traits_impl::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const BaseT* const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
boost::algorithm::detail::array_traits_impl::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
boost::algorithm::detail::array_traits_impl::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BaseT* iterator;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
boost::algorithm::detail::array_traits_impl::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
boost::algorithm::detail::array_traits_impl::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BaseT value_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
boost::algorithm::detail::array_traits_impl_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_impl_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_impl_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_traits_impl<T,BaseT> type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl_selector	access:public
boost::algorithm::detail::array_traits_select	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_select$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_select::apply	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                struct apply$/;"	s	struct:boost::algorithm::detail::array_traits_select	access:public
boost::algorithm::detail::array_traits_select::apply::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                            ::boost::mpl::identity<T1> >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_select::apply	access:public
boost::algorithm::detail::array_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_selector $/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_selector::array_base_types	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                >::type array_base_types;$/;"	t	struct:boost::algorithm::detail::array_traits_selector	access:private
boost::algorithm::detail::array_traits_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        ::boost::algorithm::detail::array_traits_select<T> >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_selector	access:public
boost::algorithm::detail::array_traits_void	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_void$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_void::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef void type;$/;"	t	struct:boost::algorithm::detail::array_traits_void	access:public
boost::algorithm::detail::default_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct default_container_traits$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::default_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
boost::algorithm::detail::default_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
boost::algorithm::detail::default_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
boost::algorithm::detail::default_container_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
boost::algorithm::detail::default_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
boost::algorithm::detail::default_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
boost::algorithm::detail::default_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
boost::algorithm::detail::default_container_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::iterator iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits::result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits::size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
boost::algorithm::detail::default_container_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::size_type size_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::value_type value_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct default_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::default_container_traits_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef default_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::default_container_traits_selector	access:public
boost::algorithm::detail::is_pair	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            template<typename T> struct is_pair$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::is_pair::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( bool, value=$/;"	p	struct:boost::algorithm::detail::is_pair	access:public	signature:( bool, value= sizeof(is_pair_impl(t))==sizeof(yes_type) )
boost::algorithm::detail::is_pair::t	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static T* t;$/;"	m	struct:boost::algorithm::detail::is_pair	access:private
boost::algorithm::detail::is_pair_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            no_type is_pair_impl( ... );$/;"	p	namespace:boost::algorithm::detail	signature:( .... )
boost::algorithm::detail::is_pair_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            yes_type is_pair_impl( const std::pair<T,U>* );$/;"	p	namespace:boost::algorithm::detail	signature:( const std::pair<T,U>* )
boost::algorithm::detail::pair_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pair_container_traits$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::pair_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pair_container_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type const_iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    iterator_traits<element_type>::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::element_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME PairT::first_type element_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pair_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pair_container_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type result_iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pair_container_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    iterator_traits<element_type>::value_type value_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pair_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::pair_container_traits_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef pair_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits_selector	access:public
boost::algorithm::detail::pointer_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pointer_container_traits$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::pointer_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pointer_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
boost::algorithm::detail::pointer_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
boost::algorithm::detail::pointer_container_traits::char_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef ::std::char_traits<char_type> char_traits;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::char_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_cv<value_type>::type char_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const value_type* const_iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pointer_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pointer_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
boost::algorithm::detail::pointer_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
boost::algorithm::detail::pointer_container_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef value_type* iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pointer_container_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_pointer<T>::type value_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pointer_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::pointer_container_traits_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef pointer_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits_selector	access:public
boost::algorithm::difference_type_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct difference_type_of$/;"	s	namespace:boost::algorithm
boost::algorithm::difference_type_of::type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::difference_type type;$/;"	t	struct:boost::algorithm::difference_type_of	access:public
boost::algorithm::empty	/usr/include/boost/range/detail/collection_traits.hpp	/^        inline bool empty( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
boost::algorithm::end	/usr/include/boost/range/detail/collection_traits.hpp	/^        end( C& c )$/;"	f	namespace:boost::algorithm	signature:( C& c )
boost::algorithm::end	/usr/include/boost/range/detail/collection_traits.hpp	/^        end( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
boost::algorithm::iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct iterator_of$/;"	s	namespace:boost::algorithm
boost::algorithm::iterator_of::type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::iterator type;$/;"	t	struct:boost::algorithm::iterator_of	access:public
boost::algorithm::result_iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct result_iterator_of$/;"	s	namespace:boost::algorithm
boost::algorithm::result_iterator_of::type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::result_iterator type;$/;"	t	struct:boost::algorithm::result_iterator_of	access:public
boost::algorithm::size	/usr/include/boost/range/detail/collection_traits.hpp	/^        size( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
boost::algorithm::value_type_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct value_type_of$/;"	s	namespace:boost::algorithm
boost::algorithm::value_type_of::type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::value_type type;$/;"	t	struct:boost::algorithm::value_type_of	access:public
boost::any_iterator_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^    class any_iterator_buffer$/;"	c	namespace:boost	inherits:noncopyable
boost::any_iterator_buffer::BOOST_STATIC_ASSERT	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        BOOST_STATIC_ASSERT(( StackBufferSize > 0 ));$/;"	p	class:boost::any_iterator_buffer	access:private	signature:( StackBufferSize > 0 )
boost::any_iterator_buffer::allocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void* allocate(std::size_t bytes)$/;"	f	class:boost::any_iterator_buffer	access:public	signature:(std::size_t bytes)
boost::any_iterator_buffer::any_iterator_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        any_iterator_buffer()$/;"	f	class:boost::any_iterator_buffer	access:public	signature:()
boost::any_iterator_buffer::any_iterator_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        any_iterator_buffer(const any_iterator_buffer&);$/;"	p	class:boost::any_iterator_buffer	access:private	signature:(const any_iterator_buffer&)
boost::any_iterator_buffer::deallocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void deallocate()$/;"	f	class:boost::any_iterator_buffer	access:public	signature:()
boost::any_iterator_buffer::m_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        boost::array<char, StackBufferSize> m_buffer;$/;"	m	class:boost::any_iterator_buffer	access:private
boost::any_iterator_buffer::m_ptr	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        char* m_ptr;$/;"	m	class:boost::any_iterator_buffer	access:private
boost::any_iterator_buffer::operator =	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void operator=(const any_iterator_buffer&);$/;"	p	class:boost::any_iterator_buffer	access:private	signature:(const any_iterator_buffer&)
boost::any_iterator_buffer::~any_iterator_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        ~any_iterator_buffer()$/;"	f	class:boost::any_iterator_buffer	access:public	signature:()
boost::any_iterator_default_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^    typedef any_iterator_buffer<64> any_iterator_default_buffer;$/;"	t	namespace:boost
boost::any_iterator_heap_only_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^    class any_iterator_heap_only_buffer$/;"	c	namespace:boost	inherits:noncopyable
boost::any_iterator_heap_only_buffer::allocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void* allocate(std::size_t bytes)$/;"	f	class:boost::any_iterator_heap_only_buffer	access:public	signature:(std::size_t bytes)
boost::any_iterator_heap_only_buffer::any_iterator_heap_only_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        any_iterator_heap_only_buffer()$/;"	f	class:boost::any_iterator_heap_only_buffer	access:public	signature:()
boost::any_iterator_heap_only_buffer::deallocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void deallocate()$/;"	f	class:boost::any_iterator_heap_only_buffer	access:public	signature:()
boost::any_iterator_heap_only_buffer::m_ptr	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        char* m_ptr;$/;"	m	class:boost::any_iterator_heap_only_buffer	access:private
boost::any_iterator_heap_only_buffer::~any_iterator_heap_only_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        ~any_iterator_heap_only_buffer()$/;"	f	class:boost::any_iterator_heap_only_buffer	access:public	signature:()
boost::any_iterator_stack_only_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^    class any_iterator_stack_only_buffer$/;"	c	namespace:boost
boost::any_iterator_stack_only_buffer::BOOST_STATIC_ASSERT	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        BOOST_STATIC_ASSERT(( StackBufferSize > 0 ));$/;"	p	class:boost::any_iterator_stack_only_buffer	access:private	signature:( StackBufferSize > 0 )
boost::any_iterator_stack_only_buffer::allocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void* allocate(std::size_t bytes)$/;"	f	class:boost::any_iterator_stack_only_buffer	access:public	signature:(std::size_t bytes)
boost::any_iterator_stack_only_buffer::deallocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void deallocate()$/;"	f	class:boost::any_iterator_stack_only_buffer	access:public	signature:()
boost::any_iterator_stack_only_buffer::m_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        boost::array<char, StackBufferSize> m_buffer;$/;"	m	class:boost::any_iterator_stack_only_buffer	access:private
boost::as_array	/usr/include/boost/range/as_array.hpp	/^    as_array( R& r )$/;"	f	namespace:boost	signature:( R& r )
boost::as_array	/usr/include/boost/range/as_array.hpp	/^    as_array( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
boost::as_literal	/usr/include/boost/range/as_literal.hpp	/^    as_literal( Range& r )$/;"	f	namespace:boost	signature:( Range& r )
boost::as_literal	/usr/include/boost/range/as_literal.hpp	/^    as_literal( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
boost::as_literal	/usr/include/boost/range/detail/as_literal.hpp	/^    as_literal( Range& r )$/;"	f	namespace:boost	signature:( Range& r )
boost::combine	/usr/include/boost/range/combine.hpp	/^    inline ::boost::range_detail::zip_range<Rng1, Rng2> combine( Rng1& r1, Rng2& r2 )$/;"	f	namespace:boost	signature:( Rng1& r1, Rng2& r2 )
boost::combine	/usr/include/boost/range/combine.hpp	/^    inline ::boost::range_detail::zip_range<Rng1, const Rng2> combine( Rng1& r1, const Rng2& r2 )$/;"	f	namespace:boost	signature:( Rng1& r1, const Rng2& r2 )
boost::combine	/usr/include/boost/range/combine.hpp	/^    inline ::boost::range_detail::zip_range<const Rng1, Rng2> combine( const Rng1& r1, Rng2& r2 )$/;"	f	namespace:boost	signature:( const Rng1& r1, Rng2& r2 )
boost::combine	/usr/include/boost/range/combine.hpp	/^    inline ::boost::range_detail::zip_range<const Rng1, const Rng2> combine( const Rng1& r1, const Rng2& r2 )$/;"	f	namespace:boost	signature:( const Rng1& r1, const Rng2& r2 )
boost::const_rbegin	/usr/include/boost/range/rbegin.hpp	/^const_rbegin( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::const_rend	/usr/include/boost/range/rend.hpp	/^const_rend( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::copy_range	/usr/include/boost/range/iterator_range_core.hpp	/^        inline SeqT copy_range( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
boost::counting_range	/usr/include/boost/range/counting_range.hpp	/^    counting_range(Range& rng)$/;"	f	namespace:boost	signature:(Range& rng)
boost::counting_range	/usr/include/boost/range/counting_range.hpp	/^    counting_range(Value first, Value last)$/;"	f	namespace:boost	signature:(Value first, Value last)
boost::counting_range	/usr/include/boost/range/counting_range.hpp	/^    counting_range(const Range& rng)$/;"	f	namespace:boost	signature:(const Range& rng)
boost::detail	/usr/include/boost/range/detail/any_iterator.hpp	/^    namespace detail$/;"	n	namespace:boost
boost::detail	/usr/include/boost/range/size_type.hpp	/^    namespace detail$/;"	n	namespace:boost
boost::detail::has_size_type	/usr/include/boost/range/size_type.hpp	/^        class has_size_type$/;"	c	namespace:boost::detail
boost::detail::has_size_type::no_type	/usr/include/boost/range/size_type.hpp	/^            typedef char no_type;$/;"	t	class:boost::detail::has_size_type	access:private
boost::detail::has_size_type::test	/usr/include/boost/range/size_type.hpp	/^            static no_type test(Arg x);$/;"	p	class:boost::detail::has_size_type	access:private	signature:(Arg x)
boost::detail::has_size_type::test	/usr/include/boost/range/size_type.hpp	/^            static yes_type test(BOOST_DEDUCED_TYPENAME C::size_type x);$/;"	p	class:boost::detail::has_size_type	access:private	signature:(BOOST_DEDUCED_TYPENAME C::size_type x)
boost::detail::has_size_type::value	/usr/include/boost/range/size_type.hpp	/^            static const bool value = sizeof(test<T>(0)) == sizeof(yes_type);$/;"	m	class:boost::detail::has_size_type	access:public
boost::detail::has_size_type::yes_type	/usr/include/boost/range/size_type.hpp	/^            struct yes_type { char dummy[2]; };$/;"	s	class:boost::detail::has_size_type	access:private
boost::detail::has_size_type::yes_type::dummy	/usr/include/boost/range/size_type.hpp	/^            struct yes_type { char dummy[2]; };$/;"	m	struct:boost::detail::has_size_type::yes_type	access:public
boost::detail::postfix_increment_proxy	/usr/include/boost/range/detail/any_iterator.hpp	/^        class postfix_increment_proxy<$/;"	c	namespace:boost::detail
boost::detail::postfix_increment_proxy::any_iterator_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            > any_iterator_type;$/;"	t	class:boost::detail::postfix_increment_proxy	access:private
boost::detail::postfix_increment_proxy::difference_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Difference difference_type;$/;"	t	class:boost::detail::postfix_increment_proxy	access:public
boost::detail::postfix_increment_proxy::iterator_category	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename std::iterator_traits<any_iterator_type>::iterator_category iterator_category;$/;"	t	class:boost::detail::postfix_increment_proxy	access:public
boost::detail::postfix_increment_proxy::operator *	/usr/include/boost/range/detail/any_iterator.hpp	/^            operator*() const$/;"	f	class:boost::detail::postfix_increment_proxy	access:public	signature:() const
boost::detail::postfix_increment_proxy::pointer	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename iterator_pointer<any_iterator_type>::type pointer;$/;"	t	class:boost::detail::postfix_increment_proxy	access:public
boost::detail::postfix_increment_proxy::postfix_increment_proxy	/usr/include/boost/range/detail/any_iterator.hpp	/^            explicit postfix_increment_proxy(any_iterator_type const& x)$/;"	f	class:boost::detail::postfix_increment_proxy	access:public	signature:(any_iterator_type const& x)
boost::detail::postfix_increment_proxy::reference	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Reference reference;$/;"	t	class:boost::detail::postfix_increment_proxy	access:public
boost::detail::postfix_increment_proxy::stored_value	/usr/include/boost/range/detail/any_iterator.hpp	/^            mutable value_type stored_value;$/;"	m	class:boost::detail::postfix_increment_proxy	access:private
boost::detail::postfix_increment_proxy::value_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Value value_type;$/;"	t	class:boost::detail::postfix_increment_proxy	access:public
boost::detail::range_size	/usr/include/boost/range/size_type.hpp	/^        struct range_size$/;"	s	namespace:boost::detail
boost::detail::range_size	/usr/include/boost/range/size_type.hpp	/^        struct range_size<$/;"	s	namespace:boost::detail
boost::detail::range_size::type	/usr/include/boost/range/size_type.hpp	/^            >::type type;$/;"	t	struct:boost::detail::range_size	access:public
boost::detail::range_size::type	/usr/include/boost/range/size_type.hpp	/^            typedef BOOST_DEDUCED_TYPENAME C::size_type type;$/;"	t	struct:boost::detail::range_size	access:public
boost::detail::writable_postfix_increment_proxy	/usr/include/boost/range/detail/any_iterator.hpp	/^        class writable_postfix_increment_proxy<$/;"	c	namespace:boost::detail
boost::detail::writable_postfix_increment_proxy::any_iterator_type	/usr/include/boost/range/detail/any_iterator.hpp	/^                    > any_iterator_type;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:private
boost::detail::writable_postfix_increment_proxy::difference_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Difference difference_type;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:public
boost::detail::writable_postfix_increment_proxy::iterator_category	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename std::iterator_traits<any_iterator_type>::iterator_category iterator_category;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:public
boost::detail::writable_postfix_increment_proxy::operator *	/usr/include/boost/range/detail/any_iterator.hpp	/^            operator*() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
boost::detail::writable_postfix_increment_proxy::operator =	/usr/include/boost/range/detail/any_iterator.hpp	/^            T const& operator=(T const& x) const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(T const& x) const
boost::detail::writable_postfix_increment_proxy::operator =	/usr/include/boost/range/detail/any_iterator.hpp	/^            T& operator=(T& x) const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(T& x) const
boost::detail::writable_postfix_increment_proxy::operator any_iterator_type const&	/usr/include/boost/range/detail/any_iterator.hpp	/^            operator any_iterator_type const&() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
boost::detail::writable_postfix_increment_proxy::operator value_type&	/usr/include/boost/range/detail/any_iterator.hpp	/^            operator value_type&() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
boost::detail::writable_postfix_increment_proxy::pointer	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename iterator_pointer<any_iterator_type>::type pointer;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:public
boost::detail::writable_postfix_increment_proxy::reference	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Reference reference;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:public
boost::detail::writable_postfix_increment_proxy::stored_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator_type stored_iterator;$/;"	m	class:boost::detail::writable_postfix_increment_proxy	access:private
boost::detail::writable_postfix_increment_proxy::stored_value	/usr/include/boost/range/detail/any_iterator.hpp	/^            mutable value_type stored_value;$/;"	m	class:boost::detail::writable_postfix_increment_proxy	access:private
boost::detail::writable_postfix_increment_proxy::value_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Value value_type;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:public
boost::detail::writable_postfix_increment_proxy::writable_postfix_increment_proxy	/usr/include/boost/range/detail/any_iterator.hpp	/^            explicit writable_postfix_increment_proxy(any_iterator_type const& x)$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(any_iterator_type const& x)
boost::distance	/usr/include/boost/range/distance.hpp	/^    distance( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::empty	/usr/include/boost/range/detail/empty.hpp	/^    empty( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
boost::empty	/usr/include/boost/range/empty.hpp	/^    inline bool empty( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::end	/usr/include/boost/range/detail/vc6/end.hpp	/^    end( C& c )$/;"	f	namespace:boost	signature:( C& c )
boost::has_range_const_iterator	/usr/include/boost/range/has_range_iterator.hpp	/^    struct has_range_const_iterator$/;"	s	namespace:boost	inherits:range_detail::has_range_const_iterator_impl
boost::has_range_iterator	/usr/include/boost/range/has_range_iterator.hpp	/^    struct has_range_iterator$/;"	s	namespace:boost	inherits:range_detail::has_range_iterator_impl
boost::inner_product	/usr/include/boost/range/numeric.hpp	/^    inline Value inner_product( const SinglePassRange1& rng1, const SinglePassRange2& rng2, Value init )$/;"	f	namespace:boost	signature:( const SinglePassRange1& rng1, const SinglePassRange2& rng2, Value init )
boost::inner_product	/usr/include/boost/range/numeric.hpp	/^    inline Value inner_product( const SinglePassRange1& rng1, const SinglePassRange2& rng2,$/;"	f	namespace:boost	signature:( const SinglePassRange1& rng1, const SinglePassRange2& rng2, Value init, BinaryOperation1 op1, BinaryOperation2 op2 )
boost::integer_range	/usr/include/boost/range/irange.hpp	/^    class integer_range$/;"	c	namespace:boost	inherits:iterator_range
boost::integer_range::base_t	/usr/include/boost/range/irange.hpp	/^        typedef iterator_range<iterator_t> base_t;$/;"	t	class:boost::integer_range	access:private
boost::integer_range::integer_range	/usr/include/boost/range/irange.hpp	/^        integer_range(Integer first, Integer last)$/;"	f	class:boost::integer_range	access:public	signature:(Integer first, Integer last)
boost::integer_range::iterator_t	/usr/include/boost/range/irange.hpp	/^        typedef range_detail::integer_iterator<Integer> iterator_t;$/;"	t	class:boost::integer_range	access:private
boost::irange	/usr/include/boost/range/irange.hpp	/^        irange(Integer first, Integer last, StepSize step_size)$/;"	f	namespace:boost	signature:(Integer first, Integer last, StepSize step_size)
boost::irange	/usr/include/boost/range/irange.hpp	/^    irange(Integer first, Integer last)$/;"	f	namespace:boost	signature:(Integer first, Integer last)
boost::iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        class iterator_range$/;"	c	namespace:boost
boost::iterator_range::abstract_value_type	/usr/include/boost/range/iterator_range_core.hpp	/^                                 reference, value_type >::type abstract_value_type;$/;"	t	class:boost::iterator_range	access:private
boost::iterator_range::advance_begin	/usr/include/boost/range/iterator_range_core.hpp	/^           iterator_range& advance_begin( difference_type n )$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type n )
boost::iterator_range::advance_end	/usr/include/boost/range/iterator_range_core.hpp	/^           iterator_range& advance_end( difference_type n )$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type n )
boost::iterator_range::back	/usr/include/boost/range/iterator_range_core.hpp	/^           reference back() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::begin	/usr/include/boost/range/iterator_range_core.hpp	/^            IteratorT begin() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::const_iterator	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef IteratorT const_iterator;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::difference_type	/usr/include/boost/range/iterator_range_core.hpp	/^                iterator_difference<IteratorT>::type difference_type;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::empty	/usr/include/boost/range/iterator_range_core.hpp	/^            bool empty() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::end	/usr/include/boost/range/iterator_range_core.hpp	/^            IteratorT end() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::equal	/usr/include/boost/range/iterator_range_core.hpp	/^            bool equal( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
boost::iterator_range::front	/usr/include/boost/range/iterator_range_core.hpp	/^           reference front() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::impl	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef iterator_range_detail::iterator_range_impl<IteratorT> impl;$/;"	t	class:boost::iterator_range	access:protected
boost::iterator_range::iterator	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef IteratorT iterator;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range( Iterator Begin, Iterator End ) :$/;"	f	class:boost::iterator_range	access:public	signature:( Iterator Begin, Iterator End )
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range( Range& r ) :$/;"	f	class:boost::iterator_range	access:public	signature:( Range& r )
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range( Range& r, iterator_range_detail::range_tag ) :$/;"	f	class:boost::iterator_range	access:public	signature:( Range& r, iterator_range_detail::range_tag )
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range( const Range& r ) :$/;"	f	class:boost::iterator_range	access:public	signature:( const Range& r )
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range( const Range& r, iterator_range_detail::const_range_tag ) :$/;"	f	class:boost::iterator_range	access:public	signature:( const Range& r, iterator_range_detail::const_range_tag )
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range() : m_Begin( iterator() ), m_End( iterator() )$/;"	f	class:boost::iterator_range	access:public	signature:()
boost::iterator_range::iterator_range_	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef iterator_range iterator_range_;$/;"	t	class:boost::iterator_range	access:protected
boost::iterator_range::m_Begin	/usr/include/boost/range/iterator_range_core.hpp	/^            IteratorT m_Begin;$/;"	m	class:boost::iterator_range	access:private
boost::iterator_range::m_End	/usr/include/boost/range/iterator_range_core.hpp	/^            IteratorT m_End;$/;"	m	class:boost::iterator_range	access:private
boost::iterator_range::operator !	/usr/include/boost/range/iterator_range_core.hpp	/^            bool operator!() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::operator !=	/usr/include/boost/range/iterator_range_core.hpp	/^            bool operator!=( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
boost::iterator_range::operator ()	/usr/include/boost/range/iterator_range_core.hpp	/^           abstract_value_type operator()( difference_type at ) const$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type at ) const
boost::iterator_range::operator <	/usr/include/boost/range/iterator_range_core.hpp	/^           bool operator<( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
boost::iterator_range::operator <=	/usr/include/boost/range/iterator_range_core.hpp	/^           bool operator<=( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
boost::iterator_range::operator =	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range& operator=( ForwardRange& r )$/;"	f	class:boost::iterator_range	access:public	signature:( ForwardRange& r )
boost::iterator_range::operator =	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range& operator=( const ForwardRange& r )$/;"	f	class:boost::iterator_range	access:public	signature:( const ForwardRange& r )
boost::iterator_range::operator =	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range& operator=( const iterator_range<Iterator>& r )$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range<Iterator>& r )
boost::iterator_range::operator =	/usr/include/boost/range/iterator_range_core.hpp	/^            this_type& operator=( const this_type& r )$/;"	f	class:boost::iterator_range	access:public	signature:( const this_type& r )
boost::iterator_range::operator ==	/usr/include/boost/range/iterator_range_core.hpp	/^            bool operator==( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
boost::iterator_range::operator >	/usr/include/boost/range/iterator_range_core.hpp	/^           bool operator>( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
boost::iterator_range::operator >=	/usr/include/boost/range/iterator_range_core.hpp	/^           bool operator>=( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
boost::iterator_range::operator []	/usr/include/boost/range/iterator_range_core.hpp	/^           reference operator[]( difference_type at ) const$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type at ) const
boost::iterator_range::operator unspecified_bool_type	/usr/include/boost/range/iterator_range_core.hpp	/^            operator unspecified_bool_type() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::pop_back	/usr/include/boost/range/iterator_range_core.hpp	/^           void pop_back()$/;"	f	class:boost::iterator_range	access:public	signature:()
boost::iterator_range::pop_front	/usr/include/boost/range/iterator_range_core.hpp	/^           void pop_front()$/;"	f	class:boost::iterator_range	access:public	signature:()
boost::iterator_range::reference	/usr/include/boost/range/iterator_range_core.hpp	/^                iterator_reference<IteratorT>::type reference;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::safe_bool_t	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef range_detail::safe_bool< IteratorT iterator_range<IteratorT>::* > safe_bool_t;$/;"	t	class:boost::iterator_range	access:private
boost::iterator_range::size	/usr/include/boost/range/iterator_range_core.hpp	/^            difference_type size() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::size_type	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef std::size_t size_type; \/\/ note: must be unsigned$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::this_type	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef iterator_range<IteratorT> this_type;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::type	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef iterator_range<IteratorT> type;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::unspecified_bool_type	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef BOOST_DEDUCED_TYPENAME safe_bool_t::unspecified_bool_type unspecified_bool_type;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::value_type	/usr/include/boost/range/iterator_range_core.hpp	/^                iterator_value<IteratorT>::type value_type;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range_detail	/usr/include/boost/range/iterator_range_core.hpp	/^        namespace iterator_range_detail$/;"	n	namespace:boost
boost::iterator_range_detail	/usr/include/boost/range/iterator_range_core.hpp	/^    namespace iterator_range_detail$/;"	n	namespace:boost
boost::iterator_range_detail::const_range_tag	/usr/include/boost/range/iterator_range_core.hpp	/^        struct const_range_tag { };$/;"	s	namespace:boost::iterator_range_detail
boost::iterator_range_detail::equal	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool equal(const Left& l, const Right& r)$/;"	f	namespace:boost::iterator_range_detail	signature:(const Left& l, const Right& r)
boost::iterator_range_detail::greater_or_equal_than	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool greater_or_equal_than( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
boost::iterator_range_detail::greater_than	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool greater_than( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
boost::iterator_range_detail::iterator_range_impl	/usr/include/boost/range/iterator_range_core.hpp	/^        struct iterator_range_impl {$/;"	s	namespace:boost::iterator_range_detail
boost::iterator_range_detail::iterator_range_impl::adl_begin	/usr/include/boost/range/iterator_range_core.hpp	/^            static IteratorT adl_begin( ForwardRange& r )$/;"	f	struct:boost::iterator_range_detail::iterator_range_impl	access:public	signature:( ForwardRange& r )
boost::iterator_range_detail::iterator_range_impl::adl_end	/usr/include/boost/range/iterator_range_core.hpp	/^            static IteratorT adl_end( ForwardRange& r )$/;"	f	struct:boost::iterator_range_detail::iterator_range_impl	access:public	signature:( ForwardRange& r )
boost::iterator_range_detail::less_or_equal_than	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool less_or_equal_than( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
boost::iterator_range_detail::less_than	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool less_than( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
boost::iterator_range_detail::make_range_impl	/usr/include/boost/range/iterator_range_core.hpp	/^            make_range_impl( Range& r,$/;"	f	namespace:boost::iterator_range_detail	signature:( Range& r, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_begin, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_end )
boost::iterator_range_detail::range_tag	/usr/include/boost/range/iterator_range_core.hpp	/^        struct range_tag { };$/;"	s	namespace:boost::iterator_range_detail
boost::make_iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        make_iterator_range( ForwardRange& r )$/;"	f	namespace:boost	signature:( ForwardRange& r )
boost::make_iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        make_iterator_range( IteratorT Begin, IteratorT End )$/;"	f	namespace:boost	signature:( IteratorT Begin, IteratorT End )
boost::make_iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        make_iterator_range( Range& r )$/;"	f	namespace:boost	signature:( Range& r )
boost::make_iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        make_iterator_range( Range& r,$/;"	f	namespace:boost	signature:( Range& r, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_begin, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_end )
boost::make_iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        make_iterator_range( const ForwardRange& r )$/;"	f	namespace:boost	signature:( const ForwardRange& r )
boost::operator !=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator!=( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
boost::operator !=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator!=( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
boost::operator !=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator!=( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
boost::operator !=	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator!=( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
boost::operator <	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
boost::operator <	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
boost::operator <	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
boost::operator <	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator<( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
boost::operator <<	/usr/include/boost/range/iterator_range_io.hpp	/^        inline std::basic_ostream<Elem,Traits>& operator<<( $/;"	f	namespace:boost	signature:( std::basic_ostream<Elem, Traits>& Os, const iterator_range<IteratorT>& r )
boost::operator <=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<=( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
boost::operator <=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<=( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
boost::operator <=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<=( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
boost::operator ==	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator==( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
boost::operator ==	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator==( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
boost::operator ==	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator==( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
boost::operator ==	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator==( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
boost::operator >	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
boost::operator >	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
boost::operator >	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
boost::operator >=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>=( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
boost::operator >=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>=( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
boost::operator >=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>=( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
boost::partial_sum	/usr/include/boost/range/numeric.hpp	/^    inline OutputIterator partial_sum ( const SinglePassRange& rng, OutputIterator result,$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, OutputIterator result, BinaryOperation op )
boost::partial_sum	/usr/include/boost/range/numeric.hpp	/^    inline OutputIterator partial_sum ( const SinglePassRange& rng,$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, OutputIterator result )
boost::pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CAdapt<T> > :$/;"	s	namespace:boost	inherits:pointee
boost::pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CAutoPtr<E> > :$/;"	s	namespace:boost	inherits:mpl::identity
boost::pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CComPtr<T> > :$/;"	s	namespace:boost	inherits:mpl::identity
boost::pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CComQIPtr<T, piid> > :$/;"	s	namespace:boost	inherits:mpl::identity
boost::pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CHeapPtr<E, Allocator> > :$/;"	s	namespace:boost	inherits:mpl::identity
boost::range	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/binary_search.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/copy.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/copy_backward.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/count.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/count_if.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/equal.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/equal_range.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/fill.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/fill_n.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/find.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/find_end.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/find_first_of.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/find_if.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/for_each.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/generate.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/inplace_merge.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/lexicographical_compare.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/lower_bound.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/max_element.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/merge.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/min_element.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/mismatch.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/nth_element.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/partial_sort.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/partition.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/permutation.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/random_shuffle.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/remove.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/remove_copy.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/remove_if.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/replace.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/replace_copy.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/replace_copy_if.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/replace_if.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/reverse.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/reverse_copy.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/rotate.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/rotate_copy.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/search.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/search_n.hpp	/^namespace range {$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/sort.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/stable_partition.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/stable_sort.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/transform.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/unique.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/unique_copy.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm/upper_bound.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm_ext/copy_n.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm_ext/erase.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm_ext/insert.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm_ext/iota.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm_ext/is_sorted.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm_ext/overwrite.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm_ext/push_back.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/algorithm_ext/push_front.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/istream_range.hpp	/^    namespace range$/;"	n	namespace:boost
boost::range	/usr/include/boost/range/join.hpp	/^namespace range$/;"	n	namespace:boost
boost::range::adjacent_find	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^adjacent_find(ForwardRange & rng)$/;"	f	namespace:boost::range	signature:(ForwardRange & rng)
boost::range::adjacent_find	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^adjacent_find(ForwardRange & rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange & rng, BinaryPredicate pred)
boost::range::adjacent_find	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^adjacent_find(ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, BinaryPredicate pred)
boost::range::adjacent_find	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^adjacent_find(const ForwardRange& rng)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng)
boost::range::adjacent_find	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^adjacent_find(const ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, BinaryPredicate pred)
boost::range::binary_search	/usr/include/boost/range/algorithm/binary_search.hpp	/^inline bool binary_search(const ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val)
boost::range::binary_search	/usr/include/boost/range/algorithm/binary_search.hpp	/^inline bool binary_search(const ForwardRange& rng, const Value& val,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val, BinaryPredicate pred)
boost::range::copy	/usr/include/boost/range/algorithm/copy.hpp	/^inline OutputIterator copy(const SinglePassRange& rng, OutputIterator out)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, OutputIterator out)
boost::range::copy_backward	/usr/include/boost/range/algorithm/copy_backward.hpp	/^copy_backward(const BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, BidirectionalTraversalWriteableIterator out)
boost::range::copy_n	/usr/include/boost/range/algorithm_ext/copy_n.hpp	/^inline OutputIterator copy_n(const SinglePassRange& rng, Size n, OutputIterator out)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, Size n, OutputIterator out)
boost::range::count	/usr/include/boost/range/algorithm/count.hpp	/^count(SinglePassRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(SinglePassRange& rng, const Value& val)
boost::range::count	/usr/include/boost/range/algorithm/count.hpp	/^count(const SinglePassRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, const Value& val)
boost::range::count_if	/usr/include/boost/range/algorithm/count_if.hpp	/^count_if(SinglePassRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(SinglePassRange& rng, UnaryPredicate pred)
boost::range::count_if	/usr/include/boost/range/algorithm/count_if.hpp	/^count_if(const SinglePassRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, UnaryPredicate pred)
boost::range::equal	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal( const SinglePassRange1& rng1, const SinglePassRange2& rng2 )$/;"	f	namespace:boost::range	signature:( const SinglePassRange1& rng1, const SinglePassRange2& rng2 )
boost::range::equal	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal( const SinglePassRange1& rng1, const SinglePassRange2& rng2,$/;"	f	namespace:boost::range	signature:( const SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred )
boost::range::equal_range	/usr/include/boost/range/algorithm/equal_range.hpp	/^equal_range(ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, const Value& val)
boost::range::equal_range	/usr/include/boost/range/algorithm/equal_range.hpp	/^equal_range(ForwardRange& rng, const Value& val, SortPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, const Value& val, SortPredicate pred)
boost::range::equal_range	/usr/include/boost/range/algorithm/equal_range.hpp	/^equal_range(const ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val)
boost::range::equal_range	/usr/include/boost/range/algorithm/equal_range.hpp	/^equal_range(const ForwardRange& rng, const Value& val, SortPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val, SortPredicate pred)
boost::range::erase	/usr/include/boost/range/algorithm_ext/erase.hpp	/^inline Container& erase( Container& on,$/;"	f	namespace:boost::range	signature:( Container& on, iterator_range<BOOST_DEDUCED_TYPENAME Container::iterator> to_erase )
boost::range::fill	/usr/include/boost/range/algorithm/fill.hpp	/^inline ForwardRange& fill(ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, const Value& val)
boost::range::fill	/usr/include/boost/range/algorithm/fill.hpp	/^inline const ForwardRange& fill(const ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val)
boost::range::fill_n	/usr/include/boost/range/algorithm/fill_n.hpp	/^inline ForwardRange& fill_n(ForwardRange& rng, Size n, const Value& val)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, Size n, const Value& val)
boost::range::fill_n	/usr/include/boost/range/algorithm/fill_n.hpp	/^inline const ForwardRange& fill_n(const ForwardRange& rng, Size n, const Value& val)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, Size n, const Value& val)
boost::range::find	/usr/include/boost/range/algorithm/find.hpp	/^find( SinglePassRange& rng, const Value& val )$/;"	f	namespace:boost::range	signature:( SinglePassRange& rng, const Value& val )
boost::range::find	/usr/include/boost/range/algorithm/find.hpp	/^find( const SinglePassRange& rng, const Value& val )$/;"	f	namespace:boost::range	signature:( const SinglePassRange& rng, const Value& val )
boost::range::find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(ForwardRange1 & rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(ForwardRange1 & rng1, const ForwardRange2& rng2)
boost::range::find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(ForwardRange1 & rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange1 & rng1, const ForwardRange2& rng2, BinaryPredicate pred)
boost::range::find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(ForwardRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(ForwardRange1& rng1, const ForwardRange2& rng2)
boost::range::find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)
boost::range::find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(const ForwardRange1 & rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(const ForwardRange1 & rng1, const ForwardRange2& rng2)
boost::range::find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(const ForwardRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(const ForwardRange1& rng1, const ForwardRange2& rng2)
boost::range::find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(const ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)
boost::range::find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(SinglePassRange1 & rng1, ForwardRange2 const & rng2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1 & rng1, ForwardRange2 const & rng2)
boost::range::find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(SinglePassRange1 & rng1, ForwardRange2 const & rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(SinglePassRange1 & rng1, ForwardRange2 const & rng2, BinaryPredicate pred)
boost::range::find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(SinglePassRange1 & rng1, const ForwardRange2& rng2,$/;"	f	namespace:boost::range	signature:(SinglePassRange1 & rng1, const ForwardRange2& rng2, BinaryPredicate pred)
boost::range::find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(SinglePassRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, const ForwardRange2& rng2)
boost::range::find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(const SinglePassRange1 & rng1, const ForwardRange2& rng2,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1 & rng1, const ForwardRange2& rng2, BinaryPredicate pred)
boost::range::find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(const SinglePassRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const ForwardRange2& rng2)
boost::range::find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(const SinglePassRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)
boost::range::find_if	/usr/include/boost/range/algorithm/find_if.hpp	/^find_if( SinglePassRange& rng, UnaryPredicate pred )$/;"	f	namespace:boost::range	signature:( SinglePassRange& rng, UnaryPredicate pred )
boost::range::find_if	/usr/include/boost/range/algorithm/find_if.hpp	/^find_if( const SinglePassRange& rng, UnaryPredicate pred )$/;"	f	namespace:boost::range	signature:( const SinglePassRange& rng, UnaryPredicate pred )
boost::range::for_each	/usr/include/boost/range/algorithm/for_each.hpp	/^inline UnaryFunction for_each(SinglePassRange & rng, UnaryFunction fun)$/;"	f	namespace:boost::range	signature:(SinglePassRange & rng, UnaryFunction fun)
boost::range::for_each	/usr/include/boost/range/algorithm/for_each.hpp	/^inline UnaryFunction for_each(const SinglePassRange& rng, UnaryFunction fun)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, UnaryFunction fun)
boost::range::for_each	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^        inline Fn2 for_each(SinglePassRange1& rng1, SinglePassRange2& rng2, Fn2 fn)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, SinglePassRange2& rng2, Fn2 fn)
boost::range::for_each	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^        inline Fn2 for_each(SinglePassRange1& rng1, const SinglePassRange2& rng2, Fn2 fn)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, const SinglePassRange2& rng2, Fn2 fn)
boost::range::for_each	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^        inline Fn2 for_each(const SinglePassRange1& rng1, SinglePassRange2& rng2, Fn2 fn)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, SinglePassRange2& rng2, Fn2 fn)
boost::range::for_each	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^        inline Fn2 for_each(const SinglePassRange1& rng1, const SinglePassRange2& rng2, Fn2 fn)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, Fn2 fn)
boost::range::for_each_detail	/usr/include/boost/range/algorithm/for_each.hpp	/^        namespace for_each_detail$/;"	n	namespace:boost::range
boost::range::for_each_detail::for_each_impl	/usr/include/boost/range/algorithm/for_each.hpp	/^            for_each_impl(Iterator first, Iterator last, UnaryFunction fn,$/;"	f	namespace:boost::range::for_each_detail	signature:(Iterator first, Iterator last, UnaryFunction fn, typename disable_if< is_reference_wrapper<UnaryFunction>, void >::type* = 0)
boost::range::for_each_detail::for_each_impl	/usr/include/boost/range/algorithm/for_each.hpp	/^            for_each_impl(Iterator first, Iterator last, UnaryFunction fun,$/;"	f	namespace:boost::range::for_each_detail	signature:(Iterator first, Iterator last, UnaryFunction fun, typename enable_if< is_reference_wrapper<UnaryFunction>, void >::type* = 0)
boost::range::generate	/usr/include/boost/range/algorithm/generate.hpp	/^inline ForwardRange& generate( ForwardRange& rng, Generator gen )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Generator gen )
boost::range::generate	/usr/include/boost/range/algorithm/generate.hpp	/^inline const ForwardRange& generate( const ForwardRange& rng, Generator gen )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Generator gen )
boost::range::includes	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline bool includes(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2)
boost::range::includes	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline bool includes(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)
boost::range::inplace_merge	/usr/include/boost/range/algorithm/inplace_merge.hpp	/^inline BidirectionalRange& inplace_merge(BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng, BOOST_DEDUCED_TYPENAME boost::range_iterator<BidirectionalRange>::type middle, BinaryPredicate pred)
boost::range::inplace_merge	/usr/include/boost/range/algorithm/inplace_merge.hpp	/^inline BidirectionalRange& inplace_merge(BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type middle)
boost::range::inplace_merge	/usr/include/boost/range/algorithm/inplace_merge.hpp	/^inline const BidirectionalRange& inplace_merge(const BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, BOOST_DEDUCED_TYPENAME boost::range_iterator<const BidirectionalRange>::type middle)
boost::range::inplace_merge	/usr/include/boost/range/algorithm/inplace_merge.hpp	/^inline const BidirectionalRange& inplace_merge(const BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, BOOST_DEDUCED_TYPENAME boost::range_iterator<const BidirectionalRange>::type middle, BinaryPredicate pred)
boost::range::insert	/usr/include/boost/range/algorithm_ext/insert.hpp	/^inline Container& insert( Container& on,$/;"	f	namespace:boost::range	signature:( Container& on, BOOST_DEDUCED_TYPENAME Container::iterator before, const Range& from )
boost::range::iota	/usr/include/boost/range/algorithm_ext/iota.hpp	/^inline ForwardRange& iota( ForwardRange& rng, Value x )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Value x )
boost::range::iota	/usr/include/boost/range/algorithm_ext/iota.hpp	/^inline const ForwardRange& iota( const ForwardRange& rng, Value x )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Value x )
boost::range::is_sorted	/usr/include/boost/range/algorithm_ext/is_sorted.hpp	/^inline bool is_sorted(const SinglePassRange& rng)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng)
boost::range::is_sorted	/usr/include/boost/range/algorithm_ext/is_sorted.hpp	/^inline bool is_sorted(const SinglePassRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, BinaryPredicate pred)
boost::range::istream_range	/usr/include/boost/range/istream_range.hpp	/^        istream_range(std::basic_istream<Elem, Traits>& in)$/;"	f	namespace:boost::range	signature:(std::basic_istream<Elem, Traits>& in)
boost::range::join	/usr/include/boost/range/join.hpp	/^join(SinglePassRange1& r1, SinglePassRange2& r2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& r1, SinglePassRange2& r2)
boost::range::join	/usr/include/boost/range/join.hpp	/^join(const SinglePassRange1& r1, const SinglePassRange2& r2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& r1, const SinglePassRange2& r2)
boost::range::joined_range	/usr/include/boost/range/join.hpp	/^class joined_range$/;"	c	namespace:boost::range	inherits:range_detail::joined_type::type
boost::range::joined_range::base_t	/usr/include/boost/range/join.hpp	/^                    SinglePassRange1, SinglePassRange2>::type base_t;$/;"	t	class:boost::range::joined_range	access:private
boost::range::joined_range::iterator_t	/usr/include/boost/range/join.hpp	/^        > iterator_t;$/;"	t	class:boost::range::joined_range	access:private
boost::range::joined_range::joined_range	/usr/include/boost/range/join.hpp	/^    joined_range(SinglePassRange1& rng1, SinglePassRange2& rng2)$/;"	f	class:boost::range::joined_range	access:public	signature:(SinglePassRange1& rng1, SinglePassRange2& rng2)
boost::range::lexicographical_compare	/usr/include/boost/range/algorithm/lexicographical_compare.hpp	/^inline bool lexicographical_compare(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2)
boost::range::lexicographical_compare	/usr/include/boost/range/algorithm/lexicographical_compare.hpp	/^inline bool lexicographical_compare(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)
boost::range::lower_bound	/usr/include/boost/range/algorithm/lower_bound.hpp	/^lower_bound( ForwardRange& rng, Value val )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Value val )
boost::range::lower_bound	/usr/include/boost/range/algorithm/lower_bound.hpp	/^lower_bound( ForwardRange& rng, Value val, SortPredicate pred )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Value val, SortPredicate pred )
boost::range::lower_bound	/usr/include/boost/range/algorithm/lower_bound.hpp	/^lower_bound( const ForwardRange& rng, Value val )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Value val )
boost::range::lower_bound	/usr/include/boost/range/algorithm/lower_bound.hpp	/^lower_bound( const ForwardRange& rng, Value val, SortPredicate pred )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Value val, SortPredicate pred )
boost::range::make_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& make_heap(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
boost::range::make_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& make_heap(RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, Compare comp_pred)
boost::range::make_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& make_heap(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
boost::range::make_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& make_heap(const RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, Compare comp_pred)
boost::range::max_element	/usr/include/boost/range/algorithm/max_element.hpp	/^max_element(ForwardRange& rng)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng)
boost::range::max_element	/usr/include/boost/range/algorithm/max_element.hpp	/^max_element(ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, BinaryPredicate pred)
boost::range::max_element	/usr/include/boost/range/algorithm/max_element.hpp	/^max_element(const ForwardRange& rng)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng)
boost::range::max_element	/usr/include/boost/range/algorithm/max_element.hpp	/^max_element(const ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, BinaryPredicate pred)
boost::range::merge	/usr/include/boost/range/algorithm/merge.hpp	/^inline OutputIterator merge(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out)
boost::range::merge	/usr/include/boost/range/algorithm/merge.hpp	/^inline OutputIterator merge(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryPredicate pred)
boost::range::min_element	/usr/include/boost/range/algorithm/min_element.hpp	/^min_element(ForwardRange& rng)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng)
boost::range::min_element	/usr/include/boost/range/algorithm/min_element.hpp	/^min_element(ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, BinaryPredicate pred)
boost::range::min_element	/usr/include/boost/range/algorithm/min_element.hpp	/^min_element(const ForwardRange& rng)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng)
boost::range::min_element	/usr/include/boost/range/algorithm/min_element.hpp	/^min_element(const ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, BinaryPredicate pred)
boost::range::mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(SinglePassRange1& rng1, SinglePassRange2 & rng2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, SinglePassRange2 & rng2)
boost::range::mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(SinglePassRange1& rng1, SinglePassRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, SinglePassRange2& rng2, BinaryPredicate pred)
boost::range::mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(SinglePassRange1& rng1, const SinglePassRange2 & rng2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, const SinglePassRange2 & rng2)
boost::range::mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)
boost::range::mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(const SinglePassRange1& rng1, SinglePassRange2& rng2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, SinglePassRange2& rng2)
boost::range::mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(const SinglePassRange1& rng1, SinglePassRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, SinglePassRange2& rng2, BinaryPredicate pred)
boost::range::mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(const SinglePassRange1& rng1, const SinglePassRange2& rng2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2)
boost::range::mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(const SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)
boost::range::next_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool next_permutation(BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng)
boost::range::next_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool next_permutation(BidirectionalRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng, Compare comp_pred)
boost::range::next_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool next_permutation(const BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng)
boost::range::next_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool next_permutation(const BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, Compare comp_pred)
boost::range::nth_element	/usr/include/boost/range/algorithm/nth_element.hpp	/^inline RandomAccessRange& nth_element(RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type nth)
boost::range::nth_element	/usr/include/boost/range/algorithm/nth_element.hpp	/^inline RandomAccessRange& nth_element(RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type nth, BinaryPredicate sort_pred)
boost::range::nth_element	/usr/include/boost/range/algorithm/nth_element.hpp	/^inline const RandomAccessRange& nth_element(const RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type nth)
boost::range::nth_element	/usr/include/boost/range/algorithm/nth_element.hpp	/^inline const RandomAccessRange& nth_element(const RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type nth, BinaryPredicate sort_pred)
boost::range::overwrite	/usr/include/boost/range/algorithm_ext/overwrite.hpp	/^inline void overwrite( const SinglePassRange1& from, SinglePassRange2& to )$/;"	f	namespace:boost::range	signature:( const SinglePassRange1& from, SinglePassRange2& to )
boost::range::overwrite	/usr/include/boost/range/algorithm_ext/overwrite.hpp	/^inline void overwrite( const SinglePassRange1& from, const SinglePassRange2& to )$/;"	f	namespace:boost::range	signature:( const SinglePassRange1& from, const SinglePassRange2& to )
boost::range::partial_sort	/usr/include/boost/range/algorithm/partial_sort.hpp	/^inline RandomAccessRange& partial_sort(RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type middle)
boost::range::partial_sort	/usr/include/boost/range/algorithm/partial_sort.hpp	/^inline RandomAccessRange& partial_sort(RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type middle, BinaryPredicate sort_pred)
boost::range::partial_sort	/usr/include/boost/range/algorithm/partial_sort.hpp	/^inline const RandomAccessRange& partial_sort(const RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type middle)
boost::range::partial_sort	/usr/include/boost/range/algorithm/partial_sort.hpp	/^inline const RandomAccessRange& partial_sort(const RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type middle, BinaryPredicate sort_pred)
boost::range::partial_sort_copy	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	/^partial_sort_copy(const SinglePassRange& rng1, RandomAccessRange& rng2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng1, RandomAccessRange& rng2)
boost::range::partial_sort_copy	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	/^partial_sort_copy(const SinglePassRange& rng1, RandomAccessRange& rng2,$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng1, RandomAccessRange& rng2, BinaryPredicate pred)
boost::range::partial_sort_copy	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	/^partial_sort_copy(const SinglePassRange& rng1, const RandomAccessRange& rng2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng1, const RandomAccessRange& rng2)
boost::range::partial_sort_copy	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	/^partial_sort_copy(const SinglePassRange& rng1, const RandomAccessRange& rng2,$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng1, const RandomAccessRange& rng2, BinaryPredicate pred)
boost::range::partition	/usr/include/boost/range/algorithm/partition.hpp	/^partition(ForwardRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, UnaryPredicate pred)
boost::range::partition	/usr/include/boost/range/algorithm/partition.hpp	/^partition(const ForwardRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, UnaryPredicate pred)
boost::range::pop_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& pop_heap(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
boost::range::pop_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& pop_heap(RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, Compare comp_pred)
boost::range::pop_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& pop_heap(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
boost::range::pop_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& pop_heap(const RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, Compare comp_pred)
boost::range::prev_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool prev_permutation(BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng)
boost::range::prev_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool prev_permutation(BidirectionalRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng, Compare comp_pred)
boost::range::prev_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool prev_permutation(const BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng)
boost::range::prev_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool prev_permutation(const BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, Compare comp_pred)
boost::range::push_back	/usr/include/boost/range/algorithm_ext/push_back.hpp	/^inline Container& push_back( Container& on, const Range& from )$/;"	f	namespace:boost::range	signature:( Container& on, const Range& from )
boost::range::push_front	/usr/include/boost/range/algorithm_ext/push_front.hpp	/^inline Container& push_front( Container& on, const Range& from )$/;"	f	namespace:boost::range	signature:( Container& on, const Range& from )
boost::range::push_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& push_heap(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
boost::range::push_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& push_heap(RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, Compare comp_pred)
boost::range::push_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& push_heap(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
boost::range::push_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& push_heap(const RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, Compare comp_pred)
boost::range::random_shuffle	/usr/include/boost/range/algorithm/random_shuffle.hpp	/^inline RandomAccessRange& random_shuffle(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
boost::range::random_shuffle	/usr/include/boost/range/algorithm/random_shuffle.hpp	/^inline RandomAccessRange& random_shuffle(RandomAccessRange& rng, Generator& gen)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, Generator& gen)
boost::range::random_shuffle	/usr/include/boost/range/algorithm/random_shuffle.hpp	/^inline const RandomAccessRange& random_shuffle(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
boost::range::random_shuffle	/usr/include/boost/range/algorithm/random_shuffle.hpp	/^inline const RandomAccessRange& random_shuffle(const RandomAccessRange& rng, Generator& gen)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, Generator& gen)
boost::range::remove	/usr/include/boost/range/algorithm/remove.hpp	/^remove(ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, const Value& val)
boost::range::remove	/usr/include/boost/range/algorithm/remove.hpp	/^remove(const ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val)
boost::range::remove_copy	/usr/include/boost/range/algorithm/remove_copy.hpp	/^remove_copy(const SinglePassRange& rng, OutputIterator out_it, const Value& val)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, OutputIterator out_it, const Value& val)
boost::range::remove_erase	/usr/include/boost/range/algorithm_ext/erase.hpp	/^inline Container& remove_erase( Container& on, const T& val )$/;"	f	namespace:boost::range	signature:( Container& on, const T& val )
boost::range::remove_erase_if	/usr/include/boost/range/algorithm_ext/erase.hpp	/^inline Container& remove_erase_if( Container& on, Pred pred )$/;"	f	namespace:boost::range	signature:( Container& on, Pred pred )
boost::range::remove_if	/usr/include/boost/range/algorithm/remove_if.hpp	/^remove_if(ForwardRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, UnaryPredicate pred)
boost::range::remove_if	/usr/include/boost/range/algorithm/remove_if.hpp	/^remove_if(const ForwardRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, UnaryPredicate pred)
boost::range::replace	/usr/include/boost/range/algorithm/replace.hpp	/^replace(ForwardRange& rng, const Value& what,$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, const Value& what, const Value& with_what)
boost::range::replace	/usr/include/boost/range/algorithm/replace.hpp	/^replace(const ForwardRange& rng, const Value& what,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& what, const Value& with_what)
boost::range::replace_copy	/usr/include/boost/range/algorithm/replace_copy.hpp	/^replace_copy(const ForwardRange& rng, OutputIterator out_it, const Value& what,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, OutputIterator out_it, const Value& what, const Value& with_what)
boost::range::replace_copy_if	/usr/include/boost/range/algorithm/replace_copy_if.hpp	/^replace_copy_if(const ForwardRange& rng, OutputIterator out_it, Predicate pred,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, OutputIterator out_it, Predicate pred, const Value& with_what)
boost::range::replace_if	/usr/include/boost/range/algorithm/replace_if.hpp	/^    replace_if(ForwardRange& rng, UnaryPredicate pred,$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, UnaryPredicate pred, const Value& val)
boost::range::replace_if	/usr/include/boost/range/algorithm/replace_if.hpp	/^    replace_if(const ForwardRange& rng, UnaryPredicate pred,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, UnaryPredicate pred, const Value& val)
boost::range::reverse	/usr/include/boost/range/algorithm/reverse.hpp	/^inline BidirectionalRange& reverse(BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng)
boost::range::reverse	/usr/include/boost/range/algorithm/reverse.hpp	/^inline const BidirectionalRange& reverse(const BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng)
boost::range::reverse_copy	/usr/include/boost/range/algorithm/reverse_copy.hpp	/^inline OutputIterator reverse_copy(const BidirectionalRange& rng, OutputIterator out)$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, OutputIterator out)
boost::range::rotate	/usr/include/boost/range/algorithm/rotate.hpp	/^inline ForwardRange& rotate(ForwardRange& rng,$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type middle)
boost::range::rotate	/usr/include/boost/range/algorithm/rotate.hpp	/^inline const ForwardRange& rotate(const ForwardRange& rng,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const ForwardRange>::type middle)
boost::range::rotate_copy	/usr/include/boost/range/algorithm/rotate_copy.hpp	/^    inline OutputIterator rotate_copy($/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const ForwardRange>::type middle, OutputIterator target )
boost::range::search	/usr/include/boost/range/algorithm/search.hpp	/^search(ForwardRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(ForwardRange1& rng1, const ForwardRange2& rng2)
boost::range::search	/usr/include/boost/range/algorithm/search.hpp	/^search(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)
boost::range::search	/usr/include/boost/range/algorithm/search.hpp	/^search(const ForwardRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(const ForwardRange1& rng1, const ForwardRange2& rng2)
boost::range::search	/usr/include/boost/range/algorithm/search.hpp	/^search(const ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)
boost::range::search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(ForwardRange& rng, Integer count, const Value& value)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, Integer count, const Value& value)
boost::range::search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(ForwardRange& rng, Integer count, const Value& value,$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, Integer count, const Value& value, BinaryPredicate binary_pred)
boost::range::search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(ForwardRange& rng, Integer count, const Value& value,$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, Integer count, const Value& value, BinaryPredicate pred)
boost::range::search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(const ForwardRange& rng, Integer count, const Value& value)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, Integer count, const Value& value)
boost::range::search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(const ForwardRange& rng, Integer count, const Value& value,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, Integer count, const Value& value, BinaryPredicate binary_pred)
boost::range::search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(const ForwardRange& rng, Integer count, const Value& value,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, Integer count, const Value& value, BinaryPredicate pred)
boost::range::set_difference	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_difference(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out)
boost::range::set_difference	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_difference(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryPredicate pred)
boost::range::set_intersection	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_intersection(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out)
boost::range::set_intersection	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_intersection(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryPredicate pred)
boost::range::set_symmetric_difference	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^set_symmetric_difference(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out)
boost::range::set_symmetric_difference	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^set_symmetric_difference(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryPredicate pred)
boost::range::set_union	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_union(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out)
boost::range::set_union	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_union(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryPredicate pred)
boost::range::sort	/usr/include/boost/range/algorithm/sort.hpp	/^inline RandomAccessRange& sort(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
boost::range::sort	/usr/include/boost/range/algorithm/sort.hpp	/^inline RandomAccessRange& sort(RandomAccessRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BinaryPredicate pred)
boost::range::sort	/usr/include/boost/range/algorithm/sort.hpp	/^inline const RandomAccessRange& sort(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
boost::range::sort	/usr/include/boost/range/algorithm/sort.hpp	/^inline const RandomAccessRange& sort(const RandomAccessRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BinaryPredicate pred)
boost::range::sort_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& sort_heap(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
boost::range::sort_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& sort_heap(RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, Compare comp_pred)
boost::range::sort_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& sort_heap(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
boost::range::sort_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& sort_heap(const RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, Compare comp_pred)
boost::range::stable_partition	/usr/include/boost/range/algorithm/stable_partition.hpp	/^stable_partition(BidirectionalRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng, UnaryPredicate pred)
boost::range::stable_partition	/usr/include/boost/range/algorithm/stable_partition.hpp	/^stable_partition(const BidirectionalRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, UnaryPredicate pred)
boost::range::stable_sort	/usr/include/boost/range/algorithm/stable_sort.hpp	/^inline RandomAccessRange& stable_sort(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
boost::range::stable_sort	/usr/include/boost/range/algorithm/stable_sort.hpp	/^inline RandomAccessRange& stable_sort(RandomAccessRange& rng, BinaryPredicate sort_pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BinaryPredicate sort_pred)
boost::range::stable_sort	/usr/include/boost/range/algorithm/stable_sort.hpp	/^inline const RandomAccessRange& stable_sort(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
boost::range::stable_sort	/usr/include/boost/range/algorithm/stable_sort.hpp	/^inline const RandomAccessRange& stable_sort(const RandomAccessRange& rng, BinaryPredicate sort_pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BinaryPredicate sort_pred)
boost::range::swap_ranges	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^swap_ranges(SinglePassRange1& range1, SinglePassRange2& range2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& range1, SinglePassRange2& range2)
boost::range::swap_ranges	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^swap_ranges(SinglePassRange1& range1, const SinglePassRange2& range2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& range1, const SinglePassRange2& range2)
boost::range::swap_ranges	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^swap_ranges(const SinglePassRange1& range1, SinglePassRange2& range2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& range1, SinglePassRange2& range2)
boost::range::swap_ranges	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^swap_ranges(const SinglePassRange1& range1, const SinglePassRange2& range2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& range1, const SinglePassRange2& range2)
boost::range::transform	/usr/include/boost/range/algorithm/transform.hpp	/^        transform(const SinglePassRange1& rng,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng, OutputIterator out, UnaryOperation fun)
boost::range::transform	/usr/include/boost/range/algorithm/transform.hpp	/^        transform(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryOperation fun)
boost::range::unique	/usr/include/boost/range/algorithm/unique.hpp	/^unique( ForwardRange& rng )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng )
boost::range::unique	/usr/include/boost/range/algorithm/unique.hpp	/^unique( ForwardRange& rng, BinaryPredicate pred )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, BinaryPredicate pred )
boost::range::unique	/usr/include/boost/range/algorithm/unique.hpp	/^unique( const ForwardRange& rng )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng )
boost::range::unique	/usr/include/boost/range/algorithm/unique.hpp	/^unique( const ForwardRange& rng, BinaryPredicate pred )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, BinaryPredicate pred )
boost::range::unique_copy	/usr/include/boost/range/algorithm/unique_copy.hpp	/^unique_copy( const SinglePassRange& rng, OutputIterator out_it )$/;"	f	namespace:boost::range	signature:( const SinglePassRange& rng, OutputIterator out_it )
boost::range::unique_copy	/usr/include/boost/range/algorithm/unique_copy.hpp	/^unique_copy( const SinglePassRange& rng, OutputIterator out_it,$/;"	f	namespace:boost::range	signature:( const SinglePassRange& rng, OutputIterator out_it, BinaryPredicate pred )
boost::range::upper_bound	/usr/include/boost/range/algorithm/upper_bound.hpp	/^upper_bound( ForwardRange& rng, Value val )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Value val )
boost::range::upper_bound	/usr/include/boost/range/algorithm/upper_bound.hpp	/^upper_bound( ForwardRange& rng, Value val, SortPredicate pred )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Value val, SortPredicate pred )
boost::range::upper_bound	/usr/include/boost/range/algorithm/upper_bound.hpp	/^upper_bound( const ForwardRange& rng, Value val )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Value val )
boost::range::upper_bound	/usr/include/boost/range/algorithm/upper_bound.hpp	/^upper_bound( const ForwardRange& rng, Value val, SortPredicate pred )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Value val, SortPredicate pred )
boost::range_adl_barrier	/usr/include/boost/range/begin.hpp	/^    namespace range_adl_barrier$/;"	n	namespace:boost
boost::range_adl_barrier	/usr/include/boost/range/begin.hpp	/^namespace range_adl_barrier$/;"	n	namespace:boost
boost::range_adl_barrier	/usr/include/boost/range/detail/begin.hpp	/^    namespace range_adl_barrier$/;"	n	namespace:boost
boost::range_adl_barrier	/usr/include/boost/range/detail/end.hpp	/^    namespace range_adl_barrier$/;"	n	namespace:boost
boost::range_adl_barrier	/usr/include/boost/range/end.hpp	/^    namespace range_adl_barrier$/;"	n	namespace:boost
boost::range_adl_barrier	/usr/include/boost/range/end.hpp	/^namespace range_adl_barrier$/;"	n	namespace:boost
boost::range_adl_barrier::begin	/usr/include/boost/range/begin.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<T>::type begin( T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( T& r )
boost::range_adl_barrier::begin	/usr/include/boost/range/begin.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<const T>::type begin( const T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( const T& r )
boost::range_adl_barrier::begin	/usr/include/boost/range/detail/begin.hpp	/^        begin( C& c )$/;"	f	namespace:boost::range_adl_barrier	signature:( C& c )
boost::range_adl_barrier::const_begin	/usr/include/boost/range/begin.hpp	/^        const_begin( const T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( const T& r )
boost::range_adl_barrier::const_end	/usr/include/boost/range/end.hpp	/^        const_end( const T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( const T& r )
boost::range_adl_barrier::end	/usr/include/boost/range/detail/end.hpp	/^        end( C& c )$/;"	f	namespace:boost::range_adl_barrier	signature:( C& c )
boost::range_adl_barrier::end	/usr/include/boost/range/end.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<T>::type end( T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( T& r )
boost::range_adl_barrier::end	/usr/include/boost/range/end.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<const T>::type end( const T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( const T& r )
boost::range_category	/usr/include/boost/range/category.hpp	/^    struct range_category : iterator_category< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_category
boost::range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator : range_detail::extract_const_iterator<C>$/;"	s	namespace:boost	inherits:range_detail::extract_const_iterator
boost::range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator< T[sz] >$/;"	s	namespace:boost
boost::range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator< std::pair<Iterator,Iterator> >$/;"	s	namespace:boost
boost::range_const_iterator	/usr/include/boost/range/detail/const_iterator.hpp	/^    class range_const_iterator$/;"	c	namespace:boost
boost::range_const_iterator	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_const_iterator<T*>$/;"	s	namespace:boost
boost::range_const_iterator::c_type	/usr/include/boost/range/detail/const_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_const_iterator	access:private
boost::range_const_iterator::type	/usr/include/boost/range/const_iterator.hpp	/^        typedef Iterator type;$/;"	t	struct:boost::range_const_iterator	access:public
boost::range_const_iterator::type	/usr/include/boost/range/const_iterator.hpp	/^        typedef const T* type;$/;"	t	struct:boost::range_const_iterator	access:public
boost::range_const_iterator::type	/usr/include/boost/range/detail/const_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range_const_iterator_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_const_iterator	access:public
boost::range_const_iterator::type	/usr/include/boost/range/detail/str_types.hpp	/^        typedef const T* type;$/;"	t	struct:boost::range_const_iterator	access:public
boost::range_const_reverse_iterator	/usr/include/boost/range/const_reverse_iterator.hpp	/^    struct range_const_reverse_iterator : range_reverse_iterator<const C>$/;"	s	namespace:boost	inherits:range_reverse_iterator
boost::range_detail	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/filtered.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/indexed.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/indirected.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/map.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/replaced.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/replaced_if.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/reversed.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/strided.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/tokenized.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/transformed.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/adaptor/uniqued.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/algorithm/equal.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/algorithm/mismatch.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/algorithm/search_n.hpp	/^namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/algorithm/transform.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/any_range.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/as_literal.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/begin.hpp	/^namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/combine.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/concepts.hpp	/^    namespace range_detail {$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/const_iterator.hpp	/^    namespace range_detail {$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/any_iterator.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/begin.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/common.hpp	/^    namespace range_detail $/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/const_iterator.hpp	/^    namespace range_detail $/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/demote_iterator_traversal_tag.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/detail_str.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/difference_type.hpp	/^    namespace range_detail $/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/empty.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/end.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/extract_optional_type.hpp	/^    namespace range_detail {$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/implementation_help.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/iterator.hpp	/^    namespace range_detail $/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/join_iterator.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/misc_concept.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/remove_extent.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/safe_bool.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/sfinae.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/size.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/size_type.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/value_type.hpp	/^    namespace range_detail $/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/vc6/end.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/vc6/size.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/end.hpp	/^namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/has_range_iterator.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/irange.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/join.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/mutable_iterator.hpp	/^    namespace range_detail {$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/size.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline T* array_end( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
boost::range_detail::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const T* array_end( const T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
boost::range_detail::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t array_size( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
boost::range_detail::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t array_size( const T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
boost::range_detail::BidirectionalIteratorConcept	/usr/include/boost/range/concepts.hpp	/^         struct BidirectionalIteratorConcept$/;"	s	namespace:boost::range_detail	inherits:ForwardIteratorConcept
boost::range_detail::BidirectionalIteratorConcept::BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^             BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)$/;"	f	struct:boost::range_detail::BidirectionalIteratorConcept	access:public	signature:(BidirectionalIteratorConcept)
boost::range_detail::BidirectionalIteratorConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^             BOOST_RANGE_CONCEPT_ASSERT(($/;"	p	struct:boost::range_detail::BidirectionalIteratorConcept	access:public	signature:( Convertible< BOOST_DEDUCED_TYPENAME BidirectionalIteratorConcept::traversal_category, bidirectional_traversal_tag >)
boost::range_detail::BidirectionalIteratorConcept::i	/usr/include/boost/range/concepts.hpp	/^             Iterator i;$/;"	m	struct:boost::range_detail::BidirectionalIteratorConcept	access:private
boost::range_detail::ForwardIteratorConcept	/usr/include/boost/range/concepts.hpp	/^        struct ForwardIteratorConcept$/;"	s	namespace:boost::range_detail	inherits:SinglePassIteratorConcept,DefaultConstructible
boost::range_detail::ForwardIteratorConcept::BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^            BOOST_CONCEPT_USAGE(ForwardIteratorConcept)$/;"	f	struct:boost::range_detail::ForwardIteratorConcept	access:public	signature:(ForwardIteratorConcept)
boost::range_detail::ForwardIteratorConcept::BOOST_MPL_ASSERT	/usr/include/boost/range/concepts.hpp	/^            BOOST_MPL_ASSERT((is_integral<difference_type>));$/;"	p	struct:boost::range_detail::ForwardIteratorConcept	access:public	signature:(is_integral<difference_type>)
boost::range_detail::ForwardIteratorConcept::BOOST_MPL_ASSERT_RELATION	/usr/include/boost/range/concepts.hpp	/^            BOOST_MPL_ASSERT_RELATION(std::numeric_limits<difference_type>::is_signed, ==, true);$/;"	p	struct:boost::range_detail::ForwardIteratorConcept	access:public	signature:(std::numeric_limits<difference_type>::is_signed, ==, true)
boost::range_detail::ForwardIteratorConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(($/;"	p	struct:boost::range_detail::ForwardIteratorConcept	access:public	signature:( Convertible< BOOST_DEDUCED_TYPENAME ForwardIteratorConcept::traversal_category, forward_traversal_tag >)
boost::range_detail::ForwardIteratorConcept::difference_type	/usr/include/boost/range/concepts.hpp	/^            typedef BOOST_DEDUCED_TYPENAME boost::detail::iterator_traits<Iterator>::difference_type difference_type;$/;"	t	struct:boost::range_detail::ForwardIteratorConcept	access:public
boost::range_detail::ForwardIteratorConcept::i	/usr/include/boost/range/concepts.hpp	/^            Iterator i;$/;"	m	struct:boost::range_detail::ForwardIteratorConcept	access:private
boost::range_detail::IncrementableIteratorConcept	/usr/include/boost/range/concepts.hpp	/^        struct IncrementableIteratorConcept : CopyConstructible<Iterator>$/;"	s	namespace:boost::range_detail	inherits:CopyConstructible
boost::range_detail::IncrementableIteratorConcept::BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^            BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)$/;"	f	struct:boost::range_detail::IncrementableIteratorConcept	access:public	signature:(IncrementableIteratorConcept)
boost::range_detail::IncrementableIteratorConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(($/;"	p	struct:boost::range_detail::IncrementableIteratorConcept	access:public	signature:( Convertible< traversal_category, incrementable_traversal_tag >)
boost::range_detail::IncrementableIteratorConcept::i	/usr/include/boost/range/concepts.hpp	/^            Iterator i;$/;"	m	struct:boost::range_detail::IncrementableIteratorConcept	access:private
boost::range_detail::IncrementableIteratorConcept::traversal_category	/usr/include/boost/range/concepts.hpp	/^            typedef BOOST_DEDUCED_TYPENAME iterator_traversal<Iterator>::type traversal_category;$/;"	t	struct:boost::range_detail::IncrementableIteratorConcept	access:public
boost::range_detail::RandomAccessIteratorConcept	/usr/include/boost/range/concepts.hpp	/^         struct RandomAccessIteratorConcept$/;"	s	namespace:boost::range_detail	inherits:BidirectionalIteratorConcept
boost::range_detail::RandomAccessIteratorConcept::BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^             BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)$/;"	f	struct:boost::range_detail::RandomAccessIteratorConcept	access:public	signature:(RandomAccessIteratorConcept)
boost::range_detail::RandomAccessIteratorConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^             BOOST_RANGE_CONCEPT_ASSERT(($/;"	p	struct:boost::range_detail::RandomAccessIteratorConcept	access:public	signature:( Convertible< BOOST_DEDUCED_TYPENAME RandomAccessIteratorConcept::traversal_category, random_access_traversal_tag >)
boost::range_detail::RandomAccessIteratorConcept::i	/usr/include/boost/range/concepts.hpp	/^             Iterator i;$/;"	m	struct:boost::range_detail::RandomAccessIteratorConcept	access:private
boost::range_detail::RandomAccessIteratorConcept::j	/usr/include/boost/range/concepts.hpp	/^             Iterator j;$/;"	m	struct:boost::range_detail::RandomAccessIteratorConcept	access:private
boost::range_detail::RandomAccessIteratorConcept::n	/usr/include/boost/range/concepts.hpp	/^             BOOST_DEDUCED_TYPENAME RandomAccessIteratorConcept::difference_type n;$/;"	m	struct:boost::range_detail::RandomAccessIteratorConcept	access:private
boost::range_detail::SameTypeConcept	/usr/include/boost/range/detail/misc_concept.hpp	/^        class SameTypeConcept$/;"	c	namespace:boost::range_detail
boost::range_detail::SameTypeConcept::BOOST_CONCEPT_USAGE	/usr/include/boost/range/detail/misc_concept.hpp	/^            BOOST_CONCEPT_USAGE(SameTypeConcept)$/;"	f	class:boost::range_detail::SameTypeConcept	access:public	signature:(SameTypeConcept)
boost::range_detail::SameTypeConcept::a	/usr/include/boost/range/detail/misc_concept.hpp	/^            T1 a;$/;"	m	class:boost::range_detail::SameTypeConcept	access:private
boost::range_detail::SameTypeConcept::b	/usr/include/boost/range/detail/misc_concept.hpp	/^            T2 b;$/;"	m	class:boost::range_detail::SameTypeConcept	access:private
boost::range_detail::SameTypeConcept::same_type	/usr/include/boost/range/detail/misc_concept.hpp	/^            template<typename T> void same_type(T,T) {}$/;"	f	class:boost::range_detail::SameTypeConcept	access:private	signature:(T,T)
boost::range_detail::SinglePassIteratorConcept	/usr/include/boost/range/concepts.hpp	/^        struct SinglePassIteratorConcept$/;"	s	namespace:boost::range_detail	inherits:IncrementableIteratorConcept,EqualityComparable
boost::range_detail::SinglePassIteratorConcept::BOOST_CONCEPT_USAGE	/usr/include/boost/range/concepts.hpp	/^            BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)$/;"	f	struct:boost::range_detail::SinglePassIteratorConcept	access:public	signature:(SinglePassIteratorConcept)
boost::range_detail::SinglePassIteratorConcept::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/concepts.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(($/;"	p	struct:boost::range_detail::SinglePassIteratorConcept	access:public	signature:( Convertible< BOOST_DEDUCED_TYPENAME SinglePassIteratorConcept::traversal_category, single_pass_traversal_tag >)
boost::range_detail::SinglePassIteratorConcept::i	/usr/include/boost/range/concepts.hpp	/^            Iterator i;$/;"	m	struct:boost::range_detail::SinglePassIteratorConcept	access:private
boost::range_detail::adjacent_excl_holder	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        struct adjacent_excl_holder : holder<T>$/;"	s	namespace:boost::range_detail	inherits:holder
boost::range_detail::adjacent_excl_holder::adjacent_excl_holder	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            adjacent_excl_holder( T r ) : holder<T>(r)$/;"	f	struct:boost::range_detail::adjacent_excl_holder	access:public	signature:( T r )
boost::range_detail::adjacent_filtered_range	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        struct adjacent_filtered_range$/;"	s	namespace:boost::range_detail	inherits:iterator_range
boost::range_detail::adjacent_filtered_range::adjacent_filtered_range	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            adjacent_filtered_range( const P& p, R& r )$/;"	f	struct:boost::range_detail::adjacent_filtered_range	access:public	signature:( const P& p, R& r )
boost::range_detail::adjacent_filtered_range::base_range	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^                base_range;$/;"	t	struct:boost::range_detail::adjacent_filtered_range	access:private
boost::range_detail::adjacent_filtered_range::raw_iterator	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_iterator<R>::type raw_iterator;$/;"	t	struct:boost::range_detail::adjacent_filtered_range	access:private
boost::range_detail::adjacent_filtered_range::skip_iter	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^                skip_iter;$/;"	t	struct:boost::range_detail::adjacent_filtered_range	access:private
boost::range_detail::adjacent_holder	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        struct adjacent_holder : holder<T>$/;"	s	namespace:boost::range_detail	inherits:holder
boost::range_detail::adjacent_holder::adjacent_holder	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            adjacent_holder( T r ) : holder<T>(r)$/;"	f	struct:boost::range_detail::adjacent_holder	access:public	signature:( T r )
boost::range_detail::any_bidirectional_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_bidirectional_iterator_interface$/;"	s	namespace:boost::range_detail	inherits:any_forward_iterator_interface
boost::range_detail::any_bidirectional_iterator_interface::buffer_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_forward_iterator_interface<Reference, Buffer>::buffer_type buffer_type;$/;"	t	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public
boost::range_detail::any_bidirectional_iterator_interface::clone	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_bidirectional_iterator_interface::clone_const_ref	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_const_ref(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_bidirectional_iterator_interface::clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_reference_as_value(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_bidirectional_iterator_interface::const_reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_forward_iterator_interface<Reference, Buffer>::const_reference const_reference;$/;"	t	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public
boost::range_detail::any_bidirectional_iterator_interface::decrement	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual void decrement() = 0;$/;"	p	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public	signature:()
boost::range_detail::any_bidirectional_iterator_interface::reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_forward_iterator_interface<Reference, Buffer>::reference reference;$/;"	t	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public
boost::range_detail::any_bidirectional_iterator_interface::reference_as_value_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_forward_iterator_interface<Reference, Buffer>::reference_as_value_type reference_as_value_type;$/;"	t	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public
boost::range_detail::any_bidirectional_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        class any_bidirectional_iterator_wrapper$/;"	c	namespace:boost::range_detail	inherits:any_bidirectional_iterator_interface
boost::range_detail::any_bidirectional_iterator_wrapper::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( BidirectionalIteratorConcept<WrappedIterator> ));$/;"	p	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:private	signature:( BidirectionalIteratorConcept<WrappedIterator> )
boost::range_detail::any_bidirectional_iterator_wrapper::any_bidirectional_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            any_bidirectional_iterator_wrapper()$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:()
boost::range_detail::any_bidirectional_iterator_wrapper::any_bidirectional_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            explicit any_bidirectional_iterator_wrapper(const WrappedIterator& it)$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:(const WrappedIterator& it)
boost::range_detail::any_bidirectional_iterator_wrapper::clone	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual any_bidirectional_iterator_wrapper* clone($/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:( typename any_bidirectional_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_bidirectional_iterator_wrapper::clone_const_ref	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_const_ref($/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:( typename any_bidirectional_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_bidirectional_iterator_wrapper::clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_reference_as_value($/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:( typename any_bidirectional_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_bidirectional_iterator_wrapper::decrement	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void decrement()$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:()
boost::range_detail::any_bidirectional_iterator_wrapper::dereference	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual Reference dereference() const$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:() const
boost::range_detail::any_bidirectional_iterator_wrapper::equal	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual bool equal(const any_single_pass_iterator_interface<Reference, Buffer>& other) const$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:(const any_single_pass_iterator_interface<Reference, Buffer>& other) const
boost::range_detail::any_bidirectional_iterator_wrapper::increment	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void increment()$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:()
boost::range_detail::any_bidirectional_iterator_wrapper::m_it	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            WrappedIterator m_it;$/;"	m	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:private
boost::range_detail::any_forward_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_forward_iterator_interface$/;"	s	namespace:boost::range_detail	inherits:any_single_pass_iterator_interface
boost::range_detail::any_forward_iterator_interface::buffer_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_single_pass_iterator_interface<Reference, Buffer>::buffer_type buffer_type;$/;"	t	struct:boost::range_detail::any_forward_iterator_interface	access:public
boost::range_detail::any_forward_iterator_interface::clone	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_forward_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_forward_iterator_interface::clone_const_ref	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_const_ref(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_forward_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_forward_iterator_interface::clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_reference_as_value(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_forward_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_forward_iterator_interface::const_reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_single_pass_iterator_interface<Reference, Buffer>::const_reference const_reference;$/;"	t	struct:boost::range_detail::any_forward_iterator_interface	access:public
boost::range_detail::any_forward_iterator_interface::reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_single_pass_iterator_interface<Reference, Buffer>::reference reference;$/;"	t	struct:boost::range_detail::any_forward_iterator_interface	access:public
boost::range_detail::any_forward_iterator_interface::reference_as_value_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_single_pass_iterator_interface<Reference, Buffer>::reference_as_value_type reference_as_value_type;$/;"	t	struct:boost::range_detail::any_forward_iterator_interface	access:public
boost::range_detail::any_forward_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        class any_forward_iterator_wrapper$/;"	c	namespace:boost::range_detail	inherits:any_forward_iterator_interface
boost::range_detail::any_forward_iterator_wrapper::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( ForwardIteratorConcept<WrappedIterator> ));$/;"	p	class:boost::range_detail::any_forward_iterator_wrapper	access:private	signature:( ForwardIteratorConcept<WrappedIterator> )
boost::range_detail::any_forward_iterator_wrapper::any_forward_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            any_forward_iterator_wrapper()$/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:()
boost::range_detail::any_forward_iterator_wrapper::any_forward_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            explicit any_forward_iterator_wrapper(const WrappedIterator& it)$/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:(const WrappedIterator& it)
boost::range_detail::any_forward_iterator_wrapper::clone	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual any_forward_iterator_wrapper* clone($/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:( typename any_forward_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_forward_iterator_wrapper::clone_const_ref	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_const_ref($/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:( typename any_forward_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_forward_iterator_wrapper::clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_reference_as_value($/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:( typename any_forward_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_forward_iterator_wrapper::dereference	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual Reference dereference() const$/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:() const
boost::range_detail::any_forward_iterator_wrapper::equal	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual bool equal(const any_single_pass_iterator_interface<Reference, Buffer>& other) const$/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:(const any_single_pass_iterator_interface<Reference, Buffer>& other) const
boost::range_detail::any_forward_iterator_wrapper::increment	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void increment()$/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:()
boost::range_detail::any_forward_iterator_wrapper::m_it	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            WrappedIterator m_it;$/;"	m	class:boost::range_detail::any_forward_iterator_wrapper	access:private
boost::range_detail::any_incrementable_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_incrementable_iterator_interface$/;"	s	namespace:boost::range_detail
boost::range_detail::any_incrementable_iterator_interface::buffer_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef Buffer buffer_type;$/;"	t	struct:boost::range_detail::any_incrementable_iterator_interface	access:public
boost::range_detail::any_incrementable_iterator_interface::clone	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_incrementable_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_incrementable_iterator_interface::clone_const_ref	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_const_ref(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_incrementable_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_incrementable_iterator_interface::clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_reference_as_value(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_incrementable_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_incrementable_iterator_interface::const_reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            >::type const_reference;$/;"	t	struct:boost::range_detail::any_incrementable_iterator_interface	access:public
boost::range_detail::any_incrementable_iterator_interface::increment	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual void increment() = 0;$/;"	p	struct:boost::range_detail::any_incrementable_iterator_interface	access:public	signature:()
boost::range_detail::any_incrementable_iterator_interface::reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef Reference reference;$/;"	t	struct:boost::range_detail::any_incrementable_iterator_interface	access:public
boost::range_detail::any_incrementable_iterator_interface::reference_as_value_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            >::type reference_as_value_type;$/;"	t	struct:boost::range_detail::any_incrementable_iterator_interface	access:public
boost::range_detail::any_incrementable_iterator_interface::~any_incrementable_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual ~any_incrementable_iterator_interface() {}$/;"	f	struct:boost::range_detail::any_incrementable_iterator_interface	access:public	signature:()
boost::range_detail::any_incrementable_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        class any_incrementable_iterator_wrapper$/;"	c	namespace:boost::range_detail	inherits:any_incrementable_iterator_interface
boost::range_detail::any_incrementable_iterator_wrapper::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( IncrementableIteratorConcept<WrappedIterator> ));$/;"	p	class:boost::range_detail::any_incrementable_iterator_wrapper	access:private	signature:( IncrementableIteratorConcept<WrappedIterator> )
boost::range_detail::any_incrementable_iterator_wrapper::BOOST_STATIC_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_STATIC_ASSERT(( is_convertible<$/;"	p	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:( is_convertible< typename iterator_reference<WrappedIterator>::type , Reference >::value )
boost::range_detail::any_incrementable_iterator_wrapper::any_incrementable_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            any_incrementable_iterator_wrapper()$/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:()
boost::range_detail::any_incrementable_iterator_wrapper::any_incrementable_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            explicit any_incrementable_iterator_wrapper(wrapped_type it)$/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:(wrapped_type it)
boost::range_detail::any_incrementable_iterator_wrapper::clone	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual any_incrementable_iterator_wrapper* clone($/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:( typename any_incrementable_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_incrementable_iterator_wrapper::clone_const_ref	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_const_ref($/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:( typename any_incrementable_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_incrementable_iterator_wrapper::clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_reference_as_value($/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:( typename any_incrementable_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_incrementable_iterator_wrapper::increment	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void increment()$/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:()
boost::range_detail::any_incrementable_iterator_wrapper::m_it	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            wrapped_type m_it;$/;"	m	class:boost::range_detail::any_incrementable_iterator_wrapper	access:private
boost::range_detail::any_incrementable_iterator_wrapper::wrapped_type	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            typedef WrappedIterator wrapped_type;$/;"	t	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public
boost::range_detail::any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^        class any_iterator$/;"	c	namespace:boost::range_detail	inherits:iterator_facade
boost::range_detail::any_iterator::abstract_base_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            >::type abstract_base_type;$/;"	t	class:boost::range_detail::any_iterator	access:private
boost::range_detail::any_iterator::advance	/usr/include/boost/range/detail/any_iterator.hpp	/^            void advance(Difference offset)$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:(Difference offset)
boost::range_detail::any_iterator::any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator()$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:()
boost::range_detail::any_iterator::any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator(const any_iterator& other)$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:(const any_iterator& other)
boost::range_detail::any_iterator::any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator(const any_iterator<$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:(const any_iterator< OtherValue , OtherTraversal , OtherReference , OtherDifference , Buffer >& other, typename enable_if< typename is_convertible_to_value_as_reference< OtherReference , Reference >::type, enabler >::type* = 0 )
boost::range_detail::any_iterator::any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator(const any_iterator<$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:(const any_iterator< OtherValue , OtherTraversal , OtherReference , OtherDifference , Buffer >& other, typename enable_if< typename mpl::or_< typename mpl::and_< typename is_mutable_reference<OtherReference>::type, typename is_mutable_reference<Reference>::type >::type, typename mpl::and_< typename is_const_reference<OtherReference>::type, typename is_const_reference<Reference>::type >::type >::type, enabler >::type* = 0 )
boost::range_detail::any_iterator::any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator(const any_iterator<$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:(const any_iterator< OtherValue, OtherTraversal, OtherReference, OtherDifference, Buffer >& other, typename enable_if< typename mpl::and_< typename is_mutable_reference<OtherReference>::type, typename is_const_reference<Reference>::type >::type, enabler >::type* = 0 )
boost::range_detail::any_iterator::any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            explicit any_iterator($/;"	f	class:boost::range_detail::any_iterator	access:public	signature:( const WrappedIterator& wrapped_iterator, typename disable_if< typename is_any_iterator<WrappedIterator>::type , disabler >::type* = 0 )
boost::range_detail::any_iterator::base_type	/usr/include/boost/range/detail/any_iterator.hpp	/^                  > base_type;$/;"	t	class:boost::range_detail::any_iterator	access:private
boost::range_detail::any_iterator::buffer_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Buffer buffer_type;$/;"	t	class:boost::range_detail::any_iterator	access:private
boost::range_detail::any_iterator::clone	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator clone() const$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:() const
boost::range_detail::any_iterator::clone_const_ref	/usr/include/boost/range/detail/any_iterator.hpp	/^            clone_const_ref() const$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:() const
boost::range_detail::any_iterator::decrement	/usr/include/boost/range/detail/any_iterator.hpp	/^            void decrement()$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:()
boost::range_detail::any_iterator::dereference	/usr/include/boost/range/detail/any_iterator.hpp	/^            Reference dereference() const$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:() const
boost::range_detail::any_iterator::difference_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename base_type::difference_type difference_type;$/;"	t	class:boost::range_detail::any_iterator	access:public
boost::range_detail::any_iterator::disabler	/usr/include/boost/range/detail/any_iterator.hpp	/^            struct disabler {};$/;"	s	class:boost::range_detail::any_iterator	access:private
boost::range_detail::any_iterator::distance_to	/usr/include/boost/range/detail/any_iterator.hpp	/^            Difference distance_to(const any_iterator& other) const$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:(const any_iterator& other) const
boost::range_detail::any_iterator::enabler	/usr/include/boost/range/detail/any_iterator.hpp	/^            struct enabler {};$/;"	s	class:boost::range_detail::any_iterator	access:private
boost::range_detail::any_iterator::equal	/usr/include/boost/range/detail/any_iterator.hpp	/^            bool equal(const any_iterator& other) const$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:(const any_iterator& other) const
boost::range_detail::any_iterator::increment	/usr/include/boost/range/detail/any_iterator.hpp	/^            void increment()$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:()
boost::range_detail::any_iterator::m_buffer	/usr/include/boost/range/detail/any_iterator.hpp	/^            buffer_type m_buffer;$/;"	m	class:boost::range_detail::any_iterator	access:private
boost::range_detail::any_iterator::m_impl	/usr/include/boost/range/detail/any_iterator.hpp	/^            abstract_base_type* m_impl;$/;"	m	class:boost::range_detail::any_iterator	access:private
boost::range_detail::any_iterator::operator =	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator& operator=(const any_iterator& other)$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:(const any_iterator& other)
boost::range_detail::any_iterator::reference	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename base_type::reference reference;$/;"	t	class:boost::range_detail::any_iterator	access:public
boost::range_detail::any_iterator::swap	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator& swap(any_iterator& other)$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:(any_iterator& other)
boost::range_detail::any_iterator::value_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename base_type::value_type value_type;$/;"	t	class:boost::range_detail::any_iterator	access:public
boost::range_detail::any_iterator::~any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            ~any_iterator()$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:()
boost::range_detail::any_iterator_interface_type_generator	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_iterator_interface_type_generator<$/;"	s	namespace:boost::range_detail
boost::range_detail::any_iterator_interface_type_generator::type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                    > type;$/;"	t	struct:boost::range_detail::any_iterator_interface_type_generator	access:public
boost::range_detail::any_iterator_interface_type_generator::type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef any_bidirectional_iterator_interface<Reference, Buffer> type;$/;"	t	struct:boost::range_detail::any_iterator_interface_type_generator	access:public
boost::range_detail::any_iterator_interface_type_generator::type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef any_forward_iterator_interface<Reference, Buffer> type;$/;"	t	struct:boost::range_detail::any_iterator_interface_type_generator	access:public
boost::range_detail::any_iterator_interface_type_generator::type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef any_incrementable_iterator_interface<Reference, Buffer> type;$/;"	t	struct:boost::range_detail::any_iterator_interface_type_generator	access:public
boost::range_detail::any_iterator_interface_type_generator::type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef any_single_pass_iterator_interface<Reference, Buffer> type;$/;"	t	struct:boost::range_detail::any_iterator_interface_type_generator	access:public
boost::range_detail::any_iterator_wrapper_type_generator	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        struct any_iterator_wrapper_type_generator<$/;"	s	namespace:boost::range_detail
boost::range_detail::any_iterator_wrapper_type_generator::type	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    > type;$/;"	t	struct:boost::range_detail::any_iterator_wrapper_type_generator	access:public
boost::range_detail::any_iterator_wrapper_type_generator::type	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                > type;$/;"	t	struct:boost::range_detail::any_iterator_wrapper_type_generator	access:public
boost::range_detail::any_iterator_wrapper_type_generator::type	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            > type;$/;"	t	struct:boost::range_detail::any_iterator_wrapper_type_generator	access:public
boost::range_detail::any_random_access_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_random_access_iterator_interface$/;"	s	namespace:boost::range_detail	inherits:any_bidirectional_iterator_interface
boost::range_detail::any_random_access_iterator_interface::advance	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual void advance(Difference offset) = 0;$/;"	p	struct:boost::range_detail::any_random_access_iterator_interface	access:public	signature:(Difference offset)
boost::range_detail::any_random_access_iterator_interface::buffer_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_bidirectional_iterator_interface<Reference, Buffer>::buffer_type buffer_type;$/;"	t	struct:boost::range_detail::any_random_access_iterator_interface	access:public
boost::range_detail::any_random_access_iterator_interface::clone	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_random_access_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_random_access_iterator_interface::clone_const_ref	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_const_ref(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_random_access_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_random_access_iterator_interface::clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_reference_as_value(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_random_access_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_random_access_iterator_interface::const_reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_bidirectional_iterator_interface<Reference, Buffer>::const_reference const_reference;$/;"	t	struct:boost::range_detail::any_random_access_iterator_interface	access:public
boost::range_detail::any_random_access_iterator_interface::difference_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef Difference difference_type;$/;"	t	struct:boost::range_detail::any_random_access_iterator_interface	access:public
boost::range_detail::any_random_access_iterator_interface::distance_to	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual Difference distance_to(const any_random_access_iterator_interface& other) const = 0;$/;"	p	struct:boost::range_detail::any_random_access_iterator_interface	access:public	signature:(const any_random_access_iterator_interface& other) const
boost::range_detail::any_random_access_iterator_interface::reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_bidirectional_iterator_interface<Reference, Buffer>::reference reference;$/;"	t	struct:boost::range_detail::any_random_access_iterator_interface	access:public
boost::range_detail::any_random_access_iterator_interface::reference_as_value_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_bidirectional_iterator_interface<Reference, Buffer>::reference_as_value_type reference_as_value_type;$/;"	t	struct:boost::range_detail::any_random_access_iterator_interface	access:public
boost::range_detail::any_random_access_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        class any_random_access_iterator_wrapper$/;"	c	namespace:boost::range_detail	inherits:any_random_access_iterator_interface
boost::range_detail::any_random_access_iterator_wrapper::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessIteratorConcept<WrappedIterator> ));$/;"	p	class:boost::range_detail::any_random_access_iterator_wrapper	access:private	signature:( RandomAccessIteratorConcept<WrappedIterator> )
boost::range_detail::any_random_access_iterator_wrapper::advance	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void advance(Difference offset)$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:(Difference offset)
boost::range_detail::any_random_access_iterator_wrapper::any_random_access_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            any_random_access_iterator_wrapper()$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:()
boost::range_detail::any_random_access_iterator_wrapper::any_random_access_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            explicit any_random_access_iterator_wrapper(const WrappedIterator& other)$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:(const WrappedIterator& other)
boost::range_detail::any_random_access_iterator_wrapper::clone	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual any_random_access_iterator_wrapper* clone($/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:( typename any_random_access_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_random_access_iterator_wrapper::clone_const_ref	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_const_ref($/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:( typename any_random_access_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_random_access_iterator_wrapper::clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_reference_as_value($/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:( typename any_random_access_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_random_access_iterator_wrapper::decrement	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void decrement()$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:()
boost::range_detail::any_random_access_iterator_wrapper::dereference	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual Reference dereference() const$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:() const
boost::range_detail::any_random_access_iterator_wrapper::difference_type	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            typedef Difference difference_type;$/;"	t	class:boost::range_detail::any_random_access_iterator_wrapper	access:public
boost::range_detail::any_random_access_iterator_wrapper::distance_to	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual Difference distance_to(const any_random_access_iterator_interface<Reference, Difference, Buffer>& other) const$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:(const any_random_access_iterator_interface<Reference, Difference, Buffer>& other) const
boost::range_detail::any_random_access_iterator_wrapper::equal	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual bool equal(const any_single_pass_iterator_interface<Reference, Buffer>& other) const$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:(const any_single_pass_iterator_interface<Reference, Buffer>& other) const
boost::range_detail::any_random_access_iterator_wrapper::increment	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void increment()$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:()
boost::range_detail::any_random_access_iterator_wrapper::m_it	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            WrappedIterator m_it;$/;"	m	class:boost::range_detail::any_random_access_iterator_wrapper	access:private
boost::range_detail::any_range	/usr/include/boost/range/any_range.hpp	/^        class any_range$/;"	c	namespace:boost::range_detail	inherits:iterator_range
boost::range_detail::any_range::any_range	/usr/include/boost/range/any_range.hpp	/^            any_range()$/;"	f	class:boost::range_detail::any_range	access:public	signature:()
boost::range_detail::any_range::any_range	/usr/include/boost/range/any_range.hpp	/^            any_range(Iterator first, Iterator last)$/;"	f	class:boost::range_detail::any_range	access:public	signature:(Iterator first, Iterator last)
boost::range_detail::any_range::any_range	/usr/include/boost/range/any_range.hpp	/^            any_range(WrappedRange& wrapped_range)$/;"	f	class:boost::range_detail::any_range	access:public	signature:(WrappedRange& wrapped_range)
boost::range_detail::any_range::any_range	/usr/include/boost/range/any_range.hpp	/^            any_range(const WrappedRange& wrapped_range)$/;"	f	class:boost::range_detail::any_range	access:public	signature:(const WrappedRange& wrapped_range)
boost::range_detail::any_range::any_range	/usr/include/boost/range/any_range.hpp	/^            any_range(const any_range& other)$/;"	f	class:boost::range_detail::any_range	access:public	signature:(const any_range& other)
boost::range_detail::any_range::any_range	/usr/include/boost/range/any_range.hpp	/^            any_range(const any_range<$/;"	f	class:boost::range_detail::any_range	access:public	signature:(const any_range< OtherValue , OtherTraversal , OtherReference , OtherDifference , Buffer >& other)
boost::range_detail::any_range::base_type	/usr/include/boost/range/any_range.hpp	/^                    > base_type;$/;"	t	class:boost::range_detail::any_range	access:private
boost::range_detail::any_range::disabler	/usr/include/boost/range/any_range.hpp	/^            struct disabler {};$/;"	s	class:boost::range_detail::any_range	access:private
boost::range_detail::any_range::enabler	/usr/include/boost/range/any_range.hpp	/^            struct enabler {};$/;"	s	class:boost::range_detail::any_range	access:private
boost::range_detail::any_range_default_help	/usr/include/boost/range/any_range.hpp	/^        struct any_range_default_help$/;"	s	namespace:boost::range_detail	inherits:mpl::eval_if
boost::range_detail::any_range_type_generator	/usr/include/boost/range/any_range.hpp	/^        struct any_range_type_generator$/;"	s	namespace:boost::range_detail
boost::range_detail::any_range_type_generator::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/any_range.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<WrappedRange> ));$/;"	p	struct:boost::range_detail::any_range_type_generator	access:public	signature:( SinglePassRangeConcept<WrappedRange> )
boost::range_detail::any_range_type_generator::type	/usr/include/boost/range/any_range.hpp	/^            > type;$/;"	t	struct:boost::range_detail::any_range_type_generator	access:public
boost::range_detail::any_range_value_type	/usr/include/boost/range/any_range.hpp	/^        struct any_range_value_type$/;"	s	namespace:boost::range_detail
boost::range_detail::any_range_value_type::type	/usr/include/boost/range/any_range.hpp	/^                >::type type;$/;"	t	struct:boost::range_detail::any_range_value_type	access:public
boost::range_detail::any_single_pass_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct any_single_pass_iterator_interface$/;"	s	namespace:boost::range_detail	inherits:any_incrementable_iterator_interface
boost::range_detail::any_single_pass_iterator_interface::buffer_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_incrementable_iterator_interface<Reference, Buffer>::buffer_type buffer_type;$/;"	t	struct:boost::range_detail::any_single_pass_iterator_interface	access:public
boost::range_detail::any_single_pass_iterator_interface::clone	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_single_pass_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_single_pass_iterator_interface::clone_const_ref	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_const_ref(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_single_pass_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_single_pass_iterator_interface::clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_reference_as_value(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_single_pass_iterator_interface	access:public	signature:(buffer_type& buffer) const
boost::range_detail::any_single_pass_iterator_interface::const_reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_incrementable_iterator_interface<Reference, Buffer>::const_reference const_reference;$/;"	t	struct:boost::range_detail::any_single_pass_iterator_interface	access:public
boost::range_detail::any_single_pass_iterator_interface::dereference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual Reference dereference() const = 0;$/;"	p	struct:boost::range_detail::any_single_pass_iterator_interface	access:public	signature:() const
boost::range_detail::any_single_pass_iterator_interface::equal	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual bool equal(const any_single_pass_iterator_interface& other) const = 0;$/;"	p	struct:boost::range_detail::any_single_pass_iterator_interface	access:public	signature:(const any_single_pass_iterator_interface& other) const
boost::range_detail::any_single_pass_iterator_interface::reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_incrementable_iterator_interface<Reference, Buffer>::reference reference;$/;"	t	struct:boost::range_detail::any_single_pass_iterator_interface	access:public
boost::range_detail::any_single_pass_iterator_interface::reference_as_value_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_incrementable_iterator_interface<Reference, Buffer>::reference_as_value_type reference_as_value_type;$/;"	t	struct:boost::range_detail::any_single_pass_iterator_interface	access:public
boost::range_detail::any_single_pass_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^        class any_single_pass_iterator_wrapper$/;"	c	namespace:boost::range_detail	inherits:any_single_pass_iterator_interface
boost::range_detail::any_single_pass_iterator_wrapper::BOOST_RANGE_CONCEPT_ASSERT	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            BOOST_RANGE_CONCEPT_ASSERT(( SinglePassIteratorConcept<WrappedIterator> ));$/;"	p	class:boost::range_detail::any_single_pass_iterator_wrapper	access:private	signature:( SinglePassIteratorConcept<WrappedIterator> )
boost::range_detail::any_single_pass_iterator_wrapper::any_single_pass_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            any_single_pass_iterator_wrapper()$/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:()
boost::range_detail::any_single_pass_iterator_wrapper::any_single_pass_iterator_wrapper	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            explicit any_single_pass_iterator_wrapper(const WrappedIterator& it)$/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:(const WrappedIterator& it)
boost::range_detail::any_single_pass_iterator_wrapper::clone	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual any_single_pass_iterator_wrapper* clone($/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:( typename any_single_pass_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_single_pass_iterator_wrapper::clone_const_ref	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            >* clone_const_ref($/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:( typename any_single_pass_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_single_pass_iterator_wrapper::clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            >* clone_reference_as_value($/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:( typename any_single_pass_iterator_wrapper::buffer_type& buffer ) const
boost::range_detail::any_single_pass_iterator_wrapper::dereference	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual Reference dereference() const$/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:() const
boost::range_detail::any_single_pass_iterator_wrapper::disabler	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            struct disabler {};$/;"	s	class:boost::range_detail::any_single_pass_iterator_wrapper	access:private
boost::range_detail::any_single_pass_iterator_wrapper::equal	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual bool equal(const any_single_pass_iterator_interface<Reference, Buffer>& other) const$/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:(const any_single_pass_iterator_interface<Reference, Buffer>& other) const
boost::range_detail::any_single_pass_iterator_wrapper::increment	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void increment()$/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:()
boost::range_detail::any_single_pass_iterator_wrapper::m_it	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            WrappedIterator m_it;$/;"	m	class:boost::range_detail::any_single_pass_iterator_wrapper	access:private
boost::range_detail::array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<4>::type    array_;$/;"	t	namespace:boost::range_detail
boost::range_detail::boost_range_silence_warning	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline void boost_range_silence_warning( const T& ) { }$/;"	f	namespace:boost::range_detail	signature:( const T& )
boost::range_detail::char_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<6>::type    char_array_;$/;"	t	namespace:boost::range_detail
boost::range_detail::char_or_wchar_t_array_tag	/usr/include/boost/range/detail/sfinae.hpp	/^        struct char_or_wchar_t_array_tag {};$/;"	s	namespace:boost::range_detail
boost::range_detail::char_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<8>::type    char_ptr_;$/;"	t	namespace:boost::range_detail
boost::range_detail::combine_tag	/usr/include/boost/range/combine.hpp	/^        struct combine_tag {};$/;"	s	namespace:boost::range_detail
boost::range_detail::const_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<5>::type    const_array_;$/;"	t	namespace:boost::range_detail
boost::range_detail::const_char_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<9>::type    const_char_ptr_;$/;"	t	namespace:boost::range_detail
boost::range_detail::const_reference_type_generator	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct const_reference_type_generator$/;"	s	namespace:boost::range_detail
boost::range_detail::const_reference_type_generator::type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::const_reference_type_generator	access:public
boost::range_detail::const_std_pair_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<3>::type    const_std_pair_;$/;"	t	namespace:boost::range_detail
boost::range_detail::const_wchar_t_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<11>::type   const_wchar_t_ptr_;$/;"	t	namespace:boost::range_detail
boost::range_detail::demote_iterator_traversal_tag	/usr/include/boost/range/detail/demote_iterator_traversal_tag.hpp	/^struct demote_iterator_traversal_tag$/;"	s	namespace:boost::range_detail	inherits:inner_demote_iterator_traversal_tag
boost::range_detail::equal	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal( SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2 )
boost::range_detail::equal	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal( SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2, BinaryPredicate pred )
boost::range_detail::equal_impl	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal_impl( RandomAccessTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( RandomAccessTraversalReadableIterator1 first1, RandomAccessTraversalReadableIterator1 last1, RandomAccessTraversalReadableIterator2 first2, RandomAccessTraversalReadableIterator2 last2, BinaryPredicate pred )
boost::range_detail::equal_impl	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal_impl( RandomAccessTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( RandomAccessTraversalReadableIterator1 first1, RandomAccessTraversalReadableIterator1 last1, RandomAccessTraversalReadableIterator2 first2, RandomAccessTraversalReadableIterator2 last2, std::random_access_iterator_tag, std::random_access_iterator_tag )
boost::range_detail::equal_impl	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal_impl( SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2, BinaryPredicate pred, IteratorCategoryTag1, IteratorCategoryTag2 )
boost::range_detail::equal_impl	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal_impl( SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2, IteratorCategoryTag1, IteratorCategoryTag2 )
boost::range_detail::exists	/usr/include/boost/range/detail/extract_optional_type.hpp	/^        template< typename T > struct exists { typedef void type; };$/;"	s	namespace:boost::range_detail
boost::range_detail::exists::type	/usr/include/boost/range/detail/extract_optional_type.hpp	/^        template< typename T > struct exists { typedef void type; };$/;"	t	struct:boost::range_detail::exists	access:public
boost::range_detail::filter_holder	/usr/include/boost/range/adaptor/filtered.hpp	/^        struct filter_holder : holder<T>$/;"	s	namespace:boost::range_detail	inherits:holder
boost::range_detail::filter_holder::filter_holder	/usr/include/boost/range/adaptor/filtered.hpp	/^            filter_holder( T r ) : holder<T>(r)$/;"	f	struct:boost::range_detail::filter_holder	access:public	signature:( T r )
boost::range_detail::filtered_range	/usr/include/boost/range/adaptor/filtered.hpp	/^        struct filtered_range :$/;"	s	namespace:boost::range_detail	inherits:boost::iterator_range
boost::range_detail::filtered_range::base	/usr/include/boost/range/adaptor/filtered.hpp	/^                    > base;$/;"	t	struct:boost::range_detail::filtered_range	access:private
boost::range_detail::filtered_range::filtered_range	/usr/include/boost/range/adaptor/filtered.hpp	/^            filtered_range( P p, R& r )$/;"	f	struct:boost::range_detail::filtered_range	access:public	signature:( P p, R& r )
boost::range_detail::for_each_impl	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^        inline Fn2 for_each_impl(InputIterator1 first1, InputIterator1 last1,$/;"	f	namespace:boost::range_detail	signature:(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, Fn2 fn)
boost::range_detail::forwarder	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^        struct forwarder$/;"	s	namespace:boost::range_detail
boost::range_detail::forwarder2	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^        struct forwarder2$/;"	s	namespace:boost::range_detail
boost::range_detail::forwarder2::operator ()	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            Holder<T> operator()( T t, T u ) const$/;"	f	struct:boost::range_detail::forwarder2	access:public	signature:( T t, T u ) const
boost::range_detail::forwarder2TU	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^        struct forwarder2TU$/;"	s	namespace:boost::range_detail
boost::range_detail::forwarder2TU::operator ()	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            Holder<T, U> operator()( T t, U u ) const$/;"	f	struct:boost::range_detail::forwarder2TU	access:public	signature:( T t, U u ) const
boost::range_detail::forwarder::operator ()	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            Holder<T> operator()( T t ) const$/;"	f	struct:boost::range_detail::forwarder	access:public	signature:( T t ) const
boost::range_detail::generate_tuple	/usr/include/boost/range/combine.hpp	/^        struct generate_tuple$/;"	s	namespace:boost::range_detail
boost::range_detail::generate_tuple::begin	/usr/include/boost/range/combine.hpp	/^            static type begin( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )$/;"	f	struct:boost::range_detail::generate_tuple	access:public	signature:( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )
boost::range_detail::generate_tuple::end	/usr/include/boost/range/combine.hpp	/^            static type end( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )$/;"	f	struct:boost::range_detail::generate_tuple	access:public	signature:( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )
boost::range_detail::generate_tuple::type	/usr/include/boost/range/combine.hpp	/^                    > type;$/;"	t	struct:boost::range_detail::generate_tuple	access:public
boost::range_detail::has_range_const_iterator_impl	/usr/include/boost/range/has_range_iterator.hpp	/^        struct has_range_const_iterator_impl$/;"	s	namespace:boost::range_detail	inherits:boost::mpl::false_
boost::range_detail::has_range_const_iterator_impl	/usr/include/boost/range/has_range_iterator.hpp	/^        struct has_range_const_iterator_impl<T, BOOST_DEDUCED_TYPENAME enable_if< has_type< range_const_iterator<T> > >::type>$/;"	s	namespace:boost::range_detail	inherits:boost::mpl::true_
boost::range_detail::has_range_iterator_impl	/usr/include/boost/range/has_range_iterator.hpp	/^        struct has_range_iterator_impl$/;"	s	namespace:boost::range_detail	inherits:boost::mpl::false_
boost::range_detail::has_range_iterator_impl	/usr/include/boost/range/has_range_iterator.hpp	/^        struct has_range_iterator_impl<T, BOOST_DEDUCED_TYPENAME enable_if< has_type< range_mutable_iterator<T> > >::type>$/;"	s	namespace:boost::range_detail	inherits:boost::mpl::true_
boost::range_detail::holder	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^        struct holder$/;"	s	namespace:boost::range_detail
boost::range_detail::holder2	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^        struct holder2$/;"	s	namespace:boost::range_detail
boost::range_detail::holder2::holder2	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            holder2( T t, T u ) : val1(t), val2(u)$/;"	f	struct:boost::range_detail::holder2	access:public	signature:( T t, T u )
boost::range_detail::holder2::val1	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            T val1, val2;$/;"	m	struct:boost::range_detail::holder2	access:public
boost::range_detail::holder2::val2	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            T val1, val2;$/;"	m	struct:boost::range_detail::holder2	access:public
boost::range_detail::holder::holder	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            holder( T t ) : val(t)$/;"	f	struct:boost::range_detail::holder	access:public	signature:( T t )
boost::range_detail::holder::val	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            T val;$/;"	m	struct:boost::range_detail::holder	access:public
boost::range_detail::indexed_iterator	/usr/include/boost/range/adaptor/indexed.hpp	/^        class indexed_iterator$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_adaptor
boost::range_detail::indexed_iterator::advance	/usr/include/boost/range/adaptor/indexed.hpp	/^            void advance( index_type n )$/;"	f	class:boost::range_detail::indexed_iterator	access:private	signature:( index_type n )
boost::range_detail::indexed_iterator::base	/usr/include/boost/range/adaptor/indexed.hpp	/^                  base;$/;"	t	class:boost::range_detail::indexed_iterator	access:private
boost::range_detail::indexed_iterator::decrement	/usr/include/boost/range/adaptor/indexed.hpp	/^            void decrement()$/;"	f	class:boost::range_detail::indexed_iterator	access:private	signature:()
boost::range_detail::indexed_iterator::increment	/usr/include/boost/range/adaptor/indexed.hpp	/^            void increment()$/;"	f	class:boost::range_detail::indexed_iterator	access:private	signature:()
boost::range_detail::indexed_iterator::index	/usr/include/boost/range/adaptor/indexed.hpp	/^            index_type index() const$/;"	f	class:boost::range_detail::indexed_iterator	access:public	signature:() const
boost::range_detail::indexed_iterator::index_type	/usr/include/boost/range/adaptor/indexed.hpp	/^            typedef BOOST_DEDUCED_TYPENAME base::difference_type index_type;$/;"	t	class:boost::range_detail::indexed_iterator	access:private
boost::range_detail::indexed_iterator::indexed_iterator	/usr/include/boost/range/adaptor/indexed.hpp	/^            explicit indexed_iterator( Iter i, index_type index )$/;"	f	class:boost::range_detail::indexed_iterator	access:public	signature:( Iter i, index_type index )
boost::range_detail::indexed_iterator::m_index	/usr/include/boost/range/adaptor/indexed.hpp	/^            index_type m_index;$/;"	m	class:boost::range_detail::indexed_iterator	access:private
boost::range_detail::indexed_range	/usr/include/boost/range/adaptor/indexed.hpp	/^        struct indexed_range :$/;"	s	namespace:boost::range_detail	inherits:iterator_range
boost::range_detail::indexed_range::base	/usr/include/boost/range/adaptor/indexed.hpp	/^                base;$/;"	t	struct:boost::range_detail::indexed_range	access:private
boost::range_detail::indexed_range::indexed_range	/usr/include/boost/range/adaptor/indexed.hpp	/^            indexed_range( Index i, Rng& r )$/;"	f	struct:boost::range_detail::indexed_range	access:public	signature:( Index i, Rng& r )
boost::range_detail::indexed_range::iter_type	/usr/include/boost/range/adaptor/indexed.hpp	/^                iter_type;$/;"	t	struct:boost::range_detail::indexed_range	access:private
boost::range_detail::indirect_forwarder	/usr/include/boost/range/adaptor/indirected.hpp	/^        struct indirect_forwarder {};$/;"	s	namespace:boost::range_detail
boost::range_detail::indirected_range	/usr/include/boost/range/adaptor/indirected.hpp	/^        struct indirected_range :$/;"	s	namespace:boost::range_detail	inherits:boost::iterator_range
boost::range_detail::indirected_range::base	/usr/include/boost/range/adaptor/indirected.hpp	/^                base;$/;"	t	struct:boost::range_detail::indirected_range	access:private
boost::range_detail::indirected_range::indirected_range	/usr/include/boost/range/adaptor/indirected.hpp	/^            explicit indirected_range( R& r )$/;"	f	struct:boost::range_detail::indirected_range	access:public	signature:( R& r )
boost::range_detail::inner_demote_iterator_traversal_tag	/usr/include/boost/range/detail/demote_iterator_traversal_tag.hpp	/^struct inner_demote_iterator_traversal_tag$/;"	s	namespace:boost::range_detail
boost::range_detail::integer_iterator	/usr/include/boost/range/irange.hpp	/^        class integer_iterator$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_facade
boost::range_detail::integer_iterator::advance	/usr/include/boost/range/irange.hpp	/^            void advance(difference_type offset)$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:(difference_type offset)
boost::range_detail::integer_iterator::base_t	/usr/include/boost/range/irange.hpp	/^                    > base_t;$/;"	t	class:boost::range_detail::integer_iterator	access:private
boost::range_detail::integer_iterator::decrement	/usr/include/boost/range/irange.hpp	/^            void decrement()$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:()
boost::range_detail::integer_iterator::dereference	/usr/include/boost/range/irange.hpp	/^            reference dereference() const$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:() const
boost::range_detail::integer_iterator::difference_type	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::difference_type difference_type;$/;"	t	class:boost::range_detail::integer_iterator	access:public
boost::range_detail::integer_iterator::distance_to	/usr/include/boost/range/irange.hpp	/^            difference_type distance_to(const integer_iterator& other) const$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:(const integer_iterator& other) const
boost::range_detail::integer_iterator::equal	/usr/include/boost/range/irange.hpp	/^            bool equal(const integer_iterator& other) const$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:(const integer_iterator& other) const
boost::range_detail::integer_iterator::increment	/usr/include/boost/range/irange.hpp	/^            void increment()$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:()
boost::range_detail::integer_iterator::integer_iterator	/usr/include/boost/range/irange.hpp	/^            explicit integer_iterator(value_type x) : m_value(x) {}$/;"	f	class:boost::range_detail::integer_iterator	access:public	signature:(value_type x)
boost::range_detail::integer_iterator::integer_iterator	/usr/include/boost/range/irange.hpp	/^            integer_iterator() : m_value() {}$/;"	f	class:boost::range_detail::integer_iterator	access:public	signature:()
boost::range_detail::integer_iterator::m_value	/usr/include/boost/range/irange.hpp	/^            value_type m_value;$/;"	m	class:boost::range_detail::integer_iterator	access:private
boost::range_detail::integer_iterator::reference	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::reference reference;$/;"	t	class:boost::range_detail::integer_iterator	access:public
boost::range_detail::integer_iterator::value_type	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::value_type value_type;$/;"	t	class:boost::range_detail::integer_iterator	access:public
boost::range_detail::integer_iterator_with_step	/usr/include/boost/range/irange.hpp	/^        class integer_iterator_with_step$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_facade
boost::range_detail::integer_iterator_with_step::advance	/usr/include/boost/range/irange.hpp	/^            void advance(difference_type offset)$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:(difference_type offset)
boost::range_detail::integer_iterator_with_step::base_t	/usr/include/boost/range/irange.hpp	/^                    > base_t;$/;"	t	class:boost::range_detail::integer_iterator_with_step	access:private
boost::range_detail::integer_iterator_with_step::decrement	/usr/include/boost/range/irange.hpp	/^            void decrement()$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:()
boost::range_detail::integer_iterator_with_step::dereference	/usr/include/boost/range/irange.hpp	/^            reference dereference() const$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:() const
boost::range_detail::integer_iterator_with_step::difference_type	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::difference_type difference_type;$/;"	t	class:boost::range_detail::integer_iterator_with_step	access:public
boost::range_detail::integer_iterator_with_step::distance_to	/usr/include/boost/range/irange.hpp	/^            difference_type distance_to(const integer_iterator_with_step& other) const$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:(const integer_iterator_with_step& other) const
boost::range_detail::integer_iterator_with_step::equal	/usr/include/boost/range/irange.hpp	/^            bool equal(const integer_iterator_with_step& other) const$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:(const integer_iterator_with_step& other) const
boost::range_detail::integer_iterator_with_step::increment	/usr/include/boost/range/irange.hpp	/^            void increment()$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:()
boost::range_detail::integer_iterator_with_step::integer_iterator_with_step	/usr/include/boost/range/irange.hpp	/^            integer_iterator_with_step(value_type first, difference_type step, value_type step_size)$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:public	signature:(value_type first, difference_type step, value_type step_size)
boost::range_detail::integer_iterator_with_step::m_first	/usr/include/boost/range/irange.hpp	/^            value_type m_first;$/;"	m	class:boost::range_detail::integer_iterator_with_step	access:private
boost::range_detail::integer_iterator_with_step::m_step	/usr/include/boost/range/irange.hpp	/^            value_type m_step;$/;"	m	class:boost::range_detail::integer_iterator_with_step	access:private
boost::range_detail::integer_iterator_with_step::m_step_size	/usr/include/boost/range/irange.hpp	/^            difference_type m_step_size;$/;"	m	class:boost::range_detail::integer_iterator_with_step	access:private
boost::range_detail::integer_iterator_with_step::reference	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::reference reference;$/;"	t	class:boost::range_detail::integer_iterator_with_step	access:public
boost::range_detail::integer_iterator_with_step::value_type	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::value_type value_type;$/;"	t	class:boost::range_detail::integer_iterator_with_step	access:public
boost::range_detail::is_any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^        struct is_any_iterator$/;"	s	namespace:boost::range_detail	inherits:mpl::bool_
boost::range_detail::is_any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^        struct is_any_iterator<$/;"	s	namespace:boost::range_detail	inherits:mpl::bool_
boost::range_detail::is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_char_array_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_array_impl( char BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( char BOOST_RANGE_ARRAY_REF()[sz] )
boost::range_detail::is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_array_impl( const char BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( const char BOOST_RANGE_ARRAY_REF()[sz] )
boost::range_detail::is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( char* )$/;"	f	namespace:boost::range_detail	signature:( char* )
boost::range_detail::is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( const char* )$/;"	f	namespace:boost::range_detail	signature:( const char* )
boost::range_detail::is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( const wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* )
boost::range_detail::is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( wchar_t* )
boost::range_detail::is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline long is_char_ptr( const T& \/* r *\/ )$/;"	f	namespace:boost::range_detail	signature:( const T& )
boost::range_detail::is_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_char_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_ptr_impl( char* const );$/;"	p	namespace:boost::range_detail	signature:( char* const )
boost::range_detail::is_const_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_const_char_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_const_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_const_char_ptr_impl( const char* const );$/;"	p	namespace:boost::range_detail	signature:( const char* const )
boost::range_detail::is_const_reference	/usr/include/boost/range/detail/any_iterator.hpp	/^        struct is_const_reference$/;"	s	namespace:boost::range_detail
boost::range_detail::is_const_reference::type	/usr/include/boost/range/detail/any_iterator.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::is_const_reference	access:public
boost::range_detail::is_const_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_const_wchar_t_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_const_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_const_wchar_t_ptr_impl( const wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t* const )
boost::range_detail::is_convertible_to_value_as_reference	/usr/include/boost/range/detail/any_iterator.hpp	/^        struct is_convertible_to_value_as_reference$/;"	s	namespace:boost::range_detail
boost::range_detail::is_convertible_to_value_as_reference::type	/usr/include/boost/range/detail/any_iterator.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::is_convertible_to_value_as_reference	access:public
boost::range_detail::is_mutable_reference	/usr/include/boost/range/detail/any_iterator.hpp	/^        struct is_mutable_reference$/;"	s	namespace:boost::range_detail
boost::range_detail::is_mutable_reference::type	/usr/include/boost/range/detail/any_iterator.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::is_mutable_reference	access:public
boost::range_detail::is_pair_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_pair_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_pair_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_pair_impl( const std::pair<Iterator,Iterator>* );$/;"	p	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>* )
boost::range_detail::is_string_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_string_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_string_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_string_impl( const wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t* const )
boost::range_detail::is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_wchar_t_array_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_array_impl( const wchar_t BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t BOOST_RANGE_ARRAY_REF()[sz] )
boost::range_detail::is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_array_impl( wchar_t BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( wchar_t BOOST_RANGE_ARRAY_REF()[sz] )
boost::range_detail::is_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_wchar_t_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_ptr_impl( wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( wchar_t* const )
boost::range_detail::join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^class join_iterator$/;"	c	namespace:boost::range_detail	inherits:iterator_facade
boost::range_detail::join_iterator::advance	/usr/include/boost/range/detail/join_iterator.hpp	/^    void advance(typename join_iterator::difference_type offset)$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:(typename join_iterator::difference_type offset)
boost::range_detail::join_iterator::advance_from_range1	/usr/include/boost/range/detail/join_iterator.hpp	/^    void advance_from_range1(typename join_iterator::difference_type offset)$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:(typename join_iterator::difference_type offset)
boost::range_detail::join_iterator::advance_from_range2	/usr/include/boost/range/detail/join_iterator.hpp	/^    void advance_from_range2(typename join_iterator::difference_type offset)$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:(typename join_iterator::difference_type offset)
boost::range_detail::join_iterator::decrement	/usr/include/boost/range/detail/join_iterator.hpp	/^    void decrement()$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:()
boost::range_detail::join_iterator::dereference	/usr/include/boost/range/detail/join_iterator.hpp	/^    typename join_iterator::reference dereference() const$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:() const
boost::range_detail::join_iterator::distance_to	/usr/include/boost/range/detail/join_iterator.hpp	/^    typename join_iterator::difference_type distance_to(const join_iterator& other) const$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:(const join_iterator& other) const
boost::range_detail::join_iterator::equal	/usr/include/boost/range/detail/join_iterator.hpp	/^    bool equal(const join_iterator& other) const$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:(const join_iterator& other) const
boost::range_detail::join_iterator::increment	/usr/include/boost/range/detail/join_iterator.hpp	/^    void increment()$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:()
boost::range_detail::join_iterator::iterator1_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator1 iterator1_t;$/;"	t	class:boost::range_detail::join_iterator	access:public
boost::range_detail::join_iterator::iterator2_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator2 iterator2_t;$/;"	t	class:boost::range_detail::join_iterator	access:public
boost::range_detail::join_iterator::iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef join_iterator_union<Iterator1, Iterator2, Reference> iterator_union;$/;"	t	class:boost::range_detail::join_iterator	access:private
boost::range_detail::join_iterator::join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator()$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:()
boost::range_detail::join_iterator::join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator(Range1& r1, Range2& r2, join_iterator_begin_tag)$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:(Range1& r1, Range2& r2, join_iterator_begin_tag)
boost::range_detail::join_iterator::join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator(Range1& r1, Range2& r2, join_iterator_end_tag)$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:(Range1& r1, Range2& r2, join_iterator_end_tag)
boost::range_detail::join_iterator::join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator(const Range1& r1, const Range2& r2, join_iterator_begin_tag)$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:(const Range1& r1, const Range2& r2, join_iterator_begin_tag)
boost::range_detail::join_iterator::join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator(const Range1& r1, const Range2& r2, join_iterator_end_tag)$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:(const Range1& r1, const Range2& r2, join_iterator_end_tag)
boost::range_detail::join_iterator::join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator(unsigned int section, Iterator1 current1, Iterator1 last1, Iterator2 first2, Iterator2 current2)$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:(unsigned int section, Iterator1 current1, Iterator1 last1, Iterator2 first2, Iterator2 current2)
boost::range_detail::join_iterator::link_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef join_iterator_link<Iterator1, Iterator2> link_t;$/;"	t	class:boost::range_detail::join_iterator	access:private
boost::range_detail::join_iterator::m_it	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator_union m_it;$/;"	m	class:boost::range_detail::join_iterator	access:private
boost::range_detail::join_iterator::m_link	/usr/include/boost/range/detail/join_iterator.hpp	/^    link_t m_link;$/;"	m	class:boost::range_detail::join_iterator	access:private
boost::range_detail::join_iterator::m_section	/usr/include/boost/range/detail/join_iterator.hpp	/^    unsigned int m_section;$/;"	m	class:boost::range_detail::join_iterator	access:private
boost::range_detail::join_iterator_begin_tag	/usr/include/boost/range/detail/join_iterator.hpp	/^class join_iterator_begin_tag {};$/;"	c	namespace:boost::range_detail
boost::range_detail::join_iterator_end_tag	/usr/include/boost/range/detail/join_iterator.hpp	/^class join_iterator_end_tag {};$/;"	c	namespace:boost::range_detail
boost::range_detail::join_iterator_link	/usr/include/boost/range/detail/join_iterator.hpp	/^struct join_iterator_link$/;"	s	namespace:boost::range_detail
boost::range_detail::join_iterator_link::first2	/usr/include/boost/range/detail/join_iterator.hpp	/^    Iterator2 first2;$/;"	m	struct:boost::range_detail::join_iterator_link	access:public
boost::range_detail::join_iterator_link::join_iterator_link	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator_link() \/* = delete *\/ ;$/;"	p	struct:boost::range_detail::join_iterator_link	access:private	signature:()
boost::range_detail::join_iterator_link::join_iterator_link	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator_link(Iterator1 last1, Iterator2 first2)$/;"	f	struct:boost::range_detail::join_iterator_link	access:public	signature:(Iterator1 last1, Iterator2 first2)
boost::range_detail::join_iterator_link::last1	/usr/include/boost/range/detail/join_iterator.hpp	/^    Iterator1 last1;$/;"	m	struct:boost::range_detail::join_iterator_link	access:public
boost::range_detail::join_iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^class join_iterator_union$/;"	c	namespace:boost::range_detail
boost::range_detail::join_iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^class join_iterator_union<Iterator, Iterator, Reference>$/;"	c	namespace:boost::range_detail
boost::range_detail::join_iterator_union::dereference	/usr/include/boost/range/detail/join_iterator.hpp	/^    Reference dereference(unsigned int selected) const$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:(unsigned int selected) const
boost::range_detail::join_iterator_union::dereference	/usr/include/boost/range/detail/join_iterator.hpp	/^    Reference dereference(unsigned int) const$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:(unsigned int) const
boost::range_detail::join_iterator_union::equal	/usr/include/boost/range/detail/join_iterator.hpp	/^    bool equal(const join_iterator_union& other, unsigned int selected) const$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:(const join_iterator_union& other, unsigned int selected) const
boost::range_detail::join_iterator_union::it1	/usr/include/boost/range/detail/join_iterator.hpp	/^    const iterator1_t& it1() const { return m_it1; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:() const
boost::range_detail::join_iterator_union::it1	/usr/include/boost/range/detail/join_iterator.hpp	/^    const iterator1_t& it1() const { return m_it; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:() const
boost::range_detail::join_iterator_union::it1	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator1_t& it1() { return m_it1; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:()
boost::range_detail::join_iterator_union::it1	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator1_t& it1() { return m_it; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:()
boost::range_detail::join_iterator_union::it2	/usr/include/boost/range/detail/join_iterator.hpp	/^    const iterator2_t& it2() const { return m_it2; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:() const
boost::range_detail::join_iterator_union::it2	/usr/include/boost/range/detail/join_iterator.hpp	/^    const iterator2_t& it2() const { return m_it; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:() const
boost::range_detail::join_iterator_union::it2	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator2_t& it2() { return m_it2; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:()
boost::range_detail::join_iterator_union::it2	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator2_t& it2() { return m_it; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:()
boost::range_detail::join_iterator_union::iterator1_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator iterator1_t;$/;"	t	class:boost::range_detail::join_iterator_union	access:public
boost::range_detail::join_iterator_union::iterator1_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator1 iterator1_t;$/;"	t	class:boost::range_detail::join_iterator_union	access:public
boost::range_detail::join_iterator_union::iterator2_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator iterator2_t;$/;"	t	class:boost::range_detail::join_iterator_union	access:public
boost::range_detail::join_iterator_union::iterator2_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator2 iterator2_t;$/;"	t	class:boost::range_detail::join_iterator_union	access:public
boost::range_detail::join_iterator_union::join_iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator_union() {}$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:()
boost::range_detail::join_iterator_union::join_iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator_union(unsigned int \/*selected*\/, const iterator1_t& it1, const iterator2_t& it2) : m_it1(it1), m_it2(it2) {}$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:(unsigned int , const iterator1_t& it1, const iterator2_t& it2)
boost::range_detail::join_iterator_union::join_iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator_union(unsigned int selected, const iterator1_t& it1, const iterator2_t& it2)$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:(unsigned int selected, const iterator1_t& it1, const iterator2_t& it2)
boost::range_detail::join_iterator_union::m_it	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator1_t m_it;$/;"	m	class:boost::range_detail::join_iterator_union	access:private
boost::range_detail::join_iterator_union::m_it1	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator1_t m_it1;$/;"	m	class:boost::range_detail::join_iterator_union	access:private
boost::range_detail::join_iterator_union::m_it2	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator2_t m_it2;$/;"	m	class:boost::range_detail::join_iterator_union	access:private
boost::range_detail::joined_type	/usr/include/boost/range/join.hpp	/^class joined_type$/;"	c	namespace:boost::range_detail
boost::range_detail::joined_type::type	/usr/include/boost/range/join.hpp	/^    > type;$/;"	t	class:boost::range_detail::joined_type	access:public
boost::range_detail::length	/usr/include/boost/range/as_literal.hpp	/^        inline std::size_t length( const char* s )$/;"	f	namespace:boost::range_detail	signature:( const char* s )
boost::range_detail::length	/usr/include/boost/range/as_literal.hpp	/^        inline std::size_t length( const wchar_t* s )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* s )
boost::range_detail::make_range	/usr/include/boost/range/as_literal.hpp	/^        make_range( T& r, long )$/;"	f	namespace:boost::range_detail	signature:( T& r, long )
boost::range_detail::make_range	/usr/include/boost/range/as_literal.hpp	/^        make_range( T* const r, bool )$/;"	f	namespace:boost::range_detail	signature:( T* const r, bool )
boost::range_detail::make_strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^        make_strided_iterator(BaseIterator first, BaseIterator it,$/;"	f	namespace:boost::range_detail	signature:(BaseIterator first, BaseIterator it, BaseIterator last, Difference stride)
boost::range_detail::map_keys_forwarder	/usr/include/boost/range/adaptor/map.hpp	/^        struct map_keys_forwarder {};$/;"	s	namespace:boost::range_detail
boost::range_detail::map_values_forwarder	/usr/include/boost/range/adaptor/map.hpp	/^        struct map_values_forwarder {};$/;"	s	namespace:boost::range_detail
boost::range_detail::mismatch_impl	/usr/include/boost/range/algorithm/mismatch.hpp	/^        mismatch_impl(SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:(SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2)
boost::range_detail::mismatch_impl	/usr/include/boost/range/algorithm/mismatch.hpp	/^        mismatch_impl(SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:(SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2, BinaryPredicate pred)
boost::range_detail::operator &	/usr/include/boost/range/combine.hpp	/^        operator&( combine_tag, Rng& r )$/;"	f	namespace:boost::range_detail	signature:( combine_tag, Rng& r )
boost::range_detail::operator &	/usr/include/boost/range/combine.hpp	/^        operator&( combine_tag, const Rng& r )$/;"	f	namespace:boost::range_detail	signature:( combine_tag, const Rng& r )
boost::range_detail::operator &	/usr/include/boost/range/combine.hpp	/^        operator&( const zip_rng<R1,R2,R3,R4,R5>& zip,$/;"	f	namespace:boost::range_detail	signature:( const zip_rng<R1,R2,R3,R4,R5>& zip, Rng& r )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        operator|( ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( ForwardRng& r, const adjacent_excl_holder<BinPredicate>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        operator|( ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( ForwardRng& r, const adjacent_holder<BinPredicate>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        operator|( const ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( const ForwardRng& r, const adjacent_excl_holder<BinPredicate>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        operator|( const ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( const ForwardRng& r, const adjacent_holder<BinPredicate>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/filtered.hpp	/^        operator|( InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( InputRng& r, const filter_holder<Predicate>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/filtered.hpp	/^        operator|( const InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( const InputRng& r, const filter_holder<Predicate>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/indirected.hpp	/^        operator|( InputRng& r, indirect_forwarder )$/;"	f	namespace:boost::range_detail	signature:( InputRng& r, indirect_forwarder )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/indirected.hpp	/^        operator|( const InputRng& r, indirect_forwarder )$/;"	f	namespace:boost::range_detail	signature:( const InputRng& r, indirect_forwarder )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/map.hpp	/^        operator|( StdPairRng& r, map_values_forwarder )$/;"	f	namespace:boost::range_detail	signature:( StdPairRng& r, map_values_forwarder )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/map.hpp	/^        operator|( const StdPairRng& r, map_keys_forwarder )$/;"	f	namespace:boost::range_detail	signature:( const StdPairRng& r, map_keys_forwarder )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/map.hpp	/^        operator|( const StdPairRng& r, map_values_forwarder )$/;"	f	namespace:boost::range_detail	signature:( const StdPairRng& r, map_values_forwarder )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/replaced.hpp	/^        operator|( InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( InputRng& r, const replace_holder<BOOST_DEDUCED_TYPENAME range_value<InputRng>::type>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/replaced.hpp	/^        operator|( const InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( const InputRng& r, const replace_holder<BOOST_DEDUCED_TYPENAME range_value<InputRng>::type>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        operator|( InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( InputRng& r, const replace_if_holder<Pred, BOOST_DEDUCED_TYPENAME range_value<InputRng>::type>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        operator|( const InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( const InputRng& r, const replace_if_holder<Pred, BOOST_DEDUCED_TYPENAME range_value<InputRng>::type>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/reversed.hpp	/^        operator|( BidirectionalRng& r, reverse_forwarder )$/;"	f	namespace:boost::range_detail	signature:( BidirectionalRng& r, reverse_forwarder )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/reversed.hpp	/^        operator|( const BidirectionalRng& r, reverse_forwarder )$/;"	f	namespace:boost::range_detail	signature:( const BidirectionalRng& r, reverse_forwarder )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/strided.hpp	/^        operator|(Rng& rng, const strided_holder<Difference>& stride)$/;"	f	namespace:boost::range_detail	signature:(Rng& rng, const strided_holder<Difference>& stride)
boost::range_detail::operator |	/usr/include/boost/range/adaptor/strided.hpp	/^        operator|(const Rng& rng, const strided_holder<Difference>& stride)$/;"	f	namespace:boost::range_detail	signature:(const Rng& rng, const strided_holder<Difference>& stride)
boost::range_detail::operator |	/usr/include/boost/range/adaptor/tokenized.hpp	/^        operator|( BidirectionalRng& r, $/;"	f	namespace:boost::range_detail	signature:( BidirectionalRng& r, const regex_holder<R,S,F>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/tokenized.hpp	/^        operator|( const BidirectionalRng& r, $/;"	f	namespace:boost::range_detail	signature:( const BidirectionalRng& r, const regex_holder<R,S,F>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/transformed.hpp	/^        operator|( InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( InputRng& r, const transform_holder<UnaryFunction>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/transformed.hpp	/^        operator|( const InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( const InputRng& r, const transform_holder<UnaryFunction>& f )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/uniqued.hpp	/^        operator|( ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( ForwardRng& r, unique_forwarder )
boost::range_detail::operator |	/usr/include/boost/range/adaptor/uniqued.hpp	/^        operator|( const ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( const ForwardRng& r, unique_forwarder )
boost::range_detail::range	/usr/include/boost/range/detail/common.hpp	/^        class range$/;"	c	namespace:boost::range_detail
boost::range_detail::range::array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    pair_t >::type array_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::char_array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    wchar_array_t >::type char_array_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::char_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    const_char_ptr_t >::type char_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::const_char_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    string_t >::type const_char_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::const_wchar_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    char_ptr_t >::type const_wchar_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::pair_t	/usr/include/boost/range/detail/common.hpp	/^                                                                  void >::type pair_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::string_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    array_t >::type string_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::type	/usr/include/boost/range/detail/common.hpp	/^                                                                    char_array_t >::type type;  $/;"	t	class:boost::range_detail::range	access:public
boost::range_detail::range::wchar_array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    wchar_ptr_t >::type wchar_array_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::wchar_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    const_wchar_ptr_t >::type wchar_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range_begin	/usr/include/boost/range/begin.hpp	/^    inline Iterator range_begin( const std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>& p )
boost::range_detail::range_begin	/usr/include/boost/range/begin.hpp	/^    inline Iterator range_begin( std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( std::pair<Iterator,Iterator>& p )
boost::range_detail::range_begin	/usr/include/boost/range/begin.hpp	/^    range_begin( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
boost::range_detail::range_begin	/usr/include/boost/range/combine.hpp	/^        inline ::boost::tuples::null_type range_begin( ::boost::range_detail::void_& )$/;"	f	namespace:boost::range_detail	signature:( ::boost::range_detail::void_& )
boost::range_detail::range_begin	/usr/include/boost/range/combine.hpp	/^        inline ::boost::tuples::null_type range_begin( const ::boost::range_detail::void_& )$/;"	f	namespace:boost::range_detail	signature:( const ::boost::range_detail::void_& )
boost::range_detail::range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/begin.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:()
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/begin.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME range_iterator<C>::type fun( C& c )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( C& c )
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/begin.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME range_iterator<P>::type fun( const P& p )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const P& p )
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( char* s )
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const char* s )
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const wchar_t* s )
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( wchar_t* s )
boost::range_detail::range_calculate_size	/usr/include/boost/range/size.hpp	/^        range_calculate_size(const SinglePassRange& rng)$/;"	f	namespace:boost::range_detail	signature:(const SinglePassRange& rng)
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_::pts	/usr/include/boost/range/detail/const_iterator.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
boost::range_detail::range_const_iterator_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
boost::range_detail::range_const_iterator_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/const_iterator.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/const_iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::const_iterator type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/const_iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME P::first_type type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const char* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_::pts	/usr/include/boost/range/detail/difference_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_difference_type_	access:public
boost::range_detail::range_difference_type_::pts::type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef BOOST_DEDUCED_TYPENAME C::difference_type type;$/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
boost::range_detail::range_difference_type_::pts::type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME boost::iterator_difference< BOOST_DEDUCED_TYPENAME P::first_type>::type type;                $/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
boost::range_detail::range_difference_type_::pts::type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef std::ptrdiff_t type;$/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty::fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( C& c )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( C& c )
boost::range_detail::range_empty::fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( T BOOST_ARRAY_REF[sz] )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( T BOOST_ARRAY_REF[sz] )
boost::range_detail::range_empty::fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const P& p )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const P& p )
boost::range_detail::range_empty::fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const char* s )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const char* s )
boost::range_detail::range_empty::fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const wchar_t* s )
boost::range_detail::range_end	/usr/include/boost/range/combine.hpp	/^        inline ::boost::tuples::null_type range_end( ::boost::range_detail::void_& )$/;"	f	namespace:boost::range_detail	signature:( ::boost::range_detail::void_& )
boost::range_detail::range_end	/usr/include/boost/range/combine.hpp	/^        inline ::boost::tuples::null_type range_end( const ::boost::range_detail::void_& )$/;"	f	namespace:boost::range_detail	signature:( const ::boost::range_detail::void_& )
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<wchar_t_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<array_>  $/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<wchar_t_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/end.hpp	/^        inline Iterator range_end( const std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>& p )
boost::range_detail::range_end	/usr/include/boost/range/end.hpp	/^        inline Iterator range_end( std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( std::pair<Iterator,Iterator>& p )
boost::range_detail::range_end	/usr/include/boost/range/end.hpp	/^        range_end( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
boost::range_detail::range_end::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/detail_str.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:()
boost::range_detail::range_end::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/end.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:()
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( char* s )
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const char* s )
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const wchar_t* s )
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( wchar_t* s )
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/end.hpp	/^            fun( C& c )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( C& c )
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/end.hpp	/^            fun( const P& p )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const P& p )
boost::range_detail::range_end::inner	/usr/include/boost/range/detail/vc6/end.hpp	/^            struct inner {$/;"	s	struct:boost::range_detail::range_end	access:public
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun( C& c )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( C& c )
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun( const P& p )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const P& p )
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun(T& t)$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:(T& t)
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( char* s )
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const char* s )
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const wchar_t* s )
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( wchar_t* s )
boost::range_detail::range_helper	/usr/include/boost/range/detail/common.hpp	/^        struct range_helper$/;"	s	namespace:boost::range_detail
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_array_               = boost::is_array<C>::value );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_array_ = boost::is_array<C>::value )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_char_array_          = sizeof( boost::range_detail::is_char_array_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_char_array_ = sizeof( boost::range_detail::is_char_array_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_char_ptr_            = sizeof( boost::range_detail::is_char_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_char_ptr_ = sizeof( boost::range_detail::is_char_ptr_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_const_char_ptr_      = sizeof( boost::range_detail::is_const_char_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_const_char_ptr_ = sizeof( boost::range_detail::is_const_char_ptr_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_const_wchar_t_ptr_   = sizeof( boost::range_detail::is_const_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_const_wchar_t_ptr_ = sizeof( boost::range_detail::is_const_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_pair_                = sizeof( boost::range_detail::is_pair_impl( c ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_pair_ = sizeof( boost::range_detail::is_pair_impl( c ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_string_              = (boost::type_traits::ice_or<is_const_char_ptr_, is_const_wchar_t_ptr_>::value ));$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_string_ = (boost::type_traits::ice_or<is_const_char_ptr_, is_const_wchar_t_ptr_>::value ))
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_wchar_t_array_       = sizeof( boost::range_detail::is_wchar_t_array_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_wchar_t_array_ = sizeof( boost::range_detail::is_wchar_t_array_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_wchar_t_ptr_         = sizeof( boost::range_detail::is_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_wchar_t_ptr_ = sizeof( boost::range_detail::is_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::c	/usr/include/boost/range/detail/common.hpp	/^            static C* c;$/;"	m	struct:boost::range_detail::range_helper	access:public
boost::range_detail::range_helper::ptr	/usr/include/boost/range/detail/common.hpp	/^            static C  ptr;$/;"	m	struct:boost::range_detail::range_helper	access:public
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_ {$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
boost::range_detail::range_iterator_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
boost::range_detail::range_iterator_::pts	/usr/include/boost/range/detail/iterator.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef char* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const char* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef wchar_t* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/iterator.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::iterator type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME P::first_type type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef int type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<wchar_t_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<wchar_t_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:()
boost::range_detail::range_size_::fun	/usr/include/boost/range/detail/size.hpp	/^            fun( const P& p )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const P& p )
boost::range_detail::range_size_::fun	/usr/include/boost/range/detail/size.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME C::size_type fun( const C& c )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const C& c )
boost::range_detail::range_size_::fun	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( const char* s )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const char* s )
boost::range_detail::range_size_::fun	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const wchar_t* s )
boost::range_detail::range_size_::inner	/usr/include/boost/range/detail/vc6/size.hpp	/^            struct inner {$/;"	s	struct:boost::range_detail::range_size_	access:public
boost::range_detail::range_size_::inner::fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                fun( const P& p )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const P& p )
boost::range_detail::range_size_::inner::fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static BOOST_RANGE_DEDUCED_TYPENAME C::size_type fun( const C& c )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const C& c )
boost::range_detail::range_size_::inner::fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun( const char* s )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const char* s )
boost::range_detail::range_size_::inner::fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const wchar_t* s )
boost::range_detail::range_size_::inner::fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun(T& t)$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:(T& t)
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/size_type.hpp	/^        struct range_size_type_$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/size_type.hpp	/^        struct range_size_type_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_size_type_	access:public
boost::range_detail::range_size_type_::pts	/usr/include/boost/range/detail/size_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_size_type_	access:public
boost::range_detail::range_size_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef std::size_t type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
boost::range_detail::range_size_type_::pts::type	/usr/include/boost/range/detail/size_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::size_type type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
boost::range_detail::range_size_type_::pts::type	/usr/include/boost/range/detail/size_type.hpp	/^                typedef std::size_t type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
boost::range_detail::range_value_type_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
boost::range_detail::range_value_type_::pts	/usr/include/boost/range/detail/value_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef char type; $/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const char type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef wchar_t type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef char type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const wchar_t type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_DEDUCED_TYPENAME remove_extent<T>::type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::value_type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME boost::iterator_value< BOOST_RANGE_DEDUCED_TYPENAME P::first_type >::type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::regex_forwarder	/usr/include/boost/range/adaptor/tokenized.hpp	/^        struct regex_forwarder$/;"	s	namespace:boost::range_detail
boost::range_detail::regex_forwarder::operator ()	/usr/include/boost/range/adaptor/tokenized.hpp	/^            operator()( const Regex& re, $/;"	f	struct:boost::range_detail::regex_forwarder	access:public	signature:( const Regex& re, const Submatch& sub, regex_constants::match_flag_type f = regex_constants::match_default ) const
boost::range_detail::regex_forwarder::operator ()	/usr/include/boost/range/adaptor/tokenized.hpp	/^            operator()( const Regex& re, $/;"	f	struct:boost::range_detail::regex_forwarder	access:public	signature:( const Regex& re, int submatch = 0, regex_constants::match_flag_type f = regex_constants::match_default ) const
boost::range_detail::regex_holder	/usr/include/boost/range/adaptor/tokenized.hpp	/^        struct regex_holder$/;"	s	namespace:boost::range_detail
boost::range_detail::regex_holder::f	/usr/include/boost/range/adaptor/tokenized.hpp	/^            V         f;$/;"	m	struct:boost::range_detail::regex_holder	access:public
boost::range_detail::regex_holder::operator =	/usr/include/boost/range/adaptor/tokenized.hpp	/^            void operator=(const regex_holder&);$/;"	p	struct:boost::range_detail::regex_holder	access:private	signature:(const regex_holder&)
boost::range_detail::regex_holder::re	/usr/include/boost/range/adaptor/tokenized.hpp	/^            const T&  re;$/;"	m	struct:boost::range_detail::regex_holder	access:public
boost::range_detail::regex_holder::regex_holder	/usr/include/boost/range/adaptor/tokenized.hpp	/^            regex_holder( const T& rex, const U& subm, V flag ) :$/;"	f	struct:boost::range_detail::regex_holder	access:public	signature:( const T& rex, const U& subm, V flag )
boost::range_detail::regex_holder::sub	/usr/include/boost/range/adaptor/tokenized.hpp	/^            const U&  sub;$/;"	m	struct:boost::range_detail::regex_holder	access:public
boost::range_detail::remove_extent	/usr/include/boost/range/detail/remove_extent.hpp	/^        struct remove_extent {$/;"	s	namespace:boost::range_detail
boost::range_detail::remove_extent::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/remove_extent.hpp	/^            BOOST_STATIC_CONSTANT(std::size_t, size = sizeof(*ar) \/ sizeof((*ar)[0]));$/;"	p	struct:boost::range_detail::remove_extent	access:public	signature:(std::size_t, size = sizeof(*ar) / sizeof((*ar)[0]))
boost::range_detail::remove_extent::ar	/usr/include/boost/range/detail/remove_extent.hpp	/^            static T* ar;$/;"	m	struct:boost::range_detail::remove_extent	access:public
boost::range_detail::remove_extent::result1	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type result1;$/;"	t	struct:boost::range_detail::remove_extent	access:public
boost::range_detail::remove_extent::result2	/usr/include/boost/range/detail/remove_extent.hpp	/^                    > result2;$/;"	t	struct:boost::range_detail::remove_extent	access:public
boost::range_detail::remove_extent::type	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type type;$/;"	t	struct:boost::range_detail::remove_extent	access:public
boost::range_detail::replace_holder	/usr/include/boost/range/adaptor/replaced.hpp	/^        class replace_holder : public holder2<T>$/;"	c	namespace:boost::range_detail	inherits:holder2
boost::range_detail::replace_holder::operator =	/usr/include/boost/range/adaptor/replaced.hpp	/^            void operator=(const replace_holder&);$/;"	p	class:boost::range_detail::replace_holder	access:private	signature:(const replace_holder&)
boost::range_detail::replace_holder::replace_holder	/usr/include/boost/range/adaptor/replaced.hpp	/^            replace_holder( const T& from, const T& to )$/;"	f	class:boost::range_detail::replace_holder	access:public	signature:( const T& from, const T& to )
boost::range_detail::replace_if_holder	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        class replace_if_holder$/;"	c	namespace:boost::range_detail
boost::range_detail::replace_if_holder::m_pred	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            Pred m_pred;$/;"	m	class:boost::range_detail::replace_if_holder	access:private
boost::range_detail::replace_if_holder::m_to	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            T m_to;$/;"	m	class:boost::range_detail::replace_if_holder	access:private
boost::range_detail::replace_if_holder::pred	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            const Pred& pred() const { return m_pred; }$/;"	f	class:boost::range_detail::replace_if_holder	access:public	signature:() const
boost::range_detail::replace_if_holder::replace_if_holder	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            replace_if_holder( const Pred& pred, const T& to )$/;"	f	class:boost::range_detail::replace_if_holder	access:public	signature:( const Pred& pred, const T& to )
boost::range_detail::replace_if_holder::to	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            const T& to() const { return m_to; }$/;"	f	class:boost::range_detail::replace_if_holder	access:public	signature:() const
boost::range_detail::replace_value	/usr/include/boost/range/adaptor/replaced.hpp	/^        class replace_value$/;"	c	namespace:boost::range_detail
boost::range_detail::replace_value::first_argument_type	/usr/include/boost/range/adaptor/replaced.hpp	/^            typedef const Value& first_argument_type;$/;"	t	class:boost::range_detail::replace_value	access:public
boost::range_detail::replace_value::m_from	/usr/include/boost/range/adaptor/replaced.hpp	/^            Value m_from;$/;"	m	class:boost::range_detail::replace_value	access:private
boost::range_detail::replace_value::m_to	/usr/include/boost/range/adaptor/replaced.hpp	/^            Value m_to;$/;"	m	class:boost::range_detail::replace_value	access:private
boost::range_detail::replace_value::operator ()	/usr/include/boost/range/adaptor/replaced.hpp	/^            const Value& operator()(const Value& x) const$/;"	f	class:boost::range_detail::replace_value	access:public	signature:(const Value& x) const
boost::range_detail::replace_value::replace_value	/usr/include/boost/range/adaptor/replaced.hpp	/^            replace_value(const Value& from, const Value& to)$/;"	f	class:boost::range_detail::replace_value	access:public	signature:(const Value& from, const Value& to)
boost::range_detail::replace_value::result_type	/usr/include/boost/range/adaptor/replaced.hpp	/^            typedef const Value& result_type;$/;"	t	class:boost::range_detail::replace_value	access:public
boost::range_detail::replace_value_if	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        class replace_value_if$/;"	c	namespace:boost::range_detail
boost::range_detail::replace_value_if::first_argument_type	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            typedef const Value& first_argument_type;$/;"	t	class:boost::range_detail::replace_value_if	access:public
boost::range_detail::replace_value_if::m_pred	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            Pred  m_pred;$/;"	m	class:boost::range_detail::replace_value_if	access:private
boost::range_detail::replace_value_if::m_to	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            Value m_to;$/;"	m	class:boost::range_detail::replace_value_if	access:private
boost::range_detail::replace_value_if::operator ()	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            const Value& operator()(const Value& x) const$/;"	f	class:boost::range_detail::replace_value_if	access:public	signature:(const Value& x) const
boost::range_detail::replace_value_if::replace_value_if	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            replace_value_if(const Pred& pred, const Value& to)$/;"	f	class:boost::range_detail::replace_value_if	access:public	signature:(const Pred& pred, const Value& to)
boost::range_detail::replace_value_if::result_type	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            typedef const Value& result_type;$/;"	t	class:boost::range_detail::replace_value_if	access:public
boost::range_detail::replaced_if_range	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        class replaced_if_range :$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_range
boost::range_detail::replaced_if_range::Fn	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            typedef replace_value_if< Pred, BOOST_DEDUCED_TYPENAME range_value<R>::type > Fn;$/;"	t	class:boost::range_detail::replaced_if_range	access:private
boost::range_detail::replaced_if_range::base_t	/usr/include/boost/range/adaptor/replaced_if.hpp	/^                    BOOST_DEDUCED_TYPENAME range_iterator<R>::type > > base_t;$/;"	t	class:boost::range_detail::replaced_if_range	access:private
boost::range_detail::replaced_if_range::replaced_if_range	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            replaced_if_range( R& r, const Pred& pred, value_type to )$/;"	f	class:boost::range_detail::replaced_if_range	access:public	signature:( R& r, const Pred& pred, value_type to )
boost::range_detail::replaced_if_range::value_type	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_value<R>::type value_type;$/;"	t	class:boost::range_detail::replaced_if_range	access:public
boost::range_detail::replaced_range	/usr/include/boost/range/adaptor/replaced.hpp	/^        class replaced_range :$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_range
boost::range_detail::replaced_range::Fn	/usr/include/boost/range/adaptor/replaced.hpp	/^            typedef replace_value< BOOST_DEDUCED_TYPENAME range_value<R>::type > Fn;$/;"	t	class:boost::range_detail::replaced_range	access:private
boost::range_detail::replaced_range::base_t	/usr/include/boost/range/adaptor/replaced.hpp	/^                    BOOST_DEDUCED_TYPENAME range_iterator<R>::type > > base_t;$/;"	t	class:boost::range_detail::replaced_range	access:private
boost::range_detail::replaced_range::replaced_range	/usr/include/boost/range/adaptor/replaced.hpp	/^            replaced_range( R& r, value_type from, value_type to )$/;"	f	class:boost::range_detail::replaced_range	access:public	signature:( R& r, value_type from, value_type to )
boost::range_detail::replaced_range::value_type	/usr/include/boost/range/adaptor/replaced.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_value<R>::type value_type;$/;"	t	class:boost::range_detail::replaced_range	access:public
boost::range_detail::reverse_forwarder	/usr/include/boost/range/adaptor/reversed.hpp	/^        struct reverse_forwarder {};$/;"	s	namespace:boost::range_detail
boost::range_detail::reversed_range	/usr/include/boost/range/adaptor/reversed.hpp	/^        struct reversed_range : $/;"	s	namespace:boost::range_detail	inherits:boost::iterator_range
boost::range_detail::reversed_range::base	/usr/include/boost/range/adaptor/reversed.hpp	/^                base;$/;"	t	struct:boost::range_detail::reversed_range	access:private
boost::range_detail::reversed_range::iterator	/usr/include/boost/range/adaptor/reversed.hpp	/^            typedef boost::reverse_iterator<BOOST_DEDUCED_TYPENAME range_iterator<R>::type> iterator;$/;"	t	struct:boost::range_detail::reversed_range	access:public
boost::range_detail::reversed_range::reversed_range	/usr/include/boost/range/adaptor/reversed.hpp	/^            explicit reversed_range( R& r ) $/;"	f	struct:boost::range_detail::reversed_range	access:public	signature:( R& r )
boost::range_detail::safe_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^class safe_bool$/;"	c	namespace:boost::range_detail
boost::range_detail::safe_bool::detail_safe_bool_member_fn	/usr/include/boost/range/detail/safe_bool.hpp	/^    bool detail_safe_bool_member_fn() const { return false; }$/;"	f	class:boost::range_detail::safe_bool	access:private	signature:() const
boost::range_detail::safe_bool::operator =	/usr/include/boost/range/detail/safe_bool.hpp	/^    void operator=(const safe_bool&);$/;"	p	class:boost::range_detail::safe_bool	access:private	signature:(const safe_bool&)
boost::range_detail::safe_bool::safe_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    safe_bool();$/;"	p	class:boost::range_detail::safe_bool	access:private	signature:()
boost::range_detail::safe_bool::safe_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    safe_bool(const safe_bool&);$/;"	p	class:boost::range_detail::safe_bool	access:private	signature:(const safe_bool&)
boost::range_detail::safe_bool::this_type	/usr/include/boost/range/detail/safe_bool.hpp	/^    typedef safe_bool this_type;$/;"	t	class:boost::range_detail::safe_bool	access:public
boost::range_detail::safe_bool::to_unspecified_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    static unspecified_bool_type to_unspecified_bool(const bool x, DataMemberPtr p)$/;"	f	class:boost::range_detail::safe_bool	access:private	signature:(const bool x, DataMemberPtr p)
boost::range_detail::safe_bool::to_unspecified_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    static unspecified_bool_type to_unspecified_bool(const bool x, DataMemberPtr)$/;"	f	class:boost::range_detail::safe_bool	access:public	signature:(const bool x, DataMemberPtr)
boost::range_detail::safe_bool::unspecified_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    static void unspecified_bool(this_type***)$/;"	f	class:boost::range_detail::safe_bool	access:public	signature:(this_type***)
boost::range_detail::safe_bool::unspecified_bool_type	/usr/include/boost/range/detail/safe_bool.hpp	/^    typedef DataMemberPtr unspecified_bool_type;$/;"	t	class:boost::range_detail::safe_bool	access:private
boost::range_detail::safe_bool::unspecified_bool_type	/usr/include/boost/range/detail/safe_bool.hpp	/^    typedef bool unspecified_bool_type;$/;"	t	class:boost::range_detail::safe_bool	access:public
boost::range_detail::safe_bool::unspecified_bool_type	/usr/include/boost/range/detail/safe_bool.hpp	/^    typedef void(*unspecified_bool_type)(this_type***);$/;"	t	class:boost::range_detail::safe_bool	access:public
boost::range_detail::safe_bool::~safe_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    ~safe_bool();$/;"	p	class:boost::range_detail::safe_bool	access:private	signature:()
boost::range_detail::search_n_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_impl(ForwardIterator first, ForwardIterator last, Integer count,$/;"	f	namespace:boost::range_detail	signature:(ForwardIterator first, ForwardIterator last, Integer count, const Value& value, std::forward_iterator_tag)
boost::range_detail::search_n_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_impl(ForwardIterator first, ForwardIterator last,$/;"	f	namespace:boost::range_detail	signature:(ForwardIterator first, ForwardIterator last, Integer count, const Value& value)
boost::range_detail::search_n_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_impl(RandomAccessIterator first, RandomAccessIterator last,$/;"	f	namespace:boost::range_detail	signature:(RandomAccessIterator first, RandomAccessIterator last, Integer count, const Value& value, std::random_access_iterator_tag)
boost::range_detail::search_n_pred_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_pred_impl(ForwardIterator first, ForwardIterator last,$/;"	f	namespace:boost::range_detail	signature:(ForwardIterator first, ForwardIterator last, Integer count, const Value& value, BinaryPredicate pred)
boost::range_detail::search_n_pred_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_pred_impl(ForwardIterator first, ForwardIterator last,$/;"	f	namespace:boost::range_detail	signature:(ForwardIterator first, ForwardIterator last, Integer count, const Value& value, BinaryPredicate pred, std::forward_iterator_tag)
boost::range_detail::search_n_pred_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_pred_impl(RandomAccessIterator first, RandomAccessIterator last,$/;"	f	namespace:boost::range_detail	signature:(RandomAccessIterator first, RandomAccessIterator last, Integer count, const Value& value, BinaryPredicate pred, std::random_access_iterator_tag)
boost::range_detail::select	/usr/include/boost/range/detail/remove_extent.hpp	/^        struct select {$/;"	s	namespace:boost::range_detail
boost::range_detail::select::result1	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type result1;$/;"	t	struct:boost::range_detail::select	access:public
boost::range_detail::select::result2	/usr/include/boost/range/detail/remove_extent.hpp	/^                    > result2;$/;"	t	struct:boost::range_detail::select	access:public
boost::range_detail::select::type	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type type;$/;"	t	struct:boost::range_detail::select	access:public
boost::range_detail::select_first	/usr/include/boost/range/adaptor/map.hpp	/^        struct select_first$/;"	s	namespace:boost::range_detail
boost::range_detail::select_first::argument_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_reference<const Map>::type argument_type;$/;"	t	struct:boost::range_detail::select_first	access:public
boost::range_detail::select_first::operator ()	/usr/include/boost/range/adaptor/map.hpp	/^            result_type operator()( argument_type r ) const$/;"	f	struct:boost::range_detail::select_first	access:public	signature:( argument_type r ) const
boost::range_detail::select_first::result_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef const BOOST_DEDUCED_TYPENAME range_value<const Map>::type::first_type& result_type;$/;"	t	struct:boost::range_detail::select_first	access:public
boost::range_detail::select_first_range	/usr/include/boost/range/adaptor/map.hpp	/^        class select_first_range$/;"	c	namespace:boost::range_detail	inherits:transformed_range
boost::range_detail::select_first_range::base	/usr/include/boost/range/adaptor/map.hpp	/^            typedef transformed_range<select_first<StdPairRng>, const StdPairRng> base;$/;"	t	class:boost::range_detail::select_first_range	access:private
boost::range_detail::select_first_range::select_first_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_first_range(const base& other) : base(other) {}$/;"	f	class:boost::range_detail::select_first_range	access:public	signature:(const base& other)
boost::range_detail::select_first_range::select_first_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_first_range(transform_fn_type fn, source_range_type& rng)$/;"	f	class:boost::range_detail::select_first_range	access:public	signature:(transform_fn_type fn, source_range_type& rng)
boost::range_detail::select_first_range::source_range_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef const StdPairRng source_range_type;$/;"	t	class:boost::range_detail::select_first_range	access:public
boost::range_detail::select_first_range::transform_fn_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef select_first<StdPairRng> transform_fn_type;$/;"	t	class:boost::range_detail::select_first_range	access:public
boost::range_detail::select_second_const	/usr/include/boost/range/adaptor/map.hpp	/^        struct select_second_const$/;"	s	namespace:boost::range_detail
boost::range_detail::select_second_const::argument_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_reference<const Map>::type argument_type;$/;"	t	struct:boost::range_detail::select_second_const	access:public
boost::range_detail::select_second_const::operator ()	/usr/include/boost/range/adaptor/map.hpp	/^            result_type operator()( argument_type r ) const$/;"	f	struct:boost::range_detail::select_second_const	access:public	signature:( argument_type r ) const
boost::range_detail::select_second_const::result_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef const BOOST_DEDUCED_TYPENAME range_value<const Map>::type::second_type& result_type;$/;"	t	struct:boost::range_detail::select_second_const	access:public
boost::range_detail::select_second_const_range	/usr/include/boost/range/adaptor/map.hpp	/^        class select_second_const_range$/;"	c	namespace:boost::range_detail	inherits:transformed_range
boost::range_detail::select_second_const_range::base	/usr/include/boost/range/adaptor/map.hpp	/^            typedef transformed_range<select_second_const<StdPairRng>, const StdPairRng> base;$/;"	t	class:boost::range_detail::select_second_const_range	access:private
boost::range_detail::select_second_const_range::select_second_const_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_second_const_range(const base& other) : base(other) {}$/;"	f	class:boost::range_detail::select_second_const_range	access:public	signature:(const base& other)
boost::range_detail::select_second_const_range::select_second_const_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_second_const_range(transform_fn_type fn, source_range_type& rng)$/;"	f	class:boost::range_detail::select_second_const_range	access:public	signature:(transform_fn_type fn, source_range_type& rng)
boost::range_detail::select_second_const_range::source_range_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef const StdPairRng source_range_type;$/;"	t	class:boost::range_detail::select_second_const_range	access:public
boost::range_detail::select_second_const_range::transform_fn_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef select_second_const<StdPairRng> transform_fn_type;$/;"	t	class:boost::range_detail::select_second_const_range	access:public
boost::range_detail::select_second_mutable	/usr/include/boost/range/adaptor/map.hpp	/^        struct select_second_mutable$/;"	s	namespace:boost::range_detail
boost::range_detail::select_second_mutable::argument_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_reference<Map>::type argument_type;$/;"	t	struct:boost::range_detail::select_second_mutable	access:public
boost::range_detail::select_second_mutable::operator ()	/usr/include/boost/range/adaptor/map.hpp	/^            result_type operator()( argument_type r ) const$/;"	f	struct:boost::range_detail::select_second_mutable	access:public	signature:( argument_type r ) const
boost::range_detail::select_second_mutable::result_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_value<Map>::type::second_type& result_type;$/;"	t	struct:boost::range_detail::select_second_mutable	access:public
boost::range_detail::select_second_mutable_range	/usr/include/boost/range/adaptor/map.hpp	/^        class select_second_mutable_range$/;"	c	namespace:boost::range_detail	inherits:transformed_range
boost::range_detail::select_second_mutable_range::base	/usr/include/boost/range/adaptor/map.hpp	/^            typedef transformed_range<select_second_mutable<StdPairRng>, StdPairRng> base;$/;"	t	class:boost::range_detail::select_second_mutable_range	access:private
boost::range_detail::select_second_mutable_range::select_second_mutable_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_second_mutable_range(const base& other) : base(other) {}$/;"	f	class:boost::range_detail::select_second_mutable_range	access:public	signature:(const base& other)
boost::range_detail::select_second_mutable_range::select_second_mutable_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_second_mutable_range(transform_fn_type fn, source_range_type& rng)$/;"	f	class:boost::range_detail::select_second_mutable_range	access:public	signature:(transform_fn_type fn, source_range_type& rng)
boost::range_detail::select_second_mutable_range::source_range_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef StdPairRng source_range_type;$/;"	t	class:boost::range_detail::select_second_mutable_range	access:public
boost::range_detail::select_second_mutable_range::transform_fn_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef select_second_mutable<StdPairRng> transform_fn_type;$/;"	t	class:boost::range_detail::select_second_mutable_range	access:public
boost::range_detail::skip_iterator	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        class skip_iterator$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_adaptor,Pred
boost::range_detail::skip_iterator::base_t	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^                    > base_t;$/;"	t	class:boost::range_detail::skip_iterator	access:private
boost::range_detail::skip_iterator::increment	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            void increment()$/;"	f	class:boost::range_detail::skip_iterator	access:public	signature:()
boost::range_detail::skip_iterator::iter_t	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            typedef Iter iter_t;$/;"	t	class:boost::range_detail::skip_iterator	access:public
boost::range_detail::skip_iterator::m_last	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            iter_t m_last;$/;"	m	class:boost::range_detail::skip_iterator	access:public
boost::range_detail::skip_iterator::move_to_next_valid	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            void move_to_next_valid()$/;"	f	class:boost::range_detail::skip_iterator	access:public	signature:()
boost::range_detail::skip_iterator::pred_t	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            typedef Pred pred_t;$/;"	t	class:boost::range_detail::skip_iterator	access:public
boost::range_detail::skip_iterator::skip_iterator	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            skip_iterator( const skip_iterator<OtherIter, pred_t, default_pass>& other )$/;"	f	class:boost::range_detail::skip_iterator	access:public	signature:( const skip_iterator<OtherIter, pred_t, default_pass>& other )
boost::range_detail::skip_iterator::skip_iterator	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            skip_iterator() : m_last() {}$/;"	f	class:boost::range_detail::skip_iterator	access:public	signature:()
boost::range_detail::skip_iterator::skip_iterator	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            skip_iterator(iter_t it, iter_t last, const Pred& pred)$/;"	f	class:boost::range_detail::skip_iterator	access:public	signature:(iter_t it, iter_t last, const Pred& pred)
boost::range_detail::std_container_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<1>::type    std_container_;$/;"	t	namespace:boost::range_detail
boost::range_detail::std_pair_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<2>::type    std_pair_;$/;"	t	namespace:boost::range_detail
boost::range_detail::str_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        str_begin( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
boost::range_detail::str_end	/usr/include/boost/range/detail/detail_str.hpp	/^        str_end( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
boost::range_detail::str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline Char* str_end( Char* s )$/;"	f	namespace:boost::range_detail	signature:( Char* s )
boost::range_detail::str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const char* str_end( const char* s, const char* )$/;"	f	namespace:boost::range_detail	signature:( const char* s, const char* )
boost::range_detail::str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const wchar_t* str_end( const wchar_t* s, const wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* s, const wchar_t* )
boost::range_detail::str_size	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t str_size( const Char* const& s )$/;"	f	namespace:boost::range_detail	signature:( const Char* const& s )
boost::range_detail::strided_holder	/usr/include/boost/range/adaptor/strided.hpp	/^        class strided_holder : public holder<Difference>$/;"	c	namespace:boost::range_detail	inherits:holder
boost::range_detail::strided_holder::strided_holder	/usr/include/boost/range/adaptor/strided.hpp	/^            explicit strided_holder(Difference value) : holder<Difference>(value) {}$/;"	f	class:boost::range_detail::strided_holder	access:public	signature:(Difference value)
boost::range_detail::strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^        class strided_iterator$/;"	c	namespace:boost::range_detail	inherits:iterator_adaptor
boost::range_detail::strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^        class strided_iterator<BaseIterator, bidirectional_traversal_tag>$/;"	c	namespace:boost::range_detail	inherits:iterator_adaptor
boost::range_detail::strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^        class strided_iterator<BaseIterator, random_access_traversal_tag>$/;"	c	namespace:boost::range_detail	inherits:iterator_adaptor
boost::range_detail::strided_iterator::advance	/usr/include/boost/range/adaptor/strided.hpp	/^            void advance(difference_type offset)$/;"	f	class:boost::range_detail::strided_iterator	access:private	signature:(difference_type offset)
boost::range_detail::strided_iterator::base_begin	/usr/include/boost/range/adaptor/strided.hpp	/^            base_iterator base_begin() const { return m_first; }$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:() const
boost::range_detail::strided_iterator::base_end	/usr/include/boost/range/adaptor/strided.hpp	/^            base_iterator base_end() const { return m_last; }$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:() const
boost::range_detail::strided_iterator::base_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            typedef BaseIterator base_iterator;$/;"	t	class:boost::range_detail::strided_iterator	access:public
boost::range_detail::strided_iterator::decrement	/usr/include/boost/range/adaptor/strided.hpp	/^            void decrement()$/;"	f	class:boost::range_detail::strided_iterator	access:private	signature:()
boost::range_detail::strided_iterator::difference_type	/usr/include/boost/range/adaptor/strided.hpp	/^            typedef BOOST_DEDUCED_TYPENAME std::iterator_traits<BaseIterator>::difference_type difference_type;$/;"	t	class:boost::range_detail::strided_iterator	access:public
boost::range_detail::strided_iterator::difference_type	/usr/include/boost/range/adaptor/strided.hpp	/^            typedef BOOST_DEDUCED_TYPENAME super_t::difference_type difference_type;$/;"	t	class:boost::range_detail::strided_iterator	access:public
boost::range_detail::strided_iterator::distance_to	/usr/include/boost/range/adaptor/strided.hpp	/^            difference_type distance_to(const strided_iterator<OtherIterator, random_access_traversal_tag>& other,$/;"	f	class:boost::range_detail::strided_iterator	access:private	signature:(const strided_iterator<OtherIterator, random_access_traversal_tag>& other, BOOST_DEDUCED_TYPENAME enable_if_convertible<OtherIterator, BaseIterator>::type* = 0) const
boost::range_detail::strided_iterator::equal	/usr/include/boost/range/adaptor/strided.hpp	/^            bool equal(const strided_iterator& other) const$/;"	f	class:boost::range_detail::strided_iterator	access:private	signature:(const strided_iterator& other) const
boost::range_detail::strided_iterator::get_index	/usr/include/boost/range/adaptor/strided.hpp	/^            difference_type get_index() const { return m_index; }$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:() const
boost::range_detail::strided_iterator::get_stride	/usr/include/boost/range/adaptor/strided.hpp	/^            difference_type get_stride() const { return m_stride; }$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:() const
boost::range_detail::strided_iterator::increment	/usr/include/boost/range/adaptor/strided.hpp	/^            void increment()$/;"	f	class:boost::range_detail::strided_iterator	access:private	signature:()
boost::range_detail::strided_iterator::m_first	/usr/include/boost/range/adaptor/strided.hpp	/^            base_iterator m_first;$/;"	m	class:boost::range_detail::strided_iterator	access:private
boost::range_detail::strided_iterator::m_index	/usr/include/boost/range/adaptor/strided.hpp	/^            difference_type m_index;$/;"	m	class:boost::range_detail::strided_iterator	access:private
boost::range_detail::strided_iterator::m_last	/usr/include/boost/range/adaptor/strided.hpp	/^            base_iterator m_last;$/;"	m	class:boost::range_detail::strided_iterator	access:private
boost::range_detail::strided_iterator::m_stride	/usr/include/boost/range/adaptor/strided.hpp	/^            difference_type m_stride;$/;"	m	class:boost::range_detail::strided_iterator	access:private
boost::range_detail::strided_iterator::strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator()$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:()
boost::range_detail::strided_iterator::strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator(BaseIterator first, BaseIterator it, BaseIterator last, difference_type stride)$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:(BaseIterator first, BaseIterator it, BaseIterator last, difference_type stride)
boost::range_detail::strided_iterator::strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator(base_iterator first, base_iterator it, base_iterator last, difference_type stride)$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:(base_iterator first, base_iterator it, base_iterator last, difference_type stride)
boost::range_detail::strided_iterator::strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator(const strided_iterator<OtherIterator, Category>& other,$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:(const strided_iterator<OtherIterator, Category>& other, BOOST_DEDUCED_TYPENAME enable_if_convertible<OtherIterator, base_iterator>::type* = 0)
boost::range_detail::strided_iterator::strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator(const strided_iterator<OtherIterator, bidirectional_traversal_tag>& other,$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:(const strided_iterator<OtherIterator, bidirectional_traversal_tag>& other, BOOST_DEDUCED_TYPENAME enable_if_convertible<OtherIterator, base_iterator>::type* = 0)
boost::range_detail::strided_iterator::strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator(const strided_iterator<OtherIterator, random_access_traversal_tag>& other,$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:(const strided_iterator<OtherIterator, random_access_traversal_tag>& other, BOOST_DEDUCED_TYPENAME enable_if_convertible<OtherIterator, BaseIterator>::type* = 0)
boost::range_detail::strided_iterator::super_t	/usr/include/boost/range/adaptor/strided.hpp	/^                    > super_t;$/;"	t	class:boost::range_detail::strided_iterator	access:private
boost::range_detail::strided_range	/usr/include/boost/range/adaptor/strided.hpp	/^        class strided_range$/;"	c	namespace:boost::range_detail	inherits:iterator_range
boost::range_detail::strided_range::iter_type	/usr/include/boost/range/adaptor/strided.hpp	/^                    > iter_type;$/;"	t	class:boost::range_detail::strided_range	access:private
boost::range_detail::strided_range::strided_range	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_range(Difference stride, Rng& rng)$/;"	f	class:boost::range_detail::strided_range	access:public	signature:(Difference stride, Rng& rng)
boost::range_detail::strided_range::super_t	/usr/include/boost/range/adaptor/strided.hpp	/^            typedef iterator_range<iter_type> super_t;$/;"	t	class:boost::range_detail::strided_range	access:private
boost::range_detail::string_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<12>::type   string_;$/;"	t	namespace:boost::range_detail
boost::range_detail::swap_ranges_impl	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^        void swap_ranges_impl(Iterator1 first1, Iterator1 last1,$/;"	f	namespace:boost::range_detail	signature:(Iterator1 first1, Iterator1 last1, Iterator2 first2, Iterator2 last2)
boost::range_detail::swap_ranges_impl	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^        void swap_ranges_impl(Iterator1 it1, Iterator1 last1,$/;"	f	namespace:boost::range_detail	signature:(Iterator1 it1, Iterator1 last1, Iterator2 it2, Iterator2 last2, random_access_traversal_tag, random_access_traversal_tag)
boost::range_detail::swap_ranges_impl	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^        void swap_ranges_impl(Iterator1 it1, Iterator1 last1,$/;"	f	namespace:boost::range_detail	signature:(Iterator1 it1, Iterator1 last1, Iterator2 it2, Iterator2 last2, single_pass_traversal_tag, single_pass_traversal_tag)
boost::range_detail::tokenized_range	/usr/include/boost/range/adaptor/tokenized.hpp	/^        struct tokenized_range : $/;"	s	namespace:boost::range_detail	inherits:boost::iterator_range
boost::range_detail::tokenized_range::base	/usr/include/boost/range/adaptor/tokenized.hpp	/^                base;$/;"	t	struct:boost::range_detail::tokenized_range	access:private
boost::range_detail::tokenized_range::regex_iter	/usr/include/boost/range/adaptor/tokenized.hpp	/^                regex_iter;$/;"	t	struct:boost::range_detail::tokenized_range	access:private
boost::range_detail::tokenized_range::regex_type	/usr/include/boost/range/adaptor/tokenized.hpp	/^                regex_type;$/;"	t	struct:boost::range_detail::tokenized_range	access:private
boost::range_detail::tokenized_range::tokenized_range	/usr/include/boost/range/adaptor/tokenized.hpp	/^            tokenized_range( R& r, const Regex& re, const Submatch& sub, Flag f )$/;"	f	struct:boost::range_detail::tokenized_range	access:public	signature:( R& r, const Regex& re, const Submatch& sub, Flag f )
boost::range_detail::transform_holder	/usr/include/boost/range/adaptor/transformed.hpp	/^        struct transform_holder : holder<T>$/;"	s	namespace:boost::range_detail	inherits:holder
boost::range_detail::transform_holder::transform_holder	/usr/include/boost/range/adaptor/transformed.hpp	/^            transform_holder( T r ) : holder<T>(r)$/;"	f	struct:boost::range_detail::transform_holder	access:public	signature:( T r )
boost::range_detail::transform_impl	/usr/include/boost/range/algorithm/transform.hpp	/^        transform_impl(SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:(SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2, OutputIterator out, BinaryFunction fn)
boost::range_detail::transformed_range	/usr/include/boost/range/adaptor/transformed.hpp	/^        struct transformed_range :$/;"	s	namespace:boost::range_detail	inherits:boost::iterator_range
boost::range_detail::transformed_range::base	/usr/include/boost/range/adaptor/transformed.hpp	/^                base;$/;"	t	struct:boost::range_detail::transformed_range	access:private
boost::range_detail::transformed_range::source_range_type	/usr/include/boost/range/adaptor/transformed.hpp	/^            typedef R source_range_type;$/;"	t	struct:boost::range_detail::transformed_range	access:public
boost::range_detail::transformed_range::transform_fn_type	/usr/include/boost/range/adaptor/transformed.hpp	/^            typedef F transform_fn_type;$/;"	t	struct:boost::range_detail::transformed_range	access:public
boost::range_detail::transformed_range::transformed_range	/usr/include/boost/range/adaptor/transformed.hpp	/^            transformed_range( F f, R& r )$/;"	f	struct:boost::range_detail::transformed_range	access:public	signature:( F f, R& r )
boost::range_detail::tuple_iter	/usr/include/boost/range/combine.hpp	/^        struct tuple_iter$/;"	s	namespace:boost::range_detail
boost::range_detail::tuple_iter::type	/usr/include/boost/range/combine.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::tuple_iter	access:public
boost::range_detail::tuple_range	/usr/include/boost/range/combine.hpp	/^        struct tuple_range$/;"	s	namespace:boost::range_detail
boost::range_detail::tuple_range::type	/usr/include/boost/range/combine.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::tuple_range	access:public
boost::range_detail::unique_forwarder	/usr/include/boost/range/adaptor/uniqued.hpp	/^        struct unique_forwarder { };$/;"	s	namespace:boost::range_detail
boost::range_detail::unique_not_equal_to	/usr/include/boost/range/adaptor/uniqued.hpp	/^        struct unique_not_equal_to$/;"	s	namespace:boost::range_detail
boost::range_detail::unique_not_equal_to::operator ()	/usr/include/boost/range/adaptor/uniqued.hpp	/^            bool operator()( const T& l, const T& r ) const$/;"	f	struct:boost::range_detail::unique_not_equal_to	access:public	signature:( const T& l, const T& r ) const
boost::range_detail::unique_not_equal_to::result_type	/usr/include/boost/range/adaptor/uniqued.hpp	/^            typedef bool result_type;$/;"	t	struct:boost::range_detail::unique_not_equal_to	access:public
boost::range_detail::uniqued_range	/usr/include/boost/range/adaptor/uniqued.hpp	/^        class uniqued_range : public adjacent_filtered_range<unique_not_equal_to, ForwardRng, true>$/;"	c	namespace:boost::range_detail	inherits:adjacent_filtered_range
boost::range_detail::uniqued_range::base	/usr/include/boost/range/adaptor/uniqued.hpp	/^            typedef adjacent_filtered_range<unique_not_equal_to, ForwardRng, true> base;$/;"	t	class:boost::range_detail::uniqued_range	access:private
boost::range_detail::uniqued_range::uniqued_range	/usr/include/boost/range/adaptor/uniqued.hpp	/^            explicit uniqued_range(ForwardRng& rng)$/;"	f	class:boost::range_detail::uniqued_range	access:public	signature:(ForwardRng& rng)
boost::range_detail::void_	/usr/include/boost/range/combine.hpp	/^        struct void_ { typedef void_ type; };$/;"	s	namespace:boost::range_detail
boost::range_detail::void_::type	/usr/include/boost/range/combine.hpp	/^        struct void_ { typedef void_ type; };$/;"	t	struct:boost::range_detail::void_	access:public
boost::range_detail::wchar_t_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<7>::type    wchar_t_array_;$/;"	t	namespace:boost::range_detail
boost::range_detail::wchar_t_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<10>::type   wchar_t_ptr_;$/;"	t	namespace:boost::range_detail
boost::range_detail::zip_range	/usr/include/boost/range/combine.hpp	/^        struct zip_range$/;"	s	namespace:boost::range_detail	inherits:iterator_range
boost::range_detail::zip_range3	/usr/include/boost/range/combine.hpp	/^        struct zip_range3$/;"	s	namespace:boost::range_detail	inherits:iterator_range
boost::range_detail::zip_range3::base_t	/usr/include/boost/range/combine.hpp	/^            typedef iterator_range<zip_iter_t> base_t;$/;"	t	struct:boost::range_detail::zip_range3	access:private
boost::range_detail::zip_range3::zip_iter_t	/usr/include/boost/range/combine.hpp	/^            > zip_iter_t;$/;"	t	struct:boost::range_detail::zip_range3	access:private
boost::range_detail::zip_range3::zip_range3	/usr/include/boost/range/combine.hpp	/^            zip_range3( Rng1& r1, Rng2& r2, Rng3& r3 )$/;"	f	struct:boost::range_detail::zip_range3	access:public	signature:( Rng1& r1, Rng2& r2, Rng3& r3 )
boost::range_detail::zip_range::base_t	/usr/include/boost/range/combine.hpp	/^            typedef iterator_range<zip_iter_t> base_t;$/;"	t	struct:boost::range_detail::zip_range	access:private
boost::range_detail::zip_range::zip_iter_t	/usr/include/boost/range/combine.hpp	/^                    > zip_iter_t;$/;"	t	struct:boost::range_detail::zip_range	access:private
boost::range_detail::zip_range::zip_range	/usr/include/boost/range/combine.hpp	/^            zip_range( Rng1& r1, Rng2& r2 )$/;"	f	struct:boost::range_detail::zip_range	access:public	signature:( Rng1& r1, Rng2& r2 )
boost::range_detail::zip_rng	/usr/include/boost/range/combine.hpp	/^        struct zip_rng$/;"	s	namespace:boost::range_detail	inherits:iterator_range
boost::range_detail::zip_rng::base_t	/usr/include/boost/range/combine.hpp	/^            typedef iterator_range<zip_iter_t>               base_t;$/;"	t	struct:boost::range_detail::zip_rng	access:private
boost::range_detail::zip_rng::generator_t	/usr/include/boost/range/combine.hpp	/^            typedef generate_tuple<R1,R2,R3,R4,R5,R6>        generator_t;$/;"	t	struct:boost::range_detail::zip_rng	access:private
boost::range_detail::zip_rng::get	/usr/include/boost/range/combine.hpp	/^            struct get$/;"	s	struct:boost::range_detail::zip_rng	access:public
boost::range_detail::zip_rng::get::begin	/usr/include/boost/range/combine.hpp	/^                static BOOST_DEDUCED_TYPENAME ::boost::tuples::element<N,tuple_t>::type begin( Z& z, R& )$/;"	f	struct:boost::range_detail::zip_rng::get	access:public	signature:( Z& z, R& )
boost::range_detail::zip_rng::get::end	/usr/include/boost/range/combine.hpp	/^                static BOOST_DEDUCED_TYPENAME ::boost::tuples::element<N,tuple_t>::type end( Z& z, R& r )$/;"	f	struct:boost::range_detail::zip_rng::get	access:public	signature:( Z& z, R& r )
boost::range_detail::zip_rng::tuple_length	/usr/include/boost/range/combine.hpp	/^            struct tuple_length : ::boost::tuples::length<tuple_t>$/;"	s	struct:boost::range_detail::zip_rng	inherits:::boost::tuples::length	access:public
boost::range_detail::zip_rng::tuple_t	/usr/include/boost/range/combine.hpp	/^            typedef BOOST_DEDUCED_TYPENAME generator_t::type tuple_t;$/;"	t	struct:boost::range_detail::zip_rng	access:private
boost::range_detail::zip_rng::zip_iter_t	/usr/include/boost/range/combine.hpp	/^            typedef zip_iterator<tuple_t>                    zip_iter_t;$/;"	t	struct:boost::range_detail::zip_rng	access:private
boost::range_detail::zip_rng::zip_rng	/usr/include/boost/range/combine.hpp	/^            zip_rng( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )$/;"	f	struct:boost::range_detail::zip_rng	access:public	signature:( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )
boost::range_detail::zip_rng::zip_rng	/usr/include/boost/range/combine.hpp	/^            zip_rng( Zip& z, Rng& r )$/;"	f	struct:boost::range_detail::zip_rng	access:public	signature:( Zip& z, Rng& r )
boost::range_detail_microsoft	/usr/include/boost/range/atl.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
boost::range_detail_microsoft	/usr/include/boost/range/detail/microsoft.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
boost::range_detail_microsoft	/usr/include/boost/range/mfc.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
boost::range_detail_microsoft::array_functions	/usr/include/boost/range/detail/microsoft.hpp	/^    struct array_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::array_functions::begin	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::array_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::array_functions::end	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::array_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::atl_array_functions	/usr/include/boost/range/atl.hpp	/^    struct atl_array_functions :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::atl_array_functions::end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x) \/\/ redefine$/;"	f	struct:boost::range_detail_microsoft::atl_array_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::atl_rb_tree_tag	/usr/include/boost/range/atl.hpp	/^    struct atl_rb_tree_tag$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::atl_string_tag	/usr/include/boost/range/atl.hpp	/^    struct atl_string_tag$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::begin_of	/usr/include/boost/range/detail/microsoft.hpp	/^    begin_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
boost::range_detail_microsoft::begin_of	/usr/include/boost/range/detail/microsoft.hpp	/^    begin_of(T& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T& x)
boost::range_detail_microsoft::compatible_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^    struct compatible_mutable_iterator : $/;"	s	namespace:boost::range_detail_microsoft	inherits:BOOST_RANGE_DETAIL_MICROSOFT_range_mutable_iterator
boost::range_detail_microsoft::const_iterator_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct const_iterator_of$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::const_iterator_of::bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
boost::range_detail_microsoft::const_iterator_of::cust_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_of<bare_t>::type cust_t;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
boost::range_detail_microsoft::const_iterator_of::type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename cust_t::template meta<bare_t>::const_iterator type;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlArray<E, ETraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlList<E, ETraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlMap<K, V, KTraits, VTraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:customization
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAutoPtrArray<E> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAutoPtrList<E> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CComBSTR >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CHeapPtrList<E, Allocator> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CInterfaceArray<I, piid> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CInterfaceList<I, piid> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleArray<T, TEqual> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleMap<TKey, TVal, TEqual> >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleValArray<T> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CStaticString<BaseType, t_nSize> >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< atl_rb_tree_tag > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< atl_string_tag >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CArray<Type, ArgType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CByteArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CDWordArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CList<Type, ArgType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMap<Key, ArgKey, Mapped, ArgMapped> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_cpair_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapPtrToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapPtrToWord > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToOb > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToString > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_cpair_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapWordToOb > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapWordToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CObArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CObList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CPtrArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CPtrList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CString >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CStringArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CStringList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrArray<BaseClass, PtrType> >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrList<BaseClass, PtrType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrMap<BaseClass, KeyPtrType, MappedPtrType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CUIntArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CWordArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x) \/\/ redefine$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/atl.hpp	/^        typename mutable_<Iterator, X>::type begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/mfc.hpp	/^        typename mutable_<Iterator, X>::type begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
boost::range_detail_microsoft::customization::end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::fun	/usr/include/boost/range/mfc.hpp	/^        struct fun$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
boost::range_detail_microsoft::customization::fun::operator ()	/usr/include/boost/range/mfc.hpp	/^            result_type operator()(PtrType_ p) const$/;"	f	struct:boost::range_detail_microsoft::customization::fun	access:public	signature:(PtrType_ p) const
boost::range_detail_microsoft::customization::fun::result_type	/usr/include/boost/range/mfc.hpp	/^            typedef val_t_ * const result_type;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
boost::range_detail_microsoft::customization::fun::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename remove_pointer<PtrType>::type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
boost::range_detail_microsoft::customization::fun::val_t_	/usr/include/boost/range/mfc.hpp	/^            >::type val_t_;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
boost::range_detail_microsoft::customization::meta	/usr/include/boost/range/atl.hpp	/^        struct meta$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
boost::range_detail_microsoft::customization::meta	/usr/include/boost/range/mfc.hpp	/^        struct meta$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
boost::range_detail_microsoft::customization::meta::citer_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const *, val_t const *> citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::citer_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const> citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::citer_t	/usr/include/boost/range/atl.hpp	/^            typedef val_t const *citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::citer_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename range_const_iterator<BaseClass>::type citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef OLECHAR const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef indirect_iterator<citer_t> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef mutable_iterator const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef typename X::PCXSTR const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef val_t const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef zip_iterator< tuple<k_citer_t, v_citer_t> > const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef TCHAR const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, ::CObject const * const, ::CObject const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, ::CObject const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const * const, val_t const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, void const * const, void const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, void const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_cpair_map_iterator<X const, pair_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X const, CObject const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X const, void const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mutable_iterator const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef transform_iterator<fun<X const>, citer_t> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef val_t const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::k_citer_t	/usr/include/boost/range/atl.hpp	/^            typedef k_val_t const *k_citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::k_miter_t	/usr/include/boost/range/atl.hpp	/^            typedef k_val_t *k_miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::k_val_t	/usr/include/boost/range/atl.hpp	/^            typedef TKey k_val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::key_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CString key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::key_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::key_t	/usr/include/boost/range/mfc.hpp	/^            typedef void *key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CObject *mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef void *mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::miter_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t *, val_t *> miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::miter_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t> miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::miter_t	/usr/include/boost/range/atl.hpp	/^            typedef val_t *miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::miter_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename compatible_mutable_iterator<BaseClass>::type miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef BaseType const *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef OLECHAR *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef indirect_iterator<miter_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef typename X::PXSTR mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef val_t *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef zip_iterator< tuple<k_miter_t, v_miter_t> > mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef TCHAR *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, ::CObject *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, val_t * const, val_t * const> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, val_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, void *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_cpair_map_iterator<X, pair_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_map_iterator<X, KeyPtrType, MappedPtrType> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_map_iterator<X, key_t, mapped_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X, CObject *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X, void *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef transform_iterator<fun<X>, miter_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef val_t *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::pair_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename X::CPair pair_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::v_citer_t	/usr/include/boost/range/atl.hpp	/^            typedef v_val_t const *v_citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::v_miter_t	/usr/include/boost/range/atl.hpp	/^            typedef v_val_t *v_miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::v_val_t	/usr/include/boost/range/atl.hpp	/^            typedef TVal v_val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CAutoPtr<E> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CComQIPtr<I, piid> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CHeapPtr<E, Allocator> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef E val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef T val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef typename X::CPair val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CString val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef BYTE val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef DWORD val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef Type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef UINT val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename remove_pointer<PtrType>::type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct customization_of$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization_of::bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
boost::range_detail_microsoft::customization_of::tag_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_tag<bare_t>::type tag_t;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
boost::range_detail_microsoft::customization_of::type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef customization<tag_t> type;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
boost::range_detail_microsoft::customization_tag_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct customization_tag_of$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization_tag_of::type	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type type;$/;"	t	struct:boost::range_detail_microsoft::customization_tag_of	access:public
boost::range_detail_microsoft::end_of	/usr/include/boost/range/detail/microsoft.hpp	/^    end_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
boost::range_detail_microsoft::end_of	/usr/include/boost/range/detail/microsoft.hpp	/^    end_of(T& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T& x)
boost::range_detail_microsoft::indirected_list_functions	/usr/include/boost/range/atl.hpp	/^    struct indirected_list_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::indirected_list_functions::begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::indirected_list_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::indirected_list_functions::end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::indirected_list_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::list_functions	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::list_functions::begin	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::list_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::list_functions::end	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::list_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_iterator_super::type
boost::range_detail_microsoft::list_iterator::decrement	/usr/include/boost/range/detail/microsoft.hpp	/^        void decrement()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:()
boost::range_detail_microsoft::list_iterator::dereference	/usr/include/boost/range/detail/microsoft.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:() const
boost::range_detail_microsoft::list_iterator::equal	/usr/include/boost/range/detail/microsoft.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:(self_t const& other) const
boost::range_detail_microsoft::list_iterator::increment	/usr/include/boost/range/detail/microsoft.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:()
boost::range_detail_microsoft::list_iterator::list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        explicit list_iterator()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:()
boost::range_detail_microsoft::list_iterator::list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        explicit list_iterator(ListT& lst, POSITION pos) :$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:(ListT& lst, POSITION pos)
boost::range_detail_microsoft::list_iterator::list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        list_iterator(list_iterator<ListT_, Value_, Reference_, Traversal_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:(list_iterator<ListT_, Value_, Reference_, Traversal_> const& other)
boost::range_detail_microsoft::list_iterator::m_plst	/usr/include/boost/range/detail/microsoft.hpp	/^        ListT *m_plst;$/;"	m	struct:boost::range_detail_microsoft::list_iterator	access:private
boost::range_detail_microsoft::list_iterator::m_pos	/usr/include/boost/range/detail/microsoft.hpp	/^        POSITION m_pos;$/;"	m	struct:boost::range_detail_microsoft::list_iterator	access:private
boost::range_detail_microsoft::list_iterator::ref_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
boost::range_detail_microsoft::list_iterator::self_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef list_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
boost::range_detail_microsoft::list_iterator::super_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename list_iterator_super<ListT, Value, Reference, Traversal>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
boost::range_detail_microsoft::list_iterator_super	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::list_iterator_super::ref_t	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type ref_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
boost::range_detail_microsoft::list_iterator_super::trv_t	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type trv_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
boost::range_detail_microsoft::list_iterator_super::type	/usr/include/boost/range/detail/microsoft.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
boost::range_detail_microsoft::mfc_cpair_map_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_cpair_map_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_cpair_map_functions::begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_cpair_map_functions::end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_cpair_map_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_pget_map_iterator_super::type
boost::range_detail_microsoft::mfc_cpair_map_iterator::dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:() const
boost::range_detail_microsoft::mfc_cpair_map_iterator::equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:(self_t const& other) const
boost::range_detail_microsoft::mfc_cpair_map_iterator::increment	/usr/include/boost/range/mfc.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:()
boost::range_detail_microsoft::mfc_cpair_map_iterator::m_pmap	/usr/include/boost/range/mfc.hpp	/^        MapT  *m_pmap;$/;"	m	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
boost::range_detail_microsoft::mfc_cpair_map_iterator::m_pp	/usr/include/boost/range/mfc.hpp	/^        PairT *m_pp;$/;"	m	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
boost::range_detail_microsoft::mfc_cpair_map_iterator::mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_cpair_map_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:()
boost::range_detail_microsoft::mfc_cpair_map_iterator::mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_cpair_map_iterator(MapT& map, PairT *pp) :$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:(MapT& map, PairT *pp)
boost::range_detail_microsoft::mfc_cpair_map_iterator::mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_cpair_map_iterator(mfc_cpair_map_iterator<MapT_, PairT_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:(mfc_cpair_map_iterator<MapT_, PairT_> const& other)
boost::range_detail_microsoft::mfc_cpair_map_iterator::ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
boost::range_detail_microsoft::mfc_cpair_map_iterator::self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_cpair_map_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
boost::range_detail_microsoft::mfc_cpair_map_iterator::super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_pget_map_iterator_super<MapT, PairT>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_map_functions::begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_map_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_map_functions::end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_map_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_iterator_super::type
boost::range_detail_microsoft::mfc_map_iterator::dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:() const
boost::range_detail_microsoft::mfc_map_iterator::equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:(self_t const& other) const
boost::range_detail_microsoft::mfc_map_iterator::increment	/usr/include/boost/range/mfc.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:()
boost::range_detail_microsoft::mfc_map_iterator::m_key	/usr/include/boost/range/mfc.hpp	/^        KeyT m_key; MappedT m_mapped;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::m_mapped	/usr/include/boost/range/mfc.hpp	/^        KeyT m_key; MappedT m_mapped;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::m_pmap	/usr/include/boost/range/mfc.hpp	/^        MapT const *m_pmap;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::m_pos	/usr/include/boost/range/mfc.hpp	/^        POSITION m_pos, m_posNext;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::m_posNext	/usr/include/boost/range/mfc.hpp	/^        POSITION m_pos, m_posNext;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:()
boost::range_detail_microsoft::mfc_map_iterator::mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator(MapT const& map) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(MapT const& map)
boost::range_detail_microsoft::mfc_map_iterator::mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator(MapT const& map, POSITION pos) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(MapT const& map, POSITION pos)
boost::range_detail_microsoft::mfc_map_iterator::mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_map_iterator(mfc_map_iterator<MapT_, KeyT_, MappedT_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(mfc_map_iterator<MapT_, KeyT_, MappedT_> const& other)
boost::range_detail_microsoft::mfc_map_iterator::ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_map_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_map_iterator_super<MapT, KeyT, MappedT>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_map_iterator_super::type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator_super	access:public
boost::range_detail_microsoft::mfc_pget_map_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_pget_map_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_pget_map_iterator_super::type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_pget_map_iterator_super	access:public
boost::range_detail_microsoft::mfc_ptr_array_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_ptr_array_functions::begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_ptr_array_functions::end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_iterator_super::type
boost::range_detail_microsoft::mfc_ptr_array_iterator::dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private	signature:() const
boost::range_detail_microsoft::mfc_ptr_array_iterator::equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private	signature:(self_t const& other) const
boost::range_detail_microsoft::mfc_ptr_array_iterator::m_parr	/usr/include/boost/range/mfc.hpp	/^        ArrayT *m_parr;$/;"	m	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
boost::range_detail_microsoft::mfc_ptr_array_iterator::mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_ptr_array_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:()
boost::range_detail_microsoft::mfc_ptr_array_iterator::mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_ptr_array_iterator(ArrayT& arr, INT_PTR index) :$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:(ArrayT& arr, INT_PTR index)
boost::range_detail_microsoft::mfc_ptr_array_iterator::mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_ptr_array_iterator(mfc_ptr_array_iterator<ArrayT_, PtrType_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:(mfc_ptr_array_iterator<ArrayT_, PtrType_> const& other)
boost::range_detail_microsoft::mfc_ptr_array_iterator::ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
boost::range_detail_microsoft::mfc_ptr_array_iterator::self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_ptr_array_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
boost::range_detail_microsoft::mfc_ptr_array_iterator::super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_ptr_array_iterator_super<ArrayT, PtrType>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
boost::range_detail_microsoft::mfc_ptr_array_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_ptr_array_iterator_super::type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator_super	access:public
boost::range_detail_microsoft::mutable_	/usr/include/boost/range/detail/microsoft.hpp	/^    struct mutable_ :$/;"	s	namespace:boost::range_detail_microsoft	inherits:disable_if
boost::range_detail_microsoft::mutable_iterator_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct mutable_iterator_of$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mutable_iterator_of::bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
boost::range_detail_microsoft::mutable_iterator_of::cust_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_of<bare_t>::type cust_t;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
boost::range_detail_microsoft::mutable_iterator_of::type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename cust_t::template meta<bare_t>::mutable_iterator type;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
boost::range_detail_microsoft::size_of	/usr/include/boost/range/detail/microsoft.hpp	/^    size_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
boost::range_detail_microsoft::size_type_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct size_type_of$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::size_type_of::miter_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename range_detail_microsoft::mutable_iterator_of<T>::type miter_t;$/;"	t	struct:boost::range_detail_microsoft::size_type_of	access:public
boost::range_detail_microsoft::size_type_of::type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename iterator_difference<miter_t>::type type;$/;"	t	struct:boost::range_detail_microsoft::size_type_of	access:public
boost::range_detail_microsoft::test_bidirectional	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_bidirectional(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
boost::range_detail_microsoft::test_const_iter	/usr/include/boost/range/detail/microsoft.hpp	/^    struct test_const_iter :$/;"	s	namespace:boost::range_detail_microsoft	inherits:boost::is_same
boost::range_detail_microsoft::test_emptiness	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_emptiness(Range& )$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& )
boost::range_detail_microsoft::test_equals	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_equals(Range1 const& rng1, Range2 const& rng2)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range1 const& rng1, Range2 const& rng2)
boost::range_detail_microsoft::test_find_key_and_mapped	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_find_key_and_mapped(AssocContainer const& ac, PairT const& pa)$/;"	f	namespace:boost::range_detail_microsoft	signature:(AssocContainer const& ac, PairT const& pa)
boost::range_detail_microsoft::test_forward	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_forward(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
boost::range_detail_microsoft::test_init_array	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_array(ArrayT& arr, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(ArrayT& arr, SampleRange const& sample)
boost::range_detail_microsoft::test_init_list	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_list(ListT& lst, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(ListT& lst, SampleRange const& sample)
boost::range_detail_microsoft::test_init_map	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_map(MapT& map, SampleMap const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(MapT& map, SampleMap const& sample)
boost::range_detail_microsoft::test_init_string	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_string(StringT& str, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(StringT& str, SampleRange const& sample)
boost::range_detail_microsoft::test_mutable_iter	/usr/include/boost/range/detail/microsoft.hpp	/^    struct test_mutable_iter :$/;"	s	namespace:boost::range_detail_microsoft	inherits:boost::is_same
boost::range_detail_microsoft::test_random_access	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_random_access(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
boost::range_detail_microsoft::test_trivial	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_trivial(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
boost::range_detail_microsoft::using_type_as_tag	/usr/include/boost/range/detail/microsoft.hpp	/^    struct using_type_as_tag$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_vc7_1	/usr/include/boost/range/iterator.hpp	/^    namespace range_detail_vc7_1$/;"	n	namespace:boost
boost::range_detail_vc7_1::range_iterator	/usr/include/boost/range/iterator.hpp	/^       struct range_iterator$/;"	s	namespace:boost::range_detail_vc7_1
boost::range_detail_vc7_1::range_iterator	/usr/include/boost/range/iterator.hpp	/^       struct range_iterator< C, void(T[]) >$/;"	s	namespace:boost::range_detail_vc7_1
boost::range_detail_vc7_1::range_iterator::type	/usr/include/boost/range/iterator.hpp	/^                               range_mutable_iterator<C> >::type type;$/;"	t	struct:boost::range_detail_vc7_1::range_iterator	access:public
boost::range_detail_vc7_1::range_iterator::type	/usr/include/boost/range/iterator.hpp	/^           typedef T* type;$/;"	t	struct:boost::range_detail_vc7_1::range_iterator	access:public
boost::range_difference	/usr/include/boost/range/detail/difference_type.hpp	/^    class range_difference$/;"	c	namespace:boost
boost::range_difference	/usr/include/boost/range/difference_type.hpp	/^    struct range_difference : iterator_difference< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_difference
boost::range_difference::c_type	/usr/include/boost/range/detail/difference_type.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_difference	access:private
boost::range_difference::type	/usr/include/boost/range/detail/difference_type.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range_difference_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_difference	access:public
boost::range_iterator	/usr/include/boost/range/combine.hpp	/^    template<> struct range_iterator< ::boost::range_detail::void_ >$/;"	s	namespace:boost
boost::range_iterator	/usr/include/boost/range/iterator.hpp	/^    struct range_iterator$/;"	s	namespace:boost
boost::range_iterator::type	/usr/include/boost/range/combine.hpp	/^       typedef ::boost::tuples::null_type type;$/;"	t	struct:boost::range_iterator	access:public
boost::range_iterator::type	/usr/include/boost/range/iterator.hpp	/^               range_detail_vc7_1::range_iterator<C>::type type;$/;"	t	struct:boost::range_iterator	access:public
boost::range_mutable_iterator	/usr/include/boost/range/detail/iterator.hpp	/^    class range_mutable_iterator$/;"	c	namespace:boost
boost::range_mutable_iterator	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_mutable_iterator<T*>$/;"	s	namespace:boost
boost::range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator : range_detail::extract_iterator<C>$/;"	s	namespace:boost	inherits:range_detail::extract_iterator
boost::range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator< T[sz] >$/;"	s	namespace:boost
boost::range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator< std::pair<Iterator,Iterator> >$/;"	s	namespace:boost
boost::range_mutable_iterator::c_type	/usr/include/boost/range/detail/iterator.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_mutable_iterator	access:private
boost::range_mutable_iterator::type	/usr/include/boost/range/detail/iterator.hpp	/^        typedef typename range_detail::range_iterator_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_mutable_iterator	access:public
boost::range_mutable_iterator::type	/usr/include/boost/range/detail/str_types.hpp	/^        typedef T* type;$/;"	t	struct:boost::range_mutable_iterator	access:public
boost::range_mutable_iterator::type	/usr/include/boost/range/mutable_iterator.hpp	/^        typedef Iterator type;$/;"	t	struct:boost::range_mutable_iterator	access:public
boost::range_mutable_iterator::type	/usr/include/boost/range/mutable_iterator.hpp	/^        typedef T* type;$/;"	t	struct:boost::range_mutable_iterator	access:public
boost::range_pointer	/usr/include/boost/range/pointer.hpp	/^    struct range_pointer : iterator_pointer< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_pointer
boost::range_reference	/usr/include/boost/range/reference.hpp	/^    struct range_reference : iterator_reference< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_reference
boost::range_result_iterator	/usr/include/boost/range/result_iterator.hpp	/^    struct range_result_iterator : range_iterator<C>$/;"	s	namespace:boost	inherits:range_iterator
boost::range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return$/;"	s	namespace:boost
boost::range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< BidirectionalRange, return_begin_prior >$/;"	s	namespace:boost
boost::range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< BidirectionalRange, return_prior >$/;"	s	namespace:boost
boost::range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< BidirectionalRange, return_prior_end >$/;"	s	namespace:boost
boost::range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_begin_end >$/;"	s	namespace:boost
boost::range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_begin_found >$/;"	s	namespace:boost
boost::range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_begin_next >$/;"	s	namespace:boost
boost::range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_found >$/;"	s	namespace:boost
boost::range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_found_end >$/;"	s	namespace:boost
boost::range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_next >$/;"	s	namespace:boost
boost::range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_next_end >$/;"	s	namespace:boost
boost::range_return::pack	/usr/include/boost/range/detail/range_return.hpp	/^        static type pack(BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type found,$/;"	f	struct:boost::range_return	access:public	signature:(BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type found, BidirectionalRange& rng)
boost::range_return::pack	/usr/include/boost/range/detail/range_return.hpp	/^        static type pack(BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange>::type found,$/;"	f	struct:boost::range_return	access:public	signature:(BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange>::type found, SinglePassRange& rng)
boost::range_return::pack	/usr/include/boost/range/detail/range_return.hpp	/^        static type pack(type found, BidirectionalRange& rng)$/;"	f	struct:boost::range_return	access:public	signature:(type found, BidirectionalRange& rng)
boost::range_return::pack	/usr/include/boost/range/detail/range_return.hpp	/^        static type pack(type found, SinglePassRange& rng)$/;"	f	struct:boost::range_return	access:public	signature:(type found, SinglePassRange& rng)
boost::range_return::pack	/usr/include/boost/range/detail/range_return.hpp	/^        static type pack(type found, SinglePassRange&)$/;"	f	struct:boost::range_return	access:public	signature:(type found, SinglePassRange&)
boost::range_return::type	/usr/include/boost/range/detail/range_return.hpp	/^            BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type > type;$/;"	t	struct:boost::range_return	access:public
boost::range_return::type	/usr/include/boost/range/detail/range_return.hpp	/^            BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange>::type > type;$/;"	t	struct:boost::range_return	access:public
boost::range_return::type	/usr/include/boost/range/detail/range_return.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type type;$/;"	t	struct:boost::range_return	access:public
boost::range_return::type	/usr/include/boost/range/detail/range_return.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange>::type type;$/;"	t	struct:boost::range_return	access:public
boost::range_return_value	/usr/include/boost/range/detail/range_return.hpp	/^    enum range_return_value$/;"	g	namespace:boost
boost::range_reverse_iterator	/usr/include/boost/range/reverse_iterator.hpp	/^    struct range_reverse_iterator$/;"	s	namespace:boost
boost::range_reverse_iterator::type	/usr/include/boost/range/reverse_iterator.hpp	/^            BOOST_DEDUCED_TYPENAME range_iterator<C>::type > type;$/;"	t	struct:boost::range_reverse_iterator	access:public
boost::range_reverse_result_iterator	/usr/include/boost/range/reverse_result_iterator.hpp	/^    struct range_reverse_result_iterator : range_reverse_iterator<C>$/;"	s	namespace:boost	inherits:range_reverse_iterator
boost::range_size	/usr/include/boost/range/detail/size_type.hpp	/^    class range_size$/;"	c	namespace:boost
boost::range_size	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_size<T*>$/;"	s	namespace:boost
boost::range_size	/usr/include/boost/range/size_type.hpp	/^    struct range_size :$/;"	s	namespace:boost	inherits:detail::range_size
boost::range_size	/usr/include/boost/range/size_type.hpp	/^    struct range_size<const T >$/;"	s	namespace:boost	inherits:detail::range_size
boost::range_size::c_type	/usr/include/boost/range/detail/size_type.hpp	/^        typedef typename range_detail::range<C>::type c_type;$/;"	t	class:boost::range_size	access:private
boost::range_size::type	/usr/include/boost/range/detail/size_type.hpp	/^        typedef typename range_detail::range_size_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type;$/;"	t	class:boost::range_size	access:public
boost::range_size::type	/usr/include/boost/range/detail/str_types.hpp	/^       typedef std::size_t type;$/;"	t	struct:boost::range_size	access:public
boost::range_value	/usr/include/boost/range/detail/value_type.hpp	/^    class range_value$/;"	c	namespace:boost
boost::range_value	/usr/include/boost/range/value_type.hpp	/^    struct range_value : iterator_value< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_value
boost::range_value::c_type	/usr/include/boost/range/detail/value_type.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_value	access:private
boost::range_value::type	/usr/include/boost/range/detail/value_type.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range_value_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_value	access:public
boost::rbegin	/usr/include/boost/range/rbegin.hpp	/^rbegin( C& c )$/;"	f	namespace:boost	signature:( C& c )
boost::remove_copy_if	/usr/include/boost/range/algorithm/remove_copy_if.hpp	/^    remove_copy_if(const SinglePassRange& rng, OutputIterator out_it, Predicate pred)$/;"	f	namespace:boost	signature:(const SinglePassRange& rng, OutputIterator out_it, Predicate pred)
boost::rend	/usr/include/boost/range/rend.hpp	/^rend( C& c )$/;"	f	namespace:boost	signature:( C& c )
boost::return_begin_end	/usr/include/boost/range/detail/range_return.hpp	/^        return_begin_end    \/\/ [begin, end) range$/;"	e	enum:boost::range_return_value
boost::return_begin_found	/usr/include/boost/range/detail/range_return.hpp	/^        return_begin_found, \/\/ [begin, found) range (*)$/;"	e	enum:boost::range_return_value
boost::return_begin_next	/usr/include/boost/range/detail/range_return.hpp	/^        return_begin_next,  \/\/ [begin, next(found)) range$/;"	e	enum:boost::range_return_value
boost::return_begin_prior	/usr/include/boost/range/detail/range_return.hpp	/^        return_begin_prior, \/\/ [begin, prior(found)) range$/;"	e	enum:boost::range_return_value
boost::return_found	/usr/include/boost/range/detail/range_return.hpp	/^        return_found,       \/\/ only the found resulting iterator (*)$/;"	e	enum:boost::range_return_value
boost::return_found_end	/usr/include/boost/range/detail/range_return.hpp	/^        return_found_end,   \/\/ [found, end) range (*)$/;"	e	enum:boost::range_return_value
boost::return_next	/usr/include/boost/range/detail/range_return.hpp	/^        return_next,        \/\/ next(found) iterator$/;"	e	enum:boost::range_return_value
boost::return_next_end	/usr/include/boost/range/detail/range_return.hpp	/^        return_next_end,    \/\/ [next(found), end) range$/;"	e	enum:boost::range_return_value
boost::return_prior	/usr/include/boost/range/detail/range_return.hpp	/^        return_prior,       \/\/ prior(found) iterator$/;"	e	enum:boost::range_return_value
boost::return_prior_end	/usr/include/boost/range/detail/range_return.hpp	/^        return_prior_end,   \/\/ [prior(found), end) range$/;"	e	enum:boost::range_return_value
boost::size	/usr/include/boost/range/detail/size.hpp	/^    size( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
boost::size	/usr/include/boost/range/detail/vc6/size.hpp	/^    size( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
boost::size	/usr/include/boost/range/size.hpp	/^    size(const SinglePassRange& rng)$/;"	f	namespace:boost	signature:(const SinglePassRange& rng)
boost::sizer	/usr/include/boost/range/detail/sizer.hpp	/^    char (& sizer( T BOOST_RANGE_ARRAY_REF()[sz] ) )[sz];$/;"	p	namespace:boost	signature:(T BOOST_RANGE_ARRAY_REF(
boost::sizer	/usr/include/boost/range/detail/sizer.hpp	/^    char (& sizer( const T BOOST_RANGE_ARRAY_REF()[sz] ) )[sz];$/;"	p	namespace:boost	signature:(const T BOOST_RANGE_ARRAY_REF(
boost::strided_integer_range	/usr/include/boost/range/irange.hpp	/^    class strided_integer_range$/;"	c	namespace:boost	inherits:iterator_range
boost::strided_integer_range::base_t	/usr/include/boost/range/irange.hpp	/^        typedef iterator_range<iterator_t> base_t;$/;"	t	class:boost::strided_integer_range	access:private
boost::strided_integer_range::iterator_t	/usr/include/boost/range/irange.hpp	/^        typedef range_detail::integer_iterator_with_step<Integer> iterator_t;$/;"	t	class:boost::strided_integer_range	access:private
boost::strided_integer_range::strided_integer_range	/usr/include/boost/range/irange.hpp	/^        strided_integer_range(Iterator first, Iterator last)$/;"	f	class:boost::strided_integer_range	access:public	signature:(Iterator first, Iterator last)
boost::sub_range	/usr/include/boost/range/sub_range.hpp	/^    class sub_range : public iterator_range< BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type > $/;"	c	namespace:boost	inherits:iterator_range
boost::sub_range::back	/usr/include/boost/range/sub_range.hpp	/^        const_reference back() const$/;"	f	class:boost::sub_range	access:public	signature:() const
boost::sub_range::back	/usr/include/boost/range/sub_range.hpp	/^        reference back()$/;"	f	class:boost::sub_range	access:public	signature:()
boost::sub_range::base	/usr/include/boost/range/sub_range.hpp	/^        typedef iterator_range< iterator_t  > base;$/;"	t	class:boost::sub_range	access:private
boost::sub_range::begin	/usr/include/boost/range/sub_range.hpp	/^        const_iterator  begin() const    { return base::begin(); }$/;"	f	class:boost::sub_range	access:public	signature:() const
boost::sub_range::begin	/usr/include/boost/range/sub_range.hpp	/^        iterator        begin()          { return base::begin(); }$/;"	f	class:boost::sub_range	access:public	signature:()
boost::sub_range::const_iterator	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<const ForwardRange>::type   const_iterator;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::const_reference	/usr/include/boost/range/sub_range.hpp	/^                                 reference >::type const_reference;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::difference_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_difference<ForwardRange>::type       difference_type;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::end	/usr/include/boost/range/sub_range.hpp	/^        const_iterator  end() const      { return base::end();   }$/;"	f	class:boost::sub_range	access:public	signature:() const
boost::sub_range::end	/usr/include/boost/range/sub_range.hpp	/^        iterator        end()            { return base::end();   }$/;"	f	class:boost::sub_range	access:public	signature:()
boost::sub_range::front	/usr/include/boost/range/sub_range.hpp	/^        const_reference front() const$/;"	f	class:boost::sub_range	access:public	signature:() const
boost::sub_range::front	/usr/include/boost/range/sub_range.hpp	/^        reference front()$/;"	f	class:boost::sub_range	access:public	signature:()
boost::sub_range::impl	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base::impl impl;$/;"	t	class:boost::sub_range	access:private
boost::sub_range::iterator	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type         iterator;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::iterator_t	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type iterator_t;$/;"	t	class:boost::sub_range	access:private
boost::sub_range::operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( ForwardRange2& r )$/;"	f	class:boost::sub_range	access:public	signature:( ForwardRange2& r )
boost::sub_range::operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( const ForwardRange2& r )$/;"	f	class:boost::sub_range	access:public	signature:( const ForwardRange2& r )
boost::sub_range::operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( const sub_range& r )$/;"	f	class:boost::sub_range	access:public	signature:( const sub_range& r )
boost::sub_range::operator []	/usr/include/boost/range/sub_range.hpp	/^        const_reference operator[]( difference_type sz ) const$/;"	f	class:boost::sub_range	access:public	signature:( difference_type sz ) const
boost::sub_range::operator []	/usr/include/boost/range/sub_range.hpp	/^        reference operator[]( difference_type sz )$/;"	f	class:boost::sub_range	access:public	signature:( difference_type sz )
boost::sub_range::reference	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base::reference                            reference;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::size	/usr/include/boost/range/sub_range.hpp	/^        difference_type size() const     { return base::size();  }   $/;"	f	class:boost::sub_range	access:public	signature:() const
boost::sub_range::size_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_size<ForwardRange>::type             size_type;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( ForwardRange2& r ) : $/;"	f	class:boost::sub_range	access:public	signature:( ForwardRange2& r )
boost::sub_range::sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( Iter first, Iter last ) :$/;"	f	class:boost::sub_range	access:public	signature:( Iter first, Iter last )
boost::sub_range::sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( const ForwardRange2& r ) : $/;"	f	class:boost::sub_range	access:public	signature:( const ForwardRange2& r )
boost::sub_range::sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( const sub_range& r ) $/;"	f	class:boost::sub_range	access:public	signature:( const sub_range& r )
boost::sub_range::sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range() : base() $/;"	f	class:boost::sub_range	access:public	signature:()
boost::sub_range::value_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_value<ForwardRange>::type            value_type;$/;"	t	class:boost::sub_range	access:public
boost_range_silence_warning	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline void boost_range_silence_warning( const T& ) { }$/;"	f	namespace:boost::range_detail	signature:( const T& )
buffer_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Buffer buffer_type;$/;"	t	class:boost::range_detail::any_iterator	access:private
buffer_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef Buffer buffer_type;$/;"	t	struct:boost::range_detail::any_incrementable_iterator_interface	access:public
buffer_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_bidirectional_iterator_interface<Reference, Buffer>::buffer_type buffer_type;$/;"	t	struct:boost::range_detail::any_random_access_iterator_interface	access:public
buffer_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_forward_iterator_interface<Reference, Buffer>::buffer_type buffer_type;$/;"	t	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public
buffer_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_incrementable_iterator_interface<Reference, Buffer>::buffer_type buffer_type;$/;"	t	struct:boost::range_detail::any_single_pass_iterator_interface	access:public
buffer_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_single_pass_iterator_interface<Reference, Buffer>::buffer_type buffer_type;$/;"	t	struct:boost::range_detail::any_forward_iterator_interface	access:public
c	/usr/include/boost/range/detail/common.hpp	/^            static C* c;$/;"	m	struct:boost::range_detail::range_helper	access:public
c_type	/usr/include/boost/range/detail/const_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_const_iterator	access:private
c_type	/usr/include/boost/range/detail/difference_type.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_difference	access:private
c_type	/usr/include/boost/range/detail/iterator.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_mutable_iterator	access:private
c_type	/usr/include/boost/range/detail/size_type.hpp	/^        typedef typename range_detail::range<C>::type c_type;$/;"	t	class:boost::range_size	access:private
c_type	/usr/include/boost/range/detail/value_type.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_value	access:private
char_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<6>::type    char_array_;$/;"	t	namespace:boost::range_detail
char_array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    wchar_array_t >::type char_array_t;$/;"	t	class:boost::range_detail::range	access:private
char_or_wchar_t_array_tag	/usr/include/boost/range/detail/sfinae.hpp	/^        struct char_or_wchar_t_array_tag {};$/;"	s	namespace:boost::range_detail
char_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<8>::type    char_ptr_;$/;"	t	namespace:boost::range_detail
char_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    const_char_ptr_t >::type char_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
char_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef ::std::char_traits<char_type> char_traits;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
char_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_cv<value_type>::type char_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
char_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_cv<value_type>::type char_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
citer_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const *, val_t const *> citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
citer_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const> citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
citer_t	/usr/include/boost/range/atl.hpp	/^            typedef val_t const *citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
citer_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename range_const_iterator<BaseClass>::type citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
clone	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator clone() const$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:() const
clone	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_forward_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_incrementable_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_random_access_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_single_pass_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual any_bidirectional_iterator_wrapper* clone($/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:( typename any_bidirectional_iterator_wrapper::buffer_type& buffer ) const
clone	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual any_forward_iterator_wrapper* clone($/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:( typename any_forward_iterator_wrapper::buffer_type& buffer ) const
clone	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual any_incrementable_iterator_wrapper* clone($/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:( typename any_incrementable_iterator_wrapper::buffer_type& buffer ) const
clone	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual any_random_access_iterator_wrapper* clone($/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:( typename any_random_access_iterator_wrapper::buffer_type& buffer ) const
clone	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual any_single_pass_iterator_wrapper* clone($/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:( typename any_single_pass_iterator_wrapper::buffer_type& buffer ) const
clone_const_ref	/usr/include/boost/range/detail/any_iterator.hpp	/^            clone_const_ref() const$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:() const
clone_const_ref	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_const_ref(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone_const_ref	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_const_ref(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_forward_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone_const_ref	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_const_ref(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_incrementable_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone_const_ref	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_const_ref(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_random_access_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone_const_ref	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_const_ref(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_single_pass_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone_const_ref	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_const_ref($/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:( typename any_bidirectional_iterator_wrapper::buffer_type& buffer ) const
clone_const_ref	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_const_ref($/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:( typename any_forward_iterator_wrapper::buffer_type& buffer ) const
clone_const_ref	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_const_ref($/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:( typename any_incrementable_iterator_wrapper::buffer_type& buffer ) const
clone_const_ref	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_const_ref($/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:( typename any_random_access_iterator_wrapper::buffer_type& buffer ) const
clone_const_ref	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            >* clone_const_ref($/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:( typename any_single_pass_iterator_wrapper::buffer_type& buffer ) const
clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_reference_as_value(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_reference_as_value(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_forward_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_reference_as_value(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_incrementable_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_reference_as_value(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_random_access_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                        clone_reference_as_value(buffer_type& buffer) const = 0;$/;"	p	struct:boost::range_detail::any_single_pass_iterator_interface	access:public	signature:(buffer_type& buffer) const
clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_reference_as_value($/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:( typename any_bidirectional_iterator_wrapper::buffer_type& buffer ) const
clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_reference_as_value($/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:( typename any_forward_iterator_wrapper::buffer_type& buffer ) const
clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_reference_as_value($/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:( typename any_incrementable_iterator_wrapper::buffer_type& buffer ) const
clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    >* clone_reference_as_value($/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:( typename any_random_access_iterator_wrapper::buffer_type& buffer ) const
clone_reference_as_value	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            >* clone_reference_as_value($/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:( typename any_single_pass_iterator_wrapper::buffer_type& buffer ) const
collection_traits	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct collection_traits$/;"	s	namespace:boost::algorithm
combine	/usr/include/boost/range/combine.hpp	/^    inline ::boost::range_detail::zip_range<Rng1, Rng2> combine( Rng1& r1, Rng2& r2 )$/;"	f	namespace:boost	signature:( Rng1& r1, Rng2& r2 )
combine	/usr/include/boost/range/combine.hpp	/^    inline ::boost::range_detail::zip_range<Rng1, const Rng2> combine( Rng1& r1, const Rng2& r2 )$/;"	f	namespace:boost	signature:( Rng1& r1, const Rng2& r2 )
combine	/usr/include/boost/range/combine.hpp	/^    inline ::boost::range_detail::zip_range<const Rng1, Rng2> combine( const Rng1& r1, Rng2& r2 )$/;"	f	namespace:boost	signature:( const Rng1& r1, Rng2& r2 )
combine	/usr/include/boost/range/combine.hpp	/^    inline ::boost::range_detail::zip_range<const Rng1, const Rng2> combine( const Rng1& r1, const Rng2& r2 )$/;"	f	namespace:boost	signature:( const Rng1& r1, const Rng2& r2 )
combine_tag	/usr/include/boost/range/combine.hpp	/^        struct combine_tag {};$/;"	s	namespace:boost::range_detail
compatible_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^    struct compatible_mutable_iterator : $/;"	s	namespace:boost::range_detail_microsoft	inherits:BOOST_RANGE_DETAIL_MICROSOFT_range_mutable_iterator
const_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<5>::type    const_array_;$/;"	t	namespace:boost::range_detail
const_begin	/usr/include/boost/range/begin.hpp	/^        const_begin( const T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( const T& r )
const_char_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<9>::type    const_char_ptr_;$/;"	t	namespace:boost::range_detail
const_char_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    string_t >::type const_char_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
const_constraints	/usr/include/boost/range/concepts.hpp	/^        void const_constraints(const T& const_range)$/;"	f	struct:boost::SinglePassRangeConcept	access:private	signature:(const T& const_range)
const_end	/usr/include/boost/range/end.hpp	/^        const_end( const T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( const T& r )
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef OLECHAR const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef indirect_iterator<citer_t> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef mutable_iterator const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef typename X::PCXSTR const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef val_t const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef zip_iterator< tuple<k_citer_t, v_citer_t> > const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/concepts.hpp	/^         typedef BOOST_DEDUCED_TYPENAME range_iterator<T const>::type  const_iterator;$/;"	t	struct:boost::SinglePassRangeConcept	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const BaseT* const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const T* const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const value_type* const_iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type const_iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
const_iterator	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef IteratorT const_iterator;$/;"	t	class:boost::iterator_range	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef TCHAR const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, ::CObject const * const, ::CObject const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, ::CObject const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const * const, val_t const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, void const * const, void const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, void const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_cpair_map_iterator<X const, pair_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X const, CObject const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X const, void const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mutable_iterator const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef transform_iterator<fun<X const>, citer_t> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef val_t const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<const ForwardRange>::type   const_iterator;$/;"	t	class:boost::sub_range	access:public
const_iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct const_iterator_of$/;"	s	namespace:boost::algorithm
const_iterator_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct const_iterator_of$/;"	s	namespace:boost::range_detail_microsoft
const_range_tag	/usr/include/boost/range/iterator_range_core.hpp	/^        struct const_range_tag { };$/;"	s	namespace:boost::iterator_range_detail
const_rbegin	/usr/include/boost/range/rbegin.hpp	/^const_rbegin( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
const_reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            >::type const_reference;$/;"	t	struct:boost::range_detail::any_incrementable_iterator_interface	access:public
const_reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_bidirectional_iterator_interface<Reference, Buffer>::const_reference const_reference;$/;"	t	struct:boost::range_detail::any_random_access_iterator_interface	access:public
const_reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_forward_iterator_interface<Reference, Buffer>::const_reference const_reference;$/;"	t	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public
const_reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_incrementable_iterator_interface<Reference, Buffer>::const_reference const_reference;$/;"	t	struct:boost::range_detail::any_single_pass_iterator_interface	access:public
const_reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_single_pass_iterator_interface<Reference, Buffer>::const_reference const_reference;$/;"	t	struct:boost::range_detail::any_forward_iterator_interface	access:public
const_reference	/usr/include/boost/range/sub_range.hpp	/^                                 reference >::type const_reference;$/;"	t	class:boost::sub_range	access:public
const_reference_type_generator	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^        struct const_reference_type_generator$/;"	s	namespace:boost::range_detail
const_rend	/usr/include/boost/range/rend.hpp	/^const_rend( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
const_std_pair_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<3>::type    const_std_pair_;$/;"	t	namespace:boost::range_detail
const_wchar_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    char_ptr_t >::type const_wchar_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
const_wchar_t_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<11>::type   const_wchar_t_ptr_;$/;"	t	namespace:boost::range_detail
container_helper_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                >::type container_helper_type;$/;"	t	struct:boost::algorithm::collection_traits	access:private
copied	/usr/include/boost/range/adaptor/copied.hpp	/^            copied(std::size_t t_, std::size_t u_)$/;"	f	struct:boost::adaptors::copied	access:public	signature:(std::size_t t_, std::size_t u_)
copied	/usr/include/boost/range/adaptor/copied.hpp	/^        struct copied$/;"	s	namespace:boost::adaptors
copy	/usr/include/boost/range/adaptor/copied.hpp	/^        copy(const CopyableRandomAccessRange& rng, std::size_t t, std::size_t u)$/;"	f	namespace:boost::adaptors	signature:(const CopyableRandomAccessRange& rng, std::size_t t, std::size_t u)
copy	/usr/include/boost/range/algorithm/copy.hpp	/^inline OutputIterator copy(const SinglePassRange& rng, OutputIterator out)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, OutputIterator out)
copy_backward	/usr/include/boost/range/algorithm/copy_backward.hpp	/^copy_backward(const BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, BidirectionalTraversalWriteableIterator out)
copy_n	/usr/include/boost/range/algorithm_ext/copy_n.hpp	/^inline OutputIterator copy_n(const SinglePassRange& rng, Size n, OutputIterator out)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, Size n, OutputIterator out)
copy_range	/usr/include/boost/range/iterator_range_core.hpp	/^        inline SeqT copy_range( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
count	/usr/include/boost/range/algorithm/count.hpp	/^count(SinglePassRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(SinglePassRange& rng, const Value& val)
count	/usr/include/boost/range/algorithm/count.hpp	/^count(const SinglePassRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, const Value& val)
count_if	/usr/include/boost/range/algorithm/count_if.hpp	/^count_if(SinglePassRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(SinglePassRange& rng, UnaryPredicate pred)
count_if	/usr/include/boost/range/algorithm/count_if.hpp	/^count_if(const SinglePassRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, UnaryPredicate pred)
counting_range	/usr/include/boost/range/counting_range.hpp	/^    counting_range(Range& rng)$/;"	f	namespace:boost	signature:(Range& rng)
counting_range	/usr/include/boost/range/counting_range.hpp	/^    counting_range(Value first, Value last)$/;"	f	namespace:boost	signature:(Value first, Value last)
counting_range	/usr/include/boost/range/counting_range.hpp	/^    counting_range(const Range& rng)$/;"	f	namespace:boost	signature:(const Range& rng)
cust_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_of<bare_t>::type cust_t;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
cust_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_of<bare_t>::type cust_t;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlArray<E, ETraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlList<E, ETraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlMap<K, V, KTraits, VTraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:customization
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAutoPtrArray<E> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAutoPtrList<E> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CComBSTR >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CHeapPtrList<E, Allocator> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CInterfaceArray<I, piid> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CInterfaceList<I, piid> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleArray<T, TEqual> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleMap<TKey, TVal, TEqual> >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleValArray<T> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CStaticString<BaseType, t_nSize> >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< atl_rb_tree_tag > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< atl_string_tag >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CArray<Type, ArgType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CByteArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CDWordArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CList<Type, ArgType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMap<Key, ArgKey, Mapped, ArgMapped> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_cpair_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapPtrToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapPtrToWord > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToOb > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToString > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_cpair_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapWordToOb > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapWordToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CObArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CObList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CPtrArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CPtrList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CString >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CStringArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CStringList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrArray<BaseClass, PtrType> >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrList<BaseClass, PtrType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrMap<BaseClass, KeyPtrType, MappedPtrType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CUIntArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CWordArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct customization_of$/;"	s	namespace:boost::range_detail_microsoft
customization_tag_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct customization_tag_of$/;"	s	namespace:boost::range_detail_microsoft
deallocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void deallocate()$/;"	f	class:boost::any_iterator_buffer	access:public	signature:()
deallocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void deallocate()$/;"	f	class:boost::any_iterator_heap_only_buffer	access:public	signature:()
deallocate	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void deallocate()$/;"	f	class:boost::any_iterator_stack_only_buffer	access:public	signature:()
decrement	/usr/include/boost/range/adaptor/indexed.hpp	/^            void decrement()$/;"	f	class:boost::range_detail::indexed_iterator	access:private	signature:()
decrement	/usr/include/boost/range/adaptor/strided.hpp	/^            void decrement()$/;"	f	class:boost::range_detail::strided_iterator	access:private	signature:()
decrement	/usr/include/boost/range/detail/any_iterator.hpp	/^            void decrement()$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:()
decrement	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual void decrement() = 0;$/;"	p	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public	signature:()
decrement	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void decrement()$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:()
decrement	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void decrement()$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:()
decrement	/usr/include/boost/range/detail/join_iterator.hpp	/^    void decrement()$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:()
decrement	/usr/include/boost/range/detail/microsoft.hpp	/^        void decrement()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:()
decrement	/usr/include/boost/range/irange.hpp	/^            void decrement()$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:()
decrement	/usr/include/boost/range/irange.hpp	/^            void decrement()$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:()
default_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct default_container_traits$/;"	s	namespace:boost::algorithm::detail
default_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct default_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
demote_iterator_traversal_tag	/usr/include/boost/range/detail/demote_iterator_traversal_tag.hpp	/^struct demote_iterator_traversal_tag$/;"	s	namespace:boost::range_detail	inherits:inner_demote_iterator_traversal_tag
dereference	/usr/include/boost/range/detail/any_iterator.hpp	/^            Reference dereference() const$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:() const
dereference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual Reference dereference() const = 0;$/;"	p	struct:boost::range_detail::any_single_pass_iterator_interface	access:public	signature:() const
dereference	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual Reference dereference() const$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:() const
dereference	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual Reference dereference() const$/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:() const
dereference	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual Reference dereference() const$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:() const
dereference	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual Reference dereference() const$/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:() const
dereference	/usr/include/boost/range/detail/join_iterator.hpp	/^    Reference dereference(unsigned int selected) const$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:(unsigned int selected) const
dereference	/usr/include/boost/range/detail/join_iterator.hpp	/^    Reference dereference(unsigned int) const$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:(unsigned int) const
dereference	/usr/include/boost/range/detail/join_iterator.hpp	/^    typename join_iterator::reference dereference() const$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:() const
dereference	/usr/include/boost/range/detail/microsoft.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:() const
dereference	/usr/include/boost/range/irange.hpp	/^            reference dereference() const$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:() const
dereference	/usr/include/boost/range/irange.hpp	/^            reference dereference() const$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:() const
dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:() const
dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:() const
dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private	signature:() const
detail	/usr/include/boost/range/detail/any_iterator.hpp	/^    namespace detail$/;"	n	namespace:boost
detail	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/range/size_type.hpp	/^    namespace detail$/;"	n	namespace:boost
detail_safe_bool_member_fn	/usr/include/boost/range/detail/safe_bool.hpp	/^    bool detail_safe_bool_member_fn() const { return false; }$/;"	f	class:boost::range_detail::safe_bool	access:private	signature:() const
difference_type	/usr/include/boost/range/adaptor/strided.hpp	/^            typedef BOOST_DEDUCED_TYPENAME std::iterator_traits<BaseIterator>::difference_type difference_type;$/;"	t	class:boost::range_detail::strided_iterator	access:public
difference_type	/usr/include/boost/range/adaptor/strided.hpp	/^            typedef BOOST_DEDUCED_TYPENAME super_t::difference_type difference_type;$/;"	t	class:boost::range_detail::strided_iterator	access:public
difference_type	/usr/include/boost/range/concepts.hpp	/^            typedef BOOST_DEDUCED_TYPENAME boost::detail::iterator_traits<Iterator>::difference_type difference_type;$/;"	t	struct:boost::range_detail::ForwardIteratorConcept	access:public
difference_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Difference difference_type;$/;"	t	class:boost::detail::postfix_increment_proxy	access:public
difference_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Difference difference_type;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:public
difference_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename base_type::difference_type difference_type;$/;"	t	class:boost::range_detail::any_iterator	access:public
difference_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef Difference difference_type;$/;"	t	struct:boost::range_detail::any_random_access_iterator_interface	access:public
difference_type	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            typedef Difference difference_type;$/;"	t	class:boost::range_detail::any_random_access_iterator_wrapper	access:public
difference_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    iterator_traits<element_type>::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
difference_type	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::difference_type difference_type;$/;"	t	class:boost::range_detail::integer_iterator	access:public
difference_type	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::difference_type difference_type;$/;"	t	class:boost::range_detail::integer_iterator_with_step	access:public
difference_type	/usr/include/boost/range/iterator_range_core.hpp	/^                iterator_difference<IteratorT>::type difference_type;$/;"	t	class:boost::iterator_range	access:public
difference_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_difference<ForwardRange>::type       difference_type;$/;"	t	class:boost::sub_range	access:public
difference_type_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct difference_type_of$/;"	s	namespace:boost::algorithm
disabler	/usr/include/boost/range/any_range.hpp	/^            struct disabler {};$/;"	s	class:boost::range_detail::any_range	access:private
disabler	/usr/include/boost/range/detail/any_iterator.hpp	/^            struct disabler {};$/;"	s	class:boost::range_detail::any_iterator	access:private
disabler	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            struct disabler {};$/;"	s	class:boost::range_detail::any_single_pass_iterator_wrapper	access:private
distance	/usr/include/boost/range/distance.hpp	/^    distance( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
distance_to	/usr/include/boost/range/adaptor/strided.hpp	/^            difference_type distance_to(const strided_iterator<OtherIterator, random_access_traversal_tag>& other,$/;"	f	class:boost::range_detail::strided_iterator	access:private	signature:(const strided_iterator<OtherIterator, random_access_traversal_tag>& other, BOOST_DEDUCED_TYPENAME enable_if_convertible<OtherIterator, BaseIterator>::type* = 0) const
distance_to	/usr/include/boost/range/detail/any_iterator.hpp	/^            Difference distance_to(const any_iterator& other) const$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:(const any_iterator& other) const
distance_to	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual Difference distance_to(const any_random_access_iterator_interface& other) const = 0;$/;"	p	struct:boost::range_detail::any_random_access_iterator_interface	access:public	signature:(const any_random_access_iterator_interface& other) const
distance_to	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual Difference distance_to(const any_random_access_iterator_interface<Reference, Difference, Buffer>& other) const$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:(const any_random_access_iterator_interface<Reference, Difference, Buffer>& other) const
distance_to	/usr/include/boost/range/detail/join_iterator.hpp	/^    typename join_iterator::difference_type distance_to(const join_iterator& other) const$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:(const join_iterator& other) const
distance_to	/usr/include/boost/range/irange.hpp	/^            difference_type distance_to(const integer_iterator& other) const$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:(const integer_iterator& other) const
distance_to	/usr/include/boost/range/irange.hpp	/^            difference_type distance_to(const integer_iterator_with_step& other) const$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:(const integer_iterator_with_step& other) const
dummy	/usr/include/boost/range/size_type.hpp	/^            struct yes_type { char dummy[2]; };$/;"	m	struct:boost::detail::has_size_type::yes_type	access:public
element_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME PairT::first_type element_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
empty	/usr/include/boost/range/detail/collection_traits.hpp	/^        inline bool empty( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static bool empty( const A& )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static bool empty( const A& a )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& a )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
empty	/usr/include/boost/range/detail/empty.hpp	/^    empty( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
empty	/usr/include/boost/range/empty.hpp	/^    inline bool empty( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
empty	/usr/include/boost/range/iterator_range_core.hpp	/^            bool empty() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
enabler	/usr/include/boost/range/any_range.hpp	/^            struct enabler {};$/;"	s	class:boost::range_detail::any_range	access:private
enabler	/usr/include/boost/range/detail/any_iterator.hpp	/^            struct enabler {};$/;"	s	class:boost::range_detail::any_iterator	access:private
end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x) \/\/ redefine$/;"	f	struct:boost::range_detail_microsoft::atl_array_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::indirected_list_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/combine.hpp	/^                static BOOST_DEDUCED_TYPENAME ::boost::tuples::element<N,tuple_t>::type end( Z& z, R& r )$/;"	f	struct:boost::range_detail::zip_rng::get	access:public	signature:( Z& z, R& r )
end	/usr/include/boost/range/combine.hpp	/^            static type end( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )$/;"	f	struct:boost::range_detail::generate_tuple	access:public	signature:( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )
end	/usr/include/boost/range/detail/collection_traits.hpp	/^        end( C& c )$/;"	f	namespace:boost::algorithm	signature:( C& c )
end	/usr/include/boost/range/detail/collection_traits.hpp	/^        end( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
end	/usr/include/boost/range/detail/end.hpp	/^        end( C& c )$/;"	f	namespace:boost::range_adl_barrier	signature:( C& c )
end	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::array_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::list_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/detail/vc6/end.hpp	/^    end( C& c )$/;"	f	namespace:boost	signature:( C& c )
end	/usr/include/boost/range/end.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<T>::type end( T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( T& r )
end	/usr/include/boost/range/end.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<const T>::type end( const T& r )$/;"	f	namespace:boost::range_adl_barrier	signature:( const T& r )
end	/usr/include/boost/range/iterator_range_core.hpp	/^            IteratorT end() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_map_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/sub_range.hpp	/^        const_iterator  end() const      { return base::end();   }$/;"	f	class:boost::sub_range	access:public	signature:() const
end	/usr/include/boost/range/sub_range.hpp	/^        iterator        end()            { return base::end();   }$/;"	f	class:boost::sub_range	access:public	signature:()
end_of	/usr/include/boost/range/detail/microsoft.hpp	/^    end_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
end_of	/usr/include/boost/range/detail/microsoft.hpp	/^    end_of(T& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T& x)
equal	/usr/include/boost/range/adaptor/strided.hpp	/^            bool equal(const strided_iterator& other) const$/;"	f	class:boost::range_detail::strided_iterator	access:private	signature:(const strided_iterator& other) const
equal	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal( SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2 )
equal	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal( SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2, BinaryPredicate pred )
equal	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal( const SinglePassRange1& rng1, const SinglePassRange2& rng2 )$/;"	f	namespace:boost::range	signature:( const SinglePassRange1& rng1, const SinglePassRange2& rng2 )
equal	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal( const SinglePassRange1& rng1, const SinglePassRange2& rng2,$/;"	f	namespace:boost::range	signature:( const SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred )
equal	/usr/include/boost/range/detail/any_iterator.hpp	/^            bool equal(const any_iterator& other) const$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:(const any_iterator& other) const
equal	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual bool equal(const any_single_pass_iterator_interface& other) const = 0;$/;"	p	struct:boost::range_detail::any_single_pass_iterator_interface	access:public	signature:(const any_single_pass_iterator_interface& other) const
equal	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual bool equal(const any_single_pass_iterator_interface<Reference, Buffer>& other) const$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:(const any_single_pass_iterator_interface<Reference, Buffer>& other) const
equal	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual bool equal(const any_single_pass_iterator_interface<Reference, Buffer>& other) const$/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:(const any_single_pass_iterator_interface<Reference, Buffer>& other) const
equal	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual bool equal(const any_single_pass_iterator_interface<Reference, Buffer>& other) const$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:(const any_single_pass_iterator_interface<Reference, Buffer>& other) const
equal	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual bool equal(const any_single_pass_iterator_interface<Reference, Buffer>& other) const$/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:(const any_single_pass_iterator_interface<Reference, Buffer>& other) const
equal	/usr/include/boost/range/detail/join_iterator.hpp	/^    bool equal(const join_iterator& other) const$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:(const join_iterator& other) const
equal	/usr/include/boost/range/detail/join_iterator.hpp	/^    bool equal(const join_iterator_union& other, unsigned int selected) const$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:(const join_iterator_union& other, unsigned int selected) const
equal	/usr/include/boost/range/detail/microsoft.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:(self_t const& other) const
equal	/usr/include/boost/range/irange.hpp	/^            bool equal(const integer_iterator& other) const$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:(const integer_iterator& other) const
equal	/usr/include/boost/range/irange.hpp	/^            bool equal(const integer_iterator_with_step& other) const$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:(const integer_iterator_with_step& other) const
equal	/usr/include/boost/range/iterator_range_core.hpp	/^            bool equal( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
equal	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool equal(const Left& l, const Right& r)$/;"	f	namespace:boost::iterator_range_detail	signature:(const Left& l, const Right& r)
equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:(self_t const& other) const
equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:(self_t const& other) const
equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private	signature:(self_t const& other) const
equal_impl	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal_impl( RandomAccessTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( RandomAccessTraversalReadableIterator1 first1, RandomAccessTraversalReadableIterator1 last1, RandomAccessTraversalReadableIterator2 first2, RandomAccessTraversalReadableIterator2 last2, BinaryPredicate pred )
equal_impl	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal_impl( RandomAccessTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( RandomAccessTraversalReadableIterator1 first1, RandomAccessTraversalReadableIterator1 last1, RandomAccessTraversalReadableIterator2 first2, RandomAccessTraversalReadableIterator2 last2, std::random_access_iterator_tag, std::random_access_iterator_tag )
equal_impl	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal_impl( SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2, BinaryPredicate pred, IteratorCategoryTag1, IteratorCategoryTag2 )
equal_impl	/usr/include/boost/range/algorithm/equal.hpp	/^        inline bool equal_impl( SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:( SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2, IteratorCategoryTag1, IteratorCategoryTag2 )
equal_range	/usr/include/boost/range/algorithm/equal_range.hpp	/^equal_range(ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, const Value& val)
equal_range	/usr/include/boost/range/algorithm/equal_range.hpp	/^equal_range(ForwardRange& rng, const Value& val, SortPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, const Value& val, SortPredicate pred)
equal_range	/usr/include/boost/range/algorithm/equal_range.hpp	/^equal_range(const ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val)
equal_range	/usr/include/boost/range/algorithm/equal_range.hpp	/^equal_range(const ForwardRange& rng, const Value& val, SortPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val, SortPredicate pred)
erase	/usr/include/boost/range/algorithm_ext/erase.hpp	/^inline Container& erase( Container& on,$/;"	f	namespace:boost::range	signature:( Container& on, iterator_range<BOOST_DEDUCED_TYPENAME Container::iterator> to_erase )
exists	/usr/include/boost/range/detail/extract_optional_type.hpp	/^        template< typename T > struct exists { typedef void type; };$/;"	s	namespace:boost::range_detail
f	/usr/include/boost/range/adaptor/tokenized.hpp	/^            V         f;$/;"	m	struct:boost::range_detail::regex_holder	access:public
fill	/usr/include/boost/range/algorithm/fill.hpp	/^inline ForwardRange& fill(ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, const Value& val)
fill	/usr/include/boost/range/algorithm/fill.hpp	/^inline const ForwardRange& fill(const ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val)
fill_n	/usr/include/boost/range/algorithm/fill_n.hpp	/^inline ForwardRange& fill_n(ForwardRange& rng, Size n, const Value& val)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, Size n, const Value& val)
fill_n	/usr/include/boost/range/algorithm/fill_n.hpp	/^inline const ForwardRange& fill_n(const ForwardRange& rng, Size n, const Value& val)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, Size n, const Value& val)
filter	/usr/include/boost/range/adaptor/filtered.hpp	/^        filter(InputRange& rng, Predicate filter_pred)$/;"	f	namespace:boost::adaptors	signature:(InputRange& rng, Predicate filter_pred)
filter	/usr/include/boost/range/adaptor/filtered.hpp	/^        filter(const InputRange& rng, Predicate filter_pred)$/;"	f	namespace:boost::adaptors	signature:(const InputRange& rng, Predicate filter_pred)
filter_holder	/usr/include/boost/range/adaptor/filtered.hpp	/^            filter_holder( T r ) : holder<T>(r)$/;"	f	struct:boost::range_detail::filter_holder	access:public	signature:( T r )
filter_holder	/usr/include/boost/range/adaptor/filtered.hpp	/^        struct filter_holder : holder<T>$/;"	s	namespace:boost::range_detail	inherits:holder
filtered	/usr/include/boost/range/adaptor/filtered.hpp	/^                    filtered =$/;"	m	namespace:boost::adaptors::__anon2
filtered_range	/usr/include/boost/range/adaptor/filtered.hpp	/^            filtered_range( P p, R& r )$/;"	f	struct:boost::range_detail::filtered_range	access:public	signature:( P p, R& r )
filtered_range	/usr/include/boost/range/adaptor/filtered.hpp	/^        struct filtered_range :$/;"	s	namespace:boost::range_detail	inherits:boost::iterator_range
find	/usr/include/boost/range/algorithm/find.hpp	/^find( SinglePassRange& rng, const Value& val )$/;"	f	namespace:boost::range	signature:( SinglePassRange& rng, const Value& val )
find	/usr/include/boost/range/algorithm/find.hpp	/^find( const SinglePassRange& rng, const Value& val )$/;"	f	namespace:boost::range	signature:( const SinglePassRange& rng, const Value& val )
find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(ForwardRange1 & rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(ForwardRange1 & rng1, const ForwardRange2& rng2)
find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(ForwardRange1 & rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange1 & rng1, const ForwardRange2& rng2, BinaryPredicate pred)
find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(ForwardRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(ForwardRange1& rng1, const ForwardRange2& rng2)
find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)
find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(const ForwardRange1 & rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(const ForwardRange1 & rng1, const ForwardRange2& rng2)
find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(const ForwardRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(const ForwardRange1& rng1, const ForwardRange2& rng2)
find_end	/usr/include/boost/range/algorithm/find_end.hpp	/^find_end(const ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)
find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(SinglePassRange1 & rng1, ForwardRange2 const & rng2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1 & rng1, ForwardRange2 const & rng2)
find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(SinglePassRange1 & rng1, ForwardRange2 const & rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(SinglePassRange1 & rng1, ForwardRange2 const & rng2, BinaryPredicate pred)
find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(SinglePassRange1 & rng1, const ForwardRange2& rng2,$/;"	f	namespace:boost::range	signature:(SinglePassRange1 & rng1, const ForwardRange2& rng2, BinaryPredicate pred)
find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(SinglePassRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, const ForwardRange2& rng2)
find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(const SinglePassRange1 & rng1, const ForwardRange2& rng2,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1 & rng1, const ForwardRange2& rng2, BinaryPredicate pred)
find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(const SinglePassRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const ForwardRange2& rng2)
find_first_of	/usr/include/boost/range/algorithm/find_first_of.hpp	/^find_first_of(const SinglePassRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)
find_if	/usr/include/boost/range/algorithm/find_if.hpp	/^find_if( SinglePassRange& rng, UnaryPredicate pred )$/;"	f	namespace:boost::range	signature:( SinglePassRange& rng, UnaryPredicate pred )
find_if	/usr/include/boost/range/algorithm/find_if.hpp	/^find_if( const SinglePassRange& rng, UnaryPredicate pred )$/;"	f	namespace:boost::range	signature:( const SinglePassRange& rng, UnaryPredicate pred )
first2	/usr/include/boost/range/detail/join_iterator.hpp	/^    Iterator2 first2;$/;"	m	struct:boost::range_detail::join_iterator_link	access:public
first_argument_type	/usr/include/boost/range/adaptor/replaced.hpp	/^            typedef const Value& first_argument_type;$/;"	t	class:boost::range_detail::replace_value	access:public
first_argument_type	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            typedef const Value& first_argument_type;$/;"	t	class:boost::range_detail::replace_value_if	access:public
for_each	/usr/include/boost/range/algorithm/for_each.hpp	/^inline UnaryFunction for_each(SinglePassRange & rng, UnaryFunction fun)$/;"	f	namespace:boost::range	signature:(SinglePassRange & rng, UnaryFunction fun)
for_each	/usr/include/boost/range/algorithm/for_each.hpp	/^inline UnaryFunction for_each(const SinglePassRange& rng, UnaryFunction fun)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, UnaryFunction fun)
for_each	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^        inline Fn2 for_each(SinglePassRange1& rng1, SinglePassRange2& rng2, Fn2 fn)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, SinglePassRange2& rng2, Fn2 fn)
for_each	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^        inline Fn2 for_each(SinglePassRange1& rng1, const SinglePassRange2& rng2, Fn2 fn)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, const SinglePassRange2& rng2, Fn2 fn)
for_each	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^        inline Fn2 for_each(const SinglePassRange1& rng1, SinglePassRange2& rng2, Fn2 fn)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, SinglePassRange2& rng2, Fn2 fn)
for_each	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^        inline Fn2 for_each(const SinglePassRange1& rng1, const SinglePassRange2& rng2, Fn2 fn)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, Fn2 fn)
for_each_detail	/usr/include/boost/range/algorithm/for_each.hpp	/^        namespace for_each_detail$/;"	n	namespace:boost::range
for_each_impl	/usr/include/boost/range/algorithm/for_each.hpp	/^            for_each_impl(Iterator first, Iterator last, UnaryFunction fn,$/;"	f	namespace:boost::range::for_each_detail	signature:(Iterator first, Iterator last, UnaryFunction fn, typename disable_if< is_reference_wrapper<UnaryFunction>, void >::type* = 0)
for_each_impl	/usr/include/boost/range/algorithm/for_each.hpp	/^            for_each_impl(Iterator first, Iterator last, UnaryFunction fun,$/;"	f	namespace:boost::range::for_each_detail	signature:(Iterator first, Iterator last, UnaryFunction fun, typename enable_if< is_reference_wrapper<UnaryFunction>, void >::type* = 0)
for_each_impl	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^        inline Fn2 for_each_impl(InputIterator1 first1, InputIterator1 last1,$/;"	f	namespace:boost::range_detail	signature:(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, Fn2 fn)
forwarder	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^        struct forwarder$/;"	s	namespace:boost::range_detail
forwarder2	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^        struct forwarder2$/;"	s	namespace:boost::range_detail
forwarder2TU	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^        struct forwarder2TU$/;"	s	namespace:boost::range_detail
front	/usr/include/boost/range/iterator_range_core.hpp	/^           reference front() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
front	/usr/include/boost/range/sub_range.hpp	/^        const_reference front() const$/;"	f	class:boost::sub_range	access:public	signature:() const
front	/usr/include/boost/range/sub_range.hpp	/^        reference front()$/;"	f	class:boost::sub_range	access:public	signature:()
fun	/usr/include/boost/range/detail/begin.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME range_iterator<C>::type fun( C& c )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( C& c )
fun	/usr/include/boost/range/detail/begin.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME range_iterator<P>::type fun( const P& p )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( char* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( char* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( wchar_t* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( wchar_t* s )
fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( C& c )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( C& c )
fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( T BOOST_ARRAY_REF[sz] )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( T BOOST_ARRAY_REF[sz] )
fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const P& p )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const char* s )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/end.hpp	/^            fun( C& c )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( C& c )
fun	/usr/include/boost/range/detail/end.hpp	/^            fun( const P& p )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/size.hpp	/^            fun( const P& p )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/size.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME C::size_type fun( const C& c )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const C& c )
fun	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( const char* s )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun( C& c )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( C& c )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun( const P& p )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun(T& t)$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:(T& t)
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( char* s )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( wchar_t* s )
fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                fun( const P& p )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static BOOST_RANGE_DEDUCED_TYPENAME C::size_type fun( const C& c )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const C& c )
fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun( const char* s )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun(T& t)$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:(T& t)
fun	/usr/include/boost/range/mfc.hpp	/^        struct fun$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
function_type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef container_helper_type function_type;        $/;"	t	struct:boost::algorithm::collection_traits	access:public
generate	/usr/include/boost/range/algorithm/generate.hpp	/^inline ForwardRange& generate( ForwardRange& rng, Generator gen )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Generator gen )
generate	/usr/include/boost/range/algorithm/generate.hpp	/^inline const ForwardRange& generate( const ForwardRange& rng, Generator gen )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Generator gen )
generate_tuple	/usr/include/boost/range/combine.hpp	/^        struct generate_tuple$/;"	s	namespace:boost::range_detail
generator_t	/usr/include/boost/range/combine.hpp	/^            typedef generate_tuple<R1,R2,R3,R4,R5,R6>        generator_t;$/;"	t	struct:boost::range_detail::zip_rng	access:private
get	/usr/include/boost/range/combine.hpp	/^            struct get$/;"	s	struct:boost::range_detail::zip_rng	access:public
get_index	/usr/include/boost/range/adaptor/strided.hpp	/^            difference_type get_index() const { return m_index; }$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:() const
get_stride	/usr/include/boost/range/adaptor/strided.hpp	/^            difference_type get_stride() const { return m_stride; }$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:() const
greater_or_equal_than	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool greater_or_equal_than( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
greater_than	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool greater_than( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
has_range_const_iterator	/usr/include/boost/range/has_range_iterator.hpp	/^    struct has_range_const_iterator$/;"	s	namespace:boost	inherits:range_detail::has_range_const_iterator_impl
has_range_const_iterator_impl	/usr/include/boost/range/has_range_iterator.hpp	/^        struct has_range_const_iterator_impl$/;"	s	namespace:boost::range_detail	inherits:boost::mpl::false_
has_range_const_iterator_impl	/usr/include/boost/range/has_range_iterator.hpp	/^        struct has_range_const_iterator_impl<T, BOOST_DEDUCED_TYPENAME enable_if< has_type< range_const_iterator<T> > >::type>$/;"	s	namespace:boost::range_detail	inherits:boost::mpl::true_
has_range_iterator	/usr/include/boost/range/has_range_iterator.hpp	/^    struct has_range_iterator$/;"	s	namespace:boost	inherits:range_detail::has_range_iterator_impl
has_range_iterator_impl	/usr/include/boost/range/has_range_iterator.hpp	/^        struct has_range_iterator_impl$/;"	s	namespace:boost::range_detail	inherits:boost::mpl::false_
has_range_iterator_impl	/usr/include/boost/range/has_range_iterator.hpp	/^        struct has_range_iterator_impl<T, BOOST_DEDUCED_TYPENAME enable_if< has_type< range_mutable_iterator<T> > >::type>$/;"	s	namespace:boost::range_detail	inherits:boost::mpl::true_
has_size_type	/usr/include/boost/range/size_type.hpp	/^        class has_size_type$/;"	c	namespace:boost::detail
holder	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            holder( T t ) : val(t)$/;"	f	struct:boost::range_detail::holder	access:public	signature:( T t )
holder	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^        struct holder$/;"	s	namespace:boost::range_detail
holder2	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            holder2( T t, T u ) : val1(t), val2(u)$/;"	f	struct:boost::range_detail::holder2	access:public	signature:( T t, T u )
holder2	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^        struct holder2$/;"	s	namespace:boost::range_detail
i	/usr/include/boost/range/concepts.hpp	/^             Iterator i;$/;"	m	struct:boost::range_detail::BidirectionalIteratorConcept	access:private
i	/usr/include/boost/range/concepts.hpp	/^             Iterator i;$/;"	m	struct:boost::range_detail::RandomAccessIteratorConcept	access:private
i	/usr/include/boost/range/concepts.hpp	/^            Iterator i;$/;"	m	struct:boost::range_detail::ForwardIteratorConcept	access:private
i	/usr/include/boost/range/concepts.hpp	/^            Iterator i;$/;"	m	struct:boost::range_detail::IncrementableIteratorConcept	access:private
i	/usr/include/boost/range/concepts.hpp	/^            Iterator i;$/;"	m	struct:boost::range_detail::SinglePassIteratorConcept	access:private
i	/usr/include/boost/range/concepts.hpp	/^        iterator i;$/;"	m	struct:boost::WriteableRangeConcept	access:private
impl	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef iterator_range_detail::iterator_range_impl<IteratorT> impl;$/;"	t	class:boost::iterator_range	access:protected
impl	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base::impl impl;$/;"	t	class:boost::sub_range	access:private
includes	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline bool includes(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2)
includes	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline bool includes(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)
increment	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            void increment()$/;"	f	class:boost::range_detail::skip_iterator	access:public	signature:()
increment	/usr/include/boost/range/adaptor/indexed.hpp	/^            void increment()$/;"	f	class:boost::range_detail::indexed_iterator	access:private	signature:()
increment	/usr/include/boost/range/adaptor/strided.hpp	/^            void increment()$/;"	f	class:boost::range_detail::strided_iterator	access:private	signature:()
increment	/usr/include/boost/range/detail/any_iterator.hpp	/^            void increment()$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:()
increment	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual void increment() = 0;$/;"	p	struct:boost::range_detail::any_incrementable_iterator_interface	access:public	signature:()
increment	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void increment()$/;"	f	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:public	signature:()
increment	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void increment()$/;"	f	class:boost::range_detail::any_forward_iterator_wrapper	access:public	signature:()
increment	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void increment()$/;"	f	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public	signature:()
increment	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void increment()$/;"	f	class:boost::range_detail::any_random_access_iterator_wrapper	access:public	signature:()
increment	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            virtual void increment()$/;"	f	class:boost::range_detail::any_single_pass_iterator_wrapper	access:public	signature:()
increment	/usr/include/boost/range/detail/join_iterator.hpp	/^    void increment()$/;"	f	class:boost::range_detail::join_iterator	access:private	signature:()
increment	/usr/include/boost/range/detail/microsoft.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:()
increment	/usr/include/boost/range/irange.hpp	/^            void increment()$/;"	f	class:boost::range_detail::integer_iterator	access:private	signature:()
increment	/usr/include/boost/range/irange.hpp	/^            void increment()$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:private	signature:()
increment	/usr/include/boost/range/mfc.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:()
increment	/usr/include/boost/range/mfc.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:()
index	/usr/include/boost/range/adaptor/indexed.hpp	/^            index_type index() const$/;"	f	class:boost::range_detail::indexed_iterator	access:public	signature:() const
index	/usr/include/boost/range/adaptor/indexed.hpp	/^        index(SinglePassRange& rng, Index index_value)$/;"	f	namespace:boost::adaptors	signature:(SinglePassRange& rng, Index index_value)
index	/usr/include/boost/range/adaptor/indexed.hpp	/^        index(const SinglePassRange& rng, Index index_value)$/;"	f	namespace:boost::adaptors	signature:(const SinglePassRange& rng, Index index_value)
index_type	/usr/include/boost/range/adaptor/indexed.hpp	/^            typedef BOOST_DEDUCED_TYPENAME base::difference_type index_type;$/;"	t	class:boost::range_detail::indexed_iterator	access:private
indexed	/usr/include/boost/range/adaptor/indexed.hpp	/^            explicit indexed(std::size_t x) : val(x) {}$/;"	f	struct:boost::adaptors::indexed	access:public	signature:(std::size_t x)
indexed	/usr/include/boost/range/adaptor/indexed.hpp	/^        struct indexed$/;"	s	namespace:boost::adaptors
indexed_iterator	/usr/include/boost/range/adaptor/indexed.hpp	/^            explicit indexed_iterator( Iter i, index_type index )$/;"	f	class:boost::range_detail::indexed_iterator	access:public	signature:( Iter i, index_type index )
indexed_iterator	/usr/include/boost/range/adaptor/indexed.hpp	/^        class indexed_iterator$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_adaptor
indexed_range	/usr/include/boost/range/adaptor/indexed.hpp	/^            indexed_range( Index i, Rng& r )$/;"	f	struct:boost::range_detail::indexed_range	access:public	signature:( Index i, Rng& r )
indexed_range	/usr/include/boost/range/adaptor/indexed.hpp	/^        struct indexed_range :$/;"	s	namespace:boost::range_detail	inherits:iterator_range
indirect	/usr/include/boost/range/adaptor/indirected.hpp	/^        indirect(InputRange& rng)$/;"	f	namespace:boost::adaptors	signature:(InputRange& rng)
indirect	/usr/include/boost/range/adaptor/indirected.hpp	/^        indirect(const InputRange& rng)$/;"	f	namespace:boost::adaptors	signature:(const InputRange& rng)
indirect_forwarder	/usr/include/boost/range/adaptor/indirected.hpp	/^        struct indirect_forwarder {};$/;"	s	namespace:boost::range_detail
indirected	/usr/include/boost/range/adaptor/indirected.hpp	/^            const range_detail::indirect_forwarder indirected =$/;"	m	namespace:boost::adaptors::__anon3
indirected_list_functions	/usr/include/boost/range/atl.hpp	/^    struct indirected_list_functions$/;"	s	namespace:boost::range_detail_microsoft
indirected_range	/usr/include/boost/range/adaptor/indirected.hpp	/^            explicit indirected_range( R& r )$/;"	f	struct:boost::range_detail::indirected_range	access:public	signature:( R& r )
indirected_range	/usr/include/boost/range/adaptor/indirected.hpp	/^        struct indirected_range :$/;"	s	namespace:boost::range_detail	inherits:boost::iterator_range
inner	/usr/include/boost/range/detail/vc6/end.hpp	/^            struct inner {$/;"	s	struct:boost::range_detail::range_end	access:public
inner	/usr/include/boost/range/detail/vc6/size.hpp	/^            struct inner {$/;"	s	struct:boost::range_detail::range_size_	access:public
inner_demote_iterator_traversal_tag	/usr/include/boost/range/detail/demote_iterator_traversal_tag.hpp	/^struct inner_demote_iterator_traversal_tag$/;"	s	namespace:boost::range_detail
inner_product	/usr/include/boost/range/numeric.hpp	/^    inline Value inner_product( const SinglePassRange1& rng1, const SinglePassRange2& rng2, Value init )$/;"	f	namespace:boost	signature:( const SinglePassRange1& rng1, const SinglePassRange2& rng2, Value init )
inner_product	/usr/include/boost/range/numeric.hpp	/^    inline Value inner_product( const SinglePassRange1& rng1, const SinglePassRange2& rng2,$/;"	f	namespace:boost	signature:( const SinglePassRange1& rng1, const SinglePassRange2& rng2, Value init, BinaryOperation1 op1, BinaryOperation2 op2 )
inplace_merge	/usr/include/boost/range/algorithm/inplace_merge.hpp	/^inline BidirectionalRange& inplace_merge(BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng, BOOST_DEDUCED_TYPENAME boost::range_iterator<BidirectionalRange>::type middle, BinaryPredicate pred)
inplace_merge	/usr/include/boost/range/algorithm/inplace_merge.hpp	/^inline BidirectionalRange& inplace_merge(BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type middle)
inplace_merge	/usr/include/boost/range/algorithm/inplace_merge.hpp	/^inline const BidirectionalRange& inplace_merge(const BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, BOOST_DEDUCED_TYPENAME boost::range_iterator<const BidirectionalRange>::type middle)
inplace_merge	/usr/include/boost/range/algorithm/inplace_merge.hpp	/^inline const BidirectionalRange& inplace_merge(const BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, BOOST_DEDUCED_TYPENAME boost::range_iterator<const BidirectionalRange>::type middle, BinaryPredicate pred)
insert	/usr/include/boost/range/algorithm_ext/insert.hpp	/^inline Container& insert( Container& on,$/;"	f	namespace:boost::range	signature:( Container& on, BOOST_DEDUCED_TYPENAME Container::iterator before, const Range& from )
integer_iterator	/usr/include/boost/range/irange.hpp	/^            explicit integer_iterator(value_type x) : m_value(x) {}$/;"	f	class:boost::range_detail::integer_iterator	access:public	signature:(value_type x)
integer_iterator	/usr/include/boost/range/irange.hpp	/^            integer_iterator() : m_value() {}$/;"	f	class:boost::range_detail::integer_iterator	access:public	signature:()
integer_iterator	/usr/include/boost/range/irange.hpp	/^        class integer_iterator$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_facade
integer_iterator_with_step	/usr/include/boost/range/irange.hpp	/^            integer_iterator_with_step(value_type first, difference_type step, value_type step_size)$/;"	f	class:boost::range_detail::integer_iterator_with_step	access:public	signature:(value_type first, difference_type step, value_type step_size)
integer_iterator_with_step	/usr/include/boost/range/irange.hpp	/^        class integer_iterator_with_step$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_facade
integer_range	/usr/include/boost/range/irange.hpp	/^        integer_range(Integer first, Integer last)$/;"	f	class:boost::integer_range	access:public	signature:(Integer first, Integer last)
integer_range	/usr/include/boost/range/irange.hpp	/^    class integer_range$/;"	c	namespace:boost	inherits:iterator_range
iota	/usr/include/boost/range/algorithm_ext/iota.hpp	/^inline ForwardRange& iota( ForwardRange& rng, Value x )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Value x )
iota	/usr/include/boost/range/algorithm_ext/iota.hpp	/^inline const ForwardRange& iota( const ForwardRange& rng, Value x )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Value x )
irange	/usr/include/boost/range/irange.hpp	/^        irange(Integer first, Integer last, StepSize step_size)$/;"	f	namespace:boost	signature:(Integer first, Integer last, StepSize step_size)
irange	/usr/include/boost/range/irange.hpp	/^    irange(Integer first, Integer last)$/;"	f	namespace:boost	signature:(Integer first, Integer last)
is_any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^        struct is_any_iterator$/;"	s	namespace:boost::range_detail	inherits:mpl::bool_
is_any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^        struct is_any_iterator<$/;"	s	namespace:boost::range_detail	inherits:mpl::bool_
is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_char_array_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_array_impl( char BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( char BOOST_RANGE_ARRAY_REF()[sz] )
is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_array_impl( const char BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( const char BOOST_RANGE_ARRAY_REF()[sz] )
is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( char* )$/;"	f	namespace:boost::range_detail	signature:( char* )
is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( const char* )$/;"	f	namespace:boost::range_detail	signature:( const char* )
is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( const wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* )
is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( wchar_t* )
is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline long is_char_ptr( const T& \/* r *\/ )$/;"	f	namespace:boost::range_detail	signature:( const T& )
is_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_char_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_ptr_impl( char* const );$/;"	p	namespace:boost::range_detail	signature:( char* const )
is_const_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_const_char_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_const_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_const_char_ptr_impl( const char* const );$/;"	p	namespace:boost::range_detail	signature:( const char* const )
is_const_reference	/usr/include/boost/range/detail/any_iterator.hpp	/^        struct is_const_reference$/;"	s	namespace:boost::range_detail
is_const_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_const_wchar_t_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_const_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_const_wchar_t_ptr_impl( const wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t* const )
is_convertible_to_value_as_reference	/usr/include/boost/range/detail/any_iterator.hpp	/^        struct is_convertible_to_value_as_reference$/;"	s	namespace:boost::range_detail
is_mutable_reference	/usr/include/boost/range/detail/any_iterator.hpp	/^        struct is_mutable_reference$/;"	s	namespace:boost::range_detail
is_pair	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            template<typename T> struct is_pair$/;"	s	namespace:boost::algorithm::detail
is_pair_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            no_type is_pair_impl( ... );$/;"	p	namespace:boost::algorithm::detail	signature:( .... )
is_pair_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            yes_type is_pair_impl( const std::pair<T,U>* );$/;"	p	namespace:boost::algorithm::detail	signature:( const std::pair<T,U>* )
is_pair_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_pair_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_pair_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_pair_impl( const std::pair<Iterator,Iterator>* );$/;"	p	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>* )
is_sorted	/usr/include/boost/range/algorithm_ext/is_sorted.hpp	/^inline bool is_sorted(const SinglePassRange& rng)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng)
is_sorted	/usr/include/boost/range/algorithm_ext/is_sorted.hpp	/^inline bool is_sorted(const SinglePassRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, BinaryPredicate pred)
is_string_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_string_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_string_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_string_impl( const wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t* const )
is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_wchar_t_array_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_array_impl( const wchar_t BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t BOOST_RANGE_ARRAY_REF()[sz] )
is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_array_impl( wchar_t BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( wchar_t BOOST_RANGE_ARRAY_REF()[sz] )
is_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_wchar_t_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_ptr_impl( wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( wchar_t* const )
istream_range	/usr/include/boost/range/istream_range.hpp	/^        istream_range(std::basic_istream<Elem, Traits>& in)$/;"	f	namespace:boost::range	signature:(std::basic_istream<Elem, Traits>& in)
it1	/usr/include/boost/range/detail/join_iterator.hpp	/^    const iterator1_t& it1() const { return m_it1; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:() const
it1	/usr/include/boost/range/detail/join_iterator.hpp	/^    const iterator1_t& it1() const { return m_it; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:() const
it1	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator1_t& it1() { return m_it1; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:()
it1	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator1_t& it1() { return m_it; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:()
it2	/usr/include/boost/range/detail/join_iterator.hpp	/^    const iterator2_t& it2() const { return m_it2; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:() const
it2	/usr/include/boost/range/detail/join_iterator.hpp	/^    const iterator2_t& it2() const { return m_it; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:() const
it2	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator2_t& it2() { return m_it2; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:()
it2	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator2_t& it2() { return m_it; }$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:()
iter_t	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            typedef Iter iter_t;$/;"	t	class:boost::range_detail::skip_iterator	access:public
iter_type	/usr/include/boost/range/adaptor/indexed.hpp	/^                iter_type;$/;"	t	struct:boost::range_detail::indexed_range	access:private
iter_type	/usr/include/boost/range/adaptor/strided.hpp	/^                    > iter_type;$/;"	t	class:boost::range_detail::strided_range	access:private
iterator	/usr/include/boost/range/adaptor/reversed.hpp	/^            typedef boost::reverse_iterator<BOOST_DEDUCED_TYPENAME range_iterator<R>::type> iterator;$/;"	t	struct:boost::range_detail::reversed_range	access:public
iterator	/usr/include/boost/range/concepts.hpp	/^         typedef BOOST_DEDUCED_TYPENAME range_iterator<T>::type        iterator;$/;"	t	struct:boost::SinglePassRangeConcept	access:public
iterator	/usr/include/boost/range/concepts.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<Range>::type iterator;$/;"	t	struct:boost::WriteableRangeConcept	access:public
iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::iterator iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::iterator iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::iterator iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::iterator iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BaseT* iterator;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef T* iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef value_type* iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
iterator	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef IteratorT iterator;$/;"	t	class:boost::iterator_range	access:public
iterator	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type         iterator;$/;"	t	class:boost::sub_range	access:public
iterator1_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator iterator1_t;$/;"	t	class:boost::range_detail::join_iterator_union	access:public
iterator1_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator1 iterator1_t;$/;"	t	class:boost::range_detail::join_iterator	access:public
iterator1_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator1 iterator1_t;$/;"	t	class:boost::range_detail::join_iterator_union	access:public
iterator2_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator iterator2_t;$/;"	t	class:boost::range_detail::join_iterator_union	access:public
iterator2_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator2 iterator2_t;$/;"	t	class:boost::range_detail::join_iterator	access:public
iterator2_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef Iterator2 iterator2_t;$/;"	t	class:boost::range_detail::join_iterator_union	access:public
iterator_category	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename std::iterator_traits<any_iterator_type>::iterator_category iterator_category;$/;"	t	class:boost::detail::postfix_increment_proxy	access:public
iterator_category	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename std::iterator_traits<any_iterator_type>::iterator_category iterator_category;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:public
iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct iterator_of$/;"	s	namespace:boost::algorithm
iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range( Iterator Begin, Iterator End ) :$/;"	f	class:boost::iterator_range	access:public	signature:( Iterator Begin, Iterator End )
iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range( Range& r ) :$/;"	f	class:boost::iterator_range	access:public	signature:( Range& r )
iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range( Range& r, iterator_range_detail::range_tag ) :$/;"	f	class:boost::iterator_range	access:public	signature:( Range& r, iterator_range_detail::range_tag )
iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range( const Range& r ) :$/;"	f	class:boost::iterator_range	access:public	signature:( const Range& r )
iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range( const Range& r, iterator_range_detail::const_range_tag ) :$/;"	f	class:boost::iterator_range	access:public	signature:( const Range& r, iterator_range_detail::const_range_tag )
iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range() : m_Begin( iterator() ), m_End( iterator() )$/;"	f	class:boost::iterator_range	access:public	signature:()
iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        class iterator_range$/;"	c	namespace:boost
iterator_range_	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef iterator_range iterator_range_;$/;"	t	class:boost::iterator_range	access:protected
iterator_range_detail	/usr/include/boost/range/iterator_range_core.hpp	/^        namespace iterator_range_detail$/;"	n	namespace:boost
iterator_range_detail	/usr/include/boost/range/iterator_range_core.hpp	/^    namespace iterator_range_detail$/;"	n	namespace:boost
iterator_range_impl	/usr/include/boost/range/iterator_range_core.hpp	/^        struct iterator_range_impl {$/;"	s	namespace:boost::iterator_range_detail
iterator_t	/usr/include/boost/range/irange.hpp	/^        typedef range_detail::integer_iterator<Integer> iterator_t;$/;"	t	class:boost::integer_range	access:private
iterator_t	/usr/include/boost/range/irange.hpp	/^        typedef range_detail::integer_iterator_with_step<Integer> iterator_t;$/;"	t	class:boost::strided_integer_range	access:private
iterator_t	/usr/include/boost/range/join.hpp	/^        > iterator_t;$/;"	t	class:boost::range::joined_range	access:private
iterator_t	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type iterator_t;$/;"	t	class:boost::sub_range	access:private
iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef join_iterator_union<Iterator1, Iterator2, Reference> iterator_union;$/;"	t	class:boost::range_detail::join_iterator	access:private
j	/usr/include/boost/range/concepts.hpp	/^             Iterator j;$/;"	m	struct:boost::range_detail::RandomAccessIteratorConcept	access:private
join	/usr/include/boost/range/join.hpp	/^join(SinglePassRange1& r1, SinglePassRange2& r2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& r1, SinglePassRange2& r2)
join	/usr/include/boost/range/join.hpp	/^join(const SinglePassRange1& r1, const SinglePassRange2& r2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& r1, const SinglePassRange2& r2)
join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator()$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:()
join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator(Range1& r1, Range2& r2, join_iterator_begin_tag)$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:(Range1& r1, Range2& r2, join_iterator_begin_tag)
join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator(Range1& r1, Range2& r2, join_iterator_end_tag)$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:(Range1& r1, Range2& r2, join_iterator_end_tag)
join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator(const Range1& r1, const Range2& r2, join_iterator_begin_tag)$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:(const Range1& r1, const Range2& r2, join_iterator_begin_tag)
join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator(const Range1& r1, const Range2& r2, join_iterator_end_tag)$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:(const Range1& r1, const Range2& r2, join_iterator_end_tag)
join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator(unsigned int section, Iterator1 current1, Iterator1 last1, Iterator2 first2, Iterator2 current2)$/;"	f	class:boost::range_detail::join_iterator	access:public	signature:(unsigned int section, Iterator1 current1, Iterator1 last1, Iterator2 first2, Iterator2 current2)
join_iterator	/usr/include/boost/range/detail/join_iterator.hpp	/^class join_iterator$/;"	c	namespace:boost::range_detail	inherits:iterator_facade
join_iterator_begin_tag	/usr/include/boost/range/detail/join_iterator.hpp	/^class join_iterator_begin_tag {};$/;"	c	namespace:boost::range_detail
join_iterator_end_tag	/usr/include/boost/range/detail/join_iterator.hpp	/^class join_iterator_end_tag {};$/;"	c	namespace:boost::range_detail
join_iterator_link	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator_link() \/* = delete *\/ ;$/;"	p	struct:boost::range_detail::join_iterator_link	access:private	signature:()
join_iterator_link	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator_link(Iterator1 last1, Iterator2 first2)$/;"	f	struct:boost::range_detail::join_iterator_link	access:public	signature:(Iterator1 last1, Iterator2 first2)
join_iterator_link	/usr/include/boost/range/detail/join_iterator.hpp	/^struct join_iterator_link$/;"	s	namespace:boost::range_detail
join_iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator_union() {}$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:()
join_iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator_union(unsigned int \/*selected*\/, const iterator1_t& it1, const iterator2_t& it2) : m_it1(it1), m_it2(it2) {}$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:(unsigned int , const iterator1_t& it1, const iterator2_t& it2)
join_iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^    join_iterator_union(unsigned int selected, const iterator1_t& it1, const iterator2_t& it2)$/;"	f	class:boost::range_detail::join_iterator_union	access:public	signature:(unsigned int selected, const iterator1_t& it1, const iterator2_t& it2)
join_iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^class join_iterator_union$/;"	c	namespace:boost::range_detail
join_iterator_union	/usr/include/boost/range/detail/join_iterator.hpp	/^class join_iterator_union<Iterator, Iterator, Reference>$/;"	c	namespace:boost::range_detail
joined_range	/usr/include/boost/range/join.hpp	/^    joined_range(SinglePassRange1& rng1, SinglePassRange2& rng2)$/;"	f	class:boost::range::joined_range	access:public	signature:(SinglePassRange1& rng1, SinglePassRange2& rng2)
joined_range	/usr/include/boost/range/join.hpp	/^class joined_range$/;"	c	namespace:boost::range	inherits:range_detail::joined_type::type
joined_type	/usr/include/boost/range/join.hpp	/^class joined_type$/;"	c	namespace:boost::range_detail
k_citer_t	/usr/include/boost/range/atl.hpp	/^            typedef k_val_t const *k_citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
k_miter_t	/usr/include/boost/range/atl.hpp	/^            typedef k_val_t *k_miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
k_val_t	/usr/include/boost/range/atl.hpp	/^            typedef TKey k_val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
key_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CString key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
key_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
key_t	/usr/include/boost/range/mfc.hpp	/^            typedef void *key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
keys	/usr/include/boost/range/adaptor/map.hpp	/^        keys(const StdPairRange& rng)$/;"	f	namespace:boost::adaptors	signature:(const StdPairRange& rng)
last1	/usr/include/boost/range/detail/join_iterator.hpp	/^    Iterator1 last1;$/;"	m	struct:boost::range_detail::join_iterator_link	access:public
length	/usr/include/boost/range/as_literal.hpp	/^        inline std::size_t length( const char* s )$/;"	f	namespace:boost::range_detail	signature:( const char* s )
length	/usr/include/boost/range/as_literal.hpp	/^        inline std::size_t length( const wchar_t* s )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* s )
length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static size_type length( const A& )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& )
length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static size_type length( const A& a )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& a )
less_or_equal_than	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool less_or_equal_than( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
less_than	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool less_than( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
lexicographical_compare	/usr/include/boost/range/algorithm/lexicographical_compare.hpp	/^inline bool lexicographical_compare(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2)
lexicographical_compare	/usr/include/boost/range/algorithm/lexicographical_compare.hpp	/^inline bool lexicographical_compare(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)
link_t	/usr/include/boost/range/detail/join_iterator.hpp	/^    typedef join_iterator_link<Iterator1, Iterator2> link_t;$/;"	t	class:boost::range_detail::join_iterator	access:private
list_functions	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_functions$/;"	s	namespace:boost::range_detail_microsoft
list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        explicit list_iterator()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:()
list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        explicit list_iterator(ListT& lst, POSITION pos) :$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:(ListT& lst, POSITION pos)
list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        list_iterator(list_iterator<ListT_, Value_, Reference_, Traversal_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:(list_iterator<ListT_, Value_, Reference_, Traversal_> const& other)
list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_iterator_super::type
list_iterator_super	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
lower_bound	/usr/include/boost/range/algorithm/lower_bound.hpp	/^lower_bound( ForwardRange& rng, Value val )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Value val )
lower_bound	/usr/include/boost/range/algorithm/lower_bound.hpp	/^lower_bound( ForwardRange& rng, Value val, SortPredicate pred )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Value val, SortPredicate pred )
lower_bound	/usr/include/boost/range/algorithm/lower_bound.hpp	/^lower_bound( const ForwardRange& rng, Value val )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Value val )
lower_bound	/usr/include/boost/range/algorithm/lower_bound.hpp	/^lower_bound( const ForwardRange& rng, Value val, SortPredicate pred )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Value val, SortPredicate pred )
m_Begin	/usr/include/boost/range/iterator_range_core.hpp	/^            IteratorT m_Begin;$/;"	m	class:boost::iterator_range	access:private
m_End	/usr/include/boost/range/iterator_range_core.hpp	/^            IteratorT m_End;$/;"	m	class:boost::iterator_range	access:private
m_buffer	/usr/include/boost/range/detail/any_iterator.hpp	/^            buffer_type m_buffer;$/;"	m	class:boost::range_detail::any_iterator	access:private
m_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        boost::array<char, StackBufferSize> m_buffer;$/;"	m	class:boost::any_iterator_buffer	access:private
m_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        boost::array<char, StackBufferSize> m_buffer;$/;"	m	class:boost::any_iterator_stack_only_buffer	access:private
m_first	/usr/include/boost/range/adaptor/strided.hpp	/^            base_iterator m_first;$/;"	m	class:boost::range_detail::strided_iterator	access:private
m_first	/usr/include/boost/range/irange.hpp	/^            value_type m_first;$/;"	m	class:boost::range_detail::integer_iterator_with_step	access:private
m_from	/usr/include/boost/range/adaptor/replaced.hpp	/^            Value m_from;$/;"	m	class:boost::range_detail::replace_value	access:private
m_impl	/usr/include/boost/range/detail/any_iterator.hpp	/^            abstract_base_type* m_impl;$/;"	m	class:boost::range_detail::any_iterator	access:private
m_index	/usr/include/boost/range/adaptor/indexed.hpp	/^            index_type m_index;$/;"	m	class:boost::range_detail::indexed_iterator	access:private
m_index	/usr/include/boost/range/adaptor/strided.hpp	/^            difference_type m_index;$/;"	m	class:boost::range_detail::strided_iterator	access:private
m_it	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            WrappedIterator m_it;$/;"	m	class:boost::range_detail::any_bidirectional_iterator_wrapper	access:private
m_it	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            WrappedIterator m_it;$/;"	m	class:boost::range_detail::any_forward_iterator_wrapper	access:private
m_it	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            WrappedIterator m_it;$/;"	m	class:boost::range_detail::any_random_access_iterator_wrapper	access:private
m_it	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            WrappedIterator m_it;$/;"	m	class:boost::range_detail::any_single_pass_iterator_wrapper	access:private
m_it	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            wrapped_type m_it;$/;"	m	class:boost::range_detail::any_incrementable_iterator_wrapper	access:private
m_it	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator1_t m_it;$/;"	m	class:boost::range_detail::join_iterator_union	access:private
m_it	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator_union m_it;$/;"	m	class:boost::range_detail::join_iterator	access:private
m_it1	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator1_t m_it1;$/;"	m	class:boost::range_detail::join_iterator_union	access:private
m_it2	/usr/include/boost/range/detail/join_iterator.hpp	/^    iterator2_t m_it2;$/;"	m	class:boost::range_detail::join_iterator_union	access:private
m_key	/usr/include/boost/range/mfc.hpp	/^        KeyT m_key; MappedT m_mapped;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
m_last	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            iter_t m_last;$/;"	m	class:boost::range_detail::skip_iterator	access:public
m_last	/usr/include/boost/range/adaptor/strided.hpp	/^            base_iterator m_last;$/;"	m	class:boost::range_detail::strided_iterator	access:private
m_link	/usr/include/boost/range/detail/join_iterator.hpp	/^    link_t m_link;$/;"	m	class:boost::range_detail::join_iterator	access:private
m_mapped	/usr/include/boost/range/mfc.hpp	/^        KeyT m_key; MappedT m_mapped;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
m_parr	/usr/include/boost/range/mfc.hpp	/^        ArrayT *m_parr;$/;"	m	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
m_plst	/usr/include/boost/range/detail/microsoft.hpp	/^        ListT *m_plst;$/;"	m	struct:boost::range_detail_microsoft::list_iterator	access:private
m_pmap	/usr/include/boost/range/mfc.hpp	/^        MapT  *m_pmap;$/;"	m	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
m_pmap	/usr/include/boost/range/mfc.hpp	/^        MapT const *m_pmap;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
m_pos	/usr/include/boost/range/detail/microsoft.hpp	/^        POSITION m_pos;$/;"	m	struct:boost::range_detail_microsoft::list_iterator	access:private
m_pos	/usr/include/boost/range/mfc.hpp	/^        POSITION m_pos, m_posNext;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
m_posNext	/usr/include/boost/range/mfc.hpp	/^        POSITION m_pos, m_posNext;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
m_pp	/usr/include/boost/range/mfc.hpp	/^        PairT *m_pp;$/;"	m	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
m_pred	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            Pred  m_pred;$/;"	m	class:boost::range_detail::replace_value_if	access:private
m_pred	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            Pred m_pred;$/;"	m	class:boost::range_detail::replace_if_holder	access:private
m_ptr	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        char* m_ptr;$/;"	m	class:boost::any_iterator_buffer	access:private
m_ptr	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        char* m_ptr;$/;"	m	class:boost::any_iterator_heap_only_buffer	access:private
m_range	/usr/include/boost/range/concepts.hpp	/^       T* m_range;$/;"	m	struct:boost::SinglePassRangeConcept	access:private
m_section	/usr/include/boost/range/detail/join_iterator.hpp	/^    unsigned int m_section;$/;"	m	class:boost::range_detail::join_iterator	access:private
m_step	/usr/include/boost/range/irange.hpp	/^            value_type m_step;$/;"	m	class:boost::range_detail::integer_iterator_with_step	access:private
m_step_size	/usr/include/boost/range/irange.hpp	/^            difference_type m_step_size;$/;"	m	class:boost::range_detail::integer_iterator_with_step	access:private
m_stride	/usr/include/boost/range/adaptor/strided.hpp	/^            difference_type m_stride;$/;"	m	class:boost::range_detail::strided_iterator	access:private
m_to	/usr/include/boost/range/adaptor/replaced.hpp	/^            Value m_to;$/;"	m	class:boost::range_detail::replace_value	access:private
m_to	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            T m_to;$/;"	m	class:boost::range_detail::replace_if_holder	access:private
m_to	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            Value m_to;$/;"	m	class:boost::range_detail::replace_value_if	access:private
m_value	/usr/include/boost/range/irange.hpp	/^            value_type m_value;$/;"	m	class:boost::range_detail::integer_iterator	access:private
make_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& make_heap(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
make_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& make_heap(RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, Compare comp_pred)
make_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& make_heap(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
make_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& make_heap(const RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, Compare comp_pred)
make_iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        make_iterator_range( ForwardRange& r )$/;"	f	namespace:boost	signature:( ForwardRange& r )
make_iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        make_iterator_range( IteratorT Begin, IteratorT End )$/;"	f	namespace:boost	signature:( IteratorT Begin, IteratorT End )
make_iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        make_iterator_range( Range& r )$/;"	f	namespace:boost	signature:( Range& r )
make_iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        make_iterator_range( Range& r,$/;"	f	namespace:boost	signature:( Range& r, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_begin, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_end )
make_iterator_range	/usr/include/boost/range/iterator_range_core.hpp	/^        make_iterator_range( const ForwardRange& r )$/;"	f	namespace:boost	signature:( const ForwardRange& r )
make_range	/usr/include/boost/range/as_literal.hpp	/^        make_range( T& r, long )$/;"	f	namespace:boost::range_detail	signature:( T& r, long )
make_range	/usr/include/boost/range/as_literal.hpp	/^        make_range( T* const r, bool )$/;"	f	namespace:boost::range_detail	signature:( T* const r, bool )
make_range_impl	/usr/include/boost/range/iterator_range_core.hpp	/^            make_range_impl( Range& r,$/;"	f	namespace:boost::iterator_range_detail	signature:( Range& r, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_begin, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_end )
make_strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^        make_strided_iterator(BaseIterator first, BaseIterator it,$/;"	f	namespace:boost::range_detail	signature:(BaseIterator first, BaseIterator it, BaseIterator last, Difference stride)
map_keys	/usr/include/boost/range/adaptor/map.hpp	/^            const range_detail::map_keys_forwarder map_keys =$/;"	m	namespace:boost::adaptors::__anon4
map_keys_forwarder	/usr/include/boost/range/adaptor/map.hpp	/^        struct map_keys_forwarder {};$/;"	s	namespace:boost::range_detail
map_values	/usr/include/boost/range/adaptor/map.hpp	/^            const range_detail::map_values_forwarder map_values =$/;"	m	namespace:boost::adaptors::__anon4
map_values_forwarder	/usr/include/boost/range/adaptor/map.hpp	/^        struct map_values_forwarder {};$/;"	s	namespace:boost::range_detail
mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CObject *mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef void *mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
max_element	/usr/include/boost/range/algorithm/max_element.hpp	/^max_element(ForwardRange& rng)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng)
max_element	/usr/include/boost/range/algorithm/max_element.hpp	/^max_element(ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, BinaryPredicate pred)
max_element	/usr/include/boost/range/algorithm/max_element.hpp	/^max_element(const ForwardRange& rng)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng)
max_element	/usr/include/boost/range/algorithm/max_element.hpp	/^max_element(const ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, BinaryPredicate pred)
merge	/usr/include/boost/range/algorithm/merge.hpp	/^inline OutputIterator merge(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out)
merge	/usr/include/boost/range/algorithm/merge.hpp	/^inline OutputIterator merge(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryPredicate pred)
meta	/usr/include/boost/range/atl.hpp	/^        struct meta$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
meta	/usr/include/boost/range/mfc.hpp	/^        struct meta$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
mfc_cpair_map_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_cpair_map_functions$/;"	s	namespace:boost::range_detail_microsoft
mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_cpair_map_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:()
mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_cpair_map_iterator(MapT& map, PairT *pp) :$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:(MapT& map, PairT *pp)
mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_cpair_map_iterator(mfc_cpair_map_iterator<MapT_, PairT_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:(mfc_cpair_map_iterator<MapT_, PairT_> const& other)
mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_cpair_map_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_pget_map_iterator_super::type
mfc_map_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_functions$/;"	s	namespace:boost::range_detail_microsoft
mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:()
mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator(MapT const& map) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(MapT const& map)
mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator(MapT const& map, POSITION pos) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(MapT const& map, POSITION pos)
mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_map_iterator(mfc_map_iterator<MapT_, KeyT_, MappedT_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(mfc_map_iterator<MapT_, KeyT_, MappedT_> const& other)
mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_iterator_super::type
mfc_map_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
mfc_pget_map_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_pget_map_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
mfc_ptr_array_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_functions$/;"	s	namespace:boost::range_detail_microsoft
mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_ptr_array_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:()
mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_ptr_array_iterator(ArrayT& arr, INT_PTR index) :$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:(ArrayT& arr, INT_PTR index)
mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_ptr_array_iterator(mfc_ptr_array_iterator<ArrayT_, PtrType_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:(mfc_ptr_array_iterator<ArrayT_, PtrType_> const& other)
mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_iterator_super::type
mfc_ptr_array_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
min_element	/usr/include/boost/range/algorithm/min_element.hpp	/^min_element(ForwardRange& rng)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng)
min_element	/usr/include/boost/range/algorithm/min_element.hpp	/^min_element(ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, BinaryPredicate pred)
min_element	/usr/include/boost/range/algorithm/min_element.hpp	/^min_element(const ForwardRange& rng)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng)
min_element	/usr/include/boost/range/algorithm/min_element.hpp	/^min_element(const ForwardRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, BinaryPredicate pred)
mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(SinglePassRange1& rng1, SinglePassRange2 & rng2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, SinglePassRange2 & rng2)
mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(SinglePassRange1& rng1, SinglePassRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, SinglePassRange2& rng2, BinaryPredicate pred)
mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(SinglePassRange1& rng1, const SinglePassRange2 & rng2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, const SinglePassRange2 & rng2)
mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)
mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(const SinglePassRange1& rng1, SinglePassRange2& rng2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, SinglePassRange2& rng2)
mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(const SinglePassRange1& rng1, SinglePassRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, SinglePassRange2& rng2, BinaryPredicate pred)
mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(const SinglePassRange1& rng1, const SinglePassRange2& rng2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2)
mismatch	/usr/include/boost/range/algorithm/mismatch.hpp	/^mismatch(const SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, BinaryPredicate pred)
mismatch_impl	/usr/include/boost/range/algorithm/mismatch.hpp	/^        mismatch_impl(SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:(SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2)
mismatch_impl	/usr/include/boost/range/algorithm/mismatch.hpp	/^        mismatch_impl(SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:(SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2, BinaryPredicate pred)
miter_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t *, val_t *> miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
miter_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t> miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
miter_t	/usr/include/boost/range/atl.hpp	/^            typedef val_t *miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
miter_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename range_detail_microsoft::mutable_iterator_of<T>::type miter_t;$/;"	t	struct:boost::range_detail_microsoft::size_type_of	access:public
miter_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename compatible_mutable_iterator<BaseClass>::type miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
move_to_next_valid	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            void move_to_next_valid()$/;"	f	class:boost::range_detail::skip_iterator	access:public	signature:()
mutable_	/usr/include/boost/range/detail/microsoft.hpp	/^    struct mutable_ :$/;"	s	namespace:boost::range_detail_microsoft	inherits:disable_if
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef BaseType const *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef OLECHAR *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef indirect_iterator<miter_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef typename X::PXSTR mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef val_t *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef zip_iterator< tuple<k_miter_t, v_miter_t> > mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef TCHAR *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, ::CObject *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, val_t * const, val_t * const> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, val_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, void *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_cpair_map_iterator<X, pair_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_map_iterator<X, KeyPtrType, MappedPtrType> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_map_iterator<X, key_t, mapped_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X, CObject *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X, void *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef transform_iterator<fun<X>, miter_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef val_t *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct mutable_iterator_of$/;"	s	namespace:boost::range_detail_microsoft
n	/usr/include/boost/range/concepts.hpp	/^             BOOST_DEDUCED_TYPENAME RandomAccessIteratorConcept::difference_type n;$/;"	m	struct:boost::range_detail::RandomAccessIteratorConcept	access:private
next_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool next_permutation(BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng)
next_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool next_permutation(BidirectionalRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng, Compare comp_pred)
next_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool next_permutation(const BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng)
next_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool next_permutation(const BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, Compare comp_pred)
no_type	/usr/include/boost/range/size_type.hpp	/^            typedef char no_type;$/;"	t	class:boost::detail::has_size_type	access:private
nth_element	/usr/include/boost/range/algorithm/nth_element.hpp	/^inline RandomAccessRange& nth_element(RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type nth)
nth_element	/usr/include/boost/range/algorithm/nth_element.hpp	/^inline RandomAccessRange& nth_element(RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type nth, BinaryPredicate sort_pred)
nth_element	/usr/include/boost/range/algorithm/nth_element.hpp	/^inline const RandomAccessRange& nth_element(const RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type nth)
nth_element	/usr/include/boost/range/algorithm/nth_element.hpp	/^inline const RandomAccessRange& nth_element(const RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type nth, BinaryPredicate sort_pred)
operator !	/usr/include/boost/range/iterator_range_core.hpp	/^            bool operator!() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
operator !=	/usr/include/boost/range/iterator_range_core.hpp	/^            bool operator!=( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
operator !=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator!=( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
operator !=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator!=( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
operator !=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator!=( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
operator !=	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator!=( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
operator &	/usr/include/boost/range/combine.hpp	/^        operator&( combine_tag, Rng& r )$/;"	f	namespace:boost::range_detail	signature:( combine_tag, Rng& r )
operator &	/usr/include/boost/range/combine.hpp	/^        operator&( combine_tag, const Rng& r )$/;"	f	namespace:boost::range_detail	signature:( combine_tag, const Rng& r )
operator &	/usr/include/boost/range/combine.hpp	/^        operator&( const zip_rng<R1,R2,R3,R4,R5>& zip,$/;"	f	namespace:boost::range_detail	signature:( const zip_rng<R1,R2,R3,R4,R5>& zip, Rng& r )
operator ()	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            Holder<T, U> operator()( T t, U u ) const$/;"	f	struct:boost::range_detail::forwarder2TU	access:public	signature:( T t, U u ) const
operator ()	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            Holder<T> operator()( T t ) const$/;"	f	struct:boost::range_detail::forwarder	access:public	signature:( T t ) const
operator ()	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            Holder<T> operator()( T t, T u ) const$/;"	f	struct:boost::range_detail::forwarder2	access:public	signature:( T t, T u ) const
operator ()	/usr/include/boost/range/adaptor/map.hpp	/^            result_type operator()( argument_type r ) const$/;"	f	struct:boost::range_detail::select_first	access:public	signature:( argument_type r ) const
operator ()	/usr/include/boost/range/adaptor/map.hpp	/^            result_type operator()( argument_type r ) const$/;"	f	struct:boost::range_detail::select_second_const	access:public	signature:( argument_type r ) const
operator ()	/usr/include/boost/range/adaptor/map.hpp	/^            result_type operator()( argument_type r ) const$/;"	f	struct:boost::range_detail::select_second_mutable	access:public	signature:( argument_type r ) const
operator ()	/usr/include/boost/range/adaptor/replaced.hpp	/^            const Value& operator()(const Value& x) const$/;"	f	class:boost::range_detail::replace_value	access:public	signature:(const Value& x) const
operator ()	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            const Value& operator()(const Value& x) const$/;"	f	class:boost::range_detail::replace_value_if	access:public	signature:(const Value& x) const
operator ()	/usr/include/boost/range/adaptor/tokenized.hpp	/^            operator()( const Regex& re, $/;"	f	struct:boost::range_detail::regex_forwarder	access:public	signature:( const Regex& re, const Submatch& sub, regex_constants::match_flag_type f = regex_constants::match_default ) const
operator ()	/usr/include/boost/range/adaptor/tokenized.hpp	/^            operator()( const Regex& re, $/;"	f	struct:boost::range_detail::regex_forwarder	access:public	signature:( const Regex& re, int submatch = 0, regex_constants::match_flag_type f = regex_constants::match_default ) const
operator ()	/usr/include/boost/range/adaptor/uniqued.hpp	/^            bool operator()( const T& l, const T& r ) const$/;"	f	struct:boost::range_detail::unique_not_equal_to	access:public	signature:( const T& l, const T& r ) const
operator ()	/usr/include/boost/range/iterator_range_core.hpp	/^           abstract_value_type operator()( difference_type at ) const$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type at ) const
operator ()	/usr/include/boost/range/mfc.hpp	/^            result_type operator()(PtrType_ p) const$/;"	f	struct:boost::range_detail_microsoft::customization::fun	access:public	signature:(PtrType_ p) const
operator *	/usr/include/boost/range/detail/any_iterator.hpp	/^            operator*() const$/;"	f	class:boost::detail::postfix_increment_proxy	access:public	signature:() const
operator *	/usr/include/boost/range/detail/any_iterator.hpp	/^            operator*() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
operator <	/usr/include/boost/range/iterator_range_core.hpp	/^           bool operator<( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
operator <	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
operator <	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
operator <	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
operator <	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator<( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
operator <<	/usr/include/boost/range/iterator_range_io.hpp	/^        inline std::basic_ostream<Elem,Traits>& operator<<( $/;"	f	namespace:boost	signature:( std::basic_ostream<Elem, Traits>& Os, const iterator_range<IteratorT>& r )
operator <=	/usr/include/boost/range/iterator_range_core.hpp	/^           bool operator<=( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
operator <=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<=( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
operator <=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<=( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
operator <=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator<=( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
operator =	/usr/include/boost/range/adaptor/replaced.hpp	/^            void operator=(const replace_holder&);$/;"	p	class:boost::range_detail::replace_holder	access:private	signature:(const replace_holder&)
operator =	/usr/include/boost/range/adaptor/tokenized.hpp	/^            void operator=(const regex_holder&);$/;"	p	struct:boost::range_detail::regex_holder	access:private	signature:(const regex_holder&)
operator =	/usr/include/boost/range/detail/any_iterator.hpp	/^            T const& operator=(T const& x) const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(T const& x) const
operator =	/usr/include/boost/range/detail/any_iterator.hpp	/^            T& operator=(T& x) const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(T& x) const
operator =	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator& operator=(const any_iterator& other)$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:(const any_iterator& other)
operator =	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        void operator=(const any_iterator_buffer&);$/;"	p	class:boost::any_iterator_buffer	access:private	signature:(const any_iterator_buffer&)
operator =	/usr/include/boost/range/detail/safe_bool.hpp	/^    void operator=(const safe_bool&);$/;"	p	class:boost::range_detail::safe_bool	access:private	signature:(const safe_bool&)
operator =	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range& operator=( ForwardRange& r )$/;"	f	class:boost::iterator_range	access:public	signature:( ForwardRange& r )
operator =	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range& operator=( const ForwardRange& r )$/;"	f	class:boost::iterator_range	access:public	signature:( const ForwardRange& r )
operator =	/usr/include/boost/range/iterator_range_core.hpp	/^            iterator_range& operator=( const iterator_range<Iterator>& r )$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range<Iterator>& r )
operator =	/usr/include/boost/range/iterator_range_core.hpp	/^            this_type& operator=( const this_type& r )$/;"	f	class:boost::iterator_range	access:public	signature:( const this_type& r )
operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( ForwardRange2& r )$/;"	f	class:boost::sub_range	access:public	signature:( ForwardRange2& r )
operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( const ForwardRange2& r )$/;"	f	class:boost::sub_range	access:public	signature:( const ForwardRange2& r )
operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( const sub_range& r )$/;"	f	class:boost::sub_range	access:public	signature:( const sub_range& r )
operator ==	/usr/include/boost/range/iterator_range_core.hpp	/^            bool operator==( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
operator ==	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator==( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
operator ==	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator==( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
operator ==	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator==( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
operator ==	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator==( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
operator >	/usr/include/boost/range/iterator_range_core.hpp	/^           bool operator>( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
operator >	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
operator >	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
operator >	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
operator >=	/usr/include/boost/range/iterator_range_core.hpp	/^           bool operator>=( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
operator >=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>=( const ForwardRange& l,$/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
operator >=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>=( const iterator_range<Iterator1T>& l,$/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
operator >=	/usr/include/boost/range/iterator_range_core.hpp	/^        inline bool operator>=( const iterator_range<IteratorT>& l,$/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
operator []	/usr/include/boost/range/iterator_range_core.hpp	/^           reference operator[]( difference_type at ) const$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type at ) const
operator []	/usr/include/boost/range/sub_range.hpp	/^        const_reference operator[]( difference_type sz ) const$/;"	f	class:boost::sub_range	access:public	signature:( difference_type sz ) const
operator []	/usr/include/boost/range/sub_range.hpp	/^        reference operator[]( difference_type sz )$/;"	f	class:boost::sub_range	access:public	signature:( difference_type sz )
operator any_iterator_type const&	/usr/include/boost/range/detail/any_iterator.hpp	/^            operator any_iterator_type const&() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/range/iterator_range_core.hpp	/^            operator unspecified_bool_type() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
operator value_type&	/usr/include/boost/range/detail/any_iterator.hpp	/^            operator value_type&() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
operator |	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        operator|( ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( ForwardRng& r, const adjacent_excl_holder<BinPredicate>& f )
operator |	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        operator|( ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( ForwardRng& r, const adjacent_holder<BinPredicate>& f )
operator |	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        operator|( const ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( const ForwardRng& r, const adjacent_excl_holder<BinPredicate>& f )
operator |	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        operator|( const ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( const ForwardRng& r, const adjacent_holder<BinPredicate>& f )
operator |	/usr/include/boost/range/adaptor/copied.hpp	/^        operator|( const CopyableRandomAccessRng& r, const copied& f )$/;"	f	namespace:boost::adaptors	signature:( const CopyableRandomAccessRng& r, const copied& f )
operator |	/usr/include/boost/range/adaptor/filtered.hpp	/^        operator|( InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( InputRng& r, const filter_holder<Predicate>& f )
operator |	/usr/include/boost/range/adaptor/filtered.hpp	/^        operator|( const InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( const InputRng& r, const filter_holder<Predicate>& f )
operator |	/usr/include/boost/range/adaptor/indexed.hpp	/^        operator|( SinglePassRange& r,$/;"	f	namespace:boost::adaptors	signature:( SinglePassRange& r, const indexed& f )
operator |	/usr/include/boost/range/adaptor/indexed.hpp	/^        operator|( const SinglePassRange& r,$/;"	f	namespace:boost::adaptors	signature:( const SinglePassRange& r, const indexed& f )
operator |	/usr/include/boost/range/adaptor/indirected.hpp	/^        operator|( InputRng& r, indirect_forwarder )$/;"	f	namespace:boost::range_detail	signature:( InputRng& r, indirect_forwarder )
operator |	/usr/include/boost/range/adaptor/indirected.hpp	/^        operator|( const InputRng& r, indirect_forwarder )$/;"	f	namespace:boost::range_detail	signature:( const InputRng& r, indirect_forwarder )
operator |	/usr/include/boost/range/adaptor/map.hpp	/^        operator|( StdPairRng& r, map_values_forwarder )$/;"	f	namespace:boost::range_detail	signature:( StdPairRng& r, map_values_forwarder )
operator |	/usr/include/boost/range/adaptor/map.hpp	/^        operator|( const StdPairRng& r, map_keys_forwarder )$/;"	f	namespace:boost::range_detail	signature:( const StdPairRng& r, map_keys_forwarder )
operator |	/usr/include/boost/range/adaptor/map.hpp	/^        operator|( const StdPairRng& r, map_values_forwarder )$/;"	f	namespace:boost::range_detail	signature:( const StdPairRng& r, map_values_forwarder )
operator |	/usr/include/boost/range/adaptor/replaced.hpp	/^        operator|( InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( InputRng& r, const replace_holder<BOOST_DEDUCED_TYPENAME range_value<InputRng>::type>& f )
operator |	/usr/include/boost/range/adaptor/replaced.hpp	/^        operator|( const InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( const InputRng& r, const replace_holder<BOOST_DEDUCED_TYPENAME range_value<InputRng>::type>& f )
operator |	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        operator|( InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( InputRng& r, const replace_if_holder<Pred, BOOST_DEDUCED_TYPENAME range_value<InputRng>::type>& f )
operator |	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        operator|( const InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( const InputRng& r, const replace_if_holder<Pred, BOOST_DEDUCED_TYPENAME range_value<InputRng>::type>& f )
operator |	/usr/include/boost/range/adaptor/reversed.hpp	/^        operator|( BidirectionalRng& r, reverse_forwarder )$/;"	f	namespace:boost::range_detail	signature:( BidirectionalRng& r, reverse_forwarder )
operator |	/usr/include/boost/range/adaptor/reversed.hpp	/^        operator|( const BidirectionalRng& r, reverse_forwarder )$/;"	f	namespace:boost::range_detail	signature:( const BidirectionalRng& r, reverse_forwarder )
operator |	/usr/include/boost/range/adaptor/sliced.hpp	/^        operator|( RandomAccessRange& r, const sliced& f )$/;"	f	namespace:boost::adaptors	signature:( RandomAccessRange& r, const sliced& f )
operator |	/usr/include/boost/range/adaptor/sliced.hpp	/^        operator|( const RandomAccessRange& r, const sliced& f )$/;"	f	namespace:boost::adaptors	signature:( const RandomAccessRange& r, const sliced& f )
operator |	/usr/include/boost/range/adaptor/strided.hpp	/^        operator|(Rng& rng, const strided_holder<Difference>& stride)$/;"	f	namespace:boost::range_detail	signature:(Rng& rng, const strided_holder<Difference>& stride)
operator |	/usr/include/boost/range/adaptor/strided.hpp	/^        operator|(const Rng& rng, const strided_holder<Difference>& stride)$/;"	f	namespace:boost::range_detail	signature:(const Rng& rng, const strided_holder<Difference>& stride)
operator |	/usr/include/boost/range/adaptor/tokenized.hpp	/^        operator|( BidirectionalRng& r, $/;"	f	namespace:boost::range_detail	signature:( BidirectionalRng& r, const regex_holder<R,S,F>& f )
operator |	/usr/include/boost/range/adaptor/tokenized.hpp	/^        operator|( const BidirectionalRng& r, $/;"	f	namespace:boost::range_detail	signature:( const BidirectionalRng& r, const regex_holder<R,S,F>& f )
operator |	/usr/include/boost/range/adaptor/transformed.hpp	/^        operator|( InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( InputRng& r, const transform_holder<UnaryFunction>& f )
operator |	/usr/include/boost/range/adaptor/transformed.hpp	/^        operator|( const InputRng& r,$/;"	f	namespace:boost::range_detail	signature:( const InputRng& r, const transform_holder<UnaryFunction>& f )
operator |	/usr/include/boost/range/adaptor/type_erased.hpp	/^        operator|(SinglePassRange& rng,$/;"	f	namespace:boost::adaptors	signature:(SinglePassRange& rng, type_erased< Value , Traversal , Reference , Difference , Buffer >)
operator |	/usr/include/boost/range/adaptor/type_erased.hpp	/^        operator|(const SinglePassRange& rng,$/;"	f	namespace:boost::adaptors	signature:(const SinglePassRange& rng, type_erased< Value , Traversal , Reference , Difference , Buffer >)
operator |	/usr/include/boost/range/adaptor/uniqued.hpp	/^        operator|( ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( ForwardRng& r, unique_forwarder )
operator |	/usr/include/boost/range/adaptor/uniqued.hpp	/^        operator|( const ForwardRng& r,$/;"	f	namespace:boost::range_detail	signature:( const ForwardRng& r, unique_forwarder )
overwrite	/usr/include/boost/range/algorithm_ext/overwrite.hpp	/^inline void overwrite( const SinglePassRange1& from, SinglePassRange2& to )$/;"	f	namespace:boost::range	signature:( const SinglePassRange1& from, SinglePassRange2& to )
overwrite	/usr/include/boost/range/algorithm_ext/overwrite.hpp	/^inline void overwrite( const SinglePassRange1& from, const SinglePassRange2& to )$/;"	f	namespace:boost::range	signature:( const SinglePassRange1& from, const SinglePassRange2& to )
pack	/usr/include/boost/range/detail/range_return.hpp	/^        static type pack(BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type found,$/;"	f	struct:boost::range_return	access:public	signature:(BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type found, BidirectionalRange& rng)
pack	/usr/include/boost/range/detail/range_return.hpp	/^        static type pack(BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange>::type found,$/;"	f	struct:boost::range_return	access:public	signature:(BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange>::type found, SinglePassRange& rng)
pack	/usr/include/boost/range/detail/range_return.hpp	/^        static type pack(type found, BidirectionalRange& rng)$/;"	f	struct:boost::range_return	access:public	signature:(type found, BidirectionalRange& rng)
pack	/usr/include/boost/range/detail/range_return.hpp	/^        static type pack(type found, SinglePassRange& rng)$/;"	f	struct:boost::range_return	access:public	signature:(type found, SinglePassRange& rng)
pack	/usr/include/boost/range/detail/range_return.hpp	/^        static type pack(type found, SinglePassRange&)$/;"	f	struct:boost::range_return	access:public	signature:(type found, SinglePassRange&)
pair_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pair_container_traits$/;"	s	namespace:boost::algorithm::detail
pair_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pair_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
pair_t	/usr/include/boost/range/detail/common.hpp	/^                                                                  void >::type pair_t;$/;"	t	class:boost::range_detail::range	access:private
pair_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename X::CPair pair_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
partial_sort	/usr/include/boost/range/algorithm/partial_sort.hpp	/^inline RandomAccessRange& partial_sort(RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type middle)
partial_sort	/usr/include/boost/range/algorithm/partial_sort.hpp	/^inline RandomAccessRange& partial_sort(RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type middle, BinaryPredicate sort_pred)
partial_sort	/usr/include/boost/range/algorithm/partial_sort.hpp	/^inline const RandomAccessRange& partial_sort(const RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type middle)
partial_sort	/usr/include/boost/range/algorithm/partial_sort.hpp	/^inline const RandomAccessRange& partial_sort(const RandomAccessRange& rng,$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type middle, BinaryPredicate sort_pred)
partial_sort_copy	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	/^partial_sort_copy(const SinglePassRange& rng1, RandomAccessRange& rng2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng1, RandomAccessRange& rng2)
partial_sort_copy	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	/^partial_sort_copy(const SinglePassRange& rng1, RandomAccessRange& rng2,$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng1, RandomAccessRange& rng2, BinaryPredicate pred)
partial_sort_copy	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	/^partial_sort_copy(const SinglePassRange& rng1, const RandomAccessRange& rng2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng1, const RandomAccessRange& rng2)
partial_sort_copy	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	/^partial_sort_copy(const SinglePassRange& rng1, const RandomAccessRange& rng2,$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng1, const RandomAccessRange& rng2, BinaryPredicate pred)
partial_sum	/usr/include/boost/range/numeric.hpp	/^    inline OutputIterator partial_sum ( const SinglePassRange& rng, OutputIterator result,$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, OutputIterator result, BinaryOperation op )
partial_sum	/usr/include/boost/range/numeric.hpp	/^    inline OutputIterator partial_sum ( const SinglePassRange& rng,$/;"	f	namespace:boost	signature:( const SinglePassRange& rng, OutputIterator result )
partition	/usr/include/boost/range/algorithm/partition.hpp	/^partition(ForwardRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, UnaryPredicate pred)
partition	/usr/include/boost/range/algorithm/partition.hpp	/^partition(const ForwardRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, UnaryPredicate pred)
pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CAdapt<T> > :$/;"	s	namespace:boost	inherits:pointee
pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CAutoPtr<E> > :$/;"	s	namespace:boost	inherits:mpl::identity
pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CComPtr<T> > :$/;"	s	namespace:boost	inherits:mpl::identity
pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CComQIPtr<T, piid> > :$/;"	s	namespace:boost	inherits:mpl::identity
pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CHeapPtr<E, Allocator> > :$/;"	s	namespace:boost	inherits:mpl::identity
pointer	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename iterator_pointer<any_iterator_type>::type pointer;$/;"	t	class:boost::detail::postfix_increment_proxy	access:public
pointer	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename iterator_pointer<any_iterator_type>::type pointer;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:public
pointer_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pointer_container_traits$/;"	s	namespace:boost::algorithm::detail
pointer_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pointer_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
pop_back	/usr/include/boost/range/iterator_range_core.hpp	/^           void pop_back()$/;"	f	class:boost::iterator_range	access:public	signature:()
pop_front	/usr/include/boost/range/iterator_range_core.hpp	/^           void pop_front()$/;"	f	class:boost::iterator_range	access:public	signature:()
pop_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& pop_heap(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
pop_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& pop_heap(RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, Compare comp_pred)
pop_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& pop_heap(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
pop_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& pop_heap(const RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, Compare comp_pred)
postfix_increment_proxy	/usr/include/boost/range/detail/any_iterator.hpp	/^            explicit postfix_increment_proxy(any_iterator_type const& x)$/;"	f	class:boost::detail::postfix_increment_proxy	access:public	signature:(any_iterator_type const& x)
postfix_increment_proxy	/usr/include/boost/range/detail/any_iterator.hpp	/^        class postfix_increment_proxy<$/;"	c	namespace:boost::detail
pred	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            const Pred& pred() const { return m_pred; }$/;"	f	class:boost::range_detail::replace_if_holder	access:public	signature:() const
pred_t	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            typedef Pred pred_t;$/;"	t	class:boost::range_detail::skip_iterator	access:public
prev_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool prev_permutation(BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng)
prev_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool prev_permutation(BidirectionalRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng, Compare comp_pred)
prev_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool prev_permutation(const BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng)
prev_permutation	/usr/include/boost/range/algorithm/permutation.hpp	/^inline bool prev_permutation(const BidirectionalRange& rng,$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, Compare comp_pred)
ptr	/usr/include/boost/range/detail/common.hpp	/^            static C  ptr;$/;"	m	struct:boost::range_detail::range_helper	access:public
pts	/usr/include/boost/range/detail/const_iterator.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_size_type_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
pts	/usr/include/boost/range/detail/difference_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_difference_type_	access:public
pts	/usr/include/boost/range/detail/iterator.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
pts	/usr/include/boost/range/detail/size_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_size_type_	access:public
pts	/usr/include/boost/range/detail/value_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
push_back	/usr/include/boost/range/algorithm_ext/push_back.hpp	/^inline Container& push_back( Container& on, const Range& from )$/;"	f	namespace:boost::range	signature:( Container& on, const Range& from )
push_front	/usr/include/boost/range/algorithm_ext/push_front.hpp	/^inline Container& push_front( Container& on, const Range& from )$/;"	f	namespace:boost::range	signature:( Container& on, const Range& from )
push_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& push_heap(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
push_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& push_heap(RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, Compare comp_pred)
push_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& push_heap(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
push_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& push_heap(const RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, Compare comp_pred)
random_shuffle	/usr/include/boost/range/algorithm/random_shuffle.hpp	/^inline RandomAccessRange& random_shuffle(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
random_shuffle	/usr/include/boost/range/algorithm/random_shuffle.hpp	/^inline RandomAccessRange& random_shuffle(RandomAccessRange& rng, Generator& gen)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, Generator& gen)
random_shuffle	/usr/include/boost/range/algorithm/random_shuffle.hpp	/^inline const RandomAccessRange& random_shuffle(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
random_shuffle	/usr/include/boost/range/algorithm/random_shuffle.hpp	/^inline const RandomAccessRange& random_shuffle(const RandomAccessRange& rng, Generator& gen)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, Generator& gen)
range	/usr/include/boost/range/algorithm/adjacent_find.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/binary_search.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/copy.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/copy_backward.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/count.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/count_if.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/equal.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/equal_range.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/fill.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/fill_n.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/find.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/find_end.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/find_first_of.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/find_if.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/for_each.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/generate.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/inplace_merge.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/lexicographical_compare.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/lower_bound.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/max_element.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/merge.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/min_element.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/mismatch.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/nth_element.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/partial_sort.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/partial_sort_copy.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/partition.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/permutation.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/random_shuffle.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/remove.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/remove_copy.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/remove_if.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/replace.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/replace_copy.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/replace_copy_if.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/replace_if.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/reverse.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/reverse_copy.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/rotate.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/rotate_copy.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/search.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/search_n.hpp	/^namespace range {$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/sort.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/stable_partition.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/stable_sort.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/transform.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/unique.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/unique_copy.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm/upper_bound.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm_ext/copy_n.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm_ext/erase.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm_ext/insert.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm_ext/iota.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm_ext/is_sorted.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm_ext/overwrite.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm_ext/push_back.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/algorithm_ext/push_front.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/detail/common.hpp	/^        class range$/;"	c	namespace:boost::range_detail
range	/usr/include/boost/range/istream_range.hpp	/^    namespace range$/;"	n	namespace:boost
range	/usr/include/boost/range/join.hpp	/^namespace range$/;"	n	namespace:boost
range_adl_barrier	/usr/include/boost/range/begin.hpp	/^    namespace range_adl_barrier$/;"	n	namespace:boost
range_adl_barrier	/usr/include/boost/range/begin.hpp	/^namespace range_adl_barrier$/;"	n	namespace:boost
range_adl_barrier	/usr/include/boost/range/detail/begin.hpp	/^    namespace range_adl_barrier$/;"	n	namespace:boost
range_adl_barrier	/usr/include/boost/range/detail/end.hpp	/^    namespace range_adl_barrier$/;"	n	namespace:boost
range_adl_barrier	/usr/include/boost/range/end.hpp	/^    namespace range_adl_barrier$/;"	n	namespace:boost
range_adl_barrier	/usr/include/boost/range/end.hpp	/^namespace range_adl_barrier$/;"	n	namespace:boost
range_begin	/usr/include/boost/range/begin.hpp	/^    inline Iterator range_begin( const std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>& p )
range_begin	/usr/include/boost/range/begin.hpp	/^    inline Iterator range_begin( std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( std::pair<Iterator,Iterator>& p )
range_begin	/usr/include/boost/range/begin.hpp	/^    range_begin( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
range_begin	/usr/include/boost/range/combine.hpp	/^        inline ::boost::tuples::null_type range_begin( ::boost::range_detail::void_& )$/;"	f	namespace:boost::range_detail	signature:( ::boost::range_detail::void_& )
range_begin	/usr/include/boost/range/combine.hpp	/^        inline ::boost::tuples::null_type range_begin( const ::boost::range_detail::void_& )$/;"	f	namespace:boost::range_detail	signature:( const ::boost::range_detail::void_& )
range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<array_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<std_container_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<std_pair_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<char_ptr_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_calculate_size	/usr/include/boost/range/size.hpp	/^        range_calculate_size(const SinglePassRange& rng)$/;"	f	namespace:boost::range_detail	signature:(const SinglePassRange& rng)
range_category	/usr/include/boost/range/category.hpp	/^    struct range_category : iterator_category< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_category
range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator : range_detail::extract_const_iterator<C>$/;"	s	namespace:boost	inherits:range_detail::extract_const_iterator
range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator< T[sz] >$/;"	s	namespace:boost
range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator< std::pair<Iterator,Iterator> >$/;"	s	namespace:boost
range_const_iterator	/usr/include/boost/range/detail/const_iterator.hpp	/^    class range_const_iterator$/;"	c	namespace:boost
range_const_iterator	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_const_iterator<T*>$/;"	s	namespace:boost
range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<array_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<std_container_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<std_pair_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<char_array_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_const_reverse_iterator	/usr/include/boost/range/const_reverse_iterator.hpp	/^    struct range_const_reverse_iterator : range_reverse_iterator<const C>$/;"	s	namespace:boost	inherits:range_reverse_iterator
range_detail	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/filtered.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/indexed.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/indirected.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/map.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/replaced.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/replaced_if.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/reversed.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/strided.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/tokenized.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/transformed.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/adaptor/uniqued.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/algorithm/equal.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/algorithm/mismatch.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/algorithm/search_n.hpp	/^namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/algorithm/transform.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/algorithm_ext/for_each.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/any_range.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/as_literal.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/begin.hpp	/^namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/combine.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/concepts.hpp	/^    namespace range_detail {$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/const_iterator.hpp	/^    namespace range_detail {$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/any_iterator.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/begin.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/common.hpp	/^    namespace range_detail $/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/const_iterator.hpp	/^    namespace range_detail $/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/demote_iterator_traversal_tag.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/detail_str.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/difference_type.hpp	/^    namespace range_detail $/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/empty.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/end.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/extract_optional_type.hpp	/^    namespace range_detail {$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/implementation_help.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/iterator.hpp	/^    namespace range_detail $/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/join_iterator.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/misc_concept.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/remove_extent.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/safe_bool.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/sfinae.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/size.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/size_type.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/value_type.hpp	/^    namespace range_detail $/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/vc6/end.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/vc6/size.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/end.hpp	/^namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/has_range_iterator.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/irange.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/join.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/mutable_iterator.hpp	/^    namespace range_detail {$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/size.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail_microsoft	/usr/include/boost/range/atl.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
range_detail_microsoft	/usr/include/boost/range/detail/microsoft.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
range_detail_microsoft	/usr/include/boost/range/mfc.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
range_detail_vc7_1	/usr/include/boost/range/iterator.hpp	/^    namespace range_detail_vc7_1$/;"	n	namespace:boost
range_difference	/usr/include/boost/range/detail/difference_type.hpp	/^    class range_difference$/;"	c	namespace:boost
range_difference	/usr/include/boost/range/difference_type.hpp	/^    struct range_difference : iterator_difference< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_difference
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<array_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<char_array_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<std_container_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<std_pair_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<array_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<char_ptr_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<std_container_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<std_pair_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/combine.hpp	/^        inline ::boost::tuples::null_type range_end( ::boost::range_detail::void_& )$/;"	f	namespace:boost::range_detail	signature:( ::boost::range_detail::void_& )
range_end	/usr/include/boost/range/combine.hpp	/^        inline ::boost::tuples::null_type range_end( const ::boost::range_detail::void_& )$/;"	f	namespace:boost::range_detail	signature:( const ::boost::range_detail::void_& )
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<char_array_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<char_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<wchar_t_array_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<array_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<std_container_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<std_pair_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<array_>  $/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<char_array_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<char_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<std_container_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<std_pair_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<wchar_t_array_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/end.hpp	/^        inline Iterator range_end( const std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>& p )
range_end	/usr/include/boost/range/end.hpp	/^        inline Iterator range_end( std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( std::pair<Iterator,Iterator>& p )
range_end	/usr/include/boost/range/end.hpp	/^        range_end( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
range_helper	/usr/include/boost/range/detail/common.hpp	/^        struct range_helper$/;"	s	namespace:boost::range_detail
range_iterator	/usr/include/boost/range/combine.hpp	/^    template<> struct range_iterator< ::boost::range_detail::void_ >$/;"	s	namespace:boost
range_iterator	/usr/include/boost/range/iterator.hpp	/^       struct range_iterator$/;"	s	namespace:boost::range_detail_vc7_1
range_iterator	/usr/include/boost/range/iterator.hpp	/^       struct range_iterator< C, void(T[]) >$/;"	s	namespace:boost::range_detail_vc7_1
range_iterator	/usr/include/boost/range/iterator.hpp	/^    struct range_iterator$/;"	s	namespace:boost
range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<char_array_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_ {$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<array_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<std_container_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<std_pair_>$/;"	s	namespace:boost::range_detail
range_mutable_iterator	/usr/include/boost/range/detail/iterator.hpp	/^    class range_mutable_iterator$/;"	c	namespace:boost
range_mutable_iterator	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_mutable_iterator<T*>$/;"	s	namespace:boost
range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator : range_detail::extract_iterator<C>$/;"	s	namespace:boost	inherits:range_detail::extract_iterator
range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator< T[sz] >$/;"	s	namespace:boost
range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator< std::pair<Iterator,Iterator> >$/;"	s	namespace:boost
range_pointer	/usr/include/boost/range/pointer.hpp	/^    struct range_pointer : iterator_pointer< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_pointer
range_reference	/usr/include/boost/range/reference.hpp	/^    struct range_reference : iterator_reference< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_reference
range_result_iterator	/usr/include/boost/range/result_iterator.hpp	/^    struct range_result_iterator : range_iterator<C>$/;"	s	namespace:boost	inherits:range_iterator
range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return$/;"	s	namespace:boost
range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< BidirectionalRange, return_begin_prior >$/;"	s	namespace:boost
range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< BidirectionalRange, return_prior >$/;"	s	namespace:boost
range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< BidirectionalRange, return_prior_end >$/;"	s	namespace:boost
range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_begin_end >$/;"	s	namespace:boost
range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_begin_found >$/;"	s	namespace:boost
range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_begin_next >$/;"	s	namespace:boost
range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_found >$/;"	s	namespace:boost
range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_found_end >$/;"	s	namespace:boost
range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_next >$/;"	s	namespace:boost
range_return	/usr/include/boost/range/detail/range_return.hpp	/^    struct range_return< SinglePassRange, return_next_end >$/;"	s	namespace:boost
range_return_value	/usr/include/boost/range/detail/range_return.hpp	/^    enum range_return_value$/;"	g	namespace:boost
range_reverse_iterator	/usr/include/boost/range/reverse_iterator.hpp	/^    struct range_reverse_iterator$/;"	s	namespace:boost
range_reverse_result_iterator	/usr/include/boost/range/reverse_result_iterator.hpp	/^    struct range_reverse_result_iterator : range_reverse_iterator<C>$/;"	s	namespace:boost	inherits:range_reverse_iterator
range_size	/usr/include/boost/range/detail/size_type.hpp	/^    class range_size$/;"	c	namespace:boost
range_size	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_size<T*>$/;"	s	namespace:boost
range_size	/usr/include/boost/range/size_type.hpp	/^        struct range_size$/;"	s	namespace:boost::detail
range_size	/usr/include/boost/range/size_type.hpp	/^        struct range_size<$/;"	s	namespace:boost::detail
range_size	/usr/include/boost/range/size_type.hpp	/^    struct range_size :$/;"	s	namespace:boost	inherits:detail::range_size
range_size	/usr/include/boost/range/size_type.hpp	/^    struct range_size<const T >$/;"	s	namespace:boost	inherits:detail::range_size
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<char_array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<std_container_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<std_pair_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<wchar_t_array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<char_array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<std_container_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<std_pair_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<wchar_t_array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<char_array_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/size_type.hpp	/^        struct range_size_type_$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/size_type.hpp	/^        struct range_size_type_<std_container_>$/;"	s	namespace:boost::range_detail
range_tag	/usr/include/boost/range/iterator_range_core.hpp	/^        struct range_tag { };$/;"	s	namespace:boost::iterator_range_detail
range_value	/usr/include/boost/range/detail/value_type.hpp	/^    class range_value$/;"	c	namespace:boost
range_value	/usr/include/boost/range/value_type.hpp	/^    struct range_value : iterator_value< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_value
range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<char_array_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<array_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<std_container_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<std_pair_>$/;"	s	namespace:boost::range_detail
raw_iterator	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_iterator<R>::type raw_iterator;$/;"	t	struct:boost::range_detail::adjacent_filtered_range	access:private
rbegin	/usr/include/boost/range/rbegin.hpp	/^rbegin( C& c )$/;"	f	namespace:boost	signature:( C& c )
re	/usr/include/boost/range/adaptor/tokenized.hpp	/^            const T&  re;$/;"	m	struct:boost::range_detail::regex_holder	access:public
ref_t	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type ref_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
ref_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
reference	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Reference reference;$/;"	t	class:boost::detail::postfix_increment_proxy	access:public
reference	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Reference reference;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:public
reference	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename base_type::reference reference;$/;"	t	class:boost::range_detail::any_iterator	access:public
reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef Reference reference;$/;"	t	struct:boost::range_detail::any_incrementable_iterator_interface	access:public
reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_bidirectional_iterator_interface<Reference, Buffer>::reference reference;$/;"	t	struct:boost::range_detail::any_random_access_iterator_interface	access:public
reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_forward_iterator_interface<Reference, Buffer>::reference reference;$/;"	t	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public
reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_incrementable_iterator_interface<Reference, Buffer>::reference reference;$/;"	t	struct:boost::range_detail::any_single_pass_iterator_interface	access:public
reference	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_single_pass_iterator_interface<Reference, Buffer>::reference reference;$/;"	t	struct:boost::range_detail::any_forward_iterator_interface	access:public
reference	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::reference reference;$/;"	t	class:boost::range_detail::integer_iterator	access:public
reference	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::reference reference;$/;"	t	class:boost::range_detail::integer_iterator_with_step	access:public
reference	/usr/include/boost/range/iterator_range_core.hpp	/^                iterator_reference<IteratorT>::type reference;$/;"	t	class:boost::iterator_range	access:public
reference	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base::reference                            reference;$/;"	t	class:boost::sub_range	access:public
reference_as_value_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            >::type reference_as_value_type;$/;"	t	struct:boost::range_detail::any_incrementable_iterator_interface	access:public
reference_as_value_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_bidirectional_iterator_interface<Reference, Buffer>::reference_as_value_type reference_as_value_type;$/;"	t	struct:boost::range_detail::any_random_access_iterator_interface	access:public
reference_as_value_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_forward_iterator_interface<Reference, Buffer>::reference_as_value_type reference_as_value_type;$/;"	t	struct:boost::range_detail::any_bidirectional_iterator_interface	access:public
reference_as_value_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_incrementable_iterator_interface<Reference, Buffer>::reference_as_value_type reference_as_value_type;$/;"	t	struct:boost::range_detail::any_single_pass_iterator_interface	access:public
reference_as_value_type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef typename any_single_pass_iterator_interface<Reference, Buffer>::reference_as_value_type reference_as_value_type;$/;"	t	struct:boost::range_detail::any_forward_iterator_interface	access:public
regex_forwarder	/usr/include/boost/range/adaptor/tokenized.hpp	/^        struct regex_forwarder$/;"	s	namespace:boost::range_detail
regex_holder	/usr/include/boost/range/adaptor/tokenized.hpp	/^            regex_holder( const T& rex, const U& subm, V flag ) :$/;"	f	struct:boost::range_detail::regex_holder	access:public	signature:( const T& rex, const U& subm, V flag )
regex_holder	/usr/include/boost/range/adaptor/tokenized.hpp	/^        struct regex_holder$/;"	s	namespace:boost::range_detail
regex_iter	/usr/include/boost/range/adaptor/tokenized.hpp	/^                regex_iter;$/;"	t	struct:boost::range_detail::tokenized_range	access:private
regex_type	/usr/include/boost/range/adaptor/tokenized.hpp	/^                regex_type;$/;"	t	struct:boost::range_detail::tokenized_range	access:private
remove	/usr/include/boost/range/algorithm/remove.hpp	/^remove(ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, const Value& val)
remove	/usr/include/boost/range/algorithm/remove.hpp	/^remove(const ForwardRange& rng, const Value& val)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& val)
remove_copy	/usr/include/boost/range/algorithm/remove_copy.hpp	/^remove_copy(const SinglePassRange& rng, OutputIterator out_it, const Value& val)$/;"	f	namespace:boost::range	signature:(const SinglePassRange& rng, OutputIterator out_it, const Value& val)
remove_copy_if	/usr/include/boost/range/algorithm/remove_copy_if.hpp	/^    remove_copy_if(const SinglePassRange& rng, OutputIterator out_it, Predicate pred)$/;"	f	namespace:boost	signature:(const SinglePassRange& rng, OutputIterator out_it, Predicate pred)
remove_erase	/usr/include/boost/range/algorithm_ext/erase.hpp	/^inline Container& remove_erase( Container& on, const T& val )$/;"	f	namespace:boost::range	signature:( Container& on, const T& val )
remove_erase_if	/usr/include/boost/range/algorithm_ext/erase.hpp	/^inline Container& remove_erase_if( Container& on, Pred pred )$/;"	f	namespace:boost::range	signature:( Container& on, Pred pred )
remove_extent	/usr/include/boost/range/detail/remove_extent.hpp	/^        struct remove_extent {$/;"	s	namespace:boost::range_detail
remove_if	/usr/include/boost/range/algorithm/remove_if.hpp	/^remove_if(ForwardRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, UnaryPredicate pred)
remove_if	/usr/include/boost/range/algorithm/remove_if.hpp	/^remove_if(const ForwardRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, UnaryPredicate pred)
rend	/usr/include/boost/range/rend.hpp	/^rend( C& c )$/;"	f	namespace:boost	signature:( C& c )
replace	/usr/include/boost/range/adaptor/replaced.hpp	/^        replace(InputRange& rng,$/;"	f	namespace:boost::adaptors	signature:(InputRange& rng, BOOST_DEDUCED_TYPENAME range_value<InputRange>::type from, BOOST_DEDUCED_TYPENAME range_value<InputRange>::type to)
replace	/usr/include/boost/range/adaptor/replaced.hpp	/^        replace(const InputRange& rng,$/;"	f	namespace:boost::adaptors	signature:(const InputRange& rng, BOOST_DEDUCED_TYPENAME range_value<const InputRange>::type from, BOOST_DEDUCED_TYPENAME range_value<const InputRange>::type to)
replace	/usr/include/boost/range/algorithm/replace.hpp	/^replace(ForwardRange& rng, const Value& what,$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, const Value& what, const Value& with_what)
replace	/usr/include/boost/range/algorithm/replace.hpp	/^replace(const ForwardRange& rng, const Value& what,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, const Value& what, const Value& with_what)
replace_copy	/usr/include/boost/range/algorithm/replace_copy.hpp	/^replace_copy(const ForwardRange& rng, OutputIterator out_it, const Value& what,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, OutputIterator out_it, const Value& what, const Value& with_what)
replace_copy_if	/usr/include/boost/range/algorithm/replace_copy_if.hpp	/^replace_copy_if(const ForwardRange& rng, OutputIterator out_it, Predicate pred,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, OutputIterator out_it, Predicate pred, const Value& with_what)
replace_holder	/usr/include/boost/range/adaptor/replaced.hpp	/^            replace_holder( const T& from, const T& to )$/;"	f	class:boost::range_detail::replace_holder	access:public	signature:( const T& from, const T& to )
replace_holder	/usr/include/boost/range/adaptor/replaced.hpp	/^        class replace_holder : public holder2<T>$/;"	c	namespace:boost::range_detail	inherits:holder2
replace_if	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        replace_if(InputRange& rng, Pred pred,$/;"	f	namespace:boost::adaptors	signature:(InputRange& rng, Pred pred, BOOST_DEDUCED_TYPENAME range_value<InputRange>::type to)
replace_if	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        replace_if(const InputRange& rng, Pred pred,$/;"	f	namespace:boost::adaptors	signature:(const InputRange& rng, Pred pred, BOOST_DEDUCED_TYPENAME range_value<const InputRange>::type to)
replace_if	/usr/include/boost/range/algorithm/replace_if.hpp	/^    replace_if(ForwardRange& rng, UnaryPredicate pred,$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, UnaryPredicate pred, const Value& val)
replace_if	/usr/include/boost/range/algorithm/replace_if.hpp	/^    replace_if(const ForwardRange& rng, UnaryPredicate pred,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, UnaryPredicate pred, const Value& val)
replace_if_holder	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            replace_if_holder( const Pred& pred, const T& to )$/;"	f	class:boost::range_detail::replace_if_holder	access:public	signature:( const Pred& pred, const T& to )
replace_if_holder	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        class replace_if_holder$/;"	c	namespace:boost::range_detail
replace_value	/usr/include/boost/range/adaptor/replaced.hpp	/^            replace_value(const Value& from, const Value& to)$/;"	f	class:boost::range_detail::replace_value	access:public	signature:(const Value& from, const Value& to)
replace_value	/usr/include/boost/range/adaptor/replaced.hpp	/^        class replace_value$/;"	c	namespace:boost::range_detail
replace_value_if	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            replace_value_if(const Pred& pred, const Value& to)$/;"	f	class:boost::range_detail::replace_value_if	access:public	signature:(const Pred& pred, const Value& to)
replace_value_if	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        class replace_value_if$/;"	c	namespace:boost::range_detail
replaced	/usr/include/boost/range/adaptor/replaced.hpp	/^                replaced =$/;"	m	namespace:boost::adaptors::__anon5
replaced_if	/usr/include/boost/range/adaptor/replaced_if.hpp	/^                replaced_if =$/;"	m	namespace:boost::adaptors::__anon6
replaced_if_range	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            replaced_if_range( R& r, const Pred& pred, value_type to )$/;"	f	class:boost::range_detail::replaced_if_range	access:public	signature:( R& r, const Pred& pred, value_type to )
replaced_if_range	/usr/include/boost/range/adaptor/replaced_if.hpp	/^        class replaced_if_range :$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_range
replaced_range	/usr/include/boost/range/adaptor/replaced.hpp	/^            replaced_range( R& r, value_type from, value_type to )$/;"	f	class:boost::range_detail::replaced_range	access:public	signature:( R& r, value_type from, value_type to )
replaced_range	/usr/include/boost/range/adaptor/replaced.hpp	/^        class replaced_range :$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_range
result1	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type result1;$/;"	t	struct:boost::range_detail::remove_extent	access:public
result1	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type result1;$/;"	t	struct:boost::range_detail::select	access:public
result2	/usr/include/boost/range/detail/remove_extent.hpp	/^                    > result2;$/;"	t	struct:boost::range_detail::remove_extent	access:public
result2	/usr/include/boost/range/detail/remove_extent.hpp	/^                    > result2;$/;"	t	struct:boost::range_detail::select	access:public
result_iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::result_iterator result_iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type result_iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
result_iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct result_iterator_of$/;"	s	namespace:boost::algorithm
result_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_value<Map>::type::second_type& result_type;$/;"	t	struct:boost::range_detail::select_second_mutable	access:public
result_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef const BOOST_DEDUCED_TYPENAME range_value<const Map>::type::first_type& result_type;$/;"	t	struct:boost::range_detail::select_first	access:public
result_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef const BOOST_DEDUCED_TYPENAME range_value<const Map>::type::second_type& result_type;$/;"	t	struct:boost::range_detail::select_second_const	access:public
result_type	/usr/include/boost/range/adaptor/replaced.hpp	/^            typedef const Value& result_type;$/;"	t	class:boost::range_detail::replace_value	access:public
result_type	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            typedef const Value& result_type;$/;"	t	class:boost::range_detail::replace_value_if	access:public
result_type	/usr/include/boost/range/adaptor/uniqued.hpp	/^            typedef bool result_type;$/;"	t	struct:boost::range_detail::unique_not_equal_to	access:public
result_type	/usr/include/boost/range/mfc.hpp	/^            typedef val_t_ * const result_type;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
return_begin_end	/usr/include/boost/range/detail/range_return.hpp	/^        return_begin_end    \/\/ [begin, end) range$/;"	e	enum:boost::range_return_value
return_begin_found	/usr/include/boost/range/detail/range_return.hpp	/^        return_begin_found, \/\/ [begin, found) range (*)$/;"	e	enum:boost::range_return_value
return_begin_next	/usr/include/boost/range/detail/range_return.hpp	/^        return_begin_next,  \/\/ [begin, next(found)) range$/;"	e	enum:boost::range_return_value
return_begin_prior	/usr/include/boost/range/detail/range_return.hpp	/^        return_begin_prior, \/\/ [begin, prior(found)) range$/;"	e	enum:boost::range_return_value
return_found	/usr/include/boost/range/detail/range_return.hpp	/^        return_found,       \/\/ only the found resulting iterator (*)$/;"	e	enum:boost::range_return_value
return_found_end	/usr/include/boost/range/detail/range_return.hpp	/^        return_found_end,   \/\/ [found, end) range (*)$/;"	e	enum:boost::range_return_value
return_next	/usr/include/boost/range/detail/range_return.hpp	/^        return_next,        \/\/ next(found) iterator$/;"	e	enum:boost::range_return_value
return_next_end	/usr/include/boost/range/detail/range_return.hpp	/^        return_next_end,    \/\/ [next(found), end) range$/;"	e	enum:boost::range_return_value
return_prior	/usr/include/boost/range/detail/range_return.hpp	/^        return_prior,       \/\/ prior(found) iterator$/;"	e	enum:boost::range_return_value
return_prior_end	/usr/include/boost/range/detail/range_return.hpp	/^        return_prior_end,   \/\/ [prior(found), end) range$/;"	e	enum:boost::range_return_value
reverse	/usr/include/boost/range/adaptor/reversed.hpp	/^        reverse(BidirectionalRange& rng)$/;"	f	namespace:boost::adaptors	signature:(BidirectionalRange& rng)
reverse	/usr/include/boost/range/adaptor/reversed.hpp	/^        reverse(const BidirectionalRange& rng)$/;"	f	namespace:boost::adaptors	signature:(const BidirectionalRange& rng)
reverse	/usr/include/boost/range/algorithm/reverse.hpp	/^inline BidirectionalRange& reverse(BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng)
reverse	/usr/include/boost/range/algorithm/reverse.hpp	/^inline const BidirectionalRange& reverse(const BidirectionalRange& rng)$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng)
reverse_copy	/usr/include/boost/range/algorithm/reverse_copy.hpp	/^inline OutputIterator reverse_copy(const BidirectionalRange& rng, OutputIterator out)$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, OutputIterator out)
reverse_forwarder	/usr/include/boost/range/adaptor/reversed.hpp	/^        struct reverse_forwarder {};$/;"	s	namespace:boost::range_detail
reversed	/usr/include/boost/range/adaptor/reversed.hpp	/^            const range_detail::reverse_forwarder reversed = $/;"	m	namespace:boost::adaptors::__anon7
reversed_range	/usr/include/boost/range/adaptor/reversed.hpp	/^            explicit reversed_range( R& r ) $/;"	f	struct:boost::range_detail::reversed_range	access:public	signature:( R& r )
reversed_range	/usr/include/boost/range/adaptor/reversed.hpp	/^        struct reversed_range : $/;"	s	namespace:boost::range_detail	inherits:boost::iterator_range
rotate	/usr/include/boost/range/algorithm/rotate.hpp	/^inline ForwardRange& rotate(ForwardRange& rng,$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type middle)
rotate	/usr/include/boost/range/algorithm/rotate.hpp	/^inline const ForwardRange& rotate(const ForwardRange& rng,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const ForwardRange>::type middle)
rotate_copy	/usr/include/boost/range/algorithm/rotate_copy.hpp	/^    inline OutputIterator rotate_copy($/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, BOOST_DEDUCED_TYPENAME range_iterator<const ForwardRange>::type middle, OutputIterator target )
safe_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    safe_bool();$/;"	p	class:boost::range_detail::safe_bool	access:private	signature:()
safe_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    safe_bool(const safe_bool&);$/;"	p	class:boost::range_detail::safe_bool	access:private	signature:(const safe_bool&)
safe_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^class safe_bool$/;"	c	namespace:boost::range_detail
safe_bool_t	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef range_detail::safe_bool< IteratorT iterator_range<IteratorT>::* > safe_bool_t;$/;"	t	class:boost::iterator_range	access:private
same_type	/usr/include/boost/range/detail/misc_concept.hpp	/^            template<typename T> void same_type(T,T) {}$/;"	f	class:boost::range_detail::SameTypeConcept	access:private	signature:(T,T)
search	/usr/include/boost/range/algorithm/search.hpp	/^search(ForwardRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(ForwardRange1& rng1, const ForwardRange2& rng2)
search	/usr/include/boost/range/algorithm/search.hpp	/^search(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)
search	/usr/include/boost/range/algorithm/search.hpp	/^search(const ForwardRange1& rng1, const ForwardRange2& rng2)$/;"	f	namespace:boost::range	signature:(const ForwardRange1& rng1, const ForwardRange2& rng2)
search	/usr/include/boost/range/algorithm/search.hpp	/^search(const ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred)
search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(ForwardRange& rng, Integer count, const Value& value)$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, Integer count, const Value& value)
search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(ForwardRange& rng, Integer count, const Value& value,$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, Integer count, const Value& value, BinaryPredicate binary_pred)
search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(ForwardRange& rng, Integer count, const Value& value,$/;"	f	namespace:boost::range	signature:(ForwardRange& rng, Integer count, const Value& value, BinaryPredicate pred)
search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(const ForwardRange& rng, Integer count, const Value& value)$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, Integer count, const Value& value)
search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(const ForwardRange& rng, Integer count, const Value& value,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, Integer count, const Value& value, BinaryPredicate binary_pred)
search_n	/usr/include/boost/range/algorithm/search_n.hpp	/^search_n(const ForwardRange& rng, Integer count, const Value& value,$/;"	f	namespace:boost::range	signature:(const ForwardRange& rng, Integer count, const Value& value, BinaryPredicate pred)
search_n_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_impl(ForwardIterator first, ForwardIterator last, Integer count,$/;"	f	namespace:boost::range_detail	signature:(ForwardIterator first, ForwardIterator last, Integer count, const Value& value, std::forward_iterator_tag)
search_n_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_impl(ForwardIterator first, ForwardIterator last,$/;"	f	namespace:boost::range_detail	signature:(ForwardIterator first, ForwardIterator last, Integer count, const Value& value)
search_n_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_impl(RandomAccessIterator first, RandomAccessIterator last,$/;"	f	namespace:boost::range_detail	signature:(RandomAccessIterator first, RandomAccessIterator last, Integer count, const Value& value, std::random_access_iterator_tag)
search_n_pred_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_pred_impl(ForwardIterator first, ForwardIterator last,$/;"	f	namespace:boost::range_detail	signature:(ForwardIterator first, ForwardIterator last, Integer count, const Value& value, BinaryPredicate pred)
search_n_pred_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_pred_impl(ForwardIterator first, ForwardIterator last,$/;"	f	namespace:boost::range_detail	signature:(ForwardIterator first, ForwardIterator last, Integer count, const Value& value, BinaryPredicate pred, std::forward_iterator_tag)
search_n_pred_impl	/usr/include/boost/range/algorithm/search_n.hpp	/^    search_n_pred_impl(RandomAccessIterator first, RandomAccessIterator last,$/;"	f	namespace:boost::range_detail	signature:(RandomAccessIterator first, RandomAccessIterator last, Integer count, const Value& value, BinaryPredicate pred, std::random_access_iterator_tag)
select	/usr/include/boost/range/detail/remove_extent.hpp	/^        struct select {$/;"	s	namespace:boost::range_detail
select_first	/usr/include/boost/range/adaptor/map.hpp	/^        struct select_first$/;"	s	namespace:boost::range_detail
select_first_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_first_range(const base& other) : base(other) {}$/;"	f	class:boost::range_detail::select_first_range	access:public	signature:(const base& other)
select_first_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_first_range(transform_fn_type fn, source_range_type& rng)$/;"	f	class:boost::range_detail::select_first_range	access:public	signature:(transform_fn_type fn, source_range_type& rng)
select_first_range	/usr/include/boost/range/adaptor/map.hpp	/^        class select_first_range$/;"	c	namespace:boost::range_detail	inherits:transformed_range
select_second_const	/usr/include/boost/range/adaptor/map.hpp	/^        struct select_second_const$/;"	s	namespace:boost::range_detail
select_second_const_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_second_const_range(const base& other) : base(other) {}$/;"	f	class:boost::range_detail::select_second_const_range	access:public	signature:(const base& other)
select_second_const_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_second_const_range(transform_fn_type fn, source_range_type& rng)$/;"	f	class:boost::range_detail::select_second_const_range	access:public	signature:(transform_fn_type fn, source_range_type& rng)
select_second_const_range	/usr/include/boost/range/adaptor/map.hpp	/^        class select_second_const_range$/;"	c	namespace:boost::range_detail	inherits:transformed_range
select_second_mutable	/usr/include/boost/range/adaptor/map.hpp	/^        struct select_second_mutable$/;"	s	namespace:boost::range_detail
select_second_mutable_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_second_mutable_range(const base& other) : base(other) {}$/;"	f	class:boost::range_detail::select_second_mutable_range	access:public	signature:(const base& other)
select_second_mutable_range	/usr/include/boost/range/adaptor/map.hpp	/^            select_second_mutable_range(transform_fn_type fn, source_range_type& rng)$/;"	f	class:boost::range_detail::select_second_mutable_range	access:public	signature:(transform_fn_type fn, source_range_type& rng)
select_second_mutable_range	/usr/include/boost/range/adaptor/map.hpp	/^        class select_second_mutable_range$/;"	c	namespace:boost::range_detail	inherits:transformed_range
self_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef list_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_cpair_map_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_map_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_ptr_array_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
set_difference	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_difference(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out)
set_difference	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_difference(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryPredicate pred)
set_intersection	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_intersection(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out)
set_intersection	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_intersection(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryPredicate pred)
set_symmetric_difference	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^set_symmetric_difference(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out)
set_symmetric_difference	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^set_symmetric_difference(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryPredicate pred)
set_union	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_union(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out)
set_union	/usr/include/boost/range/algorithm/set_algorithm.hpp	/^inline OutputIterator set_union(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryPredicate pred)
size	/usr/include/boost/range/detail/collection_traits.hpp	/^        size( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
size	/usr/include/boost/range/detail/size.hpp	/^    size( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
size	/usr/include/boost/range/detail/vc6/size.hpp	/^    size( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
size	/usr/include/boost/range/iterator_range_core.hpp	/^            difference_type size() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
size	/usr/include/boost/range/size.hpp	/^    size(const SinglePassRange& rng)$/;"	f	namespace:boost	signature:(const SinglePassRange& rng)
size	/usr/include/boost/range/sub_range.hpp	/^        difference_type size() const     { return base::size();  }   $/;"	f	class:boost::sub_range	access:public	signature:() const
size_of	/usr/include/boost/range/detail/microsoft.hpp	/^    size_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
size_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::size_type size_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        TraitsT::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_length_selector::array_length	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::size_type size_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
size_type	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef std::size_t size_type; \/\/ note: must be unsigned$/;"	t	class:boost::iterator_range	access:public
size_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_size<ForwardRange>::type             size_type;$/;"	t	class:boost::sub_range	access:public
size_type_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct size_type_of$/;"	s	namespace:boost::range_detail_microsoft
sizer	/usr/include/boost/range/detail/sizer.hpp	/^    char (& sizer( T BOOST_RANGE_ARRAY_REF()[sz] ) )[sz];$/;"	p	namespace:boost	signature:(T BOOST_RANGE_ARRAY_REF(
sizer	/usr/include/boost/range/detail/sizer.hpp	/^    char (& sizer( const T BOOST_RANGE_ARRAY_REF()[sz] ) )[sz];$/;"	p	namespace:boost	signature:(const T BOOST_RANGE_ARRAY_REF(
skip_iter	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^                skip_iter;$/;"	t	struct:boost::range_detail::adjacent_filtered_range	access:private
skip_iterator	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            skip_iterator( const skip_iterator<OtherIter, pred_t, default_pass>& other )$/;"	f	class:boost::range_detail::skip_iterator	access:public	signature:( const skip_iterator<OtherIter, pred_t, default_pass>& other )
skip_iterator	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            skip_iterator() : m_last() {}$/;"	f	class:boost::range_detail::skip_iterator	access:public	signature:()
skip_iterator	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^            skip_iterator(iter_t it, iter_t last, const Pred& pred)$/;"	f	class:boost::range_detail::skip_iterator	access:public	signature:(iter_t it, iter_t last, const Pred& pred)
skip_iterator	/usr/include/boost/range/adaptor/adjacent_filtered.hpp	/^        class skip_iterator$/;"	c	namespace:boost::range_detail	inherits:boost::iterator_adaptor,Pred
slice	/usr/include/boost/range/adaptor/sliced.hpp	/^        slice( RandomAccessRange& rng, std::size_t t, std::size_t u )$/;"	f	namespace:boost::adaptors	signature:( RandomAccessRange& rng, std::size_t t, std::size_t u )
slice	/usr/include/boost/range/adaptor/sliced.hpp	/^        slice( const RandomAccessRange& rng, std::size_t t, std::size_t u )$/;"	f	namespace:boost::adaptors	signature:( const RandomAccessRange& rng, std::size_t t, std::size_t u )
sliced	/usr/include/boost/range/adaptor/sliced.hpp	/^            sliced(std::size_t t_, std::size_t u_)$/;"	f	struct:boost::adaptors::sliced	access:public	signature:(std::size_t t_, std::size_t u_)
sliced	/usr/include/boost/range/adaptor/sliced.hpp	/^        struct sliced$/;"	s	namespace:boost::adaptors
sliced_range	/usr/include/boost/range/adaptor/sliced.hpp	/^            sliced_range(Rng& rng, T t, U u)$/;"	f	class:boost::adaptors::sliced_range	access:public	signature:(Rng& rng, T t, U u)
sliced_range	/usr/include/boost/range/adaptor/sliced.hpp	/^        class sliced_range : public boost::iterator_range< BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type >$/;"	c	namespace:boost::adaptors	inherits:boost::iterator_range
sort	/usr/include/boost/range/algorithm/sort.hpp	/^inline RandomAccessRange& sort(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
sort	/usr/include/boost/range/algorithm/sort.hpp	/^inline RandomAccessRange& sort(RandomAccessRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BinaryPredicate pred)
sort	/usr/include/boost/range/algorithm/sort.hpp	/^inline const RandomAccessRange& sort(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
sort	/usr/include/boost/range/algorithm/sort.hpp	/^inline const RandomAccessRange& sort(const RandomAccessRange& rng, BinaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BinaryPredicate pred)
sort_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& sort_heap(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
sort_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline RandomAccessRange& sort_heap(RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, Compare comp_pred)
sort_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& sort_heap(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
sort_heap	/usr/include/boost/range/algorithm/heap_algorithm.hpp	/^inline const RandomAccessRange& sort_heap(const RandomAccessRange& rng, Compare comp_pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, Compare comp_pred)
source_range_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef StdPairRng source_range_type;$/;"	t	class:boost::range_detail::select_second_mutable_range	access:public
source_range_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef const StdPairRng source_range_type;$/;"	t	class:boost::range_detail::select_first_range	access:public
source_range_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef const StdPairRng source_range_type;$/;"	t	class:boost::range_detail::select_second_const_range	access:public
source_range_type	/usr/include/boost/range/adaptor/transformed.hpp	/^            typedef R source_range_type;$/;"	t	struct:boost::range_detail::transformed_range	access:public
stable_partition	/usr/include/boost/range/algorithm/stable_partition.hpp	/^stable_partition(BidirectionalRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(BidirectionalRange& rng, UnaryPredicate pred)
stable_partition	/usr/include/boost/range/algorithm/stable_partition.hpp	/^stable_partition(const BidirectionalRange& rng, UnaryPredicate pred)$/;"	f	namespace:boost::range	signature:(const BidirectionalRange& rng, UnaryPredicate pred)
stable_sort	/usr/include/boost/range/algorithm/stable_sort.hpp	/^inline RandomAccessRange& stable_sort(RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng)
stable_sort	/usr/include/boost/range/algorithm/stable_sort.hpp	/^inline RandomAccessRange& stable_sort(RandomAccessRange& rng, BinaryPredicate sort_pred)$/;"	f	namespace:boost::range	signature:(RandomAccessRange& rng, BinaryPredicate sort_pred)
stable_sort	/usr/include/boost/range/algorithm/stable_sort.hpp	/^inline const RandomAccessRange& stable_sort(const RandomAccessRange& rng)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng)
stable_sort	/usr/include/boost/range/algorithm/stable_sort.hpp	/^inline const RandomAccessRange& stable_sort(const RandomAccessRange& rng, BinaryPredicate sort_pred)$/;"	f	namespace:boost::range	signature:(const RandomAccessRange& rng, BinaryPredicate sort_pred)
std_container_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<1>::type    std_container_;$/;"	t	namespace:boost::range_detail
std_pair_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<2>::type    std_pair_;$/;"	t	namespace:boost::range_detail
stored_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator_type stored_iterator;$/;"	m	class:boost::detail::writable_postfix_increment_proxy	access:private
stored_value	/usr/include/boost/range/detail/any_iterator.hpp	/^            mutable value_type stored_value;$/;"	m	class:boost::detail::postfix_increment_proxy	access:private
stored_value	/usr/include/boost/range/detail/any_iterator.hpp	/^            mutable value_type stored_value;$/;"	m	class:boost::detail::writable_postfix_increment_proxy	access:private
str_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        str_begin( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
str_end	/usr/include/boost/range/detail/detail_str.hpp	/^        str_end( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline Char* str_end( Char* s )$/;"	f	namespace:boost::range_detail	signature:( Char* s )
str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const char* str_end( const char* s, const char* )$/;"	f	namespace:boost::range_detail	signature:( const char* s, const char* )
str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const wchar_t* str_end( const wchar_t* s, const wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* s, const wchar_t* )
str_size	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t str_size( const Char* const& s )$/;"	f	namespace:boost::range_detail	signature:( const Char* const& s )
stride	/usr/include/boost/range/adaptor/strided.hpp	/^        stride(Range& rng, Difference step)$/;"	f	namespace:boost::adaptors	signature:(Range& rng, Difference step)
stride	/usr/include/boost/range/adaptor/strided.hpp	/^        stride(const Range& rng, Difference step)$/;"	f	namespace:boost::adaptors	signature:(const Range& rng, Difference step)
strided	/usr/include/boost/range/adaptor/strided.hpp	/^                strided = range_detail::forwarder<range_detail::strided_holder>();$/;"	m	namespace:boost::adaptors::__anon8
strided_holder	/usr/include/boost/range/adaptor/strided.hpp	/^            explicit strided_holder(Difference value) : holder<Difference>(value) {}$/;"	f	class:boost::range_detail::strided_holder	access:public	signature:(Difference value)
strided_holder	/usr/include/boost/range/adaptor/strided.hpp	/^        class strided_holder : public holder<Difference>$/;"	c	namespace:boost::range_detail	inherits:holder
strided_integer_range	/usr/include/boost/range/irange.hpp	/^        strided_integer_range(Iterator first, Iterator last)$/;"	f	class:boost::strided_integer_range	access:public	signature:(Iterator first, Iterator last)
strided_integer_range	/usr/include/boost/range/irange.hpp	/^    class strided_integer_range$/;"	c	namespace:boost	inherits:iterator_range
strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator()$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:()
strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator(BaseIterator first, BaseIterator it, BaseIterator last, difference_type stride)$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:(BaseIterator first, BaseIterator it, BaseIterator last, difference_type stride)
strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator(base_iterator first, base_iterator it, base_iterator last, difference_type stride)$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:(base_iterator first, base_iterator it, base_iterator last, difference_type stride)
strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator(const strided_iterator<OtherIterator, Category>& other,$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:(const strided_iterator<OtherIterator, Category>& other, BOOST_DEDUCED_TYPENAME enable_if_convertible<OtherIterator, base_iterator>::type* = 0)
strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator(const strided_iterator<OtherIterator, bidirectional_traversal_tag>& other,$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:(const strided_iterator<OtherIterator, bidirectional_traversal_tag>& other, BOOST_DEDUCED_TYPENAME enable_if_convertible<OtherIterator, base_iterator>::type* = 0)
strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_iterator(const strided_iterator<OtherIterator, random_access_traversal_tag>& other,$/;"	f	class:boost::range_detail::strided_iterator	access:public	signature:(const strided_iterator<OtherIterator, random_access_traversal_tag>& other, BOOST_DEDUCED_TYPENAME enable_if_convertible<OtherIterator, BaseIterator>::type* = 0)
strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^        class strided_iterator$/;"	c	namespace:boost::range_detail	inherits:iterator_adaptor
strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^        class strided_iterator<BaseIterator, bidirectional_traversal_tag>$/;"	c	namespace:boost::range_detail	inherits:iterator_adaptor
strided_iterator	/usr/include/boost/range/adaptor/strided.hpp	/^        class strided_iterator<BaseIterator, random_access_traversal_tag>$/;"	c	namespace:boost::range_detail	inherits:iterator_adaptor
strided_range	/usr/include/boost/range/adaptor/strided.hpp	/^            strided_range(Difference stride, Rng& rng)$/;"	f	class:boost::range_detail::strided_range	access:public	signature:(Difference stride, Rng& rng)
strided_range	/usr/include/boost/range/adaptor/strided.hpp	/^        class strided_range$/;"	c	namespace:boost::range_detail	inherits:iterator_range
string_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<12>::type   string_;$/;"	t	namespace:boost::range_detail
string_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    array_t >::type string_t;$/;"	t	class:boost::range_detail::range	access:private
sub	/usr/include/boost/range/adaptor/tokenized.hpp	/^            const U&  sub;$/;"	m	struct:boost::range_detail::regex_holder	access:public
sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( ForwardRange2& r ) : $/;"	f	class:boost::sub_range	access:public	signature:( ForwardRange2& r )
sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( Iter first, Iter last ) :$/;"	f	class:boost::sub_range	access:public	signature:( Iter first, Iter last )
sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( const ForwardRange2& r ) : $/;"	f	class:boost::sub_range	access:public	signature:( const ForwardRange2& r )
sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( const sub_range& r ) $/;"	f	class:boost::sub_range	access:public	signature:( const sub_range& r )
sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range() : base() $/;"	f	class:boost::sub_range	access:public	signature:()
sub_range	/usr/include/boost/range/sub_range.hpp	/^    class sub_range : public iterator_range< BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type > $/;"	c	namespace:boost	inherits:iterator_range
super_t	/usr/include/boost/range/adaptor/strided.hpp	/^                    > super_t;$/;"	t	class:boost::range_detail::strided_iterator	access:private
super_t	/usr/include/boost/range/adaptor/strided.hpp	/^            typedef iterator_range<iter_type> super_t;$/;"	t	class:boost::range_detail::strided_range	access:private
super_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename list_iterator_super<ListT, Value, Reference, Traversal>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_map_iterator_super<MapT, KeyT, MappedT>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_pget_map_iterator_super<MapT, PairT>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_ptr_array_iterator_super<ArrayT, PtrType>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
swap	/usr/include/boost/range/detail/any_iterator.hpp	/^            any_iterator& swap(any_iterator& other)$/;"	f	class:boost::range_detail::any_iterator	access:private	signature:(any_iterator& other)
swap_ranges	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^swap_ranges(SinglePassRange1& range1, SinglePassRange2& range2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& range1, SinglePassRange2& range2)
swap_ranges	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^swap_ranges(SinglePassRange1& range1, const SinglePassRange2& range2)$/;"	f	namespace:boost::range	signature:(SinglePassRange1& range1, const SinglePassRange2& range2)
swap_ranges	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^swap_ranges(const SinglePassRange1& range1, SinglePassRange2& range2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& range1, SinglePassRange2& range2)
swap_ranges	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^swap_ranges(const SinglePassRange1& range1, const SinglePassRange2& range2)$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& range1, const SinglePassRange2& range2)
swap_ranges_impl	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^        void swap_ranges_impl(Iterator1 first1, Iterator1 last1,$/;"	f	namespace:boost::range_detail	signature:(Iterator1 first1, Iterator1 last1, Iterator2 first2, Iterator2 last2)
swap_ranges_impl	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^        void swap_ranges_impl(Iterator1 it1, Iterator1 last1,$/;"	f	namespace:boost::range_detail	signature:(Iterator1 it1, Iterator1 last1, Iterator2 it2, Iterator2 last2, random_access_traversal_tag, random_access_traversal_tag)
swap_ranges_impl	/usr/include/boost/range/algorithm/swap_ranges.hpp	/^        void swap_ranges_impl(Iterator1 it1, Iterator1 last1,$/;"	f	namespace:boost::range_detail	signature:(Iterator1 it1, Iterator1 last1, Iterator2 it2, Iterator2 last2, single_pass_traversal_tag, single_pass_traversal_tag)
t	/usr/include/boost/range/adaptor/copied.hpp	/^            std::size_t t;$/;"	m	struct:boost::adaptors::copied	access:public
t	/usr/include/boost/range/adaptor/sliced.hpp	/^            std::size_t t;$/;"	m	struct:boost::adaptors::sliced	access:public
t	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static T* t;$/;"	m	struct:boost::algorithm::detail::is_pair	access:private
tag_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_tag<bare_t>::type tag_t;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
test	/usr/include/boost/range/size_type.hpp	/^            static no_type test(Arg x);$/;"	p	class:boost::detail::has_size_type	access:private	signature:(Arg x)
test	/usr/include/boost/range/size_type.hpp	/^            static yes_type test(BOOST_DEDUCED_TYPENAME C::size_type x);$/;"	p	class:boost::detail::has_size_type	access:private	signature:(BOOST_DEDUCED_TYPENAME C::size_type x)
test_bidirectional	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_bidirectional(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
test_const_iter	/usr/include/boost/range/detail/microsoft.hpp	/^    struct test_const_iter :$/;"	s	namespace:boost::range_detail_microsoft	inherits:boost::is_same
test_emptiness	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_emptiness(Range& )$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& )
test_equals	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_equals(Range1 const& rng1, Range2 const& rng2)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range1 const& rng1, Range2 const& rng2)
test_find_key_and_mapped	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_find_key_and_mapped(AssocContainer const& ac, PairT const& pa)$/;"	f	namespace:boost::range_detail_microsoft	signature:(AssocContainer const& ac, PairT const& pa)
test_forward	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_forward(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
test_init_array	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_array(ArrayT& arr, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(ArrayT& arr, SampleRange const& sample)
test_init_list	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_list(ListT& lst, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(ListT& lst, SampleRange const& sample)
test_init_map	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_map(MapT& map, SampleMap const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(MapT& map, SampleMap const& sample)
test_init_string	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_string(StringT& str, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(StringT& str, SampleRange const& sample)
test_mutable_iter	/usr/include/boost/range/detail/microsoft.hpp	/^    struct test_mutable_iter :$/;"	s	namespace:boost::range_detail_microsoft	inherits:boost::is_same
test_random_access	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_random_access(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
test_trivial	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_trivial(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
this_type	/usr/include/boost/range/detail/safe_bool.hpp	/^    typedef safe_bool this_type;$/;"	t	class:boost::range_detail::safe_bool	access:public
this_type	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef iterator_range<IteratorT> this_type;$/;"	t	class:boost::iterator_range	access:public
to	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            const T& to() const { return m_to; }$/;"	f	class:boost::range_detail::replace_if_holder	access:public	signature:() const
to_unspecified_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    static unspecified_bool_type to_unspecified_bool(const bool x, DataMemberPtr p)$/;"	f	class:boost::range_detail::safe_bool	access:private	signature:(const bool x, DataMemberPtr p)
to_unspecified_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    static unspecified_bool_type to_unspecified_bool(const bool x, DataMemberPtr)$/;"	f	class:boost::range_detail::safe_bool	access:public	signature:(const bool x, DataMemberPtr)
tokenize	/usr/include/boost/range/adaptor/tokenized.hpp	/^        tokenize(BidirectionalRange& rng, const Regex& reg, const Submatch& sub, Flag f)$/;"	f	namespace:boost::adaptors	signature:(BidirectionalRange& rng, const Regex& reg, const Submatch& sub, Flag f)
tokenize	/usr/include/boost/range/adaptor/tokenized.hpp	/^        tokenize(const BidirectionalRange& rng, const Regex& reg, const Submatch& sub, Flag f)$/;"	f	namespace:boost::adaptors	signature:(const BidirectionalRange& rng, const Regex& reg, const Submatch& sub, Flag f)
tokenized	/usr/include/boost/range/adaptor/tokenized.hpp	/^            const range_detail::regex_forwarder tokenized = $/;"	m	namespace:boost::adaptors::__anon9
tokenized_range	/usr/include/boost/range/adaptor/tokenized.hpp	/^            tokenized_range( R& r, const Regex& re, const Submatch& sub, Flag f )$/;"	f	struct:boost::range_detail::tokenized_range	access:public	signature:( R& r, const Regex& re, const Submatch& sub, Flag f )
tokenized_range	/usr/include/boost/range/adaptor/tokenized.hpp	/^        struct tokenized_range : $/;"	s	namespace:boost::range_detail	inherits:boost::iterator_range
traits_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    array_traits_selector<T>::type traits_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
traits_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_traits<T> traits_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
transform	/usr/include/boost/range/adaptor/transformed.hpp	/^        transform(InputRange& rng, UnaryFunction fn)$/;"	f	namespace:boost::adaptors	signature:(InputRange& rng, UnaryFunction fn)
transform	/usr/include/boost/range/adaptor/transformed.hpp	/^        transform(const InputRange& rng, UnaryFunction fn)$/;"	f	namespace:boost::adaptors	signature:(const InputRange& rng, UnaryFunction fn)
transform	/usr/include/boost/range/algorithm/transform.hpp	/^        transform(const SinglePassRange1& rng,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng, OutputIterator out, UnaryOperation fun)
transform	/usr/include/boost/range/algorithm/transform.hpp	/^        transform(const SinglePassRange1& rng1,$/;"	f	namespace:boost::range	signature:(const SinglePassRange1& rng1, const SinglePassRange2& rng2, OutputIterator out, BinaryOperation fun)
transform_fn_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef select_first<StdPairRng> transform_fn_type;$/;"	t	class:boost::range_detail::select_first_range	access:public
transform_fn_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef select_second_const<StdPairRng> transform_fn_type;$/;"	t	class:boost::range_detail::select_second_const_range	access:public
transform_fn_type	/usr/include/boost/range/adaptor/map.hpp	/^            typedef select_second_mutable<StdPairRng> transform_fn_type;$/;"	t	class:boost::range_detail::select_second_mutable_range	access:public
transform_fn_type	/usr/include/boost/range/adaptor/transformed.hpp	/^            typedef F transform_fn_type;$/;"	t	struct:boost::range_detail::transformed_range	access:public
transform_holder	/usr/include/boost/range/adaptor/transformed.hpp	/^            transform_holder( T r ) : holder<T>(r)$/;"	f	struct:boost::range_detail::transform_holder	access:public	signature:( T r )
transform_holder	/usr/include/boost/range/adaptor/transformed.hpp	/^        struct transform_holder : holder<T>$/;"	s	namespace:boost::range_detail	inherits:holder
transform_impl	/usr/include/boost/range/algorithm/transform.hpp	/^        transform_impl(SinglePassTraversalReadableIterator1 first1,$/;"	f	namespace:boost::range_detail	signature:(SinglePassTraversalReadableIterator1 first1, SinglePassTraversalReadableIterator1 last1, SinglePassTraversalReadableIterator2 first2, SinglePassTraversalReadableIterator2 last2, OutputIterator out, BinaryFunction fn)
transformed	/usr/include/boost/range/adaptor/transformed.hpp	/^                    transformed =$/;"	m	namespace:boost::adaptors::__anon10
transformed_range	/usr/include/boost/range/adaptor/transformed.hpp	/^            transformed_range( F f, R& r )$/;"	f	struct:boost::range_detail::transformed_range	access:public	signature:( F f, R& r )
transformed_range	/usr/include/boost/range/adaptor/transformed.hpp	/^        struct transformed_range :$/;"	s	namespace:boost::range_detail	inherits:boost::iterator_range
traversal_category	/usr/include/boost/range/concepts.hpp	/^            typedef BOOST_DEDUCED_TYPENAME iterator_traversal<Iterator>::type traversal_category;$/;"	t	struct:boost::range_detail::IncrementableIteratorConcept	access:public
trv_t	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type trv_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
tuple_iter	/usr/include/boost/range/combine.hpp	/^        struct tuple_iter$/;"	s	namespace:boost::range_detail
tuple_length	/usr/include/boost/range/combine.hpp	/^            struct tuple_length : ::boost::tuples::length<tuple_t>$/;"	s	struct:boost::range_detail::zip_rng	inherits:::boost::tuples::length	access:public
tuple_range	/usr/include/boost/range/combine.hpp	/^        struct tuple_range$/;"	s	namespace:boost::range_detail
tuple_t	/usr/include/boost/range/combine.hpp	/^            typedef BOOST_DEDUCED_TYPENAME generator_t::type tuple_t;$/;"	t	struct:boost::range_detail::zip_rng	access:private
type	/usr/include/boost/range/any_range.hpp	/^                >::type type;$/;"	t	struct:boost::range_detail::any_range_value_type	access:public
type	/usr/include/boost/range/any_range.hpp	/^            > type;$/;"	t	struct:boost::range_detail::any_range_type_generator	access:public
type	/usr/include/boost/range/combine.hpp	/^                    > type;$/;"	t	struct:boost::range_detail::generate_tuple	access:public
type	/usr/include/boost/range/combine.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::tuple_iter	access:public
type	/usr/include/boost/range/combine.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::tuple_range	access:public
type	/usr/include/boost/range/combine.hpp	/^        struct void_ { typedef void_ type; };$/;"	t	struct:boost::range_detail::void_	access:public
type	/usr/include/boost/range/combine.hpp	/^       typedef ::boost::tuples::null_type type;$/;"	t	struct:boost::range_iterator	access:public
type	/usr/include/boost/range/const_iterator.hpp	/^        typedef Iterator type;$/;"	t	struct:boost::range_const_iterator	access:public
type	/usr/include/boost/range/const_iterator.hpp	/^        typedef const T* type;$/;"	t	struct:boost::range_const_iterator	access:public
type	/usr/include/boost/range/detail/any_iterator.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::is_const_reference	access:public
type	/usr/include/boost/range/detail/any_iterator.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::is_convertible_to_value_as_reference	access:public
type	/usr/include/boost/range/detail/any_iterator.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::is_mutable_reference	access:public
type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^                    > type;$/;"	t	struct:boost::range_detail::any_iterator_interface_type_generator	access:public
type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            >::type type;$/;"	t	struct:boost::range_detail::const_reference_type_generator	access:public
type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef any_bidirectional_iterator_interface<Reference, Buffer> type;$/;"	t	struct:boost::range_detail::any_iterator_interface_type_generator	access:public
type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef any_forward_iterator_interface<Reference, Buffer> type;$/;"	t	struct:boost::range_detail::any_iterator_interface_type_generator	access:public
type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef any_incrementable_iterator_interface<Reference, Buffer> type;$/;"	t	struct:boost::range_detail::any_iterator_interface_type_generator	access:public
type	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            typedef any_single_pass_iterator_interface<Reference, Buffer> type;$/;"	t	struct:boost::range_detail::any_iterator_interface_type_generator	access:public
type	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                    > type;$/;"	t	struct:boost::range_detail::any_iterator_wrapper_type_generator	access:public
type	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^                > type;$/;"	t	struct:boost::range_detail::any_iterator_wrapper_type_generator	access:public
type	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            > type;$/;"	t	struct:boost::range_detail::any_iterator_wrapper_type_generator	access:public
type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::const_iterator type;$/;"	t	struct:boost::algorithm::const_iterator_of	access:public
type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::difference_type type;$/;"	t	struct:boost::algorithm::difference_type_of	access:public
type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::iterator type;$/;"	t	struct:boost::algorithm::iterator_of	access:public
type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::result_iterator type;$/;"	t	struct:boost::algorithm::result_iterator_of	access:public
type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::value_type type;$/;"	t	struct:boost::algorithm::value_type_of	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                            ::boost::mpl::identity<T1> >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_select::apply	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        ::boost::algorithm::detail::array_traits_select<T> >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_cv_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::array_container_traits_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_traits_impl<T,BaseT> type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef default_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::default_container_traits_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef pair_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef pointer_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef void type;$/;"	t	struct:boost::algorithm::detail::array_traits_void	access:public
type	/usr/include/boost/range/detail/common.hpp	/^                                                                    char_array_t >::type type;  $/;"	t	class:boost::range_detail::range	access:public
type	/usr/include/boost/range/detail/const_iterator.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/const_iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::const_iterator type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/const_iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME P::first_type type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/const_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range_const_iterator_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_const_iterator	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef char type; $/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const char type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef wchar_t type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef char type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef char* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const char* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const char* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const wchar_t type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef std::size_t type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef wchar_t* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef BOOST_DEDUCED_TYPENAME C::difference_type type;$/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME boost::iterator_difference< BOOST_DEDUCED_TYPENAME P::first_type>::type type;                $/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef std::ptrdiff_t type;$/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
type	/usr/include/boost/range/detail/difference_type.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range_difference_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_difference	access:public
type	/usr/include/boost/range/detail/extract_optional_type.hpp	/^        template< typename T > struct exists { typedef void type; };$/;"	t	struct:boost::range_detail::exists	access:public
type	/usr/include/boost/range/detail/iterator.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::iterator type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME P::first_type type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef int type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/iterator.hpp	/^        typedef typename range_detail::range_iterator_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_mutable_iterator	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type type;$/;"	t	struct:boost::range_detail_microsoft::customization_tag_of	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef customization<tag_t> type;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename cust_t::template meta<bare_t>::const_iterator type;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename cust_t::template meta<bare_t>::mutable_iterator type;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename iterator_difference<miter_t>::type type;$/;"	t	struct:boost::range_detail_microsoft::size_type_of	access:public
type	/usr/include/boost/range/detail/range_return.hpp	/^            BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type > type;$/;"	t	struct:boost::range_return	access:public
type	/usr/include/boost/range/detail/range_return.hpp	/^            BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange>::type > type;$/;"	t	struct:boost::range_return	access:public
type	/usr/include/boost/range/detail/range_return.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type type;$/;"	t	struct:boost::range_return	access:public
type	/usr/include/boost/range/detail/range_return.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange>::type type;$/;"	t	struct:boost::range_return	access:public
type	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type type;$/;"	t	struct:boost::range_detail::remove_extent	access:public
type	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type type;$/;"	t	struct:boost::range_detail::select	access:public
type	/usr/include/boost/range/detail/size_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::size_type type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
type	/usr/include/boost/range/detail/size_type.hpp	/^                typedef std::size_t type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
type	/usr/include/boost/range/detail/size_type.hpp	/^        typedef typename range_detail::range_size_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type;$/;"	t	class:boost::range_size	access:public
type	/usr/include/boost/range/detail/str_types.hpp	/^        typedef T* type;$/;"	t	struct:boost::range_mutable_iterator	access:public
type	/usr/include/boost/range/detail/str_types.hpp	/^        typedef const T* type;$/;"	t	struct:boost::range_const_iterator	access:public
type	/usr/include/boost/range/detail/str_types.hpp	/^       typedef std::size_t type;$/;"	t	struct:boost::range_size	access:public
type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_DEDUCED_TYPENAME remove_extent<T>::type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::value_type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME boost::iterator_value< BOOST_RANGE_DEDUCED_TYPENAME P::first_type >::type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/value_type.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range_value_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_value	access:public
type	/usr/include/boost/range/iterator.hpp	/^                               range_mutable_iterator<C> >::type type;$/;"	t	struct:boost::range_detail_vc7_1::range_iterator	access:public
type	/usr/include/boost/range/iterator.hpp	/^               range_detail_vc7_1::range_iterator<C>::type type;$/;"	t	struct:boost::range_iterator	access:public
type	/usr/include/boost/range/iterator.hpp	/^           typedef T* type;$/;"	t	struct:boost::range_detail_vc7_1::range_iterator	access:public
type	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef iterator_range<IteratorT> type;$/;"	t	class:boost::iterator_range	access:public
type	/usr/include/boost/range/join.hpp	/^    > type;$/;"	t	class:boost::range_detail::joined_type	access:public
type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator_super	access:public
type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_pget_map_iterator_super	access:public
type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator_super	access:public
type	/usr/include/boost/range/mutable_iterator.hpp	/^        typedef Iterator type;$/;"	t	struct:boost::range_mutable_iterator	access:public
type	/usr/include/boost/range/mutable_iterator.hpp	/^        typedef T* type;$/;"	t	struct:boost::range_mutable_iterator	access:public
type	/usr/include/boost/range/reverse_iterator.hpp	/^            BOOST_DEDUCED_TYPENAME range_iterator<C>::type > type;$/;"	t	struct:boost::range_reverse_iterator	access:public
type	/usr/include/boost/range/size_type.hpp	/^            >::type type;$/;"	t	struct:boost::detail::range_size	access:public
type	/usr/include/boost/range/size_type.hpp	/^            typedef BOOST_DEDUCED_TYPENAME C::size_type type;$/;"	t	struct:boost::detail::range_size	access:public
type_erase	/usr/include/boost/range/adaptor/type_erased.hpp	/^        type_erase(SinglePassRange& rng$/;"	f	namespace:boost::adaptors	signature:(SinglePassRange& rng , type_erased< Value , Traversal , Reference , Difference , Buffer > = type_erased<>() )
type_erase	/usr/include/boost/range/adaptor/type_erased.hpp	/^        type_erase(const SinglePassRange& rng$/;"	f	namespace:boost::adaptors	signature:(const SinglePassRange& rng , type_erased< Value , Traversal , Reference , Difference , Buffer > = type_erased<>() )
type_erased	/usr/include/boost/range/adaptor/type_erased.hpp	/^        struct type_erased$/;"	s	namespace:boost::adaptors
u	/usr/include/boost/range/adaptor/copied.hpp	/^            std::size_t u;$/;"	m	struct:boost::adaptors::copied	access:public
u	/usr/include/boost/range/adaptor/sliced.hpp	/^            std::size_t u;$/;"	m	struct:boost::adaptors::sliced	access:public
unique	/usr/include/boost/range/adaptor/uniqued.hpp	/^        unique(ForwardRange& rng)$/;"	f	namespace:boost::adaptors	signature:(ForwardRange& rng)
unique	/usr/include/boost/range/adaptor/uniqued.hpp	/^        unique(const ForwardRange& rng)$/;"	f	namespace:boost::adaptors	signature:(const ForwardRange& rng)
unique	/usr/include/boost/range/algorithm/unique.hpp	/^unique( ForwardRange& rng )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng )
unique	/usr/include/boost/range/algorithm/unique.hpp	/^unique( ForwardRange& rng, BinaryPredicate pred )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, BinaryPredicate pred )
unique	/usr/include/boost/range/algorithm/unique.hpp	/^unique( const ForwardRange& rng )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng )
unique	/usr/include/boost/range/algorithm/unique.hpp	/^unique( const ForwardRange& rng, BinaryPredicate pred )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, BinaryPredicate pred )
unique_copy	/usr/include/boost/range/algorithm/unique_copy.hpp	/^unique_copy( const SinglePassRange& rng, OutputIterator out_it )$/;"	f	namespace:boost::range	signature:( const SinglePassRange& rng, OutputIterator out_it )
unique_copy	/usr/include/boost/range/algorithm/unique_copy.hpp	/^unique_copy( const SinglePassRange& rng, OutputIterator out_it,$/;"	f	namespace:boost::range	signature:( const SinglePassRange& rng, OutputIterator out_it, BinaryPredicate pred )
unique_forwarder	/usr/include/boost/range/adaptor/uniqued.hpp	/^        struct unique_forwarder { };$/;"	s	namespace:boost::range_detail
unique_not_equal_to	/usr/include/boost/range/adaptor/uniqued.hpp	/^        struct unique_not_equal_to$/;"	s	namespace:boost::range_detail
uniqued	/usr/include/boost/range/adaptor/uniqued.hpp	/^            const range_detail::unique_forwarder uniqued =$/;"	m	namespace:boost::adaptors::__anon11
uniqued_range	/usr/include/boost/range/adaptor/uniqued.hpp	/^            explicit uniqued_range(ForwardRng& rng)$/;"	f	class:boost::range_detail::uniqued_range	access:public	signature:(ForwardRng& rng)
uniqued_range	/usr/include/boost/range/adaptor/uniqued.hpp	/^        class uniqued_range : public adjacent_filtered_range<unique_not_equal_to, ForwardRng, true>$/;"	c	namespace:boost::range_detail	inherits:adjacent_filtered_range
unspecified_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    static void unspecified_bool(this_type***)$/;"	f	class:boost::range_detail::safe_bool	access:public	signature:(this_type***)
unspecified_bool_type	/usr/include/boost/range/detail/safe_bool.hpp	/^    typedef DataMemberPtr unspecified_bool_type;$/;"	t	class:boost::range_detail::safe_bool	access:private
unspecified_bool_type	/usr/include/boost/range/detail/safe_bool.hpp	/^    typedef bool unspecified_bool_type;$/;"	t	class:boost::range_detail::safe_bool	access:public
unspecified_bool_type	/usr/include/boost/range/detail/safe_bool.hpp	/^    typedef void(*unspecified_bool_type)(this_type***);$/;"	t	class:boost::range_detail::safe_bool	access:public
unspecified_bool_type	/usr/include/boost/range/iterator_range_core.hpp	/^            typedef BOOST_DEDUCED_TYPENAME safe_bool_t::unspecified_bool_type unspecified_bool_type;$/;"	t	class:boost::iterator_range	access:public
upper_bound	/usr/include/boost/range/algorithm/upper_bound.hpp	/^upper_bound( ForwardRange& rng, Value val )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Value val )
upper_bound	/usr/include/boost/range/algorithm/upper_bound.hpp	/^upper_bound( ForwardRange& rng, Value val, SortPredicate pred )$/;"	f	namespace:boost::range	signature:( ForwardRange& rng, Value val, SortPredicate pred )
upper_bound	/usr/include/boost/range/algorithm/upper_bound.hpp	/^upper_bound( const ForwardRange& rng, Value val )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Value val )
upper_bound	/usr/include/boost/range/algorithm/upper_bound.hpp	/^upper_bound( const ForwardRange& rng, Value val, SortPredicate pred )$/;"	f	namespace:boost::range	signature:( const ForwardRange& rng, Value val, SortPredicate pred )
using_type_as_tag	/usr/include/boost/range/detail/microsoft.hpp	/^    struct using_type_as_tag$/;"	s	namespace:boost::range_detail_microsoft
v	/usr/include/boost/range/concepts.hpp	/^        BOOST_DEDUCED_TYPENAME range_value<Range>::type v;$/;"	m	struct:boost::WriteableRangeConcept	access:private
v_citer_t	/usr/include/boost/range/atl.hpp	/^            typedef v_val_t const *v_citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
v_miter_t	/usr/include/boost/range/atl.hpp	/^            typedef v_val_t *v_miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
v_val_t	/usr/include/boost/range/atl.hpp	/^            typedef TVal v_val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            T val;$/;"	m	struct:boost::range_detail::holder	access:public
val	/usr/include/boost/range/adaptor/indexed.hpp	/^            std::size_t val;$/;"	m	struct:boost::adaptors::indexed	access:public
val1	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            T val1, val2;$/;"	m	struct:boost::range_detail::holder2	access:public
val2	/usr/include/boost/range/adaptor/argument_fwd.hpp	/^            T val1, val2;$/;"	m	struct:boost::range_detail::holder2	access:public
val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CAutoPtr<E> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CComQIPtr<I, piid> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CHeapPtr<E, Allocator> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/atl.hpp	/^            typedef E val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/atl.hpp	/^            typedef T val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/atl.hpp	/^            typedef typename X::CPair val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CString val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef BYTE val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef DWORD val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef Type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef UINT val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename remove_pointer<PtrType>::type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename remove_pointer<PtrType>::type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t_	/usr/include/boost/range/mfc.hpp	/^            >::type val_t_;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
value	/usr/include/boost/range/size_type.hpp	/^            static const bool value = sizeof(test<T>(0)) == sizeof(yes_type);$/;"	m	class:boost::detail::has_size_type	access:public
value_type	/usr/include/boost/range/adaptor/replaced.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_value<R>::type value_type;$/;"	t	class:boost::range_detail::replaced_range	access:public
value_type	/usr/include/boost/range/adaptor/replaced_if.hpp	/^            typedef BOOST_DEDUCED_TYPENAME range_value<R>::type value_type;$/;"	t	class:boost::range_detail::replaced_if_range	access:public
value_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Value value_type;$/;"	t	class:boost::detail::postfix_increment_proxy	access:public
value_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef Value value_type;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:public
value_type	/usr/include/boost/range/detail/any_iterator.hpp	/^            typedef typename base_type::value_type value_type;$/;"	t	class:boost::range_detail::any_iterator	access:public
value_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::value_type value_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_pointer<T>::type value_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    iterator_traits<element_type>::value_type value_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::value_type value_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::value_type value_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::value_type value_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BaseT value_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef T value_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
value_type	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::value_type value_type;$/;"	t	class:boost::range_detail::integer_iterator	access:public
value_type	/usr/include/boost/range/irange.hpp	/^            typedef typename base_t::value_type value_type;$/;"	t	class:boost::range_detail::integer_iterator_with_step	access:public
value_type	/usr/include/boost/range/iterator_range_core.hpp	/^                iterator_value<IteratorT>::type value_type;$/;"	t	class:boost::iterator_range	access:public
value_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_value<ForwardRange>::type            value_type;$/;"	t	class:boost::sub_range	access:public
value_type_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct value_type_of$/;"	s	namespace:boost::algorithm
values	/usr/include/boost/range/adaptor/map.hpp	/^        values(StdPairRange& rng)$/;"	f	namespace:boost::adaptors	signature:(StdPairRange& rng)
values	/usr/include/boost/range/adaptor/map.hpp	/^        values(const StdPairRange& rng)$/;"	f	namespace:boost::adaptors	signature:(const StdPairRange& rng)
void_	/usr/include/boost/range/combine.hpp	/^        struct void_ { typedef void_ type; };$/;"	s	namespace:boost::range_detail
wchar_array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    wchar_ptr_t >::type wchar_array_t;$/;"	t	class:boost::range_detail::range	access:private
wchar_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    const_wchar_ptr_t >::type wchar_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
wchar_t_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<7>::type    wchar_t_array_;$/;"	t	namespace:boost::range_detail
wchar_t_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<10>::type   wchar_t_ptr_;$/;"	t	namespace:boost::range_detail
wrapped_type	/usr/include/boost/range/detail/any_iterator_wrapper.hpp	/^            typedef WrappedIterator wrapped_type;$/;"	t	class:boost::range_detail::any_incrementable_iterator_wrapper	access:public
writable_postfix_increment_proxy	/usr/include/boost/range/detail/any_iterator.hpp	/^            explicit writable_postfix_increment_proxy(any_iterator_type const& x)$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(any_iterator_type const& x)
writable_postfix_increment_proxy	/usr/include/boost/range/detail/any_iterator.hpp	/^        class writable_postfix_increment_proxy<$/;"	c	namespace:boost::detail
yes_type	/usr/include/boost/range/size_type.hpp	/^            struct yes_type { char dummy[2]; };$/;"	s	class:boost::detail::has_size_type	access:private
zip_iter_t	/usr/include/boost/range/combine.hpp	/^                    > zip_iter_t;$/;"	t	struct:boost::range_detail::zip_range	access:private
zip_iter_t	/usr/include/boost/range/combine.hpp	/^            > zip_iter_t;$/;"	t	struct:boost::range_detail::zip_range3	access:private
zip_iter_t	/usr/include/boost/range/combine.hpp	/^            typedef zip_iterator<tuple_t>                    zip_iter_t;$/;"	t	struct:boost::range_detail::zip_rng	access:private
zip_range	/usr/include/boost/range/combine.hpp	/^            zip_range( Rng1& r1, Rng2& r2 )$/;"	f	struct:boost::range_detail::zip_range	access:public	signature:( Rng1& r1, Rng2& r2 )
zip_range	/usr/include/boost/range/combine.hpp	/^        struct zip_range$/;"	s	namespace:boost::range_detail	inherits:iterator_range
zip_range3	/usr/include/boost/range/combine.hpp	/^            zip_range3( Rng1& r1, Rng2& r2, Rng3& r3 )$/;"	f	struct:boost::range_detail::zip_range3	access:public	signature:( Rng1& r1, Rng2& r2, Rng3& r3 )
zip_range3	/usr/include/boost/range/combine.hpp	/^        struct zip_range3$/;"	s	namespace:boost::range_detail	inherits:iterator_range
zip_rng	/usr/include/boost/range/combine.hpp	/^            zip_rng( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )$/;"	f	struct:boost::range_detail::zip_rng	access:public	signature:( R1& r1, R2& r2, R3& r3, R4& r4, R5& r5, R6& r6 )
zip_rng	/usr/include/boost/range/combine.hpp	/^            zip_rng( Zip& z, Rng& r )$/;"	f	struct:boost::range_detail::zip_rng	access:public	signature:( Zip& z, Rng& r )
zip_rng	/usr/include/boost/range/combine.hpp	/^        struct zip_rng$/;"	s	namespace:boost::range_detail	inherits:iterator_range
~any_incrementable_iterator_interface	/usr/include/boost/range/detail/any_iterator_interface.hpp	/^            virtual ~any_incrementable_iterator_interface() {}$/;"	f	struct:boost::range_detail::any_incrementable_iterator_interface	access:public	signature:()
~any_iterator	/usr/include/boost/range/detail/any_iterator.hpp	/^            ~any_iterator()$/;"	f	class:boost::range_detail::any_iterator	access:public	signature:()
~any_iterator_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        ~any_iterator_buffer()$/;"	f	class:boost::any_iterator_buffer	access:public	signature:()
~any_iterator_heap_only_buffer	/usr/include/boost/range/detail/any_iterator_buffer.hpp	/^        ~any_iterator_heap_only_buffer()$/;"	f	class:boost::any_iterator_heap_only_buffer	access:public	signature:()
~safe_bool	/usr/include/boost/range/detail/safe_bool.hpp	/^    ~safe_bool();$/;"	p	class:boost::range_detail::safe_bool	access:private	signature:()
