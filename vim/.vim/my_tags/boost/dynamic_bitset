!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_BITSET_CHAR	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	1758;"	d
BOOST_DYNAMIC_BITSET_CONFIG_HPP_GP_20040424	/usr/include/boost/dynamic_bitset/config.hpp	13;"	d
BOOST_DYNAMIC_BITSET_CTYPE_FACET	/usr/include/boost/dynamic_bitset/config.hpp	59;"	d
BOOST_DYNAMIC_BITSET_DONT_USE_FRIENDS	/usr/include/boost/dynamic_bitset/config.hpp	39;"	d
BOOST_DYNAMIC_BITSET_DYNAMIC_BITSET_HPP	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	13;"	d
BOOST_DYNAMIC_BITSET_PRIVATE	/usr/include/boost/dynamic_bitset/config.hpp	45;"	d
BOOST_DYNAMIC_BITSET_WIDEN_CHAR	/usr/include/boost/dynamic_bitset/config.hpp	63;"	d
BOOST_DYNAMIC_BITSET_WRAP_CONSTANT	/usr/include/boost/dynamic_bitset/config.hpp	30;"	d
BOOST_OLD_IOSTREAMS	/usr/include/boost/dynamic_bitset/config.hpp	20;"	d
BOOST_STATIC_ASSERT	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^  BOOST_STATIC_ASSERT((bool)detail::dynamic_bitset_impl::allowed_block_type<Block>::value);$/;"	p	class:boost::dynamic_bitset	access:private	signature:(bool)detail::dynamic_bitset_impl::allowed_block_type<Block>::value
BOOST_STATIC_CONSTANT	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    BOOST_STATIC_CONSTANT(block_width_type, bits_per_block = (std::numeric_limits<Block>::digits));$/;"	p	class:boost::dynamic_bitset	access:public	signature:(block_width_type, bits_per_block = (std::numeric_limits<Block>::digits))
BOOST_STATIC_CONSTANT	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    BOOST_STATIC_CONSTANT(block_width_type, ulong_width = std::numeric_limits<unsigned long>::digits);$/;"	p	class:boost::dynamic_bitset	access:private	signature:(block_width_type, ulong_width = std::numeric_limits<unsigned long>::digits)
BOOST_STATIC_CONSTANT	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    BOOST_STATIC_CONSTANT(size_type, npos = static_cast<size_type>(-1));$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type, npos = static_cast<size_type>(-1))
allocator_type	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef Allocator allocator_type;$/;"	t	class:boost::dynamic_bitset	access:public
any	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool any() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
any	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool dynamic_bitset<Block, Allocator>::any() const$/;"	f	class:boost::dynamic_bitset	signature:() const
append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void append(Block block);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(Block block)
append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void append(BlockInputIterator first, BlockInputIterator last) \/\/ strong guarantee$/;"	f	class:boost::dynamic_bitset	access:public	signature:(BlockInputIterator first, BlockInputIterator last)
append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^append(Block value) \/\/ strong guarantee$/;"	f	class:boost::dynamic_bitset	signature:(Block value)
bit_appender	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        bit_appender(dynamic_bitset & r) : bs(r), n(0), mask(0), current(0) {}$/;"	f	class:boost::dynamic_bitset::bit_appender	access:public	signature:(dynamic_bitset & r)
bit_appender	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      bit_appender(const bit_appender &);$/;"	p	class:boost::dynamic_bitset::bit_appender	access:private	signature:(const bit_appender &)
bit_appender	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    class bit_appender {$/;"	c	class:boost::dynamic_bitset	access:private
bit_index	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    static block_width_type bit_index(size_type pos) { return static_cast<block_width_type>(pos % bits_per_block); }$/;"	f	class:boost::dynamic_bitset	access:private	signature:(size_type pos)
bit_mask	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    static Block bit_mask(size_type pos) { return Block(1) << bit_index(pos); }$/;"	f	class:boost::dynamic_bitset	access:private	signature:(size_type pos)
bits_per_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::bits_per_block;$/;"	m	class:boost::dynamic_bitset
block_index	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    static size_type block_index(size_type pos) { return pos \/ bits_per_block; }$/;"	f	class:boost::dynamic_bitset	access:private	signature:(size_type pos)
block_type	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef Block block_type;$/;"	t	class:boost::dynamic_bitset	access:public
block_width_type	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef block_type block_width_type;$/;"	t	class:boost::dynamic_bitset	access:public
boost	/usr/include/boost/dynamic_bitset/config.hpp	/^namespace boost { namespace detail {$/;"	n
boost	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^namespace boost {$/;"	n
boost::detail	/usr/include/boost/dynamic_bitset/config.hpp	/^namespace boost { namespace detail {$/;"	n	namespace:boost
boost::detail::make_non_const	/usr/include/boost/dynamic_bitset/config.hpp	/^    template <typename T> T make_non_const(T t) { return t; }$/;"	f	namespace:boost::detail	signature:(T t)
boost::dump_to_string	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dump_to_string(const dynamic_bitset<B, A>& b, stringT& s)$/;"	f	namespace:boost	signature:(const dynamic_bitset<B, A>& b, stringT& s)
boost::dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^class dynamic_bitset$/;"	c	namespace:boost
boost::dynamic_bitset::BOOST_STATIC_ASSERT	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^  BOOST_STATIC_ASSERT((bool)detail::dynamic_bitset_impl::allowed_block_type<Block>::value);$/;"	p	class:boost::dynamic_bitset	access:private	signature:(bool)detail::dynamic_bitset_impl::allowed_block_type<Block>::value
boost::dynamic_bitset::BOOST_STATIC_CONSTANT	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    BOOST_STATIC_CONSTANT(block_width_type, bits_per_block = (std::numeric_limits<Block>::digits));$/;"	p	class:boost::dynamic_bitset	access:public	signature:(block_width_type, bits_per_block = (std::numeric_limits<Block>::digits))
boost::dynamic_bitset::BOOST_STATIC_CONSTANT	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    BOOST_STATIC_CONSTANT(block_width_type, ulong_width = std::numeric_limits<unsigned long>::digits);$/;"	p	class:boost::dynamic_bitset	access:private	signature:(block_width_type, ulong_width = std::numeric_limits<unsigned long>::digits)
boost::dynamic_bitset::BOOST_STATIC_CONSTANT	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    BOOST_STATIC_CONSTANT(size_type, npos = static_cast<size_type>(-1));$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type, npos = static_cast<size_type>(-1))
boost::dynamic_bitset::allocator_type	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef Allocator allocator_type;$/;"	t	class:boost::dynamic_bitset	access:public
boost::dynamic_bitset::any	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool any() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
boost::dynamic_bitset::any	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool dynamic_bitset<Block, Allocator>::any() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void append(Block block);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(Block block)
boost::dynamic_bitset::append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void append(BlockInputIterator first, BlockInputIterator last) \/\/ strong guarantee$/;"	f	class:boost::dynamic_bitset	access:public	signature:(BlockInputIterator first, BlockInputIterator last)
boost::dynamic_bitset::append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^append(Block value) \/\/ strong guarantee$/;"	f	class:boost::dynamic_bitset	signature:(Block value)
boost::dynamic_bitset::bit_appender	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    class bit_appender {$/;"	c	class:boost::dynamic_bitset	access:private
boost::dynamic_bitset::bit_appender::bit_appender	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        bit_appender(dynamic_bitset & r) : bs(r), n(0), mask(0), current(0) {}$/;"	f	class:boost::dynamic_bitset::bit_appender	access:public	signature:(dynamic_bitset & r)
boost::dynamic_bitset::bit_appender::bit_appender	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      bit_appender(const bit_appender &);$/;"	p	class:boost::dynamic_bitset::bit_appender	access:private	signature:(const bit_appender &)
boost::dynamic_bitset::bit_appender::bs	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      dynamic_bitset & bs;$/;"	m	class:boost::dynamic_bitset::bit_appender	access:private
boost::dynamic_bitset::bit_appender::current	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      Block * current;$/;"	m	class:boost::dynamic_bitset::bit_appender	access:private
boost::dynamic_bitset::bit_appender::do_append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        inline void do_append(bool value) {$/;"	f	class:boost::dynamic_bitset::bit_appender	access:public	signature:(bool value)
boost::dynamic_bitset::bit_appender::get_count	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        size_type get_count() const { return n; }$/;"	f	class:boost::dynamic_bitset::bit_appender	access:public	signature:() const
boost::dynamic_bitset::bit_appender::mask	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      Block mask;$/;"	m	class:boost::dynamic_bitset::bit_appender	access:private
boost::dynamic_bitset::bit_appender::n	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      size_type n;$/;"	m	class:boost::dynamic_bitset::bit_appender	access:private
boost::dynamic_bitset::bit_appender::operator =	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      bit_appender & operator=(const bit_appender &);$/;"	p	class:boost::dynamic_bitset::bit_appender	access:private	signature:(const bit_appender &)
boost::dynamic_bitset::bit_appender::~bit_appender	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        ~bit_appender() {$/;"	f	class:boost::dynamic_bitset::bit_appender	access:public	signature:()
boost::dynamic_bitset::bit_index	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    static block_width_type bit_index(size_type pos) { return static_cast<block_width_type>(pos % bits_per_block); }$/;"	f	class:boost::dynamic_bitset	access:private	signature:(size_type pos)
boost::dynamic_bitset::bit_mask	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    static Block bit_mask(size_type pos) { return Block(1) << bit_index(pos); }$/;"	f	class:boost::dynamic_bitset	access:private	signature:(size_type pos)
boost::dynamic_bitset::bits_per_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::bits_per_block;$/;"	m	class:boost::dynamic_bitset
boost::dynamic_bitset::block_index	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    static size_type block_index(size_type pos) { return pos \/ bits_per_block; }$/;"	f	class:boost::dynamic_bitset	access:private	signature:(size_type pos)
boost::dynamic_bitset::block_type	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef Block block_type;$/;"	t	class:boost::dynamic_bitset	access:public
boost::dynamic_bitset::block_width_type	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef block_type block_width_type;$/;"	t	class:boost::dynamic_bitset	access:public
boost::dynamic_bitset::buffer_type	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef std::vector<block_type, allocator_type> buffer_type;$/;"	t	class:boost::dynamic_bitset	access:private
boost::dynamic_bitset::calc_num_blocks	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    static size_type calc_num_blocks(size_type num_bits);$/;"	p	class:boost::dynamic_bitset	access:private	signature:(size_type num_bits)
boost::dynamic_bitset::calc_num_blocks	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::calc_num_blocks(size_type num_bits)$/;"	f	class:boost::dynamic_bitset	signature:(size_type num_bits)
boost::dynamic_bitset::clear	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void clear();$/;"	p	class:boost::dynamic_bitset	access:public	signature:()
boost::dynamic_bitset::clear	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^clear() \/\/ no throw$/;"	f	class:boost::dynamic_bitset	signature:()
boost::dynamic_bitset::const_reference	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef bool const_reference;$/;"	t	class:boost::dynamic_bitset	access:public
boost::dynamic_bitset::count	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type count() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
boost::dynamic_bitset::count	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::count() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::count_extra_bits	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    block_width_type count_extra_bits() const { return bit_index(size()); }$/;"	f	class:boost::dynamic_bitset	access:private	signature:() const
boost::dynamic_bitset::dispatch_init	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void dispatch_init(T first, T last,$/;"	f	class:boost::dynamic_bitset	access:public	signature:(T first, T last, detail::dynamic_bitset_impl::value_to_type<false>)
boost::dynamic_bitset::dispatch_init	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void dispatch_init(T num_bits, unsigned long value,$/;"	f	class:boost::dynamic_bitset	access:public	signature:(T num_bits, unsigned long value, detail::dynamic_bitset_impl::value_to_type<true>)
boost::dynamic_bitset::dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(BlockInputIterator first, BlockInputIterator last,$/;"	f	class:boost::dynamic_bitset	access:public	signature:(BlockInputIterator first, BlockInputIterator last, const Allocator& alloc = Allocator())
boost::dynamic_bitset::dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(const Allocator& alloc = Allocator());$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const Allocator& alloc = Allocator())
boost::dynamic_bitset::dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
boost::dynamic_bitset::dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(const std::basic_string<CharT, Traits, Alloc>& s,$/;"	f	class:boost::dynamic_bitset	access:public	signature:(const std::basic_string<CharT, Traits, Alloc>& s, typename std::basic_string<CharT, Traits, Alloc>::size_type pos = 0)
boost::dynamic_bitset::dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(const std::basic_string<CharT, Traits, Alloc>& s,$/;"	f	class:boost::dynamic_bitset	access:public	signature:(const std::basic_string<CharT, Traits, Alloc>& s, typename std::basic_string<CharT, Traits, Alloc>::size_type pos, typename std::basic_string<CharT, Traits, Alloc>::size_type n, size_type num_bits = npos, const Allocator& alloc = Allocator())
boost::dynamic_bitset::dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(size_type num_bits, unsigned long value = 0,$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type num_bits, unsigned long value = 0, const Allocator& alloc = Allocator())
boost::dynamic_bitset::dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset(const dynamic_bitset& b)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset& b)
boost::dynamic_bitset::dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset(size_type num_bits, unsigned long value, const Allocator& alloc)$/;"	f	class:boost::dynamic_bitset	signature:(size_type num_bits, unsigned long value, const Allocator& alloc)
boost::dynamic_bitset::dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::dynamic_bitset(const Allocator& alloc)$/;"	f	class:boost::dynamic_bitset	signature:(const Allocator& alloc)
boost::dynamic_bitset::empty	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool empty() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
boost::dynamic_bitset::empty	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool dynamic_bitset<Block, Allocator>::empty() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::find_first	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type find_first() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
boost::dynamic_bitset::find_first	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::find_first() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::find_next	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type find_next(size_type pos) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type pos) const
boost::dynamic_bitset::find_next	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::find_next(size_type pos) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos) const
boost::dynamic_bitset::flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& flip();$/;"	p	class:boost::dynamic_bitset	access:public	signature:()
boost::dynamic_bitset::flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& flip(size_type n);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n)
boost::dynamic_bitset::flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::flip()$/;"	f	class:boost::dynamic_bitset	signature:()
boost::dynamic_bitset::flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::flip(size_type pos)$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos)
boost::dynamic_bitset::from_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend void from_block_range(BlockIterator first, BlockIterator last,$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(BlockIterator first, BlockIterator last, dynamic_bitset<B, A>& result)
boost::dynamic_bitset::get_allocator	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    allocator_type get_allocator() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
boost::dynamic_bitset::get_allocator	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::get_allocator() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::init_from_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void init_from_block_range(BlockIter first, BlockIter last)$/;"	f	class:boost::dynamic_bitset	access:public	signature:(BlockIter first, BlockIter last)
boost::dynamic_bitset::init_from_string	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void init_from_string(const std::basic_string<CharT, Traits, Alloc>& s,$/;"	f	class:boost::dynamic_bitset	access:private	signature:(const std::basic_string<CharT, Traits, Alloc>& s, typename std::basic_string<CharT, Traits, Alloc>::size_type pos, typename std::basic_string<CharT, Traits, Alloc>::size_type n, size_type num_bits)
boost::dynamic_bitset::init_from_unsigned_long	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void init_from_unsigned_long(size_type num_bits,$/;"	f	class:boost::dynamic_bitset	access:private	signature:(size_type num_bits, unsigned long value )
boost::dynamic_bitset::intersects	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool intersects(const dynamic_bitset & a) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset & a) const
boost::dynamic_bitset::intersects	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool dynamic_bitset<Block, Allocator>::intersects(const dynamic_bitset & b) const$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset & b) const
boost::dynamic_bitset::is_proper_subset_of	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool is_proper_subset_of(const dynamic_bitset& a) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& a) const
boost::dynamic_bitset::is_proper_subset_of	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^is_proper_subset_of(const dynamic_bitset<Block, Allocator>& a) const$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset<Block, Allocator>& a) const
boost::dynamic_bitset::is_subset_of	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool is_subset_of(const dynamic_bitset& a) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& a) const
boost::dynamic_bitset::is_subset_of	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^is_subset_of(const dynamic_bitset<Block, Allocator>& a) const$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset<Block, Allocator>& a) const
boost::dynamic_bitset::m_append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void m_append(BlockInputIterator first, BlockInputIterator last, std::forward_iterator_tag)$/;"	f	class:boost::dynamic_bitset	access:public	signature:(BlockInputIterator first, BlockInputIterator last, std::forward_iterator_tag)
boost::dynamic_bitset::m_append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void m_append(BlockInputIterator first, BlockInputIterator last, std::input_iterator_tag)$/;"	f	class:boost::dynamic_bitset	access:public	signature:(BlockInputIterator first, BlockInputIterator last, std::input_iterator_tag)
boost::dynamic_bitset::m_bits	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    buffer_type m_bits;$/;"	m	class:boost::dynamic_bitset	access:private
boost::dynamic_bitset::m_check_invariants	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool m_check_invariants() const;$/;"	p	class:boost::dynamic_bitset	access:private	signature:() const
boost::dynamic_bitset::m_check_invariants	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool dynamic_bitset<Block, Allocator>::m_check_invariants() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::m_do_find_from	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type m_do_find_from(size_type first_block) const;$/;"	p	class:boost::dynamic_bitset	access:private	signature:(size_type first_block) const
boost::dynamic_bitset::m_do_find_from	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::m_do_find_from(size_type first_block) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type first_block) const
boost::dynamic_bitset::m_highest_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    Block&        m_highest_block();$/;"	p	class:boost::dynamic_bitset	access:private	signature:()
boost::dynamic_bitset::m_highest_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    const Block&  m_highest_block() const;$/;"	p	class:boost::dynamic_bitset	access:private	signature:() const
boost::dynamic_bitset::m_highest_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline Block& dynamic_bitset<Block, Allocator>::m_highest_block()$/;"	f	class:boost::dynamic_bitset	signature:()
boost::dynamic_bitset::m_highest_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline const Block& dynamic_bitset<Block, Allocator>::m_highest_block() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::m_num_bits	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type   m_num_bits;$/;"	m	class:boost::dynamic_bitset	access:private
boost::dynamic_bitset::m_unchecked_test	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool m_unchecked_test(size_type pos) const;$/;"	p	class:boost::dynamic_bitset	access:private	signature:(size_type pos) const
boost::dynamic_bitset::m_unchecked_test	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool dynamic_bitset<Block, Allocator>::m_unchecked_test(size_type pos) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos) const
boost::dynamic_bitset::m_zero_unused_bits	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void m_zero_unused_bits();$/;"	p	class:boost::dynamic_bitset	access:private	signature:()
boost::dynamic_bitset::m_zero_unused_bits	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline void dynamic_bitset<Block, Allocator>::m_zero_unused_bits()$/;"	f	class:boost::dynamic_bitset	signature:()
boost::dynamic_bitset::max_size	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type max_size() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
boost::dynamic_bitset::max_size	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::max_size() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::none	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool none() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
boost::dynamic_bitset::none	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool dynamic_bitset<Block, Allocator>::none() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::npos	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::npos;$/;"	m	class:boost::dynamic_bitset
boost::dynamic_bitset::num_blocks	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type num_blocks() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
boost::dynamic_bitset::num_blocks	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::num_blocks() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::operator &=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator&=(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
boost::dynamic_bitset::operator &=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator&=(const dynamic_bitset& rhs)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset& rhs)
boost::dynamic_bitset::operator -=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator-=(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
boost::dynamic_bitset::operator -=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator-=(const dynamic_bitset& rhs)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset& rhs)
boost::dynamic_bitset::operator <	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend bool operator<(const dynamic_bitset<B, A>& a,$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(const dynamic_bitset<B, A>& a, const dynamic_bitset<B, A>& b)
boost::dynamic_bitset::operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset operator<<(size_type n) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n) const
boost::dynamic_bitset::operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator<<(size_type n) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type n) const
boost::dynamic_bitset::operator <<=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator<<=(size_type n);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n)
boost::dynamic_bitset::operator <<=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator<<=(size_type n)$/;"	f	class:boost::dynamic_bitset	signature:(size_type n)
boost::dynamic_bitset::operator =	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator=(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
boost::dynamic_bitset::operator =	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator=(const dynamic_bitset<Block, Allocator>& b)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset<Block, Allocator>& b)
boost::dynamic_bitset::operator ==	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend bool operator==(const dynamic_bitset<B, A>& a,$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(const dynamic_bitset<B, A>& a, const dynamic_bitset<B, A>& b)
boost::dynamic_bitset::operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset operator>>(size_type n) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n) const
boost::dynamic_bitset::operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend std::basic_istream<CharT, Traits>& operator>>(std::basic_istream<CharT, Traits>& is,$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(std::basic_istream<CharT, Traits>& is, dynamic_bitset<B, A>& b)
boost::dynamic_bitset::operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator>>(size_type n) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type n) const
boost::dynamic_bitset::operator >>=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator>>=(size_type n);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n)
boost::dynamic_bitset::operator >>=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<B, A> & dynamic_bitset<B, A>::operator>>=(size_type n) {$/;"	f	class:boost::dynamic_bitset	signature:(size_type n)
boost::dynamic_bitset::operator []	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool operator[](size_type pos) const { return test(pos); }$/;"	f	class:boost::dynamic_bitset	access:public	signature:(size_type pos) const
boost::dynamic_bitset::operator []	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    reference operator[](size_type pos) {$/;"	f	class:boost::dynamic_bitset	access:public	signature:(size_type pos)
boost::dynamic_bitset::operator ^=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator^=(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
boost::dynamic_bitset::operator ^=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator^=(const dynamic_bitset& rhs)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset& rhs)
boost::dynamic_bitset::operator |=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator|=(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
boost::dynamic_bitset::operator |=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator|=(const dynamic_bitset& rhs)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset& rhs)
boost::dynamic_bitset::operator ~	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset operator~() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
boost::dynamic_bitset::operator ~	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator~() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::push_back	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void push_back(bool bit);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(bool bit)
boost::dynamic_bitset::push_back	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^push_back(bool bit)$/;"	f	class:boost::dynamic_bitset	signature:(bool bit)
boost::dynamic_bitset::reference	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    class reference$/;"	c	class:boost::dynamic_bitset	access:public
boost::dynamic_bitset::reference::do_assign	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        void do_assign(bool x) { x? do_set() : do_reset(); }$/;"	f	class:boost::dynamic_bitset::reference	access:private	signature:(bool x)
boost::dynamic_bitset::reference::do_flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        void do_flip() { m_block ^= m_mask; }$/;"	f	class:boost::dynamic_bitset::reference	access:private	signature:()
boost::dynamic_bitset::reference::do_reset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        void do_reset() { m_block &= ~m_mask; }$/;"	f	class:boost::dynamic_bitset::reference	access:private	signature:()
boost::dynamic_bitset::reference::do_set	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        void do_set() { m_block |= m_mask; }$/;"	f	class:boost::dynamic_bitset::reference	access:private	signature:()
boost::dynamic_bitset::reference::flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& flip() { do_flip(); return *this; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:()
boost::dynamic_bitset::reference::m_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        block_type & m_block;$/;"	m	class:boost::dynamic_bitset::reference	access:private
boost::dynamic_bitset::reference::m_mask	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        const block_type m_mask;$/;"	m	class:boost::dynamic_bitset::reference	access:private
boost::dynamic_bitset::reference::operator &	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        void operator&(); \/\/ left undefined$/;"	p	class:boost::dynamic_bitset::reference	access:private	signature:()
boost::dynamic_bitset::reference::operator &=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator&=(bool x) { if (!x) do_reset(); return *this; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(bool x)
boost::dynamic_bitset::reference::operator -=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator-=(bool x) { if  (x) do_reset(); return *this; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(bool x)
boost::dynamic_bitset::reference::operator =	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator=(bool x)               { do_assign(x);   return *this; } \/\/ for b[i] = x$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(bool x)
boost::dynamic_bitset::reference::operator =	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator=(const reference& rhs) { do_assign(rhs); return *this; } \/\/ for b[i] = b[j]$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(const reference& rhs)
boost::dynamic_bitset::reference::operator ^=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator^=(bool x) { if  (x) do_flip();  return *this; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(bool x)
boost::dynamic_bitset::reference::operator bool	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        operator bool() const { return (m_block & m_mask) != 0; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:() const
boost::dynamic_bitset::reference::operator |=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator|=(bool x) { if  (x) do_set();   return *this; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(bool x)
boost::dynamic_bitset::reference::operator ~	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        bool operator~() const { return (m_block & m_mask) == 0; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:() const
boost::dynamic_bitset::reference::reference	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference(block_type & b, block_type pos)$/;"	f	class:boost::dynamic_bitset::reference	access:private	signature:(block_type & b, block_type pos)
boost::dynamic_bitset::reset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& reset();$/;"	p	class:boost::dynamic_bitset	access:public	signature:()
boost::dynamic_bitset::reset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& reset(size_type n);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n)
boost::dynamic_bitset::reset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::reset()$/;"	f	class:boost::dynamic_bitset	signature:()
boost::dynamic_bitset::reset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::reset(size_type pos)$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos)
boost::dynamic_bitset::resize	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void resize(size_type num_bits, bool value = false);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type num_bits, bool value = false)
boost::dynamic_bitset::resize	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^resize(size_type num_bits, bool value) \/\/ strong guarantee$/;"	f	class:boost::dynamic_bitset	signature:(size_type num_bits, bool value)
boost::dynamic_bitset::set	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& set();$/;"	p	class:boost::dynamic_bitset	access:public	signature:()
boost::dynamic_bitset::set	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& set(size_type n, bool val = true);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n, bool val = true)
boost::dynamic_bitset::set	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::set()$/;"	f	class:boost::dynamic_bitset	signature:()
boost::dynamic_bitset::set	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::set(size_type pos, bool val)$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos, bool val)
boost::dynamic_bitset::size	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type size() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
boost::dynamic_bitset::size	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::size() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::size_type	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef std::size_t size_type;$/;"	t	class:boost::dynamic_bitset	access:public
boost::dynamic_bitset::swap	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void swap(dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(dynamic_bitset& b)
boost::dynamic_bitset::swap	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^swap(dynamic_bitset<Block, Allocator>& b) \/\/ no throw$/;"	f	class:boost::dynamic_bitset	signature:(dynamic_bitset<Block, Allocator>& b)
boost::dynamic_bitset::test	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool test(size_type n) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n) const
boost::dynamic_bitset::test	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool dynamic_bitset<Block, Allocator>::test(size_type pos) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos) const
boost::dynamic_bitset::to_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend void to_block_range(const dynamic_bitset<B, A>& b,$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(const dynamic_bitset<B, A>& b, BlockOutputIterator result)
boost::dynamic_bitset::to_string_helper	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend void to_string_helper(const dynamic_bitset<B, A> & b, stringT & s, bool dump_all);$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(const dynamic_bitset<B, A> & b, stringT & s, bool dump_all)
boost::dynamic_bitset::to_ulong	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    unsigned long to_ulong() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
boost::dynamic_bitset::to_ulong	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^to_ulong() const$/;"	f	class:boost::dynamic_bitset	signature:() const
boost::dynamic_bitset::ulong_width	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::ulong_width;$/;"	m	class:boost::dynamic_bitset
boost::dynamic_bitset::~dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    ~dynamic_bitset();$/;"	p	class:boost::dynamic_bitset	access:public	signature:()
boost::dynamic_bitset::~dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^~dynamic_bitset()$/;"	f	class:boost::dynamic_bitset	signature:()
boost::from_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^from_block_range(BlockIterator first, BlockIterator last,$/;"	f	namespace:boost	signature:(BlockIterator first, BlockIterator last, dynamic_bitset<B, A>& result)
boost::operator !=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator!=(const dynamic_bitset<Block, Allocator>& a,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
boost::operator !=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool operator!=(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
boost::operator &	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator&(const dynamic_bitset<Block, Allocator>& b1,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b1, const dynamic_bitset<Block, Allocator>& b2)
boost::operator &	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator&(const dynamic_bitset<Block, Allocator>& x,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& x, const dynamic_bitset<Block, Allocator>& y)
boost::operator -	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator-(const dynamic_bitset<Block, Allocator>& b1,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b1, const dynamic_bitset<Block, Allocator>& b2)
boost::operator -	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator-(const dynamic_bitset<Block, Allocator>& x,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& x, const dynamic_bitset<Block, Allocator>& y)
boost::operator <	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator<(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
boost::operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator<<(std::basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost	signature:(std::basic_ostream<Ch, Tr>& os, const dynamic_bitset<Block, Alloc>& b)
boost::operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator<<(std::basic_ostream<CharT, Traits>& os,$/;"	p	namespace:boost	signature:(std::basic_ostream<CharT, Traits>& os, const dynamic_bitset<Block, Allocator>& b)
boost::operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator<<(std::ostream& os, const dynamic_bitset<Block, Alloc>& b)$/;"	f	namespace:boost	signature:(std::ostream& os, const dynamic_bitset<Block, Alloc>& b)
boost::operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^std::ostream& operator<<(std::ostream& os,$/;"	p	namespace:boost	signature:(std::ostream& os, const dynamic_bitset<Block, Allocator>& b)
boost::operator <=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator<=(const dynamic_bitset<Block, Allocator>& a,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
boost::operator <=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool operator<=(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
boost::operator ==	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator==(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
boost::operator >	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator>(const dynamic_bitset<Block, Allocator>& a,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
boost::operator >	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool operator>(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
boost::operator >=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator>=(const dynamic_bitset<Block, Allocator>& a,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
boost::operator >=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool operator>=(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
boost::operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator>>(std::basic_istream<Ch, Tr>& is, dynamic_bitset<Block, Alloc>& b)$/;"	f	namespace:boost	signature:(std::basic_istream<Ch, Tr>& is, dynamic_bitset<Block, Alloc>& b)
boost::operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator>>(std::basic_istream<CharT, Traits>& is,$/;"	p	namespace:boost	signature:(std::basic_istream<CharT, Traits>& is, dynamic_bitset<Block, Allocator>& b)
boost::operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator>>(std::istream& is, dynamic_bitset<Block, Alloc>& b)$/;"	f	namespace:boost	signature:(std::istream& is, dynamic_bitset<Block, Alloc>& b)
boost::operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^std::istream& operator>>(std::istream& is, dynamic_bitset<Block,Allocator>& b);$/;"	p	namespace:boost	signature:(std::istream& is, dynamic_bitset<Block,Allocator>& b)
boost::operator ^	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator^(const dynamic_bitset<Block, Allocator>& b1,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b1, const dynamic_bitset<Block, Allocator>& b2)
boost::operator ^	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator^(const dynamic_bitset<Block, Allocator>& x,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& x, const dynamic_bitset<Block, Allocator>& y)
boost::operator |	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator|(const dynamic_bitset<Block, Allocator>& b1,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b1, const dynamic_bitset<Block, Allocator>& b2)
boost::operator |	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator|(const dynamic_bitset<Block, Allocator>& x,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& x, const dynamic_bitset<Block, Allocator>& y)
boost::pseudo_sentry	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    class pseudo_sentry {$/;"	c	namespace:boost
boost::pseudo_sentry::m_ok	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        const bool m_ok;$/;"	m	class:boost::pseudo_sentry	access:private
boost::pseudo_sentry::m_r	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        std::istream & m_r;$/;"	m	class:boost::pseudo_sentry	access:private
boost::pseudo_sentry::operator bool	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        operator bool() const { return m_ok; }$/;"	f	class:boost::pseudo_sentry	access:public	signature:() const
boost::pseudo_sentry::pseudo_sentry	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        explicit pseudo_sentry(std::istream & r) : m_r(r), m_ok(r.ipfx(0)) { }$/;"	f	class:boost::pseudo_sentry	access:public	signature:(std::istream & r)
boost::pseudo_sentry::~pseudo_sentry	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        ~pseudo_sentry() { m_r.isfx(); }$/;"	f	class:boost::pseudo_sentry	access:public	signature:()
boost::swap	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^swap(dynamic_bitset<Block, Allocator>& left,$/;"	f	namespace:boost	signature:(dynamic_bitset<Block, Allocator>& left, dynamic_bitset<Block, Allocator>& right)
boost::swap	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^void swap(dynamic_bitset<Block, Allocator>& b1,$/;"	p	namespace:boost	signature:(dynamic_bitset<Block, Allocator>& b1, dynamic_bitset<Block, Allocator>& b2)
boost::to_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^to_block_range(const dynamic_bitset<Block, Allocator>& b,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b, BlockOutputIterator result)
boost::to_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^to_block_range(const dynamic_bitset<Block, Allocator>& b,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b, BlockOutputIterator result)
boost::to_string	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^to_string(const dynamic_bitset<Block, Allocator>& b, stringT & s);$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b, stringT & s)
boost::to_string	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^to_string(const dynamic_bitset<Block, Allocator>& b, stringT& s)$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b, stringT& s)
boost::to_string_helper	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^void to_string_helper(const dynamic_bitset<B, A> & b, stringT & s,$/;"	f	namespace:boost	signature:(const dynamic_bitset<B, A> & b, stringT & s, bool dump_all)
bs	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      dynamic_bitset & bs;$/;"	m	class:boost::dynamic_bitset::bit_appender	access:private
buffer_type	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef std::vector<block_type, allocator_type> buffer_type;$/;"	t	class:boost::dynamic_bitset	access:private
calc_num_blocks	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    static size_type calc_num_blocks(size_type num_bits);$/;"	p	class:boost::dynamic_bitset	access:private	signature:(size_type num_bits)
calc_num_blocks	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::calc_num_blocks(size_type num_bits)$/;"	f	class:boost::dynamic_bitset	signature:(size_type num_bits)
clear	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void clear();$/;"	p	class:boost::dynamic_bitset	access:public	signature:()
clear	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^clear() \/\/ no throw$/;"	f	class:boost::dynamic_bitset	signature:()
const_reference	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef bool const_reference;$/;"	t	class:boost::dynamic_bitset	access:public
count	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type count() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
count	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::count() const$/;"	f	class:boost::dynamic_bitset	signature:() const
count_extra_bits	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    block_width_type count_extra_bits() const { return bit_index(size()); }$/;"	f	class:boost::dynamic_bitset	access:private	signature:() const
current	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      Block * current;$/;"	m	class:boost::dynamic_bitset::bit_appender	access:private
detail	/usr/include/boost/dynamic_bitset/config.hpp	/^namespace boost { namespace detail {$/;"	n	namespace:boost
dispatch_init	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void dispatch_init(T first, T last,$/;"	f	class:boost::dynamic_bitset	access:public	signature:(T first, T last, detail::dynamic_bitset_impl::value_to_type<false>)
dispatch_init	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void dispatch_init(T num_bits, unsigned long value,$/;"	f	class:boost::dynamic_bitset	access:public	signature:(T num_bits, unsigned long value, detail::dynamic_bitset_impl::value_to_type<true>)
do_append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        inline void do_append(bool value) {$/;"	f	class:boost::dynamic_bitset::bit_appender	access:public	signature:(bool value)
do_assign	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        void do_assign(bool x) { x? do_set() : do_reset(); }$/;"	f	class:boost::dynamic_bitset::reference	access:private	signature:(bool x)
do_flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        void do_flip() { m_block ^= m_mask; }$/;"	f	class:boost::dynamic_bitset::reference	access:private	signature:()
do_reset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        void do_reset() { m_block &= ~m_mask; }$/;"	f	class:boost::dynamic_bitset::reference	access:private	signature:()
do_set	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        void do_set() { m_block |= m_mask; }$/;"	f	class:boost::dynamic_bitset::reference	access:private	signature:()
dump_to_string	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dump_to_string(const dynamic_bitset<B, A>& b, stringT& s)$/;"	f	namespace:boost	signature:(const dynamic_bitset<B, A>& b, stringT& s)
dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(BlockInputIterator first, BlockInputIterator last,$/;"	f	class:boost::dynamic_bitset	access:public	signature:(BlockInputIterator first, BlockInputIterator last, const Allocator& alloc = Allocator())
dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(const Allocator& alloc = Allocator());$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const Allocator& alloc = Allocator())
dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(const std::basic_string<CharT, Traits, Alloc>& s,$/;"	f	class:boost::dynamic_bitset	access:public	signature:(const std::basic_string<CharT, Traits, Alloc>& s, typename std::basic_string<CharT, Traits, Alloc>::size_type pos = 0)
dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(const std::basic_string<CharT, Traits, Alloc>& s,$/;"	f	class:boost::dynamic_bitset	access:public	signature:(const std::basic_string<CharT, Traits, Alloc>& s, typename std::basic_string<CharT, Traits, Alloc>::size_type pos, typename std::basic_string<CharT, Traits, Alloc>::size_type n, size_type num_bits = npos, const Allocator& alloc = Allocator())
dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset(size_type num_bits, unsigned long value = 0,$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type num_bits, unsigned long value = 0, const Allocator& alloc = Allocator())
dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^class dynamic_bitset$/;"	c	namespace:boost
dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset(const dynamic_bitset& b)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset& b)
dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset(size_type num_bits, unsigned long value, const Allocator& alloc)$/;"	f	class:boost::dynamic_bitset	signature:(size_type num_bits, unsigned long value, const Allocator& alloc)
dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::dynamic_bitset(const Allocator& alloc)$/;"	f	class:boost::dynamic_bitset	signature:(const Allocator& alloc)
empty	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool empty() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
empty	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool dynamic_bitset<Block, Allocator>::empty() const$/;"	f	class:boost::dynamic_bitset	signature:() const
find_first	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type find_first() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
find_first	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::find_first() const$/;"	f	class:boost::dynamic_bitset	signature:() const
find_next	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type find_next(size_type pos) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type pos) const
find_next	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::find_next(size_type pos) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos) const
flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& flip() { do_flip(); return *this; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:()
flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& flip();$/;"	p	class:boost::dynamic_bitset	access:public	signature:()
flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& flip(size_type n);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n)
flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::flip()$/;"	f	class:boost::dynamic_bitset	signature:()
flip	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::flip(size_type pos)$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos)
from_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend void from_block_range(BlockIterator first, BlockIterator last,$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(BlockIterator first, BlockIterator last, dynamic_bitset<B, A>& result)
from_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^from_block_range(BlockIterator first, BlockIterator last,$/;"	f	namespace:boost	signature:(BlockIterator first, BlockIterator last, dynamic_bitset<B, A>& result)
get_allocator	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    allocator_type get_allocator() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
get_allocator	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::get_allocator() const$/;"	f	class:boost::dynamic_bitset	signature:() const
get_count	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        size_type get_count() const { return n; }$/;"	f	class:boost::dynamic_bitset::bit_appender	access:public	signature:() const
init_from_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void init_from_block_range(BlockIter first, BlockIter last)$/;"	f	class:boost::dynamic_bitset	access:public	signature:(BlockIter first, BlockIter last)
init_from_string	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void init_from_string(const std::basic_string<CharT, Traits, Alloc>& s,$/;"	f	class:boost::dynamic_bitset	access:private	signature:(const std::basic_string<CharT, Traits, Alloc>& s, typename std::basic_string<CharT, Traits, Alloc>::size_type pos, typename std::basic_string<CharT, Traits, Alloc>::size_type n, size_type num_bits)
init_from_unsigned_long	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void init_from_unsigned_long(size_type num_bits,$/;"	f	class:boost::dynamic_bitset	access:private	signature:(size_type num_bits, unsigned long value )
intersects	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool intersects(const dynamic_bitset & a) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset & a) const
intersects	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool dynamic_bitset<Block, Allocator>::intersects(const dynamic_bitset & b) const$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset & b) const
is_proper_subset_of	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool is_proper_subset_of(const dynamic_bitset& a) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& a) const
is_proper_subset_of	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^is_proper_subset_of(const dynamic_bitset<Block, Allocator>& a) const$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset<Block, Allocator>& a) const
is_subset_of	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool is_subset_of(const dynamic_bitset& a) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& a) const
is_subset_of	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^is_subset_of(const dynamic_bitset<Block, Allocator>& a) const$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset<Block, Allocator>& a) const
m_append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void m_append(BlockInputIterator first, BlockInputIterator last, std::forward_iterator_tag)$/;"	f	class:boost::dynamic_bitset	access:public	signature:(BlockInputIterator first, BlockInputIterator last, std::forward_iterator_tag)
m_append	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void m_append(BlockInputIterator first, BlockInputIterator last, std::input_iterator_tag)$/;"	f	class:boost::dynamic_bitset	access:public	signature:(BlockInputIterator first, BlockInputIterator last, std::input_iterator_tag)
m_bits	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    buffer_type m_bits;$/;"	m	class:boost::dynamic_bitset	access:private
m_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        block_type & m_block;$/;"	m	class:boost::dynamic_bitset::reference	access:private
m_check_invariants	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool m_check_invariants() const;$/;"	p	class:boost::dynamic_bitset	access:private	signature:() const
m_check_invariants	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool dynamic_bitset<Block, Allocator>::m_check_invariants() const$/;"	f	class:boost::dynamic_bitset	signature:() const
m_do_find_from	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type m_do_find_from(size_type first_block) const;$/;"	p	class:boost::dynamic_bitset	access:private	signature:(size_type first_block) const
m_do_find_from	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::m_do_find_from(size_type first_block) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type first_block) const
m_highest_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    Block&        m_highest_block();$/;"	p	class:boost::dynamic_bitset	access:private	signature:()
m_highest_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    const Block&  m_highest_block() const;$/;"	p	class:boost::dynamic_bitset	access:private	signature:() const
m_highest_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline Block& dynamic_bitset<Block, Allocator>::m_highest_block()$/;"	f	class:boost::dynamic_bitset	signature:()
m_highest_block	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline const Block& dynamic_bitset<Block, Allocator>::m_highest_block() const$/;"	f	class:boost::dynamic_bitset	signature:() const
m_mask	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        const block_type m_mask;$/;"	m	class:boost::dynamic_bitset::reference	access:private
m_num_bits	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type   m_num_bits;$/;"	m	class:boost::dynamic_bitset	access:private
m_ok	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        const bool m_ok;$/;"	m	class:boost::pseudo_sentry	access:private
m_r	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        std::istream & m_r;$/;"	m	class:boost::pseudo_sentry	access:private
m_unchecked_test	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool m_unchecked_test(size_type pos) const;$/;"	p	class:boost::dynamic_bitset	access:private	signature:(size_type pos) const
m_unchecked_test	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool dynamic_bitset<Block, Allocator>::m_unchecked_test(size_type pos) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos) const
m_zero_unused_bits	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void m_zero_unused_bits();$/;"	p	class:boost::dynamic_bitset	access:private	signature:()
m_zero_unused_bits	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline void dynamic_bitset<Block, Allocator>::m_zero_unused_bits()$/;"	f	class:boost::dynamic_bitset	signature:()
make_non_const	/usr/include/boost/dynamic_bitset/config.hpp	/^    template <typename T> T make_non_const(T t) { return t; }$/;"	f	namespace:boost::detail	signature:(T t)
mask	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      Block mask;$/;"	m	class:boost::dynamic_bitset::bit_appender	access:private
max_size	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type max_size() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
max_size	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::max_size() const$/;"	f	class:boost::dynamic_bitset	signature:() const
n	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      size_type n;$/;"	m	class:boost::dynamic_bitset::bit_appender	access:private
none	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool none() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
none	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool dynamic_bitset<Block, Allocator>::none() const$/;"	f	class:boost::dynamic_bitset	signature:() const
npos	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::npos;$/;"	m	class:boost::dynamic_bitset
num_blocks	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type num_blocks() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
num_blocks	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::num_blocks() const$/;"	f	class:boost::dynamic_bitset	signature:() const
operator !=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator!=(const dynamic_bitset<Block, Allocator>& a,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
operator !=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool operator!=(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
operator &	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        void operator&(); \/\/ left undefined$/;"	p	class:boost::dynamic_bitset::reference	access:private	signature:()
operator &	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator&(const dynamic_bitset<Block, Allocator>& b1,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b1, const dynamic_bitset<Block, Allocator>& b2)
operator &	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator&(const dynamic_bitset<Block, Allocator>& x,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& x, const dynamic_bitset<Block, Allocator>& y)
operator &=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator&=(bool x) { if (!x) do_reset(); return *this; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(bool x)
operator &=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator&=(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
operator &=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator&=(const dynamic_bitset& rhs)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset& rhs)
operator -	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator-(const dynamic_bitset<Block, Allocator>& b1,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b1, const dynamic_bitset<Block, Allocator>& b2)
operator -	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator-(const dynamic_bitset<Block, Allocator>& x,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& x, const dynamic_bitset<Block, Allocator>& y)
operator -=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator-=(bool x) { if  (x) do_reset(); return *this; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(bool x)
operator -=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator-=(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
operator -=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator-=(const dynamic_bitset& rhs)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset& rhs)
operator <	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend bool operator<(const dynamic_bitset<B, A>& a,$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(const dynamic_bitset<B, A>& a, const dynamic_bitset<B, A>& b)
operator <	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator<(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset operator<<(size_type n) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n) const
operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator<<(size_type n) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type n) const
operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator<<(std::basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost	signature:(std::basic_ostream<Ch, Tr>& os, const dynamic_bitset<Block, Alloc>& b)
operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator<<(std::basic_ostream<CharT, Traits>& os,$/;"	p	namespace:boost	signature:(std::basic_ostream<CharT, Traits>& os, const dynamic_bitset<Block, Allocator>& b)
operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator<<(std::ostream& os, const dynamic_bitset<Block, Alloc>& b)$/;"	f	namespace:boost	signature:(std::ostream& os, const dynamic_bitset<Block, Alloc>& b)
operator <<	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^std::ostream& operator<<(std::ostream& os,$/;"	p	namespace:boost	signature:(std::ostream& os, const dynamic_bitset<Block, Allocator>& b)
operator <<=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator<<=(size_type n);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n)
operator <<=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator<<=(size_type n)$/;"	f	class:boost::dynamic_bitset	signature:(size_type n)
operator <=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator<=(const dynamic_bitset<Block, Allocator>& a,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
operator <=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool operator<=(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
operator =	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator=(bool x)               { do_assign(x);   return *this; } \/\/ for b[i] = x$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(bool x)
operator =	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator=(const reference& rhs) { do_assign(rhs); return *this; } \/\/ for b[i] = b[j]$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(const reference& rhs)
operator =	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^      bit_appender & operator=(const bit_appender &);$/;"	p	class:boost::dynamic_bitset::bit_appender	access:private	signature:(const bit_appender &)
operator =	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator=(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
operator =	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator=(const dynamic_bitset<Block, Allocator>& b)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset<Block, Allocator>& b)
operator ==	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend bool operator==(const dynamic_bitset<B, A>& a,$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(const dynamic_bitset<B, A>& a, const dynamic_bitset<B, A>& b)
operator ==	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator==(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
operator >	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator>(const dynamic_bitset<Block, Allocator>& a,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
operator >	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool operator>(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
operator >=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool operator>=(const dynamic_bitset<Block, Allocator>& a,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
operator >=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^inline bool operator>=(const dynamic_bitset<Block, Allocator>& a,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& a, const dynamic_bitset<Block, Allocator>& b)
operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset operator>>(size_type n) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n) const
operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend std::basic_istream<CharT, Traits>& operator>>(std::basic_istream<CharT, Traits>& is,$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(std::basic_istream<CharT, Traits>& is, dynamic_bitset<B, A>& b)
operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator>>(size_type n) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type n) const
operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator>>(std::basic_istream<Ch, Tr>& is, dynamic_bitset<Block, Alloc>& b)$/;"	f	namespace:boost	signature:(std::basic_istream<Ch, Tr>& is, dynamic_bitset<Block, Alloc>& b)
operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator>>(std::basic_istream<CharT, Traits>& is,$/;"	p	namespace:boost	signature:(std::basic_istream<CharT, Traits>& is, dynamic_bitset<Block, Allocator>& b)
operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator>>(std::istream& is, dynamic_bitset<Block, Alloc>& b)$/;"	f	namespace:boost	signature:(std::istream& is, dynamic_bitset<Block, Alloc>& b)
operator >>	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^std::istream& operator>>(std::istream& is, dynamic_bitset<Block,Allocator>& b);$/;"	p	namespace:boost	signature:(std::istream& is, dynamic_bitset<Block,Allocator>& b)
operator >>=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator>>=(size_type n);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n)
operator >>=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<B, A> & dynamic_bitset<B, A>::operator>>=(size_type n) {$/;"	f	class:boost::dynamic_bitset	signature:(size_type n)
operator []	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool operator[](size_type pos) const { return test(pos); }$/;"	f	class:boost::dynamic_bitset	access:public	signature:(size_type pos) const
operator []	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    reference operator[](size_type pos) {$/;"	f	class:boost::dynamic_bitset	access:public	signature:(size_type pos)
operator ^	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator^(const dynamic_bitset<Block, Allocator>& b1,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b1, const dynamic_bitset<Block, Allocator>& b2)
operator ^	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator^(const dynamic_bitset<Block, Allocator>& x,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& x, const dynamic_bitset<Block, Allocator>& y)
operator ^=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator^=(bool x) { if  (x) do_flip();  return *this; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(bool x)
operator ^=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator^=(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
operator ^=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator^=(const dynamic_bitset& rhs)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset& rhs)
operator bool	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        operator bool() const { return (m_block & m_mask) != 0; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:() const
operator bool	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        operator bool() const { return m_ok; }$/;"	f	class:boost::pseudo_sentry	access:public	signature:() const
operator |	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator|(const dynamic_bitset<Block, Allocator>& b1,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b1, const dynamic_bitset<Block, Allocator>& b2)
operator |	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^operator|(const dynamic_bitset<Block, Allocator>& x,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& x, const dynamic_bitset<Block, Allocator>& y)
operator |=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference& operator|=(bool x) { if  (x) do_set();   return *this; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:(bool x)
operator |=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& operator|=(const dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(const dynamic_bitset& b)
operator |=	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator|=(const dynamic_bitset& rhs)$/;"	f	class:boost::dynamic_bitset	signature:(const dynamic_bitset& rhs)
operator ~	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        bool operator~() const { return (m_block & m_mask) == 0; }$/;"	f	class:boost::dynamic_bitset::reference	access:public	signature:() const
operator ~	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset operator~() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
operator ~	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::operator~() const$/;"	f	class:boost::dynamic_bitset	signature:() const
pseudo_sentry	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        explicit pseudo_sentry(std::istream & r) : m_r(r), m_ok(r.ipfx(0)) { }$/;"	f	class:boost::pseudo_sentry	access:public	signature:(std::istream & r)
pseudo_sentry	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    class pseudo_sentry {$/;"	c	namespace:boost
push_back	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void push_back(bool bit);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(bool bit)
push_back	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^push_back(bool bit)$/;"	f	class:boost::dynamic_bitset	signature:(bool bit)
reference	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        reference(block_type & b, block_type pos)$/;"	f	class:boost::dynamic_bitset::reference	access:private	signature:(block_type & b, block_type pos)
reference	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    class reference$/;"	c	class:boost::dynamic_bitset	access:public
reset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& reset();$/;"	p	class:boost::dynamic_bitset	access:public	signature:()
reset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& reset(size_type n);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n)
reset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::reset()$/;"	f	class:boost::dynamic_bitset	signature:()
reset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::reset(size_type pos)$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos)
resize	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void resize(size_type num_bits, bool value = false);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type num_bits, bool value = false)
resize	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^resize(size_type num_bits, bool value) \/\/ strong guarantee$/;"	f	class:boost::dynamic_bitset	signature:(size_type num_bits, bool value)
set	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& set();$/;"	p	class:boost::dynamic_bitset	access:public	signature:()
set	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    dynamic_bitset& set(size_type n, bool val = true);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n, bool val = true)
set	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::set()$/;"	f	class:boost::dynamic_bitset	signature:()
set	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::set(size_type pos, bool val)$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos, bool val)
size	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    size_type size() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
size	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::size() const$/;"	f	class:boost::dynamic_bitset	signature:() const
size_type	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    typedef std::size_t size_type;$/;"	t	class:boost::dynamic_bitset	access:public
swap	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    void swap(dynamic_bitset& b);$/;"	p	class:boost::dynamic_bitset	access:public	signature:(dynamic_bitset& b)
swap	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^swap(dynamic_bitset<Block, Allocator>& b) \/\/ no throw$/;"	f	class:boost::dynamic_bitset	signature:(dynamic_bitset<Block, Allocator>& b)
swap	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^swap(dynamic_bitset<Block, Allocator>& left,$/;"	f	namespace:boost	signature:(dynamic_bitset<Block, Allocator>& left, dynamic_bitset<Block, Allocator>& right)
swap	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^void swap(dynamic_bitset<Block, Allocator>& b1,$/;"	p	namespace:boost	signature:(dynamic_bitset<Block, Allocator>& b1, dynamic_bitset<Block, Allocator>& b2)
test	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    bool test(size_type n) const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:(size_type n) const
test	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^bool dynamic_bitset<Block, Allocator>::test(size_type pos) const$/;"	f	class:boost::dynamic_bitset	signature:(size_type pos) const
to_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend void to_block_range(const dynamic_bitset<B, A>& b,$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(const dynamic_bitset<B, A>& b, BlockOutputIterator result)
to_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^to_block_range(const dynamic_bitset<Block, Allocator>& b,$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b, BlockOutputIterator result)
to_block_range	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^to_block_range(const dynamic_bitset<Block, Allocator>& b,$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b, BlockOutputIterator result)
to_string	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^to_string(const dynamic_bitset<Block, Allocator>& b, stringT & s);$/;"	p	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b, stringT & s)
to_string	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^to_string(const dynamic_bitset<Block, Allocator>& b, stringT& s)$/;"	f	namespace:boost	signature:(const dynamic_bitset<Block, Allocator>& b, stringT& s)
to_string_helper	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    friend void to_string_helper(const dynamic_bitset<B, A> & b, stringT & s, bool dump_all);$/;"	p	class:boost::dynamic_bitset	access:friend	signature:(const dynamic_bitset<B, A> & b, stringT & s, bool dump_all)
to_string_helper	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^void to_string_helper(const dynamic_bitset<B, A> & b, stringT & s,$/;"	f	namespace:boost	signature:(const dynamic_bitset<B, A> & b, stringT & s, bool dump_all)
to_ulong	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    unsigned long to_ulong() const;$/;"	p	class:boost::dynamic_bitset	access:public	signature:() const
to_ulong	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^to_ulong() const$/;"	f	class:boost::dynamic_bitset	signature:() const
ulong_width	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^dynamic_bitset<Block, Allocator>::ulong_width;$/;"	m	class:boost::dynamic_bitset
~bit_appender	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        ~bit_appender() {$/;"	f	class:boost::dynamic_bitset::bit_appender	access:public	signature:()
~dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^    ~dynamic_bitset();$/;"	p	class:boost::dynamic_bitset	access:public	signature:()
~dynamic_bitset	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^~dynamic_bitset()$/;"	f	class:boost::dynamic_bitset	signature:()
~pseudo_sentry	/usr/include/boost/dynamic_bitset/dynamic_bitset.hpp	/^        ~pseudo_sentry() { m_r.isfx(); }$/;"	f	class:boost::pseudo_sentry	access:public	signature:()
