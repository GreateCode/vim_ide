!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_DYN_LINK	/usr/include/boost/signals/detail/config.hpp	39;"	d
BOOST_LIB_NAME	/usr/include/boost/signals/detail/config.hpp	36;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal0.hpp	17;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal0.hpp	31;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal1.hpp	17;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal1.hpp	31;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal10.hpp	17;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal10.hpp	31;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal2.hpp	17;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal2.hpp	31;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal3.hpp	17;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal3.hpp	31;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal4.hpp	17;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal4.hpp	31;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal5.hpp	17;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal5.hpp	31;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal6.hpp	17;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal6.hpp	31;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal7.hpp	17;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal7.hpp	31;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal8.hpp	17;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal8.hpp	31;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal9.hpp	17;"	d
BOOST_SIGNALS_ARGS	/usr/include/boost/signals/signal9.hpp	31;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal0.hpp	19;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal0.hpp	29;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal1.hpp	19;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal1.hpp	29;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal10.hpp	19;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal10.hpp	29;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal2.hpp	19;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal2.hpp	29;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal3.hpp	19;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal3.hpp	29;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal4.hpp	19;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal4.hpp	29;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal5.hpp	19;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal5.hpp	29;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal6.hpp	19;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal6.hpp	29;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal7.hpp	19;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal7.hpp	29;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal8.hpp	19;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal8.hpp	29;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal9.hpp	19;"	d
BOOST_SIGNALS_ARGS_AS_MEMBERS	/usr/include/boost/signals/signal9.hpp	29;"	d
BOOST_SIGNALS_ARGS_STRUCT	/usr/include/boost/signals/signal_template.hpp	/^      struct BOOST_SIGNALS_ARGS_STRUCT {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
BOOST_SIGNALS_ARGS_STRUCT	/usr/include/boost/signals/signal_template.hpp	403;"	d
BOOST_SIGNALS_ARGS_STRUCT	/usr/include/boost/signals/signal_template.hpp	50;"	d
BOOST_SIGNALS_ARGS_STRUCT_INST	/usr/include/boost/signals/signal_template.hpp	401;"	d
BOOST_SIGNALS_ARGS_STRUCT_INST	/usr/include/boost/signals/signal_template.hpp	54;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal0.hpp	22;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal0.hpp	26;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal1.hpp	22;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal1.hpp	26;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal10.hpp	22;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal10.hpp	26;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal2.hpp	22;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal2.hpp	26;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal3.hpp	22;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal3.hpp	26;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal4.hpp	22;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal4.hpp	26;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal5.hpp	22;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal5.hpp	26;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal6.hpp	22;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal6.hpp	26;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal7.hpp	22;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal7.hpp	26;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal8.hpp	22;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal8.hpp	26;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal9.hpp	22;"	d
BOOST_SIGNALS_ARG_TYPES	/usr/include/boost/signals/signal9.hpp	26;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal0.hpp	18;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal0.hpp	30;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal1.hpp	18;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal1.hpp	30;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal10.hpp	18;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal10.hpp	30;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal2.hpp	18;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal2.hpp	30;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal3.hpp	18;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal3.hpp	30;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal4.hpp	18;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal4.hpp	30;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal5.hpp	18;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal5.hpp	30;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal6.hpp	18;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal6.hpp	30;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal7.hpp	18;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal7.hpp	30;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal8.hpp	18;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal8.hpp	30;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal9.hpp	18;"	d
BOOST_SIGNALS_BOUND_ARGS	/usr/include/boost/signals/signal9.hpp	30;"	d
BOOST_SIGNALS_CALL_BOUND	/usr/include/boost/signals/signal_template.hpp	/^      struct BOOST_SIGNALS_CALL_BOUND {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
BOOST_SIGNALS_CALL_BOUND	/usr/include/boost/signals/signal_template.hpp	/^      struct BOOST_SIGNALS_CALL_BOUND<void> {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
BOOST_SIGNALS_CALL_BOUND	/usr/include/boost/signals/signal_template.hpp	402;"	d
BOOST_SIGNALS_CALL_BOUND	/usr/include/boost/signals/signal_template.hpp	51;"	d
BOOST_SIGNALS_COMMA_IF_NONZERO_ARGS	/usr/include/boost/signals/signal_template.hpp	406;"	d
BOOST_SIGNALS_COMMA_IF_NONZERO_ARGS	/usr/include/boost/signals/signal_template.hpp	42;"	d
BOOST_SIGNALS_COMMA_IF_NONZERO_ARGS	/usr/include/boost/signals/signal_template.hpp	44;"	d
BOOST_SIGNALS_COMMON_HEADER	/usr/include/boost/signals/detail/signals_common.hpp	11;"	d
BOOST_SIGNALS_CONFIG_HPP	/usr/include/boost/signals/detail/config.hpp	16;"	d
BOOST_SIGNALS_CONNECTION_HPP	/usr/include/boost/signals/connection.hpp	11;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal0.hpp	20;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal0.hpp	28;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal1.hpp	20;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal1.hpp	28;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal10.hpp	20;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal10.hpp	28;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal2.hpp	20;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal2.hpp	28;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal3.hpp	20;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal3.hpp	28;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal4.hpp	20;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal4.hpp	28;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal5.hpp	20;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal5.hpp	28;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal6.hpp	20;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal6.hpp	28;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal7.hpp	20;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal7.hpp	28;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal8.hpp	20;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal8.hpp	28;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal9.hpp	20;"	d
BOOST_SIGNALS_COPY_PARMS	/usr/include/boost/signals/signal9.hpp	28;"	d
BOOST_SIGNALS_DECL	/usr/include/boost/signals/detail/config.hpp	23;"	d
BOOST_SIGNALS_DECL	/usr/include/boost/signals/detail/config.hpp	25;"	d
BOOST_SIGNALS_DECL	/usr/include/boost/signals/detail/config.hpp	31;"	d
BOOST_SIGNALS_FUNCTION	/usr/include/boost/signals/signal_template.hpp	404;"	d
BOOST_SIGNALS_FUNCTION	/usr/include/boost/signals/signal_template.hpp	49;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal0.hpp	21;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal0.hpp	27;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal1.hpp	21;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal1.hpp	27;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal10.hpp	21;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal10.hpp	27;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal2.hpp	21;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal2.hpp	27;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal3.hpp	21;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal3.hpp	27;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal4.hpp	21;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal4.hpp	27;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal5.hpp	21;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal5.hpp	27;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal6.hpp	21;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal6.hpp	27;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal7.hpp	21;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal7.hpp	27;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal8.hpp	21;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal8.hpp	27;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal9.hpp	21;"	d
BOOST_SIGNALS_INIT_ARGS	/usr/include/boost/signals/signal9.hpp	27;"	d
BOOST_SIGNALS_NAMED_SLOT_MAP_HPP	/usr/include/boost/signals/detail/named_slot_map.hpp	11;"	d
BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/connection.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/detail/named_slot_map.hpp	/^namespace boost { namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/detail/signal_base.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/detail/signals_common.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/detail/signals_common.hpp	14;"	d
BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/signal_template.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/slot.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/trackable.hpp	/^namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal0.hpp	13;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal0.hpp	35;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal1.hpp	13;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal1.hpp	35;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal10.hpp	13;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal10.hpp	35;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal2.hpp	13;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal2.hpp	35;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal3.hpp	13;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal3.hpp	35;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal4.hpp	13;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal4.hpp	35;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal5.hpp	13;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal5.hpp	35;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal6.hpp	13;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal6.hpp	35;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal7.hpp	13;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal7.hpp	35;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal8.hpp	13;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal8.hpp	35;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal9.hpp	13;"	d
BOOST_SIGNALS_NUM_ARGS	/usr/include/boost/signals/signal9.hpp	35;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal0.hpp	16;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal0.hpp	32;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal1.hpp	16;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal1.hpp	32;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal10.hpp	16;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal10.hpp	32;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal2.hpp	16;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal2.hpp	32;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal3.hpp	16;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal3.hpp	32;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal4.hpp	16;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal4.hpp	32;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal5.hpp	16;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal5.hpp	32;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal6.hpp	16;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal6.hpp	32;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal7.hpp	16;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal7.hpp	32;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal8.hpp	16;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal8.hpp	32;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal9.hpp	16;"	d
BOOST_SIGNALS_PARMS	/usr/include/boost/signals/signal9.hpp	32;"	d
BOOST_SIGNALS_SIGNAL	/usr/include/boost/signals/signal_template.hpp	/^    BOOST_SIGNALS_SIGNAL(const Combiner& c = Combiner(),$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(const Combiner& c = Combiner(), const GroupCompare& comp = GroupCompare())
BOOST_SIGNALS_SIGNAL	/usr/include/boost/signals/signal_template.hpp	/^  class BOOST_SIGNALS_SIGNAL :$/;"	c	namespace:boost	inherits:BOOST_SIGNALS_NAMESPACE::detail::signal_base,BOOST_SIGNALS_NAMESPACE::trackable
BOOST_SIGNALS_SIGNAL	/usr/include/boost/signals/signal_template.hpp	405;"	d
BOOST_SIGNALS_SIGNAL	/usr/include/boost/signals/signal_template.hpp	48;"	d
BOOST_SIGNALS_SIGNAL0_HEADER	/usr/include/boost/signals/signal0.hpp	11;"	d
BOOST_SIGNALS_SIGNAL10_HEADER	/usr/include/boost/signals/signal10.hpp	11;"	d
BOOST_SIGNALS_SIGNAL1_HEADER	/usr/include/boost/signals/signal1.hpp	11;"	d
BOOST_SIGNALS_SIGNAL2_HEADER	/usr/include/boost/signals/signal2.hpp	11;"	d
BOOST_SIGNALS_SIGNAL3_HEADER	/usr/include/boost/signals/signal3.hpp	11;"	d
BOOST_SIGNALS_SIGNAL4_HEADER	/usr/include/boost/signals/signal4.hpp	11;"	d
BOOST_SIGNALS_SIGNAL5_HEADER	/usr/include/boost/signals/signal5.hpp	11;"	d
BOOST_SIGNALS_SIGNAL6_HEADER	/usr/include/boost/signals/signal6.hpp	11;"	d
BOOST_SIGNALS_SIGNAL7_HEADER	/usr/include/boost/signals/signal7.hpp	11;"	d
BOOST_SIGNALS_SIGNAL8_HEADER	/usr/include/boost/signals/signal8.hpp	11;"	d
BOOST_SIGNALS_SIGNAL9_HEADER	/usr/include/boost/signals/signal9.hpp	11;"	d
BOOST_SIGNALS_SIGNAL_BASE_HEADER	/usr/include/boost/signals/detail/signal_base.hpp	11;"	d
BOOST_SIGNALS_SIGNAL_TEMPLATE_HEADER_INCLUDED	/usr/include/boost/signals/signal_template.hpp	16;"	d
BOOST_SIGNALS_SLOT_CALL_ITERATOR	/usr/include/boost/signals/detail/slot_call_iterator.hpp	11;"	d
BOOST_SIGNALS_SLOT_HEADER	/usr/include/boost/signals/slot.hpp	11;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal0.hpp	15;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal0.hpp	33;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal1.hpp	15;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal1.hpp	33;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal10.hpp	15;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal10.hpp	33;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal2.hpp	15;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal2.hpp	33;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal3.hpp	15;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal3.hpp	33;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal4.hpp	15;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal4.hpp	33;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal5.hpp	15;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal5.hpp	33;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal6.hpp	15;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal6.hpp	33;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal7.hpp	15;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal7.hpp	33;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal8.hpp	15;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal8.hpp	33;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal9.hpp	15;"	d
BOOST_SIGNALS_TEMPLATE_ARGS	/usr/include/boost/signals/signal9.hpp	33;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal0.hpp	14;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal0.hpp	34;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal1.hpp	14;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal1.hpp	34;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal10.hpp	14;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal10.hpp	34;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal2.hpp	14;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal2.hpp	34;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal3.hpp	14;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal3.hpp	34;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal4.hpp	14;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal4.hpp	34;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal5.hpp	14;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal5.hpp	34;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal6.hpp	14;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal6.hpp	34;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal7.hpp	14;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal7.hpp	34;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal8.hpp	14;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal8.hpp	34;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal9.hpp	14;"	d
BOOST_SIGNALS_TEMPLATE_PARMS	/usr/include/boost/signals/signal9.hpp	34;"	d
BOOST_SIGNALS_TRACKABLE_HPP	/usr/include/boost/signals/trackable.hpp	11;"	d
BOOST_SIGNAL_FUNCTION_N_HEADER	/usr/include/boost/signals/signal_template.hpp	37;"	d
BOOST_SIGNAL_FUNCTION_N_HEADER	/usr/include/boost/signals/signal_template.hpp	400;"	d
BOOST_STATIC_CONSTANT	/usr/include/boost/signals/detail/signals_common.hpp	/^        BOOST_STATIC_CONSTANT(bool, value = false);$/;"	p	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref	access:public	signature:(bool, value = false)
BOOST_STATIC_CONSTANT	/usr/include/boost/signals/detail/signals_common.hpp	/^        BOOST_STATIC_CONSTANT(bool, value = true);$/;"	p	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref	access:public	signature:(bool, value = true)
BOOST_STATIC_CONSTANT	/usr/include/boost/signals/detail/signals_common.hpp	/^        BOOST_STATIC_CONSTANT(bool,$/;"	p	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref	access:public	signature:(bool, value = (sizeof(is_ref_tester(t)) == sizeof(yes_type)))
BOOST_STATIC_CONSTANT	/usr/include/boost/signals/detail/signals_common.hpp	/^        BOOST_STATIC_CONSTANT(bool,$/;"	p	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_signal	access:public	signature:(bool, value = (is_convertible<T*, signal_base*>::value))
IF	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct IF$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
Result	/usr/include/boost/signals/detail/signals_common.hpp	/^          struct Result$/;"	s	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectElse	access:public
Result	/usr/include/boost/signals/detail/signals_common.hpp	/^          struct Result$/;"	s	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectThen	access:public
SelectElse	/usr/include/boost/signals/detail/signals_common.hpp	/^        struct SelectElse$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate
SelectThen	/usr/include/boost/signals/detail/signals_common.hpp	/^        struct SelectThen$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate
Selector	/usr/include/boost/signals/detail/signals_common.hpp	/^        struct Selector$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate
Selector	/usr/include/boost/signals/detail/signals_common.hpp	/^        struct Selector<false>$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate
add_bound_object	/usr/include/boost/signals/connection.hpp	/^      void add_bound_object(const BOOST_SIGNALS_NAMESPACE::detail::bound_object& b);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:private	signature:(const BOOST_SIGNALS_NAMESPACE::detail::bound_object& b)
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      add_if_trackable(R (*)(T1, T2, T3, T4, T5, T6, T7, T8)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5, T6, T7, T8)) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      add_if_trackable(R (*)(T1, T2, T3, T4, T5, T6, T7, T8, T9)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5, T6, T7, T8, T9)) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      add_if_trackable(R (*)(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)()) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ())) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1)) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2)) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2, T3)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3)) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2, T3, T4)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4)) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2, T3, T4, T5)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5)) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2, T3, T4, T5, T6)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5, T6)) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2, T3, T4, T5, T6, T7)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5, T6, T7)) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(const trackable* b) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const trackable* b) const
add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(const void*) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const void*) const
advance	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void advance(difference_type);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:(difference_type)
args	/usr/include/boost/signals/signal_template.hpp	/^          args_type args;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public
args_type	/usr/include/boost/signals/signal_template.hpp	/^            args_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public
argument_type	/usr/include/boost/signals/connection.hpp	/^        typedef connection_slot_pair argument_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_callable	access:public
argument_type	/usr/include/boost/signals/connection.hpp	/^        typedef connection_slot_pair argument_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_disconnected	access:public
argument_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef T1 argument_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
at_back	/usr/include/boost/signals/detail/named_slot_map.hpp	/^enum connect_position { at_back, at_front };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::connect_position
at_front	/usr/include/boost/signals/detail/named_slot_map.hpp	/^enum connect_position { at_back, at_front };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::connect_position
auto_disconnect	/usr/include/boost/signals/connection.hpp	/^        bool auto_disconnect;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object	access:private
auto_disconnect_bound_object	/usr/include/boost/signals/connection.hpp	/^        auto_disconnect_bound_object(const bound_object& b) :$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object	access:public	signature:(const bound_object& b)
auto_disconnect_bound_object	/usr/include/boost/signals/connection.hpp	/^      class auto_disconnect_bound_object {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
back	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  group_iterator back;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
base	/usr/include/boost/signals/detail/signal_base.hpp	/^          signal_base_impl* base;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::temporarily_set_clearing	access:private
basic_connection	/usr/include/boost/signals/connection.hpp	/^      struct basic_connection {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
begin	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  iterator begin();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:()
binding	/usr/include/boost/signals/connection.hpp	/^        bound_object binding;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object	access:private
block	/usr/include/boost/signals/connection.hpp	/^      void block(bool should_block = true) { con->blocked_ = should_block; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(bool should_block = true)
blocked	/usr/include/boost/signals/connection.hpp	/^      bool blocked() const { return !connected() || con->blocked_; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:() const
blocked_	/usr/include/boost/signals/connection.hpp	/^        bool blocked_;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection	access:public
boost	/usr/include/boost/signals/connection.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals/detail/named_slot_map.hpp	/^namespace boost { namespace BOOST_SIGNALS_NAMESPACE {$/;"	n
boost	/usr/include/boost/signals/detail/signal_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals/detail/signals_common.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals/signal_template.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals/slot.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/signals/trackable.hpp	/^namespace boost {$/;"	n
boost::BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/connection.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
boost::BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/detail/named_slot_map.hpp	/^namespace boost { namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
boost::BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/detail/signal_base.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
boost::BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/detail/signals_common.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
boost::BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
boost::BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/signal_template.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
boost::BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/slot.hpp	/^  namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
boost::BOOST_SIGNALS_NAMESPACE	/usr/include/boost/signals/trackable.hpp	/^namespace BOOST_SIGNALS_NAMESPACE {$/;"	n	namespace:boost
boost::BOOST_SIGNALS_NAMESPACE::at_back	/usr/include/boost/signals/detail/named_slot_map.hpp	/^enum connect_position { at_back, at_front };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::connect_position
boost::BOOST_SIGNALS_NAMESPACE::at_front	/usr/include/boost/signals/detail/named_slot_map.hpp	/^enum connect_position { at_back, at_front };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::connect_position
boost::BOOST_SIGNALS_NAMESPACE::connect_position	/usr/include/boost/signals/detail/named_slot_map.hpp	/^enum connect_position { at_back, at_front };$/;"	g	namespace:boost::BOOST_SIGNALS_NAMESPACE
boost::BOOST_SIGNALS_NAMESPACE::connection	/usr/include/boost/signals/connection.hpp	/^    class BOOST_SIGNALS_DECL connection :$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE	inherits:less_than_comparable1,equality_comparable1
boost::BOOST_SIGNALS_NAMESPACE::connection::add_bound_object	/usr/include/boost/signals/connection.hpp	/^      void add_bound_object(const BOOST_SIGNALS_NAMESPACE::detail::bound_object& b);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:private	signature:(const BOOST_SIGNALS_NAMESPACE::detail::bound_object& b)
boost::BOOST_SIGNALS_NAMESPACE::connection::block	/usr/include/boost/signals/connection.hpp	/^      void block(bool should_block = true) { con->blocked_ = should_block; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(bool should_block = true)
boost::BOOST_SIGNALS_NAMESPACE::connection::blocked	/usr/include/boost/signals/connection.hpp	/^      bool blocked() const { return !connected() || con->blocked_; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::connection::con	/usr/include/boost/signals/connection.hpp	/^      shared_ptr<BOOST_SIGNALS_NAMESPACE::detail::basic_connection> con;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:private
boost::BOOST_SIGNALS_NAMESPACE::connection::connected	/usr/include/boost/signals/connection.hpp	/^      bool connected() const { return con.get() && con->signal_disconnect; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::connection::connection	/usr/include/boost/signals/connection.hpp	/^      connection() : con(), controlling_connection(false) {}$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::connection::connection	/usr/include/boost/signals/connection.hpp	/^      connection(const connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(const connection&)
boost::BOOST_SIGNALS_NAMESPACE::connection::controlling_connection	/usr/include/boost/signals/connection.hpp	/^      bool controlling_connection;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:private
boost::BOOST_SIGNALS_NAMESPACE::connection::disconnect	/usr/include/boost/signals/connection.hpp	/^      void disconnect() const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::connection::get_connection	/usr/include/boost/signals/connection.hpp	/^      get_connection() const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::connection::operator <	/usr/include/boost/signals/connection.hpp	/^      bool operator<(const connection& other) const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(const connection& other) const
boost::BOOST_SIGNALS_NAMESPACE::connection::operator =	/usr/include/boost/signals/connection.hpp	/^      connection& operator=(const connection& other) ;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(const connection& other)
boost::BOOST_SIGNALS_NAMESPACE::connection::operator ==	/usr/include/boost/signals/connection.hpp	/^      bool operator==(const connection& other) const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(const connection& other) const
boost::BOOST_SIGNALS_NAMESPACE::connection::reset	/usr/include/boost/signals/connection.hpp	/^      void reset(BOOST_SIGNALS_NAMESPACE::detail::basic_connection*);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:private	signature:(BOOST_SIGNALS_NAMESPACE::detail::basic_connection*)
boost::BOOST_SIGNALS_NAMESPACE::connection::set_controlling	/usr/include/boost/signals/connection.hpp	/^      void set_controlling(bool control = true)$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(bool control = true)
boost::BOOST_SIGNALS_NAMESPACE::connection::swap	/usr/include/boost/signals/connection.hpp	/^      void swap(connection& other);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(connection& other)
boost::BOOST_SIGNALS_NAMESPACE::connection::unblock	/usr/include/boost/signals/connection.hpp	/^      void unblock() { con->blocked_ = false; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::connection::~connection	/usr/include/boost/signals/connection.hpp	/^      ~connection();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail	/usr/include/boost/signals/connection.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
boost::BOOST_SIGNALS_NAMESPACE::detail	/usr/include/boost/signals/detail/named_slot_map.hpp	/^namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
boost::BOOST_SIGNALS_NAMESPACE::detail	/usr/include/boost/signals/detail/signal_base.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
boost::BOOST_SIGNALS_NAMESPACE::detail	/usr/include/boost/signals/detail/signals_common.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
boost::BOOST_SIGNALS_NAMESPACE::detail	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
boost::BOOST_SIGNALS_NAMESPACE::detail	/usr/include/boost/signals/signal_template.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
boost::BOOST_SIGNALS_NAMESPACE::detail	/usr/include/boost/signals/slot.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
boost::BOOST_SIGNALS_NAMESPACE::detail	/usr/include/boost/signals/trackable.hpp	/^  namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_ARGS_STRUCT	/usr/include/boost/signals/signal_template.hpp	/^      struct BOOST_SIGNALS_ARGS_STRUCT {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND	/usr/include/boost/signals/signal_template.hpp	/^      struct BOOST_SIGNALS_CALL_BOUND {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND	/usr/include/boost/signals/signal_template.hpp	/^      struct BOOST_SIGNALS_CALL_BOUND<void> {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	/usr/include/boost/signals/signal_template.hpp	/^        struct caller {$/;"	s	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller::args	/usr/include/boost/signals/signal_template.hpp	/^          args_type args;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller::args_type	/usr/include/boost/signals/signal_template.hpp	/^            args_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller::caller	/usr/include/boost/signals/signal_template.hpp	/^          caller() {}$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller::caller	/usr/include/boost/signals/signal_template.hpp	/^          caller(args_type a) : args(a) {}$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public	signature:(args_type a)
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller::operator ()	/usr/include/boost/signals/signal_template.hpp	/^          R operator()(const Pair& slot) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public	signature:(const Pair& slot) const
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller::operator ()	/usr/include/boost/signals/signal_template.hpp	/^          unusable operator()(const Pair& slot) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public	signature:(const Pair& slot) const
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller::result_type	/usr/include/boost/signals/signal_template.hpp	/^          typedef R result_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller::result_type	/usr/include/boost/signals/signal_template.hpp	/^          typedef unusable result_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::IF	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct IF$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::IF::select	/usr/include/boost/signals/detail/signals_common.hpp	/^        typedef typename intimate::Selector<Condition>::type select;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::IF	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::IF::type	/usr/include/boost/signals/detail/signals_common.hpp	/^        typedef typename select::template Result<Then,Else>::type type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::IF	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object	/usr/include/boost/signals/connection.hpp	/^      class auto_disconnect_bound_object {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object::auto_disconnect	/usr/include/boost/signals/connection.hpp	/^        bool auto_disconnect;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object::auto_disconnect_bound_object	/usr/include/boost/signals/connection.hpp	/^        auto_disconnect_bound_object(const bound_object& b) :$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object	access:public	signature:(const bound_object& b)
boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object::binding	/usr/include/boost/signals/connection.hpp	/^        bound_object binding;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object::release	/usr/include/boost/signals/connection.hpp	/^        void release() { auto_disconnect = false; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object::~auto_disconnect_bound_object	/usr/include/boost/signals/connection.hpp	/^        ~auto_disconnect_bound_object()$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection	/usr/include/boost/signals/connection.hpp	/^      struct basic_connection {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection::blocked_	/usr/include/boost/signals/connection.hpp	/^        bool blocked_;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection::bound_objects	/usr/include/boost/signals/connection.hpp	/^        std::list<bound_object> bound_objects;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection::signal	/usr/include/boost/signals/connection.hpp	/^        void* signal;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection::signal_data	/usr/include/boost/signals/connection.hpp	/^        void* signal_data;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection::signal_disconnect	/usr/include/boost/signals/connection.hpp	/^        void (*signal_disconnect)(void*, void*);$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	/usr/include/boost/signals/connection.hpp	/^      struct bound_object {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object::data	/usr/include/boost/signals/connection.hpp	/^        void* data;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object::disconnect	/usr/include/boost/signals/connection.hpp	/^        void (*disconnect)(void*, void*);$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object::obj	/usr/include/boost/signals/connection.hpp	/^        void* obj;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object::operator !=	/usr/include/boost/signals/connection.hpp	/^        bool operator!=(const bound_object& other) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public	signature:(const bound_object& other) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object::operator <	/usr/include/boost/signals/connection.hpp	/^        bool operator<(const bound_object& other) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public	signature:(const bound_object& other) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object::operator ==	/usr/include/boost/signals/connection.hpp	/^        bool operator==(const bound_object& other) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public	signature:(const bound_object& other) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object::operator >	/usr/include/boost/signals/connection.hpp	/^        bool operator>(const bound_object& other) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public	signature:(const bound_object& other) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	/usr/include/boost/signals/trackable.hpp	/^    class bound_objects_visitor {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      add_if_trackable(R (*)(T1, T2, T3, T4, T5, T6, T7, T8)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5, T6, T7, T8)) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      add_if_trackable(R (*)(T1, T2, T3, T4, T5, T6, T7, T8, T9)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5, T6, T7, T8, T9)) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      add_if_trackable(R (*)(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)()) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ())) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1)) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2)) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2, T3)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3)) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2, T3, T4)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4)) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2, T3, T4, T5)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5)) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2, T3, T4, T5, T6)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5, T6)) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(R (*)(T1, T2, T3, T4, T5, T6, T7)) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(R ()T1, T2, T3, T4, T5, T6, T7)) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(const trackable* b) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const trackable* b) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::add_if_trackable	/usr/include/boost/signals/trackable.hpp	/^      inline void add_if_trackable(const void*) const { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const void*) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::bound_objects	/usr/include/boost/signals/trackable.hpp	/^      std::vector<const trackable*>& bound_objects;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::bound_objects_visitor	/usr/include/boost/signals/trackable.hpp	/^      bound_objects_visitor(std::vector<const trackable*>& v) :$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:public	signature:(std::vector<const trackable*>& v)
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::decode	/usr/include/boost/signals/trackable.hpp	/^      void decode(const T& t, long) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const T& t, long) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::decode	/usr/include/boost/signals/trackable.hpp	/^      void decode(const reference_wrapper<T>& t, int) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const reference_wrapper<T>& t, int) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::maybe_get_pointer	/usr/include/boost/signals/trackable.hpp	/^      void maybe_get_pointer(const T& t, truth<false>) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const T& t, truth<false>) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::maybe_get_pointer	/usr/include/boost/signals/trackable.hpp	/^      void maybe_get_pointer(const T& t, truth<true>) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const T& t, truth<true>) const
boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor::operator ()	/usr/include/boost/signals/trackable.hpp	/^      void operator()(const T& t) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:public	signature:(const T& t) const
boost::BOOST_SIGNALS_NAMESPACE::detail::call_notification	/usr/include/boost/signals/detail/signal_base.hpp	/^      class BOOST_SIGNALS_DECL call_notification {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::call_notification::call_notification	/usr/include/boost/signals/detail/signal_base.hpp	/^        call_notification(const shared_ptr<signal_base_impl>&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::call_notification	access:public	signature:(const shared_ptr<signal_base_impl>&)
boost::BOOST_SIGNALS_NAMESPACE::detail::call_notification::impl	/usr/include/boost/signals/detail/signal_base.hpp	/^        shared_ptr<signal_base_impl> impl;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::call_notification	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::call_notification::~call_notification	/usr/include/boost/signals/detail/signal_base.hpp	/^        ~call_notification();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::call_notification	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::compare_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^typedef function2<bool, stored_group, stored_group> compare_type;$/;"	t	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	/usr/include/boost/signals/connection.hpp	/^      struct connection_slot_pair {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair::connection_slot_pair	/usr/include/boost/signals/connection.hpp	/^        connection_slot_pair() {}$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair::connection_slot_pair	/usr/include/boost/signals/connection.hpp	/^        connection_slot_pair(const connection& c, const any& a)$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public	signature:(const connection& c, const any& a)
boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair::first	/usr/include/boost/signals/connection.hpp	/^        connection first;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair::operator <	/usr/include/boost/signals/connection.hpp	/^        bool operator<(const connection_slot_pair&) const { return false;}$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public	signature:(const connection_slot_pair&) const
boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair::operator ==	/usr/include/boost/signals/connection.hpp	/^        bool operator==(const connection_slot_pair&) const { return false; }$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public	signature:(const connection_slot_pair&) const
boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair::second	/usr/include/boost/signals/connection.hpp	/^        any second;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::get_slot_tag	/usr/include/boost/signals/detail/signals_common.hpp	/^      class get_slot_tag {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::get_slot_tag::signal_or_value	/usr/include/boost/signals/detail/signals_common.hpp	/^                            value_tag>::type signal_or_value;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::get_slot_tag	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::get_slot_tag::type	/usr/include/boost/signals/detail/signals_common.hpp	/^                            signal_or_value>::type type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::get_slot_tag	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	/usr/include/boost/signals/detail/named_slot_map.hpp	/^class group_bridge_compare {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare::comp	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  Compare comp;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare::first_argument_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef const stored_group& first_argument_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare::group_bridge_compare	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  group_bridge_compare(const Compare& c) : comp(c) $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:public	signature:(const Compare& c)
boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare::operator ()	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool operator()(const stored_group& k1, const stored_group& k2) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:public	signature:(const stored_group& k1, const stored_group& k2) const
boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare::result_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef bool result_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare::second_argument_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef const stored_group& second_argument_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::intimate	/usr/include/boost/signals/detail/signals_common.hpp	/^      namespace intimate {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectElse	/usr/include/boost/signals/detail/signals_common.hpp	/^        struct SelectElse$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate
boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectElse::Result	/usr/include/boost/signals/detail/signals_common.hpp	/^          struct Result$/;"	s	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectElse	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectElse::Result::type	/usr/include/boost/signals/detail/signals_common.hpp	/^            typedef Else type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectElse::Result	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectThen	/usr/include/boost/signals/detail/signals_common.hpp	/^        struct SelectThen$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate
boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectThen::Result	/usr/include/boost/signals/detail/signals_common.hpp	/^          struct Result$/;"	s	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectThen	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectThen::Result::type	/usr/include/boost/signals/detail/signals_common.hpp	/^            typedef Then type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectThen::Result	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::Selector	/usr/include/boost/signals/detail/signals_common.hpp	/^        struct Selector$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate
boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::Selector	/usr/include/boost/signals/detail/signals_common.hpp	/^        struct Selector<false>$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate
boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::Selector::type	/usr/include/boost/signals/detail/signals_common.hpp	/^          typedef SelectElse type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::Selector	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::Selector::type	/usr/include/boost/signals/detail/signals_common.hpp	/^          typedef SelectThen type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::Selector	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::is_callable	/usr/include/boost/signals/connection.hpp	/^      struct is_callable {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::is_callable::argument_type	/usr/include/boost/signals/connection.hpp	/^        typedef connection_slot_pair argument_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_callable	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::is_callable::operator ()	/usr/include/boost/signals/connection.hpp	/^        inline bool operator()(const argument_type& c) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_callable	access:public	signature:(const argument_type& c) const
boost::BOOST_SIGNALS_NAMESPACE::detail::is_callable::result_type	/usr/include/boost/signals/connection.hpp	/^        typedef bool result_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_callable	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::is_disconnected	/usr/include/boost/signals/connection.hpp	/^      struct is_disconnected {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::is_disconnected::argument_type	/usr/include/boost/signals/connection.hpp	/^        typedef connection_slot_pair argument_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_disconnected	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::is_disconnected::operator ()	/usr/include/boost/signals/connection.hpp	/^        inline bool operator()(const argument_type& c) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_disconnected	access:public	signature:(const argument_type& c) const
boost::BOOST_SIGNALS_NAMESPACE::detail::is_disconnected::result_type	/usr/include/boost/signals/connection.hpp	/^        typedef bool result_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_disconnected	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct is_ref$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct is_ref<reference_wrapper<T> >$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref::BOOST_STATIC_CONSTANT	/usr/include/boost/signals/detail/signals_common.hpp	/^        BOOST_STATIC_CONSTANT(bool, value = false);$/;"	p	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref	access:public	signature:(bool, value = false)
boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref::BOOST_STATIC_CONSTANT	/usr/include/boost/signals/detail/signals_common.hpp	/^        BOOST_STATIC_CONSTANT(bool, value = true);$/;"	p	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref	access:public	signature:(bool, value = true)
boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref::BOOST_STATIC_CONSTANT	/usr/include/boost/signals/detail/signals_common.hpp	/^        BOOST_STATIC_CONSTANT(bool,$/;"	p	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref	access:public	signature:(bool, value = (sizeof(is_ref_tester(t)) == sizeof(yes_type)))
boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref::t	/usr/include/boost/signals/detail/signals_common.hpp	/^        static T* t;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref_tester	/usr/include/boost/signals/detail/signals_common.hpp	/^      no_type is_ref_tester(...);$/;"	p	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail	signature:(....)
boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref_tester	/usr/include/boost/signals/detail/signals_common.hpp	/^      yes_type is_ref_tester(reference_wrapper<T>*);$/;"	p	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail	signature:(reference_wrapper<T>*)
boost::BOOST_SIGNALS_NAMESPACE::detail::is_signal	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct is_signal {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::is_signal::BOOST_STATIC_CONSTANT	/usr/include/boost/signals/detail/signals_common.hpp	/^        BOOST_STATIC_CONSTANT(bool,$/;"	p	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_signal	access:public	signature:(bool, value = (is_convertible<T*, signal_base*>::value))
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	/usr/include/boost/signals/detail/named_slot_map.hpp	/^class BOOST_SIGNALS_DECL named_slot_map$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::back	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  group_iterator back;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::begin	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  iterator begin();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::clear	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void clear();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::const_group_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef slot_container_type::const_iterator const_group_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::disconnect	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void disconnect(const stored_group& name);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:(const stored_group& name)
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::empty	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool empty(const_group_iterator group) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private	signature:(const_group_iterator group) const
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::end	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  iterator end();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::erase	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void erase(iterator pos);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:(iterator pos)
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::group_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef slot_container_type::iterator group_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::group_list	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef std::list<connection_slot_pair> group_list;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::groups	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  slot_container_type groups;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::insert	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  iterator insert(const stored_group& name, const connection& con,$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:(const stored_group& name, const connection& con, const any& slot, connect_position at)
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef named_slot_map_iterator iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::named_slot_map	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map(const compare_type& compare);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:(const compare_type& compare)
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::remove_disconnected_slots	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void remove_disconnected_slots();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map::slot_container_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef std::map<stored_group, group_list, compare_type> slot_container_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^class BOOST_SIGNALS_DECL named_slot_map_iterator :$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail	inherits:iterator_facade
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::advance	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void advance(difference_type);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:(difference_type)
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::const_group_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef slot_container_type::const_iterator const_group_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::decrement	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void decrement();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::dereference	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  connection_slot_pair& dereference() const $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::equal	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool equal(const named_slot_map_iterator& other) const {$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:(const named_slot_map_iterator& other) const
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  group_iterator group;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::group_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef slot_container_type::iterator group_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::group_list	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef std::list<connection_slot_pair> group_list;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::increment	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void increment() $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::inherited	/usr/include/boost/signals/detail/named_slot_map.hpp	/^                          forward_traversal_tag> inherited;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::init_next_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void init_next_group()$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::last_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  group_iterator last_group;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::named_slot_map_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map_iterator() : slot_assigned(false) $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::named_slot_map_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map_iterator(const named_slot_map_iterator& other) $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:(const named_slot_map_iterator& other)
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::named_slot_map_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map_iterator(group_iterator giter, group_iterator last) :$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private	signature:(group_iterator giter, group_iterator last)
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::named_slot_map_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map_iterator(group_iterator giter, group_iterator last,$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private	signature:(group_iterator giter, group_iterator last, slot_pair_iterator slot)
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::operator =	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map_iterator& operator=(const named_slot_map_iterator& other) $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:(const named_slot_map_iterator& other)
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::slot_	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  slot_pair_iterator slot_;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::slot_assigned	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool slot_assigned;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::slot_container_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef std::map<stored_group, group_list, compare_type> slot_container_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator::slot_pair_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef group_list::iterator slot_pair_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::no_type	/usr/include/boost/signals/detail/signals_common.hpp	/^      typedef double no_type;$/;"	t	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::reference_tag	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct reference_tag {};$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	/usr/include/boost/signals/detail/signal_base.hpp	/^      class BOOST_SIGNALS_DECL signal_base : public noncopyable {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail	inherits:noncopyable
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base::compare_type	/usr/include/boost/signals/detail/signal_base.hpp	/^        typedef signal_base_impl::compare_type compare_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base::connect_slot	/usr/include/boost/signals/detail/signal_base.hpp	/^        connection connect_slot(const any& slot,$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:protected	signature:(const any& slot, const stored_group& name, shared_ptr<slot_base::data_t> data, connect_position at)
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base::disconnect_all_slots	/usr/include/boost/signals/detail/signal_base.hpp	/^        void disconnect_all_slots() { impl->disconnect_all_slots(); }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base::empty	/usr/include/boost/signals/detail/signal_base.hpp	/^        bool empty() const { return impl->empty(); }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base::impl	/usr/include/boost/signals/detail/signal_base.hpp	/^        shared_ptr<signal_base_impl> impl;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:protected
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base::iterator	/usr/include/boost/signals/detail/signal_base.hpp	/^        typedef named_slot_map::iterator iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:protected
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base::num_slots	/usr/include/boost/signals/detail/signal_base.hpp	/^        std::size_t num_slots() const { return impl->num_slots(); }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base::signal_base	/usr/include/boost/signals/detail/signal_base.hpp	/^        signal_base(const compare_type& comp, const any& combiner);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public	signature:(const compare_type& comp, const any& combiner)
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base::~signal_base	/usr/include/boost/signals/detail/signal_base.hpp	/^        ~signal_base();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	/usr/include/boost/signals/detail/signal_base.hpp	/^      class BOOST_SIGNALS_DECL signal_base_impl {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::__anon1::clearing	/usr/include/boost/signals/detail/signal_base.hpp	/^          bool clearing:1;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::__anon1	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::__anon1::delayed_disconnect	/usr/include/boost/signals/detail/signal_base.hpp	/^          mutable bool delayed_disconnect:1;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::__anon1	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::call_depth	/usr/include/boost/signals/detail/signal_base.hpp	/^        mutable int call_depth;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::combiner_	/usr/include/boost/signals/detail/signal_base.hpp	/^        any combiner_;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::compare_type	/usr/include/boost/signals/detail/signal_base.hpp	/^        typedef function2<bool, stored_group, stored_group> compare_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::connect_slot	/usr/include/boost/signals/detail/signal_base.hpp	/^        connection connect_slot(const any& slot,$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:(const any& slot, const stored_group& name, shared_ptr<slot_base::data_t> data, connect_position at)
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::disconnect	/usr/include/boost/signals/detail/signal_base.hpp	/^        void disconnect(const stored_group&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:(const stored_group&)
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::disconnect_all_slots	/usr/include/boost/signals/detail/signal_base.hpp	/^        void disconnect_all_slots();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::empty	/usr/include/boost/signals/detail/signal_base.hpp	/^        bool empty() const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::flags	/usr/include/boost/signals/detail/signal_base.hpp	/^        } flags;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	typeref:struct:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::__anon1	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::iterator	/usr/include/boost/signals/detail/signal_base.hpp	/^        typedef named_slot_map::iterator iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::num_slots	/usr/include/boost/signals/detail/signal_base.hpp	/^        std::size_t num_slots() const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::remove_disconnected_slots	/usr/include/boost/signals/detail/signal_base.hpp	/^        void remove_disconnected_slots() const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:private	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::signal_base_impl	/usr/include/boost/signals/detail/signal_base.hpp	/^        signal_base_impl(const compare_type&, const any&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:(const compare_type&, const any&)
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::slot_disconnected	/usr/include/boost/signals/detail/signal_base.hpp	/^        static void slot_disconnected(void* obj, void* data);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:(void* obj, void* data)
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::slots_	/usr/include/boost/signals/detail/signal_base.hpp	/^        mutable named_slot_map slots_;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::temporarily_set_clearing	/usr/include/boost/signals/detail/signal_base.hpp	/^        class temporarily_set_clearing {$/;"	c	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::temporarily_set_clearing::base	/usr/include/boost/signals/detail/signal_base.hpp	/^          signal_base_impl* base;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::temporarily_set_clearing	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::temporarily_set_clearing::temporarily_set_clearing	/usr/include/boost/signals/detail/signal_base.hpp	/^          temporarily_set_clearing(signal_base_impl* b) : base(b)$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::temporarily_set_clearing	access:public	signature:(signal_base_impl* b)
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::temporarily_set_clearing::~temporarily_set_clearing	/usr/include/boost/signals/detail/signal_base.hpp	/^          ~temporarily_set_clearing()$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::temporarily_set_clearing	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::~signal_base_impl	/usr/include/boost/signals/detail/signal_base.hpp	/^        ~signal_base_impl();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::signal_tag	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct signal_tag {};$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	/usr/include/boost/signals/slot.hpp	/^      class BOOST_SIGNALS_DECL slot_base {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::bound_object_destructed	/usr/include/boost/signals/slot.hpp	/^        static void bound_object_destructed(void*, void*) {}$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:private	signature:(void*, void*)
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::create_connection	/usr/include/boost/signals/slot.hpp	/^        void create_connection();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:protected	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::data	/usr/include/boost/signals/slot.hpp	/^        shared_ptr<data_t> data;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:protected
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::data_t	/usr/include/boost/signals/slot.hpp	/^        struct data_t {$/;"	s	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::data_t::bound_objects	/usr/include/boost/signals/slot.hpp	/^          std::vector<const trackable*> bound_objects;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::data_t	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::data_t::watch_bound_objects	/usr/include/boost/signals/slot.hpp	/^          connection watch_bound_objects;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::data_t	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::get_bound_objects	/usr/include/boost/signals/slot.hpp	/^        std::vector<const trackable*>& get_bound_objects() const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::get_data	/usr/include/boost/signals/slot.hpp	/^        shared_ptr<data_t> get_data() const { return data; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::is_active	/usr/include/boost/signals/slot.hpp	/^        bool is_active() const $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^      class slot_call_iterator$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail	inherits:iterator_facade
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator::cache	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        optional<result_type>* cache;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator::dereference	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        dereference() const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator::end	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        Iterator end;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator::equal	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        bool equal(const slot_call_iterator& other) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:public	signature:(const slot_call_iterator& other) const
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator::f	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        Function f;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator::increment	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        void increment()$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator::inherited	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^          inherited;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator::iter	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        mutable Iterator iter;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator::result_type	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        typedef typename Function::result_type result_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator::slot_call_iterator	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        slot_call_iterator(Iterator iter_in, Iterator end_in, Function func,$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:public	signature:(Iterator iter_in, Iterator end_in, Function func, optional<result_type> &c)
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_result_type	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct slot_result_type {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_result_type	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct slot_result_type<void> {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_result_type::type	/usr/include/boost/signals/detail/signals_common.hpp	/^        typedef R type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_result_type	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::slot_result_type::type	/usr/include/boost/signals/detail/signals_common.hpp	/^        typedef unusable type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_result_type	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^class stored_group$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::empty	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool empty() const { return kind == sk_empty; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::get	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void* get() const { return group.get(); }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  shared_ptr<void> group;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::is_back	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool is_back() const { return kind == sk_back; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::is_front	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool is_front() const { return kind == sk_front; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:() const
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::kind	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  storage_kind kind;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:private
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::sk_back	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  enum storage_kind { sk_empty, sk_front, sk_back, sk_group };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::storage_kind
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::sk_empty	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  enum storage_kind { sk_empty, sk_front, sk_back, sk_group };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::storage_kind
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::sk_front	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  enum storage_kind { sk_empty, sk_front, sk_back, sk_group };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::storage_kind
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::sk_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  enum storage_kind { sk_empty, sk_front, sk_back, sk_group };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::storage_kind
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::storage_kind	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  enum storage_kind { sk_empty, sk_front, sk_back, sk_group };$/;"	g	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::stored_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  stored_group(const T& p_group) : kind(sk_group), group(new T(p_group)) { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:(const T& p_group)
boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::stored_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  stored_group(storage_kind p_kind = sk_empty) : kind(p_kind), group() { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:(storage_kind p_kind = sk_empty)
boost::BOOST_SIGNALS_NAMESPACE::detail::truth	/usr/include/boost/signals/trackable.hpp	/^    template<bool Cond> struct truth {};$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::unusable	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct unusable {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::unusable::unusable	/usr/include/boost/signals/detail/signals_common.hpp	/^        unusable() {}$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::unusable	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::detail::value_tag	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct value_tag {};$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::detail::yes_type	/usr/include/boost/signals/detail/signals_common.hpp	/^      typedef char yes_type;$/;"	t	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
boost::BOOST_SIGNALS_NAMESPACE::get_inspectable_slot	/usr/include/boost/signals/slot.hpp	/^    get_inspectable_slot(const F& f, BOOST_SIGNALS_NAMESPACE::detail::signal_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F& f, BOOST_SIGNALS_NAMESPACE::detail::signal_tag)
boost::BOOST_SIGNALS_NAMESPACE::get_inspectable_slot	/usr/include/boost/signals/slot.hpp	/^    get_inspectable_slot(const F& f, BOOST_SIGNALS_NAMESPACE::detail::value_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F& f, BOOST_SIGNALS_NAMESPACE::detail::value_tag)
boost::BOOST_SIGNALS_NAMESPACE::get_inspectable_slot	/usr/include/boost/signals/slot.hpp	/^    get_inspectable_slot(const reference_wrapper<F>& f, BOOST_SIGNALS_NAMESPACE::detail::reference_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const reference_wrapper<F>& f, BOOST_SIGNALS_NAMESPACE::detail::reference_tag)
boost::BOOST_SIGNALS_NAMESPACE::get_invocable_slot	/usr/include/boost/signals/slot.hpp	/^    get_invocable_slot(const F& f, BOOST_SIGNALS_NAMESPACE::detail::reference_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F& f, BOOST_SIGNALS_NAMESPACE::detail::reference_tag)
boost::BOOST_SIGNALS_NAMESPACE::get_invocable_slot	/usr/include/boost/signals/slot.hpp	/^    get_invocable_slot(const F& f, BOOST_SIGNALS_NAMESPACE::detail::signal_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F& f, BOOST_SIGNALS_NAMESPACE::detail::signal_tag)
boost::BOOST_SIGNALS_NAMESPACE::get_invocable_slot	/usr/include/boost/signals/slot.hpp	/^    get_invocable_slot(const F& f, BOOST_SIGNALS_NAMESPACE::detail::value_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F& f, BOOST_SIGNALS_NAMESPACE::detail::value_tag)
boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	/usr/include/boost/signals/connection.hpp	/^    class BOOST_SIGNALS_DECL scoped_connection : public connection {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE	inherits:connection
boost::BOOST_SIGNALS_NAMESPACE::scoped_connection::operator =	/usr/include/boost/signals/connection.hpp	/^      scoped_connection& operator=(const connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:(const connection&)
boost::BOOST_SIGNALS_NAMESPACE::scoped_connection::operator =	/usr/include/boost/signals/connection.hpp	/^      scoped_connection& operator=(const scoped_connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:(const scoped_connection&)
boost::BOOST_SIGNALS_NAMESPACE::scoped_connection::release	/usr/include/boost/signals/connection.hpp	/^      connection release();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::scoped_connection::released	/usr/include/boost/signals/connection.hpp	/^      bool released;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:private
boost::BOOST_SIGNALS_NAMESPACE::scoped_connection::scoped_connection	/usr/include/boost/signals/connection.hpp	/^      scoped_connection() : connection(), released(false) {}$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::scoped_connection::scoped_connection	/usr/include/boost/signals/connection.hpp	/^      scoped_connection(const connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:(const connection&)
boost::BOOST_SIGNALS_NAMESPACE::scoped_connection::scoped_connection	/usr/include/boost/signals/connection.hpp	/^      scoped_connection(const scoped_connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:(const scoped_connection&)
boost::BOOST_SIGNALS_NAMESPACE::scoped_connection::swap	/usr/include/boost/signals/connection.hpp	/^      void swap(scoped_connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:(scoped_connection&)
boost::BOOST_SIGNALS_NAMESPACE::scoped_connection::~scoped_connection	/usr/include/boost/signals/connection.hpp	/^      ~scoped_connection();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:()
boost::BOOST_SIGNALS_NAMESPACE::tag_type	/usr/include/boost/signals/slot.hpp	/^    tag_type(const F&)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F&)
boost::BOOST_SIGNALS_NAMESPACE::trackable	/usr/include/boost/signals/trackable.hpp	/^  class BOOST_SIGNALS_DECL trackable {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE
boost::BOOST_SIGNALS_NAMESPACE::trackable::connected_signals	/usr/include/boost/signals/trackable.hpp	/^    mutable connection_list connected_signals;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private
boost::BOOST_SIGNALS_NAMESPACE::trackable::connection_iterator	/usr/include/boost/signals/trackable.hpp	/^    typedef connection_list::iterator connection_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private
boost::BOOST_SIGNALS_NAMESPACE::trackable::connection_list	/usr/include/boost/signals/trackable.hpp	/^    typedef std::list<connection> connection_list;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private
boost::BOOST_SIGNALS_NAMESPACE::trackable::dying	/usr/include/boost/signals/trackable.hpp	/^    mutable bool dying;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private
boost::BOOST_SIGNALS_NAMESPACE::trackable::operator =	/usr/include/boost/signals/trackable.hpp	/^    trackable& operator=(const trackable&)$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:protected	signature:(const trackable&)
boost::BOOST_SIGNALS_NAMESPACE::trackable::signal_connected	/usr/include/boost/signals/trackable.hpp	/^    void signal_connected(connection, BOOST_SIGNALS_NAMESPACE::detail::bound_object&) const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private	signature:(connection, BOOST_SIGNALS_NAMESPACE::detail::bound_object&) const
boost::BOOST_SIGNALS_NAMESPACE::trackable::signal_disconnected	/usr/include/boost/signals/trackable.hpp	/^    static void signal_disconnected(void* obj, void* data);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private	signature:(void* obj, void* data)
boost::BOOST_SIGNALS_NAMESPACE::trackable::trackable	/usr/include/boost/signals/trackable.hpp	/^    trackable() : connected_signals(), dying(false) {}$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:protected	signature:()
boost::BOOST_SIGNALS_NAMESPACE::trackable::trackable	/usr/include/boost/signals/trackable.hpp	/^    trackable(const trackable&) : connected_signals(), dying(false) {}$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:protected	signature:(const trackable&)
boost::BOOST_SIGNALS_NAMESPACE::trackable::~trackable	/usr/include/boost/signals/trackable.hpp	/^    ~trackable();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:protected	signature:()
boost::BOOST_SIGNALS_SIGNAL	/usr/include/boost/signals/signal_template.hpp	/^  class BOOST_SIGNALS_SIGNAL :$/;"	c	namespace:boost	inherits:BOOST_SIGNALS_NAMESPACE::detail::signal_base,BOOST_SIGNALS_NAMESPACE::trackable
boost::BOOST_SIGNALS_SIGNAL::BOOST_SIGNALS_SIGNAL	/usr/include/boost/signals/signal_template.hpp	/^    BOOST_SIGNALS_SIGNAL(const Combiner& c = Combiner(),$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(const Combiner& c = Combiner(), const GroupCompare& comp = GroupCompare())
boost::BOOST_SIGNALS_SIGNAL::argument_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef T1 argument_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
boost::BOOST_SIGNALS_SIGNAL::call_bound_slot	/usr/include/boost/signals/signal_template.hpp	/^      call_bound_slot;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:private
boost::BOOST_SIGNALS_SIGNAL::combiner	/usr/include/boost/signals/signal_template.hpp	/^    Combiner& combiner()$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:()
boost::BOOST_SIGNALS_SIGNAL::combiner	/usr/include/boost/signals/signal_template.hpp	/^    const Combiner& combiner() const$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:() const
boost::BOOST_SIGNALS_SIGNAL::combiner_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef Combiner combiner_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
boost::BOOST_SIGNALS_SIGNAL::connect	/usr/include/boost/signals/signal_template.hpp	/^    connect(const group_type&, const slot_type&,$/;"	p	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(const group_type&, const slot_type&, BOOST_SIGNALS_NAMESPACE::connect_position at = BOOST_SIGNALS_NAMESPACE::at_back)
boost::BOOST_SIGNALS_SIGNAL::connect	/usr/include/boost/signals/signal_template.hpp	/^    connect(const slot_type&,$/;"	p	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(const slot_type&, BOOST_SIGNALS_NAMESPACE::connect_position at = BOOST_SIGNALS_NAMESPACE::at_back)
boost::BOOST_SIGNALS_SIGNAL::connect	/usr/include/boost/signals/signal_template.hpp	/^  >::connect(const group_type& group,$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	signature:(const group_type& group, const slot_type& in_slot, BOOST_SIGNALS_NAMESPACE::connect_position at)
boost::BOOST_SIGNALS_SIGNAL::connect	/usr/include/boost/signals/signal_template.hpp	/^  >::connect(const slot_type& in_slot,$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	signature:(const slot_type& in_slot, BOOST_SIGNALS_NAMESPACE::connect_position at)
boost::BOOST_SIGNALS_SIGNAL::disconnect	/usr/include/boost/signals/signal_template.hpp	/^    void disconnect(const T& t)$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(const T& t)
boost::BOOST_SIGNALS_SIGNAL::disconnect	/usr/include/boost/signals/signal_template.hpp	/^    void disconnect(const group_type& group)$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(const group_type& group)
boost::BOOST_SIGNALS_SIGNAL::do_disconnect	/usr/include/boost/signals/signal_template.hpp	/^    void do_disconnect(const Function& f, mpl::bool_<false>)$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:private	signature:(const Function& f, mpl::bool_<false>)
boost::BOOST_SIGNALS_SIGNAL::do_disconnect	/usr/include/boost/signals/signal_template.hpp	/^    void do_disconnect(const group_type& group, mpl::bool_<true>)$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:private	signature:(const group_type& group, mpl::bool_<true>)
boost::BOOST_SIGNALS_SIGNAL::group_compare_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef GroupCompare group_compare_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
boost::BOOST_SIGNALS_SIGNAL::group_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef Group group_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
boost::BOOST_SIGNALS_SIGNAL::operator ()	/usr/include/boost/signals/signal_template.hpp	/^    result_type operator()(BOOST_SIGNALS_PARMS) const;$/;"	p	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(BOOST_SIGNALS_PARMS) const
boost::BOOST_SIGNALS_SIGNAL::operator ()	/usr/include/boost/signals/signal_template.hpp	/^    result_type operator()(BOOST_SIGNALS_PARMS);$/;"	p	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(BOOST_SIGNALS_PARMS)
boost::BOOST_SIGNALS_SIGNAL::operator ()	/usr/include/boost/signals/signal_template.hpp	/^  >::operator()(BOOST_SIGNALS_PARMS) const$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	signature:(BOOST_SIGNALS_PARMS) const
boost::BOOST_SIGNALS_SIGNAL::operator ()	/usr/include/boost/signals/signal_template.hpp	/^  >::operator()(BOOST_SIGNALS_PARMS)$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	signature:(BOOST_SIGNALS_PARMS)
boost::BOOST_SIGNALS_SIGNAL::outer_bound_slot_caller	/usr/include/boost/signals/signal_template.hpp	/^      outer_bound_slot_caller;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:private
boost::BOOST_SIGNALS_SIGNAL::real_group_compare_type	/usr/include/boost/signals/signal_template.hpp	/^      real_group_compare_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:private
boost::BOOST_SIGNALS_SIGNAL::result_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef typename Combiner::result_type result_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
boost::BOOST_SIGNALS_SIGNAL::slot_call_iterator	/usr/include/boost/signals/signal_template.hpp	/^              call_bound_slot, iterator> slot_call_iterator;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
boost::BOOST_SIGNALS_SIGNAL::slot_function_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef SlotFunction slot_function_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
boost::BOOST_SIGNALS_SIGNAL::slot_result_type	/usr/include/boost/signals/signal_template.hpp	/^      slot_result_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
boost::BOOST_SIGNALS_SIGNAL::slot_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef slot<slot_function_type> slot_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
boost::slot	/usr/include/boost/signals/slot.hpp	/^  class slot : public BOOST_SIGNALS_NAMESPACE::detail::slot_base {$/;"	c	namespace:boost	inherits:BOOST_SIGNALS_NAMESPACE::detail::slot_base
boost::slot::data_t	/usr/include/boost/signals/slot.hpp	/^    typedef typename inherited::data_t data_t;$/;"	t	class:boost::slot	access:private
boost::slot::get_slot_function	/usr/include/boost/signals/slot.hpp	/^    const SlotFunction& get_slot_function() const { return slot_function; }$/;"	f	class:boost::slot	access:public	signature:() const
boost::slot::inherited	/usr/include/boost/signals/slot.hpp	/^    typedef BOOST_SIGNALS_NAMESPACE::detail::slot_base inherited;$/;"	t	class:boost::slot	access:private
boost::slot::operator =	/usr/include/boost/signals/slot.hpp	/^    slot& operator=(const slot&); \/\/ no assignment operator$/;"	p	class:boost::slot	access:private	signature:(const slot&)
boost::slot::release	/usr/include/boost/signals/slot.hpp	/^    void release() const { data->watch_bound_objects.set_controlling(false); }$/;"	f	class:boost::slot	access:public	signature:() const
boost::slot::slot	/usr/include/boost/signals/slot.hpp	/^    slot(); \/\/ no default constructor$/;"	p	class:boost::slot	access:private	signature:()
boost::slot::slot	/usr/include/boost/signals/slot.hpp	/^    slot(F* f) : slot_function(f)$/;"	f	class:boost::slot	access:public	signature:(F* f)
boost::slot::slot	/usr/include/boost/signals/slot.hpp	/^    slot(const F& f) : slot_function(BOOST_SIGNALS_NAMESPACE::get_invocable_slot(f, BOOST_SIGNALS_NAMESPACE::tag_type(f)))$/;"	f	class:boost::slot	access:public	signature:(const F& f)
boost::slot::slot_function	/usr/include/boost/signals/slot.hpp	/^    SlotFunction slot_function;$/;"	m	class:boost::slot	access:private
bound_object	/usr/include/boost/signals/connection.hpp	/^      struct bound_object {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
bound_object_destructed	/usr/include/boost/signals/slot.hpp	/^        static void bound_object_destructed(void*, void*) {}$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:private	signature:(void*, void*)
bound_objects	/usr/include/boost/signals/connection.hpp	/^        std::list<bound_object> bound_objects;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection	access:public
bound_objects	/usr/include/boost/signals/slot.hpp	/^          std::vector<const trackable*> bound_objects;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::data_t	access:public
bound_objects	/usr/include/boost/signals/trackable.hpp	/^      std::vector<const trackable*>& bound_objects;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private
bound_objects_visitor	/usr/include/boost/signals/trackable.hpp	/^      bound_objects_visitor(std::vector<const trackable*>& v) :$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:public	signature:(std::vector<const trackable*>& v)
bound_objects_visitor	/usr/include/boost/signals/trackable.hpp	/^    class bound_objects_visitor {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
cache	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        optional<result_type>* cache;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
call_bound_slot	/usr/include/boost/signals/signal_template.hpp	/^      call_bound_slot;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:private
call_depth	/usr/include/boost/signals/detail/signal_base.hpp	/^        mutable int call_depth;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
call_notification	/usr/include/boost/signals/detail/signal_base.hpp	/^        call_notification(const shared_ptr<signal_base_impl>&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::call_notification	access:public	signature:(const shared_ptr<signal_base_impl>&)
call_notification	/usr/include/boost/signals/detail/signal_base.hpp	/^      class BOOST_SIGNALS_DECL call_notification {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
caller	/usr/include/boost/signals/signal_template.hpp	/^          caller() {}$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public	signature:()
caller	/usr/include/boost/signals/signal_template.hpp	/^          caller(args_type a) : args(a) {}$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public	signature:(args_type a)
caller	/usr/include/boost/signals/signal_template.hpp	/^        struct caller {$/;"	s	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND	access:public
clear	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void clear();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:()
clearing	/usr/include/boost/signals/detail/signal_base.hpp	/^          bool clearing:1;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::__anon1	access:public
combiner	/usr/include/boost/signals/signal_template.hpp	/^    Combiner& combiner()$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:()
combiner	/usr/include/boost/signals/signal_template.hpp	/^    const Combiner& combiner() const$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:() const
combiner_	/usr/include/boost/signals/detail/signal_base.hpp	/^        any combiner_;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
combiner_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef Combiner combiner_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
comp	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  Compare comp;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:private
compare_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^typedef function2<bool, stored_group, stored_group> compare_type;$/;"	t	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
compare_type	/usr/include/boost/signals/detail/signal_base.hpp	/^        typedef function2<bool, stored_group, stored_group> compare_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
compare_type	/usr/include/boost/signals/detail/signal_base.hpp	/^        typedef signal_base_impl::compare_type compare_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public
con	/usr/include/boost/signals/connection.hpp	/^      shared_ptr<BOOST_SIGNALS_NAMESPACE::detail::basic_connection> con;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:private
connect	/usr/include/boost/signals/signal_template.hpp	/^    connect(const group_type&, const slot_type&,$/;"	p	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(const group_type&, const slot_type&, BOOST_SIGNALS_NAMESPACE::connect_position at = BOOST_SIGNALS_NAMESPACE::at_back)
connect	/usr/include/boost/signals/signal_template.hpp	/^    connect(const slot_type&,$/;"	p	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(const slot_type&, BOOST_SIGNALS_NAMESPACE::connect_position at = BOOST_SIGNALS_NAMESPACE::at_back)
connect	/usr/include/boost/signals/signal_template.hpp	/^  >::connect(const group_type& group,$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	signature:(const group_type& group, const slot_type& in_slot, BOOST_SIGNALS_NAMESPACE::connect_position at)
connect	/usr/include/boost/signals/signal_template.hpp	/^  >::connect(const slot_type& in_slot,$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	signature:(const slot_type& in_slot, BOOST_SIGNALS_NAMESPACE::connect_position at)
connect_position	/usr/include/boost/signals/detail/named_slot_map.hpp	/^enum connect_position { at_back, at_front };$/;"	g	namespace:boost::BOOST_SIGNALS_NAMESPACE
connect_slot	/usr/include/boost/signals/detail/signal_base.hpp	/^        connection connect_slot(const any& slot,$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:protected	signature:(const any& slot, const stored_group& name, shared_ptr<slot_base::data_t> data, connect_position at)
connect_slot	/usr/include/boost/signals/detail/signal_base.hpp	/^        connection connect_slot(const any& slot,$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:(const any& slot, const stored_group& name, shared_ptr<slot_base::data_t> data, connect_position at)
connected	/usr/include/boost/signals/connection.hpp	/^      bool connected() const { return con.get() && con->signal_disconnect; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:() const
connected_signals	/usr/include/boost/signals/trackable.hpp	/^    mutable connection_list connected_signals;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private
connection	/usr/include/boost/signals/connection.hpp	/^      connection() : con(), controlling_connection(false) {}$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:()
connection	/usr/include/boost/signals/connection.hpp	/^      connection(const connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(const connection&)
connection	/usr/include/boost/signals/connection.hpp	/^    class BOOST_SIGNALS_DECL connection :$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE	inherits:less_than_comparable1,equality_comparable1
connection_iterator	/usr/include/boost/signals/trackable.hpp	/^    typedef connection_list::iterator connection_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private
connection_list	/usr/include/boost/signals/trackable.hpp	/^    typedef std::list<connection> connection_list;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private
connection_slot_pair	/usr/include/boost/signals/connection.hpp	/^        connection_slot_pair() {}$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public	signature:()
connection_slot_pair	/usr/include/boost/signals/connection.hpp	/^        connection_slot_pair(const connection& c, const any& a)$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public	signature:(const connection& c, const any& a)
connection_slot_pair	/usr/include/boost/signals/connection.hpp	/^      struct connection_slot_pair {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
const_group_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef slot_container_type::const_iterator const_group_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
const_group_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef slot_container_type::const_iterator const_group_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
controlling_connection	/usr/include/boost/signals/connection.hpp	/^      bool controlling_connection;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:private
create_connection	/usr/include/boost/signals/slot.hpp	/^        void create_connection();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:protected	signature:()
data	/usr/include/boost/signals/connection.hpp	/^        void* data;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public
data	/usr/include/boost/signals/slot.hpp	/^        shared_ptr<data_t> data;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:protected
data_t	/usr/include/boost/signals/slot.hpp	/^        struct data_t {$/;"	s	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:public
data_t	/usr/include/boost/signals/slot.hpp	/^    typedef typename inherited::data_t data_t;$/;"	t	class:boost::slot	access:private
decode	/usr/include/boost/signals/trackable.hpp	/^      void decode(const T& t, long) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const T& t, long) const
decode	/usr/include/boost/signals/trackable.hpp	/^      void decode(const reference_wrapper<T>& t, int) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const reference_wrapper<T>& t, int) const
decrement	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void decrement();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:()
delayed_disconnect	/usr/include/boost/signals/detail/signal_base.hpp	/^          mutable bool delayed_disconnect:1;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::__anon1	access:public
dereference	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  connection_slot_pair& dereference() const $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:() const
dereference	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        dereference() const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:public	signature:() const
detail	/usr/include/boost/signals/connection.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
detail	/usr/include/boost/signals/detail/named_slot_map.hpp	/^namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
detail	/usr/include/boost/signals/detail/signal_base.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
detail	/usr/include/boost/signals/detail/signals_common.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
detail	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
detail	/usr/include/boost/signals/signal_template.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
detail	/usr/include/boost/signals/slot.hpp	/^    namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
detail	/usr/include/boost/signals/trackable.hpp	/^  namespace detail {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE
disconnect	/usr/include/boost/signals/connection.hpp	/^        void (*disconnect)(void*, void*);$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public
disconnect	/usr/include/boost/signals/connection.hpp	/^      void disconnect() const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:() const
disconnect	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void disconnect(const stored_group& name);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:(const stored_group& name)
disconnect	/usr/include/boost/signals/detail/signal_base.hpp	/^        void disconnect(const stored_group&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:(const stored_group&)
disconnect	/usr/include/boost/signals/signal_template.hpp	/^    void disconnect(const T& t)$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(const T& t)
disconnect	/usr/include/boost/signals/signal_template.hpp	/^    void disconnect(const group_type& group)$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(const group_type& group)
disconnect_all_slots	/usr/include/boost/signals/detail/signal_base.hpp	/^        void disconnect_all_slots() { impl->disconnect_all_slots(); }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public	signature:()
disconnect_all_slots	/usr/include/boost/signals/detail/signal_base.hpp	/^        void disconnect_all_slots();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:()
do_disconnect	/usr/include/boost/signals/signal_template.hpp	/^    void do_disconnect(const Function& f, mpl::bool_<false>)$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:private	signature:(const Function& f, mpl::bool_<false>)
do_disconnect	/usr/include/boost/signals/signal_template.hpp	/^    void do_disconnect(const group_type& group, mpl::bool_<true>)$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	access:private	signature:(const group_type& group, mpl::bool_<true>)
dying	/usr/include/boost/signals/trackable.hpp	/^    mutable bool dying;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private
empty	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool empty() const { return kind == sk_empty; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:() const
empty	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool empty(const_group_iterator group) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private	signature:(const_group_iterator group) const
empty	/usr/include/boost/signals/detail/signal_base.hpp	/^        bool empty() const { return impl->empty(); }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public	signature:() const
empty	/usr/include/boost/signals/detail/signal_base.hpp	/^        bool empty() const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:() const
end	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  iterator end();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:()
end	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        Iterator end;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
equal	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool equal(const named_slot_map_iterator& other) const {$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:(const named_slot_map_iterator& other) const
equal	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        bool equal(const slot_call_iterator& other) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:public	signature:(const slot_call_iterator& other) const
erase	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void erase(iterator pos);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:(iterator pos)
f	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        Function f;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
first	/usr/include/boost/signals/connection.hpp	/^        connection first;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public
first_argument_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef const stored_group& first_argument_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:public
flags	/usr/include/boost/signals/detail/signal_base.hpp	/^        } flags;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	typeref:struct:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::__anon1	access:public
get	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void* get() const { return group.get(); }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:() const
get_bound_objects	/usr/include/boost/signals/slot.hpp	/^        std::vector<const trackable*>& get_bound_objects() const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:public	signature:() const
get_connection	/usr/include/boost/signals/connection.hpp	/^      get_connection() const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:() const
get_data	/usr/include/boost/signals/slot.hpp	/^        shared_ptr<data_t> get_data() const { return data; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:public	signature:() const
get_inspectable_slot	/usr/include/boost/signals/slot.hpp	/^    get_inspectable_slot(const F& f, BOOST_SIGNALS_NAMESPACE::detail::signal_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F& f, BOOST_SIGNALS_NAMESPACE::detail::signal_tag)
get_inspectable_slot	/usr/include/boost/signals/slot.hpp	/^    get_inspectable_slot(const F& f, BOOST_SIGNALS_NAMESPACE::detail::value_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F& f, BOOST_SIGNALS_NAMESPACE::detail::value_tag)
get_inspectable_slot	/usr/include/boost/signals/slot.hpp	/^    get_inspectable_slot(const reference_wrapper<F>& f, BOOST_SIGNALS_NAMESPACE::detail::reference_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const reference_wrapper<F>& f, BOOST_SIGNALS_NAMESPACE::detail::reference_tag)
get_invocable_slot	/usr/include/boost/signals/slot.hpp	/^    get_invocable_slot(const F& f, BOOST_SIGNALS_NAMESPACE::detail::reference_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F& f, BOOST_SIGNALS_NAMESPACE::detail::reference_tag)
get_invocable_slot	/usr/include/boost/signals/slot.hpp	/^    get_invocable_slot(const F& f, BOOST_SIGNALS_NAMESPACE::detail::signal_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F& f, BOOST_SIGNALS_NAMESPACE::detail::signal_tag)
get_invocable_slot	/usr/include/boost/signals/slot.hpp	/^    get_invocable_slot(const F& f, BOOST_SIGNALS_NAMESPACE::detail::value_tag)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F& f, BOOST_SIGNALS_NAMESPACE::detail::value_tag)
get_slot_function	/usr/include/boost/signals/slot.hpp	/^    const SlotFunction& get_slot_function() const { return slot_function; }$/;"	f	class:boost::slot	access:public	signature:() const
get_slot_tag	/usr/include/boost/signals/detail/signals_common.hpp	/^      class get_slot_tag {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  group_iterator group;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  shared_ptr<void> group;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:private
group_bridge_compare	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  group_bridge_compare(const Compare& c) : comp(c) $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:public	signature:(const Compare& c)
group_bridge_compare	/usr/include/boost/signals/detail/named_slot_map.hpp	/^class group_bridge_compare {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
group_compare_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef GroupCompare group_compare_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
group_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef slot_container_type::iterator group_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
group_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef slot_container_type::iterator group_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
group_list	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef std::list<connection_slot_pair> group_list;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
group_list	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef std::list<connection_slot_pair> group_list;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
group_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef Group group_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
groups	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  slot_container_type groups;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
impl	/usr/include/boost/signals/detail/signal_base.hpp	/^        shared_ptr<signal_base_impl> impl;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::call_notification	access:public
impl	/usr/include/boost/signals/detail/signal_base.hpp	/^        shared_ptr<signal_base_impl> impl;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:protected
increment	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void increment() $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:()
increment	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        void increment()$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:public	signature:()
inherited	/usr/include/boost/signals/detail/named_slot_map.hpp	/^                          forward_traversal_tag> inherited;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
inherited	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^          inherited;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
inherited	/usr/include/boost/signals/slot.hpp	/^    typedef BOOST_SIGNALS_NAMESPACE::detail::slot_base inherited;$/;"	t	class:boost::slot	access:private
init_next_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void init_next_group()$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private	signature:()
insert	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  iterator insert(const stored_group& name, const connection& con,$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:(const stored_group& name, const connection& con, const any& slot, connect_position at)
intimate	/usr/include/boost/signals/detail/signals_common.hpp	/^      namespace intimate {$/;"	n	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
is_active	/usr/include/boost/signals/slot.hpp	/^        bool is_active() const $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base	access:public	signature:() const
is_back	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool is_back() const { return kind == sk_back; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:() const
is_callable	/usr/include/boost/signals/connection.hpp	/^      struct is_callable {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
is_disconnected	/usr/include/boost/signals/connection.hpp	/^      struct is_disconnected {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
is_front	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool is_front() const { return kind == sk_front; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:() const
is_ref	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct is_ref$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
is_ref	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct is_ref<reference_wrapper<T> >$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
is_ref_tester	/usr/include/boost/signals/detail/signals_common.hpp	/^      no_type is_ref_tester(...);$/;"	p	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail	signature:(....)
is_ref_tester	/usr/include/boost/signals/detail/signals_common.hpp	/^      yes_type is_ref_tester(reference_wrapper<T>*);$/;"	p	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail	signature:(reference_wrapper<T>*)
is_signal	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct is_signal {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
iter	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        mutable Iterator iter;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef named_slot_map_iterator iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public
iterator	/usr/include/boost/signals/detail/signal_base.hpp	/^        typedef named_slot_map::iterator iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:protected
iterator	/usr/include/boost/signals/detail/signal_base.hpp	/^        typedef named_slot_map::iterator iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
kind	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  storage_kind kind;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:private
last_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  group_iterator last_group;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
maybe_get_pointer	/usr/include/boost/signals/trackable.hpp	/^      void maybe_get_pointer(const T& t, truth<false>) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const T& t, truth<false>) const
maybe_get_pointer	/usr/include/boost/signals/trackable.hpp	/^      void maybe_get_pointer(const T& t, truth<true>) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:private	signature:(const T& t, truth<true>) const
named_slot_map	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map(const compare_type& compare);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:(const compare_type& compare)
named_slot_map	/usr/include/boost/signals/detail/named_slot_map.hpp	/^class BOOST_SIGNALS_DECL named_slot_map$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
named_slot_map_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map_iterator() : slot_assigned(false) $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:()
named_slot_map_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map_iterator(const named_slot_map_iterator& other) $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:(const named_slot_map_iterator& other)
named_slot_map_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map_iterator(group_iterator giter, group_iterator last) :$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private	signature:(group_iterator giter, group_iterator last)
named_slot_map_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map_iterator(group_iterator giter, group_iterator last,$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private	signature:(group_iterator giter, group_iterator last, slot_pair_iterator slot)
named_slot_map_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^class BOOST_SIGNALS_DECL named_slot_map_iterator :$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail	inherits:iterator_facade
no_type	/usr/include/boost/signals/detail/signals_common.hpp	/^      typedef double no_type;$/;"	t	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
num_slots	/usr/include/boost/signals/detail/signal_base.hpp	/^        std::size_t num_slots() const { return impl->num_slots(); }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public	signature:() const
num_slots	/usr/include/boost/signals/detail/signal_base.hpp	/^        std::size_t num_slots() const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:() const
obj	/usr/include/boost/signals/connection.hpp	/^        void* obj;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public
operator !=	/usr/include/boost/signals/connection.hpp	/^        bool operator!=(const bound_object& other) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public	signature:(const bound_object& other) const
operator ()	/usr/include/boost/signals/connection.hpp	/^        inline bool operator()(const argument_type& c) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_callable	access:public	signature:(const argument_type& c) const
operator ()	/usr/include/boost/signals/connection.hpp	/^        inline bool operator()(const argument_type& c) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_disconnected	access:public	signature:(const argument_type& c) const
operator ()	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool operator()(const stored_group& k1, const stored_group& k2) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:public	signature:(const stored_group& k1, const stored_group& k2) const
operator ()	/usr/include/boost/signals/signal_template.hpp	/^          R operator()(const Pair& slot) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public	signature:(const Pair& slot) const
operator ()	/usr/include/boost/signals/signal_template.hpp	/^          unusable operator()(const Pair& slot) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public	signature:(const Pair& slot) const
operator ()	/usr/include/boost/signals/signal_template.hpp	/^    result_type operator()(BOOST_SIGNALS_PARMS) const;$/;"	p	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(BOOST_SIGNALS_PARMS) const
operator ()	/usr/include/boost/signals/signal_template.hpp	/^    result_type operator()(BOOST_SIGNALS_PARMS);$/;"	p	class:boost::BOOST_SIGNALS_SIGNAL	access:public	signature:(BOOST_SIGNALS_PARMS)
operator ()	/usr/include/boost/signals/signal_template.hpp	/^  >::operator()(BOOST_SIGNALS_PARMS) const$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	signature:(BOOST_SIGNALS_PARMS) const
operator ()	/usr/include/boost/signals/signal_template.hpp	/^  >::operator()(BOOST_SIGNALS_PARMS)$/;"	f	class:boost::BOOST_SIGNALS_SIGNAL	signature:(BOOST_SIGNALS_PARMS)
operator ()	/usr/include/boost/signals/trackable.hpp	/^      void operator()(const T& t) const$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_objects_visitor	access:public	signature:(const T& t) const
operator <	/usr/include/boost/signals/connection.hpp	/^        bool operator<(const bound_object& other) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public	signature:(const bound_object& other) const
operator <	/usr/include/boost/signals/connection.hpp	/^        bool operator<(const connection_slot_pair&) const { return false;}$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public	signature:(const connection_slot_pair&) const
operator <	/usr/include/boost/signals/connection.hpp	/^      bool operator<(const connection& other) const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(const connection& other) const
operator =	/usr/include/boost/signals/connection.hpp	/^      connection& operator=(const connection& other) ;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(const connection& other)
operator =	/usr/include/boost/signals/connection.hpp	/^      scoped_connection& operator=(const connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:(const connection&)
operator =	/usr/include/boost/signals/connection.hpp	/^      scoped_connection& operator=(const scoped_connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:(const scoped_connection&)
operator =	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  named_slot_map_iterator& operator=(const named_slot_map_iterator& other) $/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:public	signature:(const named_slot_map_iterator& other)
operator =	/usr/include/boost/signals/slot.hpp	/^    slot& operator=(const slot&); \/\/ no assignment operator$/;"	p	class:boost::slot	access:private	signature:(const slot&)
operator =	/usr/include/boost/signals/trackable.hpp	/^    trackable& operator=(const trackable&)$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:protected	signature:(const trackable&)
operator ==	/usr/include/boost/signals/connection.hpp	/^        bool operator==(const bound_object& other) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public	signature:(const bound_object& other) const
operator ==	/usr/include/boost/signals/connection.hpp	/^        bool operator==(const connection_slot_pair&) const { return false; }$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public	signature:(const connection_slot_pair&) const
operator ==	/usr/include/boost/signals/connection.hpp	/^      bool operator==(const connection& other) const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(const connection& other) const
operator >	/usr/include/boost/signals/connection.hpp	/^        bool operator>(const bound_object& other) const$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::bound_object	access:public	signature:(const bound_object& other) const
outer_bound_slot_caller	/usr/include/boost/signals/signal_template.hpp	/^      outer_bound_slot_caller;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:private
real_group_compare_type	/usr/include/boost/signals/signal_template.hpp	/^      real_group_compare_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:private
reference_tag	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct reference_tag {};$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
release	/usr/include/boost/signals/connection.hpp	/^        void release() { auto_disconnect = false; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object	access:public	signature:()
release	/usr/include/boost/signals/connection.hpp	/^      connection release();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:()
release	/usr/include/boost/signals/slot.hpp	/^    void release() const { data->watch_bound_objects.set_controlling(false); }$/;"	f	class:boost::slot	access:public	signature:() const
released	/usr/include/boost/signals/connection.hpp	/^      bool released;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:private
remove_disconnected_slots	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  void remove_disconnected_slots();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:public	signature:()
remove_disconnected_slots	/usr/include/boost/signals/detail/signal_base.hpp	/^        void remove_disconnected_slots() const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:private	signature:() const
reset	/usr/include/boost/signals/connection.hpp	/^      void reset(BOOST_SIGNALS_NAMESPACE::detail::basic_connection*);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:private	signature:(BOOST_SIGNALS_NAMESPACE::detail::basic_connection*)
result_type	/usr/include/boost/signals/connection.hpp	/^        typedef bool result_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_callable	access:public
result_type	/usr/include/boost/signals/connection.hpp	/^        typedef bool result_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_disconnected	access:public
result_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef bool result_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:public
result_type	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        typedef typename Function::result_type result_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:private
result_type	/usr/include/boost/signals/signal_template.hpp	/^          typedef R result_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public
result_type	/usr/include/boost/signals/signal_template.hpp	/^          typedef unusable result_type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::BOOST_SIGNALS_CALL_BOUND::caller	access:public
result_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef typename Combiner::result_type result_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
scoped_connection	/usr/include/boost/signals/connection.hpp	/^      scoped_connection() : connection(), released(false) {}$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:()
scoped_connection	/usr/include/boost/signals/connection.hpp	/^      scoped_connection(const connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:(const connection&)
scoped_connection	/usr/include/boost/signals/connection.hpp	/^      scoped_connection(const scoped_connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:(const scoped_connection&)
scoped_connection	/usr/include/boost/signals/connection.hpp	/^    class BOOST_SIGNALS_DECL scoped_connection : public connection {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE	inherits:connection
second	/usr/include/boost/signals/connection.hpp	/^        any second;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::connection_slot_pair	access:public
second_argument_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef const stored_group& second_argument_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::group_bridge_compare	access:public
select	/usr/include/boost/signals/detail/signals_common.hpp	/^        typedef typename intimate::Selector<Condition>::type select;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::IF	access:public
set_controlling	/usr/include/boost/signals/connection.hpp	/^      void set_controlling(bool control = true)$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(bool control = true)
signal	/usr/include/boost/signals/connection.hpp	/^        void* signal;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection	access:public
signal_base	/usr/include/boost/signals/detail/signal_base.hpp	/^        signal_base(const compare_type& comp, const any& combiner);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public	signature:(const compare_type& comp, const any& combiner)
signal_base	/usr/include/boost/signals/detail/signal_base.hpp	/^      class BOOST_SIGNALS_DECL signal_base : public noncopyable {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail	inherits:noncopyable
signal_base_impl	/usr/include/boost/signals/detail/signal_base.hpp	/^        signal_base_impl(const compare_type&, const any&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:(const compare_type&, const any&)
signal_base_impl	/usr/include/boost/signals/detail/signal_base.hpp	/^      class BOOST_SIGNALS_DECL signal_base_impl {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
signal_connected	/usr/include/boost/signals/trackable.hpp	/^    void signal_connected(connection, BOOST_SIGNALS_NAMESPACE::detail::bound_object&) const;$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private	signature:(connection, BOOST_SIGNALS_NAMESPACE::detail::bound_object&) const
signal_data	/usr/include/boost/signals/connection.hpp	/^        void* signal_data;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection	access:public
signal_disconnect	/usr/include/boost/signals/connection.hpp	/^        void (*signal_disconnect)(void*, void*);$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::basic_connection	access:public
signal_disconnected	/usr/include/boost/signals/trackable.hpp	/^    static void signal_disconnected(void* obj, void* data);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:private	signature:(void* obj, void* data)
signal_or_value	/usr/include/boost/signals/detail/signals_common.hpp	/^                            value_tag>::type signal_or_value;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::get_slot_tag	access:private
signal_tag	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct signal_tag {};$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
sk_back	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  enum storage_kind { sk_empty, sk_front, sk_back, sk_group };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::storage_kind
sk_empty	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  enum storage_kind { sk_empty, sk_front, sk_back, sk_group };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::storage_kind
sk_front	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  enum storage_kind { sk_empty, sk_front, sk_back, sk_group };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::storage_kind
sk_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  enum storage_kind { sk_empty, sk_front, sk_back, sk_group };$/;"	e	enum:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group::storage_kind
slot	/usr/include/boost/signals/slot.hpp	/^    slot(); \/\/ no default constructor$/;"	p	class:boost::slot	access:private	signature:()
slot	/usr/include/boost/signals/slot.hpp	/^    slot(F* f) : slot_function(f)$/;"	f	class:boost::slot	access:public	signature:(F* f)
slot	/usr/include/boost/signals/slot.hpp	/^    slot(const F& f) : slot_function(BOOST_SIGNALS_NAMESPACE::get_invocable_slot(f, BOOST_SIGNALS_NAMESPACE::tag_type(f)))$/;"	f	class:boost::slot	access:public	signature:(const F& f)
slot	/usr/include/boost/signals/slot.hpp	/^  class slot : public BOOST_SIGNALS_NAMESPACE::detail::slot_base {$/;"	c	namespace:boost	inherits:BOOST_SIGNALS_NAMESPACE::detail::slot_base
slot_	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  slot_pair_iterator slot_;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
slot_assigned	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  bool slot_assigned;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
slot_base	/usr/include/boost/signals/slot.hpp	/^      class BOOST_SIGNALS_DECL slot_base {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
slot_call_iterator	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^        slot_call_iterator(Iterator iter_in, Iterator end_in, Function func,$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_call_iterator	access:public	signature:(Iterator iter_in, Iterator end_in, Function func, optional<result_type> &c)
slot_call_iterator	/usr/include/boost/signals/detail/slot_call_iterator.hpp	/^      class slot_call_iterator$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail	inherits:iterator_facade
slot_call_iterator	/usr/include/boost/signals/signal_template.hpp	/^              call_bound_slot, iterator> slot_call_iterator;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
slot_container_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef std::map<stored_group, group_list, compare_type> slot_container_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map	access:private
slot_container_type	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef std::map<stored_group, group_list, compare_type> slot_container_type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
slot_disconnected	/usr/include/boost/signals/detail/signal_base.hpp	/^        static void slot_disconnected(void* obj, void* data);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:(void* obj, void* data)
slot_function	/usr/include/boost/signals/slot.hpp	/^    SlotFunction slot_function;$/;"	m	class:boost::slot	access:private
slot_function_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef SlotFunction slot_function_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
slot_pair_iterator	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  typedef group_list::iterator slot_pair_iterator;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::named_slot_map_iterator	access:private
slot_result_type	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct slot_result_type {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
slot_result_type	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct slot_result_type<void> {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
slot_result_type	/usr/include/boost/signals/signal_template.hpp	/^      slot_result_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
slot_type	/usr/include/boost/signals/signal_template.hpp	/^    typedef slot<slot_function_type> slot_type;$/;"	t	class:boost::BOOST_SIGNALS_SIGNAL	access:public
slots_	/usr/include/boost/signals/detail/signal_base.hpp	/^        mutable named_slot_map slots_;$/;"	m	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
storage_kind	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  enum storage_kind { sk_empty, sk_front, sk_back, sk_group };$/;"	g	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public
stored_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  stored_group(const T& p_group) : kind(sk_group), group(new T(p_group)) { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:(const T& p_group)
stored_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^  stored_group(storage_kind p_kind = sk_empty) : kind(p_kind), group() { }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::stored_group	access:public	signature:(storage_kind p_kind = sk_empty)
stored_group	/usr/include/boost/signals/detail/named_slot_map.hpp	/^class stored_group$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
swap	/usr/include/boost/signals/connection.hpp	/^      void swap(connection& other);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:(connection& other)
swap	/usr/include/boost/signals/connection.hpp	/^      void swap(scoped_connection&);$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:(scoped_connection&)
t	/usr/include/boost/signals/detail/signals_common.hpp	/^        static T* t;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::is_ref	access:public
tag_type	/usr/include/boost/signals/slot.hpp	/^    tag_type(const F&)$/;"	f	namespace:boost::BOOST_SIGNALS_NAMESPACE	signature:(const F&)
temporarily_set_clearing	/usr/include/boost/signals/detail/signal_base.hpp	/^          temporarily_set_clearing(signal_base_impl* b) : base(b)$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::temporarily_set_clearing	access:public	signature:(signal_base_impl* b)
temporarily_set_clearing	/usr/include/boost/signals/detail/signal_base.hpp	/^        class temporarily_set_clearing {$/;"	c	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public
trackable	/usr/include/boost/signals/trackable.hpp	/^    trackable() : connected_signals(), dying(false) {}$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:protected	signature:()
trackable	/usr/include/boost/signals/trackable.hpp	/^    trackable(const trackable&) : connected_signals(), dying(false) {}$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:protected	signature:(const trackable&)
trackable	/usr/include/boost/signals/trackable.hpp	/^  class BOOST_SIGNALS_DECL trackable {$/;"	c	namespace:boost::BOOST_SIGNALS_NAMESPACE
truth	/usr/include/boost/signals/trackable.hpp	/^    template<bool Cond> struct truth {};$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
type	/usr/include/boost/signals/detail/signals_common.hpp	/^                            signal_or_value>::type type;$/;"	t	class:boost::BOOST_SIGNALS_NAMESPACE::detail::get_slot_tag	access:public
type	/usr/include/boost/signals/detail/signals_common.hpp	/^            typedef Else type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectElse::Result	access:public
type	/usr/include/boost/signals/detail/signals_common.hpp	/^            typedef Then type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::SelectThen::Result	access:public
type	/usr/include/boost/signals/detail/signals_common.hpp	/^          typedef SelectElse type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::Selector	access:public
type	/usr/include/boost/signals/detail/signals_common.hpp	/^          typedef SelectThen type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::intimate::Selector	access:public
type	/usr/include/boost/signals/detail/signals_common.hpp	/^        typedef R type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_result_type	access:public
type	/usr/include/boost/signals/detail/signals_common.hpp	/^        typedef typename select::template Result<Then,Else>::type type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::IF	access:public
type	/usr/include/boost/signals/detail/signals_common.hpp	/^        typedef unusable type;$/;"	t	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_result_type	access:public
unblock	/usr/include/boost/signals/connection.hpp	/^      void unblock() { con->blocked_ = false; }$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:()
unusable	/usr/include/boost/signals/detail/signals_common.hpp	/^        unusable() {}$/;"	f	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::unusable	access:public	signature:()
unusable	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct unusable {$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
value_tag	/usr/include/boost/signals/detail/signals_common.hpp	/^      struct value_tag {};$/;"	s	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
watch_bound_objects	/usr/include/boost/signals/slot.hpp	/^          connection watch_bound_objects;$/;"	m	struct:boost::BOOST_SIGNALS_NAMESPACE::detail::slot_base::data_t	access:public
yes_type	/usr/include/boost/signals/detail/signals_common.hpp	/^      typedef char yes_type;$/;"	t	namespace:boost::BOOST_SIGNALS_NAMESPACE::detail
~auto_disconnect_bound_object	/usr/include/boost/signals/connection.hpp	/^        ~auto_disconnect_bound_object()$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::auto_disconnect_bound_object	access:public	signature:()
~call_notification	/usr/include/boost/signals/detail/signal_base.hpp	/^        ~call_notification();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::call_notification	access:public	signature:()
~connection	/usr/include/boost/signals/connection.hpp	/^      ~connection();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::connection	access:public	signature:()
~scoped_connection	/usr/include/boost/signals/connection.hpp	/^      ~scoped_connection();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::scoped_connection	access:public	signature:()
~signal_base	/usr/include/boost/signals/detail/signal_base.hpp	/^        ~signal_base();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base	access:public	signature:()
~signal_base_impl	/usr/include/boost/signals/detail/signal_base.hpp	/^        ~signal_base_impl();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl	access:public	signature:()
~temporarily_set_clearing	/usr/include/boost/signals/detail/signal_base.hpp	/^          ~temporarily_set_clearing()$/;"	f	class:boost::BOOST_SIGNALS_NAMESPACE::detail::signal_base_impl::temporarily_set_clearing	access:public	signature:()
~trackable	/usr/include/boost/signals/trackable.hpp	/^    ~trackable();$/;"	p	class:boost::BOOST_SIGNALS_NAMESPACE::trackable	access:protected	signature:()
