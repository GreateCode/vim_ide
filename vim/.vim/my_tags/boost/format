!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_FORMAT_CLASS_HPP	/usr/include/boost/format/format_class.hpp	14;"	d
BOOST_FORMAT_COMPAT_WORKAROUNDS_HPP	/usr/include/boost/format/detail/compat_workarounds.hpp	31;"	d
BOOST_FORMAT_CONFIG_MACROS_HPP	/usr/include/boost/format/detail/config_macros.hpp	18;"	d
BOOST_FORMAT_EXCEPTIONS_HPP	/usr/include/boost/format/exceptions.hpp	17;"	d
BOOST_FORMAT_FEED_ARGS_HPP	/usr/include/boost/format/feed_args.hpp	15;"	d
BOOST_FORMAT_FUNCS_HPP	/usr/include/boost/format/free_funcs.hpp	14;"	d
BOOST_FORMAT_FWD_HPP	/usr/include/boost/format/format_fwd.hpp	14;"	d
BOOST_FORMAT_GROUP_HPP	/usr/include/boost/format/group.hpp	24;"	d
BOOST_FORMAT_IGNORE_STRINGSTREAM	/usr/include/boost/format/detail/config_macros.hpp	54;"	d
BOOST_FORMAT_IMPLEMENTATION_HPP	/usr/include/boost/format/format_implementation.hpp	15;"	d
BOOST_FORMAT_INTERNALS_HPP	/usr/include/boost/format/internals.hpp	15;"	d
BOOST_FORMAT_INTERNAL_FWD_HPP	/usr/include/boost/format/internals_fwd.hpp	14;"	d
BOOST_FORMAT_OSTREAM_DEFINED	/usr/include/boost/format/detail/unset_macros.hpp	33;"	d
BOOST_FORMAT_OSTREAM_DEFINED	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	34;"	d
BOOST_FORMAT_PARSING_HPP	/usr/include/boost/format/parsing.hpp	15;"	d
BOOST_FORMAT_STREAMBUF_DEFINED	/usr/include/boost/format/detail/unset_macros.hpp	30;"	d
BOOST_FORMAT_STREAMBUF_DEFINED	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	37;"	d
BOOST_FORMAT_WORKAROUNDS_GCC295_H	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	30;"	d
BOOST_IO_NEEDS_USING_DECLARATION	/usr/include/boost/format/detail/unset_macros.hpp	24;"	d
BOOST_IO_NEEDS_USING_DECLARATION	/usr/include/boost/format/detail/workarounds_stlport.hpp	30;"	d
BOOST_IO_NEEDS_USING_DECLARATION	/usr/include/boost/format/detail/workarounds_stlport.hpp	36;"	d
BOOST_IO_STD	/usr/include/boost/format/detail/config_macros.hpp	37;"	d
BOOST_IO_STD	/usr/include/boost/format/detail/unset_macros.hpp	21;"	d
BOOST_IO_STD	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	42;"	d
BOOST_IO_STD	/usr/include/boost/format/detail/workarounds_stlport.hpp	29;"	d
BOOST_IO_STD	/usr/include/boost/format/detail/workarounds_stlport.hpp	35;"	d
BOOST_MACROS_STLPORT_HPP	/usr/include/boost/format/detail/workarounds_stlport.hpp	14;"	d
BOOST_MSVC_DISAMBIGUATER_HPP	/usr/include/boost/format/detail/msvc_disambiguater.hpp	15;"	d
BOOST_NO_LOCALE_ISDIGIT	/usr/include/boost/format/detail/config_macros.hpp	45;"	d
BOOST_NO_LOCALE_ISDIGIT	/usr/include/boost/format/detail/unset_macros.hpp	18;"	d
BOOST_NO_OVERLOAD_FOR_NON_CONST	/usr/include/boost/format/detail/config_macros.hpp	49;"	d
BOOST_NO_OVERLOAD_FOR_NON_CONST	/usr/include/boost/format/detail/unset_macros.hpp	15;"	d
BOOST_NO_STRING_APPEND	/usr/include/boost/format/detail/workarounds_stlport.hpp	19;"	d
BOOST_NO_TEMPLATE_STD_STREAM	/usr/include/boost/format/detail/unset_macros.hpp	27;"	d
BOOST_NO_TEMPLATE_STD_STREAM	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	39;"	d
BOOST_SK_ALT_SSTREAM_HPP	/usr/include/boost/format/alt_sstream.hpp	16;"	d
BOOST_SK_ALT_SSTREAM_IMPL_HPP	/usr/include/boost/format/alt_sstream_impl.hpp	14;"	d
CharT	/usr/include/boost/format/format_class.hpp	/^        typedef Ch  CharT;   \/\/ borland fails in operator% if we use Ch and Tr directly$/;"	t	class:boost::basic_format	access:public
CompatAlloc	/usr/include/boost/format/detail/compat_workarounds.hpp	/^        class CompatAlloc$/;"	c	namespace:boost::io
CompatAlloc	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^        class CompatAlloc< ::std::alloc>$/;"	c	namespace:boost::io
CompatTraits	/usr/include/boost/format/detail/compat_workarounds.hpp	/^        class CompatTraits$/;"	c	namespace:boost::io
CompatTraits	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^        class CompatTraits< ::std::char_traits<Ch> > {$/;"	c	namespace:boost::io
CompatTraits	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^        class CompatTraits< ::std::string_char_traits<Ch> >$/;"	c	namespace:boost::io	inherits:::std::string_char_traits
No_Op	/usr/include/boost/format/alt_sstream.hpp	/^            class No_Op { $/;"	c	class:boost::io::basic_oaltstringstream	access:private
a10_	/usr/include/boost/format/group.hpp	/^    T10 a10_;$/;"	m	struct:boost::io::detail::group10	access:public
a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group1	access:public
a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group10	access:public
a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group2	access:public
a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group3	access:public
a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group4	access:public
a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group5	access:public
a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group6	access:public
a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group7	access:public
a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group8	access:public
a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group9	access:public
a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group10	access:public
a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group2	access:public
a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group3	access:public
a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group4	access:public
a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group5	access:public
a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group6	access:public
a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group7	access:public
a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group8	access:public
a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group9	access:public
a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group10	access:public
a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group3	access:public
a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group4	access:public
a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group5	access:public
a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group6	access:public
a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group7	access:public
a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group8	access:public
a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group9	access:public
a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group10	access:public
a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group4	access:public
a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group5	access:public
a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group6	access:public
a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group7	access:public
a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group8	access:public
a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group9	access:public
a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group10	access:public
a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group5	access:public
a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group6	access:public
a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group7	access:public
a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group8	access:public
a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group9	access:public
a6_	/usr/include/boost/format/group.hpp	/^    T6 a6_;$/;"	m	struct:boost::io::detail::group10	access:public
a6_	/usr/include/boost/format/group.hpp	/^    T6 a6_;$/;"	m	struct:boost::io::detail::group6	access:public
a6_	/usr/include/boost/format/group.hpp	/^    T6 a6_;$/;"	m	struct:boost::io::detail::group7	access:public
a6_	/usr/include/boost/format/group.hpp	/^    T6 a6_;$/;"	m	struct:boost::io::detail::group8	access:public
a6_	/usr/include/boost/format/group.hpp	/^    T6 a6_;$/;"	m	struct:boost::io::detail::group9	access:public
a7_	/usr/include/boost/format/group.hpp	/^    T7 a7_;$/;"	m	struct:boost::io::detail::group10	access:public
a7_	/usr/include/boost/format/group.hpp	/^    T7 a7_;$/;"	m	struct:boost::io::detail::group7	access:public
a7_	/usr/include/boost/format/group.hpp	/^    T7 a7_;$/;"	m	struct:boost::io::detail::group8	access:public
a7_	/usr/include/boost/format/group.hpp	/^    T7 a7_;$/;"	m	struct:boost::io::detail::group9	access:public
a8_	/usr/include/boost/format/group.hpp	/^    T8 a8_;$/;"	m	struct:boost::io::detail::group10	access:public
a8_	/usr/include/boost/format/group.hpp	/^    T8 a8_;$/;"	m	struct:boost::io::detail::group8	access:public
a8_	/usr/include/boost/format/group.hpp	/^    T8 a8_;$/;"	m	struct:boost::io::detail::group9	access:public
a9_	/usr/include/boost/format/group.hpp	/^    T9 a9_;$/;"	m	struct:boost::io::detail::group10	access:public
a9_	/usr/include/boost/format/group.hpp	/^    T9 a9_;$/;"	m	struct:boost::io::detail::group9	access:public
all_error_bits	/usr/include/boost/format/format_fwd.hpp	/^                                 all_error_bits = 255, no_error_bits=0 };$/;"	e	enum:boost::io::format_error_bits
alloc_	/usr/include/boost/format/alt_sstream.hpp	/^            compat_allocator_type alloc_;  \/\/ the allocator object$/;"	m	class:boost::io::basic_altstringbuf	access:private
alloc_min	/usr/include/boost/format/alt_sstream.hpp	/^            enum { alloc_min = 256}; \/\/ minimum size of allocations$/;"	e	enum:boost::io::basic_altstringbuf::__anon1
allocator_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef Alloc                     allocator_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
allocator_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef Alloc  allocator_type;$/;"	t	class:boost::io::basic_oaltstringstream	access:public
append_string	/usr/include/boost/format/parsing.hpp	/^    void append_string(String& dst, const String& src, $/;"	f	namespace:boost::io::detail	signature:(String& dst, const String& src, const typename String::size_type beg, const typename String::size_type end)
appendix_	/usr/include/boost/format/internals.hpp	/^        string_type  appendix_; \/\/- piece of string between this item and the next$/;"	m	struct:boost::io::detail::format_item	access:public
apply_manip	/usr/include/boost/format/internals.hpp	/^        void apply_manip(T manipulator)          \/\/- modifies state by applying manipulator$/;"	f	struct:boost::io::detail::stream_format_state	access:public	signature:(T manipulator)
apply_manip_body	/usr/include/boost/format/internals.hpp	/^    void apply_manip_body( stream_format_state<Ch, Tr>& self,$/;"	f	namespace:boost::io::detail	signature:( stream_format_state<Ch, Tr>& self, T manipulator)
apply_manip_body	/usr/include/boost/format/internals_fwd.hpp	/^    void apply_manip_body (stream_format_state<Ch, Tr>& self,$/;"	p	namespace:boost::io::detail	signature:(stream_format_state<Ch, Tr>& self, T manipulator)
apply_on	/usr/include/boost/format/internals.hpp	/^        void apply_on(basic_ios & os,            \/\/- applies format_state to the stream$/;"	p	struct:boost::io::detail::stream_format_state	access:public	signature:(basic_ios & os, boost::io::detail::locale_t * loc_default = 0) const
apply_on	/usr/include/boost/format/internals.hpp	/^    void stream_format_state<Ch,Tr>:: apply_on (basic_ios & os,$/;"	f	class:boost::io::detail::stream_format_state	signature:(basic_ios & os, boost::io::detail::locale_t * loc_default) const
argN_	/usr/include/boost/format/internals.hpp	/^        int         argN_;  \/\/- argument number (starts at 0,  eg : %1 => argN=0)$/;"	m	struct:boost::io::detail::format_item	access:public
argN_ignored	/usr/include/boost/format/internals.hpp	/^                          argN_ignored    = -3  \/\/ ignored directive. (no argument read)$/;"	e	enum:boost::io::detail::format_item::arg_values
argN_no_posit	/usr/include/boost/format/internals.hpp	/^        enum arg_values { argN_no_posit   = -1, \/\/ non-positional directive. will set argN later$/;"	e	enum:boost::io::detail::format_item::arg_values
argN_tabulation	/usr/include/boost/format/internals.hpp	/^                          argN_tabulation = -2, \/\/ tabulation directive. (no argument read) $/;"	e	enum:boost::io::detail::format_item::arg_values
arg_values	/usr/include/boost/format/internals.hpp	/^        enum arg_values { argN_no_posit   = -1, \/\/ non-positional directive. will set argN later$/;"	g	struct:boost::io::detail::format_item	access:public
bad_format_string	/usr/include/boost/format/exceptions.hpp	/^            bad_format_string(std::size_t pos, std::size_t size) $/;"	f	class:boost::io::bad_format_string	access:public	signature:(std::size_t pos, std::size_t size)
bad_format_string	/usr/include/boost/format/exceptions.hpp	/^        class bad_format_string : public format_error$/;"	c	namespace:boost::io	inherits:format_error
bad_format_string_bit	/usr/include/boost/format/format_fwd.hpp	/^        enum format_error_bits { bad_format_string_bit = 1, $/;"	e	enum:boost::io::format_error_bits
basic_altstringbuf	/usr/include/boost/format/alt_sstream.hpp	/^            explicit basic_altstringbuf (basic_altstringbuf * s,$/;"	f	class:boost::io::basic_altstringbuf	access:protected	signature:(basic_altstringbuf * s, ::std::ios_base::openmode mode = ::std::ios_base::in | ::std::ios_base::out)
basic_altstringbuf	/usr/include/boost/format/alt_sstream.hpp	/^            explicit basic_altstringbuf(const string_type& s,$/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:(const string_type& s, ::std::ios_base::openmode mode = ::std::ios_base::in | ::std::ios_base::out)
basic_altstringbuf	/usr/include/boost/format/alt_sstream.hpp	/^            explicit basic_altstringbuf(std::ios_base::openmode mode$/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_altstringbuf	/usr/include/boost/format/alt_sstream.hpp	/^        class basic_altstringbuf $/;"	c	namespace:boost::io	inherits:::std::basic_streambuf
basic_format	/usr/include/boost/format/format_class.hpp	/^        basic_format(const basic_format& x);$/;"	p	class:boost::basic_format	access:public	signature:(const basic_format& x)
basic_format	/usr/include/boost/format/format_class.hpp	/^        explicit basic_format(const Ch* str, const std::locale & loc);$/;"	p	class:boost::basic_format	access:public	signature:(const Ch* str, const std::locale & loc)
basic_format	/usr/include/boost/format/format_class.hpp	/^        explicit basic_format(const Ch* str=NULL);$/;"	p	class:boost::basic_format	access:public	signature:(const Ch* str=NULL)
basic_format	/usr/include/boost/format/format_class.hpp	/^        explicit basic_format(const string_type& s);$/;"	p	class:boost::basic_format	access:public	signature:(const string_type& s)
basic_format	/usr/include/boost/format/format_class.hpp	/^        explicit basic_format(const string_type& s, const std::locale & loc);$/;"	p	class:boost::basic_format	access:public	signature:(const string_type& s, const std::locale & loc)
basic_format	/usr/include/boost/format/format_class.hpp	/^    class basic_format $/;"	c	namespace:boost
basic_format	/usr/include/boost/format/format_implementation.hpp	/^    basic_format<Ch, Tr, Alloc>:: basic_format(const Ch* s)$/;"	f	class:boost::basic_format	signature:(const Ch* s)
basic_format	/usr/include/boost/format/format_implementation.hpp	/^    basic_format<Ch, Tr, Alloc>:: basic_format(const Ch* s, const std::locale & loc)$/;"	f	class:boost::basic_format	signature:(const Ch* s, const std::locale & loc)
basic_format	/usr/include/boost/format/format_implementation.hpp	/^    basic_format<Ch, Tr, Alloc>:: basic_format(const basic_format& x)$/;"	f	class:boost::basic_format	signature:(const basic_format& x)
basic_format	/usr/include/boost/format/format_implementation.hpp	/^    basic_format<Ch, Tr, Alloc>:: basic_format(const string_type& s)$/;"	f	class:boost::basic_format	signature:(const string_type& s)
basic_format	/usr/include/boost/format/format_implementation.hpp	/^    basic_format<Ch, Tr, Alloc>:: basic_format(const string_type& s, const std::locale & loc)$/;"	f	class:boost::basic_format	signature:(const string_type& s, const std::locale & loc)
basic_ios	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^        basic_ios(streambuf * p) : ostream(p) {};$/;"	f	class:std::basic_ios	access:public	signature:(streambuf * p)
basic_ios	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^    class basic_ios<char, Tr> : public ostream {$/;"	c	namespace:std	inherits:ostream
basic_ios	/usr/include/boost/format/internals.hpp	/^        typedef BOOST_IO_STD basic_ios<Ch, Tr>                    basic_ios;$/;"	t	struct:boost::io::detail::format_item	access:public
basic_ios	/usr/include/boost/format/internals.hpp	/^        typedef BOOST_IO_STD basic_ios<Ch, Tr>   basic_ios;$/;"	t	struct:boost::io::detail::stream_format_state	access:public
basic_oaltstringstream	/usr/include/boost/format/alt_sstream.hpp	/^            basic_oaltstringstream() $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:()
basic_oaltstringstream	/usr/include/boost/format/alt_sstream.hpp	/^            basic_oaltstringstream(::boost::shared_ptr<stringbuf_t> buf) $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:(::boost::shared_ptr<stringbuf_t> buf)
basic_oaltstringstream	/usr/include/boost/format/alt_sstream.hpp	/^            basic_oaltstringstream(stringbuf_t * buf) $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:(stringbuf_t * buf)
basic_oaltstringstream	/usr/include/boost/format/alt_sstream.hpp	/^        class basic_oaltstringstream $/;"	c	namespace:boost::io	inherits:base_from_member,::std::basic_ostream
basic_ostream	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^         basic_ostream(streambuf * p) : basic_ios<char,Tr> (p) {}$/;"	f	class:std::basic_ostream	access:public	signature:(streambuf * p)
basic_ostream	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^     class basic_ostream<char, Tr> : public basic_ios<char, Tr>$/;"	c	namespace:std	inherits:basic_ios
basic_streambuf	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^    class basic_streambuf<char, Tr> : public streambuf {$/;"	c	namespace:std	inherits:streambuf
beg_	/usr/include/boost/format/exceptions.hpp	/^            int index_, beg_, end_;    \/\/ range is [ beg, end [$/;"	m	class:boost::io::out_of_range	access:private
begin	/usr/include/boost/format/alt_sstream.hpp	/^            Ch * begin() const $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
begin	/usr/include/boost/format/alt_sstream.hpp	/^            Ch * begin() const; $/;"	p	class:boost::io::basic_altstringbuf	access:public	signature:() const
begin	/usr/include/boost/format/alt_sstream_impl.hpp	/^        begin () const {$/;"	f	class:boost::io::basic_altstringbuf	signature:() const
bind_arg	/usr/include/boost/format/format_class.hpp	/^        basic_format&  bind_arg(int argN, const T& val) $/;"	f	class:boost::basic_format	access:public	signature:(int argN, const T& val)
bind_arg_body	/usr/include/boost/format/format_class.hpp	/^        io::detail::bind_arg_body (basic_format<Ch2, Tr2, Alloc2>&, int, const T&);$/;"	p	class:boost::basic_format::io::detail	access:friend	signature:(basic_format<Ch2, Tr2, Alloc2>&, int, const T&)
bind_arg_body	/usr/include/boost/format/format_implementation.hpp	/^    bind_arg_body (basic_format<Ch, Tr, Alloc>& self, int argN, const T& val) {$/;"	f	namespace:boost::io::detail	signature:(basic_format<Ch, Tr, Alloc>& self, int argN, const T& val)
bind_arg_body	/usr/include/boost/format/internals_fwd.hpp	/^    bind_arg_body (basic_format<Ch, Tr, Alloc>& self,$/;"	p	namespace:boost::io::detail	signature:(basic_format<Ch, Tr, Alloc>& self, int argN, const T& val)
boost	/usr/include/boost/format/alt_sstream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/alt_sstream_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/detail/compat_workarounds.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/detail/config_macros.hpp	/^namespace boost { namespace io { namespace detail {$/;"	n
boost	/usr/include/boost/format/detail/config_macros.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/exceptions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/feed_args.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/format_class.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/format_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/format_implementation.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/free_funcs.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/group.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/internals.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/internals_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/format/parsing.hpp	/^namespace boost {$/;"	n
boost::basic_format	/usr/include/boost/format/format_class.hpp	/^    class basic_format $/;"	c	namespace:boost
boost::basic_format::CharT	/usr/include/boost/format/format_class.hpp	/^        typedef Ch  CharT;   \/\/ borland fails in operator% if we use Ch and Tr directly$/;"	t	class:boost::basic_format	access:public
boost::basic_format::basic_format	/usr/include/boost/format/format_class.hpp	/^        basic_format(const basic_format& x);$/;"	p	class:boost::basic_format	access:public	signature:(const basic_format& x)
boost::basic_format::basic_format	/usr/include/boost/format/format_class.hpp	/^        explicit basic_format(const Ch* str, const std::locale & loc);$/;"	p	class:boost::basic_format	access:public	signature:(const Ch* str, const std::locale & loc)
boost::basic_format::basic_format	/usr/include/boost/format/format_class.hpp	/^        explicit basic_format(const Ch* str=NULL);$/;"	p	class:boost::basic_format	access:public	signature:(const Ch* str=NULL)
boost::basic_format::basic_format	/usr/include/boost/format/format_class.hpp	/^        explicit basic_format(const string_type& s);$/;"	p	class:boost::basic_format	access:public	signature:(const string_type& s)
boost::basic_format::basic_format	/usr/include/boost/format/format_class.hpp	/^        explicit basic_format(const string_type& s, const std::locale & loc);$/;"	p	class:boost::basic_format	access:public	signature:(const string_type& s, const std::locale & loc)
boost::basic_format::basic_format	/usr/include/boost/format/format_implementation.hpp	/^    basic_format<Ch, Tr, Alloc>:: basic_format(const Ch* s)$/;"	f	class:boost::basic_format	signature:(const Ch* s)
boost::basic_format::basic_format	/usr/include/boost/format/format_implementation.hpp	/^    basic_format<Ch, Tr, Alloc>:: basic_format(const Ch* s, const std::locale & loc)$/;"	f	class:boost::basic_format	signature:(const Ch* s, const std::locale & loc)
boost::basic_format::basic_format	/usr/include/boost/format/format_implementation.hpp	/^    basic_format<Ch, Tr, Alloc>:: basic_format(const basic_format& x)$/;"	f	class:boost::basic_format	signature:(const basic_format& x)
boost::basic_format::basic_format	/usr/include/boost/format/format_implementation.hpp	/^    basic_format<Ch, Tr, Alloc>:: basic_format(const string_type& s)$/;"	f	class:boost::basic_format	signature:(const string_type& s)
boost::basic_format::basic_format	/usr/include/boost/format/format_implementation.hpp	/^    basic_format<Ch, Tr, Alloc>:: basic_format(const string_type& s, const std::locale & loc)$/;"	f	class:boost::basic_format	signature:(const string_type& s, const std::locale & loc)
boost::basic_format::bind_arg	/usr/include/boost/format/format_class.hpp	/^        basic_format&  bind_arg(int argN, const T& val) $/;"	f	class:boost::basic_format	access:public	signature:(int argN, const T& val)
boost::basic_format::bound_	/usr/include/boost/format/format_class.hpp	/^        std::vector<bool> bound_; \/\/ stores which arguments were bound. size() == 0 || num_args$/;"	m	class:boost::basic_format	access:private
boost::basic_format::bound_args	/usr/include/boost/format/format_class.hpp	/^        int bound_args() const;$/;"	p	class:boost::basic_format	access:public	signature:() const
boost::basic_format::bound_args	/usr/include/boost/format/format_implementation.hpp	/^    bound_args() const {$/;"	f	class:boost::basic_format	signature:() const
boost::basic_format::buf_	/usr/include/boost/format/format_class.hpp	/^        internal_streambuf_t   buf_; \/\/ the internal stream buffer.$/;"	m	class:boost::basic_format	access:private
boost::basic_format::clear	/usr/include/boost/format/format_class.hpp	/^        basic_format& clear();       \/\/ empty all converted string buffers (except bound items)$/;"	p	class:boost::basic_format	access:public	signature:()
boost::basic_format::clear	/usr/include/boost/format/format_implementation.hpp	/^    clear () {$/;"	f	class:boost::basic_format	signature:()
boost::basic_format::clear_bind	/usr/include/boost/format/format_class.hpp	/^        basic_format&  clear_bind(int argN);$/;"	p	class:boost::basic_format	access:public	signature:(int argN)
boost::basic_format::clear_bind	/usr/include/boost/format/format_implementation.hpp	/^    clear_bind (int argN) {$/;"	f	class:boost::basic_format	signature:(int argN)
boost::basic_format::clear_binds	/usr/include/boost/format/format_class.hpp	/^        basic_format& clear_binds(); \/\/ unbind all bound items, and call clear()$/;"	p	class:boost::basic_format	access:public	signature:()
boost::basic_format::clear_binds	/usr/include/boost/format/format_implementation.hpp	/^    clear_binds () {$/;"	f	class:boost::basic_format	signature:()
boost::basic_format::compat_traits	/usr/include/boost/format/format_class.hpp	/^        typedef typename io::CompatTraits<Tr>::compatible_type compat_traits;  $/;"	t	class:boost::basic_format	access:private
boost::basic_format::cur_arg	/usr/include/boost/format/format_class.hpp	/^        int cur_arg() const;$/;"	p	class:boost::basic_format	access:public	signature:() const
boost::basic_format::cur_arg	/usr/include/boost/format/format_implementation.hpp	/^    cur_arg() const {$/;"	f	class:boost::basic_format	signature:() const
boost::basic_format::cur_arg_	/usr/include/boost/format/format_class.hpp	/^        int             cur_arg_; \/\/ keep track of wich argument is current$/;"	m	class:boost::basic_format	access:private
boost::basic_format::dumped_	/usr/include/boost/format/format_class.hpp	/^        mutable bool     dumped_; \/\/ true only after call to str() or <<$/;"	m	class:boost::basic_format	access:private
boost::basic_format::exceptions	/usr/include/boost/format/format_class.hpp	/^        unsigned char exceptions() const;$/;"	p	class:boost::basic_format	access:public	signature:() const
boost::basic_format::exceptions	/usr/include/boost/format/format_class.hpp	/^        unsigned char exceptions(unsigned char newexcept);$/;"	p	class:boost::basic_format	access:public	signature:(unsigned char newexcept)
boost::basic_format::exceptions	/usr/include/boost/format/format_implementation.hpp	/^    unsigned char basic_format<Ch,Tr, Alloc>:: exceptions() const {$/;"	f	class:boost::basic_format	signature:() const
boost::basic_format::exceptions	/usr/include/boost/format/format_implementation.hpp	/^    unsigned char basic_format<Ch,Tr, Alloc>:: exceptions(unsigned char newexcept) { $/;"	f	class:boost::basic_format	signature:(unsigned char newexcept)
boost::basic_format::exceptions_	/usr/include/boost/format/format_class.hpp	/^        unsigned char exceptions_;$/;"	m	class:boost::basic_format	access:private
boost::basic_format::expected_args	/usr/include/boost/format/format_class.hpp	/^        int expected_args() const$/;"	f	class:boost::basic_format	access:public	signature:() const
boost::basic_format::fed_args	/usr/include/boost/format/format_class.hpp	/^        int fed_args() const;$/;"	p	class:boost::basic_format	access:public	signature:() const
boost::basic_format::fed_args	/usr/include/boost/format/format_implementation.hpp	/^    fed_args() const {$/;"	f	class:boost::basic_format	signature:() const
boost::basic_format::format_item_t	/usr/include/boost/format/format_class.hpp	/^        typedef io::detail::format_item<Ch, Tr, Alloc>        format_item_t;$/;"	t	class:boost::basic_format	access:public
boost::basic_format::getloc	/usr/include/boost/format/format_class.hpp	/^        io::detail::locale_t  getloc() const;$/;"	p	class:boost::basic_format	access:public	signature:() const
boost::basic_format::getloc	/usr/include/boost/format/format_implementation.hpp	/^    getloc() const {$/;"	f	class:boost::basic_format	signature:() const
boost::basic_format::internal_streambuf_t	/usr/include/boost/format/format_class.hpp	/^        typedef io::basic_altstringbuf<Ch, Tr, Alloc>         internal_streambuf_t;$/;"	t	class:boost::basic_format	access:public
boost::basic_format::io::detail::bind_arg_body	/usr/include/boost/format/format_class.hpp	/^        io::detail::bind_arg_body (basic_format<Ch2, Tr2, Alloc2>&, int, const T&);$/;"	p	class:boost::basic_format::io::detail	access:friend	signature:(basic_format<Ch2, Tr2, Alloc2>&, int, const T&)
boost::basic_format::io::detail::distribute	/usr/include/boost/format/format_class.hpp	/^        void io::detail::distribute (basic_format<Ch2, Tr2, Alloc2>&, T);$/;"	p	class:boost::basic_format::io::detail	access:friend	signature:(basic_format<Ch2, Tr2, Alloc2>&, T)
boost::basic_format::io::detail::feed	/usr/include/boost/format/format_class.hpp	/^        io::detail::feed (basic_format<Ch2, Tr2, Alloc2>&, T);$/;"	p	class:boost::basic_format::io::detail	access:friend	signature:(basic_format<Ch2, Tr2, Alloc2>&, T)
boost::basic_format::io::detail::modify_item_body	/usr/include/boost/format/format_class.hpp	/^        io::detail::modify_item_body (basic_format<Ch2, Tr2, Alloc2>&, int, T);$/;"	p	class:boost::basic_format::io::detail	access:friend	signature:(basic_format<Ch2, Tr2, Alloc2>&, int, T)
boost::basic_format::items_	/usr/include/boost/format/format_class.hpp	/^        std::vector<format_item_t>  items_; \/\/ each '%..' directive leads to a format_item$/;"	m	class:boost::basic_format	access:private
boost::basic_format::loc_	/usr/include/boost/format/format_class.hpp	/^        boost::optional<io::detail::locale_t>     loc_;$/;"	m	class:boost::basic_format	access:private
boost::basic_format::make_or_reuse_data	/usr/include/boost/format/format_class.hpp	/^        void make_or_reuse_data(std::size_t nbitems);\/\/ used for (re-)initialisation$/;"	p	class:boost::basic_format	access:private	signature:(std::size_t nbitems)
boost::basic_format::make_or_reuse_data	/usr/include/boost/format/format_implementation.hpp	/^    make_or_reuse_data (std::size_t nbitems) {$/;"	f	class:boost::basic_format	signature:(std::size_t nbitems)
boost::basic_format::modify_item	/usr/include/boost/format/format_class.hpp	/^        basic_format&  modify_item(int itemN, T manipulator) $/;"	f	class:boost::basic_format	access:public	signature:(int itemN, T manipulator)
boost::basic_format::num_args_	/usr/include/boost/format/format_class.hpp	/^        int            num_args_; \/\/ number of expected arguments$/;"	m	class:boost::basic_format	access:private
boost::basic_format::operator %	/usr/include/boost/format/format_class.hpp	/^        basic_format&   operator%(const T& x)$/;"	f	class:boost::basic_format	access:public	signature:(const T& x)
boost::basic_format::operator %	/usr/include/boost/format/format_class.hpp	/^        basic_format&   operator%(const int& x)$/;"	f	class:boost::basic_format	access:public	signature:(const int& x)
boost::basic_format::operator %	/usr/include/boost/format/format_class.hpp	/^        basic_format&   operator%(int& x)$/;"	f	class:boost::basic_format	access:public	signature:(int& x)
boost::basic_format::operator %	/usr/include/boost/format/format_class.hpp	/^        template<class T>  basic_format&   operator%(T& x) $/;"	f	class:boost::basic_format	access:public	signature:(T& x)
boost::basic_format::operator <<	/usr/include/boost/format/format_class.hpp	/^        operator<<( std::basic_ostream<Ch2, Tr2> & ,$/;"	p	class:boost::basic_format	access:friend	signature:( std::basic_ostream<Ch2, Tr2> & , const basic_format<Ch2, Tr2, Alloc2>& )
boost::basic_format::operator <<	/usr/include/boost/format/format_class.hpp	/^        operator<<( std::ostream & ,$/;"	p	class:boost::basic_format	access:friend	signature:( std::ostream & , const basic_format<Ch2, Tr2, Alloc2>& )
boost::basic_format::operator =	/usr/include/boost/format/format_class.hpp	/^        basic_format& operator= (const basic_format& x);$/;"	p	class:boost::basic_format	access:public	signature:(const basic_format& x)
boost::basic_format::operator =	/usr/include/boost/format/format_implementation.hpp	/^    operator= (const basic_format& x) {$/;"	f	class:boost::basic_format	signature:(const basic_format& x)
boost::basic_format::ordered	/usr/include/boost/format/format_class.hpp	/^        enum style_values  { ordered = 1, \/\/ set only if all directives are  positional$/;"	e	enum:boost::basic_format::style_values
boost::basic_format::parse	/usr/include/boost/format/format_class.hpp	/^        basic_format& parse(const string_type&); \/\/ resets buffers and parse a new format string$/;"	p	class:boost::basic_format	access:public	signature:(const string_type&)
boost::basic_format::parse	/usr/include/boost/format/parsing.hpp	/^    parse (const string_type& buf) {$/;"	f	class:boost::basic_format	signature:(const string_type& buf)
boost::basic_format::prefix_	/usr/include/boost/format/format_class.hpp	/^        string_type      prefix_; \/\/ piece of string to insert before first item$/;"	m	class:boost::basic_format	access:private
boost::basic_format::remaining_args	/usr/include/boost/format/format_class.hpp	/^        int remaining_args() const; \/\/ same as expected_args() - bound_args() - fed_args()$/;"	p	class:boost::basic_format	access:public	signature:() const
boost::basic_format::remaining_args	/usr/include/boost/format/format_implementation.hpp	/^    remaining_args() const {$/;"	f	class:boost::basic_format	signature:() const
boost::basic_format::size	/usr/include/boost/format/format_class.hpp	/^        size_type   size() const;    \/\/ sum of the current string pieces sizes$/;"	p	class:boost::basic_format	access:public	signature:() const
boost::basic_format::size	/usr/include/boost/format/format_implementation.hpp	/^    size () const {$/;"	f	class:boost::basic_format	signature:() const
boost::basic_format::size_type	/usr/include/boost/format/format_class.hpp	/^        typedef typename string_type::size_type               size_type;$/;"	t	class:boost::basic_format	access:public
boost::basic_format::special_needs	/usr/include/boost/format/format_class.hpp	/^                             special_needs = 4 };     $/;"	e	enum:boost::basic_format::style_values
boost::basic_format::str	/usr/include/boost/format/format_class.hpp	/^        string_type str()  const;    \/\/ final string $/;"	p	class:boost::basic_format	access:public	signature:() const
boost::basic_format::str	/usr/include/boost/format/format_implementation.hpp	/^    str () const {$/;"	f	class:boost::basic_format	signature:() const
boost::basic_format::stream_format_state	/usr/include/boost/format/format_class.hpp	/^        typedef io::detail::stream_format_state<Ch, Tr>  stream_format_state;$/;"	t	class:boost::basic_format	access:private
boost::basic_format::string_type	/usr/include/boost/format/format_class.hpp	/^        typedef std::basic_string<Ch, Tr, Alloc>              string_type;$/;"	t	class:boost::basic_format	access:public
boost::basic_format::style_	/usr/include/boost/format/format_class.hpp	/^        int              style_; \/\/ style of format-string :  positional or not, etc$/;"	m	class:boost::basic_format	access:private
boost::basic_format::style_values	/usr/include/boost/format/format_class.hpp	/^        enum style_values  { ordered = 1, \/\/ set only if all directives are  positional$/;"	g	class:boost::basic_format	access:private
boost::basic_format::swap	/usr/include/boost/format/format_class.hpp	/^        void swap(basic_format& x);$/;"	p	class:boost::basic_format	access:public	signature:(basic_format& x)
boost::basic_format::swap	/usr/include/boost/format/format_implementation.hpp	/^    swap (basic_format & x) {$/;"	f	class:boost::basic_format	signature:(basic_format & x)
boost::format	/usr/include/boost/format/format_fwd.hpp	/^    typedef basic_format<char >     format;$/;"	t	namespace:boost
boost::io	/usr/include/boost/format/alt_sstream.hpp	/^    namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/alt_sstream_impl.hpp	/^    namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/detail/compat_workarounds.hpp	/^    namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/detail/config_macros.hpp	/^    namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/detail/config_macros.hpp	/^  namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/detail/config_macros.hpp	/^namespace boost { namespace io { namespace detail {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^    namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/exceptions.hpp	/^    namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/feed_args.hpp	/^namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/format_fwd.hpp	/^    namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/format_implementation.hpp	/^namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/free_funcs.hpp	/^    namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/group.hpp	/^namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/internals.hpp	/^namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/internals_fwd.hpp	/^namespace io {$/;"	n	namespace:boost
boost::io	/usr/include/boost/format/parsing.hpp	/^namespace io {$/;"	n	namespace:boost
boost::io::CompatAlloc	/usr/include/boost/format/detail/compat_workarounds.hpp	/^        class CompatAlloc$/;"	c	namespace:boost::io
boost::io::CompatAlloc	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^        class CompatAlloc< ::std::alloc>$/;"	c	namespace:boost::io
boost::io::CompatAlloc::compatible_type	/usr/include/boost/format/detail/compat_workarounds.hpp	/^            typedef Alloc  compatible_type;$/;"	t	class:boost::io::CompatAlloc	access:public
boost::io::CompatAlloc::compatible_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef ::std::allocator<char> compatible_type;$/;"	t	class:boost::io::CompatAlloc	access:public
boost::io::CompatTraits	/usr/include/boost/format/detail/compat_workarounds.hpp	/^        class CompatTraits$/;"	c	namespace:boost::io
boost::io::CompatTraits	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^        class CompatTraits< ::std::char_traits<Ch> > {$/;"	c	namespace:boost::io
boost::io::CompatTraits	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^        class CompatTraits< ::std::string_char_traits<Ch> >$/;"	c	namespace:boost::io	inherits:::std::string_char_traits
boost::io::CompatTraits::char_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef Ch char_type;$/;"	t	class:boost::io::CompatTraits	access:public
boost::io::CompatTraits::compatible_type	/usr/include/boost/format/detail/compat_workarounds.hpp	/^            typedef Tr  compatible_type;$/;"	t	class:boost::io::CompatTraits	access:public
boost::io::CompatTraits::compatible_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef CompatTraits                compatible_type;$/;"	t	class:boost::io::CompatTraits	access:public
boost::io::CompatTraits::compatible_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef CompatTraits< ::std::string_char_traits<Ch> >  compatible_type;$/;"	t	class:boost::io::CompatTraits	access:public
boost::io::CompatTraits::eof	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            eof() {$/;"	f	class:boost::io::CompatTraits	access:public	signature:()
boost::io::CompatTraits::eq_int_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            eq_int_type(const int_type& left, const int_type& right) {$/;"	f	class:boost::io::CompatTraits	access:public	signature:(const int_type& left, const int_type& right)
boost::io::CompatTraits::int_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef int int_type;$/;"	t	class:boost::io::CompatTraits	access:public
boost::io::CompatTraits::not_eof	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            not_eof(const int_type& meta) {$/;"	f	class:boost::io::CompatTraits	access:public	signature:(const int_type& meta)
boost::io::CompatTraits::off_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef ::std::streamoff off_type;$/;"	t	class:boost::io::CompatTraits	access:public
boost::io::CompatTraits::pos_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef ::std::streampos pos_type;$/;"	t	class:boost::io::CompatTraits	access:public
boost::io::CompatTraits::to_char_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            to_char_type(const int_type& meta) {$/;"	f	class:boost::io::CompatTraits	access:public	signature:(const int_type& meta)
boost::io::CompatTraits::to_int_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            to_int_type(const char_type& ch) {$/;"	f	class:boost::io::CompatTraits	access:public	signature:(const char_type& ch)
boost::io::all_error_bits	/usr/include/boost/format/format_fwd.hpp	/^                                 all_error_bits = 255, no_error_bits=0 };$/;"	e	enum:boost::io::format_error_bits
boost::io::bad_format_string	/usr/include/boost/format/exceptions.hpp	/^        class bad_format_string : public format_error$/;"	c	namespace:boost::io	inherits:format_error
boost::io::bad_format_string::bad_format_string	/usr/include/boost/format/exceptions.hpp	/^            bad_format_string(std::size_t pos, std::size_t size) $/;"	f	class:boost::io::bad_format_string	access:public	signature:(std::size_t pos, std::size_t size)
boost::io::bad_format_string::get_next	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_next() const { return next_; }$/;"	f	class:boost::io::bad_format_string	access:public	signature:() const
boost::io::bad_format_string::get_pos	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_pos() const { return pos_; }$/;"	f	class:boost::io::bad_format_string	access:public	signature:() const
boost::io::bad_format_string::next_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t pos_, next_;$/;"	m	class:boost::io::bad_format_string	access:private
boost::io::bad_format_string::pos_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t pos_, next_;$/;"	m	class:boost::io::bad_format_string	access:private
boost::io::bad_format_string::what	/usr/include/boost/format/exceptions.hpp	/^            virtual const char *what() const throw() {$/;"	f	class:boost::io::bad_format_string	access:public	signature:() const
boost::io::bad_format_string_bit	/usr/include/boost/format/format_fwd.hpp	/^        enum format_error_bits { bad_format_string_bit = 1, $/;"	e	enum:boost::io::format_error_bits
boost::io::basic_altstringbuf	/usr/include/boost/format/alt_sstream.hpp	/^        class basic_altstringbuf $/;"	c	namespace:boost::io	inherits:::std::basic_streambuf
boost::io::basic_altstringbuf::alloc_	/usr/include/boost/format/alt_sstream.hpp	/^            compat_allocator_type alloc_;  \/\/ the allocator object$/;"	m	class:boost::io::basic_altstringbuf	access:private
boost::io::basic_altstringbuf::alloc_min	/usr/include/boost/format/alt_sstream.hpp	/^            enum { alloc_min = 256}; \/\/ minimum size of allocations$/;"	e	enum:boost::io::basic_altstringbuf::__anon1
boost::io::basic_altstringbuf::allocator_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef Alloc                     allocator_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
boost::io::basic_altstringbuf::basic_altstringbuf	/usr/include/boost/format/alt_sstream.hpp	/^            explicit basic_altstringbuf (basic_altstringbuf * s,$/;"	f	class:boost::io::basic_altstringbuf	access:protected	signature:(basic_altstringbuf * s, ::std::ios_base::openmode mode = ::std::ios_base::in | ::std::ios_base::out)
boost::io::basic_altstringbuf::basic_altstringbuf	/usr/include/boost/format/alt_sstream.hpp	/^            explicit basic_altstringbuf(const string_type& s,$/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:(const string_type& s, ::std::ios_base::openmode mode = ::std::ios_base::in | ::std::ios_base::out)
boost::io::basic_altstringbuf::basic_altstringbuf	/usr/include/boost/format/alt_sstream.hpp	/^            explicit basic_altstringbuf(std::ios_base::openmode mode$/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::io::basic_altstringbuf::begin	/usr/include/boost/format/alt_sstream.hpp	/^            Ch * begin() const; $/;"	p	class:boost::io::basic_altstringbuf	access:public	signature:() const
boost::io::basic_altstringbuf::begin	/usr/include/boost/format/alt_sstream_impl.hpp	/^        begin () const {$/;"	f	class:boost::io::basic_altstringbuf	signature:() const
boost::io::basic_altstringbuf::char_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef Ch     char_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
boost::io::basic_altstringbuf::clear_buffer	/usr/include/boost/format/alt_sstream.hpp	/^            void clear_buffer();$/;"	p	class:boost::io::basic_altstringbuf	access:public	signature:()
boost::io::basic_altstringbuf::clear_buffer	/usr/include/boost/format/alt_sstream_impl.hpp	/^        clear_buffer () {$/;"	f	class:boost::io::basic_altstringbuf	signature:()
boost::io::basic_altstringbuf::compat_allocator_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename CompatAlloc<Alloc>::compatible_type compat_allocator_type;$/;"	t	class:boost::io::basic_altstringbuf	access:private
boost::io::basic_altstringbuf::compat_traits_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename CompatTraits<Tr>::compatible_type   compat_traits_type;$/;"	t	class:boost::io::basic_altstringbuf	access:private
boost::io::basic_altstringbuf::cur_size	/usr/include/boost/format/alt_sstream.hpp	/^            size_type cur_size() const; \/\/ stop at current pointer$/;"	p	class:boost::io::basic_altstringbuf	access:public	signature:() const
boost::io::basic_altstringbuf::cur_size	/usr/include/boost/format/alt_sstream_impl.hpp	/^        cur_size () const { $/;"	f	class:boost::io::basic_altstringbuf	signature:() const
boost::io::basic_altstringbuf::cur_str	/usr/include/boost/format/alt_sstream.hpp	/^            string_type cur_str() const $/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:() const
boost::io::basic_altstringbuf::dealloc	/usr/include/boost/format/alt_sstream.hpp	/^            void dealloc();$/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:()
boost::io::basic_altstringbuf::dealloc	/usr/include/boost/format/alt_sstream_impl.hpp	/^        void basic_altstringbuf<Ch, Tr, Alloc>:: dealloc() {$/;"	f	class:boost::io::basic_altstringbuf	signature:()
boost::io::basic_altstringbuf::int_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename compat_traits_type::int_type     int_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
boost::io::basic_altstringbuf::is_allocated_	/usr/include/boost/format/alt_sstream.hpp	/^            bool is_allocated_;$/;"	m	class:boost::io::basic_altstringbuf	access:private
boost::io::basic_altstringbuf::mode_	/usr/include/boost/format/alt_sstream.hpp	/^            ::std::ios_base::openmode mode_;$/;"	m	class:boost::io::basic_altstringbuf	access:private
boost::io::basic_altstringbuf::off_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename compat_traits_type::off_type     off_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
boost::io::basic_altstringbuf::overflow	/usr/include/boost/format/alt_sstream.hpp	/^            virtual int_type overflow(int_type meta = compat_traits_type::eof());$/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:(int_type meta = compat_traits_type::eof())
boost::io::basic_altstringbuf::overflow	/usr/include/boost/format/alt_sstream_impl.hpp	/^        overflow (int_type meta) {$/;"	f	class:boost::io::basic_altstringbuf	signature:(int_type meta)
boost::io::basic_altstringbuf::pbackfail	/usr/include/boost/format/alt_sstream.hpp	/^            virtual int_type pbackfail(int_type meta = compat_traits_type::eof());$/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:(int_type meta = compat_traits_type::eof())
boost::io::basic_altstringbuf::pbackfail	/usr/include/boost/format/alt_sstream_impl.hpp	/^        pbackfail (int_type meta) {$/;"	f	class:boost::io::basic_altstringbuf	signature:(int_type meta)
boost::io::basic_altstringbuf::pcount	/usr/include/boost/format/alt_sstream.hpp	/^            size_type pcount() const $/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:() const
boost::io::basic_altstringbuf::pend	/usr/include/boost/format/alt_sstream.hpp	/^            Ch * pend() const \/\/ the highest position reached by pptr() since creation$/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:() const
boost::io::basic_altstringbuf::pos_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename compat_traits_type::pos_type     pos_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
boost::io::basic_altstringbuf::putend_	/usr/include/boost/format/alt_sstream.hpp	/^            Ch *putend_;  \/\/ remembers (over seeks) the highest value of pptr()$/;"	m	class:boost::io::basic_altstringbuf	access:private
boost::io::basic_altstringbuf::seekoff	/usr/include/boost/format/alt_sstream.hpp	/^            virtual pos_type seekoff(off_type off, ::std::ios_base::seekdir way, $/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:(off_type off, ::std::ios_base::seekdir way, ::std::ios_base::openmode which = ::std::ios_base::in | ::std::ios_base::out)
boost::io::basic_altstringbuf::seekoff	/usr/include/boost/format/alt_sstream_impl.hpp	/^        seekoff (off_type off, ::std::ios_base::seekdir way, ::std::ios_base::openmode which) {$/;"	f	class:boost::io::basic_altstringbuf	signature:(off_type off, ::std::ios_base::seekdir way, ::std::ios_base::openmode which)
boost::io::basic_altstringbuf::seekpos	/usr/include/boost/format/alt_sstream.hpp	/^            virtual pos_type seekpos (pos_type pos, $/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:(pos_type pos, ::std::ios_base::openmode which = ::std::ios_base::in | ::std::ios_base::out)
boost::io::basic_altstringbuf::seekpos	/usr/include/boost/format/alt_sstream_impl.hpp	/^        seekpos (pos_type pos, ::std::ios_base::openmode which) {$/;"	f	class:boost::io::basic_altstringbuf	signature:(pos_type pos, ::std::ios_base::openmode which)
boost::io::basic_altstringbuf::size	/usr/include/boost/format/alt_sstream.hpp	/^            size_type size() const;$/;"	p	class:boost::io::basic_altstringbuf	access:public	signature:() const
boost::io::basic_altstringbuf::size	/usr/include/boost/format/alt_sstream_impl.hpp	/^        size () const { $/;"	f	class:boost::io::basic_altstringbuf	signature:() const
boost::io::basic_altstringbuf::size_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename string_type::size_type    size_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
boost::io::basic_altstringbuf::str	/usr/include/boost/format/alt_sstream.hpp	/^            string_type str() const $/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:() const
boost::io::basic_altstringbuf::str	/usr/include/boost/format/alt_sstream.hpp	/^            void str(const string_type& s);$/;"	p	class:boost::io::basic_altstringbuf	access:public	signature:(const string_type& s)
boost::io::basic_altstringbuf::str	/usr/include/boost/format/alt_sstream_impl.hpp	/^        str (const string_type& s) {$/;"	f	class:boost::io::basic_altstringbuf	signature:(const string_type& s)
boost::io::basic_altstringbuf::streambuf_t	/usr/include/boost/format/alt_sstream.hpp	/^            typedef ::std::basic_streambuf<Ch, Tr>  streambuf_t;$/;"	t	class:boost::io::basic_altstringbuf	access:private
boost::io::basic_altstringbuf::streamsize	/usr/include/boost/format/alt_sstream.hpp	/^            typedef ::std::streamsize streamsize;$/;"	t	class:boost::io::basic_altstringbuf	access:public
boost::io::basic_altstringbuf::string_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef ::std::basic_string<Ch, Tr, Alloc> string_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
boost::io::basic_altstringbuf::traits_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef Tr     traits_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
boost::io::basic_altstringbuf::underflow	/usr/include/boost/format/alt_sstream.hpp	/^            virtual int_type underflow();$/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:()
boost::io::basic_altstringbuf::underflow	/usr/include/boost/format/alt_sstream_impl.hpp	/^        underflow () {$/;"	f	class:boost::io::basic_altstringbuf	signature:()
boost::io::basic_altstringbuf::~basic_altstringbuf	/usr/include/boost/format/alt_sstream.hpp	/^            virtual ~basic_altstringbuf() $/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:()
boost::io::basic_oaltstringstream	/usr/include/boost/format/alt_sstream.hpp	/^        class basic_oaltstringstream $/;"	c	namespace:boost::io	inherits:base_from_member,::std::basic_ostream
boost::io::basic_oaltstringstream::No_Op	/usr/include/boost/format/alt_sstream.hpp	/^            class No_Op { $/;"	c	class:boost::io::basic_oaltstringstream	access:private
boost::io::basic_oaltstringstream::No_Op::operator ()	/usr/include/boost/format/alt_sstream.hpp	/^                const T & operator()(const T & arg) { return arg; }$/;"	f	class:boost::io::basic_oaltstringstream::No_Op	access:public	signature:(const T & arg)
boost::io::basic_oaltstringstream::allocator_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef Alloc  allocator_type;$/;"	t	class:boost::io::basic_oaltstringstream	access:public
boost::io::basic_oaltstringstream::basic_oaltstringstream	/usr/include/boost/format/alt_sstream.hpp	/^            basic_oaltstringstream() $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:()
boost::io::basic_oaltstringstream::basic_oaltstringstream	/usr/include/boost/format/alt_sstream.hpp	/^            basic_oaltstringstream(::boost::shared_ptr<stringbuf_t> buf) $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:(::boost::shared_ptr<stringbuf_t> buf)
boost::io::basic_oaltstringstream::basic_oaltstringstream	/usr/include/boost/format/alt_sstream.hpp	/^            basic_oaltstringstream(stringbuf_t * buf) $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:(stringbuf_t * buf)
boost::io::basic_oaltstringstream::begin	/usr/include/boost/format/alt_sstream.hpp	/^            Ch * begin() const $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
boost::io::basic_oaltstringstream::clear_buffer	/usr/include/boost/format/alt_sstream.hpp	/^            void clear_buffer() $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:()
boost::io::basic_oaltstringstream::cur_size	/usr/include/boost/format/alt_sstream.hpp	/^            size_type cur_size() const \/\/ stops at current position$/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
boost::io::basic_oaltstringstream::cur_str	/usr/include/boost/format/alt_sstream.hpp	/^            string_type cur_str() const   \/\/ [pbase, pptr[$/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
boost::io::basic_oaltstringstream::pbase_type	/usr/include/boost/format/alt_sstream.hpp	/^                pbase_type;$/;"	t	class:boost::io::basic_oaltstringstream	access:private
boost::io::basic_oaltstringstream::rdbuf	/usr/include/boost/format/alt_sstream.hpp	/^            stringbuf_t * rdbuf() const $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
boost::io::basic_oaltstringstream::size	/usr/include/boost/format/alt_sstream.hpp	/^            size_type size() const $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
boost::io::basic_oaltstringstream::size_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename string_type::size_type     size_type;$/;"	t	class:boost::io::basic_oaltstringstream	access:private
boost::io::basic_oaltstringstream::str	/usr/include/boost/format/alt_sstream.hpp	/^            string_type str()     const   \/\/ [pbase, epptr[$/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
boost::io::basic_oaltstringstream::str	/usr/include/boost/format/alt_sstream.hpp	/^            void str(const string_type& s) $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:(const string_type& s)
boost::io::basic_oaltstringstream::stream_t	/usr/include/boost/format/alt_sstream.hpp	/^            typedef ::std::basic_ostream<Ch, Tr> stream_t;$/;"	t	class:boost::io::basic_oaltstringstream	access:private
boost::io::basic_oaltstringstream::string_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef ::std::basic_string<Ch, Tr, Alloc>  string_type;$/;"	t	class:boost::io::basic_oaltstringstream	access:private
boost::io::basic_oaltstringstream::stringbuf_t	/usr/include/boost/format/alt_sstream.hpp	/^            typedef basic_altstringbuf<Ch, Tr, Alloc>   stringbuf_t;$/;"	t	class:boost::io::basic_oaltstringstream	access:private
boost::io::detail	/usr/include/boost/format/detail/config_macros.hpp	/^        namespace detail {$/;"	n	namespace:boost::io
boost::io::detail	/usr/include/boost/format/detail/config_macros.hpp	/^    namespace detail {$/;"	n	namespace:boost::io
boost::io::detail	/usr/include/boost/format/detail/config_macros.hpp	/^namespace boost { namespace io { namespace detail {$/;"	n	namespace:boost::io
boost::io::detail	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^namespace detail {$/;"	n	namespace:boost::io
boost::io::detail	/usr/include/boost/format/feed_args.hpp	/^namespace detail {$/;"	n	namespace:boost::io
boost::io::detail	/usr/include/boost/format/format_implementation.hpp	/^namespace detail {$/;"	n	namespace:boost::io
boost::io::detail	/usr/include/boost/format/group.hpp	/^namespace detail {$/;"	n	namespace:boost::io
boost::io::detail	/usr/include/boost/format/internals.hpp	/^namespace detail {$/;"	n	namespace:boost::io
boost::io::detail	/usr/include/boost/format/internals_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::io
boost::io::detail	/usr/include/boost/format/parsing.hpp	/^namespace detail {$/;"	n	namespace:boost::io
boost::io::detail::append_string	/usr/include/boost/format/parsing.hpp	/^    void append_string(String& dst, const String& src, $/;"	f	namespace:boost::io::detail	signature:(String& dst, const String& src, const typename String::size_type beg, const typename String::size_type end)
boost::io::detail::apply_manip_body	/usr/include/boost/format/internals.hpp	/^    void apply_manip_body( stream_format_state<Ch, Tr>& self,$/;"	f	namespace:boost::io::detail	signature:( stream_format_state<Ch, Tr>& self, T manipulator)
boost::io::detail::apply_manip_body	/usr/include/boost/format/internals_fwd.hpp	/^    void apply_manip_body (stream_format_state<Ch, Tr>& self,$/;"	p	namespace:boost::io::detail	signature:(stream_format_state<Ch, Tr>& self, T manipulator)
boost::io::detail::bind_arg_body	/usr/include/boost/format/format_implementation.hpp	/^    bind_arg_body (basic_format<Ch, Tr, Alloc>& self, int argN, const T& val) {$/;"	f	namespace:boost::io::detail	signature:(basic_format<Ch, Tr, Alloc>& self, int argN, const T& val)
boost::io::detail::bind_arg_body	/usr/include/boost/format/internals_fwd.hpp	/^    bind_arg_body (basic_format<Ch, Tr, Alloc>& self,$/;"	p	namespace:boost::io::detail	signature:(basic_format<Ch, Tr, Alloc>& self, int argN, const T& val)
boost::io::detail::const_or_not	/usr/include/boost/format/parsing.hpp	/^    T& const_or_not(const T& x) { $/;"	f	namespace:boost::io::detail	signature:(const T& x)
boost::io::detail::disambiguater	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^struct disambiguater$/;"	s	namespace:boost::io::detail
boost::io::detail::disambiguater::put_head	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^   static void put_head(BOOST_IO_STD basic_ostream<Ch, Tr>& os, T const& x, int)$/;"	f	struct:boost::io::detail::disambiguater	access:public	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, T const& x, int)
boost::io::detail::disambiguater::put_head	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^   static void put_head(BOOST_IO_STD basic_ostream<Ch, Tr>& os, group1<U> const& x, long)$/;"	f	struct:boost::io::detail::disambiguater	access:public	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, group1<U> const& x, long)
boost::io::detail::disambiguater::put_last	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^   static void put_last(BOOST_IO_STD basic_ostream<Ch, Tr>& os, T const& x, int)$/;"	f	struct:boost::io::detail::disambiguater	access:public	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, T const& x, int)
boost::io::detail::disambiguater::put_last	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^   static void put_last(BOOST_IO_STD basic_ostream<Ch, Tr>& os, group1<U> const& x, long)$/;"	f	struct:boost::io::detail::disambiguater	access:public	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, group1<U> const& x, long)
boost::io::detail::distribute	/usr/include/boost/format/feed_args.hpp	/^    void distribute (basic_format<Ch,Tr, Alloc>& self, T x) {$/;"	f	namespace:boost::io::detail	signature:(basic_format<Ch,Tr, Alloc>& self, T x)
boost::io::detail::distribute	/usr/include/boost/format/internals_fwd.hpp	/^    void distribute (basic_format<Ch,Tr, Alloc>& self, T x);$/;"	p	namespace:boost::io::detail	signature:(basic_format<Ch,Tr, Alloc>& self, T x)
boost::io::detail::feed	/usr/include/boost/format/feed_args.hpp	/^    feed (basic_format<Ch,Tr, Alloc>& self, T x) {$/;"	f	namespace:boost::io::detail	signature:(basic_format<Ch,Tr, Alloc>& self, T x)
boost::io::detail::feed	/usr/include/boost/format/internals_fwd.hpp	/^    feed (basic_format<Ch,Tr, Alloc>& self, T x);$/;"	p	namespace:boost::io::detail	signature:(basic_format<Ch,Tr, Alloc>& self, T x)
boost::io::detail::format_item	/usr/include/boost/format/internals.hpp	/^    struct format_item $/;"	s	namespace:boost::io::detail
boost::io::detail::format_item::appendix_	/usr/include/boost/format/internals.hpp	/^        string_type  appendix_; \/\/- piece of string between this item and the next$/;"	m	struct:boost::io::detail::format_item	access:public
boost::io::detail::format_item::argN_	/usr/include/boost/format/internals.hpp	/^        int         argN_;  \/\/- argument number (starts at 0,  eg : %1 => argN=0)$/;"	m	struct:boost::io::detail::format_item	access:public
boost::io::detail::format_item::argN_ignored	/usr/include/boost/format/internals.hpp	/^                          argN_ignored    = -3  \/\/ ignored directive. (no argument read)$/;"	e	enum:boost::io::detail::format_item::arg_values
boost::io::detail::format_item::argN_no_posit	/usr/include/boost/format/internals.hpp	/^        enum arg_values { argN_no_posit   = -1, \/\/ non-positional directive. will set argN later$/;"	e	enum:boost::io::detail::format_item::arg_values
boost::io::detail::format_item::argN_tabulation	/usr/include/boost/format/internals.hpp	/^                          argN_tabulation = -2, \/\/ tabulation directive. (no argument read) $/;"	e	enum:boost::io::detail::format_item::arg_values
boost::io::detail::format_item::arg_values	/usr/include/boost/format/internals.hpp	/^        enum arg_values { argN_no_posit   = -1, \/\/ non-positional directive. will set argN later$/;"	g	struct:boost::io::detail::format_item	access:public
boost::io::detail::format_item::basic_ios	/usr/include/boost/format/internals.hpp	/^        typedef BOOST_IO_STD basic_ios<Ch, Tr>                    basic_ios;$/;"	t	struct:boost::io::detail::format_item	access:public
boost::io::detail::format_item::centered	/usr/include/boost/format/internals.hpp	/^        enum pad_values { zeropad = 1, spacepad =2, centered=4, tabulation = 8 };$/;"	e	enum:boost::io::detail::format_item::pad_values
boost::io::detail::format_item::compute_states	/usr/include/boost/format/internals.hpp	/^        void compute_states(); \/\/ sets states  according to truncate and pad_scheme.$/;"	p	struct:boost::io::detail::format_item	access:public	signature:()
boost::io::detail::format_item::compute_states	/usr/include/boost/format/internals.hpp	/^    compute_states() {$/;"	f	class:boost::io::detail::format_item	signature:()
boost::io::detail::format_item::fmtstate_	/usr/include/boost/format/internals.hpp	/^        stream_format_state fmtstate_;\/\/ set by parsing, is only affected by modify_item$/;"	m	struct:boost::io::detail::format_item	access:public
boost::io::detail::format_item::format_item	/usr/include/boost/format/internals.hpp	/^        format_item(Ch fill) :argN_(argN_no_posit), fmtstate_(fill), $/;"	f	struct:boost::io::detail::format_item	access:public	signature:(Ch fill)
boost::io::detail::format_item::max_streamsize	/usr/include/boost/format/internals.hpp	/^        static std::streamsize max_streamsize() { $/;"	f	struct:boost::io::detail::format_item	access:public	signature:()
boost::io::detail::format_item::pad_scheme_	/usr/include/boost/format/internals.hpp	/^        unsigned int pad_scheme_;\/\/- several possible padding schemes can mix. see pad_values$/;"	m	struct:boost::io::detail::format_item	access:public
boost::io::detail::format_item::pad_values	/usr/include/boost/format/internals.hpp	/^        enum pad_values { zeropad = 1, spacepad =2, centered=4, tabulation = 8 };$/;"	g	struct:boost::io::detail::format_item	access:public
boost::io::detail::format_item::res_	/usr/include/boost/format/internals.hpp	/^        string_type  res_;      \/\/- result of the formatting of this item$/;"	m	struct:boost::io::detail::format_item	access:public
boost::io::detail::format_item::reset	/usr/include/boost/format/internals.hpp	/^        void reset(Ch fill);$/;"	p	struct:boost::io::detail::format_item	access:public	signature:(Ch fill)
boost::io::detail::format_item::reset	/usr/include/boost/format/internals.hpp	/^    reset (Ch fill) { $/;"	f	class:boost::io::detail::format_item	signature:(Ch fill)
boost::io::detail::format_item::spacepad	/usr/include/boost/format/internals.hpp	/^        enum pad_values { zeropad = 1, spacepad =2, centered=4, tabulation = 8 };$/;"	e	enum:boost::io::detail::format_item::pad_values
boost::io::detail::format_item::stream_format_state	/usr/include/boost/format/internals.hpp	/^        typedef detail::stream_format_state<Ch, Tr>               stream_format_state;$/;"	t	struct:boost::io::detail::format_item	access:public
boost::io::detail::format_item::string_type	/usr/include/boost/format/internals.hpp	/^        typedef ::std::basic_string<Ch, Tr, Alloc>                string_type;$/;"	t	struct:boost::io::detail::format_item	access:public
boost::io::detail::format_item::tabulation	/usr/include/boost/format/internals.hpp	/^        enum pad_values { zeropad = 1, spacepad =2, centered=4, tabulation = 8 };$/;"	e	enum:boost::io::detail::format_item::pad_values
boost::io::detail::format_item::truncate_	/usr/include/boost/format/internals.hpp	/^        std::streamsize truncate_;\/\/- is set for directives like %.5s that ask truncation$/;"	m	struct:boost::io::detail::format_item	access:public
boost::io::detail::format_item::zeropad	/usr/include/boost/format/internals.hpp	/^        enum pad_values { zeropad = 1, spacepad =2, centered=4, tabulation = 8 };$/;"	e	enum:boost::io::detail::format_item::pad_values
boost::io::detail::group0	/usr/include/boost/format/group.hpp	/^struct group0 $/;"	s	namespace:boost::io::detail
boost::io::detail::group0::group0	/usr/include/boost/format/group.hpp	/^    group0()      {}$/;"	f	struct:boost::io::detail::group0	access:public	signature:()
boost::io::detail::group1	/usr/include/boost/format/group.hpp	/^struct group1$/;"	s	namespace:boost::io::detail
boost::io::detail::group10	/usr/include/boost/format/group.hpp	/^struct group10$/;"	s	namespace:boost::io::detail
boost::io::detail::group10::a10_	/usr/include/boost/format/group.hpp	/^    T10 a10_;$/;"	m	struct:boost::io::detail::group10	access:public
boost::io::detail::group10::a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group10	access:public
boost::io::detail::group10::a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group10	access:public
boost::io::detail::group10::a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group10	access:public
boost::io::detail::group10::a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group10	access:public
boost::io::detail::group10::a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group10	access:public
boost::io::detail::group10::a6_	/usr/include/boost/format/group.hpp	/^    T6 a6_;$/;"	m	struct:boost::io::detail::group10	access:public
boost::io::detail::group10::a7_	/usr/include/boost/format/group.hpp	/^    T7 a7_;$/;"	m	struct:boost::io::detail::group10	access:public
boost::io::detail::group10::a8_	/usr/include/boost/format/group.hpp	/^    T8 a8_;$/;"	m	struct:boost::io::detail::group10	access:public
boost::io::detail::group10::a9_	/usr/include/boost/format/group.hpp	/^    T9 a9_;$/;"	m	struct:boost::io::detail::group10	access:public
boost::io::detail::group10::group10	/usr/include/boost/format/group.hpp	/^    group10(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9,T10 a10)$/;"	f	struct:boost::io::detail::group10	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9,T10 a10)
boost::io::detail::group1::a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group1	access:public
boost::io::detail::group1::group1	/usr/include/boost/format/group.hpp	/^    group1(T1 a1)$/;"	f	struct:boost::io::detail::group1	access:public	signature:(T1 a1)
boost::io::detail::group1::operator =	/usr/include/boost/format/group.hpp	/^   group1& operator=(const group1&);$/;"	p	struct:boost::io::detail::group1	access:private	signature:(const group1&)
boost::io::detail::group2	/usr/include/boost/format/group.hpp	/^struct group2$/;"	s	namespace:boost::io::detail
boost::io::detail::group2::a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group2	access:public
boost::io::detail::group2::a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group2	access:public
boost::io::detail::group2::group2	/usr/include/boost/format/group.hpp	/^    group2(T1 a1,T2 a2)$/;"	f	struct:boost::io::detail::group2	access:public	signature:(T1 a1,T2 a2)
boost::io::detail::group2::operator =	/usr/include/boost/format/group.hpp	/^   group2& operator=(const group2&);$/;"	p	struct:boost::io::detail::group2	access:private	signature:(const group2&)
boost::io::detail::group3	/usr/include/boost/format/group.hpp	/^struct group3$/;"	s	namespace:boost::io::detail
boost::io::detail::group3::a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group3	access:public
boost::io::detail::group3::a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group3	access:public
boost::io::detail::group3::a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group3	access:public
boost::io::detail::group3::group3	/usr/include/boost/format/group.hpp	/^    group3(T1 a1,T2 a2,T3 a3)$/;"	f	struct:boost::io::detail::group3	access:public	signature:(T1 a1,T2 a2,T3 a3)
boost::io::detail::group3::operator =	/usr/include/boost/format/group.hpp	/^   group3& operator=(const group3&);$/;"	p	struct:boost::io::detail::group3	access:private	signature:(const group3&)
boost::io::detail::group4	/usr/include/boost/format/group.hpp	/^struct group4$/;"	s	namespace:boost::io::detail
boost::io::detail::group4::a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group4	access:public
boost::io::detail::group4::a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group4	access:public
boost::io::detail::group4::a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group4	access:public
boost::io::detail::group4::a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group4	access:public
boost::io::detail::group4::group4	/usr/include/boost/format/group.hpp	/^    group4(T1 a1,T2 a2,T3 a3,T4 a4)$/;"	f	struct:boost::io::detail::group4	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4)
boost::io::detail::group4::operator =	/usr/include/boost/format/group.hpp	/^   group4& operator=(const group4&);$/;"	p	struct:boost::io::detail::group4	access:private	signature:(const group4&)
boost::io::detail::group5	/usr/include/boost/format/group.hpp	/^struct group5$/;"	s	namespace:boost::io::detail
boost::io::detail::group5::a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group5	access:public
boost::io::detail::group5::a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group5	access:public
boost::io::detail::group5::a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group5	access:public
boost::io::detail::group5::a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group5	access:public
boost::io::detail::group5::a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group5	access:public
boost::io::detail::group5::group5	/usr/include/boost/format/group.hpp	/^    group5(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5)$/;"	f	struct:boost::io::detail::group5	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5)
boost::io::detail::group6	/usr/include/boost/format/group.hpp	/^struct group6$/;"	s	namespace:boost::io::detail
boost::io::detail::group6::a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group6	access:public
boost::io::detail::group6::a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group6	access:public
boost::io::detail::group6::a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group6	access:public
boost::io::detail::group6::a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group6	access:public
boost::io::detail::group6::a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group6	access:public
boost::io::detail::group6::a6_	/usr/include/boost/format/group.hpp	/^    T6 a6_;$/;"	m	struct:boost::io::detail::group6	access:public
boost::io::detail::group6::group6	/usr/include/boost/format/group.hpp	/^    group6(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6)$/;"	f	struct:boost::io::detail::group6	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6)
boost::io::detail::group7	/usr/include/boost/format/group.hpp	/^struct group7$/;"	s	namespace:boost::io::detail
boost::io::detail::group7::a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group7	access:public
boost::io::detail::group7::a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group7	access:public
boost::io::detail::group7::a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group7	access:public
boost::io::detail::group7::a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group7	access:public
boost::io::detail::group7::a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group7	access:public
boost::io::detail::group7::a6_	/usr/include/boost/format/group.hpp	/^    T6 a6_;$/;"	m	struct:boost::io::detail::group7	access:public
boost::io::detail::group7::a7_	/usr/include/boost/format/group.hpp	/^    T7 a7_;$/;"	m	struct:boost::io::detail::group7	access:public
boost::io::detail::group7::group7	/usr/include/boost/format/group.hpp	/^    group7(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7)$/;"	f	struct:boost::io::detail::group7	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7)
boost::io::detail::group8	/usr/include/boost/format/group.hpp	/^struct group8$/;"	s	namespace:boost::io::detail
boost::io::detail::group8::a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group8	access:public
boost::io::detail::group8::a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group8	access:public
boost::io::detail::group8::a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group8	access:public
boost::io::detail::group8::a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group8	access:public
boost::io::detail::group8::a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group8	access:public
boost::io::detail::group8::a6_	/usr/include/boost/format/group.hpp	/^    T6 a6_;$/;"	m	struct:boost::io::detail::group8	access:public
boost::io::detail::group8::a7_	/usr/include/boost/format/group.hpp	/^    T7 a7_;$/;"	m	struct:boost::io::detail::group8	access:public
boost::io::detail::group8::a8_	/usr/include/boost/format/group.hpp	/^    T8 a8_;$/;"	m	struct:boost::io::detail::group8	access:public
boost::io::detail::group8::group8	/usr/include/boost/format/group.hpp	/^    group8(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8)$/;"	f	struct:boost::io::detail::group8	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8)
boost::io::detail::group9	/usr/include/boost/format/group.hpp	/^struct group9$/;"	s	namespace:boost::io::detail
boost::io::detail::group9::a1_	/usr/include/boost/format/group.hpp	/^    T1 a1_;$/;"	m	struct:boost::io::detail::group9	access:public
boost::io::detail::group9::a2_	/usr/include/boost/format/group.hpp	/^    T2 a2_;$/;"	m	struct:boost::io::detail::group9	access:public
boost::io::detail::group9::a3_	/usr/include/boost/format/group.hpp	/^    T3 a3_;$/;"	m	struct:boost::io::detail::group9	access:public
boost::io::detail::group9::a4_	/usr/include/boost/format/group.hpp	/^    T4 a4_;$/;"	m	struct:boost::io::detail::group9	access:public
boost::io::detail::group9::a5_	/usr/include/boost/format/group.hpp	/^    T5 a5_;$/;"	m	struct:boost::io::detail::group9	access:public
boost::io::detail::group9::a6_	/usr/include/boost/format/group.hpp	/^    T6 a6_;$/;"	m	struct:boost::io::detail::group9	access:public
boost::io::detail::group9::a7_	/usr/include/boost/format/group.hpp	/^    T7 a7_;$/;"	m	struct:boost::io::detail::group9	access:public
boost::io::detail::group9::a8_	/usr/include/boost/format/group.hpp	/^    T8 a8_;$/;"	m	struct:boost::io::detail::group9	access:public
boost::io::detail::group9::a9_	/usr/include/boost/format/group.hpp	/^    T9 a9_;$/;"	m	struct:boost::io::detail::group9	access:public
boost::io::detail::group9::group9	/usr/include/boost/format/group.hpp	/^    group9(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9)$/;"	f	struct:boost::io::detail::group9	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9)
boost::io::detail::group_head	/usr/include/boost/format/group.hpp	/^group_head( group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> const& x)$/;"	f	namespace:boost::io::detail	signature:( group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> const& x)
boost::io::detail::group_head	/usr/include/boost/format/group.hpp	/^group_head( group2<T1,T2> const& x)$/;"	f	namespace:boost::io::detail	signature:( group2<T1,T2> const& x)
boost::io::detail::group_head	/usr/include/boost/format/group.hpp	/^group_head( group3<T1,T2,T3> const& x)$/;"	f	namespace:boost::io::detail	signature:( group3<T1,T2,T3> const& x)
boost::io::detail::group_head	/usr/include/boost/format/group.hpp	/^group_head( group4<T1,T2,T3,T4> const& x)$/;"	f	namespace:boost::io::detail	signature:( group4<T1,T2,T3,T4> const& x)
boost::io::detail::group_head	/usr/include/boost/format/group.hpp	/^group_head( group5<T1,T2,T3,T4,T5> const& x)$/;"	f	namespace:boost::io::detail	signature:( group5<T1,T2,T3,T4,T5> const& x)
boost::io::detail::group_head	/usr/include/boost/format/group.hpp	/^group_head( group6<T1,T2,T3,T4,T5,T6> const& x)$/;"	f	namespace:boost::io::detail	signature:( group6<T1,T2,T3,T4,T5,T6> const& x)
boost::io::detail::group_head	/usr/include/boost/format/group.hpp	/^group_head( group7<T1,T2,T3,T4,T5,T6,T7> const& x)$/;"	f	namespace:boost::io::detail	signature:( group7<T1,T2,T3,T4,T5,T6,T7> const& x)
boost::io::detail::group_head	/usr/include/boost/format/group.hpp	/^group_head( group8<T1,T2,T3,T4,T5,T6,T7,T8> const& x)$/;"	f	namespace:boost::io::detail	signature:( group8<T1,T2,T3,T4,T5,T6,T7,T8> const& x)
boost::io::detail::group_head	/usr/include/boost/format/group.hpp	/^group_head( group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> const& x)$/;"	f	namespace:boost::io::detail	signature:( group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> const& x)
boost::io::detail::group_last	/usr/include/boost/format/group.hpp	/^group_last( group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> const& x)$/;"	f	namespace:boost::io::detail	signature:( group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> const& x)
boost::io::detail::group_last	/usr/include/boost/format/group.hpp	/^group_last( group2<T1,T2> const& x)$/;"	f	namespace:boost::io::detail	signature:( group2<T1,T2> const& x)
boost::io::detail::group_last	/usr/include/boost/format/group.hpp	/^group_last( group3<T1,T2,T3> const& x)$/;"	f	namespace:boost::io::detail	signature:( group3<T1,T2,T3> const& x)
boost::io::detail::group_last	/usr/include/boost/format/group.hpp	/^group_last( group4<T1,T2,T3,T4> const& x)$/;"	f	namespace:boost::io::detail	signature:( group4<T1,T2,T3,T4> const& x)
boost::io::detail::group_last	/usr/include/boost/format/group.hpp	/^group_last( group5<T1,T2,T3,T4,T5> const& x)$/;"	f	namespace:boost::io::detail	signature:( group5<T1,T2,T3,T4,T5> const& x)
boost::io::detail::group_last	/usr/include/boost/format/group.hpp	/^group_last( group6<T1,T2,T3,T4,T5,T6> const& x)$/;"	f	namespace:boost::io::detail	signature:( group6<T1,T2,T3,T4,T5,T6> const& x)
boost::io::detail::group_last	/usr/include/boost/format/group.hpp	/^group_last( group7<T1,T2,T3,T4,T5,T6,T7> const& x)$/;"	f	namespace:boost::io::detail	signature:( group7<T1,T2,T3,T4,T5,T6,T7> const& x)
boost::io::detail::group_last	/usr/include/boost/format/group.hpp	/^group_last( group8<T1,T2,T3,T4,T5,T6,T7,T8> const& x)$/;"	f	namespace:boost::io::detail	signature:( group8<T1,T2,T3,T4,T5,T6,T7,T8> const& x)
boost::io::detail::group_last	/usr/include/boost/format/group.hpp	/^group_last( group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> const& x)$/;"	f	namespace:boost::io::detail	signature:( group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> const& x)
boost::io::detail::locale_t	/usr/include/boost/format/detail/config_macros.hpp	/^    typedef BOOST_IO_STD locale locale_t;$/;"	t	namespace:boost::io::detail
boost::io::detail::maybe_throw_exception	/usr/include/boost/format/parsing.hpp	/^    inline void maybe_throw_exception(unsigned char exceptions, $/;"	f	namespace:boost::io::detail	signature:(unsigned char exceptions, std::size_t pos, std::size_t size)
boost::io::detail::mk_str	/usr/include/boost/format/feed_args.hpp	/^    void mk_str( std::basic_string<Ch,Tr, Alloc> & res, $/;"	f	namespace:boost::io::detail	signature:( std::basic_string<Ch,Tr, Alloc> & res, const Ch * beg, typename std::basic_string<Ch,Tr,Alloc>::size_type size, std::streamsize w, const Ch fill_char, std::ios_base::fmtflags f, const Ch prefix_space, bool center)
boost::io::detail::modify_item_body	/usr/include/boost/format/format_implementation.hpp	/^    modify_item_body (basic_format<Ch, Tr, Alloc>& self, int itemN, T manipulator) {$/;"	f	namespace:boost::io::detail	signature:(basic_format<Ch, Tr, Alloc>& self, int itemN, T manipulator)
boost::io::detail::modify_item_body	/usr/include/boost/format/internals_fwd.hpp	/^    modify_item_body (basic_format<Ch, Tr, Alloc>& self, $/;"	p	namespace:boost::io::detail	signature:(basic_format<Ch, Tr, Alloc>& self, int itemN, T manipulator)
boost::io::detail::operator <<	/usr/include/boost/format/group.hpp	/^operator << ( BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group0& )
boost::io::detail::operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>& x)
boost::io::detail::operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group1<T1>& x)
boost::io::detail::operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group2<T1,T2>& x)
boost::io::detail::operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group3<T1,T2,T3>& x)
boost::io::detail::operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group4<T1,T2,T3,T4>& x)
boost::io::detail::operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group5<T1,T2,T3,T4,T5>& x)
boost::io::detail::operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group6<T1,T2,T3,T4,T5,T6>& x)
boost::io::detail::operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group7<T1,T2,T3,T4,T5,T6,T7>& x)
boost::io::detail::operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group8<T1,T2,T3,T4,T5,T6,T7,T8>& x)
boost::io::detail::operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group9<T1,T2,T3,T4,T5,T6,T7,T8,T9>& x)
boost::io::detail::parse_printf_directive	/usr/include/boost/format/parsing.hpp	/^    bool parse_printf_directive(Iter & start, const Iter& last, $/;"	f	namespace:boost::io::detail	signature:(Iter & start, const Iter& last, detail::format_item<Ch, Tr, Alloc> * fpar, const Facet& fac, std::size_t offset, unsigned char exceptions)
boost::io::detail::put	/usr/include/boost/format/feed_args.hpp	/^    void put( T x, $/;"	f	namespace:boost::io::detail	signature:( T x, const format_item<Ch, Tr, Alloc>& specs, typename basic_format<Ch, Tr, Alloc>::string_type& res, typename basic_format<Ch, Tr, Alloc>::internal_streambuf_t & buf, io::detail::locale_t *loc_p = NULL)
boost::io::detail::put_head	/usr/include/boost/format/feed_args.hpp	/^    void put_head (BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x ) {$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x )
boost::io::detail::put_head	/usr/include/boost/format/feed_args.hpp	/^    void put_head (BOOST_IO_STD basic_ostream<Ch, Tr> &, const T& ) {$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr> &, const T& )
boost::io::detail::put_head	/usr/include/boost/format/feed_args.hpp	/^    void put_head( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const group1<T>& x ) {$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const group1<T>& x )
boost::io::detail::put_head	/usr/include/boost/format/feed_args.hpp	/^    void put_head( BOOST_IO_STD basic_ostream<Ch, Tr> &, T& ) {$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr> &, T& )
boost::io::detail::put_last	/usr/include/boost/format/feed_args.hpp	/^    void put_last (BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x ) {$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x )
boost::io::detail::put_last	/usr/include/boost/format/feed_args.hpp	/^    void put_last( BOOST_IO_STD basic_ostream<Ch, Tr> & os, T& x) {$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr> & os, T& x)
boost::io::detail::put_last	/usr/include/boost/format/feed_args.hpp	/^    void put_last( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x ) {$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x )
boost::io::detail::put_last	/usr/include/boost/format/feed_args.hpp	/^    void put_last( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const group1<T>& x ) {$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const group1<T>& x )
boost::io::detail::skip_asterisk	/usr/include/boost/format/parsing.hpp	/^    Iter skip_asterisk(Iter start, Iter last, const Facet& fac) $/;"	f	namespace:boost::io::detail	signature:(Iter start, Iter last, const Facet& fac)
boost::io::detail::str2int	/usr/include/boost/format/parsing.hpp	/^    Iter str2int (const Iter & start, const Iter & last, Res & res, $/;"	f	namespace:boost::io::detail	signature:(const Iter & start, const Iter & last, Res & res, const Facet& fac)
boost::io::detail::stream_format_state	/usr/include/boost/format/internals.hpp	/^    struct stream_format_state $/;"	s	namespace:boost::io::detail
boost::io::detail::stream_format_state::apply_manip	/usr/include/boost/format/internals.hpp	/^        void apply_manip(T manipulator)          \/\/- modifies state by applying manipulator$/;"	f	struct:boost::io::detail::stream_format_state	access:public	signature:(T manipulator)
boost::io::detail::stream_format_state::apply_on	/usr/include/boost/format/internals.hpp	/^        void apply_on(basic_ios & os,            \/\/- applies format_state to the stream$/;"	p	struct:boost::io::detail::stream_format_state	access:public	signature:(basic_ios & os, boost::io::detail::locale_t * loc_default = 0) const
boost::io::detail::stream_format_state::apply_on	/usr/include/boost/format/internals.hpp	/^    void stream_format_state<Ch,Tr>:: apply_on (basic_ios & os,$/;"	f	class:boost::io::detail::stream_format_state	signature:(basic_ios & os, boost::io::detail::locale_t * loc_default) const
boost::io::detail::stream_format_state::basic_ios	/usr/include/boost/format/internals.hpp	/^        typedef BOOST_IO_STD basic_ios<Ch, Tr>   basic_ios;$/;"	t	struct:boost::io::detail::stream_format_state	access:public
boost::io::detail::stream_format_state::exceptions_	/usr/include/boost/format/internals.hpp	/^        std::ios_base::iostate  exceptions_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
boost::io::detail::stream_format_state::fill_	/usr/include/boost/format/internals.hpp	/^        Ch fill_; $/;"	m	struct:boost::io::detail::stream_format_state	access:public
boost::io::detail::stream_format_state::flags_	/usr/include/boost/format/internals.hpp	/^        std::ios_base::fmtflags flags_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
boost::io::detail::stream_format_state::loc_	/usr/include/boost/format/internals.hpp	/^        boost::optional<boost::io::detail::locale_t>  loc_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
boost::io::detail::stream_format_state::precision_	/usr/include/boost/format/internals.hpp	/^        std::streamsize precision_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
boost::io::detail::stream_format_state::rdstate_	/usr/include/boost/format/internals.hpp	/^        std::ios_base::iostate  rdstate_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
boost::io::detail::stream_format_state::reset	/usr/include/boost/format/internals.hpp	/^        void reset(Ch fill);                     \/\/- sets to default state.$/;"	p	struct:boost::io::detail::stream_format_state	access:public	signature:(Ch fill)
boost::io::detail::stream_format_state::reset	/usr/include/boost/format/internals.hpp	/^    void stream_format_state<Ch,Tr>:: reset(Ch fill) {$/;"	f	class:boost::io::detail::stream_format_state	signature:(Ch fill)
boost::io::detail::stream_format_state::set_by_stream	/usr/include/boost/format/internals.hpp	/^        void set_by_stream(const basic_ios& os); \/\/- sets to os's state.$/;"	p	struct:boost::io::detail::stream_format_state	access:public	signature:(const basic_ios& os)
boost::io::detail::stream_format_state::set_by_stream	/usr/include/boost/format/internals.hpp	/^    void stream_format_state<Ch,Tr>:: set_by_stream(const basic_ios& os) {$/;"	f	class:boost::io::detail::stream_format_state	signature:(const basic_ios& os)
boost::io::detail::stream_format_state::stream_format_state	/usr/include/boost/format/internals.hpp	/^        stream_format_state(Ch fill)                 { reset(fill); }$/;"	f	struct:boost::io::detail::stream_format_state	access:public	signature:(Ch fill)
boost::io::detail::stream_format_state::width_	/usr/include/boost/format/internals.hpp	/^        std::streamsize width_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
boost::io::detail::upper_bound_from_fstring	/usr/include/boost/format/parsing.hpp	/^    int upper_bound_from_fstring(const String& buf, $/;"	f	namespace:boost::io::detail	signature:(const String& buf, const typename String::value_type arg_mark, const Facet& fac, unsigned char exceptions)
boost::io::detail::wrap_isdigit	/usr/include/boost/format/parsing.hpp	/^    bool wrap_isdigit(const Facet& fac, Ch c) {$/;"	f	namespace:boost::io::detail	signature:(const Facet& fac, Ch c)
boost::io::detail::wrap_narrow	/usr/include/boost/format/parsing.hpp	/^    char wrap_narrow(const Facet& fac, Ch c, char deflt) {$/;"	f	namespace:boost::io::detail	signature:(const Facet& fac, Ch c, char deflt)
boost::io::detail::wrap_scan_notdigit	/usr/include/boost/format/parsing.hpp	/^    Iter wrap_scan_notdigit(const Facet & fac, Iter beg, Iter end) {$/;"	f	namespace:boost::io::detail	signature:(const Facet & fac, Iter beg, Iter end)
boost::io::format_error	/usr/include/boost/format/exceptions.hpp	/^        class format_error : public std::exception$/;"	c	namespace:boost::io	inherits:std::exception
boost::io::format_error::format_error	/usr/include/boost/format/exceptions.hpp	/^            format_error()  {}$/;"	f	class:boost::io::format_error	access:public	signature:()
boost::io::format_error::what	/usr/include/boost/format/exceptions.hpp	/^            virtual const char *what() const throw() {$/;"	f	class:boost::io::format_error	access:public	signature:() const
boost::io::format_error_bits	/usr/include/boost/format/format_fwd.hpp	/^        enum format_error_bits { bad_format_string_bit = 1, $/;"	g	namespace:boost::io
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1, Var const& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1, Var& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2, Var const& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2, Var& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3, Var const& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3, Var& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4, Var const& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4, Var& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5, Var const& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5, Var& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6, Var const& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6, Var& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7, Var const& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7, Var& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8, Var const& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8, Var& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9, Var const& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9, Var& var)
boost::io::group	/usr/include/boost/format/group.hpp	/^group() { return detail::group1< detail::group0 > ( detail::group0() ); }$/;"	f	namespace:boost::io	signature:()
boost::io::no_error_bits	/usr/include/boost/format/format_fwd.hpp	/^                                 all_error_bits = 255, no_error_bits=0 };$/;"	e	enum:boost::io::format_error_bits
boost::io::out_of_range	/usr/include/boost/format/exceptions.hpp	/^        class  out_of_range : public format_error$/;"	c	namespace:boost::io	inherits:format_error
boost::io::out_of_range::beg_	/usr/include/boost/format/exceptions.hpp	/^            int index_, beg_, end_;    \/\/ range is [ beg, end [$/;"	m	class:boost::io::out_of_range	access:private
boost::io::out_of_range::end_	/usr/include/boost/format/exceptions.hpp	/^            int index_, beg_, end_;    \/\/ range is [ beg, end [$/;"	m	class:boost::io::out_of_range	access:private
boost::io::out_of_range::get_beg	/usr/include/boost/format/exceptions.hpp	/^            int get_beg() const { return beg_; }$/;"	f	class:boost::io::out_of_range	access:public	signature:() const
boost::io::out_of_range::get_end	/usr/include/boost/format/exceptions.hpp	/^            int get_end() const { return end_; }$/;"	f	class:boost::io::out_of_range	access:public	signature:() const
boost::io::out_of_range::get_index	/usr/include/boost/format/exceptions.hpp	/^            int get_index() const { return index_; }$/;"	f	class:boost::io::out_of_range	access:public	signature:() const
boost::io::out_of_range::index_	/usr/include/boost/format/exceptions.hpp	/^            int index_, beg_, end_;    \/\/ range is [ beg, end [$/;"	m	class:boost::io::out_of_range	access:private
boost::io::out_of_range::out_of_range	/usr/include/boost/format/exceptions.hpp	/^            out_of_range(int index, int beg, int end) $/;"	f	class:boost::io::out_of_range	access:public	signature:(int index, int beg, int end)
boost::io::out_of_range::what	/usr/include/boost/format/exceptions.hpp	/^            virtual const char *what() const throw() {$/;"	f	class:boost::io::out_of_range	access:public	signature:() const
boost::io::out_of_range_bit	/usr/include/boost/format/format_fwd.hpp	/^                                 out_of_range_bit = 8,$/;"	e	enum:boost::io::format_error_bits
boost::io::too_few_args	/usr/include/boost/format/exceptions.hpp	/^        class too_few_args : public format_error$/;"	c	namespace:boost::io	inherits:format_error
boost::io::too_few_args::cur_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t cur_, expected_;$/;"	m	class:boost::io::too_few_args	access:private
boost::io::too_few_args::expected_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t cur_, expected_;$/;"	m	class:boost::io::too_few_args	access:private
boost::io::too_few_args::get_cur	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_cur() const { return cur_; }$/;"	f	class:boost::io::too_few_args	access:public	signature:() const
boost::io::too_few_args::get_expected	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_expected() const { return expected_; }$/;"	f	class:boost::io::too_few_args	access:public	signature:() const
boost::io::too_few_args::too_few_args	/usr/include/boost/format/exceptions.hpp	/^            too_few_args(std::size_t cur, std::size_t expected) $/;"	f	class:boost::io::too_few_args	access:public	signature:(std::size_t cur, std::size_t expected)
boost::io::too_few_args::what	/usr/include/boost/format/exceptions.hpp	/^            virtual const char *what() const throw() {$/;"	f	class:boost::io::too_few_args	access:public	signature:() const
boost::io::too_few_args_bit	/usr/include/boost/format/format_fwd.hpp	/^                                 too_few_args_bit = 2, too_many_args_bit = 4,$/;"	e	enum:boost::io::format_error_bits
boost::io::too_many_args	/usr/include/boost/format/exceptions.hpp	/^        class too_many_args : public format_error$/;"	c	namespace:boost::io	inherits:format_error
boost::io::too_many_args::cur_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t cur_, expected_;$/;"	m	class:boost::io::too_many_args	access:private
boost::io::too_many_args::expected_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t cur_, expected_;$/;"	m	class:boost::io::too_many_args	access:private
boost::io::too_many_args::get_cur	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_cur() const { return cur_; }$/;"	f	class:boost::io::too_many_args	access:public	signature:() const
boost::io::too_many_args::get_expected	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_expected() const { return expected_; }$/;"	f	class:boost::io::too_many_args	access:public	signature:() const
boost::io::too_many_args::too_many_args	/usr/include/boost/format/exceptions.hpp	/^            too_many_args(std::size_t cur, std::size_t expected) $/;"	f	class:boost::io::too_many_args	access:public	signature:(std::size_t cur, std::size_t expected)
boost::io::too_many_args::what	/usr/include/boost/format/exceptions.hpp	/^            virtual const char *what() const throw() {$/;"	f	class:boost::io::too_many_args	access:public	signature:() const
boost::io::too_many_args_bit	/usr/include/boost/format/format_fwd.hpp	/^                                 too_few_args_bit = 2, too_many_args_bit = 4,$/;"	e	enum:boost::io::format_error_bits
boost::operator <<	/usr/include/boost/format/free_funcs.hpp	/^        operator<<( std::basic_ostream<Ch, Tr> & os,$/;"	f	namespace:boost	signature:( std::basic_ostream<Ch, Tr> & os, const basic_format<Ch, Tr, Alloc>& f)
boost::str	/usr/include/boost/format/free_funcs.hpp	/^    std::basic_string<Ch, Tr, Alloc> str(const basic_format<Ch, Tr, Alloc>& f) {$/;"	f	namespace:boost	signature:(const basic_format<Ch, Tr, Alloc>& f)
boost::wformat	/usr/include/boost/format/format_fwd.hpp	/^    typedef basic_format<wchar_t >  wformat;$/;"	t	namespace:boost
bound_	/usr/include/boost/format/format_class.hpp	/^        std::vector<bool> bound_; \/\/ stores which arguments were bound. size() == 0 || num_args$/;"	m	class:boost::basic_format	access:private
bound_args	/usr/include/boost/format/format_class.hpp	/^        int bound_args() const;$/;"	p	class:boost::basic_format	access:public	signature:() const
bound_args	/usr/include/boost/format/format_implementation.hpp	/^    bound_args() const {$/;"	f	class:boost::basic_format	signature:() const
buf_	/usr/include/boost/format/format_class.hpp	/^        internal_streambuf_t   buf_; \/\/ the internal stream buffer.$/;"	m	class:boost::basic_format	access:private
centered	/usr/include/boost/format/internals.hpp	/^        enum pad_values { zeropad = 1, spacepad =2, centered=4, tabulation = 8 };$/;"	e	enum:boost::io::detail::format_item::pad_values
char_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef Ch     char_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
char_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef Ch char_type;$/;"	t	class:boost::io::CompatTraits	access:public
clear	/usr/include/boost/format/format_class.hpp	/^        basic_format& clear();       \/\/ empty all converted string buffers (except bound items)$/;"	p	class:boost::basic_format	access:public	signature:()
clear	/usr/include/boost/format/format_implementation.hpp	/^    clear () {$/;"	f	class:boost::basic_format	signature:()
clear_bind	/usr/include/boost/format/format_class.hpp	/^        basic_format&  clear_bind(int argN);$/;"	p	class:boost::basic_format	access:public	signature:(int argN)
clear_bind	/usr/include/boost/format/format_implementation.hpp	/^    clear_bind (int argN) {$/;"	f	class:boost::basic_format	signature:(int argN)
clear_binds	/usr/include/boost/format/format_class.hpp	/^        basic_format& clear_binds(); \/\/ unbind all bound items, and call clear()$/;"	p	class:boost::basic_format	access:public	signature:()
clear_binds	/usr/include/boost/format/format_implementation.hpp	/^    clear_binds () {$/;"	f	class:boost::basic_format	signature:()
clear_buffer	/usr/include/boost/format/alt_sstream.hpp	/^            void clear_buffer() $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:()
clear_buffer	/usr/include/boost/format/alt_sstream.hpp	/^            void clear_buffer();$/;"	p	class:boost::io::basic_altstringbuf	access:public	signature:()
clear_buffer	/usr/include/boost/format/alt_sstream_impl.hpp	/^        clear_buffer () {$/;"	f	class:boost::io::basic_altstringbuf	signature:()
compat_allocator_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename CompatAlloc<Alloc>::compatible_type compat_allocator_type;$/;"	t	class:boost::io::basic_altstringbuf	access:private
compat_traits	/usr/include/boost/format/format_class.hpp	/^        typedef typename io::CompatTraits<Tr>::compatible_type compat_traits;  $/;"	t	class:boost::basic_format	access:private
compat_traits_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename CompatTraits<Tr>::compatible_type   compat_traits_type;$/;"	t	class:boost::io::basic_altstringbuf	access:private
compatible_type	/usr/include/boost/format/detail/compat_workarounds.hpp	/^            typedef Alloc  compatible_type;$/;"	t	class:boost::io::CompatAlloc	access:public
compatible_type	/usr/include/boost/format/detail/compat_workarounds.hpp	/^            typedef Tr  compatible_type;$/;"	t	class:boost::io::CompatTraits	access:public
compatible_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef ::std::allocator<char> compatible_type;$/;"	t	class:boost::io::CompatAlloc	access:public
compatible_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef CompatTraits                compatible_type;$/;"	t	class:boost::io::CompatTraits	access:public
compatible_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef CompatTraits< ::std::string_char_traits<Ch> >  compatible_type;$/;"	t	class:boost::io::CompatTraits	access:public
compute_states	/usr/include/boost/format/internals.hpp	/^        void compute_states(); \/\/ sets states  according to truncate and pad_scheme.$/;"	p	struct:boost::io::detail::format_item	access:public	signature:()
compute_states	/usr/include/boost/format/internals.hpp	/^    compute_states() {$/;"	f	class:boost::io::detail::format_item	signature:()
const_or_not	/usr/include/boost/format/parsing.hpp	/^    T& const_or_not(const T& x) { $/;"	f	namespace:boost::io::detail	signature:(const T& x)
copyfmt	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^        basic_ios& copyfmt(const ios& right) {$/;"	f	class:std::basic_ios	access:public	signature:(const ios& right)
cur_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t cur_, expected_;$/;"	m	class:boost::io::too_few_args	access:private
cur_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t cur_, expected_;$/;"	m	class:boost::io::too_many_args	access:private
cur_arg	/usr/include/boost/format/format_class.hpp	/^        int cur_arg() const;$/;"	p	class:boost::basic_format	access:public	signature:() const
cur_arg	/usr/include/boost/format/format_implementation.hpp	/^    cur_arg() const {$/;"	f	class:boost::basic_format	signature:() const
cur_arg_	/usr/include/boost/format/format_class.hpp	/^        int             cur_arg_; \/\/ keep track of wich argument is current$/;"	m	class:boost::basic_format	access:private
cur_size	/usr/include/boost/format/alt_sstream.hpp	/^            size_type cur_size() const \/\/ stops at current position$/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
cur_size	/usr/include/boost/format/alt_sstream.hpp	/^            size_type cur_size() const; \/\/ stop at current pointer$/;"	p	class:boost::io::basic_altstringbuf	access:public	signature:() const
cur_size	/usr/include/boost/format/alt_sstream_impl.hpp	/^        cur_size () const { $/;"	f	class:boost::io::basic_altstringbuf	signature:() const
cur_str	/usr/include/boost/format/alt_sstream.hpp	/^            string_type cur_str() const   \/\/ [pbase, pptr[$/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
cur_str	/usr/include/boost/format/alt_sstream.hpp	/^            string_type cur_str() const $/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:() const
dealloc	/usr/include/boost/format/alt_sstream.hpp	/^            void dealloc();$/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:()
dealloc	/usr/include/boost/format/alt_sstream_impl.hpp	/^        void basic_altstringbuf<Ch, Tr, Alloc>:: dealloc() {$/;"	f	class:boost::io::basic_altstringbuf	signature:()
detail	/usr/include/boost/format/detail/config_macros.hpp	/^        namespace detail {$/;"	n	namespace:boost::io
detail	/usr/include/boost/format/detail/config_macros.hpp	/^    namespace detail {$/;"	n	namespace:boost::io
detail	/usr/include/boost/format/detail/config_macros.hpp	/^namespace boost { namespace io { namespace detail {$/;"	n	namespace:boost::io
detail	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^namespace detail {$/;"	n	namespace:boost::io
detail	/usr/include/boost/format/feed_args.hpp	/^namespace detail {$/;"	n	namespace:boost::io
detail	/usr/include/boost/format/format_implementation.hpp	/^namespace detail {$/;"	n	namespace:boost::io
detail	/usr/include/boost/format/group.hpp	/^namespace detail {$/;"	n	namespace:boost::io
detail	/usr/include/boost/format/internals.hpp	/^namespace detail {$/;"	n	namespace:boost::io
detail	/usr/include/boost/format/internals_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::io
detail	/usr/include/boost/format/parsing.hpp	/^namespace detail {$/;"	n	namespace:boost::io
disambiguater	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^struct disambiguater$/;"	s	namespace:boost::io::detail
distribute	/usr/include/boost/format/feed_args.hpp	/^    void distribute (basic_format<Ch,Tr, Alloc>& self, T x) {$/;"	f	namespace:boost::io::detail	signature:(basic_format<Ch,Tr, Alloc>& self, T x)
distribute	/usr/include/boost/format/format_class.hpp	/^        void io::detail::distribute (basic_format<Ch2, Tr2, Alloc2>&, T);$/;"	p	class:boost::basic_format::io::detail	access:friend	signature:(basic_format<Ch2, Tr2, Alloc2>&, T)
distribute	/usr/include/boost/format/internals_fwd.hpp	/^    void distribute (basic_format<Ch,Tr, Alloc>& self, T x);$/;"	p	namespace:boost::io::detail	signature:(basic_format<Ch,Tr, Alloc>& self, T x)
dumped_	/usr/include/boost/format/format_class.hpp	/^        mutable bool     dumped_; \/\/ true only after call to str() or <<$/;"	m	class:boost::basic_format	access:private
end_	/usr/include/boost/format/exceptions.hpp	/^            int index_, beg_, end_;    \/\/ range is [ beg, end [$/;"	m	class:boost::io::out_of_range	access:private
eof	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            eof() {$/;"	f	class:boost::io::CompatTraits	access:public	signature:()
eq_int_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            eq_int_type(const int_type& left, const int_type& right) {$/;"	f	class:boost::io::CompatTraits	access:public	signature:(const int_type& left, const int_type& right)
exceptions	/usr/include/boost/format/format_class.hpp	/^        unsigned char exceptions() const;$/;"	p	class:boost::basic_format	access:public	signature:() const
exceptions	/usr/include/boost/format/format_class.hpp	/^        unsigned char exceptions(unsigned char newexcept);$/;"	p	class:boost::basic_format	access:public	signature:(unsigned char newexcept)
exceptions	/usr/include/boost/format/format_implementation.hpp	/^    unsigned char basic_format<Ch,Tr, Alloc>:: exceptions() const {$/;"	f	class:boost::basic_format	signature:() const
exceptions	/usr/include/boost/format/format_implementation.hpp	/^    unsigned char basic_format<Ch,Tr, Alloc>:: exceptions(unsigned char newexcept) { $/;"	f	class:boost::basic_format	signature:(unsigned char newexcept)
exceptions_	/usr/include/boost/format/format_class.hpp	/^        unsigned char exceptions_;$/;"	m	class:boost::basic_format	access:private
exceptions_	/usr/include/boost/format/internals.hpp	/^        std::ios_base::iostate  exceptions_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
expected_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t cur_, expected_;$/;"	m	class:boost::io::too_few_args	access:private
expected_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t cur_, expected_;$/;"	m	class:boost::io::too_many_args	access:private
expected_args	/usr/include/boost/format/format_class.hpp	/^        int expected_args() const$/;"	f	class:boost::basic_format	access:public	signature:() const
fed_args	/usr/include/boost/format/format_class.hpp	/^        int fed_args() const;$/;"	p	class:boost::basic_format	access:public	signature:() const
fed_args	/usr/include/boost/format/format_implementation.hpp	/^    fed_args() const {$/;"	f	class:boost::basic_format	signature:() const
feed	/usr/include/boost/format/feed_args.hpp	/^    feed (basic_format<Ch,Tr, Alloc>& self, T x) {$/;"	f	namespace:boost::io::detail	signature:(basic_format<Ch,Tr, Alloc>& self, T x)
feed	/usr/include/boost/format/format_class.hpp	/^        io::detail::feed (basic_format<Ch2, Tr2, Alloc2>&, T);$/;"	p	class:boost::basic_format::io::detail	access:friend	signature:(basic_format<Ch2, Tr2, Alloc2>&, T)
feed	/usr/include/boost/format/internals_fwd.hpp	/^    feed (basic_format<Ch,Tr, Alloc>& self, T x);$/;"	p	namespace:boost::io::detail	signature:(basic_format<Ch,Tr, Alloc>& self, T x)
fill	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^         char fill()  const { return ios::fill(); } \/\/ gcc returns wchar..$/;"	f	class:std::basic_ios	access:public	signature:() const
fill	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^         char fill(char c)  { return ios::fill(c); } \/\/ gcc takes wchar..$/;"	f	class:std::basic_ios	access:public	signature:(char c)
fill_	/usr/include/boost/format/internals.hpp	/^        Ch fill_; $/;"	m	struct:boost::io::detail::stream_format_state	access:public
flags_	/usr/include/boost/format/internals.hpp	/^        std::ios_base::fmtflags flags_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
fmtstate_	/usr/include/boost/format/internals.hpp	/^        stream_format_state fmtstate_;\/\/ set by parsing, is only affected by modify_item$/;"	m	struct:boost::io::detail::format_item	access:public
format	/usr/include/boost/format/format_fwd.hpp	/^    typedef basic_format<char >     format;$/;"	t	namespace:boost
format_error	/usr/include/boost/format/exceptions.hpp	/^            format_error()  {}$/;"	f	class:boost::io::format_error	access:public	signature:()
format_error	/usr/include/boost/format/exceptions.hpp	/^        class format_error : public std::exception$/;"	c	namespace:boost::io	inherits:std::exception
format_error_bits	/usr/include/boost/format/format_fwd.hpp	/^        enum format_error_bits { bad_format_string_bit = 1, $/;"	g	namespace:boost::io
format_item	/usr/include/boost/format/internals.hpp	/^        format_item(Ch fill) :argN_(argN_no_posit), fmtstate_(fill), $/;"	f	struct:boost::io::detail::format_item	access:public	signature:(Ch fill)
format_item	/usr/include/boost/format/internals.hpp	/^    struct format_item $/;"	s	namespace:boost::io::detail
format_item_t	/usr/include/boost/format/format_class.hpp	/^        typedef io::detail::format_item<Ch, Tr, Alloc>        format_item_t;$/;"	t	class:boost::basic_format	access:public
get_beg	/usr/include/boost/format/exceptions.hpp	/^            int get_beg() const { return beg_; }$/;"	f	class:boost::io::out_of_range	access:public	signature:() const
get_cur	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_cur() const { return cur_; }$/;"	f	class:boost::io::too_few_args	access:public	signature:() const
get_cur	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_cur() const { return cur_; }$/;"	f	class:boost::io::too_many_args	access:public	signature:() const
get_end	/usr/include/boost/format/exceptions.hpp	/^            int get_end() const { return end_; }$/;"	f	class:boost::io::out_of_range	access:public	signature:() const
get_expected	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_expected() const { return expected_; }$/;"	f	class:boost::io::too_few_args	access:public	signature:() const
get_expected	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_expected() const { return expected_; }$/;"	f	class:boost::io::too_many_args	access:public	signature:() const
get_index	/usr/include/boost/format/exceptions.hpp	/^            int get_index() const { return index_; }$/;"	f	class:boost::io::out_of_range	access:public	signature:() const
get_next	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_next() const { return next_; }$/;"	f	class:boost::io::bad_format_string	access:public	signature:() const
get_pos	/usr/include/boost/format/exceptions.hpp	/^            std::size_t get_pos() const { return pos_; }$/;"	f	class:boost::io::bad_format_string	access:public	signature:() const
getloc	/usr/include/boost/format/format_class.hpp	/^        io::detail::locale_t  getloc() const;$/;"	p	class:boost::basic_format	access:public	signature:() const
getloc	/usr/include/boost/format/format_implementation.hpp	/^    getloc() const {$/;"	f	class:boost::basic_format	signature:() const
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1, Var const& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1, Var& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2, Var const& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2, Var& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3, Var const& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3, Var& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4, Var const& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4, Var& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5, Var const& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5, Var& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6, Var const& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6, Var& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7, Var const& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7, Var& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8, Var const& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8, Var& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9, Var const& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9, Var const& var)
group	/usr/include/boost/format/group.hpp	/^  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9, Var& var)$/;"	f	namespace:boost::io	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9, Var& var)
group	/usr/include/boost/format/group.hpp	/^group() { return detail::group1< detail::group0 > ( detail::group0() ); }$/;"	f	namespace:boost::io	signature:()
group0	/usr/include/boost/format/group.hpp	/^    group0()      {}$/;"	f	struct:boost::io::detail::group0	access:public	signature:()
group0	/usr/include/boost/format/group.hpp	/^struct group0 $/;"	s	namespace:boost::io::detail
group1	/usr/include/boost/format/group.hpp	/^    group1(T1 a1)$/;"	f	struct:boost::io::detail::group1	access:public	signature:(T1 a1)
group1	/usr/include/boost/format/group.hpp	/^struct group1$/;"	s	namespace:boost::io::detail
group10	/usr/include/boost/format/group.hpp	/^    group10(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9,T10 a10)$/;"	f	struct:boost::io::detail::group10	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9,T10 a10)
group10	/usr/include/boost/format/group.hpp	/^struct group10$/;"	s	namespace:boost::io::detail
group2	/usr/include/boost/format/group.hpp	/^    group2(T1 a1,T2 a2)$/;"	f	struct:boost::io::detail::group2	access:public	signature:(T1 a1,T2 a2)
group2	/usr/include/boost/format/group.hpp	/^struct group2$/;"	s	namespace:boost::io::detail
group3	/usr/include/boost/format/group.hpp	/^    group3(T1 a1,T2 a2,T3 a3)$/;"	f	struct:boost::io::detail::group3	access:public	signature:(T1 a1,T2 a2,T3 a3)
group3	/usr/include/boost/format/group.hpp	/^struct group3$/;"	s	namespace:boost::io::detail
group4	/usr/include/boost/format/group.hpp	/^    group4(T1 a1,T2 a2,T3 a3,T4 a4)$/;"	f	struct:boost::io::detail::group4	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4)
group4	/usr/include/boost/format/group.hpp	/^struct group4$/;"	s	namespace:boost::io::detail
group5	/usr/include/boost/format/group.hpp	/^    group5(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5)$/;"	f	struct:boost::io::detail::group5	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5)
group5	/usr/include/boost/format/group.hpp	/^struct group5$/;"	s	namespace:boost::io::detail
group6	/usr/include/boost/format/group.hpp	/^    group6(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6)$/;"	f	struct:boost::io::detail::group6	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6)
group6	/usr/include/boost/format/group.hpp	/^struct group6$/;"	s	namespace:boost::io::detail
group7	/usr/include/boost/format/group.hpp	/^    group7(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7)$/;"	f	struct:boost::io::detail::group7	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7)
group7	/usr/include/boost/format/group.hpp	/^struct group7$/;"	s	namespace:boost::io::detail
group8	/usr/include/boost/format/group.hpp	/^    group8(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8)$/;"	f	struct:boost::io::detail::group8	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8)
group8	/usr/include/boost/format/group.hpp	/^struct group8$/;"	s	namespace:boost::io::detail
group9	/usr/include/boost/format/group.hpp	/^    group9(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9)$/;"	f	struct:boost::io::detail::group9	access:public	signature:(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9)
group9	/usr/include/boost/format/group.hpp	/^struct group9$/;"	s	namespace:boost::io::detail
group_head	/usr/include/boost/format/group.hpp	/^group_head( group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> const& x)$/;"	f	namespace:boost::io::detail	signature:( group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> const& x)
group_head	/usr/include/boost/format/group.hpp	/^group_head( group2<T1,T2> const& x)$/;"	f	namespace:boost::io::detail	signature:( group2<T1,T2> const& x)
group_head	/usr/include/boost/format/group.hpp	/^group_head( group3<T1,T2,T3> const& x)$/;"	f	namespace:boost::io::detail	signature:( group3<T1,T2,T3> const& x)
group_head	/usr/include/boost/format/group.hpp	/^group_head( group4<T1,T2,T3,T4> const& x)$/;"	f	namespace:boost::io::detail	signature:( group4<T1,T2,T3,T4> const& x)
group_head	/usr/include/boost/format/group.hpp	/^group_head( group5<T1,T2,T3,T4,T5> const& x)$/;"	f	namespace:boost::io::detail	signature:( group5<T1,T2,T3,T4,T5> const& x)
group_head	/usr/include/boost/format/group.hpp	/^group_head( group6<T1,T2,T3,T4,T5,T6> const& x)$/;"	f	namespace:boost::io::detail	signature:( group6<T1,T2,T3,T4,T5,T6> const& x)
group_head	/usr/include/boost/format/group.hpp	/^group_head( group7<T1,T2,T3,T4,T5,T6,T7> const& x)$/;"	f	namespace:boost::io::detail	signature:( group7<T1,T2,T3,T4,T5,T6,T7> const& x)
group_head	/usr/include/boost/format/group.hpp	/^group_head( group8<T1,T2,T3,T4,T5,T6,T7,T8> const& x)$/;"	f	namespace:boost::io::detail	signature:( group8<T1,T2,T3,T4,T5,T6,T7,T8> const& x)
group_head	/usr/include/boost/format/group.hpp	/^group_head( group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> const& x)$/;"	f	namespace:boost::io::detail	signature:( group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> const& x)
group_last	/usr/include/boost/format/group.hpp	/^group_last( group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> const& x)$/;"	f	namespace:boost::io::detail	signature:( group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> const& x)
group_last	/usr/include/boost/format/group.hpp	/^group_last( group2<T1,T2> const& x)$/;"	f	namespace:boost::io::detail	signature:( group2<T1,T2> const& x)
group_last	/usr/include/boost/format/group.hpp	/^group_last( group3<T1,T2,T3> const& x)$/;"	f	namespace:boost::io::detail	signature:( group3<T1,T2,T3> const& x)
group_last	/usr/include/boost/format/group.hpp	/^group_last( group4<T1,T2,T3,T4> const& x)$/;"	f	namespace:boost::io::detail	signature:( group4<T1,T2,T3,T4> const& x)
group_last	/usr/include/boost/format/group.hpp	/^group_last( group5<T1,T2,T3,T4,T5> const& x)$/;"	f	namespace:boost::io::detail	signature:( group5<T1,T2,T3,T4,T5> const& x)
group_last	/usr/include/boost/format/group.hpp	/^group_last( group6<T1,T2,T3,T4,T5,T6> const& x)$/;"	f	namespace:boost::io::detail	signature:( group6<T1,T2,T3,T4,T5,T6> const& x)
group_last	/usr/include/boost/format/group.hpp	/^group_last( group7<T1,T2,T3,T4,T5,T6,T7> const& x)$/;"	f	namespace:boost::io::detail	signature:( group7<T1,T2,T3,T4,T5,T6,T7> const& x)
group_last	/usr/include/boost/format/group.hpp	/^group_last( group8<T1,T2,T3,T4,T5,T6,T7,T8> const& x)$/;"	f	namespace:boost::io::detail	signature:( group8<T1,T2,T3,T4,T5,T6,T7,T8> const& x)
group_last	/usr/include/boost/format/group.hpp	/^group_last( group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> const& x)$/;"	f	namespace:boost::io::detail	signature:( group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> const& x)
index_	/usr/include/boost/format/exceptions.hpp	/^            int index_, beg_, end_;    \/\/ range is [ beg, end [$/;"	m	class:boost::io::out_of_range	access:private
int_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename compat_traits_type::int_type     int_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
int_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef int int_type;$/;"	t	class:boost::io::CompatTraits	access:public
internal_streambuf_t	/usr/include/boost/format/format_class.hpp	/^        typedef io::basic_altstringbuf<Ch, Tr, Alloc>         internal_streambuf_t;$/;"	t	class:boost::basic_format	access:public
io	/usr/include/boost/format/alt_sstream.hpp	/^    namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/alt_sstream_impl.hpp	/^    namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/detail/compat_workarounds.hpp	/^    namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/detail/config_macros.hpp	/^    namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/detail/config_macros.hpp	/^  namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/detail/config_macros.hpp	/^namespace boost { namespace io { namespace detail {$/;"	n	namespace:boost
io	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^    namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/exceptions.hpp	/^    namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/feed_args.hpp	/^namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/format_fwd.hpp	/^    namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/format_implementation.hpp	/^namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/free_funcs.hpp	/^    namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/group.hpp	/^namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/internals.hpp	/^namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/internals_fwd.hpp	/^namespace io {$/;"	n	namespace:boost
io	/usr/include/boost/format/parsing.hpp	/^namespace io {$/;"	n	namespace:boost
ios_base	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^    typedef ios ios_base;$/;"	t	namespace:std
is_allocated_	/usr/include/boost/format/alt_sstream.hpp	/^            bool is_allocated_;$/;"	m	class:boost::io::basic_altstringbuf	access:private
items_	/usr/include/boost/format/format_class.hpp	/^        std::vector<format_item_t>  items_; \/\/ each '%..' directive leads to a format_item$/;"	m	class:boost::basic_format	access:private
loc_	/usr/include/boost/format/format_class.hpp	/^        boost::optional<io::detail::locale_t>     loc_;$/;"	m	class:boost::basic_format	access:private
loc_	/usr/include/boost/format/internals.hpp	/^        boost::optional<boost::io::detail::locale_t>  loc_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
locale_t	/usr/include/boost/format/detail/config_macros.hpp	/^    typedef BOOST_IO_STD locale locale_t;$/;"	t	namespace:boost::io::detail
make_or_reuse_data	/usr/include/boost/format/format_class.hpp	/^        void make_or_reuse_data(std::size_t nbitems);\/\/ used for (re-)initialisation$/;"	p	class:boost::basic_format	access:private	signature:(std::size_t nbitems)
make_or_reuse_data	/usr/include/boost/format/format_implementation.hpp	/^    make_or_reuse_data (std::size_t nbitems) {$/;"	f	class:boost::basic_format	signature:(std::size_t nbitems)
max_streamsize	/usr/include/boost/format/internals.hpp	/^        static std::streamsize max_streamsize() { $/;"	f	struct:boost::io::detail::format_item	access:public	signature:()
maybe_throw_exception	/usr/include/boost/format/parsing.hpp	/^    inline void maybe_throw_exception(unsigned char exceptions, $/;"	f	namespace:boost::io::detail	signature:(unsigned char exceptions, std::size_t pos, std::size_t size)
mk_str	/usr/include/boost/format/feed_args.hpp	/^    void mk_str( std::basic_string<Ch,Tr, Alloc> & res, $/;"	f	namespace:boost::io::detail	signature:( std::basic_string<Ch,Tr, Alloc> & res, const Ch * beg, typename std::basic_string<Ch,Tr,Alloc>::size_type size, std::streamsize w, const Ch fill_char, std::ios_base::fmtflags f, const Ch prefix_space, bool center)
mode_	/usr/include/boost/format/alt_sstream.hpp	/^            ::std::ios_base::openmode mode_;$/;"	m	class:boost::io::basic_altstringbuf	access:private
modify_item	/usr/include/boost/format/format_class.hpp	/^        basic_format&  modify_item(int itemN, T manipulator) $/;"	f	class:boost::basic_format	access:public	signature:(int itemN, T manipulator)
modify_item_body	/usr/include/boost/format/format_class.hpp	/^        io::detail::modify_item_body (basic_format<Ch2, Tr2, Alloc2>&, int, T);$/;"	p	class:boost::basic_format::io::detail	access:friend	signature:(basic_format<Ch2, Tr2, Alloc2>&, int, T)
modify_item_body	/usr/include/boost/format/format_implementation.hpp	/^    modify_item_body (basic_format<Ch, Tr, Alloc>& self, int itemN, T manipulator) {$/;"	f	namespace:boost::io::detail	signature:(basic_format<Ch, Tr, Alloc>& self, int itemN, T manipulator)
modify_item_body	/usr/include/boost/format/internals_fwd.hpp	/^    modify_item_body (basic_format<Ch, Tr, Alloc>& self, $/;"	p	namespace:boost::io::detail	signature:(basic_format<Ch, Tr, Alloc>& self, int itemN, T manipulator)
narrow	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^         char narrow(char c, char def) { return c; }$/;"	f	class:std::basic_ios	access:public	signature:(char c, char def)
next_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t pos_, next_;$/;"	m	class:boost::io::bad_format_string	access:private
no_error_bits	/usr/include/boost/format/format_fwd.hpp	/^                                 all_error_bits = 255, no_error_bits=0 };$/;"	e	enum:boost::io::format_error_bits
not_eof	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            not_eof(const int_type& meta) {$/;"	f	class:boost::io::CompatTraits	access:public	signature:(const int_type& meta)
num_args_	/usr/include/boost/format/format_class.hpp	/^        int            num_args_; \/\/ number of expected arguments$/;"	m	class:boost::basic_format	access:private
off_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename compat_traits_type::off_type     off_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
off_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef ::std::streamoff off_type;$/;"	t	class:boost::io::CompatTraits	access:public
operator %	/usr/include/boost/format/format_class.hpp	/^        basic_format&   operator%(const T& x)$/;"	f	class:boost::basic_format	access:public	signature:(const T& x)
operator %	/usr/include/boost/format/format_class.hpp	/^        basic_format&   operator%(const int& x)$/;"	f	class:boost::basic_format	access:public	signature:(const int& x)
operator %	/usr/include/boost/format/format_class.hpp	/^        basic_format&   operator%(int& x)$/;"	f	class:boost::basic_format	access:public	signature:(int& x)
operator %	/usr/include/boost/format/format_class.hpp	/^        template<class T>  basic_format&   operator%(T& x) $/;"	f	class:boost::basic_format	access:public	signature:(T& x)
operator ()	/usr/include/boost/format/alt_sstream.hpp	/^                const T & operator()(const T & arg) { return arg; }$/;"	f	class:boost::io::basic_oaltstringstream::No_Op	access:public	signature:(const T & arg)
operator <<	/usr/include/boost/format/format_class.hpp	/^        operator<<( std::basic_ostream<Ch2, Tr2> & ,$/;"	p	class:boost::basic_format	access:friend	signature:( std::basic_ostream<Ch2, Tr2> & , const basic_format<Ch2, Tr2, Alloc2>& )
operator <<	/usr/include/boost/format/format_class.hpp	/^        operator<<( std::ostream & ,$/;"	p	class:boost::basic_format	access:friend	signature:( std::ostream & , const basic_format<Ch2, Tr2, Alloc2>& )
operator <<	/usr/include/boost/format/free_funcs.hpp	/^        operator<<( std::basic_ostream<Ch, Tr> & os,$/;"	f	namespace:boost	signature:( std::basic_ostream<Ch, Tr> & os, const basic_format<Ch, Tr, Alloc>& f)
operator <<	/usr/include/boost/format/group.hpp	/^operator << ( BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group0& )
operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>& x)
operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group1<T1>& x)
operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group2<T1,T2>& x)
operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group3<T1,T2,T3>& x)
operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group4<T1,T2,T3,T4>& x)
operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group5<T1,T2,T3,T4,T5>& x)
operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group6<T1,T2,T3,T4,T5,T6>& x)
operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group7<T1,T2,T3,T4,T5,T6,T7>& x)
operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group8<T1,T2,T3,T4,T5,T6,T7,T8>& x)
operator <<	/usr/include/boost/format/group.hpp	/^operator << (BOOST_IO_STD basic_ostream<Ch, Tr>& os,$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, const group9<T1,T2,T3,T4,T5,T6,T7,T8,T9>& x)
operator =	/usr/include/boost/format/format_class.hpp	/^        basic_format& operator= (const basic_format& x);$/;"	p	class:boost::basic_format	access:public	signature:(const basic_format& x)
operator =	/usr/include/boost/format/format_implementation.hpp	/^    operator= (const basic_format& x) {$/;"	f	class:boost::basic_format	signature:(const basic_format& x)
operator =	/usr/include/boost/format/group.hpp	/^   group1& operator=(const group1&);$/;"	p	struct:boost::io::detail::group1	access:private	signature:(const group1&)
operator =	/usr/include/boost/format/group.hpp	/^   group2& operator=(const group2&);$/;"	p	struct:boost::io::detail::group2	access:private	signature:(const group2&)
operator =	/usr/include/boost/format/group.hpp	/^   group3& operator=(const group3&);$/;"	p	struct:boost::io::detail::group3	access:private	signature:(const group3&)
operator =	/usr/include/boost/format/group.hpp	/^   group4& operator=(const group4&);$/;"	p	struct:boost::io::detail::group4	access:private	signature:(const group4&)
ordered	/usr/include/boost/format/format_class.hpp	/^        enum style_values  { ordered = 1, \/\/ set only if all directives are  positional$/;"	e	enum:boost::basic_format::style_values
out_of_range	/usr/include/boost/format/exceptions.hpp	/^            out_of_range(int index, int beg, int end) $/;"	f	class:boost::io::out_of_range	access:public	signature:(int index, int beg, int end)
out_of_range	/usr/include/boost/format/exceptions.hpp	/^        class  out_of_range : public format_error$/;"	c	namespace:boost::io	inherits:format_error
out_of_range_bit	/usr/include/boost/format/format_fwd.hpp	/^                                 out_of_range_bit = 8,$/;"	e	enum:boost::io::format_error_bits
overflow	/usr/include/boost/format/alt_sstream.hpp	/^            virtual int_type overflow(int_type meta = compat_traits_type::eof());$/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:(int_type meta = compat_traits_type::eof())
overflow	/usr/include/boost/format/alt_sstream_impl.hpp	/^        overflow (int_type meta) {$/;"	f	class:boost::io::basic_altstringbuf	signature:(int_type meta)
pad_scheme_	/usr/include/boost/format/internals.hpp	/^        unsigned int pad_scheme_;\/\/- several possible padding schemes can mix. see pad_values$/;"	m	struct:boost::io::detail::format_item	access:public
pad_values	/usr/include/boost/format/internals.hpp	/^        enum pad_values { zeropad = 1, spacepad =2, centered=4, tabulation = 8 };$/;"	g	struct:boost::io::detail::format_item	access:public
parse	/usr/include/boost/format/format_class.hpp	/^        basic_format& parse(const string_type&); \/\/ resets buffers and parse a new format string$/;"	p	class:boost::basic_format	access:public	signature:(const string_type&)
parse	/usr/include/boost/format/parsing.hpp	/^    parse (const string_type& buf) {$/;"	f	class:boost::basic_format	signature:(const string_type& buf)
parse_printf_directive	/usr/include/boost/format/parsing.hpp	/^    bool parse_printf_directive(Iter & start, const Iter& last, $/;"	f	namespace:boost::io::detail	signature:(Iter & start, const Iter& last, detail::format_item<Ch, Tr, Alloc> * fpar, const Facet& fac, std::size_t offset, unsigned char exceptions)
pbackfail	/usr/include/boost/format/alt_sstream.hpp	/^            virtual int_type pbackfail(int_type meta = compat_traits_type::eof());$/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:(int_type meta = compat_traits_type::eof())
pbackfail	/usr/include/boost/format/alt_sstream_impl.hpp	/^        pbackfail (int_type meta) {$/;"	f	class:boost::io::basic_altstringbuf	signature:(int_type meta)
pbase_type	/usr/include/boost/format/alt_sstream.hpp	/^                pbase_type;$/;"	t	class:boost::io::basic_oaltstringstream	access:private
pcount	/usr/include/boost/format/alt_sstream.hpp	/^            size_type pcount() const $/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:() const
pend	/usr/include/boost/format/alt_sstream.hpp	/^            Ch * pend() const \/\/ the highest position reached by pptr() since creation$/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:() const
pos_	/usr/include/boost/format/exceptions.hpp	/^            std::size_t pos_, next_;$/;"	m	class:boost::io::bad_format_string	access:private
pos_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename compat_traits_type::pos_type     pos_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
pos_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            typedef ::std::streampos pos_type;$/;"	t	class:boost::io::CompatTraits	access:public
precision_	/usr/include/boost/format/internals.hpp	/^        std::streamsize precision_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
prefix_	/usr/include/boost/format/format_class.hpp	/^        string_type      prefix_; \/\/ piece of string to insert before first item$/;"	m	class:boost::basic_format	access:private
put	/usr/include/boost/format/feed_args.hpp	/^    void put( T x, $/;"	f	namespace:boost::io::detail	signature:( T x, const format_item<Ch, Tr, Alloc>& specs, typename basic_format<Ch, Tr, Alloc>::string_type& res, typename basic_format<Ch, Tr, Alloc>::internal_streambuf_t & buf, io::detail::locale_t *loc_p = NULL)
put_head	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^   static void put_head(BOOST_IO_STD basic_ostream<Ch, Tr>& os, T const& x, int)$/;"	f	struct:boost::io::detail::disambiguater	access:public	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, T const& x, int)
put_head	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^   static void put_head(BOOST_IO_STD basic_ostream<Ch, Tr>& os, group1<U> const& x, long)$/;"	f	struct:boost::io::detail::disambiguater	access:public	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, group1<U> const& x, long)
put_head	/usr/include/boost/format/feed_args.hpp	/^    void put_head (BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x ) {$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x )
put_head	/usr/include/boost/format/feed_args.hpp	/^    void put_head (BOOST_IO_STD basic_ostream<Ch, Tr> &, const T& ) {$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr> &, const T& )
put_head	/usr/include/boost/format/feed_args.hpp	/^    void put_head( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const group1<T>& x ) {$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const group1<T>& x )
put_head	/usr/include/boost/format/feed_args.hpp	/^    void put_head( BOOST_IO_STD basic_ostream<Ch, Tr> &, T& ) {$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr> &, T& )
put_last	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^   static void put_last(BOOST_IO_STD basic_ostream<Ch, Tr>& os, T const& x, int)$/;"	f	struct:boost::io::detail::disambiguater	access:public	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, T const& x, int)
put_last	/usr/include/boost/format/detail/msvc_disambiguater.hpp	/^   static void put_last(BOOST_IO_STD basic_ostream<Ch, Tr>& os, group1<U> const& x, long)$/;"	f	struct:boost::io::detail::disambiguater	access:public	signature:(BOOST_IO_STD basic_ostream<Ch, Tr>& os, group1<U> const& x, long)
put_last	/usr/include/boost/format/feed_args.hpp	/^    void put_last (BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x ) {$/;"	f	namespace:boost::io::detail	signature:(BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x )
put_last	/usr/include/boost/format/feed_args.hpp	/^    void put_last( BOOST_IO_STD basic_ostream<Ch, Tr> & os, T& x) {$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr> & os, T& x)
put_last	/usr/include/boost/format/feed_args.hpp	/^    void put_last( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x ) {$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const T& x )
put_last	/usr/include/boost/format/feed_args.hpp	/^    void put_last( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const group1<T>& x ) {$/;"	f	namespace:boost::io::detail	signature:( BOOST_IO_STD basic_ostream<Ch, Tr> & os, const group1<T>& x )
putend_	/usr/include/boost/format/alt_sstream.hpp	/^            Ch *putend_;  \/\/ remembers (over seeks) the highest value of pptr()$/;"	m	class:boost::io::basic_altstringbuf	access:private
rdbuf	/usr/include/boost/format/alt_sstream.hpp	/^            stringbuf_t * rdbuf() const $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
rdstate_	/usr/include/boost/format/internals.hpp	/^        std::ios_base::iostate  rdstate_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
remaining_args	/usr/include/boost/format/format_class.hpp	/^        int remaining_args() const; \/\/ same as expected_args() - bound_args() - fed_args()$/;"	p	class:boost::basic_format	access:public	signature:() const
remaining_args	/usr/include/boost/format/format_implementation.hpp	/^    remaining_args() const {$/;"	f	class:boost::basic_format	signature:() const
res_	/usr/include/boost/format/internals.hpp	/^        string_type  res_;      \/\/- result of the formatting of this item$/;"	m	struct:boost::io::detail::format_item	access:public
reset	/usr/include/boost/format/internals.hpp	/^        void reset(Ch fill);                     \/\/- sets to default state.$/;"	p	struct:boost::io::detail::stream_format_state	access:public	signature:(Ch fill)
reset	/usr/include/boost/format/internals.hpp	/^        void reset(Ch fill);$/;"	p	struct:boost::io::detail::format_item	access:public	signature:(Ch fill)
reset	/usr/include/boost/format/internals.hpp	/^    reset (Ch fill) { $/;"	f	class:boost::io::detail::format_item	signature:(Ch fill)
reset	/usr/include/boost/format/internals.hpp	/^    void stream_format_state<Ch,Tr>:: reset(Ch fill) {$/;"	f	class:boost::io::detail::stream_format_state	signature:(Ch fill)
seekoff	/usr/include/boost/format/alt_sstream.hpp	/^            virtual pos_type seekoff(off_type off, ::std::ios_base::seekdir way, $/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:(off_type off, ::std::ios_base::seekdir way, ::std::ios_base::openmode which = ::std::ios_base::in | ::std::ios_base::out)
seekoff	/usr/include/boost/format/alt_sstream_impl.hpp	/^        seekoff (off_type off, ::std::ios_base::seekdir way, ::std::ios_base::openmode which) {$/;"	f	class:boost::io::basic_altstringbuf	signature:(off_type off, ::std::ios_base::seekdir way, ::std::ios_base::openmode which)
seekpos	/usr/include/boost/format/alt_sstream.hpp	/^            virtual pos_type seekpos (pos_type pos, $/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:(pos_type pos, ::std::ios_base::openmode which = ::std::ios_base::in | ::std::ios_base::out)
seekpos	/usr/include/boost/format/alt_sstream_impl.hpp	/^        seekpos (pos_type pos, ::std::ios_base::openmode which) {$/;"	f	class:boost::io::basic_altstringbuf	signature:(pos_type pos, ::std::ios_base::openmode which)
set_by_stream	/usr/include/boost/format/internals.hpp	/^        void set_by_stream(const basic_ios& os); \/\/- sets to os's state.$/;"	p	struct:boost::io::detail::stream_format_state	access:public	signature:(const basic_ios& os)
set_by_stream	/usr/include/boost/format/internals.hpp	/^    void stream_format_state<Ch,Tr>:: set_by_stream(const basic_ios& os) {$/;"	f	class:boost::io::detail::stream_format_state	signature:(const basic_ios& os)
size	/usr/include/boost/format/alt_sstream.hpp	/^            size_type size() const $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
size	/usr/include/boost/format/alt_sstream.hpp	/^            size_type size() const;$/;"	p	class:boost::io::basic_altstringbuf	access:public	signature:() const
size	/usr/include/boost/format/alt_sstream_impl.hpp	/^        size () const { $/;"	f	class:boost::io::basic_altstringbuf	signature:() const
size	/usr/include/boost/format/format_class.hpp	/^        size_type   size() const;    \/\/ sum of the current string pieces sizes$/;"	p	class:boost::basic_format	access:public	signature:() const
size	/usr/include/boost/format/format_implementation.hpp	/^    size () const {$/;"	f	class:boost::basic_format	signature:() const
size_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename string_type::size_type     size_type;$/;"	t	class:boost::io::basic_oaltstringstream	access:private
size_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef typename string_type::size_type    size_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
size_type	/usr/include/boost/format/format_class.hpp	/^        typedef typename string_type::size_type               size_type;$/;"	t	class:boost::basic_format	access:public
skip_asterisk	/usr/include/boost/format/parsing.hpp	/^    Iter skip_asterisk(Iter start, Iter last, const Facet& fac) $/;"	f	namespace:boost::io::detail	signature:(Iter start, Iter last, const Facet& fac)
spacepad	/usr/include/boost/format/internals.hpp	/^        enum pad_values { zeropad = 1, spacepad =2, centered=4, tabulation = 8 };$/;"	e	enum:boost::io::detail::format_item::pad_values
special_needs	/usr/include/boost/format/format_class.hpp	/^                             special_needs = 4 };     $/;"	e	enum:boost::basic_format::style_values
std	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^namespace std {$/;"	n
std::basic_ios	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^    class basic_ios<char, Tr> : public ostream {$/;"	c	namespace:std	inherits:ostream
std::basic_ios::basic_ios	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^        basic_ios(streambuf * p) : ostream(p) {};$/;"	f	class:std::basic_ios	access:public	signature:(streambuf * p)
std::basic_ios::copyfmt	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^        basic_ios& copyfmt(const ios& right) {$/;"	f	class:std::basic_ios	access:public	signature:(const ios& right)
std::basic_ios::fill	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^         char fill()  const { return ios::fill(); } \/\/ gcc returns wchar..$/;"	f	class:std::basic_ios	access:public	signature:() const
std::basic_ios::fill	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^         char fill(char c)  { return ios::fill(c); } \/\/ gcc takes wchar..$/;"	f	class:std::basic_ios	access:public	signature:(char c)
std::basic_ios::narrow	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^         char narrow(char c, char def) { return c; }$/;"	f	class:std::basic_ios	access:public	signature:(char c, char def)
std::basic_ios::widen	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^         char widen(char c) { return c; }$/;"	f	class:std::basic_ios	access:public	signature:(char c)
std::basic_ostream	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^     class basic_ostream<char, Tr> : public basic_ios<char, Tr>$/;"	c	namespace:std	inherits:basic_ios
std::basic_ostream::basic_ostream	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^         basic_ostream(streambuf * p) : basic_ios<char,Tr> (p) {}$/;"	f	class:std::basic_ostream	access:public	signature:(streambuf * p)
std::basic_streambuf	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^    class basic_streambuf<char, Tr> : public streambuf {$/;"	c	namespace:std	inherits:streambuf
std::ios_base	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^    typedef ios ios_base;$/;"	t	namespace:std
str	/usr/include/boost/format/alt_sstream.hpp	/^            string_type str()     const   \/\/ [pbase, epptr[$/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:() const
str	/usr/include/boost/format/alt_sstream.hpp	/^            string_type str() const $/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:() const
str	/usr/include/boost/format/alt_sstream.hpp	/^            void str(const string_type& s) $/;"	f	class:boost::io::basic_oaltstringstream	access:public	signature:(const string_type& s)
str	/usr/include/boost/format/alt_sstream.hpp	/^            void str(const string_type& s);$/;"	p	class:boost::io::basic_altstringbuf	access:public	signature:(const string_type& s)
str	/usr/include/boost/format/alt_sstream_impl.hpp	/^        str (const string_type& s) {$/;"	f	class:boost::io::basic_altstringbuf	signature:(const string_type& s)
str	/usr/include/boost/format/format_class.hpp	/^        string_type str()  const;    \/\/ final string $/;"	p	class:boost::basic_format	access:public	signature:() const
str	/usr/include/boost/format/format_implementation.hpp	/^    str () const {$/;"	f	class:boost::basic_format	signature:() const
str	/usr/include/boost/format/free_funcs.hpp	/^    std::basic_string<Ch, Tr, Alloc> str(const basic_format<Ch, Tr, Alloc>& f) {$/;"	f	namespace:boost	signature:(const basic_format<Ch, Tr, Alloc>& f)
str2int	/usr/include/boost/format/parsing.hpp	/^    Iter str2int (const Iter & start, const Iter & last, Res & res, $/;"	f	namespace:boost::io::detail	signature:(const Iter & start, const Iter & last, Res & res, const Facet& fac)
stream_format_state	/usr/include/boost/format/format_class.hpp	/^        typedef io::detail::stream_format_state<Ch, Tr>  stream_format_state;$/;"	t	class:boost::basic_format	access:private
stream_format_state	/usr/include/boost/format/internals.hpp	/^        stream_format_state(Ch fill)                 { reset(fill); }$/;"	f	struct:boost::io::detail::stream_format_state	access:public	signature:(Ch fill)
stream_format_state	/usr/include/boost/format/internals.hpp	/^        typedef detail::stream_format_state<Ch, Tr>               stream_format_state;$/;"	t	struct:boost::io::detail::format_item	access:public
stream_format_state	/usr/include/boost/format/internals.hpp	/^    struct stream_format_state $/;"	s	namespace:boost::io::detail
stream_t	/usr/include/boost/format/alt_sstream.hpp	/^            typedef ::std::basic_ostream<Ch, Tr> stream_t;$/;"	t	class:boost::io::basic_oaltstringstream	access:private
streambuf_t	/usr/include/boost/format/alt_sstream.hpp	/^            typedef ::std::basic_streambuf<Ch, Tr>  streambuf_t;$/;"	t	class:boost::io::basic_altstringbuf	access:private
streamsize	/usr/include/boost/format/alt_sstream.hpp	/^            typedef ::std::streamsize streamsize;$/;"	t	class:boost::io::basic_altstringbuf	access:public
string_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef ::std::basic_string<Ch, Tr, Alloc>  string_type;$/;"	t	class:boost::io::basic_oaltstringstream	access:private
string_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef ::std::basic_string<Ch, Tr, Alloc> string_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
string_type	/usr/include/boost/format/format_class.hpp	/^        typedef std::basic_string<Ch, Tr, Alloc>              string_type;$/;"	t	class:boost::basic_format	access:public
string_type	/usr/include/boost/format/internals.hpp	/^        typedef ::std::basic_string<Ch, Tr, Alloc>                string_type;$/;"	t	struct:boost::io::detail::format_item	access:public
stringbuf_t	/usr/include/boost/format/alt_sstream.hpp	/^            typedef basic_altstringbuf<Ch, Tr, Alloc>   stringbuf_t;$/;"	t	class:boost::io::basic_oaltstringstream	access:private
style_	/usr/include/boost/format/format_class.hpp	/^        int              style_; \/\/ style of format-string :  positional or not, etc$/;"	m	class:boost::basic_format	access:private
style_values	/usr/include/boost/format/format_class.hpp	/^        enum style_values  { ordered = 1, \/\/ set only if all directives are  positional$/;"	g	class:boost::basic_format	access:private
swap	/usr/include/boost/format/format_class.hpp	/^        void swap(basic_format& x);$/;"	p	class:boost::basic_format	access:public	signature:(basic_format& x)
swap	/usr/include/boost/format/format_implementation.hpp	/^    swap (basic_format & x) {$/;"	f	class:boost::basic_format	signature:(basic_format & x)
tabulation	/usr/include/boost/format/internals.hpp	/^        enum pad_values { zeropad = 1, spacepad =2, centered=4, tabulation = 8 };$/;"	e	enum:boost::io::detail::format_item::pad_values
to_char_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            to_char_type(const int_type& meta) {$/;"	f	class:boost::io::CompatTraits	access:public	signature:(const int_type& meta)
to_int_type	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^            to_int_type(const char_type& ch) {$/;"	f	class:boost::io::CompatTraits	access:public	signature:(const char_type& ch)
too_few_args	/usr/include/boost/format/exceptions.hpp	/^            too_few_args(std::size_t cur, std::size_t expected) $/;"	f	class:boost::io::too_few_args	access:public	signature:(std::size_t cur, std::size_t expected)
too_few_args	/usr/include/boost/format/exceptions.hpp	/^        class too_few_args : public format_error$/;"	c	namespace:boost::io	inherits:format_error
too_few_args_bit	/usr/include/boost/format/format_fwd.hpp	/^                                 too_few_args_bit = 2, too_many_args_bit = 4,$/;"	e	enum:boost::io::format_error_bits
too_many_args	/usr/include/boost/format/exceptions.hpp	/^            too_many_args(std::size_t cur, std::size_t expected) $/;"	f	class:boost::io::too_many_args	access:public	signature:(std::size_t cur, std::size_t expected)
too_many_args	/usr/include/boost/format/exceptions.hpp	/^        class too_many_args : public format_error$/;"	c	namespace:boost::io	inherits:format_error
too_many_args_bit	/usr/include/boost/format/format_fwd.hpp	/^                                 too_few_args_bit = 2, too_many_args_bit = 4,$/;"	e	enum:boost::io::format_error_bits
traits_type	/usr/include/boost/format/alt_sstream.hpp	/^            typedef Tr     traits_type;$/;"	t	class:boost::io::basic_altstringbuf	access:public
truncate_	/usr/include/boost/format/internals.hpp	/^        std::streamsize truncate_;\/\/- is set for directives like %.5s that ask truncation$/;"	m	struct:boost::io::detail::format_item	access:public
underflow	/usr/include/boost/format/alt_sstream.hpp	/^            virtual int_type underflow();$/;"	p	class:boost::io::basic_altstringbuf	access:protected	signature:()
underflow	/usr/include/boost/format/alt_sstream_impl.hpp	/^        underflow () {$/;"	f	class:boost::io::basic_altstringbuf	signature:()
upper_bound_from_fstring	/usr/include/boost/format/parsing.hpp	/^    int upper_bound_from_fstring(const String& buf, $/;"	f	namespace:boost::io::detail	signature:(const String& buf, const typename String::value_type arg_mark, const Facet& fac, unsigned char exceptions)
wformat	/usr/include/boost/format/format_fwd.hpp	/^    typedef basic_format<wchar_t >  wformat;$/;"	t	namespace:boost
what	/usr/include/boost/format/exceptions.hpp	/^            virtual const char *what() const throw() {$/;"	f	class:boost::io::bad_format_string	access:public	signature:() const
what	/usr/include/boost/format/exceptions.hpp	/^            virtual const char *what() const throw() {$/;"	f	class:boost::io::format_error	access:public	signature:() const
what	/usr/include/boost/format/exceptions.hpp	/^            virtual const char *what() const throw() {$/;"	f	class:boost::io::out_of_range	access:public	signature:() const
what	/usr/include/boost/format/exceptions.hpp	/^            virtual const char *what() const throw() {$/;"	f	class:boost::io::too_few_args	access:public	signature:() const
what	/usr/include/boost/format/exceptions.hpp	/^            virtual const char *what() const throw() {$/;"	f	class:boost::io::too_many_args	access:public	signature:() const
widen	/usr/include/boost/format/detail/workarounds_gcc-2_95.hpp	/^         char widen(char c) { return c; }$/;"	f	class:std::basic_ios	access:public	signature:(char c)
width_	/usr/include/boost/format/internals.hpp	/^        std::streamsize width_;$/;"	m	struct:boost::io::detail::stream_format_state	access:public
wrap_isdigit	/usr/include/boost/format/parsing.hpp	/^    bool wrap_isdigit(const Facet& fac, Ch c) {$/;"	f	namespace:boost::io::detail	signature:(const Facet& fac, Ch c)
wrap_narrow	/usr/include/boost/format/parsing.hpp	/^    char wrap_narrow(const Facet& fac, Ch c, char deflt) {$/;"	f	namespace:boost::io::detail	signature:(const Facet& fac, Ch c, char deflt)
wrap_scan_notdigit	/usr/include/boost/format/parsing.hpp	/^    Iter wrap_scan_notdigit(const Facet & fac, Iter beg, Iter end) {$/;"	f	namespace:boost::io::detail	signature:(const Facet & fac, Iter beg, Iter end)
zeropad	/usr/include/boost/format/internals.hpp	/^        enum pad_values { zeropad = 1, spacepad =2, centered=4, tabulation = 8 };$/;"	e	enum:boost::io::detail::format_item::pad_values
~basic_altstringbuf	/usr/include/boost/format/alt_sstream.hpp	/^            virtual ~basic_altstringbuf() $/;"	f	class:boost::io::basic_altstringbuf	access:public	signature:()
