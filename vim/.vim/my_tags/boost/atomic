!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_ATOMIC_ADDRESS_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	62;"	d
BOOST_ATOMIC_ARM_ASM_END	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	228;"	d
BOOST_ATOMIC_ARM_ASM_END	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	72;"	d
BOOST_ATOMIC_ARM_ASM_START	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	227;"	d
BOOST_ATOMIC_ARM_ASM_START	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	71;"	d
BOOST_ATOMIC_ARM_DMB	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	82;"	d
BOOST_ATOMIC_ASM_SLOWPATH_CLEAR	/usr/include/boost/atomic/detail/gcc-ppc.hpp	175;"	d
BOOST_ATOMIC_ATOMIC_HPP	/usr/include/boost/atomic/atomic.hpp	2;"	d
BOOST_ATOMIC_BOOL_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	65;"	d
BOOST_ATOMIC_BOOL_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	243;"	d
BOOST_ATOMIC_BOOL_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-cas.hpp	149;"	d
BOOST_ATOMIC_BOOL_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	163;"	d
BOOST_ATOMIC_BOOL_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	134;"	d
BOOST_ATOMIC_BOOL_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-x86.hpp	208;"	d
BOOST_ATOMIC_BOOL_LOCK_FREE	/usr/include/boost/atomic/detail/linux-arm.hpp	181;"	d
BOOST_ATOMIC_BOOL_LOCK_FREE	/usr/include/boost/atomic/detail/windows.hpp	174;"	d
BOOST_ATOMIC_BUILD_DLL	/usr/include/boost/atomic/detail/config.hpp	27;"	d
BOOST_ATOMIC_CHAR16_T_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	31;"	d
BOOST_ATOMIC_CHAR16_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	235;"	d
BOOST_ATOMIC_CHAR16_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	151;"	d
BOOST_ATOMIC_CHAR16_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	126;"	d
BOOST_ATOMIC_CHAR16_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-x86.hpp	194;"	d
BOOST_ATOMIC_CHAR16_T_LOCK_FREE	/usr/include/boost/atomic/detail/linux-arm.hpp	173;"	d
BOOST_ATOMIC_CHAR32_T_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	35;"	d
BOOST_ATOMIC_CHAR32_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	236;"	d
BOOST_ATOMIC_CHAR32_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	152;"	d
BOOST_ATOMIC_CHAR32_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	127;"	d
BOOST_ATOMIC_CHAR32_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-x86.hpp	195;"	d
BOOST_ATOMIC_CHAR32_T_LOCK_FREE	/usr/include/boost/atomic/detail/linux-arm.hpp	174;"	d
BOOST_ATOMIC_CHAR_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	27;"	d
BOOST_ATOMIC_CHAR_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	234;"	d
BOOST_ATOMIC_CHAR_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-cas.hpp	143;"	d
BOOST_ATOMIC_CHAR_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	150;"	d
BOOST_ATOMIC_CHAR_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	125;"	d
BOOST_ATOMIC_CHAR_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-x86.hpp	193;"	d
BOOST_ATOMIC_CHAR_LOCK_FREE	/usr/include/boost/atomic/detail/linux-arm.hpp	172;"	d
BOOST_ATOMIC_CHAR_LOCK_FREE	/usr/include/boost/atomic/detail/windows.hpp	164;"	d
BOOST_ATOMIC_DECL	/usr/include/boost/atomic/detail/config.hpp	26;"	d
BOOST_ATOMIC_DECL	/usr/include/boost/atomic/detail/config.hpp	29;"	d
BOOST_ATOMIC_DECL	/usr/include/boost/atomic/detail/config.hpp	35;"	d
BOOST_ATOMIC_DECLARE_ADDITIVE_OPERATORS	/usr/include/boost/atomic/detail/base.hpp	57;"	d
BOOST_ATOMIC_DECLARE_BASE_OPERATORS	/usr/include/boost/atomic/detail/base.hpp	25;"	d
BOOST_ATOMIC_DECLARE_BIT_OPERATORS	/usr/include/boost/atomic/detail/base.hpp	94;"	d
BOOST_ATOMIC_DECLARE_INTEGRAL_OPERATORS	/usr/include/boost/atomic/detail/base.hpp	117;"	d
BOOST_ATOMIC_DECLARE_POINTER_OPERATORS	/usr/include/boost/atomic/detail/base.hpp	113;"	d
BOOST_ATOMIC_DETAIL_BASE_HPP	/usr/include/boost/atomic/detail/base.hpp	2;"	d
BOOST_ATOMIC_DETAIL_CAS32STRONG_HPP	/usr/include/boost/atomic/detail/cas32strong.hpp	2;"	d
BOOST_ATOMIC_DETAIL_CAS32WEAK_HPP	/usr/include/boost/atomic/detail/cas32weak.hpp	2;"	d
BOOST_ATOMIC_DETAIL_CAS64STRONG_HPP	/usr/include/boost/atomic/detail/cas64strong.hpp	2;"	d
BOOST_ATOMIC_DETAIL_CONFIG_HPP	/usr/include/boost/atomic/detail/config.hpp	2;"	d
BOOST_ATOMIC_DETAIL_GCC_ALPHA_HPP	/usr/include/boost/atomic/detail/gcc-alpha.hpp	2;"	d
BOOST_ATOMIC_DETAIL_GCC_ARMV6PLUS_HPP	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	2;"	d
BOOST_ATOMIC_DETAIL_GCC_PPC_HPP	/usr/include/boost/atomic/detail/gcc-ppc.hpp	2;"	d
BOOST_ATOMIC_DETAIL_GCC_SPARC_HPP	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	2;"	d
BOOST_ATOMIC_DETAIL_GCC_X86_HPP	/usr/include/boost/atomic/detail/gcc-x86.hpp	2;"	d
BOOST_ATOMIC_DETAIL_GENERIC_CAS_HPP	/usr/include/boost/atomic/detail/gcc-cas.hpp	11;"	d
BOOST_ATOMIC_DETAIL_GENERIC_CAS_HPP	/usr/include/boost/atomic/detail/generic-cas.hpp	2;"	d
BOOST_ATOMIC_DETAIL_INTERLOCKED_HPP	/usr/include/boost/atomic/detail/interlocked.hpp	2;"	d
BOOST_ATOMIC_DETAIL_LINUX_ARM_HPP	/usr/include/boost/atomic/detail/linux-arm.hpp	2;"	d
BOOST_ATOMIC_DETAIL_LOCKPOOL_HPP	/usr/include/boost/atomic/detail/lockpool.hpp	2;"	d
BOOST_ATOMIC_DETAIL_PLATFORM_HPP	/usr/include/boost/atomic/detail/platform.hpp	2;"	d
BOOST_ATOMIC_DETAIL_TYPE_CLASSIFICATION_HPP	/usr/include/boost/atomic/detail/type-classification.hpp	2;"	d
BOOST_ATOMIC_DETAIL_WINDOWS_HPP	/usr/include/boost/atomic/detail/windows.hpp	2;"	d
BOOST_ATOMIC_FLAG_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	179;"	d
BOOST_ATOMIC_FLAG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	223;"	d
BOOST_ATOMIC_FLAG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-cas.hpp	133;"	d
BOOST_ATOMIC_FLAG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	144;"	d
BOOST_ATOMIC_FLAG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	119;"	d
BOOST_ATOMIC_FLAG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-x86.hpp	187;"	d
BOOST_ATOMIC_FLAG_LOCK_FREE	/usr/include/boost/atomic/detail/linux-arm.hpp	164;"	d
BOOST_ATOMIC_FLAG_LOCK_FREE	/usr/include/boost/atomic/detail/windows.hpp	158;"	d
BOOST_ATOMIC_HAS_PRAGMA_ONCE	/usr/include/boost/atomic/detail/config.hpp	13;"	d
BOOST_ATOMIC_HAVE_CAS32	/usr/include/boost/atomic/detail/generic-cas.hpp	33;"	d
BOOST_ATOMIC_HAVE_CAS64	/usr/include/boost/atomic/detail/generic-cas.hpp	41;"	d
BOOST_ATOMIC_INTERLOCKED_AND	/usr/include/boost/atomic/detail/interlocked.hpp	46;"	d
BOOST_ATOMIC_INTERLOCKED_AND16	/usr/include/boost/atomic/detail/interlocked.hpp	82;"	d
BOOST_ATOMIC_INTERLOCKED_AND64	/usr/include/boost/atomic/detail/interlocked.hpp	100;"	d
BOOST_ATOMIC_INTERLOCKED_AND8	/usr/include/boost/atomic/detail/interlocked.hpp	68;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE	/usr/include/boost/atomic/detail/interlocked.hpp	125;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE	/usr/include/boost/atomic/detail/interlocked.hpp	165;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE	/usr/include/boost/atomic/detail/interlocked.hpp	21;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE	/usr/include/boost/atomic/detail/interlocked.hpp	36;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE16	/usr/include/boost/atomic/detail/interlocked.hpp	79;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE64	/usr/include/boost/atomic/detail/interlocked.hpp	131;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE64	/usr/include/boost/atomic/detail/interlocked.hpp	178;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE64	/usr/include/boost/atomic/detail/interlocked.hpp	97;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE8	/usr/include/boost/atomic/detail/interlocked.hpp	65;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	107;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	113;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	135;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	141;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	182;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	188;"	d
BOOST_ATOMIC_INTERLOCKED_COMPARE_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	24;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE	/usr/include/boost/atomic/detail/interlocked.hpp	126;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE	/usr/include/boost/atomic/detail/interlocked.hpp	166;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE	/usr/include/boost/atomic/detail/interlocked.hpp	22;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE	/usr/include/boost/atomic/detail/interlocked.hpp	38;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE16	/usr/include/boost/atomic/detail/interlocked.hpp	81;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE64	/usr/include/boost/atomic/detail/interlocked.hpp	132;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE64	/usr/include/boost/atomic/detail/interlocked.hpp	179;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE64	/usr/include/boost/atomic/detail/interlocked.hpp	99;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE8	/usr/include/boost/atomic/detail/interlocked.hpp	67;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD	/usr/include/boost/atomic/detail/interlocked.hpp	127;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD	/usr/include/boost/atomic/detail/interlocked.hpp	167;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD	/usr/include/boost/atomic/detail/interlocked.hpp	23;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD	/usr/include/boost/atomic/detail/interlocked.hpp	37;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD16	/usr/include/boost/atomic/detail/interlocked.hpp	80;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD64	/usr/include/boost/atomic/detail/interlocked.hpp	133;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD64	/usr/include/boost/atomic/detail/interlocked.hpp	180;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD64	/usr/include/boost/atomic/detail/interlocked.hpp	98;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD8	/usr/include/boost/atomic/detail/interlocked.hpp	66;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	109;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	115;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	137;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	143;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	184;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	190;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_ADD_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	26;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	108;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	114;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	136;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	142;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	183;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	189;"	d
BOOST_ATOMIC_INTERLOCKED_EXCHANGE_POINTER	/usr/include/boost/atomic/detail/interlocked.hpp	25;"	d
BOOST_ATOMIC_INTERLOCKED_IMPORT	/usr/include/boost/atomic/detail/interlocked.hpp	150;"	d
BOOST_ATOMIC_INTERLOCKED_IMPORT	/usr/include/boost/atomic/detail/interlocked.hpp	152;"	d
BOOST_ATOMIC_INTERLOCKED_IMPORT	/usr/include/boost/atomic/detail/interlocked.hpp	200;"	d
BOOST_ATOMIC_INTERLOCKED_OR	/usr/include/boost/atomic/detail/interlocked.hpp	47;"	d
BOOST_ATOMIC_INTERLOCKED_OR16	/usr/include/boost/atomic/detail/interlocked.hpp	83;"	d
BOOST_ATOMIC_INTERLOCKED_OR64	/usr/include/boost/atomic/detail/interlocked.hpp	101;"	d
BOOST_ATOMIC_INTERLOCKED_OR8	/usr/include/boost/atomic/detail/interlocked.hpp	69;"	d
BOOST_ATOMIC_INTERLOCKED_XOR	/usr/include/boost/atomic/detail/interlocked.hpp	48;"	d
BOOST_ATOMIC_INTERLOCKED_XOR16	/usr/include/boost/atomic/detail/interlocked.hpp	84;"	d
BOOST_ATOMIC_INTERLOCKED_XOR64	/usr/include/boost/atomic/detail/interlocked.hpp	102;"	d
BOOST_ATOMIC_INTERLOCKED_XOR8	/usr/include/boost/atomic/detail/interlocked.hpp	70;"	d
BOOST_ATOMIC_INT_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	47;"	d
BOOST_ATOMIC_INT_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	239;"	d
BOOST_ATOMIC_INT_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-cas.hpp	145;"	d
BOOST_ATOMIC_INT_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	155;"	d
BOOST_ATOMIC_INT_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	130;"	d
BOOST_ATOMIC_INT_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-x86.hpp	198;"	d
BOOST_ATOMIC_INT_LOCK_FREE	/usr/include/boost/atomic/detail/linux-arm.hpp	177;"	d
BOOST_ATOMIC_INT_LOCK_FREE	/usr/include/boost/atomic/detail/windows.hpp	166;"	d
BOOST_ATOMIC_LLONG_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	55;"	d
BOOST_ATOMIC_LLONG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	241;"	d
BOOST_ATOMIC_LLONG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-cas.hpp	147;"	d
BOOST_ATOMIC_LLONG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	159;"	d
BOOST_ATOMIC_LLONG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	132;"	d
BOOST_ATOMIC_LLONG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-x86.hpp	202;"	d
BOOST_ATOMIC_LLONG_LOCK_FREE	/usr/include/boost/atomic/detail/linux-arm.hpp	179;"	d
BOOST_ATOMIC_LLONG_LOCK_FREE	/usr/include/boost/atomic/detail/windows.hpp	169;"	d
BOOST_ATOMIC_LONG_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	51;"	d
BOOST_ATOMIC_LONG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	240;"	d
BOOST_ATOMIC_LONG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-cas.hpp	146;"	d
BOOST_ATOMIC_LONG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	156;"	d
BOOST_ATOMIC_LONG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	131;"	d
BOOST_ATOMIC_LONG_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-x86.hpp	199;"	d
BOOST_ATOMIC_LONG_LOCK_FREE	/usr/include/boost/atomic/detail/linux-arm.hpp	178;"	d
BOOST_ATOMIC_LONG_LOCK_FREE	/usr/include/boost/atomic/detail/windows.hpp	167;"	d
BOOST_ATOMIC_POINTER_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	59;"	d
BOOST_ATOMIC_POINTER_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	242;"	d
BOOST_ATOMIC_POINTER_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-cas.hpp	148;"	d
BOOST_ATOMIC_POINTER_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	157;"	d
BOOST_ATOMIC_POINTER_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	133;"	d
BOOST_ATOMIC_POINTER_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-x86.hpp	207;"	d
BOOST_ATOMIC_POINTER_LOCK_FREE	/usr/include/boost/atomic/detail/linux-arm.hpp	180;"	d
BOOST_ATOMIC_POINTER_LOCK_FREE	/usr/include/boost/atomic/detail/windows.hpp	173;"	d
BOOST_ATOMIC_READ_WRITE_BARRIER	/usr/include/boost/atomic/detail/windows.hpp	127;"	d
BOOST_ATOMIC_READ_WRITE_BARRIER	/usr/include/boost/atomic/detail/windows.hpp	60;"	d
BOOST_ATOMIC_READ_WRITE_BARRIER	/usr/include/boost/atomic/detail/windows.hpp	64;"	d
BOOST_ATOMIC_SHORT_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	43;"	d
BOOST_ATOMIC_SHORT_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	238;"	d
BOOST_ATOMIC_SHORT_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-cas.hpp	144;"	d
BOOST_ATOMIC_SHORT_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	154;"	d
BOOST_ATOMIC_SHORT_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	129;"	d
BOOST_ATOMIC_SHORT_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-x86.hpp	197;"	d
BOOST_ATOMIC_SHORT_LOCK_FREE	/usr/include/boost/atomic/detail/linux-arm.hpp	176;"	d
BOOST_ATOMIC_SHORT_LOCK_FREE	/usr/include/boost/atomic/detail/windows.hpp	165;"	d
BOOST_ATOMIC_SIGNAL_FENCE	/usr/include/boost/atomic/atomic.hpp	76;"	d
BOOST_ATOMIC_SIGNAL_FENCE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	187;"	d
BOOST_ATOMIC_SIGNAL_FENCE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	2738;"	d
BOOST_ATOMIC_SIGNAL_FENCE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	163;"	d
BOOST_ATOMIC_SIGNAL_FENCE	/usr/include/boost/atomic/detail/gcc-x86.hpp	238;"	d
BOOST_ATOMIC_SIGNAL_FENCE	/usr/include/boost/atomic/detail/linux-arm.hpp	128;"	d
BOOST_ATOMIC_SIGNAL_FENCE	/usr/include/boost/atomic/detail/windows.hpp	120;"	d
BOOST_ATOMIC_THREAD_FENCE	/usr/include/boost/atomic/atomic.hpp	69;"	d
BOOST_ATOMIC_THREAD_FENCE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	173;"	d
BOOST_ATOMIC_THREAD_FENCE	/usr/include/boost/atomic/detail/gcc-cas.hpp	23;"	d
BOOST_ATOMIC_THREAD_FENCE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	2718;"	d
BOOST_ATOMIC_THREAD_FENCE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	138;"	d
BOOST_ATOMIC_THREAD_FENCE	/usr/include/boost/atomic/detail/gcc-x86.hpp	212;"	d
BOOST_ATOMIC_THREAD_FENCE	/usr/include/boost/atomic/detail/linux-arm.hpp	114;"	d
BOOST_ATOMIC_THREAD_FENCE	/usr/include/boost/atomic/detail/windows.hpp	111;"	d
BOOST_ATOMIC_WCHAR_T_LOCK_FREE	/usr/include/boost/atomic/atomic.hpp	39;"	d
BOOST_ATOMIC_WCHAR_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	237;"	d
BOOST_ATOMIC_WCHAR_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-ppc.hpp	153;"	d
BOOST_ATOMIC_WCHAR_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	128;"	d
BOOST_ATOMIC_WCHAR_T_LOCK_FREE	/usr/include/boost/atomic/detail/gcc-x86.hpp	196;"	d
BOOST_ATOMIC_WCHAR_T_LOCK_FREE	/usr/include/boost/atomic/detail/linux-arm.hpp	175;"	d
BOOST_ATOMIC_X86_FENCE_INSTR	/usr/include/boost/atomic/detail/gcc-x86.hpp	24;"	d
BOOST_ATOMIC_X86_PAUSE	/usr/include/boost/atomic/detail/gcc-x86.hpp	29;"	d
BOOST_ATOMIC_X86_PAUSE	/usr/include/boost/atomic/detail/windows.hpp	34;"	d
BOOST_DYN_LINK	/usr/include/boost/atomic/detail/config.hpp	47;"	d
BOOST_LIB_NAME	/usr/include/boost/atomic/detail/config.hpp	43;"	d
InterlockedCompareExchange	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT long __stdcall InterlockedCompareExchange(long volatile*, long, long);$/;"	p	signature:(long volatile*, long, long)
InterlockedCompareExchange64	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT __int64 __stdcall InterlockedCompareExchange64(__int64 volatile*, __int64, __int64);$/;"	p	signature:(__int64 volatile*, __int64, __int64)
InterlockedCompareExchangePointer	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT void* __stdcall InterlockedCompareExchangePointer(void* volatile *, void*, void*);$/;"	p	signature:(void* volatile *, void*, void*)
InterlockedExchange	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT long __stdcall InterlockedExchange(long volatile*, long);$/;"	p	signature:(long volatile*, long)
InterlockedExchange64	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT __int64 __stdcall InterlockedExchange64(__int64 volatile*, __int64);$/;"	p	signature:(__int64 volatile*, __int64)
InterlockedExchangeAdd	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT long __stdcall InterlockedExchangeAdd(long volatile*, long);$/;"	p	signature:(long volatile*, long)
InterlockedExchangeAdd64	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT __int64 __stdcall InterlockedExchangeAdd64(__int64 volatile*, __int64);$/;"	p	signature:(__int64 volatile*, __int64)
InterlockedExchangePointer	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT void* __stdcall InterlockedExchangePointer(void* volatile *, void*);$/;"	p	signature:(void* volatile *, void*)
_	/usr/include/boost/atomic/detail/type-classification.hpp	/^    enum _$/;"	g	struct:boost::atomics::detail::storage_size_of	access:public
_ReadWriteBarrier	/usr/include/boost/atomic/detail/windows.hpp	/^extern "C" void _ReadWriteBarrier();$/;"	p	namespace:boost::atomics::detail	signature:()
_mm_mfence	/usr/include/boost/atomic/detail/windows.hpp	/^extern "C" void _mm_mfence(void);$/;"	p	namespace:boost::atomics::detail	signature:(void)
_mm_pause	/usr/include/boost/atomic/detail/windows.hpp	/^extern "C" void _mm_pause(void);$/;"	p	namespace:boost::atomics::detail	signature:(void)
arm_barrier	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^arm_barrier(void)$/;"	f	namespace:boost::atomics::detail	signature:(void)
arm_barrier	/usr/include/boost/atomic/detail/linux-arm.hpp	/^arm_barrier(void)$/;"	f	namespace:boost::atomics::detail	signature:(void)
atomic	/usr/include/boost/atomic/atomic.hpp	/^    atomic(const atomic &) \/* =delete *\/ ;$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
atomic	/usr/include/boost/atomic/atomic.hpp	/^    atomic(void) : super() {}$/;"	f	class:boost::atomic	access:public	signature:(void)
atomic	/usr/include/boost/atomic/atomic.hpp	/^    explicit atomic(const value_type & v) : super(v) {}$/;"	f	class:boost::atomic	access:public	signature:(const value_type & v)
atomic	/usr/include/boost/atomic/atomic.hpp	/^class atomic :$/;"	c	namespace:boost	inherits:atomics::detail::base_atomic
atomic_address	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<void*> atomic_address;$/;"	t	namespace:boost
atomic_alpha_32	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    atomic_alpha_32() {}$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:()
atomic_alpha_32	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    explicit atomic_alpha_32(T v) : i(v) {}$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:(T v)
atomic_alpha_32	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class atomic_alpha_32 {$/;"	c	namespace:boost::atomics::detail
atomic_alpha_64	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    atomic_alpha_64() {}$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:()
atomic_alpha_64	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    explicit atomic_alpha_64(T v) : i(v) {}$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:(T v)
atomic_alpha_64	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class atomic_alpha_64 {$/;"	c	namespace:boost::atomics::detail
atomic_bool	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<bool> atomic_bool;$/;"	t	namespace:boost
atomic_char	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<char> atomic_char;$/;"	t	namespace:boost
atomic_char16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<char16_t> atomic_char16_t;$/;"	t	namespace:boost
atomic_char32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<char32_t> atomic_char32_t;$/;"	t	namespace:boost
atomic_flag	/usr/include/boost/atomic/atomic.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
atomic_flag	/usr/include/boost/atomic/atomic.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
atomic_flag	/usr/include/boost/atomic/atomic.hpp	/^class atomic_flag$/;"	c	namespace:boost
atomic_flag	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
atomic_flag	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
atomic_flag	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^class atomic_flag {$/;"	c	namespace:boost
atomic_flag	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::atomic_flag	access:private	signature:(const atomic_flag &)
atomic_flag	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomics::detail::atomic_flag	access:public	signature:(void)
atomic_flag	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^class atomic_flag {$/;"	c	namespace:boost::atomics::detail
atomic_flag	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
atomic_flag	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
atomic_flag	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class atomic_flag {$/;"	c	namespace:boost
atomic_flag	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
atomic_flag	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
atomic_flag	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class atomic_flag {$/;"	c	namespace:boost
atomic_flag	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
atomic_flag	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    atomic_flag(void) : v_(0) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
atomic_flag	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class atomic_flag$/;"	c	namespace:boost
atomic_flag	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
atomic_flag	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
atomic_flag	/usr/include/boost/atomic/detail/linux-arm.hpp	/^class atomic_flag {$/;"	c	namespace:boost
atomic_flag	/usr/include/boost/atomic/detail/windows.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
atomic_flag	/usr/include/boost/atomic/detail/windows.hpp	/^    atomic_flag(void) : v_(0) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
atomic_flag	/usr/include/boost/atomic/detail/windows.hpp	/^class atomic_flag$/;"	c	namespace:boost
atomic_generic_cas32	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    atomic_generic_cas32() {}$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:()
atomic_generic_cas32	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    explicit atomic_generic_cas32(T v) : i((int32_t)v) {}$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:(T v)
atomic_generic_cas32	/usr/include/boost/atomic/detail/generic-cas.hpp	/^class atomic_generic_cas32 {$/;"	c	namespace:boost::atomics::detail
atomic_int	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int> atomic_int;$/;"	t	namespace:boost
atomic_int16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int16_t> atomic_int16_t;$/;"	t	namespace:boost
atomic_int32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int32_t> atomic_int32_t;$/;"	t	namespace:boost
atomic_int64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int64_t> atomic_int64_t;$/;"	t	namespace:boost
atomic_int8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int8_t> atomic_int8_t;$/;"	t	namespace:boost
atomic_int_fast16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_fast16_t> atomic_int_fast16_t;$/;"	t	namespace:boost
atomic_int_fast32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_fast32_t> atomic_int_fast32_t;$/;"	t	namespace:boost
atomic_int_fast64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_fast64_t> atomic_int_fast64_t;$/;"	t	namespace:boost
atomic_int_fast8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_fast8_t> atomic_int_fast8_t;$/;"	t	namespace:boost
atomic_int_least16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_least16_t> atomic_int_least16_t;$/;"	t	namespace:boost
atomic_int_least32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_least32_t> atomic_int_least32_t;$/;"	t	namespace:boost
atomic_int_least64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_least64_t> atomic_int_least64_t;$/;"	t	namespace:boost
atomic_int_least8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_least8_t> atomic_int_least8_t;$/;"	t	namespace:boost
atomic_intmax_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<intmax_t> atomic_intmax_t;$/;"	t	namespace:boost
atomic_intptr_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic< __INTPTR_TYPE__ > atomic_intptr_t;$/;"	t	namespace:boost
atomic_intptr_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<intptr_t> atomic_intptr_t;$/;"	t	namespace:boost
atomic_llong	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<boost::long_long_type> atomic_llong;$/;"	t	namespace:boost
atomic_long	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<long> atomic_long;$/;"	t	namespace:boost
atomic_ptrdiff_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<std::ptrdiff_t> atomic_ptrdiff_t;$/;"	t	namespace:boost
atomic_schar	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<signed char> atomic_schar;$/;"	t	namespace:boost
atomic_short	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<short> atomic_short;$/;"	t	namespace:boost
atomic_signal_fence	/usr/include/boost/atomic/atomic.hpp	/^inline void atomic_signal_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
atomic_signal_fence	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^atomic_signal_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
atomic_signal_fence	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^atomic_signal_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
atomic_signal_fence	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^atomic_signal_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
atomic_signal_fence	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^atomic_signal_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
atomic_signal_fence	/usr/include/boost/atomic/detail/linux-arm.hpp	/^atomic_signal_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
atomic_signal_fence	/usr/include/boost/atomic/detail/windows.hpp	/^atomic_signal_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
atomic_size_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<std::size_t> atomic_size_t;$/;"	t	namespace:boost
atomic_thread_fence	/usr/include/boost/atomic/atomic.hpp	/^inline void atomic_thread_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
atomic_thread_fence	/usr/include/boost/atomic/detail/linux-arm.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
atomic_thread_fence	/usr/include/boost/atomic/detail/windows.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
atomic_uchar	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<unsigned char> atomic_uchar;$/;"	t	namespace:boost
atomic_uint	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<unsigned int> atomic_uint;$/;"	t	namespace:boost
atomic_uint16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint16_t> atomic_uint16_t;$/;"	t	namespace:boost
atomic_uint32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint32_t> atomic_uint32_t;$/;"	t	namespace:boost
atomic_uint64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint64_t> atomic_uint64_t;$/;"	t	namespace:boost
atomic_uint8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint8_t> atomic_uint8_t;$/;"	t	namespace:boost
atomic_uint_fast16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_fast16_t> atomic_uint_fast16_t;$/;"	t	namespace:boost
atomic_uint_fast32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_fast32_t> atomic_uint_fast32_t;$/;"	t	namespace:boost
atomic_uint_fast64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_fast64_t> atomic_uint_fast64_t;$/;"	t	namespace:boost
atomic_uint_fast8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_fast8_t> atomic_uint_fast8_t;$/;"	t	namespace:boost
atomic_uint_least16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_least16_t> atomic_uint_least16_t;$/;"	t	namespace:boost
atomic_uint_least32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_least32_t> atomic_uint_least32_t;$/;"	t	namespace:boost
atomic_uint_least64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_least64_t> atomic_uint_least64_t;$/;"	t	namespace:boost
atomic_uint_least8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_least8_t> atomic_uint_least8_t;$/;"	t	namespace:boost
atomic_uintmax_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uintmax_t> atomic_uintmax_t;$/;"	t	namespace:boost
atomic_uintptr_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic< __UINTPTR_TYPE__ > atomic_uintptr_t;$/;"	t	namespace:boost
atomic_uintptr_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uintptr_t> atomic_uintptr_t;$/;"	t	namespace:boost
atomic_ullong	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<boost::ulong_long_type> atomic_ullong;$/;"	t	namespace:boost
atomic_ulong	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<unsigned long> atomic_ulong;$/;"	t	namespace:boost
atomic_ushort	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<unsigned short> atomic_ushort;$/;"	t	namespace:boost
atomic_wchar_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<wchar_t> atomic_wchar_t;$/;"	t	namespace:boost
atomics	/usr/include/boost/atomic/detail/base.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/cas32strong.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/cas32weak.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/cas64strong.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    namespace boost { namespace atomics { namespace detail {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/generic-cas.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/interlocked.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/linux-arm.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/lockpool.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/type-classification.hpp	/^namespace atomics {$/;"	n	namespace:boost
atomics	/usr/include/boost/atomic/detail/windows.hpp	/^namespace atomics {$/;"	n	namespace:boost
base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^    base_atomic(const base_atomic  &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^    explicit base_atomic(const value_type & v)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(const value_type & v)
base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^class base_atomic {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^class base_atomic<T *, void *, Size, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^class base_atomic<T, int, Size, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^class base_atomic<void *, void *, Size, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    explicit base_atomic(value_type const& v)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, int, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, int, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, int, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, void, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, void, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, void, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<void *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, int, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, int, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, int, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, void, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, void, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, void, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<void *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^class base_atomic<T *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^class base_atomic<T, int, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^class base_atomic<T, void, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^class base_atomic<void *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    explicit base_atomic(value_type const& v)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 1, false> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 1, true> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 2, false> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 2, true> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, void, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, void, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, void, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, void, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<void *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<void *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, int, 1, false> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, int, 1, true> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, int, 2, false> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, int, 2, true> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, int, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, void, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, void, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, void, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<void *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    explicit base_atomic(value_type const& v)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, int, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, int, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, int, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, int, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, void, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, void, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, void, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, void, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<void *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<void *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T*, void*, sizeof_pointer, Sign>$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, int, 1, Sign>$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, int, 2, Sign>$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, int, 4, Sign>$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, int, 8, Sign>$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, void, 1, Sign>$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, void, 2, Sign>$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, void, 4, Sign>$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, void, 8, Sign>$/;"	c	namespace:boost::atomics::detail
base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<void*, void*, sizeof_pointer, Sign>$/;"	c	namespace:boost::atomics::detail
boost	/usr/include/boost/atomic/atomic.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/cas32strong.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/cas32weak.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/cas64strong.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    namespace boost { namespace atomics { namespace detail {$/;"	n
boost	/usr/include/boost/atomic/detail/generic-cas.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/interlocked.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/linux-arm.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/lockpool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/type-classification.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/atomic/detail/windows.hpp	/^namespace boost {$/;"	n
boost::atomic	/usr/include/boost/atomic/atomic.hpp	/^class atomic :$/;"	c	namespace:boost	inherits:atomics::detail::base_atomic
boost::atomic::atomic	/usr/include/boost/atomic/atomic.hpp	/^    atomic(const atomic &) \/* =delete *\/ ;$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
boost::atomic::atomic	/usr/include/boost/atomic/atomic.hpp	/^    atomic(void) : super() {}$/;"	f	class:boost::atomic	access:public	signature:(void)
boost::atomic::atomic	/usr/include/boost/atomic/atomic.hpp	/^    explicit atomic(const value_type & v) : super(v) {}$/;"	f	class:boost::atomic	access:public	signature:(const value_type & v)
boost::atomic::operator =	/usr/include/boost/atomic/atomic.hpp	/^    atomic & operator=(const atomic &) \/* =delete *\/ ;$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
boost::atomic::operator =	/usr/include/boost/atomic/atomic.hpp	/^    atomic & operator=(value_type v) volatile$/;"	f	class:boost::atomic	access:public	signature:(value_type v) volatile
boost::atomic::super	/usr/include/boost/atomic/atomic.hpp	/^    typedef atomics::detail::base_atomic<T, typename atomics::detail::classify<T>::type, atomics::detail::storage_size_of<T>::value, boost::is_signed<T>::value > super;$/;"	t	class:boost::atomic	access:private
boost::atomic::value_type	/usr/include/boost/atomic/atomic.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomic	access:private
boost::atomic_address	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<void*> atomic_address;$/;"	t	namespace:boost
boost::atomic_bool	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<bool> atomic_bool;$/;"	t	namespace:boost
boost::atomic_char	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<char> atomic_char;$/;"	t	namespace:boost
boost::atomic_char16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<char16_t> atomic_char16_t;$/;"	t	namespace:boost
boost::atomic_char32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<char32_t> atomic_char32_t;$/;"	t	namespace:boost
boost::atomic_flag	/usr/include/boost/atomic/atomic.hpp	/^class atomic_flag$/;"	c	namespace:boost
boost::atomic_flag	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^class atomic_flag {$/;"	c	namespace:boost
boost::atomic_flag	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class atomic_flag {$/;"	c	namespace:boost
boost::atomic_flag	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class atomic_flag {$/;"	c	namespace:boost
boost::atomic_flag	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class atomic_flag$/;"	c	namespace:boost
boost::atomic_flag	/usr/include/boost/atomic/detail/linux-arm.hpp	/^class atomic_flag {$/;"	c	namespace:boost
boost::atomic_flag	/usr/include/boost/atomic/detail/windows.hpp	/^class atomic_flag$/;"	c	namespace:boost
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/atomic.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/atomic.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    atomic_flag(void) : v_(0) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/windows.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/windows.hpp	/^    atomic_flag(void) : v_(0) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(void)
boost::atomic_flag::clear	/usr/include/boost/atomic/atomic.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::clear	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::clear	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::clear	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::clear	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::clear	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::clear	/usr/include/boost/atomic/detail/windows.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::operator =	/usr/include/boost/atomic/atomic.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::operator =	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::operator =	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::operator =	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::operator =	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::operator =	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::operator =	/usr/include/boost/atomic/detail/windows.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomic_flag::test_and_set	/usr/include/boost/atomic/atomic.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst)$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst)
boost::atomic_flag::test_and_set	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::test_and_set	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::test_and_set	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::test_and_set	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::test_and_set	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::test_and_set	/usr/include/boost/atomic/detail/windows.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomic_flag::v_	/usr/include/boost/atomic/atomic.hpp	/^    atomic<bool> v_;$/;"	m	class:boost::atomic_flag	access:private
boost::atomic_flag::v_	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
boost::atomic_flag::v_	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
boost::atomic_flag::v_	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
boost::atomic_flag::v_	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
boost::atomic_flag::v_	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
boost::atomic_flag::v_	/usr/include/boost/atomic/detail/windows.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
boost::atomic_int	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int> atomic_int;$/;"	t	namespace:boost
boost::atomic_int16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int16_t> atomic_int16_t;$/;"	t	namespace:boost
boost::atomic_int32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int32_t> atomic_int32_t;$/;"	t	namespace:boost
boost::atomic_int64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int64_t> atomic_int64_t;$/;"	t	namespace:boost
boost::atomic_int8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int8_t> atomic_int8_t;$/;"	t	namespace:boost
boost::atomic_int_fast16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_fast16_t> atomic_int_fast16_t;$/;"	t	namespace:boost
boost::atomic_int_fast32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_fast32_t> atomic_int_fast32_t;$/;"	t	namespace:boost
boost::atomic_int_fast64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_fast64_t> atomic_int_fast64_t;$/;"	t	namespace:boost
boost::atomic_int_fast8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_fast8_t> atomic_int_fast8_t;$/;"	t	namespace:boost
boost::atomic_int_least16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_least16_t> atomic_int_least16_t;$/;"	t	namespace:boost
boost::atomic_int_least32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_least32_t> atomic_int_least32_t;$/;"	t	namespace:boost
boost::atomic_int_least64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_least64_t> atomic_int_least64_t;$/;"	t	namespace:boost
boost::atomic_int_least8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<int_least8_t> atomic_int_least8_t;$/;"	t	namespace:boost
boost::atomic_intmax_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<intmax_t> atomic_intmax_t;$/;"	t	namespace:boost
boost::atomic_intptr_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic< __INTPTR_TYPE__ > atomic_intptr_t;$/;"	t	namespace:boost
boost::atomic_intptr_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<intptr_t> atomic_intptr_t;$/;"	t	namespace:boost
boost::atomic_llong	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<boost::long_long_type> atomic_llong;$/;"	t	namespace:boost
boost::atomic_long	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<long> atomic_long;$/;"	t	namespace:boost
boost::atomic_ptrdiff_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<std::ptrdiff_t> atomic_ptrdiff_t;$/;"	t	namespace:boost
boost::atomic_schar	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<signed char> atomic_schar;$/;"	t	namespace:boost
boost::atomic_short	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<short> atomic_short;$/;"	t	namespace:boost
boost::atomic_signal_fence	/usr/include/boost/atomic/atomic.hpp	/^inline void atomic_signal_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
boost::atomic_signal_fence	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^atomic_signal_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
boost::atomic_signal_fence	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^atomic_signal_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
boost::atomic_signal_fence	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^atomic_signal_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
boost::atomic_signal_fence	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^atomic_signal_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
boost::atomic_signal_fence	/usr/include/boost/atomic/detail/linux-arm.hpp	/^atomic_signal_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
boost::atomic_signal_fence	/usr/include/boost/atomic/detail/windows.hpp	/^atomic_signal_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
boost::atomic_size_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<std::size_t> atomic_size_t;$/;"	t	namespace:boost
boost::atomic_thread_fence	/usr/include/boost/atomic/atomic.hpp	/^inline void atomic_thread_fence(memory_order)$/;"	f	namespace:boost	signature:(memory_order)
boost::atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
boost::atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
boost::atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
boost::atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
boost::atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
boost::atomic_thread_fence	/usr/include/boost/atomic/detail/linux-arm.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
boost::atomic_thread_fence	/usr/include/boost/atomic/detail/windows.hpp	/^atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
boost::atomic_uchar	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<unsigned char> atomic_uchar;$/;"	t	namespace:boost
boost::atomic_uint	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<unsigned int> atomic_uint;$/;"	t	namespace:boost
boost::atomic_uint16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint16_t> atomic_uint16_t;$/;"	t	namespace:boost
boost::atomic_uint32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint32_t> atomic_uint32_t;$/;"	t	namespace:boost
boost::atomic_uint64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint64_t> atomic_uint64_t;$/;"	t	namespace:boost
boost::atomic_uint8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint8_t> atomic_uint8_t;$/;"	t	namespace:boost
boost::atomic_uint_fast16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_fast16_t> atomic_uint_fast16_t;$/;"	t	namespace:boost
boost::atomic_uint_fast32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_fast32_t> atomic_uint_fast32_t;$/;"	t	namespace:boost
boost::atomic_uint_fast64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_fast64_t> atomic_uint_fast64_t;$/;"	t	namespace:boost
boost::atomic_uint_fast8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_fast8_t> atomic_uint_fast8_t;$/;"	t	namespace:boost
boost::atomic_uint_least16_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_least16_t> atomic_uint_least16_t;$/;"	t	namespace:boost
boost::atomic_uint_least32_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_least32_t> atomic_uint_least32_t;$/;"	t	namespace:boost
boost::atomic_uint_least64_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_least64_t> atomic_uint_least64_t;$/;"	t	namespace:boost
boost::atomic_uint_least8_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uint_least8_t> atomic_uint_least8_t;$/;"	t	namespace:boost
boost::atomic_uintmax_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uintmax_t> atomic_uintmax_t;$/;"	t	namespace:boost
boost::atomic_uintptr_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic< __UINTPTR_TYPE__ > atomic_uintptr_t;$/;"	t	namespace:boost
boost::atomic_uintptr_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<uintptr_t> atomic_uintptr_t;$/;"	t	namespace:boost
boost::atomic_ullong	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<boost::ulong_long_type> atomic_ullong;$/;"	t	namespace:boost
boost::atomic_ulong	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<unsigned long> atomic_ulong;$/;"	t	namespace:boost
boost::atomic_ushort	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<unsigned short> atomic_ushort;$/;"	t	namespace:boost
boost::atomic_wchar_t	/usr/include/boost/atomic/atomic.hpp	/^typedef atomic<wchar_t> atomic_wchar_t;$/;"	t	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/base.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/cas32strong.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/cas32weak.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/cas64strong.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    namespace boost { namespace atomics { namespace detail {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/generic-cas.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/interlocked.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/linux-arm.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/lockpool.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/type-classification.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics	/usr/include/boost/atomic/detail/windows.hpp	/^namespace atomics {$/;"	n	namespace:boost
boost::atomics::detail	/usr/include/boost/atomic/detail/base.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/cas32strong.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/cas32weak.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/cas64strong.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    namespace boost { namespace atomics { namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/generic-cas.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/interlocked.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/linux-arm.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/lockpool.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/type-classification.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail	/usr/include/boost/atomic/detail/windows.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
boost::atomics::detail::InterlockedCompareExchange	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT long __stdcall InterlockedCompareExchange(long volatile*, long, long);$/;"	p	signature:(long volatile*, long, long)
boost::atomics::detail::InterlockedCompareExchange64	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT __int64 __stdcall InterlockedCompareExchange64(__int64 volatile*, __int64, __int64);$/;"	p	signature:(__int64 volatile*, __int64, __int64)
boost::atomics::detail::InterlockedCompareExchangePointer	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT void* __stdcall InterlockedCompareExchangePointer(void* volatile *, void*, void*);$/;"	p	signature:(void* volatile *, void*, void*)
boost::atomics::detail::InterlockedExchange	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT long __stdcall InterlockedExchange(long volatile*, long);$/;"	p	signature:(long volatile*, long)
boost::atomics::detail::InterlockedExchange64	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT __int64 __stdcall InterlockedExchange64(__int64 volatile*, __int64);$/;"	p	signature:(__int64 volatile*, __int64)
boost::atomics::detail::InterlockedExchangeAdd	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT long __stdcall InterlockedExchangeAdd(long volatile*, long);$/;"	p	signature:(long volatile*, long)
boost::atomics::detail::InterlockedExchangeAdd64	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT __int64 __stdcall InterlockedExchangeAdd64(__int64 volatile*, __int64);$/;"	p	signature:(__int64 volatile*, __int64)
boost::atomics::detail::InterlockedExchangePointer	/usr/include/boost/atomic/detail/interlocked.hpp	/^BOOST_ATOMIC_INTERLOCKED_IMPORT void* __stdcall InterlockedExchangePointer(void* volatile *, void*);$/;"	p	signature:(void* volatile *, void*)
boost::atomics::detail::_ReadWriteBarrier	/usr/include/boost/atomic/detail/windows.hpp	/^extern "C" void _ReadWriteBarrier();$/;"	p	namespace:boost::atomics::detail	signature:()
boost::atomics::detail::_mm_mfence	/usr/include/boost/atomic/detail/windows.hpp	/^extern "C" void _mm_mfence(void);$/;"	p	namespace:boost::atomics::detail	signature:(void)
boost::atomics::detail::_mm_pause	/usr/include/boost/atomic/detail/windows.hpp	/^extern "C" void _mm_pause(void);$/;"	p	namespace:boost::atomics::detail	signature:(void)
boost::atomics::detail::arm_barrier	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^arm_barrier(void)$/;"	f	namespace:boost::atomics::detail	signature:(void)
boost::atomics::detail::arm_barrier	/usr/include/boost/atomic/detail/linux-arm.hpp	/^arm_barrier(void)$/;"	f	namespace:boost::atomics::detail	signature:(void)
boost::atomics::detail::atomic_alpha_32	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class atomic_alpha_32 {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::atomic_alpha_32::atomic_alpha_32	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    atomic_alpha_32() {}$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:()
boost::atomics::detail::atomic_alpha_32::atomic_alpha_32	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    explicit atomic_alpha_32(T v) : i(v) {}$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:(T v)
boost::atomics::detail::atomic_alpha_32::compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    bool compare_exchange_weak($/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::atomic_alpha_32::fetch_add_var	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:protected	signature:(T c, memory_order order) volatile
boost::atomics::detail::atomic_alpha_32::fetch_dec	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:protected	signature:(memory_order order) volatile
boost::atomics::detail::atomic_alpha_32::fetch_inc	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:protected	signature:(memory_order order) volatile
boost::atomics::detail::atomic_alpha_32::i	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    T i;$/;"	m	class:boost::atomics::detail::atomic_alpha_32	access:private
boost::atomics::detail::atomic_alpha_32::integral_type	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    typedef T integral_type;$/;"	t	class:boost::atomics::detail::atomic_alpha_32	access:public
boost::atomics::detail::atomic_alpha_32::is_lock_free	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:(void) const volatile
boost::atomics::detail::atomic_alpha_32::load	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::atomics::detail::atomic_alpha_32::store	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::atomics::detail::atomic_alpha_64	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class atomic_alpha_64 {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::atomic_alpha_64::atomic_alpha_64	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    atomic_alpha_64() {}$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:()
boost::atomics::detail::atomic_alpha_64::atomic_alpha_64	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    explicit atomic_alpha_64(T v) : i(v) {}$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:(T v)
boost::atomics::detail::atomic_alpha_64::compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    bool compare_exchange_weak($/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::atomic_alpha_64::fetch_add_var	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:protected	signature:(T c, memory_order order) volatile
boost::atomics::detail::atomic_alpha_64::fetch_dec	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:protected	signature:(memory_order order) volatile
boost::atomics::detail::atomic_alpha_64::fetch_inc	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:protected	signature:(memory_order order) volatile
boost::atomics::detail::atomic_alpha_64::i	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    T i;$/;"	m	class:boost::atomics::detail::atomic_alpha_64	access:private
boost::atomics::detail::atomic_alpha_64::integral_type	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    typedef T integral_type;$/;"	t	class:boost::atomics::detail::atomic_alpha_64	access:public
boost::atomics::detail::atomic_alpha_64::is_lock_free	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:(void) const volatile
boost::atomics::detail::atomic_alpha_64::load	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::atomics::detail::atomic_alpha_64::store	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::atomics::detail::atomic_flag	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^class atomic_flag {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    atomic_flag(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomics::detail::atomic_flag::atomic_flag	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    atomic_flag(void) : v_(false) {}$/;"	f	class:boost::atomics::detail::atomic_flag	access:public	signature:(void)
boost::atomics::detail::atomic_flag::clear	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::atomic_flag::operator =	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::atomic_flag	access:private	signature:(const atomic_flag &)
boost::atomics::detail::atomic_flag::test_and_set	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::atomic_flag::v_	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomics::detail::atomic_flag	access:private
boost::atomics::detail::atomic_generic_cas32	/usr/include/boost/atomic/detail/generic-cas.hpp	/^class atomic_generic_cas32 {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::atomic_generic_cas32::atomic_generic_cas32	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    atomic_generic_cas32() {}$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:()
boost::atomics::detail::atomic_generic_cas32::atomic_generic_cas32	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    explicit atomic_generic_cas32(T v) : i((int32_t)v) {}$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:(T v)
boost::atomics::detail::atomic_generic_cas32::compare_exchange_strong	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    bool compare_exchange_strong($/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::atomic_generic_cas32::compare_exchange_weak	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    bool compare_exchange_weak($/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::atomic_generic_cas32::exchange	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
boost::atomics::detail::atomic_generic_cas32::i	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    mutable int32_t i;$/;"	m	class:boost::atomics::detail::atomic_generic_cas32	access:private
boost::atomics::detail::atomic_generic_cas32::integral_type	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    typedef T integral_type;$/;"	t	class:boost::atomics::detail::atomic_generic_cas32	access:public
boost::atomics::detail::atomic_generic_cas32::is_lock_free	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:(void) const volatile
boost::atomics::detail::atomic_generic_cas32::load	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::atomics::detail::atomic_generic_cas32::store	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::atomics::detail::atomic_generic_cas32::this_type	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    typedef atomic_generic_cas32 this_type;$/;"	t	class:boost::atomics::detail::atomic_generic_cas32	access:private
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^class base_atomic {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^class base_atomic<T *, void *, Size, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^class base_atomic<T, int, Size, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^class base_atomic<void *, void *, Size, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, int, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, int, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, int, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, void, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, void, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<T, void, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^class base_atomic<void *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, int, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, int, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, int, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, void, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, void, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<T, void, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^class base_atomic<void *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^class base_atomic<T *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^class base_atomic<T, int, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^class base_atomic<T, void, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^class base_atomic<void *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 1, false> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 1, true> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 2, false> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 2, true> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, int, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, void, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, void, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, void, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<T, void, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<void *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^class base_atomic<void *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, int, 1, false> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, int, 1, true> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, int, 2, false> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, int, 2, true> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, int, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, void, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, void, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<T, void, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^class base_atomic<void *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, int, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, int, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, int, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, int, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, void, 1, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, void, 2, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, void, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<T, void, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<void *, void *, 4, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^class base_atomic<void *, void *, 8, Sign> {$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T*, void*, sizeof_pointer, Sign>$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, int, 1, Sign>$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, int, 2, Sign>$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, int, 4, Sign>$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, int, 8, Sign>$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, void, 1, Sign>$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, void, 2, Sign>$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, void, 4, Sign>$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<T, void, 8, Sign>$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^class base_atomic<void*, void*, sizeof_pointer, Sign>$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^    base_atomic(const base_atomic  &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^    explicit base_atomic(const value_type & v)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(const value_type & v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/base.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    explicit base_atomic(value_type const& v)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    explicit base_atomic(value_type const& v)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    explicit base_atomic(value_type const& v)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^    base_atomic(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^    base_atomic(void) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^    explicit base_atomic(value_type const& v) : v_(0)$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v)
boost::atomics::detail::base_atomic::base_atomic	/usr/include/boost/atomic/detail/windows.hpp	/^    explicit base_atomic(value_type v) : v_(v) {}$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v)
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/base.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order , memory_order ) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/base.hpp	/^    compare_exchange_strong(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order , memory_order ) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    bool compare_exchange_strong(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/windows.hpp	/^    bool compare_exchange_strong(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/windows.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_strong	/usr/include/boost/atomic/detail/windows.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/base.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/base.hpp	/^    compare_exchange_weak(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    bool compare_exchange_weak(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    bool compare_exchange_weak(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/windows.hpp	/^    bool compare_exchange_weak(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/windows.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::compare_exchange_weak	/usr/include/boost/atomic/detail/windows.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::difference_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/base.hpp	/^    exchange(value_type const& v, memory_order \/*order*\/=memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order =memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/base.hpp	/^    exchange(value_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    value_type exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/windows.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/windows.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::exchange	/usr/include/boost/atomic/detail/windows.hpp	/^    value_type exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/base.hpp	/^    fetch_add(difference_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/base.hpp	/^    value_type fetch_add(difference_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_add	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_and	/usr/include/boost/atomic/detail/base.hpp	/^    fetch_and(value_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_and	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_and	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_and	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_and	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_and	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_and	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_and	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_or	/usr/include/boost/atomic/detail/base.hpp	/^    fetch_or(value_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_or	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_or	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_or	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_or	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_or	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_or	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_or	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/base.hpp	/^    fetch_sub(difference_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/base.hpp	/^    value_type fetch_sub(difference_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_sub	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_xor	/usr/include/boost/atomic/detail/base.hpp	/^    fetch_xor(value_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_xor	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_xor	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_xor	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_xor	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_xor	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_xor	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::fetch_xor	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::guard_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef lockpool::scoped_lock guard_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::is_lock_free	/usr/include/boost/atomic/detail/base.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
boost::atomics::detail::base_atomic::is_lock_free	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
boost::atomics::detail::base_atomic::is_lock_free	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
boost::atomics::detail::base_atomic::is_lock_free	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
boost::atomics::detail::base_atomic::is_lock_free	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
boost::atomics::detail::base_atomic::is_lock_free	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
boost::atomics::detail::base_atomic::is_lock_free	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
boost::atomics::detail::base_atomic::is_lock_free	/usr/include/boost/atomic/detail/windows.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/base.hpp	/^    load(memory_order \/*order*\/ = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order = memory_order_seq_cst) const volatile
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/base.hpp	/^    load(memory_order \/*order*\/ = memory_order_seq_cst) volatile const$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order = memory_order_seq_cst) volatile const
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    value_type load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    value_type load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/windows.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
boost::atomics::detail::base_atomic::load	/usr/include/boost/atomic/detail/windows.hpp	/^    value_type load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
boost::atomics::detail::base_atomic::operator =	/usr/include/boost/atomic/detail/base.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::operator =	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::operator =	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::operator =	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::operator =	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::operator =	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::operator =	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::operator =	/usr/include/boost/atomic/detail/windows.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef uint64_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef int32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef uint64_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef int32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef uint16_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef uint64_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef uint8_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef uint16_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef uint64_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef uint8_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::storage_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef value_type storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/base.hpp	/^    store(value_type const& v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/base.hpp	/^    store(value_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    store(value_type const& value, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& value, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/windows.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::store	/usr/include/boost/atomic/detail/windows.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
boost::atomics::detail::base_atomic::this_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::this_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::this_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::this_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::this_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::this_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::this_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::this_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/base.hpp	/^    char v_[sizeof(value_type)];$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/base.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/windows.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::v_	/usr/include/boost/atomic/detail/windows.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef T* value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::base_atomic::value_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef void* value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
boost::atomics::detail::calculate_failure_order	/usr/include/boost/atomic/detail/base.hpp	/^calculate_failure_order(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::classify	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct classify$/;"	s	namespace:boost::atomics::detail
boost::atomics::detail::classify	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct classify<T*, false> {typedef void* type;};$/;"	s	namespace:boost::atomics::detail
boost::atomics::detail::classify	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct classify<T, true> {typedef int type;};$/;"	s	namespace:boost::atomics::detail
boost::atomics::detail::classify::type	/usr/include/boost/atomic/detail/type-classification.hpp	/^    typedef void type;$/;"	t	struct:boost::atomics::detail::classify	access:public
boost::atomics::detail::classify::type	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct classify<T*, false> {typedef void* type;};$/;"	t	struct:boost::atomics::detail::classify	access:public
boost::atomics::detail::classify::type	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct classify<T, true> {typedef int type;};$/;"	t	struct:boost::atomics::detail::classify	access:public
boost::atomics::detail::fence_after	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^inline void fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::fence_before	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^inline void fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::fenced_compare_exchange_strong_32	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    fenced_compare_exchange_strong_32(volatile int32_t *ptr, int32_t expected, int32_t desired)$/;"	f	namespace:boost::atomics::detail	signature:(volatile int32_t *ptr, int32_t expected, int32_t desired)
boost::atomics::detail::fenced_compare_exchange_strong_64	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    fenced_compare_exchange_strong_64(int64_t *ptr, int64_t expected, int64_t desired)$/;"	f	namespace:boost::atomics::detail	signature:(int64_t *ptr, int64_t expected, int64_t desired)
boost::atomics::detail::hardware_full_fence	/usr/include/boost/atomic/detail/windows.hpp	/^BOOST_FORCEINLINE void hardware_full_fence(void)$/;"	f	namespace:boost::atomics::detail	signature:(void)
boost::atomics::detail::lockpool	/usr/include/boost/atomic/detail/lockpool.hpp	/^class lockpool$/;"	c	namespace:boost::atomics::detail
boost::atomics::detail::lockpool::get_lock_for	/usr/include/boost/atomic/detail/lockpool.hpp	/^    static BOOST_ATOMIC_DECL lock_type& get_lock_for(const volatile void * addr);$/;"	p	class:boost::atomics::detail::lockpool	access:private	signature:(const volatile void * addr)
boost::atomics::detail::lockpool::lock_type	/usr/include/boost/atomic/detail/lockpool.hpp	/^    typedef mutex lock_type;$/;"	t	class:boost::atomics::detail::lockpool	access:public
boost::atomics::detail::lockpool::scoped_lock	/usr/include/boost/atomic/detail/lockpool.hpp	/^    class scoped_lock$/;"	c	class:boost::atomics::detail::lockpool	access:public
boost::atomics::detail::lockpool::scoped_lock::mtx_	/usr/include/boost/atomic/detail/lockpool.hpp	/^        lock_type& mtx_;$/;"	m	class:boost::atomics::detail::lockpool::scoped_lock	access:private
boost::atomics::detail::lockpool::scoped_lock::operator =	/usr/include/boost/atomic/detail/lockpool.hpp	/^        scoped_lock& operator=(scoped_lock const&) \/* = delete *\/;$/;"	p	class:boost::atomics::detail::lockpool::scoped_lock	access:private	signature:(scoped_lock const&)
boost::atomics::detail::lockpool::scoped_lock::scoped_lock	/usr/include/boost/atomic/detail/lockpool.hpp	/^        scoped_lock(const volatile void * addr) : mtx_(get_lock_for(addr))$/;"	f	class:boost::atomics::detail::lockpool::scoped_lock	access:public	signature:(const volatile void * addr)
boost::atomics::detail::lockpool::scoped_lock::scoped_lock	/usr/include/boost/atomic/detail/lockpool.hpp	/^        scoped_lock(scoped_lock const&) \/* = delete *\/;$/;"	p	class:boost::atomics::detail::lockpool::scoped_lock	access:private	signature:(scoped_lock const&)
boost::atomics::detail::lockpool::scoped_lock::~scoped_lock	/usr/include/boost/atomic/detail/lockpool.hpp	/^        ~scoped_lock()$/;"	f	class:boost::atomics::detail::lockpool::scoped_lock	access:public	signature:()
boost::atomics::detail::msvc_sizeof_pointer_workaround	/usr/include/boost/atomic/detail/windows.hpp	/^enum msvc_sizeof_pointer_workaround { sizeof_pointer = sizeof(void*) };$/;"	g	namespace:boost::atomics::detail
boost::atomics::detail::platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_larger_type
boost::atomics::detail::platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_larger_type
boost::atomics::detail::platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_typical<build_exchange<atomic_alpha_32<T> > > {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_typical
boost::atomics::detail::platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 8> : public build_atomic_from_typical<build_exchange<atomic_alpha_64<T> > > {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_typical
boost::atomics::detail::platform_atomic_integral	/usr/include/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_larger_type
boost::atomics::detail::platform_atomic_integral	/usr/include/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_larger_type
boost::atomics::detail::platform_atomic_integral	/usr/include/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_exchange<atomic_generic_cas32<T> > {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_exchange
boost::atomics::detail::platform_atomic_integral::platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::atomics::detail::platform_atomic_integral	access:public	signature:(T v)
boost::atomics::detail::platform_atomic_integral::platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    platform_atomic_integral(void) {}$/;"	f	class:boost::atomics::detail::platform_atomic_integral	access:public	signature:(void)
boost::atomics::detail::platform_atomic_integral::platform_atomic_integral	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::atomics::detail::platform_atomic_integral	access:public	signature:(T v)
boost::atomics::detail::platform_atomic_integral::platform_atomic_integral	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    platform_atomic_integral(void) {}$/;"	f	class:boost::atomics::detail::platform_atomic_integral	access:public	signature:(void)
boost::atomics::detail::platform_atomic_integral::super	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    typedef build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> super;$/;"	t	class:boost::atomics::detail::platform_atomic_integral	access:public
boost::atomics::detail::platform_atomic_integral::super	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    typedef build_atomic_from_typical<build_exchange<atomic_alpha_32<T> > > super;$/;"	t	class:boost::atomics::detail::platform_atomic_integral	access:public
boost::atomics::detail::platform_atomic_integral::super	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    typedef build_atomic_from_typical<build_exchange<atomic_alpha_64<T> > > super;$/;"	t	class:boost::atomics::detail::platform_atomic_integral	access:public
boost::atomics::detail::platform_atomic_integral::super	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    typedef build_atomic_from_exchange<atomic_generic_cas32<T> > super;$/;"	t	class:boost::atomics::detail::platform_atomic_integral	access:public
boost::atomics::detail::platform_atomic_integral::super	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    typedef build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> super;$/;"	t	class:boost::atomics::detail::platform_atomic_integral	access:public
boost::atomics::detail::platform_atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^inline void platform_atomic_thread_fence(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_cmpxchg32	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_cmpxchg32(T & expected, T desired, volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(T & expected, T desired, volatile T * ptr)
boost::atomics::detail::platform_cmpxchg32	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_cmpxchg32(T & expected, T desired, volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(T & expected, T desired, volatile T * ptr)
boost::atomics::detail::platform_cmpxchg32_strong	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_cmpxchg32_strong(T & expected, T desired, volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(T & expected, T desired, volatile T * ptr)
boost::atomics::detail::platform_cmpxchg64_strong	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_cmpxchg64_strong(T & expected, T desired, volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(T & expected, T desired, volatile T * ptr)
boost::atomics::detail::platform_fence_after	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_fence_after(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
boost::atomics::detail::platform_fence_after	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^platform_fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after	/usr/include/boost/atomic/detail/windows.hpp	/^platform_fence_after(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
boost::atomics::detail::platform_fence_after_load	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after_load	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after_load	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after_load	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after_load	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after_load	/usr/include/boost/atomic/detail/windows.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after_store	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after_store	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after_store	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^platform_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after_store	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after_store	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_after_store	/usr/include/boost/atomic/detail/windows.hpp	/^platform_fence_after_store(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
boost::atomics::detail::platform_fence_before	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_before	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_fence_before(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
boost::atomics::detail::platform_fence_before	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^platform_fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_before	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_before	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_before	/usr/include/boost/atomic/detail/windows.hpp	/^platform_fence_before(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
boost::atomics::detail::platform_fence_before_store	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_fence_before_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_before_store	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_fence_before_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_before_store	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_fence_before_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_before_store	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_fence_before_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::platform_fence_before_store	/usr/include/boost/atomic/detail/windows.hpp	/^platform_fence_before_store(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
boost::atomics::detail::platform_load64	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_load64(const volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(const volatile T * ptr)
boost::atomics::detail::platform_store64	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_store64(T value, volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(T value, volatile T * ptr)
boost::atomics::detail::ppc_fence_after	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^ppc_fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::ppc_fence_after_store	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^ppc_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::ppc_fence_before	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^ppc_fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
boost::atomics::detail::sizeof_pointer	/usr/include/boost/atomic/detail/windows.hpp	/^enum msvc_sizeof_pointer_workaround { sizeof_pointer = sizeof(void*) };$/;"	e	enum:boost::atomics::detail::msvc_sizeof_pointer_workaround
boost::atomics::detail::storage_size_of	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct storage_size_of$/;"	s	namespace:boost::atomics::detail
boost::atomics::detail::storage_size_of::_	/usr/include/boost/atomic/detail/type-classification.hpp	/^    enum _$/;"	g	struct:boost::atomics::detail::storage_size_of	access:public
boost::atomics::detail::storage_size_of::size	/usr/include/boost/atomic/detail/type-classification.hpp	/^        size = sizeof(T),$/;"	e	enum:boost::atomics::detail::storage_size_of::_
boost::atomics::detail::storage_size_of::value	/usr/include/boost/atomic/detail/type-classification.hpp	/^        value = (size == 3 ? 4 : (size == 5 || size == 6 || size == 7 ? 8 : size))$/;"	e	enum:boost::atomics::detail::storage_size_of::_
calculate_failure_order	/usr/include/boost/atomic/detail/base.hpp	/^calculate_failure_order(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
classify	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct classify$/;"	s	namespace:boost::atomics::detail
classify	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct classify<T*, false> {typedef void* type;};$/;"	s	namespace:boost::atomics::detail
classify	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct classify<T, true> {typedef int type;};$/;"	s	namespace:boost::atomics::detail
clear	/usr/include/boost/atomic/atomic.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
clear	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
clear	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
clear	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
clear	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
clear	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
clear	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
clear	/usr/include/boost/atomic/detail/windows.hpp	/^    clear(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/base.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order , memory_order ) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/base.hpp	/^    compare_exchange_strong(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order , memory_order ) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    bool compare_exchange_strong(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    bool compare_exchange_strong($/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/windows.hpp	/^    bool compare_exchange_strong(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/windows.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	/usr/include/boost/atomic/detail/windows.hpp	/^    compare_exchange_strong($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/base.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/base.hpp	/^    compare_exchange_weak(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    bool compare_exchange_weak($/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    bool compare_exchange_weak($/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    bool compare_exchange_weak(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    bool compare_exchange_weak(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    bool compare_exchange_weak($/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/windows.hpp	/^    bool compare_exchange_weak(value_type & expected, value_type desired,$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/windows.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type const& desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	/usr/include/boost/atomic/detail/windows.hpp	/^    compare_exchange_weak($/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:( value_type & expected, value_type desired, memory_order success_order, memory_order failure_order) volatile
detail	/usr/include/boost/atomic/detail/base.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/cas32strong.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/cas32weak.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/cas64strong.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    namespace boost { namespace atomics { namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/generic-cas.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/interlocked.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/linux-arm.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/lockpool.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/type-classification.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
detail	/usr/include/boost/atomic/detail/windows.hpp	/^namespace detail {$/;"	n	namespace:boost::atomics
difference_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef T difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
difference_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
exchange	/usr/include/boost/atomic/detail/base.hpp	/^    exchange(value_type const& v, memory_order \/*order*\/=memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order =memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/base.hpp	/^    exchange(value_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    value_type exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/windows.hpp	/^    exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/windows.hpp	/^    exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
exchange	/usr/include/boost/atomic/detail/windows.hpp	/^    value_type exchange(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fence_after	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^inline void fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
fence_before	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^inline void fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
fenced_compare_exchange_strong_32	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    fenced_compare_exchange_strong_32(volatile int32_t *ptr, int32_t expected, int32_t desired)$/;"	f	namespace:boost::atomics::detail	signature:(volatile int32_t *ptr, int32_t expected, int32_t desired)
fenced_compare_exchange_strong_64	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    fenced_compare_exchange_strong_64(int64_t *ptr, int64_t expected, int64_t desired)$/;"	f	namespace:boost::atomics::detail	signature:(int64_t *ptr, int64_t expected, int64_t desired)
fetch_add	/usr/include/boost/atomic/detail/base.hpp	/^    fetch_add(difference_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/base.hpp	/^    value_type fetch_add(difference_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_add(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_add(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_add_var	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:protected	signature:(T c, memory_order order) volatile
fetch_add_var	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:protected	signature:(T c, memory_order order) volatile
fetch_and	/usr/include/boost/atomic/detail/base.hpp	/^    fetch_and(value_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order = memory_order_seq_cst) volatile
fetch_and	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_and	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_and	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_and	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_and	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_and	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_and	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_and(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_dec	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:protected	signature:(memory_order order) volatile
fetch_dec	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:protected	signature:(memory_order order) volatile
fetch_inc	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:protected	signature:(memory_order order) volatile
fetch_inc	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:protected	signature:(memory_order order) volatile
fetch_or	/usr/include/boost/atomic/detail/base.hpp	/^    fetch_or(value_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order = memory_order_seq_cst) volatile
fetch_or	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_or	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_or	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_or	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_or	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_or	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_or	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_or(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/base.hpp	/^    fetch_sub(difference_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/base.hpp	/^    value_type fetch_sub(difference_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_sub(difference_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(difference_type v, memory_order order = memory_order_seq_cst) volatile
fetch_sub	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_sub(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_xor	/usr/include/boost/atomic/detail/base.hpp	/^    fetch_xor(value_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order = memory_order_seq_cst) volatile
fetch_xor	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_xor	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_xor	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_xor	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_xor	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_xor	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
fetch_xor	/usr/include/boost/atomic/detail/windows.hpp	/^    fetch_xor(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
get_lock_for	/usr/include/boost/atomic/detail/lockpool.hpp	/^    static BOOST_ATOMIC_DECL lock_type& get_lock_for(const volatile void * addr);$/;"	p	class:boost::atomics::detail::lockpool	access:private	signature:(const volatile void * addr)
guard_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef lockpool::scoped_lock guard_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
hardware_full_fence	/usr/include/boost/atomic/detail/windows.hpp	/^BOOST_FORCEINLINE void hardware_full_fence(void)$/;"	f	namespace:boost::atomics::detail	signature:(void)
i	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    T i;$/;"	m	class:boost::atomics::detail::atomic_alpha_32	access:private
i	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    T i;$/;"	m	class:boost::atomics::detail::atomic_alpha_64	access:private
i	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    mutable int32_t i;$/;"	m	class:boost::atomics::detail::atomic_generic_cas32	access:private
integral_type	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    typedef T integral_type;$/;"	t	class:boost::atomics::detail::atomic_alpha_32	access:public
integral_type	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    typedef T integral_type;$/;"	t	class:boost::atomics::detail::atomic_alpha_64	access:public
integral_type	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    typedef T integral_type;$/;"	t	class:boost::atomics::detail::atomic_generic_cas32	access:public
is_lock_free	/usr/include/boost/atomic/detail/base.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
is_lock_free	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
is_lock_free	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
is_lock_free	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
is_lock_free	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:(void) const volatile
is_lock_free	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:(void) const volatile
is_lock_free	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
is_lock_free	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
is_lock_free	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
is_lock_free	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:(void) const volatile
is_lock_free	/usr/include/boost/atomic/detail/windows.hpp	/^    is_lock_free(void) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(void) const volatile
load	/usr/include/boost/atomic/detail/base.hpp	/^    load(memory_order \/*order*\/ = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order = memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/base.hpp	/^    load(memory_order \/*order*\/ = memory_order_seq_cst) volatile const$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order = memory_order_seq_cst) volatile const
load	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    value_type load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    value_type load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/windows.hpp	/^    load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
load	/usr/include/boost/atomic/detail/windows.hpp	/^    value_type load(memory_order order = memory_order_seq_cst) const volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(memory_order order = memory_order_seq_cst) const volatile
lock_type	/usr/include/boost/atomic/detail/lockpool.hpp	/^    typedef mutex lock_type;$/;"	t	class:boost::atomics::detail::lockpool	access:public
lockpool	/usr/include/boost/atomic/detail/lockpool.hpp	/^class lockpool$/;"	c	namespace:boost::atomics::detail
msvc_sizeof_pointer_workaround	/usr/include/boost/atomic/detail/windows.hpp	/^enum msvc_sizeof_pointer_workaround { sizeof_pointer = sizeof(void*) };$/;"	g	namespace:boost::atomics::detail
mtx_	/usr/include/boost/atomic/detail/lockpool.hpp	/^        lock_type& mtx_;$/;"	m	class:boost::atomics::detail::lockpool::scoped_lock	access:private
operator =	/usr/include/boost/atomic/atomic.hpp	/^    atomic & operator=(const atomic &) \/* =delete *\/ ;$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
operator =	/usr/include/boost/atomic/atomic.hpp	/^    atomic & operator=(value_type v) volatile$/;"	f	class:boost::atomic	access:public	signature:(value_type v) volatile
operator =	/usr/include/boost/atomic/atomic.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
operator =	/usr/include/boost/atomic/detail/base.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
operator =	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
operator =	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
operator =	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
operator =	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
operator =	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::atomic_flag	access:private	signature:(const atomic_flag &)
operator =	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
operator =	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
operator =	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
operator =	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
operator =	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
operator =	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
operator =	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
operator =	/usr/include/boost/atomic/detail/lockpool.hpp	/^        scoped_lock& operator=(scoped_lock const&) \/* = delete *\/;$/;"	p	class:boost::atomics::detail::lockpool::scoped_lock	access:private	signature:(scoped_lock const&)
operator =	/usr/include/boost/atomic/detail/windows.hpp	/^    atomic_flag & operator=(const atomic_flag &) \/* = delete *\/ ;$/;"	p	class:boost::atomic_flag	access:private	signature:(const atomic_flag &)
operator =	/usr/include/boost/atomic/detail/windows.hpp	/^    void operator=(const base_atomic &) \/* = delete *\/ ;$/;"	p	class:boost::atomics::detail::base_atomic	access:private	signature:(const base_atomic &)
platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::atomics::detail::platform_atomic_integral	access:public	signature:(T v)
platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    platform_atomic_integral(void) {}$/;"	f	class:boost::atomics::detail::platform_atomic_integral	access:public	signature:(void)
platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_larger_type
platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_larger_type
platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_typical<build_exchange<atomic_alpha_32<T> > > {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_typical
platform_atomic_integral	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 8> : public build_atomic_from_typical<build_exchange<atomic_alpha_64<T> > > {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_typical
platform_atomic_integral	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::atomics::detail::platform_atomic_integral	access:public	signature:(T v)
platform_atomic_integral	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    platform_atomic_integral(void) {}$/;"	f	class:boost::atomics::detail::platform_atomic_integral	access:public	signature:(void)
platform_atomic_integral	/usr/include/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_larger_type
platform_atomic_integral	/usr/include/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_larger_type
platform_atomic_integral	/usr/include/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_exchange<atomic_generic_cas32<T> > {$/;"	c	namespace:boost::atomics::detail	inherits:build_atomic_from_exchange
platform_atomic_thread_fence	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^inline void platform_atomic_thread_fence(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_cmpxchg32	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_cmpxchg32(T & expected, T desired, volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(T & expected, T desired, volatile T * ptr)
platform_cmpxchg32	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_cmpxchg32(T & expected, T desired, volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(T & expected, T desired, volatile T * ptr)
platform_cmpxchg32_strong	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_cmpxchg32_strong(T & expected, T desired, volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(T & expected, T desired, volatile T * ptr)
platform_cmpxchg64_strong	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_cmpxchg64_strong(T & expected, T desired, volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(T & expected, T desired, volatile T * ptr)
platform_fence_after	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_fence_after(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
platform_fence_after	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^platform_fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after	/usr/include/boost/atomic/detail/windows.hpp	/^platform_fence_after(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
platform_fence_after_load	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after_load	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after_load	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after_load	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after_load	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after_load	/usr/include/boost/atomic/detail/windows.hpp	/^platform_fence_after_load(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after_store	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after_store	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after_store	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^platform_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after_store	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after_store	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_after_store	/usr/include/boost/atomic/detail/windows.hpp	/^platform_fence_after_store(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
platform_fence_before	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_before	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_fence_before(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
platform_fence_before	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^platform_fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_before	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_before	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_before	/usr/include/boost/atomic/detail/windows.hpp	/^platform_fence_before(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
platform_fence_before_store	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^platform_fence_before_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_before_store	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^platform_fence_before_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_before_store	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_fence_before_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_before_store	/usr/include/boost/atomic/detail/linux-arm.hpp	/^platform_fence_before_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
platform_fence_before_store	/usr/include/boost/atomic/detail/windows.hpp	/^platform_fence_before_store(memory_order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order)
platform_load64	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_load64(const volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(const volatile T * ptr)
platform_store64	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^platform_store64(T value, volatile T * ptr)$/;"	f	namespace:boost::atomics::detail	signature:(T value, volatile T * ptr)
ppc_fence_after	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^ppc_fence_after(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
ppc_fence_after_store	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^ppc_fence_after_store(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
ppc_fence_before	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^ppc_fence_before(memory_order order)$/;"	f	namespace:boost::atomics::detail	signature:(memory_order order)
scoped_lock	/usr/include/boost/atomic/detail/lockpool.hpp	/^        scoped_lock(const volatile void * addr) : mtx_(get_lock_for(addr))$/;"	f	class:boost::atomics::detail::lockpool::scoped_lock	access:public	signature:(const volatile void * addr)
scoped_lock	/usr/include/boost/atomic/detail/lockpool.hpp	/^        scoped_lock(scoped_lock const&) \/* = delete *\/;$/;"	p	class:boost::atomics::detail::lockpool::scoped_lock	access:private	signature:(scoped_lock const&)
scoped_lock	/usr/include/boost/atomic/detail/lockpool.hpp	/^    class scoped_lock$/;"	c	class:boost::atomics::detail::lockpool	access:public
size	/usr/include/boost/atomic/detail/type-classification.hpp	/^        size = sizeof(T),$/;"	e	enum:boost::atomics::detail::storage_size_of::_
sizeof_pointer	/usr/include/boost/atomic/detail/windows.hpp	/^enum msvc_sizeof_pointer_workaround { sizeof_pointer = sizeof(void*) };$/;"	e	enum:boost::atomics::detail::msvc_sizeof_pointer_workaround
storage_size_of	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct storage_size_of$/;"	s	namespace:boost::atomics::detail
storage_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef uint64_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef int32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef uint64_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef int32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef uint16_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef uint64_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef uint8_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef uint16_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef uint32_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef uint64_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef uint8_t storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
storage_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef value_type storage_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
store	/usr/include/boost/atomic/detail/base.hpp	/^    store(value_type const& v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/base.hpp	/^    store(value_type v, memory_order \/*order*\/ = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    store(value_type const& value, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& value, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_alpha_64	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_generic_cas32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/windows.hpp	/^    store(value_type const& v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type const& v, memory_order order = memory_order_seq_cst) volatile
store	/usr/include/boost/atomic/detail/windows.hpp	/^    store(value_type v, memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::base_atomic	access:public	signature:(value_type v, memory_order order = memory_order_seq_cst) volatile
super	/usr/include/boost/atomic/atomic.hpp	/^    typedef atomics::detail::base_atomic<T, typename atomics::detail::classify<T>::type, atomics::detail::storage_size_of<T>::value, boost::is_signed<T>::value > super;$/;"	t	class:boost::atomic	access:private
super	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    typedef build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> super;$/;"	t	class:boost::atomics::detail::platform_atomic_integral	access:public
super	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    typedef build_atomic_from_typical<build_exchange<atomic_alpha_32<T> > > super;$/;"	t	class:boost::atomics::detail::platform_atomic_integral	access:public
super	/usr/include/boost/atomic/detail/gcc-alpha.hpp	/^    typedef build_atomic_from_typical<build_exchange<atomic_alpha_64<T> > > super;$/;"	t	class:boost::atomics::detail::platform_atomic_integral	access:public
super	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    typedef build_atomic_from_exchange<atomic_generic_cas32<T> > super;$/;"	t	class:boost::atomics::detail::platform_atomic_integral	access:public
super	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    typedef build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> super;$/;"	t	class:boost::atomics::detail::platform_atomic_integral	access:public
test_and_set	/usr/include/boost/atomic/atomic.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst)$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst)
test_and_set	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
test_and_set	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomics::detail::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
test_and_set	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
test_and_set	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
test_and_set	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
test_and_set	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
test_and_set	/usr/include/boost/atomic/detail/windows.hpp	/^    test_and_set(memory_order order = memory_order_seq_cst) volatile$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order = memory_order_seq_cst) volatile
this_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
this_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
this_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
this_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
this_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
this_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
this_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
this_type	/usr/include/boost/atomic/detail/generic-cas.hpp	/^    typedef atomic_generic_cas32 this_type;$/;"	t	class:boost::atomics::detail::atomic_generic_cas32	access:private
this_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef base_atomic this_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
type	/usr/include/boost/atomic/detail/type-classification.hpp	/^    typedef void type;$/;"	t	struct:boost::atomics::detail::classify	access:public
type	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct classify<T*, false> {typedef void* type;};$/;"	t	struct:boost::atomics::detail::classify	access:public
type	/usr/include/boost/atomic/detail/type-classification.hpp	/^struct classify<T, true> {typedef int type;};$/;"	t	struct:boost::atomics::detail::classify	access:public
v_	/usr/include/boost/atomic/atomic.hpp	/^    atomic<bool> v_;$/;"	m	class:boost::atomic_flag	access:private
v_	/usr/include/boost/atomic/detail/base.hpp	/^    char v_[sizeof(value_type)];$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/base.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/gcc-armv6plus.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
v_	/usr/include/boost/atomic/detail/gcc-cas.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomics::detail::atomic_flag	access:private
v_	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
v_	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
v_	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
v_	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/linux-arm.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
v_	/usr/include/boost/atomic/detail/windows.hpp	/^    storage_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
v_	/usr/include/boost/atomic/detail/windows.hpp	/^    uint32_t v_;$/;"	m	class:boost::atomic_flag	access:private
v_	/usr/include/boost/atomic/detail/windows.hpp	/^    value_type v_;$/;"	m	class:boost::atomics::detail::base_atomic	access:private
value	/usr/include/boost/atomic/detail/type-classification.hpp	/^        value = (size == 3 ? 4 : (size == 5 || size == 6 || size == 7 ? 8 : size))$/;"	e	enum:boost::atomics::detail::storage_size_of::_
value_type	/usr/include/boost/atomic/atomic.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomic	access:private
value_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/base.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/cas32strong.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/cas32weak.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/cas64strong.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/gcc-ppc.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/gcc-sparcv9.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef T * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/gcc-x86.hpp	/^    typedef void * value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef T value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef T* value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
value_type	/usr/include/boost/atomic/detail/windows.hpp	/^    typedef void* value_type;$/;"	t	class:boost::atomics::detail::base_atomic	access:private
~scoped_lock	/usr/include/boost/atomic/detail/lockpool.hpp	/^        ~scoped_lock()$/;"	f	class:boost::atomics::detail::lockpool::scoped_lock	access:public	signature:()
