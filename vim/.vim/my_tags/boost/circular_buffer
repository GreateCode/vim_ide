!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_CIRCULAR_BUFFER_BASE_HPP	/usr/include/boost/circular_buffer/base.hpp	10;"	d
BOOST_CIRCULAR_BUFFER_DEBUG_HPP	/usr/include/boost/circular_buffer/debug.hpp	10;"	d
BOOST_CIRCULAR_BUFFER_DETAILS_HPP	/usr/include/boost/circular_buffer/details.hpp	10;"	d
BOOST_CIRCULAR_BUFFER_SPACE_OPTIMIZED_HPP	/usr/include/boost/circular_buffer/space_optimized.hpp	10;"	d
BOOST_CLASS_REQUIRE	/usr/include/boost/circular_buffer/base.hpp	/^    BOOST_CLASS_REQUIRE(T, boost, SGIAssignableConcept);$/;"	p	class:boost::circular_buffer	access:private	signature:(T, boost, SGIAssignableConcept)
UNINITIALIZED	/usr/include/boost/circular_buffer/debug.hpp	/^const int UNINITIALIZED = 0xcc;$/;"	m	namespace:boost::cb_details
add	/usr/include/boost/circular_buffer/base.hpp	/^    Pointer add(Pointer p, difference_type n) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(Pointer p, difference_type n) const
adjust_min_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void adjust_min_capacity() {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:()
allocate	/usr/include/boost/circular_buffer/base.hpp	/^    pointer allocate(size_type n) {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type n)
allocator_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef Alloc allocator_type;$/;"	t	class:boost::circular_buffer	access:public
allocator_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::allocator_type allocator_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
array_one	/usr/include/boost/circular_buffer/base.hpp	/^    array_range array_one() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
array_one	/usr/include/boost/circular_buffer/base.hpp	/^    const_array_range array_one() const {$/;"	f	class:boost::circular_buffer	access:public	signature:() const
array_range	/usr/include/boost/circular_buffer/base.hpp	/^    typedef std::pair<pointer, size_type> array_range;$/;"	t	class:boost::circular_buffer	access:public
array_range	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::array_range array_range;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
array_two	/usr/include/boost/circular_buffer/base.hpp	/^    array_range array_two() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
array_two	/usr/include/boost/circular_buffer/base.hpp	/^    const_array_range array_two() const {$/;"	f	class:boost::circular_buffer	access:public	signature:() const
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(InputIterator first, InputIterator last)
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(InputIterator first, InputIterator last, const std::input_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(InputIterator first, InputIterator last, const std::input_iterator_tag&)
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(IntegralType n, IntegralType item, const true_type&)
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(Iterator first, Iterator last, const false_type&)
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type buffer_capacity, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type buffer_capacity, InputIterator first, InputIterator last)
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type buffer_capacity, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type buffer_capacity, size_type n, param_value_type item)
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type new_capacity, ForwardIterator first, ForwardIterator last,$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type new_capacity, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type new_capacity, InputIterator first, InputIterator last, const std::input_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type new_capacity, InputIterator first, InputIterator last, const std::input_iterator_tag&)
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type new_capacity, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type new_capacity, IntegralType n, IntegralType item, const true_type&)
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type new_capacity, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type new_capacity, Iterator first, Iterator last, const false_type&)
assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type n, param_value_type item)
assign	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void assign(InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(InputIterator first, InputIterator last)
assign	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void assign(capacity_type capacity_ctrl, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, InputIterator first, InputIterator last)
assign	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void assign(capacity_type capacity_ctrl, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, size_type n, param_value_type item)
assign	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void assign(size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type n, param_value_type item)
assign_n	/usr/include/boost/circular_buffer/base.hpp	/^    void assign_n(capacity_type new_capacity, size_type n, const Functor& fnc) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type new_capacity, size_type n, const Functor& fnc)
assign_n	/usr/include/boost/circular_buffer/details.hpp	/^    assign_n(size_type n, Value item, Alloc& alloc) : m_n(n), m_item(item), m_alloc(alloc) {}$/;"	f	struct:boost::cb_details::assign_n	access:public	signature:(size_type n, Value item, Alloc& alloc)
assign_n	/usr/include/boost/circular_buffer/details.hpp	/^struct assign_n {$/;"	s	namespace:boost::cb_details
assign_range	/usr/include/boost/circular_buffer/details.hpp	/^    assign_range(const Iterator& first, const Iterator& last, Alloc& alloc)$/;"	f	struct:boost::cb_details::assign_range	access:public	signature:(const Iterator& first, const Iterator& last, Alloc& alloc)
assign_range	/usr/include/boost/circular_buffer/details.hpp	/^struct assign_range {$/;"	s	namespace:boost::cb_details
at	/usr/include/boost/circular_buffer/base.hpp	/^    reference at(size_type index) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type index)
at	/usr/include/boost/circular_buffer/base.hpp	/^    return_value_type at(size_type index) const {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type index) const
back	/usr/include/boost/circular_buffer/base.hpp	/^    reference back() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
back	/usr/include/boost/circular_buffer/base.hpp	/^    return_value_type back() const {$/;"	f	class:boost::circular_buffer	access:public	signature:() const
base_iterator	/usr/include/boost/circular_buffer/details.hpp	/^        typename Traits::reference> base_iterator;$/;"	t	struct:boost::cb_details::iterator	access:public
begin	/usr/include/boost/circular_buffer/base.hpp	/^    const_iterator begin() const { return const_iterator(this, empty() ? 0 : m_first); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
begin	/usr/include/boost/circular_buffer/base.hpp	/^    iterator begin() { return iterator(this, empty() ? 0 : m_first); }$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost	/usr/include/boost/circular_buffer/base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/circular_buffer/debug.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/circular_buffer/details.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/circular_buffer/space_optimized.hpp	/^namespace boost {$/;"	n
boost::cb_details	/usr/include/boost/circular_buffer/debug.hpp	/^namespace cb_details {$/;"	n	namespace:boost
boost::cb_details	/usr/include/boost/circular_buffer/details.hpp	/^namespace cb_details {$/;"	n	namespace:boost
boost::cb_details::UNINITIALIZED	/usr/include/boost/circular_buffer/debug.hpp	/^const int UNINITIALIZED = 0xcc;$/;"	m	namespace:boost::cb_details
boost::cb_details::assign_n	/usr/include/boost/circular_buffer/details.hpp	/^struct assign_n {$/;"	s	namespace:boost::cb_details
boost::cb_details::assign_n::assign_n	/usr/include/boost/circular_buffer/details.hpp	/^    assign_n(size_type n, Value item, Alloc& alloc) : m_n(n), m_item(item), m_alloc(alloc) {}$/;"	f	struct:boost::cb_details::assign_n	access:public	signature:(size_type n, Value item, Alloc& alloc)
boost::cb_details::assign_n::m_alloc	/usr/include/boost/circular_buffer/details.hpp	/^    Alloc& m_alloc;$/;"	m	struct:boost::cb_details::assign_n	access:public
boost::cb_details::assign_n::m_item	/usr/include/boost/circular_buffer/details.hpp	/^    Value m_item;$/;"	m	struct:boost::cb_details::assign_n	access:public
boost::cb_details::assign_n::m_n	/usr/include/boost/circular_buffer/details.hpp	/^    size_type m_n;$/;"	m	struct:boost::cb_details::assign_n	access:public
boost::cb_details::assign_n::operator ()	/usr/include/boost/circular_buffer/details.hpp	/^    void operator () (Pointer p) const {$/;"	f	struct:boost::cb_details::assign_n	access:public	signature:(Pointer p) const
boost::cb_details::assign_n::operator =	/usr/include/boost/circular_buffer/details.hpp	/^    assign_n<Value, Alloc>& operator = (const assign_n<Value, Alloc>&); \/\/ do not generate$/;"	p	struct:boost::cb_details::assign_n	access:private	signature:(const assign_n<Value, Alloc>&)
boost::cb_details::assign_n::size_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Alloc::size_type size_type;$/;"	t	struct:boost::cb_details::assign_n	access:public
boost::cb_details::assign_range	/usr/include/boost/circular_buffer/details.hpp	/^struct assign_range {$/;"	s	namespace:boost::cb_details
boost::cb_details::assign_range::assign_range	/usr/include/boost/circular_buffer/details.hpp	/^    assign_range(const Iterator& first, const Iterator& last, Alloc& alloc)$/;"	f	struct:boost::cb_details::assign_range	access:public	signature:(const Iterator& first, const Iterator& last, Alloc& alloc)
boost::cb_details::assign_range::m_alloc	/usr/include/boost/circular_buffer/details.hpp	/^    Alloc& m_alloc;$/;"	m	struct:boost::cb_details::assign_range	access:public
boost::cb_details::assign_range::m_first	/usr/include/boost/circular_buffer/details.hpp	/^    const Iterator& m_first;$/;"	m	struct:boost::cb_details::assign_range	access:public
boost::cb_details::assign_range::m_last	/usr/include/boost/circular_buffer/details.hpp	/^    const Iterator& m_last;$/;"	m	struct:boost::cb_details::assign_range	access:public
boost::cb_details::assign_range::operator ()	/usr/include/boost/circular_buffer/details.hpp	/^    void operator () (Pointer p) const {$/;"	f	struct:boost::cb_details::assign_range	access:public	signature:(Pointer p) const
boost::cb_details::assign_range::operator =	/usr/include/boost/circular_buffer/details.hpp	/^    assign_range<Iterator, Alloc>& operator = (const assign_range<Iterator, Alloc>&); \/\/ do not generate$/;"	p	struct:boost::cb_details::assign_range	access:private	signature:(const assign_range<Iterator, Alloc>&)
boost::cb_details::capacity_control	/usr/include/boost/circular_buffer/details.hpp	/^class capacity_control {$/;"	c	namespace:boost::cb_details
boost::cb_details::capacity_control::capacity	/usr/include/boost/circular_buffer/details.hpp	/^    Size capacity() const { return m_capacity; }$/;"	f	class:boost::cb_details::capacity_control	access:public	signature:() const
boost::cb_details::capacity_control::capacity_control	/usr/include/boost/circular_buffer/details.hpp	/^    capacity_control(Size buffer_capacity, Size min_buffer_capacity = 0)$/;"	f	class:boost::cb_details::capacity_control	access:public	signature:(Size buffer_capacity, Size min_buffer_capacity = 0)
boost::cb_details::capacity_control::m_capacity	/usr/include/boost/circular_buffer/details.hpp	/^    Size m_capacity;$/;"	m	class:boost::cb_details::capacity_control	access:private
boost::cb_details::capacity_control::m_min_capacity	/usr/include/boost/circular_buffer/details.hpp	/^    Size m_min_capacity;$/;"	m	class:boost::cb_details::capacity_control	access:private
boost::cb_details::capacity_control::min_capacity	/usr/include/boost/circular_buffer/details.hpp	/^    Size min_capacity() const { return m_min_capacity; }$/;"	f	class:boost::cb_details::capacity_control	access:public	signature:() const
boost::cb_details::capacity_control::operator Size	/usr/include/boost/circular_buffer/details.hpp	/^    operator Size() const { return m_capacity; }$/;"	f	class:boost::cb_details::capacity_control	access:public	signature:() const
boost::cb_details::const_traits	/usr/include/boost/circular_buffer/details.hpp	/^struct const_traits {$/;"	s	namespace:boost::cb_details
boost::cb_details::const_traits::difference_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::difference_type difference_type;$/;"	t	struct:boost::cb_details::const_traits	access:public
boost::cb_details::const_traits::nonconst_self	/usr/include/boost/circular_buffer/details.hpp	/^    typedef nonconst_traits<Traits> nonconst_self;$/;"	t	struct:boost::cb_details::const_traits	access:public
boost::cb_details::const_traits::pointer	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::const_pointer pointer;$/;"	t	struct:boost::cb_details::const_traits	access:public
boost::cb_details::const_traits::reference	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::const_reference reference;$/;"	t	struct:boost::cb_details::const_traits	access:public
boost::cb_details::const_traits::size_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::size_type size_type;$/;"	t	struct:boost::cb_details::const_traits	access:public
boost::cb_details::const_traits::value_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::value_type value_type;$/;"	t	struct:boost::cb_details::const_traits	access:public
boost::cb_details::debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^class debug_iterator_base {$/;"	c	namespace:boost::cb_details
boost::cb_details::debug_iterator_base::debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^    debug_iterator_base();$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:()
boost::cb_details::debug_iterator_base::debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^    debug_iterator_base(const debug_iterator_base& rhs);$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:(const debug_iterator_base& rhs)
boost::cb_details::debug_iterator_base::debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^    debug_iterator_base(const debug_iterator_registry* registry);$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:(const debug_iterator_registry* registry)
boost::cb_details::debug_iterator_base::debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^inline debug_iterator_base::debug_iterator_base() : m_registry(0), m_next(0) {}$/;"	f	class:boost::cb_details::debug_iterator_base	signature:()
boost::cb_details::debug_iterator_base::debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^inline debug_iterator_base::debug_iterator_base(const debug_iterator_base& rhs)$/;"	f	class:boost::cb_details::debug_iterator_base	signature:(const debug_iterator_base& rhs)
boost::cb_details::debug_iterator_base::debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^inline debug_iterator_base::debug_iterator_base(const debug_iterator_registry* registry)$/;"	f	class:boost::cb_details::debug_iterator_base	signature:(const debug_iterator_registry* registry)
boost::cb_details::debug_iterator_base::invalidate	/usr/include/boost/circular_buffer/debug.hpp	/^    void invalidate() const;$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:() const
boost::cb_details::debug_iterator_base::invalidate	/usr/include/boost/circular_buffer/debug.hpp	/^inline void debug_iterator_base::invalidate() const { m_registry = 0; }$/;"	f	class:boost::cb_details::debug_iterator_base	signature:() const
boost::cb_details::debug_iterator_base::is_valid	/usr/include/boost/circular_buffer/debug.hpp	/^    bool is_valid(const debug_iterator_registry* registry) const;$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:(const debug_iterator_registry* registry) const
boost::cb_details::debug_iterator_base::is_valid	/usr/include/boost/circular_buffer/debug.hpp	/^inline bool debug_iterator_base::is_valid(const debug_iterator_registry* registry) const {$/;"	f	class:boost::cb_details::debug_iterator_base	signature:(const debug_iterator_registry* registry) const
boost::cb_details::debug_iterator_base::m_next	/usr/include/boost/circular_buffer/debug.hpp	/^    mutable const debug_iterator_base* m_next;$/;"	m	class:boost::cb_details::debug_iterator_base	access:private
boost::cb_details::debug_iterator_base::m_registry	/usr/include/boost/circular_buffer/debug.hpp	/^    mutable const debug_iterator_registry* m_registry;$/;"	m	class:boost::cb_details::debug_iterator_base	access:private
boost::cb_details::debug_iterator_base::next	/usr/include/boost/circular_buffer/debug.hpp	/^    const debug_iterator_base* next() const;$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:() const
boost::cb_details::debug_iterator_base::next	/usr/include/boost/circular_buffer/debug.hpp	/^inline const debug_iterator_base* debug_iterator_base::next() const { return m_next; }$/;"	f	class:boost::cb_details::debug_iterator_base	signature:() const
boost::cb_details::debug_iterator_base::operator =	/usr/include/boost/circular_buffer/debug.hpp	/^    debug_iterator_base& operator = (const debug_iterator_base& rhs);$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:(const debug_iterator_base& rhs)
boost::cb_details::debug_iterator_base::operator =	/usr/include/boost/circular_buffer/debug.hpp	/^inline debug_iterator_base& debug_iterator_base::operator = (const debug_iterator_base& rhs) {$/;"	f	class:boost::cb_details::debug_iterator_base	signature:(const debug_iterator_base& rhs)
boost::cb_details::debug_iterator_base::register_self	/usr/include/boost/circular_buffer/debug.hpp	/^    void register_self();$/;"	p	class:boost::cb_details::debug_iterator_base	access:private	signature:()
boost::cb_details::debug_iterator_base::register_self	/usr/include/boost/circular_buffer/debug.hpp	/^inline void debug_iterator_base::register_self() {$/;"	f	class:boost::cb_details::debug_iterator_base	signature:()
boost::cb_details::debug_iterator_base::set_next	/usr/include/boost/circular_buffer/debug.hpp	/^    void set_next(const debug_iterator_base* it) const;$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:(const debug_iterator_base* it) const
boost::cb_details::debug_iterator_base::set_next	/usr/include/boost/circular_buffer/debug.hpp	/^inline void debug_iterator_base::set_next(const debug_iterator_base* it) const { m_next = it; }$/;"	f	class:boost::cb_details::debug_iterator_base	signature:(const debug_iterator_base* it) const
boost::cb_details::debug_iterator_base::unregister_self	/usr/include/boost/circular_buffer/debug.hpp	/^    void unregister_self();$/;"	p	class:boost::cb_details::debug_iterator_base	access:private	signature:()
boost::cb_details::debug_iterator_base::unregister_self	/usr/include/boost/circular_buffer/debug.hpp	/^inline void debug_iterator_base::unregister_self() {$/;"	f	class:boost::cb_details::debug_iterator_base	signature:()
boost::cb_details::debug_iterator_base::~debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^    ~debug_iterator_base();$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:()
boost::cb_details::debug_iterator_base::~debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^inline debug_iterator_base::~debug_iterator_base() { unregister_self(); }$/;"	f	class:boost::cb_details::debug_iterator_base	signature:()
boost::cb_details::debug_iterator_registry	/usr/include/boost/circular_buffer/debug.hpp	/^class debug_iterator_registry {$/;"	c	namespace:boost::cb_details
boost::cb_details::debug_iterator_registry::debug_iterator_registry	/usr/include/boost/circular_buffer/debug.hpp	/^    debug_iterator_registry() : m_iterators(0) {}$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:()
boost::cb_details::debug_iterator_registry::invalidate_all_iterators	/usr/include/boost/circular_buffer/debug.hpp	/^    void invalidate_all_iterators() {$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:()
boost::cb_details::debug_iterator_registry::invalidate_iterators	/usr/include/boost/circular_buffer/debug.hpp	/^    void invalidate_iterators(const Iterator& it) {$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:(const Iterator& it)
boost::cb_details::debug_iterator_registry::invalidate_iterators_except	/usr/include/boost/circular_buffer/debug.hpp	/^    void invalidate_iterators_except(const Iterator& it) {$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:(const Iterator& it)
boost::cb_details::debug_iterator_registry::m_iterators	/usr/include/boost/circular_buffer/debug.hpp	/^    mutable const debug_iterator_base* m_iterators;$/;"	m	class:boost::cb_details::debug_iterator_registry	access:private
boost::cb_details::debug_iterator_registry::register_iterator	/usr/include/boost/circular_buffer/debug.hpp	/^    void register_iterator(const debug_iterator_base* it) const {$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:(const debug_iterator_base* it) const
boost::cb_details::debug_iterator_registry::remove	/usr/include/boost/circular_buffer/debug.hpp	/^    void remove(const debug_iterator_base* current,$/;"	f	class:boost::cb_details::debug_iterator_registry	access:private	signature:(const debug_iterator_base* current, const debug_iterator_base* previous) const
boost::cb_details::debug_iterator_registry::unregister_iterator	/usr/include/boost/circular_buffer/debug.hpp	/^    void unregister_iterator(const debug_iterator_base* it) const {$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:(const debug_iterator_base* it) const
boost::cb_details::distance_type	/usr/include/boost/circular_buffer/details.hpp	/^inline typename Traits::difference_type* distance_type(const iterator<Buff, Traits>&) { return 0; }$/;"	f	namespace:boost::cb_details	signature:(const iterator<Buff, Traits>&)
boost::cb_details::item_wrapper	/usr/include/boost/circular_buffer/details.hpp	/^struct item_wrapper {$/;"	s	namespace:boost::cb_details
boost::cb_details::item_wrapper::item_wrapper	/usr/include/boost/circular_buffer/details.hpp	/^    explicit item_wrapper(Value item) : m_item(item) {}$/;"	f	struct:boost::cb_details::item_wrapper	access:public	signature:(Value item)
boost::cb_details::item_wrapper::m_item	/usr/include/boost/circular_buffer/details.hpp	/^    Value m_item;$/;"	m	struct:boost::cb_details::item_wrapper	access:public
boost::cb_details::item_wrapper::operator ()	/usr/include/boost/circular_buffer/details.hpp	/^    Pointer operator () () const { return &m_item; }$/;"	f	struct:boost::cb_details::item_wrapper	access:public	signature:() const
boost::cb_details::item_wrapper::operator =	/usr/include/boost/circular_buffer/details.hpp	/^    item_wrapper<Pointer, Value>& operator = (const item_wrapper<Pointer, Value>&); \/\/ do not generate$/;"	p	struct:boost::cb_details::item_wrapper	access:private	signature:(const item_wrapper<Pointer, Value>&)
boost::cb_details::iterator	/usr/include/boost/circular_buffer/details.hpp	/^struct iterator :$/;"	s	namespace:boost::cb_details	inherits:boost::iterator,debug_iterator_base
boost::cb_details::iterator::base_iterator	/usr/include/boost/circular_buffer/details.hpp	/^        typename Traits::reference> base_iterator;$/;"	t	struct:boost::cb_details::iterator	access:public
boost::cb_details::iterator::difference_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename base_iterator::difference_type difference_type;$/;"	t	struct:boost::cb_details::iterator	access:public
boost::cb_details::iterator::iterator	/usr/include/boost/circular_buffer/details.hpp	/^    iterator() : m_buff(0), m_it(0) {}$/;"	f	struct:boost::cb_details::iterator	access:public	signature:()
boost::cb_details::iterator::iterator	/usr/include/boost/circular_buffer/details.hpp	/^    iterator(const Buff* cb, const pointer p) : debug_iterator_base(cb), m_buff(cb), m_it(p) {}$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const Buff* cb, const pointer p)
boost::cb_details::iterator::iterator	/usr/include/boost/circular_buffer/details.hpp	/^    iterator(const Buff* cb, const pointer p) : m_buff(cb), m_it(p) {}$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const Buff* cb, const pointer p)
boost::cb_details::iterator::iterator	/usr/include/boost/circular_buffer/details.hpp	/^    iterator(const nonconst_self& it) : debug_iterator_base(it), m_buff(it.m_buff), m_it(it.m_it) {}$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const nonconst_self& it)
boost::cb_details::iterator::iterator	/usr/include/boost/circular_buffer/details.hpp	/^    iterator(const nonconst_self& it) : m_buff(it.m_buff), m_it(it.m_it) {}$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const nonconst_self& it)
boost::cb_details::iterator::linearize_pointer	/usr/include/boost/circular_buffer/details.hpp	/^    typename Traits0::pointer linearize_pointer(const iterator<Buff, Traits0>& it) const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
boost::cb_details::iterator::m_buff	/usr/include/boost/circular_buffer/details.hpp	/^    const Buff* m_buff;$/;"	m	struct:boost::cb_details::iterator	access:public
boost::cb_details::iterator::m_it	/usr/include/boost/circular_buffer/details.hpp	/^    pointer m_it;$/;"	m	struct:boost::cb_details::iterator	access:public
boost::cb_details::iterator::nonconst_self	/usr/include/boost/circular_buffer/details.hpp	/^    typedef iterator<Buff, typename Traits::nonconst_self> nonconst_self;$/;"	t	struct:boost::cb_details::iterator	access:public
boost::cb_details::iterator::operator !=	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator != (const iterator<Buff, Traits0>& it) const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
boost::cb_details::iterator::operator *	/usr/include/boost/circular_buffer/details.hpp	/^    reference operator * () const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:() const
boost::cb_details::iterator::operator +	/usr/include/boost/circular_buffer/details.hpp	/^    iterator operator + (difference_type n) const { return iterator<Buff, Traits>(*this) += n; }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(difference_type n) const
boost::cb_details::iterator::operator ++	/usr/include/boost/circular_buffer/details.hpp	/^    iterator operator ++ (int) {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(int)
boost::cb_details::iterator::operator ++	/usr/include/boost/circular_buffer/details.hpp	/^    iterator& operator ++ () {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:()
boost::cb_details::iterator::operator +=	/usr/include/boost/circular_buffer/details.hpp	/^    iterator& operator += (difference_type n) {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(difference_type n)
boost::cb_details::iterator::operator -	/usr/include/boost/circular_buffer/details.hpp	/^    difference_type operator - (const iterator<Buff, Traits0>& it) const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
boost::cb_details::iterator::operator -	/usr/include/boost/circular_buffer/details.hpp	/^    iterator operator - (difference_type n) const { return iterator<Buff, Traits>(*this) -= n; }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(difference_type n) const
boost::cb_details::iterator::operator --	/usr/include/boost/circular_buffer/details.hpp	/^    iterator operator -- (int) {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(int)
boost::cb_details::iterator::operator --	/usr/include/boost/circular_buffer/details.hpp	/^    iterator& operator -- () {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:()
boost::cb_details::iterator::operator -=	/usr/include/boost/circular_buffer/details.hpp	/^    iterator& operator -= (difference_type n) {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(difference_type n)
boost::cb_details::iterator::operator ->	/usr/include/boost/circular_buffer/details.hpp	/^    pointer operator -> () const { return &(operator*()); }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:() const
boost::cb_details::iterator::operator <	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator < (const iterator<Buff, Traits0>& it) const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
boost::cb_details::iterator::operator <=	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator <= (const iterator<Buff, Traits0>& it) const { return !(it < *this); }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
boost::cb_details::iterator::operator =	/usr/include/boost/circular_buffer/details.hpp	/^    iterator& operator = (const iterator& it) {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator& it)
boost::cb_details::iterator::operator ==	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator == (const iterator<Buff, Traits0>& it) const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
boost::cb_details::iterator::operator >	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator > (const iterator<Buff, Traits0>& it) const { return it < *this; }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
boost::cb_details::iterator::operator >=	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator >= (const iterator<Buff, Traits0>& it) const { return !(*this < it); }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
boost::cb_details::iterator::operator []	/usr/include/boost/circular_buffer/details.hpp	/^    reference operator [] (difference_type n) const { return *(*this + n); }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(difference_type n) const
boost::cb_details::iterator::pointer	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename base_iterator::pointer pointer;$/;"	t	struct:boost::cb_details::iterator	access:public
boost::cb_details::iterator::reference	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename base_iterator::reference reference;$/;"	t	struct:boost::cb_details::iterator	access:public
boost::cb_details::iterator::size_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::size_type size_type;$/;"	t	struct:boost::cb_details::iterator	access:public
boost::cb_details::iterator::value_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename base_iterator::value_type value_type;$/;"	t	struct:boost::cb_details::iterator	access:public
boost::cb_details::iterator_category	/usr/include/boost/circular_buffer/details.hpp	/^inline std::random_access_iterator_tag iterator_category(const iterator<Buff, Traits>&) {$/;"	f	namespace:boost::cb_details	signature:(const iterator<Buff, Traits>&)
boost::cb_details::iterator_wrapper	/usr/include/boost/circular_buffer/details.hpp	/^struct iterator_wrapper {$/;"	s	namespace:boost::cb_details
boost::cb_details::iterator_wrapper::iterator_wrapper	/usr/include/boost/circular_buffer/details.hpp	/^    explicit iterator_wrapper(Iterator it) : m_it(it) {}$/;"	f	struct:boost::cb_details::iterator_wrapper	access:public	signature:(Iterator it)
boost::cb_details::iterator_wrapper::m_it	/usr/include/boost/circular_buffer/details.hpp	/^    mutable Iterator m_it;$/;"	m	struct:boost::cb_details::iterator_wrapper	access:public
boost::cb_details::iterator_wrapper::operator ()	/usr/include/boost/circular_buffer/details.hpp	/^    Iterator operator () () const { return m_it++; }$/;"	f	struct:boost::cb_details::iterator_wrapper	access:public	signature:() const
boost::cb_details::iterator_wrapper::operator =	/usr/include/boost/circular_buffer/details.hpp	/^    iterator_wrapper<Iterator>& operator = (const iterator_wrapper<Iterator>&); \/\/ do not generate$/;"	p	struct:boost::cb_details::iterator_wrapper	access:private	signature:(const iterator_wrapper<Iterator>&)
boost::cb_details::nonconst_traits	/usr/include/boost/circular_buffer/details.hpp	/^struct nonconst_traits {$/;"	s	namespace:boost::cb_details
boost::cb_details::nonconst_traits::difference_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::difference_type difference_type;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
boost::cb_details::nonconst_traits::nonconst_self	/usr/include/boost/circular_buffer/details.hpp	/^    typedef nonconst_traits<Traits> nonconst_self;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
boost::cb_details::nonconst_traits::pointer	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::pointer pointer;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
boost::cb_details::nonconst_traits::reference	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::reference reference;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
boost::cb_details::nonconst_traits::size_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::size_type size_type;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
boost::cb_details::nonconst_traits::value_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::value_type value_type;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
boost::cb_details::operator +	/usr/include/boost/circular_buffer/details.hpp	/^operator + (typename Traits::difference_type n, const iterator<Buff, Traits>& it) {$/;"	f	namespace:boost::cb_details	signature:(typename Traits::difference_type n, const iterator<Buff, Traits>& it)
boost::cb_details::uninitialized_copy_with_alloc	/usr/include/boost/circular_buffer/details.hpp	/^ForwardIterator uninitialized_copy_with_alloc($/;"	p	namespace:boost::cb_details	signature:( InputIterator first, InputIterator last, ForwardIterator dest, Alloc& alloc)
boost::cb_details::uninitialized_copy_with_alloc	/usr/include/boost/circular_buffer/details.hpp	/^inline ForwardIterator uninitialized_copy_with_alloc(InputIterator first, InputIterator last, ForwardIterator dest,$/;"	f	namespace:boost::cb_details	signature:(InputIterator first, InputIterator last, ForwardIterator dest, Alloc& alloc)
boost::cb_details::uninitialized_fill_n_with_alloc	/usr/include/boost/circular_buffer/details.hpp	/^inline void uninitialized_fill_n_with_alloc(ForwardIterator first, Diff n, const T& item, Alloc& alloc) {$/;"	f	namespace:boost::cb_details	signature:(ForwardIterator first, Diff n, const T& item, Alloc& alloc)
boost::cb_details::uninitialized_fill_n_with_alloc	/usr/include/boost/circular_buffer/details.hpp	/^void uninitialized_fill_n_with_alloc($/;"	p	namespace:boost::cb_details	signature:( ForwardIterator first, Diff n, const T& item, Alloc& alloc)
boost::cb_details::value_type	/usr/include/boost/circular_buffer/details.hpp	/^inline typename Traits::value_type* value_type(const iterator<Buff, Traits>&) { return 0; }$/;"	f	namespace:boost::cb_details	signature:(const iterator<Buff, Traits>&)
boost::circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^class circular_buffer$/;"	c	namespace:boost	inherits:cb_details::debug_iterator_registry
boost::circular_buffer::BOOST_CLASS_REQUIRE	/usr/include/boost/circular_buffer/base.hpp	/^    BOOST_CLASS_REQUIRE(T, boost, SGIAssignableConcept);$/;"	p	class:boost::circular_buffer	access:private	signature:(T, boost, SGIAssignableConcept)
boost::circular_buffer::add	/usr/include/boost/circular_buffer/base.hpp	/^    Pointer add(Pointer p, difference_type n) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(Pointer p, difference_type n) const
boost::circular_buffer::allocate	/usr/include/boost/circular_buffer/base.hpp	/^    pointer allocate(size_type n) {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type n)
boost::circular_buffer::allocator_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef Alloc allocator_type;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::array_one	/usr/include/boost/circular_buffer/base.hpp	/^    array_range array_one() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::array_one	/usr/include/boost/circular_buffer/base.hpp	/^    const_array_range array_one() const {$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::array_range	/usr/include/boost/circular_buffer/base.hpp	/^    typedef std::pair<pointer, size_type> array_range;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::array_two	/usr/include/boost/circular_buffer/base.hpp	/^    array_range array_two() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::array_two	/usr/include/boost/circular_buffer/base.hpp	/^    const_array_range array_two() const {$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(InputIterator first, InputIterator last)
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(InputIterator first, InputIterator last, const std::input_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(InputIterator first, InputIterator last, const std::input_iterator_tag&)
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(IntegralType n, IntegralType item, const true_type&)
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(Iterator first, Iterator last, const false_type&)
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type buffer_capacity, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type buffer_capacity, InputIterator first, InputIterator last)
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type buffer_capacity, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type buffer_capacity, size_type n, param_value_type item)
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type new_capacity, ForwardIterator first, ForwardIterator last,$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type new_capacity, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type new_capacity, InputIterator first, InputIterator last, const std::input_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type new_capacity, InputIterator first, InputIterator last, const std::input_iterator_tag&)
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type new_capacity, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type new_capacity, IntegralType n, IntegralType item, const true_type&)
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(capacity_type new_capacity, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type new_capacity, Iterator first, Iterator last, const false_type&)
boost::circular_buffer::assign	/usr/include/boost/circular_buffer/base.hpp	/^    void assign(size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type n, param_value_type item)
boost::circular_buffer::assign_n	/usr/include/boost/circular_buffer/base.hpp	/^    void assign_n(capacity_type new_capacity, size_type n, const Functor& fnc) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type new_capacity, size_type n, const Functor& fnc)
boost::circular_buffer::at	/usr/include/boost/circular_buffer/base.hpp	/^    reference at(size_type index) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type index)
boost::circular_buffer::at	/usr/include/boost/circular_buffer/base.hpp	/^    return_value_type at(size_type index) const {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type index) const
boost::circular_buffer::back	/usr/include/boost/circular_buffer/base.hpp	/^    reference back() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::back	/usr/include/boost/circular_buffer/base.hpp	/^    return_value_type back() const {$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::begin	/usr/include/boost/circular_buffer/base.hpp	/^    const_iterator begin() const { return const_iterator(this, empty() ? 0 : m_first); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::begin	/usr/include/boost/circular_buffer/base.hpp	/^    iterator begin() { return iterator(this, empty() ? 0 : m_first); }$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::capacity	/usr/include/boost/circular_buffer/base.hpp	/^    capacity_type capacity() const { return m_end - m_buff; }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::capacity_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef size_type capacity_type;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::check_position	/usr/include/boost/circular_buffer/base.hpp	/^    void check_position(size_type index) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type index) const
boost::circular_buffer::circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(InputIterator first, InputIterator last)$/;"	f	class:boost::circular_buffer	access:public	signature:(InputIterator first, InputIterator last)
boost::circular_buffer::circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type())$/;"	f	class:boost::circular_buffer	access:public	signature:(InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type())
boost::circular_buffer::circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(capacity_type buffer_capacity, InputIterator first, InputIterator last,$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type buffer_capacity, InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type())
boost::circular_buffer::circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(capacity_type buffer_capacity, size_type n, param_value_type item,$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type buffer_capacity, size_type n, param_value_type item, const allocator_type& alloc = allocator_type())
boost::circular_buffer::circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(capacity_type capacity, InputIterator first, InputIterator last)$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type capacity, InputIterator first, InputIterator last)
boost::circular_buffer::circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(const circular_buffer<T, Alloc>& cb)$/;"	f	class:boost::circular_buffer	access:public	signature:(const circular_buffer<T, Alloc>& cb)
boost::circular_buffer::circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(size_type n, param_value_type item, const allocator_type& alloc = allocator_type())$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type n, param_value_type item, const allocator_type& alloc = allocator_type())
boost::circular_buffer::circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    explicit circular_buffer(capacity_type buffer_capacity, const allocator_type& alloc = allocator_type())$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type buffer_capacity, const allocator_type& alloc = allocator_type())
boost::circular_buffer::circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    explicit circular_buffer(const allocator_type& alloc = allocator_type())$/;"	f	class:boost::circular_buffer	access:public	signature:(const allocator_type& alloc = allocator_type())
boost::circular_buffer::clear	/usr/include/boost/circular_buffer/base.hpp	/^    void clear() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::const_array_range	/usr/include/boost/circular_buffer/base.hpp	/^    typedef std::pair<const_pointer, size_type> const_array_range;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::const_iterator	/usr/include/boost/circular_buffer/base.hpp	/^    typedef cb_details::iterator< circular_buffer<T, Alloc>, cb_details::const_traits<Alloc> > const_iterator;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::const_pointer	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::const_pointer const_pointer;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::const_reference	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::const_reference const_reference;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::const_reverse_iterator	/usr/include/boost/circular_buffer/base.hpp	/^    typedef boost::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::construct_or_replace	/usr/include/boost/circular_buffer/base.hpp	/^    void construct_or_replace(bool construct, pointer pos, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:private	signature:(bool construct, pointer pos, param_value_type item)
boost::circular_buffer::deallocate	/usr/include/boost/circular_buffer/base.hpp	/^    void deallocate(pointer p, size_type n) {$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer p, size_type n)
boost::circular_buffer::decrement	/usr/include/boost/circular_buffer/base.hpp	/^    void decrement(Pointer& p) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(Pointer& p) const
boost::circular_buffer::destroy	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy() {$/;"	f	class:boost::circular_buffer	access:private	signature:()
boost::circular_buffer::destroy_content	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy_content() {$/;"	f	class:boost::circular_buffer	access:private	signature:()
boost::circular_buffer::destroy_content	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy_content(const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const false_type&)
boost::circular_buffer::destroy_content	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy_content(const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const true_type&)
boost::circular_buffer::destroy_if_constructed	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy_if_constructed(pointer pos) {$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer pos)
boost::circular_buffer::destroy_item	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy_item(pointer p) {$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer p)
boost::circular_buffer::difference_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::difference_type difference_type;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::empty	/usr/include/boost/circular_buffer/base.hpp	/^    bool empty() const { return size() == 0; }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::end	/usr/include/boost/circular_buffer/base.hpp	/^    const_iterator end() const { return const_iterator(this, 0); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::end	/usr/include/boost/circular_buffer/base.hpp	/^    iterator end() { return iterator(this, 0); }$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::erase	/usr/include/boost/circular_buffer/base.hpp	/^    iterator erase(iterator first, iterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator first, iterator last)
boost::circular_buffer::erase	/usr/include/boost/circular_buffer/base.hpp	/^    iterator erase(iterator pos) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos)
boost::circular_buffer::erase_begin	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_begin(size_type n) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type n)
boost::circular_buffer::erase_begin	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_begin(size_type n, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type n, const false_type&)
boost::circular_buffer::erase_begin	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_begin(size_type n, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type n, const true_type&)
boost::circular_buffer::erase_end	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_end(size_type n) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type n)
boost::circular_buffer::erase_end	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_end(size_type n, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type n, const false_type&)
boost::circular_buffer::erase_end	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_end(size_type n, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type n, const true_type&)
boost::circular_buffer::front	/usr/include/boost/circular_buffer/base.hpp	/^    reference front() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::front	/usr/include/boost/circular_buffer/base.hpp	/^    return_value_type front() const {$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::full	/usr/include/boost/circular_buffer/base.hpp	/^    bool full() const { return capacity() == size(); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::get_allocator	/usr/include/boost/circular_buffer/base.hpp	/^    allocator_type get_allocator() const { return m_alloc; }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::get_allocator	/usr/include/boost/circular_buffer/base.hpp	/^    allocator_type& get_allocator() { return m_alloc; }$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::increment	/usr/include/boost/circular_buffer/base.hpp	/^    void increment(Pointer& p) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(Pointer& p) const
boost::circular_buffer::initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
boost::circular_buffer::initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(InputIterator first, InputIterator last, const std::input_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(InputIterator first, InputIterator last, const std::input_iterator_tag&)
boost::circular_buffer::initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(IntegralType n, IntegralType item, const true_type&)
boost::circular_buffer::initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(Iterator first, Iterator last, const false_type&)
boost::circular_buffer::initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(capacity_type buffer_capacity, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, IntegralType n, IntegralType item, const true_type&)
boost::circular_buffer::initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(capacity_type buffer_capacity, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, Iterator first, Iterator last, const false_type&)
boost::circular_buffer::initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(capacity_type buffer_capacity,$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
boost::circular_buffer::initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(capacity_type buffer_capacity,$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, ForwardIterator first, ForwardIterator last, size_type distance)
boost::circular_buffer::initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(capacity_type buffer_capacity,$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, InputIterator first, InputIterator last, const std::input_iterator_tag&)
boost::circular_buffer::initialize_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize_buffer(capacity_type buffer_capacity) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity)
boost::circular_buffer::initialize_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize_buffer(capacity_type buffer_capacity, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, param_value_type item)
boost::circular_buffer::insert	/usr/include/boost/circular_buffer/base.hpp	/^    iterator insert(iterator pos, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, param_value_type item = value_type())
boost::circular_buffer::insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(const iterator& pos, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
boost::circular_buffer::insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(const iterator& pos, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, IntegralType n, IntegralType item, const true_type&)
boost::circular_buffer::insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(const iterator& pos, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, Iterator first, Iterator last, const false_type&)
boost::circular_buffer::insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, InputIterator first, InputIterator last)
boost::circular_buffer::insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(iterator pos, InputIterator first, InputIterator last, const std::input_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(iterator pos, InputIterator first, InputIterator last, const std::input_iterator_tag&)
boost::circular_buffer::insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(iterator pos, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, size_type n, param_value_type item)
boost::circular_buffer::insert_item	/usr/include/boost/circular_buffer/base.hpp	/^    iterator insert_item(const iterator& pos, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, param_value_type item)
boost::circular_buffer::insert_n	/usr/include/boost/circular_buffer/base.hpp	/^    void insert_n(const iterator& pos, size_type n, const Wrapper& wrapper) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, size_type n, const Wrapper& wrapper)
boost::circular_buffer::is_linearized	/usr/include/boost/circular_buffer/base.hpp	/^    bool is_linearized() const { return m_first < m_last || m_last == m_buff; }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::is_uninitialized	/usr/include/boost/circular_buffer/base.hpp	/^    bool is_uninitialized(const_pointer p) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(const_pointer p) const
boost::circular_buffer::iterator	/usr/include/boost/circular_buffer/base.hpp	/^    typedef cb_details::iterator< circular_buffer<T, Alloc>, cb_details::nonconst_traits<Alloc> > iterator;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::linearize	/usr/include/boost/circular_buffer/base.hpp	/^    pointer linearize() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::m_alloc	/usr/include/boost/circular_buffer/base.hpp	/^    allocator_type m_alloc;$/;"	m	class:boost::circular_buffer	access:private
boost::circular_buffer::m_buff	/usr/include/boost/circular_buffer/base.hpp	/^    pointer m_buff;$/;"	m	class:boost::circular_buffer	access:private
boost::circular_buffer::m_end	/usr/include/boost/circular_buffer/base.hpp	/^    pointer m_end;$/;"	m	class:boost::circular_buffer	access:private
boost::circular_buffer::m_first	/usr/include/boost/circular_buffer/base.hpp	/^    pointer m_first;$/;"	m	class:boost::circular_buffer	access:private
boost::circular_buffer::m_last	/usr/include/boost/circular_buffer/base.hpp	/^    pointer m_last;$/;"	m	class:boost::circular_buffer	access:private
boost::circular_buffer::m_size	/usr/include/boost/circular_buffer/base.hpp	/^    size_type m_size;$/;"	m	class:boost::circular_buffer	access:private
boost::circular_buffer::map_pointer	/usr/include/boost/circular_buffer/base.hpp	/^    pointer map_pointer(pointer p) const { return p == 0 ? m_last : p; }$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer p) const
boost::circular_buffer::max_size	/usr/include/boost/circular_buffer/base.hpp	/^    size_type max_size() const {$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::operator =	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer<T, Alloc>& operator = (const circular_buffer<T, Alloc>& cb) {$/;"	f	class:boost::circular_buffer	access:public	signature:(const circular_buffer<T, Alloc>& cb)
boost::circular_buffer::operator []	/usr/include/boost/circular_buffer/base.hpp	/^    reference operator [] (size_type index) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type index)
boost::circular_buffer::operator []	/usr/include/boost/circular_buffer/base.hpp	/^    return_value_type operator [] (size_type index) const {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type index) const
boost::circular_buffer::param_value_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename call_traits<value_type>::param_type param_value_type;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::pointer	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::pointer pointer;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::pop_back	/usr/include/boost/circular_buffer/base.hpp	/^    void pop_back() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::pop_front	/usr/include/boost/circular_buffer/base.hpp	/^    void pop_front() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::push_back	/usr/include/boost/circular_buffer/base.hpp	/^    void push_back(param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(param_value_type item = value_type())
boost::circular_buffer::push_front	/usr/include/boost/circular_buffer/base.hpp	/^    void push_front(param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(param_value_type item = value_type())
boost::circular_buffer::rbegin	/usr/include/boost/circular_buffer/base.hpp	/^    const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::rbegin	/usr/include/boost/circular_buffer/base.hpp	/^    reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::reference	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::reference reference;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::rend	/usr/include/boost/circular_buffer/base.hpp	/^    const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::rend	/usr/include/boost/circular_buffer/base.hpp	/^    reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer::replace	/usr/include/boost/circular_buffer/base.hpp	/^    void replace(pointer pos, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer pos, param_value_type item)
boost::circular_buffer::rerase	/usr/include/boost/circular_buffer/base.hpp	/^    iterator rerase(iterator first, iterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator first, iterator last)
boost::circular_buffer::rerase	/usr/include/boost/circular_buffer/base.hpp	/^    iterator rerase(iterator pos) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos)
boost::circular_buffer::reserve	/usr/include/boost/circular_buffer/base.hpp	/^    size_type reserve() const { return capacity() - size(); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::reset	/usr/include/boost/circular_buffer/base.hpp	/^    void reset(pointer buff, pointer last, capacity_type new_capacity) {$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer buff, pointer last, capacity_type new_capacity)
boost::circular_buffer::resize	/usr/include/boost/circular_buffer/base.hpp	/^    void resize(size_type new_size, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type new_size, param_value_type item = value_type())
boost::circular_buffer::return_value_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename call_traits<value_type>::param_type return_value_type;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::reverse_iterator	/usr/include/boost/circular_buffer/base.hpp	/^    typedef boost::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    iterator rinsert(iterator pos, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, param_value_type item = value_type())
boost::circular_buffer::rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(const iterator& pos, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
boost::circular_buffer::rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(const iterator& pos, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, IntegralType n, IntegralType item, const true_type&)
boost::circular_buffer::rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(const iterator& pos, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, Iterator first, Iterator last, const false_type&)
boost::circular_buffer::rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, InputIterator first, InputIterator last)
boost::circular_buffer::rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(iterator pos, InputIterator first, InputIterator last, const std::input_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(iterator pos, InputIterator first, InputIterator last, const std::input_iterator_tag&)
boost::circular_buffer::rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(iterator pos, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, size_type n, param_value_type item)
boost::circular_buffer::rinsert_n	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert_n(const iterator& pos, size_type n, const Wrapper& wrapper) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, size_type n, const Wrapper& wrapper)
boost::circular_buffer::rotate	/usr/include/boost/circular_buffer/base.hpp	/^    void rotate(const_iterator new_begin) {$/;"	f	class:boost::circular_buffer	access:public	signature:(const_iterator new_begin)
boost::circular_buffer::rresize	/usr/include/boost/circular_buffer/base.hpp	/^    void rresize(size_type new_size, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type new_size, param_value_type item = value_type())
boost::circular_buffer::rset_capacity	/usr/include/boost/circular_buffer/base.hpp	/^    void rset_capacity(capacity_type new_capacity) {$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type new_capacity)
boost::circular_buffer::set_capacity	/usr/include/boost/circular_buffer/base.hpp	/^    void set_capacity(capacity_type new_capacity) {$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type new_capacity)
boost::circular_buffer::size	/usr/include/boost/circular_buffer/base.hpp	/^    size_type size() const { return m_size; }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
boost::circular_buffer::size_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::size_type size_type;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::sub	/usr/include/boost/circular_buffer/base.hpp	/^    Pointer sub(Pointer p, difference_type n) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(Pointer p, difference_type n) const
boost::circular_buffer::swap	/usr/include/boost/circular_buffer/base.hpp	/^    void swap(circular_buffer<T, Alloc>& cb) {$/;"	f	class:boost::circular_buffer	access:public	signature:(circular_buffer<T, Alloc>& cb)
boost::circular_buffer::swap_allocator	/usr/include/boost/circular_buffer/base.hpp	/^    void swap_allocator(circular_buffer<T, Alloc>& cb, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(circular_buffer<T, Alloc>& cb, const false_type&)
boost::circular_buffer::swap_allocator	/usr/include/boost/circular_buffer/base.hpp	/^    void swap_allocator(circular_buffer<T, Alloc>& cb, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(circular_buffer<T, Alloc>& cb, const true_type&)
boost::circular_buffer::value_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::value_type value_type;$/;"	t	class:boost::circular_buffer	access:public
boost::circular_buffer::~circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    ~circular_buffer() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
boost::circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^class circular_buffer_space_optimized :$/;"	c	namespace:boost	inherits:circular_buffer
boost::circular_buffer_space_optimized::adjust_min_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void adjust_min_capacity() {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:()
boost::circular_buffer_space_optimized::allocator_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::allocator_type allocator_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::array_range	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::array_range array_range;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::assign	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void assign(InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(InputIterator first, InputIterator last)
boost::circular_buffer_space_optimized::assign	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void assign(capacity_type capacity_ctrl, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, InputIterator first, InputIterator last)
boost::circular_buffer_space_optimized::assign	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void assign(capacity_type capacity_ctrl, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, size_type n, param_value_type item)
boost::circular_buffer_space_optimized::assign	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void assign(size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type n, param_value_type item)
boost::circular_buffer_space_optimized::capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    const capacity_type& capacity() const { return m_capacity_ctrl; }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:() const
boost::circular_buffer_space_optimized::capacity_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef cb_details::capacity_control<size_type> capacity_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::check_high_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void check_high_capacity() {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:()
boost::circular_buffer_space_optimized::check_low_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void check_low_capacity(size_type n = 1) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(size_type n = 1)
boost::circular_buffer_space_optimized::circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(InputIterator first, InputIterator last)$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(InputIterator first, InputIterator last)
boost::circular_buffer_space_optimized::circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(InputIterator first, InputIterator last,$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type())
boost::circular_buffer_space_optimized::circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(capacity_type capacity_ctrl, InputIterator first, InputIterator last)$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, InputIterator first, InputIterator last)
boost::circular_buffer_space_optimized::circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(capacity_type capacity_ctrl, InputIterator first, InputIterator last,$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type())
boost::circular_buffer_space_optimized::circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(capacity_type capacity_ctrl, param_value_type item,$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, param_value_type item, const allocator_type& alloc = allocator_type())
boost::circular_buffer_space_optimized::circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(capacity_type capacity_ctrl, size_type n, param_value_type item,$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, size_type n, param_value_type item, const allocator_type& alloc = allocator_type())
boost::circular_buffer_space_optimized::circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(const circular_buffer_space_optimized<T, Alloc>& cb)$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(const circular_buffer_space_optimized<T, Alloc>& cb)
boost::circular_buffer_space_optimized::circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    explicit circular_buffer_space_optimized(capacity_type capacity_ctrl,$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, const allocator_type& alloc = allocator_type())
boost::circular_buffer_space_optimized::circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    explicit circular_buffer_space_optimized(const allocator_type& alloc = allocator_type())$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(const allocator_type& alloc = allocator_type())
boost::circular_buffer_space_optimized::clear	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void clear() { erase(begin(), end()); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:()
boost::circular_buffer_space_optimized::const_array_range	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::const_array_range const_array_range;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::const_iterator	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::const_iterator const_iterator;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::const_pointer	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::const_pointer const_pointer;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::const_reference	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::const_reference const_reference;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::const_reverse_iterator	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::difference_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::difference_type difference_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::ensure_reserve	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    size_type ensure_reserve(size_type new_capacity, size_type buffer_size) const {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(size_type new_capacity, size_type buffer_size) const
boost::circular_buffer_space_optimized::erase	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator erase(iterator first, iterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator first, iterator last)
boost::circular_buffer_space_optimized::erase	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator erase(iterator pos) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos)
boost::circular_buffer_space_optimized::erase_begin	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void erase_begin(size_type n);$/;"	p	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type n)
boost::circular_buffer_space_optimized::erase_end	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void erase_end(size_type n);$/;"	p	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type n)
boost::circular_buffer_space_optimized::full	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    bool full() const { return m_capacity_ctrl == size(); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:() const
boost::circular_buffer_space_optimized::init_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    static size_type init_capacity(const capacity_type& capacity_ctrl, ForwardIterator first, ForwardIterator last,$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const capacity_type& capacity_ctrl, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
boost::circular_buffer_space_optimized::init_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    static size_type init_capacity(const capacity_type& capacity_ctrl, InputIterator first, InputIterator last,$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const capacity_type& capacity_ctrl, InputIterator first, InputIterator last, const std::input_iterator_tag&)
boost::circular_buffer_space_optimized::init_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    static size_type init_capacity(const capacity_type& capacity_ctrl, IntegralType n, IntegralType item,$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const capacity_type& capacity_ctrl, IntegralType n, IntegralType item, const true_type&)
boost::circular_buffer_space_optimized::init_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    static size_type init_capacity(const capacity_type& capacity_ctrl, Iterator first, Iterator last,$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const capacity_type& capacity_ctrl, Iterator first, Iterator last, const false_type&)
boost::circular_buffer_space_optimized::init_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    static size_type init_capacity(const capacity_type& capacity_ctrl, size_type n) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const capacity_type& capacity_ctrl, size_type n)
boost::circular_buffer_space_optimized::insert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator insert(iterator pos, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, param_value_type item = value_type())
boost::circular_buffer_space_optimized::insert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void insert(const iterator& pos, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const iterator& pos, IntegralType n, IntegralType item, const true_type&)
boost::circular_buffer_space_optimized::insert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void insert(const iterator& pos, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const iterator& pos, Iterator first, Iterator last, const false_type&)
boost::circular_buffer_space_optimized::insert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void insert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, InputIterator first, InputIterator last)
boost::circular_buffer_space_optimized::insert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void insert(iterator pos, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, size_type n, param_value_type item)
boost::circular_buffer_space_optimized::internal_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    size_type internal_capacity() const { return circular_buffer<T, Alloc>::capacity(); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:() const
boost::circular_buffer_space_optimized::iterator	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::iterator iterator;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::m_capacity_ctrl	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    capacity_type m_capacity_ctrl;$/;"	m	class:boost::circular_buffer_space_optimized	access:private
boost::circular_buffer_space_optimized::operator =	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized<T, Alloc>& operator = (const circular_buffer_space_optimized<T, Alloc>& cb) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(const circular_buffer_space_optimized<T, Alloc>& cb)
boost::circular_buffer_space_optimized::operator []	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    reference operator [] (size_type n) { return circular_buffer<T, Alloc>::operator[](n); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type n)
boost::circular_buffer_space_optimized::operator []	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    return_value_type operator [] (size_type n) const { return circular_buffer<T, Alloc>::operator[](n); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type n) const
boost::circular_buffer_space_optimized::param_value_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::param_value_type param_value_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::pointer	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::pointer pointer;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::pop_back	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void pop_back() {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:()
boost::circular_buffer_space_optimized::pop_front	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void pop_front() {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:()
boost::circular_buffer_space_optimized::push_back	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void push_back(param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(param_value_type item = value_type())
boost::circular_buffer_space_optimized::push_front	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void push_front(param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(param_value_type item = value_type())
boost::circular_buffer_space_optimized::reduce_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void reduce_capacity(const false_type&) {}$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const false_type&)
boost::circular_buffer_space_optimized::reduce_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void reduce_capacity(const true_type&) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const true_type&)
boost::circular_buffer_space_optimized::reference	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::reference reference;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::rerase	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator rerase(iterator first, iterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator first, iterator last)
boost::circular_buffer_space_optimized::rerase	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator rerase(iterator pos) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos)
boost::circular_buffer_space_optimized::reserve	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    size_type reserve() const { return m_capacity_ctrl - size(); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:() const
boost::circular_buffer_space_optimized::resize	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void resize(size_type new_size, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type new_size, param_value_type item = value_type())
boost::circular_buffer_space_optimized::return_value_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::return_value_type return_value_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::reverse_iterator	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::reverse_iterator reverse_iterator;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::rinsert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator rinsert(iterator pos, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, param_value_type item = value_type())
boost::circular_buffer_space_optimized::rinsert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rinsert(const iterator& pos, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const iterator& pos, IntegralType n, IntegralType item, const true_type&)
boost::circular_buffer_space_optimized::rinsert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rinsert(const iterator& pos, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const iterator& pos, Iterator first, Iterator last, const false_type&)
boost::circular_buffer_space_optimized::rinsert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rinsert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, InputIterator first, InputIterator last)
boost::circular_buffer_space_optimized::rinsert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rinsert(iterator pos, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, size_type n, param_value_type item)
boost::circular_buffer_space_optimized::rresize	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rresize(size_type new_size, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type new_size, param_value_type item = value_type())
boost::circular_buffer_space_optimized::rset_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rset_capacity(const capacity_type& capacity_ctrl) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(const capacity_type& capacity_ctrl)
boost::circular_buffer_space_optimized::set_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void set_capacity(const capacity_type& capacity_ctrl) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(const capacity_type& capacity_ctrl)
boost::circular_buffer_space_optimized::size_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::size_type size_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::swap	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void swap(circular_buffer_space_optimized<T, Alloc>& cb) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(circular_buffer_space_optimized<T, Alloc>& cb)
boost::circular_buffer_space_optimized::value_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::value_type value_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
boost::circular_buffer_space_optimized::~circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    ~circular_buffer_space_optimized();$/;"	p	class:boost::circular_buffer_space_optimized	access:public	signature:()
boost::operator !=	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator != (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
boost::operator !=	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator != (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
boost::operator <	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator < (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
boost::operator <	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator < (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
boost::operator <=	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator <= (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
boost::operator <=	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator <= (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
boost::operator ==	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator == (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
boost::operator ==	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator == (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
boost::operator >	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator > (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
boost::operator >	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator > (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
boost::operator >=	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator >= (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
boost::operator >=	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator >= (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
boost::swap	/usr/include/boost/circular_buffer/base.hpp	/^inline void swap(circular_buffer<T, Alloc>& lhs, circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(circular_buffer<T, Alloc>& lhs, circular_buffer<T, Alloc>& rhs)
boost::swap	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline void swap(circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(circular_buffer_space_optimized<T, Alloc>& lhs, circular_buffer_space_optimized<T, Alloc>& rhs)
capacity	/usr/include/boost/circular_buffer/base.hpp	/^    capacity_type capacity() const { return m_end - m_buff; }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
capacity	/usr/include/boost/circular_buffer/details.hpp	/^    Size capacity() const { return m_capacity; }$/;"	f	class:boost::cb_details::capacity_control	access:public	signature:() const
capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    const capacity_type& capacity() const { return m_capacity_ctrl; }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:() const
capacity_control	/usr/include/boost/circular_buffer/details.hpp	/^    capacity_control(Size buffer_capacity, Size min_buffer_capacity = 0)$/;"	f	class:boost::cb_details::capacity_control	access:public	signature:(Size buffer_capacity, Size min_buffer_capacity = 0)
capacity_control	/usr/include/boost/circular_buffer/details.hpp	/^class capacity_control {$/;"	c	namespace:boost::cb_details
capacity_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef size_type capacity_type;$/;"	t	class:boost::circular_buffer	access:public
capacity_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef cb_details::capacity_control<size_type> capacity_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
cb_details	/usr/include/boost/circular_buffer/debug.hpp	/^namespace cb_details {$/;"	n	namespace:boost
cb_details	/usr/include/boost/circular_buffer/details.hpp	/^namespace cb_details {$/;"	n	namespace:boost
check_high_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void check_high_capacity() {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:()
check_low_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void check_low_capacity(size_type n = 1) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(size_type n = 1)
check_position	/usr/include/boost/circular_buffer/base.hpp	/^    void check_position(size_type index) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type index) const
circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(InputIterator first, InputIterator last)$/;"	f	class:boost::circular_buffer	access:public	signature:(InputIterator first, InputIterator last)
circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type())$/;"	f	class:boost::circular_buffer	access:public	signature:(InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type())
circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(capacity_type buffer_capacity, InputIterator first, InputIterator last,$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type buffer_capacity, InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type())
circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(capacity_type buffer_capacity, size_type n, param_value_type item,$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type buffer_capacity, size_type n, param_value_type item, const allocator_type& alloc = allocator_type())
circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(capacity_type capacity, InputIterator first, InputIterator last)$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type capacity, InputIterator first, InputIterator last)
circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(const circular_buffer<T, Alloc>& cb)$/;"	f	class:boost::circular_buffer	access:public	signature:(const circular_buffer<T, Alloc>& cb)
circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer(size_type n, param_value_type item, const allocator_type& alloc = allocator_type())$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type n, param_value_type item, const allocator_type& alloc = allocator_type())
circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    explicit circular_buffer(capacity_type buffer_capacity, const allocator_type& alloc = allocator_type())$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type buffer_capacity, const allocator_type& alloc = allocator_type())
circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    explicit circular_buffer(const allocator_type& alloc = allocator_type())$/;"	f	class:boost::circular_buffer	access:public	signature:(const allocator_type& alloc = allocator_type())
circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^class circular_buffer$/;"	c	namespace:boost	inherits:cb_details::debug_iterator_registry
circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(InputIterator first, InputIterator last)$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(InputIterator first, InputIterator last)
circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(InputIterator first, InputIterator last,$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type())
circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(capacity_type capacity_ctrl, InputIterator first, InputIterator last)$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, InputIterator first, InputIterator last)
circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(capacity_type capacity_ctrl, InputIterator first, InputIterator last,$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, InputIterator first, InputIterator last, const allocator_type& alloc = allocator_type())
circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(capacity_type capacity_ctrl, param_value_type item,$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, param_value_type item, const allocator_type& alloc = allocator_type())
circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(capacity_type capacity_ctrl, size_type n, param_value_type item,$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, size_type n, param_value_type item, const allocator_type& alloc = allocator_type())
circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized(const circular_buffer_space_optimized<T, Alloc>& cb)$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(const circular_buffer_space_optimized<T, Alloc>& cb)
circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    explicit circular_buffer_space_optimized(capacity_type capacity_ctrl,$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(capacity_type capacity_ctrl, const allocator_type& alloc = allocator_type())
circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    explicit circular_buffer_space_optimized(const allocator_type& alloc = allocator_type())$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(const allocator_type& alloc = allocator_type())
circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^class circular_buffer_space_optimized :$/;"	c	namespace:boost	inherits:circular_buffer
clear	/usr/include/boost/circular_buffer/base.hpp	/^    void clear() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
clear	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void clear() { erase(begin(), end()); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:()
const_array_range	/usr/include/boost/circular_buffer/base.hpp	/^    typedef std::pair<const_pointer, size_type> const_array_range;$/;"	t	class:boost::circular_buffer	access:public
const_array_range	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::const_array_range const_array_range;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
const_iterator	/usr/include/boost/circular_buffer/base.hpp	/^    typedef cb_details::iterator< circular_buffer<T, Alloc>, cb_details::const_traits<Alloc> > const_iterator;$/;"	t	class:boost::circular_buffer	access:public
const_iterator	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::const_iterator const_iterator;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
const_pointer	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::const_pointer const_pointer;$/;"	t	class:boost::circular_buffer	access:public
const_pointer	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::const_pointer const_pointer;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
const_reference	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::const_reference const_reference;$/;"	t	class:boost::circular_buffer	access:public
const_reference	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::const_reference const_reference;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
const_reverse_iterator	/usr/include/boost/circular_buffer/base.hpp	/^    typedef boost::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:boost::circular_buffer	access:public
const_reverse_iterator	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
const_traits	/usr/include/boost/circular_buffer/details.hpp	/^struct const_traits {$/;"	s	namespace:boost::cb_details
construct_or_replace	/usr/include/boost/circular_buffer/base.hpp	/^    void construct_or_replace(bool construct, pointer pos, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:private	signature:(bool construct, pointer pos, param_value_type item)
deallocate	/usr/include/boost/circular_buffer/base.hpp	/^    void deallocate(pointer p, size_type n) {$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer p, size_type n)
debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^    debug_iterator_base();$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:()
debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^    debug_iterator_base(const debug_iterator_base& rhs);$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:(const debug_iterator_base& rhs)
debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^    debug_iterator_base(const debug_iterator_registry* registry);$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:(const debug_iterator_registry* registry)
debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^class debug_iterator_base {$/;"	c	namespace:boost::cb_details
debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^inline debug_iterator_base::debug_iterator_base() : m_registry(0), m_next(0) {}$/;"	f	class:boost::cb_details::debug_iterator_base	signature:()
debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^inline debug_iterator_base::debug_iterator_base(const debug_iterator_base& rhs)$/;"	f	class:boost::cb_details::debug_iterator_base	signature:(const debug_iterator_base& rhs)
debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^inline debug_iterator_base::debug_iterator_base(const debug_iterator_registry* registry)$/;"	f	class:boost::cb_details::debug_iterator_base	signature:(const debug_iterator_registry* registry)
debug_iterator_registry	/usr/include/boost/circular_buffer/debug.hpp	/^    debug_iterator_registry() : m_iterators(0) {}$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:()
debug_iterator_registry	/usr/include/boost/circular_buffer/debug.hpp	/^class debug_iterator_registry {$/;"	c	namespace:boost::cb_details
decrement	/usr/include/boost/circular_buffer/base.hpp	/^    void decrement(Pointer& p) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(Pointer& p) const
destroy	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy() {$/;"	f	class:boost::circular_buffer	access:private	signature:()
destroy_content	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy_content() {$/;"	f	class:boost::circular_buffer	access:private	signature:()
destroy_content	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy_content(const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const false_type&)
destroy_content	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy_content(const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const true_type&)
destroy_if_constructed	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy_if_constructed(pointer pos) {$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer pos)
destroy_item	/usr/include/boost/circular_buffer/base.hpp	/^    void destroy_item(pointer p) {$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer p)
difference_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::difference_type difference_type;$/;"	t	class:boost::circular_buffer	access:public
difference_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::difference_type difference_type;$/;"	t	struct:boost::cb_details::const_traits	access:public
difference_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::difference_type difference_type;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
difference_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename base_iterator::difference_type difference_type;$/;"	t	struct:boost::cb_details::iterator	access:public
difference_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::difference_type difference_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
distance_type	/usr/include/boost/circular_buffer/details.hpp	/^inline typename Traits::difference_type* distance_type(const iterator<Buff, Traits>&) { return 0; }$/;"	f	namespace:boost::cb_details	signature:(const iterator<Buff, Traits>&)
empty	/usr/include/boost/circular_buffer/base.hpp	/^    bool empty() const { return size() == 0; }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
end	/usr/include/boost/circular_buffer/base.hpp	/^    const_iterator end() const { return const_iterator(this, 0); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
end	/usr/include/boost/circular_buffer/base.hpp	/^    iterator end() { return iterator(this, 0); }$/;"	f	class:boost::circular_buffer	access:public	signature:()
ensure_reserve	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    size_type ensure_reserve(size_type new_capacity, size_type buffer_size) const {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(size_type new_capacity, size_type buffer_size) const
erase	/usr/include/boost/circular_buffer/base.hpp	/^    iterator erase(iterator first, iterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator first, iterator last)
erase	/usr/include/boost/circular_buffer/base.hpp	/^    iterator erase(iterator pos) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos)
erase	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator erase(iterator first, iterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator first, iterator last)
erase	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator erase(iterator pos) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos)
erase_begin	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_begin(size_type n) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type n)
erase_begin	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_begin(size_type n, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type n, const false_type&)
erase_begin	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_begin(size_type n, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type n, const true_type&)
erase_begin	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void erase_begin(size_type n);$/;"	p	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type n)
erase_end	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_end(size_type n) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type n)
erase_end	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_end(size_type n, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type n, const false_type&)
erase_end	/usr/include/boost/circular_buffer/base.hpp	/^    void erase_end(size_type n, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(size_type n, const true_type&)
erase_end	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void erase_end(size_type n);$/;"	p	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type n)
front	/usr/include/boost/circular_buffer/base.hpp	/^    reference front() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
front	/usr/include/boost/circular_buffer/base.hpp	/^    return_value_type front() const {$/;"	f	class:boost::circular_buffer	access:public	signature:() const
full	/usr/include/boost/circular_buffer/base.hpp	/^    bool full() const { return capacity() == size(); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
full	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    bool full() const { return m_capacity_ctrl == size(); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:() const
get_allocator	/usr/include/boost/circular_buffer/base.hpp	/^    allocator_type get_allocator() const { return m_alloc; }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
get_allocator	/usr/include/boost/circular_buffer/base.hpp	/^    allocator_type& get_allocator() { return m_alloc; }$/;"	f	class:boost::circular_buffer	access:public	signature:()
increment	/usr/include/boost/circular_buffer/base.hpp	/^    void increment(Pointer& p) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(Pointer& p) const
init_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    static size_type init_capacity(const capacity_type& capacity_ctrl, ForwardIterator first, ForwardIterator last,$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const capacity_type& capacity_ctrl, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
init_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    static size_type init_capacity(const capacity_type& capacity_ctrl, InputIterator first, InputIterator last,$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const capacity_type& capacity_ctrl, InputIterator first, InputIterator last, const std::input_iterator_tag&)
init_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    static size_type init_capacity(const capacity_type& capacity_ctrl, IntegralType n, IntegralType item,$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const capacity_type& capacity_ctrl, IntegralType n, IntegralType item, const true_type&)
init_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    static size_type init_capacity(const capacity_type& capacity_ctrl, Iterator first, Iterator last,$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const capacity_type& capacity_ctrl, Iterator first, Iterator last, const false_type&)
init_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    static size_type init_capacity(const capacity_type& capacity_ctrl, size_type n) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const capacity_type& capacity_ctrl, size_type n)
initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(InputIterator first, InputIterator last, const std::input_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(InputIterator first, InputIterator last, const std::input_iterator_tag&)
initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(IntegralType n, IntegralType item, const true_type&)
initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(Iterator first, Iterator last, const false_type&)
initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(capacity_type buffer_capacity, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, IntegralType n, IntegralType item, const true_type&)
initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(capacity_type buffer_capacity, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, Iterator first, Iterator last, const false_type&)
initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(capacity_type buffer_capacity,$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(capacity_type buffer_capacity,$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, ForwardIterator first, ForwardIterator last, size_type distance)
initialize	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize(capacity_type buffer_capacity,$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, InputIterator first, InputIterator last, const std::input_iterator_tag&)
initialize_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize_buffer(capacity_type buffer_capacity) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity)
initialize_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    void initialize_buffer(capacity_type buffer_capacity, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:private	signature:(capacity_type buffer_capacity, param_value_type item)
insert	/usr/include/boost/circular_buffer/base.hpp	/^    iterator insert(iterator pos, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, param_value_type item = value_type())
insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(const iterator& pos, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(const iterator& pos, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, IntegralType n, IntegralType item, const true_type&)
insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(const iterator& pos, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, Iterator first, Iterator last, const false_type&)
insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, InputIterator first, InputIterator last)
insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(iterator pos, InputIterator first, InputIterator last, const std::input_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(iterator pos, InputIterator first, InputIterator last, const std::input_iterator_tag&)
insert	/usr/include/boost/circular_buffer/base.hpp	/^    void insert(iterator pos, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, size_type n, param_value_type item)
insert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator insert(iterator pos, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, param_value_type item = value_type())
insert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void insert(const iterator& pos, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const iterator& pos, IntegralType n, IntegralType item, const true_type&)
insert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void insert(const iterator& pos, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const iterator& pos, Iterator first, Iterator last, const false_type&)
insert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void insert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, InputIterator first, InputIterator last)
insert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void insert(iterator pos, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, size_type n, param_value_type item)
insert_item	/usr/include/boost/circular_buffer/base.hpp	/^    iterator insert_item(const iterator& pos, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, param_value_type item)
insert_n	/usr/include/boost/circular_buffer/base.hpp	/^    void insert_n(const iterator& pos, size_type n, const Wrapper& wrapper) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, size_type n, const Wrapper& wrapper)
internal_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    size_type internal_capacity() const { return circular_buffer<T, Alloc>::capacity(); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:() const
invalidate	/usr/include/boost/circular_buffer/debug.hpp	/^    void invalidate() const;$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:() const
invalidate	/usr/include/boost/circular_buffer/debug.hpp	/^inline void debug_iterator_base::invalidate() const { m_registry = 0; }$/;"	f	class:boost::cb_details::debug_iterator_base	signature:() const
invalidate_all_iterators	/usr/include/boost/circular_buffer/debug.hpp	/^    void invalidate_all_iterators() {$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:()
invalidate_iterators	/usr/include/boost/circular_buffer/debug.hpp	/^    void invalidate_iterators(const Iterator& it) {$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:(const Iterator& it)
invalidate_iterators_except	/usr/include/boost/circular_buffer/debug.hpp	/^    void invalidate_iterators_except(const Iterator& it) {$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:(const Iterator& it)
is_linearized	/usr/include/boost/circular_buffer/base.hpp	/^    bool is_linearized() const { return m_first < m_last || m_last == m_buff; }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
is_uninitialized	/usr/include/boost/circular_buffer/base.hpp	/^    bool is_uninitialized(const_pointer p) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(const_pointer p) const
is_valid	/usr/include/boost/circular_buffer/debug.hpp	/^    bool is_valid(const debug_iterator_registry* registry) const;$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:(const debug_iterator_registry* registry) const
is_valid	/usr/include/boost/circular_buffer/debug.hpp	/^inline bool debug_iterator_base::is_valid(const debug_iterator_registry* registry) const {$/;"	f	class:boost::cb_details::debug_iterator_base	signature:(const debug_iterator_registry* registry) const
item_wrapper	/usr/include/boost/circular_buffer/details.hpp	/^    explicit item_wrapper(Value item) : m_item(item) {}$/;"	f	struct:boost::cb_details::item_wrapper	access:public	signature:(Value item)
item_wrapper	/usr/include/boost/circular_buffer/details.hpp	/^struct item_wrapper {$/;"	s	namespace:boost::cb_details
iterator	/usr/include/boost/circular_buffer/base.hpp	/^    typedef cb_details::iterator< circular_buffer<T, Alloc>, cb_details::nonconst_traits<Alloc> > iterator;$/;"	t	class:boost::circular_buffer	access:public
iterator	/usr/include/boost/circular_buffer/details.hpp	/^    iterator() : m_buff(0), m_it(0) {}$/;"	f	struct:boost::cb_details::iterator	access:public	signature:()
iterator	/usr/include/boost/circular_buffer/details.hpp	/^    iterator(const Buff* cb, const pointer p) : debug_iterator_base(cb), m_buff(cb), m_it(p) {}$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const Buff* cb, const pointer p)
iterator	/usr/include/boost/circular_buffer/details.hpp	/^    iterator(const Buff* cb, const pointer p) : m_buff(cb), m_it(p) {}$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const Buff* cb, const pointer p)
iterator	/usr/include/boost/circular_buffer/details.hpp	/^    iterator(const nonconst_self& it) : debug_iterator_base(it), m_buff(it.m_buff), m_it(it.m_it) {}$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const nonconst_self& it)
iterator	/usr/include/boost/circular_buffer/details.hpp	/^    iterator(const nonconst_self& it) : m_buff(it.m_buff), m_it(it.m_it) {}$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const nonconst_self& it)
iterator	/usr/include/boost/circular_buffer/details.hpp	/^struct iterator :$/;"	s	namespace:boost::cb_details	inherits:boost::iterator,debug_iterator_base
iterator	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::iterator iterator;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
iterator_category	/usr/include/boost/circular_buffer/details.hpp	/^inline std::random_access_iterator_tag iterator_category(const iterator<Buff, Traits>&) {$/;"	f	namespace:boost::cb_details	signature:(const iterator<Buff, Traits>&)
iterator_wrapper	/usr/include/boost/circular_buffer/details.hpp	/^    explicit iterator_wrapper(Iterator it) : m_it(it) {}$/;"	f	struct:boost::cb_details::iterator_wrapper	access:public	signature:(Iterator it)
iterator_wrapper	/usr/include/boost/circular_buffer/details.hpp	/^struct iterator_wrapper {$/;"	s	namespace:boost::cb_details
linearize	/usr/include/boost/circular_buffer/base.hpp	/^    pointer linearize() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
linearize_pointer	/usr/include/boost/circular_buffer/details.hpp	/^    typename Traits0::pointer linearize_pointer(const iterator<Buff, Traits0>& it) const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
m_alloc	/usr/include/boost/circular_buffer/base.hpp	/^    allocator_type m_alloc;$/;"	m	class:boost::circular_buffer	access:private
m_alloc	/usr/include/boost/circular_buffer/details.hpp	/^    Alloc& m_alloc;$/;"	m	struct:boost::cb_details::assign_n	access:public
m_alloc	/usr/include/boost/circular_buffer/details.hpp	/^    Alloc& m_alloc;$/;"	m	struct:boost::cb_details::assign_range	access:public
m_buff	/usr/include/boost/circular_buffer/base.hpp	/^    pointer m_buff;$/;"	m	class:boost::circular_buffer	access:private
m_buff	/usr/include/boost/circular_buffer/details.hpp	/^    const Buff* m_buff;$/;"	m	struct:boost::cb_details::iterator	access:public
m_capacity	/usr/include/boost/circular_buffer/details.hpp	/^    Size m_capacity;$/;"	m	class:boost::cb_details::capacity_control	access:private
m_capacity_ctrl	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    capacity_type m_capacity_ctrl;$/;"	m	class:boost::circular_buffer_space_optimized	access:private
m_end	/usr/include/boost/circular_buffer/base.hpp	/^    pointer m_end;$/;"	m	class:boost::circular_buffer	access:private
m_first	/usr/include/boost/circular_buffer/base.hpp	/^    pointer m_first;$/;"	m	class:boost::circular_buffer	access:private
m_first	/usr/include/boost/circular_buffer/details.hpp	/^    const Iterator& m_first;$/;"	m	struct:boost::cb_details::assign_range	access:public
m_it	/usr/include/boost/circular_buffer/details.hpp	/^    mutable Iterator m_it;$/;"	m	struct:boost::cb_details::iterator_wrapper	access:public
m_it	/usr/include/boost/circular_buffer/details.hpp	/^    pointer m_it;$/;"	m	struct:boost::cb_details::iterator	access:public
m_item	/usr/include/boost/circular_buffer/details.hpp	/^    Value m_item;$/;"	m	struct:boost::cb_details::assign_n	access:public
m_item	/usr/include/boost/circular_buffer/details.hpp	/^    Value m_item;$/;"	m	struct:boost::cb_details::item_wrapper	access:public
m_iterators	/usr/include/boost/circular_buffer/debug.hpp	/^    mutable const debug_iterator_base* m_iterators;$/;"	m	class:boost::cb_details::debug_iterator_registry	access:private
m_last	/usr/include/boost/circular_buffer/base.hpp	/^    pointer m_last;$/;"	m	class:boost::circular_buffer	access:private
m_last	/usr/include/boost/circular_buffer/details.hpp	/^    const Iterator& m_last;$/;"	m	struct:boost::cb_details::assign_range	access:public
m_min_capacity	/usr/include/boost/circular_buffer/details.hpp	/^    Size m_min_capacity;$/;"	m	class:boost::cb_details::capacity_control	access:private
m_n	/usr/include/boost/circular_buffer/details.hpp	/^    size_type m_n;$/;"	m	struct:boost::cb_details::assign_n	access:public
m_next	/usr/include/boost/circular_buffer/debug.hpp	/^    mutable const debug_iterator_base* m_next;$/;"	m	class:boost::cb_details::debug_iterator_base	access:private
m_registry	/usr/include/boost/circular_buffer/debug.hpp	/^    mutable const debug_iterator_registry* m_registry;$/;"	m	class:boost::cb_details::debug_iterator_base	access:private
m_size	/usr/include/boost/circular_buffer/base.hpp	/^    size_type m_size;$/;"	m	class:boost::circular_buffer	access:private
map_pointer	/usr/include/boost/circular_buffer/base.hpp	/^    pointer map_pointer(pointer p) const { return p == 0 ? m_last : p; }$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer p) const
max_size	/usr/include/boost/circular_buffer/base.hpp	/^    size_type max_size() const {$/;"	f	class:boost::circular_buffer	access:public	signature:() const
min_capacity	/usr/include/boost/circular_buffer/details.hpp	/^    Size min_capacity() const { return m_min_capacity; }$/;"	f	class:boost::cb_details::capacity_control	access:public	signature:() const
next	/usr/include/boost/circular_buffer/debug.hpp	/^    const debug_iterator_base* next() const;$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:() const
next	/usr/include/boost/circular_buffer/debug.hpp	/^inline const debug_iterator_base* debug_iterator_base::next() const { return m_next; }$/;"	f	class:boost::cb_details::debug_iterator_base	signature:() const
nonconst_self	/usr/include/boost/circular_buffer/details.hpp	/^    typedef iterator<Buff, typename Traits::nonconst_self> nonconst_self;$/;"	t	struct:boost::cb_details::iterator	access:public
nonconst_self	/usr/include/boost/circular_buffer/details.hpp	/^    typedef nonconst_traits<Traits> nonconst_self;$/;"	t	struct:boost::cb_details::const_traits	access:public
nonconst_self	/usr/include/boost/circular_buffer/details.hpp	/^    typedef nonconst_traits<Traits> nonconst_self;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
nonconst_traits	/usr/include/boost/circular_buffer/details.hpp	/^struct nonconst_traits {$/;"	s	namespace:boost::cb_details
operator !=	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator != (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
operator !=	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator != (const iterator<Buff, Traits0>& it) const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
operator !=	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator != (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
operator ()	/usr/include/boost/circular_buffer/details.hpp	/^    Iterator operator () () const { return m_it++; }$/;"	f	struct:boost::cb_details::iterator_wrapper	access:public	signature:() const
operator ()	/usr/include/boost/circular_buffer/details.hpp	/^    Pointer operator () () const { return &m_item; }$/;"	f	struct:boost::cb_details::item_wrapper	access:public	signature:() const
operator ()	/usr/include/boost/circular_buffer/details.hpp	/^    void operator () (Pointer p) const {$/;"	f	struct:boost::cb_details::assign_n	access:public	signature:(Pointer p) const
operator ()	/usr/include/boost/circular_buffer/details.hpp	/^    void operator () (Pointer p) const {$/;"	f	struct:boost::cb_details::assign_range	access:public	signature:(Pointer p) const
operator *	/usr/include/boost/circular_buffer/details.hpp	/^    reference operator * () const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:() const
operator +	/usr/include/boost/circular_buffer/details.hpp	/^    iterator operator + (difference_type n) const { return iterator<Buff, Traits>(*this) += n; }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(difference_type n) const
operator +	/usr/include/boost/circular_buffer/details.hpp	/^operator + (typename Traits::difference_type n, const iterator<Buff, Traits>& it) {$/;"	f	namespace:boost::cb_details	signature:(typename Traits::difference_type n, const iterator<Buff, Traits>& it)
operator ++	/usr/include/boost/circular_buffer/details.hpp	/^    iterator operator ++ (int) {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(int)
operator ++	/usr/include/boost/circular_buffer/details.hpp	/^    iterator& operator ++ () {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:()
operator +=	/usr/include/boost/circular_buffer/details.hpp	/^    iterator& operator += (difference_type n) {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(difference_type n)
operator -	/usr/include/boost/circular_buffer/details.hpp	/^    difference_type operator - (const iterator<Buff, Traits0>& it) const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
operator -	/usr/include/boost/circular_buffer/details.hpp	/^    iterator operator - (difference_type n) const { return iterator<Buff, Traits>(*this) -= n; }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(difference_type n) const
operator --	/usr/include/boost/circular_buffer/details.hpp	/^    iterator operator -- (int) {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(int)
operator --	/usr/include/boost/circular_buffer/details.hpp	/^    iterator& operator -- () {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:()
operator -=	/usr/include/boost/circular_buffer/details.hpp	/^    iterator& operator -= (difference_type n) {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(difference_type n)
operator ->	/usr/include/boost/circular_buffer/details.hpp	/^    pointer operator -> () const { return &(operator*()); }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:() const
operator <	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator < (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
operator <	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator < (const iterator<Buff, Traits0>& it) const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
operator <	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator < (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
operator <=	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator <= (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
operator <=	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator <= (const iterator<Buff, Traits0>& it) const { return !(it < *this); }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
operator <=	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator <= (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
operator =	/usr/include/boost/circular_buffer/base.hpp	/^    circular_buffer<T, Alloc>& operator = (const circular_buffer<T, Alloc>& cb) {$/;"	f	class:boost::circular_buffer	access:public	signature:(const circular_buffer<T, Alloc>& cb)
operator =	/usr/include/boost/circular_buffer/debug.hpp	/^    debug_iterator_base& operator = (const debug_iterator_base& rhs);$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:(const debug_iterator_base& rhs)
operator =	/usr/include/boost/circular_buffer/debug.hpp	/^inline debug_iterator_base& debug_iterator_base::operator = (const debug_iterator_base& rhs) {$/;"	f	class:boost::cb_details::debug_iterator_base	signature:(const debug_iterator_base& rhs)
operator =	/usr/include/boost/circular_buffer/details.hpp	/^    assign_n<Value, Alloc>& operator = (const assign_n<Value, Alloc>&); \/\/ do not generate$/;"	p	struct:boost::cb_details::assign_n	access:private	signature:(const assign_n<Value, Alloc>&)
operator =	/usr/include/boost/circular_buffer/details.hpp	/^    assign_range<Iterator, Alloc>& operator = (const assign_range<Iterator, Alloc>&); \/\/ do not generate$/;"	p	struct:boost::cb_details::assign_range	access:private	signature:(const assign_range<Iterator, Alloc>&)
operator =	/usr/include/boost/circular_buffer/details.hpp	/^    item_wrapper<Pointer, Value>& operator = (const item_wrapper<Pointer, Value>&); \/\/ do not generate$/;"	p	struct:boost::cb_details::item_wrapper	access:private	signature:(const item_wrapper<Pointer, Value>&)
operator =	/usr/include/boost/circular_buffer/details.hpp	/^    iterator& operator = (const iterator& it) {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator& it)
operator =	/usr/include/boost/circular_buffer/details.hpp	/^    iterator_wrapper<Iterator>& operator = (const iterator_wrapper<Iterator>&); \/\/ do not generate$/;"	p	struct:boost::cb_details::iterator_wrapper	access:private	signature:(const iterator_wrapper<Iterator>&)
operator =	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    circular_buffer_space_optimized<T, Alloc>& operator = (const circular_buffer_space_optimized<T, Alloc>& cb) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(const circular_buffer_space_optimized<T, Alloc>& cb)
operator ==	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator == (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
operator ==	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator == (const iterator<Buff, Traits0>& it) const {$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
operator ==	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator == (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
operator >	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator > (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
operator >	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator > (const iterator<Buff, Traits0>& it) const { return it < *this; }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
operator >	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator > (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
operator >=	/usr/include/boost/circular_buffer/base.hpp	/^inline bool operator >= (const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(const circular_buffer<T, Alloc>& lhs, const circular_buffer<T, Alloc>& rhs)
operator >=	/usr/include/boost/circular_buffer/details.hpp	/^    bool operator >= (const iterator<Buff, Traits0>& it) const { return !(*this < it); }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(const iterator<Buff, Traits0>& it) const
operator >=	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline bool operator >= (const circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(const circular_buffer_space_optimized<T, Alloc>& lhs, const circular_buffer_space_optimized<T, Alloc>& rhs)
operator Size	/usr/include/boost/circular_buffer/details.hpp	/^    operator Size() const { return m_capacity; }$/;"	f	class:boost::cb_details::capacity_control	access:public	signature:() const
operator []	/usr/include/boost/circular_buffer/base.hpp	/^    reference operator [] (size_type index) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type index)
operator []	/usr/include/boost/circular_buffer/base.hpp	/^    return_value_type operator [] (size_type index) const {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type index) const
operator []	/usr/include/boost/circular_buffer/details.hpp	/^    reference operator [] (difference_type n) const { return *(*this + n); }$/;"	f	struct:boost::cb_details::iterator	access:public	signature:(difference_type n) const
operator []	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    reference operator [] (size_type n) { return circular_buffer<T, Alloc>::operator[](n); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type n)
operator []	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    return_value_type operator [] (size_type n) const { return circular_buffer<T, Alloc>::operator[](n); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type n) const
param_value_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename call_traits<value_type>::param_type param_value_type;$/;"	t	class:boost::circular_buffer	access:public
param_value_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::param_value_type param_value_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
pointer	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::pointer pointer;$/;"	t	class:boost::circular_buffer	access:public
pointer	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::const_pointer pointer;$/;"	t	struct:boost::cb_details::const_traits	access:public
pointer	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::pointer pointer;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
pointer	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename base_iterator::pointer pointer;$/;"	t	struct:boost::cb_details::iterator	access:public
pointer	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::pointer pointer;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
pop_back	/usr/include/boost/circular_buffer/base.hpp	/^    void pop_back() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
pop_back	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void pop_back() {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:()
pop_front	/usr/include/boost/circular_buffer/base.hpp	/^    void pop_front() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
pop_front	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void pop_front() {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:()
push_back	/usr/include/boost/circular_buffer/base.hpp	/^    void push_back(param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(param_value_type item = value_type())
push_back	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void push_back(param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(param_value_type item = value_type())
push_front	/usr/include/boost/circular_buffer/base.hpp	/^    void push_front(param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(param_value_type item = value_type())
push_front	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void push_front(param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(param_value_type item = value_type())
rbegin	/usr/include/boost/circular_buffer/base.hpp	/^    const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
rbegin	/usr/include/boost/circular_buffer/base.hpp	/^    reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:boost::circular_buffer	access:public	signature:()
reduce_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void reduce_capacity(const false_type&) {}$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const false_type&)
reduce_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void reduce_capacity(const true_type&) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const true_type&)
reference	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::reference reference;$/;"	t	class:boost::circular_buffer	access:public
reference	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::const_reference reference;$/;"	t	struct:boost::cb_details::const_traits	access:public
reference	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::reference reference;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
reference	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename base_iterator::reference reference;$/;"	t	struct:boost::cb_details::iterator	access:public
reference	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::reference reference;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
register_iterator	/usr/include/boost/circular_buffer/debug.hpp	/^    void register_iterator(const debug_iterator_base* it) const {$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:(const debug_iterator_base* it) const
register_self	/usr/include/boost/circular_buffer/debug.hpp	/^    void register_self();$/;"	p	class:boost::cb_details::debug_iterator_base	access:private	signature:()
register_self	/usr/include/boost/circular_buffer/debug.hpp	/^inline void debug_iterator_base::register_self() {$/;"	f	class:boost::cb_details::debug_iterator_base	signature:()
remove	/usr/include/boost/circular_buffer/debug.hpp	/^    void remove(const debug_iterator_base* current,$/;"	f	class:boost::cb_details::debug_iterator_registry	access:private	signature:(const debug_iterator_base* current, const debug_iterator_base* previous) const
rend	/usr/include/boost/circular_buffer/base.hpp	/^    const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
rend	/usr/include/boost/circular_buffer/base.hpp	/^    reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:boost::circular_buffer	access:public	signature:()
replace	/usr/include/boost/circular_buffer/base.hpp	/^    void replace(pointer pos, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer pos, param_value_type item)
rerase	/usr/include/boost/circular_buffer/base.hpp	/^    iterator rerase(iterator first, iterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator first, iterator last)
rerase	/usr/include/boost/circular_buffer/base.hpp	/^    iterator rerase(iterator pos) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos)
rerase	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator rerase(iterator first, iterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator first, iterator last)
rerase	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator rerase(iterator pos) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos)
reserve	/usr/include/boost/circular_buffer/base.hpp	/^    size_type reserve() const { return capacity() - size(); }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
reserve	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    size_type reserve() const { return m_capacity_ctrl - size(); }$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:() const
reset	/usr/include/boost/circular_buffer/base.hpp	/^    void reset(pointer buff, pointer last, capacity_type new_capacity) {$/;"	f	class:boost::circular_buffer	access:private	signature:(pointer buff, pointer last, capacity_type new_capacity)
resize	/usr/include/boost/circular_buffer/base.hpp	/^    void resize(size_type new_size, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type new_size, param_value_type item = value_type())
resize	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void resize(size_type new_size, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type new_size, param_value_type item = value_type())
return_value_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename call_traits<value_type>::param_type return_value_type;$/;"	t	class:boost::circular_buffer	access:public
return_value_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::return_value_type return_value_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
reverse_iterator	/usr/include/boost/circular_buffer/base.hpp	/^    typedef boost::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:boost::circular_buffer	access:public
reverse_iterator	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::reverse_iterator reverse_iterator;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    iterator rinsert(iterator pos, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, param_value_type item = value_type())
rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(const iterator& pos, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, ForwardIterator first, ForwardIterator last, const std::forward_iterator_tag&)
rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(const iterator& pos, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, IntegralType n, IntegralType item, const true_type&)
rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(const iterator& pos, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, Iterator first, Iterator last, const false_type&)
rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, InputIterator first, InputIterator last)
rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(iterator pos, InputIterator first, InputIterator last, const std::input_iterator_tag&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(iterator pos, InputIterator first, InputIterator last, const std::input_iterator_tag&)
rinsert	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert(iterator pos, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer	access:public	signature:(iterator pos, size_type n, param_value_type item)
rinsert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    iterator rinsert(iterator pos, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, param_value_type item = value_type())
rinsert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rinsert(const iterator& pos, IntegralType n, IntegralType item, const true_type&) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const iterator& pos, IntegralType n, IntegralType item, const true_type&)
rinsert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rinsert(const iterator& pos, Iterator first, Iterator last, const false_type&) {$/;"	f	class:boost::circular_buffer_space_optimized	access:private	signature:(const iterator& pos, Iterator first, Iterator last, const false_type&)
rinsert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rinsert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, InputIterator first, InputIterator last)
rinsert	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rinsert(iterator pos, size_type n, param_value_type item) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(iterator pos, size_type n, param_value_type item)
rinsert_n	/usr/include/boost/circular_buffer/base.hpp	/^    void rinsert_n(const iterator& pos, size_type n, const Wrapper& wrapper) {$/;"	f	class:boost::circular_buffer	access:private	signature:(const iterator& pos, size_type n, const Wrapper& wrapper)
rotate	/usr/include/boost/circular_buffer/base.hpp	/^    void rotate(const_iterator new_begin) {$/;"	f	class:boost::circular_buffer	access:public	signature:(const_iterator new_begin)
rresize	/usr/include/boost/circular_buffer/base.hpp	/^    void rresize(size_type new_size, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer	access:public	signature:(size_type new_size, param_value_type item = value_type())
rresize	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rresize(size_type new_size, param_value_type item = value_type()) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(size_type new_size, param_value_type item = value_type())
rset_capacity	/usr/include/boost/circular_buffer/base.hpp	/^    void rset_capacity(capacity_type new_capacity) {$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type new_capacity)
rset_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void rset_capacity(const capacity_type& capacity_ctrl) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(const capacity_type& capacity_ctrl)
set_capacity	/usr/include/boost/circular_buffer/base.hpp	/^    void set_capacity(capacity_type new_capacity) {$/;"	f	class:boost::circular_buffer	access:public	signature:(capacity_type new_capacity)
set_capacity	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void set_capacity(const capacity_type& capacity_ctrl) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(const capacity_type& capacity_ctrl)
set_next	/usr/include/boost/circular_buffer/debug.hpp	/^    void set_next(const debug_iterator_base* it) const;$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:(const debug_iterator_base* it) const
set_next	/usr/include/boost/circular_buffer/debug.hpp	/^inline void debug_iterator_base::set_next(const debug_iterator_base* it) const { m_next = it; }$/;"	f	class:boost::cb_details::debug_iterator_base	signature:(const debug_iterator_base* it) const
size	/usr/include/boost/circular_buffer/base.hpp	/^    size_type size() const { return m_size; }$/;"	f	class:boost::circular_buffer	access:public	signature:() const
size_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::size_type size_type;$/;"	t	class:boost::circular_buffer	access:public
size_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Alloc::size_type size_type;$/;"	t	struct:boost::cb_details::assign_n	access:public
size_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::size_type size_type;$/;"	t	struct:boost::cb_details::const_traits	access:public
size_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::size_type size_type;$/;"	t	struct:boost::cb_details::iterator	access:public
size_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::size_type size_type;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
size_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::size_type size_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
std	/usr/include/boost/circular_buffer/base.hpp	/^namespace std {$/;"	n
sub	/usr/include/boost/circular_buffer/base.hpp	/^    Pointer sub(Pointer p, difference_type n) const {$/;"	f	class:boost::circular_buffer	access:private	signature:(Pointer p, difference_type n) const
swap	/usr/include/boost/circular_buffer/base.hpp	/^    void swap(circular_buffer<T, Alloc>& cb) {$/;"	f	class:boost::circular_buffer	access:public	signature:(circular_buffer<T, Alloc>& cb)
swap	/usr/include/boost/circular_buffer/base.hpp	/^inline void swap(circular_buffer<T, Alloc>& lhs, circular_buffer<T, Alloc>& rhs) {$/;"	f	namespace:boost	signature:(circular_buffer<T, Alloc>& lhs, circular_buffer<T, Alloc>& rhs)
swap	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    void swap(circular_buffer_space_optimized<T, Alloc>& cb) {$/;"	f	class:boost::circular_buffer_space_optimized	access:public	signature:(circular_buffer_space_optimized<T, Alloc>& cb)
swap	/usr/include/boost/circular_buffer/space_optimized.hpp	/^inline void swap(circular_buffer_space_optimized<T, Alloc>& lhs,$/;"	f	namespace:boost	signature:(circular_buffer_space_optimized<T, Alloc>& lhs, circular_buffer_space_optimized<T, Alloc>& rhs)
swap_allocator	/usr/include/boost/circular_buffer/base.hpp	/^    void swap_allocator(circular_buffer<T, Alloc>& cb, const false_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(circular_buffer<T, Alloc>& cb, const false_type&)
swap_allocator	/usr/include/boost/circular_buffer/base.hpp	/^    void swap_allocator(circular_buffer<T, Alloc>& cb, const true_type&) {$/;"	f	class:boost::circular_buffer	access:private	signature:(circular_buffer<T, Alloc>& cb, const true_type&)
uninitialized_copy_with_alloc	/usr/include/boost/circular_buffer/details.hpp	/^ForwardIterator uninitialized_copy_with_alloc($/;"	p	namespace:boost::cb_details	signature:( InputIterator first, InputIterator last, ForwardIterator dest, Alloc& alloc)
uninitialized_copy_with_alloc	/usr/include/boost/circular_buffer/details.hpp	/^inline ForwardIterator uninitialized_copy_with_alloc(InputIterator first, InputIterator last, ForwardIterator dest,$/;"	f	namespace:boost::cb_details	signature:(InputIterator first, InputIterator last, ForwardIterator dest, Alloc& alloc)
uninitialized_fill_n_with_alloc	/usr/include/boost/circular_buffer/details.hpp	/^inline void uninitialized_fill_n_with_alloc(ForwardIterator first, Diff n, const T& item, Alloc& alloc) {$/;"	f	namespace:boost::cb_details	signature:(ForwardIterator first, Diff n, const T& item, Alloc& alloc)
uninitialized_fill_n_with_alloc	/usr/include/boost/circular_buffer/details.hpp	/^void uninitialized_fill_n_with_alloc($/;"	p	namespace:boost::cb_details	signature:( ForwardIterator first, Diff n, const T& item, Alloc& alloc)
unregister_iterator	/usr/include/boost/circular_buffer/debug.hpp	/^    void unregister_iterator(const debug_iterator_base* it) const {$/;"	f	class:boost::cb_details::debug_iterator_registry	access:public	signature:(const debug_iterator_base* it) const
unregister_self	/usr/include/boost/circular_buffer/debug.hpp	/^    void unregister_self();$/;"	p	class:boost::cb_details::debug_iterator_base	access:private	signature:()
unregister_self	/usr/include/boost/circular_buffer/debug.hpp	/^inline void debug_iterator_base::unregister_self() {$/;"	f	class:boost::cb_details::debug_iterator_base	signature:()
value_type	/usr/include/boost/circular_buffer/base.hpp	/^    typedef typename Alloc::value_type value_type;$/;"	t	class:boost::circular_buffer	access:public
value_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::value_type value_type;$/;"	t	struct:boost::cb_details::const_traits	access:public
value_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename Traits::value_type value_type;$/;"	t	struct:boost::cb_details::nonconst_traits	access:public
value_type	/usr/include/boost/circular_buffer/details.hpp	/^    typedef typename base_iterator::value_type value_type;$/;"	t	struct:boost::cb_details::iterator	access:public
value_type	/usr/include/boost/circular_buffer/details.hpp	/^inline typename Traits::value_type* value_type(const iterator<Buff, Traits>&) { return 0; }$/;"	f	namespace:boost::cb_details	signature:(const iterator<Buff, Traits>&)
value_type	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    typedef typename circular_buffer<T, Alloc>::value_type value_type;$/;"	t	class:boost::circular_buffer_space_optimized	access:public
~circular_buffer	/usr/include/boost/circular_buffer/base.hpp	/^    ~circular_buffer() {$/;"	f	class:boost::circular_buffer	access:public	signature:()
~circular_buffer_space_optimized	/usr/include/boost/circular_buffer/space_optimized.hpp	/^    ~circular_buffer_space_optimized();$/;"	p	class:boost::circular_buffer_space_optimized	access:public	signature:()
~debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^    ~debug_iterator_base();$/;"	p	class:boost::cb_details::debug_iterator_base	access:public	signature:()
~debug_iterator_base	/usr/include/boost/circular_buffer/debug.hpp	/^inline debug_iterator_base::~debug_iterator_base() { unregister_self(); }$/;"	f	class:boost::cb_details::debug_iterator_base	signature:()
