!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_ACCUMULATORS_ACCUMULATORS_FWD_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/accumulators_fwd.hpp	9;"	d
BOOST_ACCUMULATORS_ACCUMULATORS_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/accumulators.hpp	10;"	d
BOOST_ACCUMULATORS_ACCUMULATOR_SET_CTOR	/usr/include/boost/accumulators/framework/accumulator_set.hpp	175;"	d
BOOST_ACCUMULATORS_ACCUMULATOR_SET_FUN_OP	/usr/include/boost/accumulators/framework/accumulator_set.hpp	261;"	d
BOOST_ACCUMULATORS_ARGS_OP	/usr/include/boost/accumulators/framework/extractor.hpp	171;"	d
BOOST_ACCUMULATORS_ARRAY_REM	/usr/include/boost/accumulators/framework/extractor.hpp	161;"	d
BOOST_ACCUMULATORS_BROKEN_CONST_OVERLOADS	/usr/include/boost/accumulators/accumulators_fwd.hpp	39;"	d
BOOST_ACCUMULATORS_DEFINE_EXTRACTOR	/usr/include/boost/accumulators/framework/extractor.hpp	220;"	d
BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN	/usr/include/boost/accumulators/framework/extractor.hpp	211;"	d
BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN_IMPL	/usr/include/boost/accumulators/framework/extractor.hpp	190;"	d
BOOST_ACCUMULATORS_EXTRACTOR_FUN_OP	/usr/include/boost/accumulators/framework/extractor.hpp	123;"	d
BOOST_ACCUMULATORS_EXTRACT_RESULT_FUN	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^  , BOOST_ACCUMULATORS_EXTRACT_RESULT_FUN$/;"	m	namespace:boost::accumulators
BOOST_ACCUMULATORS_EXTRACT_RESULT_FUN	/usr/include/boost/accumulators/framework/accumulator_set.hpp	373;"	d
BOOST_ACCUMULATORS_EXTRACT_RESULT_FWD	/usr/include/boost/accumulators/accumulators_fwd.hpp	138;"	d
BOOST_ACCUMULATORS_FRAMEWORK_ACCUMULATORS_BASE_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/framework/accumulator_base.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_ACCUMULATORS_DROPPABLE_ACCUMULATOR_HPP_EAN_13_12_2005	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_ACCUMULATORS_EXTERNAL_ACCUMULATOR_HPP_EAN_01_12_2005	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_ACCUMULATORS_REFERENCE_ACCUMULATOR_HPP_EAN_03_23_2006	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_ACCUMULATORS_VALUE_ACCUMULATOR_HPP_EAN_03_23_2006	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_ACCUMULATOR_CONCEPT_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/framework/accumulator_concept.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_ACCUMULATOR_SET_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/framework/accumulator_set.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_DEPENDS_ON_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/framework/depends_on.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_EXTERNAL_HPP_EAN_01_12_2005	/usr/include/boost/accumulators/framework/external.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_EXTRACTOR_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/framework/extractor.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_PARAMETERS_ACCUMULATOR_HPP_EAN_31_10_2005	/usr/include/boost/accumulators/framework/parameters/accumulator.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_PARAMETERS_SAMPLE_HPP_EAN_31_10_2005	/usr/include/boost/accumulators/framework/parameters/sample.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_PARAMETERS_WEIGHTS_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/framework/parameters/weights.hpp	9;"	d
BOOST_ACCUMULATORS_FRAMEWORK_PARAMETERS_WEIGHT_HPP_EAN_31_10_2005	/usr/include/boost/accumulators/framework/parameters/weight.hpp	9;"	d
BOOST_ACCUMULATORS_GCC_VERSION	/usr/include/boost/accumulators/accumulators_fwd.hpp	51;"	d
BOOST_ACCUMULATORS_IGNORE_GLOBAL	/usr/include/boost/accumulators/accumulators_fwd.hpp	188;"	d
BOOST_ACCUMULATORS_MAKE_FEATURE	/usr/include/boost/accumulators/framework/extractor.hpp	181;"	d
BOOST_ACCUMULATORS_MAX_ARGS	/usr/include/boost/accumulators/accumulators_fwd.hpp	34;"	d
BOOST_ACCUMULATORS_MAX_FEATURES	/usr/include/boost/accumulators/accumulators_fwd.hpp	24;"	d
BOOST_ACCUMULATORS_PARAMS_OP	/usr/include/boost/accumulators/framework/extractor.hpp	176;"	d
BOOST_ACCUMULATORS_PROTO_DISABLE_IF_IS_CONST	/usr/include/boost/accumulators/accumulators_fwd.hpp	45;"	d
BOOST_ACCUMULATORS_PROTO_DISABLE_IF_IS_CONST	/usr/include/boost/accumulators/accumulators_fwd.hpp	48;"	d
BOOST_ACCUMULATORS_PROTO_DISABLE_IF_IS_CONST	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^find_accumulator(AccumulatorSet &acc BOOST_ACCUMULATORS_PROTO_DISABLE_IF_IS_CONST(AccumulatorSet))$/;"	f	namespace:boost::accumulators	signature:(AccumulatorSet)
BOOST_ACCUMULATORS_SEQ_REM	/usr/include/boost/accumulators/framework/extractor.hpp	166;"	d
BOOST_ACCUMULATORS_STATISTICS_COUNT_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/count.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_COVARIANCE_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/covariance.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_DENSITY_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/density.hpp	10;"	d
BOOST_ACCUMULATORS_STATISTICS_ERROR_OF_HPP_EAN_29_11_2005	/usr/include/boost/accumulators/statistics/error_of.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_ERROR_OF_MEAN_HPP_EAN_27_03_2006	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_EXTENDED_SINGLE_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_EXTENDED_SINGLE_QUANTILE_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_HPP_EAN_01_17_2006	/usr/include/boost/accumulators/statistics.hpp	10;"	d
BOOST_ACCUMULATORS_STATISTICS_KURTOSIS_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/kurtosis.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_MAX_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/max.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_MEAN_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/mean.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_MEDIAN_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/median.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_MIN_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/min.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_MOMENT_HPP_EAN_15_11_2005	/usr/include/boost/accumulators/statistics/moment.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_PARAMETERS_QUANTILE_PROBABILITY_HPP_EAN_03_11_2005	/usr/include/boost/accumulators/statistics/parameters/quantile_probability.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_PEAKS_OVER_THRESHOLD_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_POT_QUANTILE_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_POT_TAIL_MEAN_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_P_SQUARE_CUMULATIVE_DISTRIBUTION_HPP_03_19_2012	/usr/include/boost/accumulators/statistics/p_square_cumulative_distribution.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_P_SQUARE_CUMUL_DIST_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_P_SQUARE_QUANTILE_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_ROLLING_COUNT_HPP_EAN_26_12_2008	/usr/include/boost/accumulators/statistics/rolling_count.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_ROLLING_MEAN_HPP_EAN_26_12_2008	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_ROLLING_SUM_HPP_EAN_26_12_2008	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_ROLLING_WINDOW_HPP_EAN_26_12_2008	/usr/include/boost/accumulators/statistics/rolling_window.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_SKEWNESS_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/skewness.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_STATISTICS_FWD_HPP_EAN_23_11_2005	/usr/include/boost/accumulators/statistics_fwd.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_STATS_HPP_EAN_08_12_2005	/usr/include/boost/accumulators/framework/features.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_STATS_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/stats.hpp	10;"	d
BOOST_ACCUMULATORS_STATISTICS_SUM_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/sum.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_SUM_KAHAN_HPP_EAN_26_07_2010	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_TAIL_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/tail.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_TAIL_MEAN_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/tail_mean.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_TAIL_QUANTILE_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_TAIL_VARIATE_MEANS_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_TIMES2_ITERATOR_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_VARIANCE_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/variance.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_VARIATES_COVARIATE_HPP_EAN_03_11_2005	/usr/include/boost/accumulators/statistics/variates/covariate.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_COVARIANCE_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_DENSITY_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/weighted_density.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_EXTENDED_P_SQUARE_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_KURTOSIS_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_MEAN_HPP_EAN_03_11_2005	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_MEDIAN_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/weighted_median.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_MOMENT_HPP_EAN_15_11_2005	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_PEAKS_OVER_THRESHOLD_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_P_SQUARE_CUMULATIVE_DISTRIBUTION_HPP_03_19_2012	/usr/include/boost/accumulators/statistics/weighted_p_square_cumulative_distribution.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_P_SQUARE_CUMUL_DIST_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_P_SQUARE_QUANTILE_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_SKEWNESS_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_SUM_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_SUM_KAHAN_HPP_EAN_11_05_2011	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_TAIL_MEAN_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_TAIL_QUANTILE_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_TAIL_VARIATE_MEANS_HPP_DE_01_01_2006	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WEIGHTED_VARIANCE_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	9;"	d
BOOST_ACCUMULATORS_STATISTICS_WITH_ERROR_HPP_EAN_01_11_2005	/usr/include/boost/accumulators/statistics/with_error.hpp	9;"	d
BOOST_DETAIL_FUNCTION1_DWA200655_HPP	/usr/include/boost/accumulators/numeric/detail/function1.hpp	5;"	d
BOOST_DETAIL_FUNCTION2_DWA200655_HPP	/usr/include/boost/accumulators/numeric/detail/function2.hpp	5;"	d
BOOST_DETAIL_FUNCTION3_DWA2006514_HPP	/usr/include/boost/accumulators/numeric/detail/function3.hpp	5;"	d
BOOST_DETAIL_FUNCTION4_DWA2006514_HPP	/usr/include/boost/accumulators/numeric/detail/function4.hpp	5;"	d
BOOST_DETAIL_POD_SINGLETON_DWA200655_HPP	/usr/include/boost/accumulators/numeric/detail/pod_singleton.hpp	5;"	d
BOOST_DETAIL_cat_arg_counts	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	37;"	d
BOOST_DETAIL_default_arg	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	29;"	d
BOOST_DETAIL_function_arg	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	32;"	d
BOOST_DETAIL_function_result	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	65;"	d
BOOST_MPL_ASSERT	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            BOOST_MPL_ASSERT(($/;"	p	struct:boost::accumulators::detail::checked_as_weighted_feature	access:public	signature:( is_same< typename feature_of<feature_type>::type , typename feature_of<type>::type > )
BOOST_MPL_ASSERT	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            BOOST_MPL_ASSERT((is_same<AccumulatorSet, void>));$/;"	p	struct:boost::accumulators::detail::to_accumulator	access:public	signature:(is_same<AccumulatorSet, void>)
BOOST_MPL_ASSERT	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            BOOST_MPL_ASSERT((is_same<Tag, void>));$/;"	p	struct:boost::accumulators::detail::to_accumulator	access:public	signature:(is_same<Tag, void>)
BOOST_MPL_ASSERT	/usr/include/boost/accumulators/statistics/error_of.hpp	/^        BOOST_MPL_ASSERT((this_feature_has_no_error_calculation<Feature>));$/;"	p	struct:boost::accumulators::impl::error_of_impl	access:public	signature:(this_feature_has_no_error_calculation<Feature>)
BOOST_MPL_ASSERT	/usr/include/boost/accumulators/statistics/tail.hpp	/^        BOOST_MPL_ASSERT(($/;"	p	struct:boost::accumulators::impl::tail_impl	access:public	signature:( mpl::or_<is_same<LeftRight, right>, is_same<LeftRight, left> > )
BOOST_MPL_ASSERT_RELATION	/usr/include/boost/accumulators/statistics/moment.hpp	/^        BOOST_MPL_ASSERT_RELATION(N::value, >, 0);$/;"	p	struct:boost::accumulators::impl::moment_impl	access:public	signature:(N::value, >, 0)
BOOST_MPL_ASSERT_RELATION	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        BOOST_MPL_ASSERT_RELATION(N::value, >, 0);$/;"	p	struct:boost::accumulators::impl::weighted_moment_impl	access:public	signature:(N::value, >, 0)
BOOST_NUMERIC_FUNCTIONAL_COMPLEX_HPP_EAN_01_17_2006	/usr/include/boost/accumulators/numeric/functional/complex.hpp	9;"	d
BOOST_NUMERIC_FUNCTIONAL_DECLARE_BINARY_OP	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	132;"	d
BOOST_NUMERIC_FUNCTIONAL_DECLARE_BINARY_OP	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	83;"	d
BOOST_NUMERIC_FUNCTIONAL_DECLARE_UNARY_OP	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	131;"	d
BOOST_NUMERIC_FUNCTIONAL_DECLARE_UNARY_OP	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	64;"	d
BOOST_NUMERIC_FUNCTIONAL_DEDUCED	/usr/include/boost/accumulators/numeric/functional.hpp	173;"	d
BOOST_NUMERIC_FUNCTIONAL_DEDUCED	/usr/include/boost/accumulators/numeric/functional.hpp	213;"	d
BOOST_NUMERIC_FUNCTIONAL_DEFINE_BINARY_OP	/usr/include/boost/accumulators/numeric/functional.hpp	130;"	d
BOOST_NUMERIC_FUNCTIONAL_DEFINE_BINARY_OP	/usr/include/boost/accumulators/numeric/functional.hpp	215;"	d
BOOST_NUMERIC_FUNCTIONAL_DEFINE_UNARY_OP	/usr/include/boost/accumulators/numeric/functional.hpp	214;"	d
BOOST_NUMERIC_FUNCTIONAL_DEFINE_UNARY_OP	/usr/include/boost/accumulators/numeric/functional.hpp	87;"	d
BOOST_NUMERIC_FUNCTIONAL_DEFINE_VALARRAY_BIN_OP	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	118;"	d
BOOST_NUMERIC_FUNCTIONAL_DEFINE_VALARRAY_BIN_OP	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	197;"	d
BOOST_NUMERIC_FUNCTIONAL_FWD_HPP_EAN_08_12_2005	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	9;"	d
BOOST_NUMERIC_FUNCTIONAL_HPP_EAN_08_12_2005	/usr/include/boost/accumulators/numeric/functional.hpp	9;"	d
BOOST_NUMERIC_FUNCTIONAL_HPP_INCLUDED	/usr/include/boost/accumulators/numeric/functional.hpp	42;"	d
BOOST_NUMERIC_FUNCTIONAL_LEFT	/usr/include/boost/accumulators/numeric/functional.hpp	184;"	d
BOOST_NUMERIC_FUNCTIONAL_LEFT	/usr/include/boost/accumulators/numeric/functional.hpp	212;"	d
BOOST_NUMERIC_FUNCTIONAL_VALARRAY_HPP_EAN_12_12_2005	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	9;"	d
BOOST_NUMERIC_FUNCTIONAL_VECTOR_HPP_EAN_12_12_2005	/usr/include/boost/accumulators/numeric/functional/vector.hpp	9;"	d
BOOST_PARAMETER_NESTED_KEYWORD	/usr/include/boost/accumulators/accumulators_fwd.hpp	196;"	d
BOOST_PP_INC	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    BOOST_PP_INC(BOOST_ACCUMULATORS_MAX_ARGS)$/;"	p	namespace:boost::accumulators	signature:(BOOST_ACCUMULATORS_MAX_ARGS)
BOOST_STATIC_ASSERT	/usr/include/boost/accumulators/numeric/functional.hpp	/^            BOOST_STATIC_ASSERT(std::numeric_limits<typename remove_const<Arg>::type>::is_specialized);$/;"	p	struct:boost::numeric::functional::as_max_base	access:public	signature:(std::numeric_limits<typename remove_const<Arg>::type>::is_specialized)
BOOST_STATIC_ASSERT	/usr/include/boost/accumulators/numeric/functional.hpp	/^            BOOST_STATIC_ASSERT(std::numeric_limits<typename remove_const<Arg>::type>::is_specialized);$/;"	p	struct:boost::numeric::functional::as_min_base	access:public	signature:(std::numeric_limits<typename remove_const<Arg>::type>::is_specialized)
BOOST_STAT_STATISTICS_TAIL_VARIATE_HPP_EAN_28_10_2005	/usr/include/boost/accumulators/statistics/tail_variate.hpp	9;"	d
Nu_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        std::size_t Nu_;                     \/\/ number of samples larger than threshold$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
absolute	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct absolute {};$/;"	s	namespace:boost::accumulators
absolute_tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    struct absolute_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
absolute_weighted_tail_variate_means	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    struct absolute_weighted_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
abstract_absolute_tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    struct abstract_absolute_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
abstract_covariance	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    struct abstract_covariance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
abstract_non_coherent_tail_mean	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    struct abstract_non_coherent_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
abstract_peaks_over_threshold	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    struct abstract_peaks_over_threshold$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
abstract_relative_tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    struct abstract_relative_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
abstract_sum_of_variates	/usr/include/boost/accumulators/statistics/sum.hpp	/^    struct abstract_sum_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
abstract_tail	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct abstract_tail$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
abstract_tail_variate	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    struct abstract_tail_variate$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
abstract_tail_weights	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    struct abstract_tail_weights$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
abstract_weighted_sum_of_variates	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    struct abstract_weighted_sum_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
acc_detail	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        namespace acc_detail$/;"	n	namespace:boost::numeric::operators
acc_detail	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        namespace acc_detail$/;"	n	namespace:boost::numeric::operators
accumulator_base	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^struct accumulator_base$/;"	s	namespace:boost::accumulators
accumulator_concept	/usr/include/boost/accumulators/framework/accumulator_concept.hpp	/^struct accumulator_concept$/;"	s	namespace:boost::accumulators
accumulator_params	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulator_params;$/;"	t	namespace:boost::accumulators::detail
accumulator_set	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulator_set()$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:()
accumulator_set	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulator_set(A1 const &a1, A2 const &a2, ...);$/;"	p	struct:boost::accumulators::accumulator_set	access:public	signature:(A1 const &a1, A2 const &a2, ...)
accumulator_set	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    explicit accumulator_set(A1 const &a1)$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:(A1 const &a1)
accumulator_set	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^struct accumulator_set$/;"	s	namespace:boost::accumulators	inherits:detail::accumulator_set_base
accumulator_set_base	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    struct accumulator_set_base$/;"	s	namespace:boost::accumulators::detail
accumulator_set_result	/usr/include/boost/accumulators/framework/extractor.hpp	/^    struct accumulator_set_result$/;"	s	namespace:boost::accumulators::detail
accumulator_type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            accumulator_type;$/;"	t	struct:boost::accumulators::detail::to_accumulator	access:public
accumulator_visitor	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^        explicit accumulator_visitor(Args const &a)$/;"	f	struct:boost::accumulators::detail::accumulator_visitor	access:public	signature:(Args const &a)
accumulator_visitor	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    struct accumulator_visitor$/;"	s	namespace:boost::accumulators::detail
accumulator_wrapper	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            accumulator_wrapper(Args const &args)$/;"	f	struct:boost::accumulators::detail::accumulator_wrapper	access:public	signature:(Args const &args)
accumulator_wrapper	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            accumulator_wrapper(accumulator_wrapper const &that)$/;"	f	struct:boost::accumulators::detail::accumulator_wrapper	access:public	signature:(accumulator_wrapper const &that)
accumulator_wrapper	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct accumulator_wrapper$/;"	s	namespace:boost::accumulators::detail	inherits:Accumulator
accumulators	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/accumulator_concept.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulators_type accumulators;$/;"	m	struct:boost::accumulators::accumulator_set	access:private
accumulators	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^namespace boost { namespace accumulators { namespace impl$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/depends_on.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/extractor.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/features.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/parameters/accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/parameters/sample.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/parameters/weight.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/framework/parameters/weights.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/count.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/density.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/error_of.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/max.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/median.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/min.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/parameters/quantile_probability.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/skewness.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/stats.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/sum.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/tail.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/variance.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/variates/covariate.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics/with_error.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators	/usr/include/boost/accumulators/statistics_fwd.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
accumulators_mpl_vector	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulators_mpl_vector;$/;"	t	struct:boost::accumulators::accumulator_set	access:public
accumulators_type	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulators_type;$/;"	t	struct:boost::accumulators::accumulator_set	access:public
actual_positions	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        array_type actual_positions;      \/\/ n_i$/;"	m	struct:boost::accumulators::impl::extended_p_square_impl	access:private
actual_positions	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        array_type  actual_positions;     \/\/ n_i$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
actual_positions	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        array_type actual_positions;     \/\/ n_i$/;"	m	struct:boost::accumulators::impl::p_square_quantile_impl	access:private
actual_positions	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        array_type actual_positions;      \/\/ n_i$/;"	m	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:private
actual_positions	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        array_type  actual_positions;     \/\/ n_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
actual_positions	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        array_type actual_positions;     \/\/ n_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:private
add_ref	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    detail::void_ add_ref(dont_care)$/;"	f	struct:boost::accumulators::accumulator_base	access:public	signature:(dont_care)
add_ref	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        void add_ref(Args const &)$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:(Args const &)
add_ref_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            explicit add_ref_visitor(Args const &args)$/;"	f	struct:boost::accumulators::detail::add_ref_visitor	access:public	signature:(Args const &args)
add_ref_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        struct add_ref_visitor$/;"	s	namespace:boost::accumulators::detail
apply	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    struct apply$/;"	s	struct:boost::accumulators::accumulator_set	inherits:fusion::result_of::value_of	access:public
apply	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^                struct apply$/;"	s	struct:boost::accumulators::tag::droppable::impl	access:public
apply	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            struct apply$/;"	s	struct:boost::accumulators::detail::contains_feature_of_	inherits:contains_feature_of	access:public
apply	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            struct apply$/;"	s	struct:boost::accumulators::detail::matches_feature	inherits:is_same	access:public
apply	/usr/include/boost/accumulators/statistics/tail.hpp	/^            struct apply$/;"	s	struct:boost::accumulators::impl::tail_impl::is_tail_variate	inherits:detail::is_tail_variate_feature	access:public
are_integral	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct are_integral$/;"	s	namespace:boost::numeric::functional	inherits:mpl::and_
arg0	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^        >::type arg0;$/;"	t	struct:boost::detail::function1::result	access:public
arg_type	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	139;"	d
arg_type	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	85;"	d
args	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^        Args const &args;$/;"	m	struct:boost::accumulators::detail::accumulator_visitor	access:private
args	/usr/include/boost/accumulators/numeric/detail/function2.hpp	7;"	d
args	/usr/include/boost/accumulators/numeric/detail/function3.hpp	7;"	d
args	/usr/include/boost/accumulators/numeric/detail/function4.hpp	7;"	d
args	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	143;"	d
args	/usr/include/boost/accumulators/statistics/tail.hpp	/^        Args const &args;$/;"	m	struct:boost::accumulators::detail::stat_assign_visitor	access:private
args_	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            Args const &args_;$/;"	m	struct:boost::accumulators::detail::add_ref_visitor	access:private
args_	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            Args const &args_;$/;"	m	struct:boost::accumulators::detail::drop_visitor	access:private
argument_pack_result	/usr/include/boost/accumulators/framework/extractor.hpp	/^    struct argument_pack_result$/;"	s	namespace:boost::accumulators::detail	inherits:accumulator_set_result
array_type	/usr/include/boost/accumulators/statistics/density.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::density_impl	access:public
array_type	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_impl	access:public
array_type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public
array_type	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public
array_type	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        typedef array<float_type, 5> array_type;$/;"	t	struct:boost::accumulators::impl::p_square_quantile_impl	access:public
array_type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::tail_variate_means_impl	access:public
array_type	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::weighted_density_impl	access:public
array_type	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public
array_type	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public
array_type	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef array<float_type, 5> array_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public
array_type	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        typedef typename numeric::functional::average<typename numeric::functional::multiplies<VariateType, Weight>::result_type, Weight>::result_type array_type;$/;"	t	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:public
as_droppable	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        struct as_droppable$/;"	s	namespace:boost::accumulators::tag
as_droppable	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        struct as_droppable<droppable<Feature> >$/;"	s	namespace:boost::accumulators::tag
as_feature	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct as_feature<tag::droppable<Feature> >$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^    struct as_feature$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/error_of.hpp	/^struct as_feature<tag::error_of<Feature> >$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_feature<tag::extended_p_square_quantile(linear)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_feature<tag::extended_p_square_quantile(quadratic)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_feature<tag::weighted_extended_p_square_quantile(linear)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_feature<tag::weighted_extended_p_square_quantile(quadratic)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean(immediate)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean(lazy)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean_of_variates<VariateType, VariateTag>(immediate)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean_of_variates<VariateType, VariateTag>(lazy)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean_of_weights(immediate)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean_of_weights(lazy)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_feature<tag::median(with_density)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_feature<tag::median(with_p_square_cumulative_distribution)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_feature<tag::median(with_p_square_quantile)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct as_feature<tag::peaks_over_threshold<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct as_feature<tag::peaks_over_threshold<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_feature<tag::pot_quantile<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_feature<tag::pot_quantile<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_feature<tag::weighted_pot_quantile<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_feature<tag::weighted_pot_quantile<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_feature<tag::pot_tail_mean<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_feature<tag::pot_tail_mean<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_feature<tag::weighted_pot_tail_mean<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_feature<tag::weighted_pot_tail_mean<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct as_feature<tag::sum(kahan)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct as_feature<tag::sum_of_weights(kahan)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct as_feature<tag::tail_variate_means<LeftRight, VariateType, VariateTag>(absolute)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct as_feature<tag::tail_variate_means<LeftRight, VariateType, VariateTag>(relative)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct as_feature<tag::variance(immediate)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct as_feature<tag::variance(lazy)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^struct as_feature<tag::weighted_mean(immediate)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^struct as_feature<tag::weighted_mean(lazy)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^struct as_feature<tag::weighted_mean_of_variates<VariateType, VariateTag>(immediate)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^struct as_feature<tag::weighted_mean_of_variates<VariateType, VariateTag>(lazy)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^struct as_feature<tag::weighted_median(with_density)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^struct as_feature<tag::weighted_median(with_p_square_cumulative_distribution)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^struct as_feature<tag::weighted_median(with_p_square_quantile)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^struct as_feature<tag::weighted_peaks_over_threshold<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^struct as_feature<tag::weighted_peaks_over_threshold<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^struct as_feature<tag::weighted_sum(kahan)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^struct as_feature<tag::weighted_tail_variate_means<LeftRight, VariateType, VariateTag>(absolute)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^struct as_feature<tag::weighted_tail_variate_means<LeftRight, VariateType, VariateTag>(relative)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^struct as_feature<tag::weighted_variance(immediate)>$/;"	s	namespace:boost::accumulators
as_feature	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^struct as_feature<tag::weighted_variance(lazy)>$/;"	s	namespace:boost::accumulators
as_feature_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct as_feature_list$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::transform_view
as_feature_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct as_feature_list<Features, void>$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::transform_view
as_max	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::as_max const &as_max = boost::detail::pod_singleton<op::as_max>::instance;$/;"	m	class:boost::numeric::__anon1::op
as_max	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_max$/;"	s	namespace:boost::numeric::functional	inherits:as_max_base
as_max	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_max$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function1
as_max	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct as_max<T, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_max	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct as_max<T, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_max_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_max_base$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_min	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::as_min const &as_min = boost::detail::pod_singleton<op::as_min>::instance;$/;"	m	class:boost::numeric::__anon1::op
as_min	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_min$/;"	s	namespace:boost::numeric::functional	inherits:as_min_base
as_min	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_min$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function1
as_min	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct as_min<T, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_min	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct as_min<T, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_min_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_min_base$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_min_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_min_base<Arg, typename enable_if<is_floating_point<Arg> >::type>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_one	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::as_one const &as_one = boost::detail::pod_singleton<op::as_one>::instance;$/;"	m	class:boost::numeric::__anon1::op
as_one	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_one$/;"	s	namespace:boost::numeric::functional	inherits:as_one_base
as_one	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_one$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function1
as_one	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct as_one<T, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_one	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct as_one<T, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_one_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_one_base$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_weighted_feature	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct as_weighted_feature<tag::droppable<Feature> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^    struct as_weighted_feature$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/covariance.hpp	/^struct as_weighted_feature<tag::covariance<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/density.hpp	/^struct as_weighted_feature<tag::density>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/error_of.hpp	/^struct as_weighted_feature<tag::error_of<Feature> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^struct as_weighted_feature<tag::extended_p_square>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_weighted_feature<tag::extended_p_square_quantile>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_weighted_feature<tag::extended_p_square_quantile_quadratic>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^struct as_weighted_feature<tag::kurtosis>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_weighted_feature<tag::immediate_mean>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_weighted_feature<tag::immediate_mean_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_weighted_feature<tag::mean>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_weighted_feature<tag::mean_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_weighted_feature<tag::median>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_weighted_feature<tag::with_density_median>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_weighted_feature<tag::with_p_square_cumulative_distribution_median>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/moment.hpp	/^struct as_weighted_feature<tag::moment<N> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^struct as_weighted_feature<tag::p_square_cumulative_distribution>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^struct as_weighted_feature<tag::p_square_quantile>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct as_weighted_feature<tag::peaks_over_threshold<LeftRight> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct as_weighted_feature<tag::peaks_over_threshold_prob<LeftRight> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_weighted_feature<tag::pot_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_weighted_feature<tag::pot_quantile_prob<LeftRight> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_weighted_feature<tag::pot_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_weighted_feature<tag::pot_tail_mean_prob<LeftRight> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/skewness.hpp	/^struct as_weighted_feature<tag::skewness>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/sum.hpp	/^struct as_weighted_feature<tag::sum>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct as_weighted_feature<tag::sum_kahan>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^struct as_weighted_feature<tag::non_coherent_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^struct as_weighted_feature<tag::tail_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct as_weighted_feature<tag::absolute_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct as_weighted_feature<tag::relative_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct as_weighted_feature<tag::lazy_variance>$/;"	s	namespace:boost::accumulators
as_weighted_feature	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct as_weighted_feature<tag::variance>$/;"	s	namespace:boost::accumulators
as_zero	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::as_zero const &as_zero = boost::detail::pod_singleton<op::as_zero>::instance;$/;"	m	class:boost::numeric::__anon1::op
as_zero	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_zero$/;"	s	namespace:boost::numeric::functional	inherits:as_zero_base
as_zero	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_zero$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function1
as_zero	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct as_zero<T, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_zero	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct as_zero<T, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
as_zero_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_zero_base$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
assign	/usr/include/boost/accumulators/statistics/tail.hpp	/^        void assign(Args const &args, std::size_t index)$/;"	f	struct:boost::accumulators::impl::tail_impl	access:private	signature:(Args const &args, std::size_t index)
assign	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        void assign(Args const &args, std::size_t index)$/;"	f	struct:boost::accumulators::impl::tail_variate_impl	access:public	signature:(Args const &args, std::size_t index)
average	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::average const &average = boost::detail::pod_singleton<op::average>::instance;$/;"	m	class:boost::numeric::__anon1::op
average	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct average$/;"	s	namespace:boost::numeric::functional	inherits:average_base
average	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct average$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function2
average	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct average<Left, Right, std_valarray_tag, RightTag>$/;"	s	namespace:boost::numeric::functional	inherits:mpl::if_::type
average	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct average<Left, Right, std_vector_tag, void>$/;"	s	namespace:boost::numeric::functional	inherits:mpl::if_::type
average_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct average_base$/;"	s	namespace:boost::numeric::functional	inherits:functional::divides
average_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct average_base<Left, Right, typename enable_if<are_integral<Left, Right> >::type>$/;"	s	namespace:boost::numeric::functional	inherits:functional::divides
base	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef droppable_accumulator_base base;$/;"	t	struct:boost::accumulators::droppable_accumulator_base	access:public
bin_positions	/usr/include/boost/accumulators/statistics/density.hpp	/^        array_type             bin_positions;   \/\/ lower bounds of bins$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
bin_positions	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        array_type             bin_positions;   \/\/ lower bounds of bins$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
binary_function	/usr/include/boost/accumulators/numeric/functional.hpp	/^    template<class Left, class Right, class Ret> struct binary_function {};$/;"	s	namespace:std
bits	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	115;"	d
bits	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	131;"	d
boost	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/accumulator_concept.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^namespace boost { namespace accumulators { namespace impl$/;"	n
boost	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/depends_on.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/extractor.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/features.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/parameters/accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/parameters/sample.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/parameters/weight.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/framework/parameters/weights.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^namespace boost { namespace detail {$/;"	n
boost	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	/^namespace boost { namespace detail {$/;"	n
boost	/usr/include/boost/accumulators/numeric/detail/pod_singleton.hpp	/^namespace boost { namespace detail {$/;"	n
boost	/usr/include/boost/accumulators/numeric/functional.hpp	/^namespace boost { namespace numeric$/;"	n
boost	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^namespace boost { namespace numeric { namespace operators$/;"	n
boost	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^namespace boost { namespace numeric$/;"	n
boost	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^namespace boost { namespace numeric$/;"	n
boost	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^namespace boost { namespace numeric$/;"	n
boost	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^namespace boost { namespace numeric$/;"	n
boost	/usr/include/boost/accumulators/statistics/count.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace boost { namespace numeric$/;"	n
boost	/usr/include/boost/accumulators/statistics/density.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/error_of.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/max.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/mean.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/median.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/min.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace boost { namespace numeric$/;"	n
boost	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/parameters/quantile_probability.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/skewness.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/stats.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/sum.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/tail.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/variance.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/variates/covariate.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics/with_error.hpp	/^namespace boost { namespace accumulators$/;"	n
boost	/usr/include/boost/accumulators/statistics_fwd.hpp	/^namespace boost { namespace accumulators$/;"	n
boost::accumulators	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/accumulator_concept.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^namespace boost { namespace accumulators { namespace impl$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/depends_on.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/extractor.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/features.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/parameters/accumulator.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/parameters/sample.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/parameters/weight.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/framework/parameters/weights.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/count.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/density.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/error_of.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/max.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/median.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/min.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/parameters/quantile_probability.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/skewness.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/stats.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/sum.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/tail.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/variance.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/variates/covariate.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics/with_error.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators	/usr/include/boost/accumulators/statistics_fwd.hpp	/^namespace boost { namespace accumulators$/;"	n	namespace:boost
boost::accumulators::BOOST_ACCUMULATORS_EXTRACT_RESULT_FUN	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^  , BOOST_ACCUMULATORS_EXTRACT_RESULT_FUN$/;"	m	namespace:boost::accumulators
boost::accumulators::BOOST_ACCUMULATORS_PROTO_DISABLE_IF_IS_CONST	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^find_accumulator(AccumulatorSet &acc BOOST_ACCUMULATORS_PROTO_DISABLE_IF_IS_CONST(AccumulatorSet))$/;"	f	namespace:boost::accumulators	signature:(AccumulatorSet)
boost::accumulators::BOOST_PP_INC	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    BOOST_PP_INC(BOOST_ACCUMULATORS_MAX_ARGS)$/;"	p	namespace:boost::accumulators	signature:(BOOST_ACCUMULATORS_MAX_ARGS)
boost::accumulators::absolute	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct absolute {};$/;"	s	namespace:boost::accumulators
boost::accumulators::accumulator_base	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^struct accumulator_base$/;"	s	namespace:boost::accumulators
boost::accumulators::accumulator_base::add_ref	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    detail::void_ add_ref(dont_care)$/;"	f	struct:boost::accumulators::accumulator_base	access:public	signature:(dont_care)
boost::accumulators::accumulator_base::drop	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    detail::void_ drop(dont_care)$/;"	f	struct:boost::accumulators::accumulator_base	access:public	signature:(dont_care)
boost::accumulators::accumulator_base::is_droppable	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    typedef mpl::false_ is_droppable;$/;"	t	struct:boost::accumulators::accumulator_base	access:public
boost::accumulators::accumulator_base::on_drop	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    detail::void_ on_drop(dont_care)$/;"	f	struct:boost::accumulators::accumulator_base	access:public	signature:(dont_care)
boost::accumulators::accumulator_base::operator ()	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    detail::void_ operator ()(dont_care)$/;"	f	struct:boost::accumulators::accumulator_base	access:public	signature:(dont_care)
boost::accumulators::accumulator_concept	/usr/include/boost/accumulators/framework/accumulator_concept.hpp	/^struct accumulator_concept$/;"	s	namespace:boost::accumulators
boost::accumulators::accumulator_concept::constraints	/usr/include/boost/accumulators/framework/accumulator_concept.hpp	/^    void constraints()$/;"	f	struct:boost::accumulators::accumulator_concept	access:public	signature:()
boost::accumulators::accumulator_concept::stat	/usr/include/boost/accumulators/framework/accumulator_concept.hpp	/^    Stat stat;$/;"	m	struct:boost::accumulators::accumulator_concept	access:public
boost::accumulators::accumulator_set	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^struct accumulator_set$/;"	s	namespace:boost::accumulators	inherits:detail::accumulator_set_base
boost::accumulators::accumulator_set::accumulator_set	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulator_set()$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:()
boost::accumulators::accumulator_set::accumulator_set	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulator_set(A1 const &a1, A2 const &a2, ...);$/;"	p	struct:boost::accumulators::accumulator_set	access:public	signature:(A1 const &a1, A2 const &a2, ...)
boost::accumulators::accumulator_set::accumulator_set	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    explicit accumulator_set(A1 const &a1)$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:(A1 const &a1)
boost::accumulators::accumulator_set::accumulators	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulators_type accumulators;$/;"	m	struct:boost::accumulators::accumulator_set	access:private
boost::accumulators::accumulator_set::accumulators_mpl_vector	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulators_mpl_vector;$/;"	t	struct:boost::accumulators::accumulator_set	access:public
boost::accumulators::accumulator_set::accumulators_type	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulators_type;$/;"	t	struct:boost::accumulators::accumulator_set	access:public
boost::accumulators::accumulator_set::apply	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    struct apply$/;"	s	struct:boost::accumulators::accumulator_set	inherits:fusion::result_of::value_of	access:public
boost::accumulators::accumulator_set::apply::extract	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typename apply<Feature>::type const &extract() const$/;"	f	class:boost::accumulators::accumulator_set::apply	access:public	signature:() const
boost::accumulators::accumulator_set::drop	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void drop()$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:()
boost::accumulators::accumulator_set::extract	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typename apply<Feature>::type &extract()$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:()
boost::accumulators::accumulator_set::features_type	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typedef Features features_type; \/\/\/< An MPL sequence of the features that should be accumulated.$/;"	t	struct:boost::accumulators::accumulator_set	access:public
boost::accumulators::accumulator_set::operator ()	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void operator ()()$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:()
boost::accumulators::accumulator_set::operator ()	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void operator ()(A1 const &a1)$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:(A1 const &a1)
boost::accumulators::accumulator_set::operator ()	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void operator ()(A1 const &a1, A2 const &a2, ...);$/;"	p	struct:boost::accumulators::accumulator_set	access:public	signature:(A1 const &a1, A2 const &a2, ...)
boost::accumulators::accumulator_set::result_type	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typedef void result_type;$/;"	t	struct:boost::accumulators::accumulator_set	access:public
boost::accumulators::accumulator_set::sample_type	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typedef Sample sample_type;     \/\/\/< The type of the samples that will be accumulated$/;"	t	struct:boost::accumulators::accumulator_set	access:public
boost::accumulators::accumulator_set::visit	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void visit(UnaryFunction const &func)$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:(UnaryFunction const &func)
boost::accumulators::accumulator_set::visit_if	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void visit_if(UnaryFunction const &func)$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:(UnaryFunction const &func)
boost::accumulators::accumulator_set::weight_type	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typedef Weight weight_type;     \/\/\/< The type of the weight parameter. Must be a scalar. Defaults to void.$/;"	t	struct:boost::accumulators::accumulator_set	access:public
boost::accumulators::as_feature	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct as_feature<tag::droppable<Feature> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^    struct as_feature$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/error_of.hpp	/^struct as_feature<tag::error_of<Feature> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_feature<tag::extended_p_square_quantile(linear)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_feature<tag::extended_p_square_quantile(quadratic)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_feature<tag::weighted_extended_p_square_quantile(linear)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_feature<tag::weighted_extended_p_square_quantile(quadratic)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean(immediate)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean(lazy)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean_of_variates<VariateType, VariateTag>(immediate)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean_of_variates<VariateType, VariateTag>(lazy)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean_of_weights(immediate)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_feature<tag::mean_of_weights(lazy)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_feature<tag::median(with_density)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_feature<tag::median(with_p_square_cumulative_distribution)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_feature<tag::median(with_p_square_quantile)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct as_feature<tag::peaks_over_threshold<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct as_feature<tag::peaks_over_threshold<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_feature<tag::pot_quantile<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_feature<tag::pot_quantile<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_feature<tag::weighted_pot_quantile<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_feature<tag::weighted_pot_quantile<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_feature<tag::pot_tail_mean<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_feature<tag::pot_tail_mean<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_feature<tag::weighted_pot_tail_mean<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_feature<tag::weighted_pot_tail_mean<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct as_feature<tag::sum(kahan)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct as_feature<tag::sum_of_weights(kahan)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct as_feature<tag::tail_variate_means<LeftRight, VariateType, VariateTag>(absolute)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct as_feature<tag::tail_variate_means<LeftRight, VariateType, VariateTag>(relative)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct as_feature<tag::variance(immediate)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct as_feature<tag::variance(lazy)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^struct as_feature<tag::weighted_mean(immediate)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^struct as_feature<tag::weighted_mean(lazy)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^struct as_feature<tag::weighted_mean_of_variates<VariateType, VariateTag>(immediate)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^struct as_feature<tag::weighted_mean_of_variates<VariateType, VariateTag>(lazy)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^struct as_feature<tag::weighted_median(with_density)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^struct as_feature<tag::weighted_median(with_p_square_cumulative_distribution)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^struct as_feature<tag::weighted_median(with_p_square_quantile)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^struct as_feature<tag::weighted_peaks_over_threshold<LeftRight>(with_threshold_probability)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^struct as_feature<tag::weighted_peaks_over_threshold<LeftRight>(with_threshold_value)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^struct as_feature<tag::weighted_sum(kahan)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^struct as_feature<tag::weighted_tail_variate_means<LeftRight, VariateType, VariateTag>(absolute)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^struct as_feature<tag::weighted_tail_variate_means<LeftRight, VariateType, VariateTag>(relative)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^struct as_feature<tag::weighted_variance(immediate)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^struct as_feature<tag::weighted_variance(lazy)>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef tag::droppable<typename as_feature<Feature>::type> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        typedef Feature type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/error_of.hpp	/^    typedef tag::error_of<typename as_feature<Feature>::type> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::extended_p_square_quantile type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::extended_p_square_quantile_quadratic type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::weighted_extended_p_square_quantile type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::weighted_extended_p_square_quantile_quadratic type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::immediate_mean type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::immediate_mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::immediate_mean_of_weights type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::mean type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::mean_of_weights type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::with_density_median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::with_p_square_cumulative_distribution_median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    typedef tag::peaks_over_threshold<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    typedef tag::peaks_over_threshold_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::pot_quantile<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::pot_quantile_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::weighted_pot_quantile<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::weighted_pot_quantile_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::pot_tail_mean<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::pot_tail_mean_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::weighted_pot_tail_mean<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::weighted_pot_tail_mean_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    typedef tag::sum_kahan type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    typedef tag::sum_of_weights_kahan type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    typedef tag::absolute_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    typedef tag::relative_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/variance.hpp	/^    typedef tag::lazy_variance type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/variance.hpp	/^    typedef tag::variance type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    typedef tag::immediate_weighted_mean type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    typedef tag::immediate_weighted_mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    typedef tag::weighted_mean type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    typedef tag::weighted_mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    typedef tag::weighted_median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    typedef tag::with_density_weighted_median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    typedef tag::with_p_square_cumulative_distribution_weighted_median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    typedef tag::weighted_peaks_over_threshold<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    typedef tag::weighted_peaks_over_threshold_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    typedef tag::weighted_sum_kahan type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    typedef tag::absolute_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    typedef tag::relative_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    typedef tag::lazy_weighted_variance type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_feature::type	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    typedef tag::weighted_variance type;$/;"	t	struct:boost::accumulators::as_feature	access:public
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct as_weighted_feature<tag::droppable<Feature> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^    struct as_weighted_feature$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/covariance.hpp	/^struct as_weighted_feature<tag::covariance<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/density.hpp	/^struct as_weighted_feature<tag::density>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/error_of.hpp	/^struct as_weighted_feature<tag::error_of<Feature> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^struct as_weighted_feature<tag::extended_p_square>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_weighted_feature<tag::extended_p_square_quantile>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct as_weighted_feature<tag::extended_p_square_quantile_quadratic>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^struct as_weighted_feature<tag::kurtosis>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_weighted_feature<tag::immediate_mean>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_weighted_feature<tag::immediate_mean_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_weighted_feature<tag::mean>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct as_weighted_feature<tag::mean_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_weighted_feature<tag::median>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_weighted_feature<tag::with_density_median>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/median.hpp	/^struct as_weighted_feature<tag::with_p_square_cumulative_distribution_median>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/moment.hpp	/^struct as_weighted_feature<tag::moment<N> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^struct as_weighted_feature<tag::p_square_cumulative_distribution>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^struct as_weighted_feature<tag::p_square_quantile>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct as_weighted_feature<tag::peaks_over_threshold<LeftRight> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct as_weighted_feature<tag::peaks_over_threshold_prob<LeftRight> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_weighted_feature<tag::pot_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct as_weighted_feature<tag::pot_quantile_prob<LeftRight> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_weighted_feature<tag::pot_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct as_weighted_feature<tag::pot_tail_mean_prob<LeftRight> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/skewness.hpp	/^struct as_weighted_feature<tag::skewness>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/sum.hpp	/^struct as_weighted_feature<tag::sum>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct as_weighted_feature<tag::sum_kahan>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^struct as_weighted_feature<tag::non_coherent_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^struct as_weighted_feature<tag::tail_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct as_weighted_feature<tag::absolute_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct as_weighted_feature<tag::relative_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct as_weighted_feature<tag::lazy_variance>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct as_weighted_feature<tag::variance>$/;"	s	namespace:boost::accumulators
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef tag::droppable<typename as_weighted_feature<Feature>::type> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        typedef Feature type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    typedef tag::weighted_covariance<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/density.hpp	/^    typedef tag::weighted_density type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/error_of.hpp	/^    typedef tag::error_of<typename as_weighted_feature<Feature>::type> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^    typedef tag::weighted_extended_p_square type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::weighted_extended_p_square_quantile type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::weighted_extended_p_square_quantile_quadratic type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^    typedef tag::weighted_kurtosis type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::immediate_weighted_mean type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::immediate_weighted_mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::weighted_mean type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::weighted_mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::weighted_median type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::with_density_weighted_median type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::with_p_square_cumulative_distribution_weighted_median type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/moment.hpp	/^    typedef tag::weighted_moment<N> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^    typedef tag::weighted_p_square_cumulative_distribution type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    typedef tag::weighted_p_square_quantile type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    typedef tag::weighted_peaks_over_threshold<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    typedef tag::weighted_peaks_over_threshold_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::weighted_pot_quantile<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::weighted_pot_quantile_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::weighted_pot_tail_mean<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::weighted_pot_tail_mean_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/skewness.hpp	/^    typedef tag::weighted_skewness type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/sum.hpp	/^    typedef tag::weighted_sum type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    typedef tag::weighted_sum_kahan type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    typedef tag::non_coherent_weighted_tail_mean<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^    typedef tag::weighted_tail_quantile<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    typedef tag::absolute_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    typedef tag::relative_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/variance.hpp	/^    typedef tag::lazy_weighted_variance type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::as_weighted_feature::type	/usr/include/boost/accumulators/statistics/variance.hpp	/^    typedef tag::weighted_variance type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
boost::accumulators::depends_on	/usr/include/boost/accumulators/framework/depends_on.hpp	/^    struct depends_on$/;"	s	namespace:boost::accumulators	inherits:detail::depends_on_base
boost::accumulators::depends_on::dependencies	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        dependencies;$/;"	t	struct:boost::accumulators::depends_on	access:public
boost::accumulators::depends_on::is_weight_accumulator	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        typedef mpl::false_ is_weight_accumulator;$/;"	t	struct:boost::accumulators::depends_on	access:public
boost::accumulators::detail	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
boost::accumulators::detail	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
boost::accumulators::detail	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
boost::accumulators::detail	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    namespace detail$/;"	n	namespace:boost::accumulators
boost::accumulators::detail	/usr/include/boost/accumulators/framework/depends_on.hpp	/^    namespace detail$/;"	n	namespace:boost::accumulators
boost::accumulators::detail	/usr/include/boost/accumulators/framework/extractor.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
boost::accumulators::detail	/usr/include/boost/accumulators/statistics/tail.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
boost::accumulators::detail	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
boost::accumulators::detail	/usr/include/boost/accumulators/statistics/with_error.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
boost::accumulators::detail::accumulator_params	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    accumulator_params;$/;"	t	namespace:boost::accumulators::detail
boost::accumulators::detail::accumulator_set_base	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    struct accumulator_set_base$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::accumulator_set_result	/usr/include/boost/accumulators/framework/extractor.hpp	/^    struct accumulator_set_result$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::accumulator_set_result::feature_type	/usr/include/boost/accumulators/framework/extractor.hpp	/^        typedef typename as_feature<Feature>::type feature_type;$/;"	t	struct:boost::accumulators::detail::accumulator_set_result	access:public
boost::accumulators::detail::accumulator_set_result::type	/usr/include/boost/accumulators/framework/extractor.hpp	/^        typedef typename mpl::apply<AccumulatorSet, feature_type>::type::result_type type;$/;"	t	struct:boost::accumulators::detail::accumulator_set_result	access:public
boost::accumulators::detail::accumulator_visitor	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    struct accumulator_visitor$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::accumulator_visitor::accumulator_visitor	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^        explicit accumulator_visitor(Args const &a)$/;"	f	struct:boost::accumulators::detail::accumulator_visitor	access:public	signature:(Args const &a)
boost::accumulators::detail::accumulator_visitor::args	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^        Args const &args;$/;"	m	struct:boost::accumulators::detail::accumulator_visitor	access:private
boost::accumulators::detail::accumulator_visitor::operator ()	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^        void operator ()(Accumulator &accumulator) const$/;"	f	struct:boost::accumulators::detail::accumulator_visitor	access:public	signature:(Accumulator &accumulator) const
boost::accumulators::detail::accumulator_visitor::operator =	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^        accumulator_visitor &operator =(accumulator_visitor const &);$/;"	p	struct:boost::accumulators::detail::accumulator_visitor	access:private	signature:(accumulator_visitor const &)
boost::accumulators::detail::accumulator_wrapper	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct accumulator_wrapper$/;"	s	namespace:boost::accumulators::detail	inherits:Accumulator
boost::accumulators::detail::accumulator_wrapper::accumulator_wrapper	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            accumulator_wrapper(Args const &args)$/;"	f	struct:boost::accumulators::detail::accumulator_wrapper	access:public	signature:(Args const &args)
boost::accumulators::detail::accumulator_wrapper::accumulator_wrapper	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            accumulator_wrapper(accumulator_wrapper const &that)$/;"	f	struct:boost::accumulators::detail::accumulator_wrapper	access:public	signature:(accumulator_wrapper const &that)
boost::accumulators::detail::accumulator_wrapper::feature_tag	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef Feature feature_tag;$/;"	t	struct:boost::accumulators::detail::accumulator_wrapper	access:public
boost::accumulators::detail::add_ref_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        struct add_ref_visitor$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::add_ref_visitor::add_ref_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            explicit add_ref_visitor(Args const &args)$/;"	f	struct:boost::accumulators::detail::add_ref_visitor	access:public	signature:(Args const &args)
boost::accumulators::detail::add_ref_visitor::args_	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            Args const &args_;$/;"	m	struct:boost::accumulators::detail::add_ref_visitor	access:private
boost::accumulators::detail::add_ref_visitor::operator ()	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            void operator ()(Accumulator &acc) const$/;"	f	struct:boost::accumulators::detail::add_ref_visitor	access:public	signature:(Accumulator &acc) const
boost::accumulators::detail::add_ref_visitor::operator =	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            add_ref_visitor &operator =(add_ref_visitor const &);$/;"	p	struct:boost::accumulators::detail::add_ref_visitor	access:private	signature:(add_ref_visitor const &)
boost::accumulators::detail::argument_pack_result	/usr/include/boost/accumulators/framework/extractor.hpp	/^    struct argument_pack_result$/;"	s	namespace:boost::accumulators::detail	inherits:accumulator_set_result
boost::accumulators::detail::as_feature_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct as_feature_list$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::transform_view
boost::accumulators::detail::as_feature_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct as_feature_list<Features, void>$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::transform_view
boost::accumulators::detail::build_acc_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct build_acc_list<First, Last, false>$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::build_acc_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct build_acc_list<First, Last, true>$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::build_acc_list::call	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            call(Args const &, First const&, Last const&)$/;"	f	struct:boost::accumulators::detail::build_acc_list	access:public	signature:(Args const &, First const&, Last const&)
boost::accumulators::detail::build_acc_list::call	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            call(Args const &args, First const& f, Last const& l)$/;"	f	struct:boost::accumulators::detail::build_acc_list	access:public	signature:(Args const &args, First const& f, Last const& l)
boost::accumulators::detail::build_acc_list::next_build_acc_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            next_build_acc_list;$/;"	t	struct:boost::accumulators::detail::build_acc_list	access:public
boost::accumulators::detail::build_acc_list::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            type;$/;"	t	struct:boost::accumulators::detail::build_acc_list	access:public
boost::accumulators::detail::build_acc_list::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef fusion::nil type;$/;"	t	struct:boost::accumulators::detail::build_acc_list	access:public
boost::accumulators::detail::checked_as_weighted_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct checked_as_weighted_feature$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::checked_as_weighted_feature::BOOST_MPL_ASSERT	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            BOOST_MPL_ASSERT(($/;"	p	struct:boost::accumulators::detail::checked_as_weighted_feature	access:public	signature:( is_same< typename feature_of<feature_type>::type , typename feature_of<type>::type > )
boost::accumulators::detail::checked_as_weighted_feature::feature_type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef typename as_feature<Feature>::type feature_type;$/;"	t	struct:boost::accumulators::detail::checked_as_weighted_feature	access:public
boost::accumulators::detail::checked_as_weighted_feature::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef typename as_weighted_feature<feature_type>::type type;$/;"	t	struct:boost::accumulators::detail::checked_as_weighted_feature	access:public
boost::accumulators::detail::collect_abstract_features	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct collect_abstract_features$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::fold
boost::accumulators::detail::contains_feature_of	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct contains_feature_of$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::contains_feature_of::features_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            features_list;$/;"	t	struct:boost::accumulators::detail::contains_feature_of	access:public
boost::accumulators::detail::contains_feature_of::the_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            the_feature;$/;"	t	struct:boost::accumulators::detail::contains_feature_of	access:public
boost::accumulators::detail::contains_feature_of::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            type;$/;"	t	struct:boost::accumulators::detail::contains_feature_of	access:public
boost::accumulators::detail::contains_feature_of_	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct contains_feature_of_$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::contains_feature_of_::apply	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            struct apply$/;"	s	struct:boost::accumulators::detail::contains_feature_of_	inherits:contains_feature_of	access:public
boost::accumulators::detail::dependencies_of	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct dependencies_of$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::dependencies_of::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef typename Feature::dependencies type;$/;"	t	struct:boost::accumulators::detail::dependencies_of	access:public
boost::accumulators::detail::depends_on_base	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct depends_on_base$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::inherit_linearly::type
boost::accumulators::detail::do_extract	/usr/include/boost/accumulators/framework/extractor.hpp	/^    do_extract(AccumulatorSet const &acc, mpl::true_)$/;"	f	namespace:boost::accumulators::detail	signature:(AccumulatorSet const &acc, mpl::true_)
boost::accumulators::detail::do_extract	/usr/include/boost/accumulators/framework/extractor.hpp	/^    do_extract(Args const &args, mpl::false_)$/;"	f	namespace:boost::accumulators::detail	signature:(Args const &args, mpl::false_)
boost::accumulators::detail::drop_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        struct drop_visitor$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::drop_visitor::args_	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            Args const &args_;$/;"	m	struct:boost::accumulators::detail::drop_visitor	access:private
boost::accumulators::detail::drop_visitor::drop_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            explicit drop_visitor(Args const &args)$/;"	f	struct:boost::accumulators::detail::drop_visitor	access:public	signature:(Args const &args)
boost::accumulators::detail::drop_visitor::operator ()	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            void operator ()(Accumulator &acc) const$/;"	f	struct:boost::accumulators::detail::drop_visitor	access:public	signature:(Accumulator &acc) const
boost::accumulators::detail::drop_visitor::operator =	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            drop_visitor &operator =(drop_visitor const &);$/;"	p	struct:boost::accumulators::detail::drop_visitor	access:private	signature:(drop_visitor const &)
boost::accumulators::detail::error_of_tag	/usr/include/boost/accumulators/statistics/with_error.hpp	/^    struct error_of_tag$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::error_of_tag::type	/usr/include/boost/accumulators/statistics/with_error.hpp	/^        typedef tag::error_of<Feature> type;$/;"	t	struct:boost::accumulators::detail::error_of_tag	access:public
boost::accumulators::detail::extractor_result	/usr/include/boost/accumulators/framework/extractor.hpp	/^    struct extractor_result$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::eval_if
boost::accumulators::detail::feature_tag	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct feature_tag$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::feature_tag::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef typename Accumulator::feature_tag type;$/;"	t	struct:boost::accumulators::detail::feature_tag	access:public
boost::accumulators::detail::ignore_variable	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^    inline void ignore_variable(void const *) {}$/;"	f	namespace:boost::accumulators::detail	signature:(void const *)
boost::accumulators::detail::insert_dependencies	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct insert_dependencies$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::fold
boost::accumulators::detail::insert_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct insert_feature$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::eval_if
boost::accumulators::detail::insert_sequence	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct insert_sequence$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::fold
boost::accumulators::detail::is_accumulator_set	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    struct is_accumulator_set$/;"	s	namespace:boost::accumulators::detail	inherits:is_base_and_derived
boost::accumulators::detail::is_dependent_on	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct is_dependent_on$/;"	s	namespace:boost::accumulators::detail	inherits:is_base_and_derived
boost::accumulators::detail::is_tail_variate_feature	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct is_tail_variate_feature$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::false_
boost::accumulators::detail::is_tail_variate_feature	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct is_tail_variate_feature<tag::tail_variate<VariateType, VariateTag, LeftRight>, LeftRight>$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::true_
boost::accumulators::detail::is_tail_variate_feature	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct is_tail_variate_feature<tag::tail_weights<LeftRight>, LeftRight>$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::true_
boost::accumulators::detail::lvalue_index_iterator	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^    struct lvalue_index_iterator$/;"	s	namespace:boost::accumulators::detail	inherits:Base
boost::accumulators::detail::lvalue_index_iterator::lvalue_index_iterator	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^        lvalue_index_iterator(Base base)$/;"	f	struct:boost::accumulators::detail::lvalue_index_iterator	access:public	signature:(Base base)
boost::accumulators::detail::lvalue_index_iterator::operator []	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^        typename Base::reference operator [](typename Base::difference_type n) const$/;"	f	struct:boost::accumulators::detail::lvalue_index_iterator	access:public	signature:(typename Base::difference_type n) const
boost::accumulators::detail::make_acc_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        make_acc_list(Sequence const &seq, Args const &args)$/;"	f	namespace:boost::accumulators::detail	signature:(Sequence const &seq, Args const &args)
boost::accumulators::detail::make_accumulator_tuple	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct make_accumulator_tuple$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::make_accumulator_tuple::feature_map	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            feature_map;$/;"	t	struct:boost::accumulators::detail::make_accumulator_tuple	access:public
boost::accumulators::detail::make_accumulator_tuple::feature_map_with_dependencies	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            feature_map_with_dependencies;$/;"	t	struct:boost::accumulators::detail::make_accumulator_tuple	access:public
boost::accumulators::detail::make_accumulator_tuple::feature_vector_with_dependencies	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            feature_vector_with_dependencies;$/;"	t	struct:boost::accumulators::detail::make_accumulator_tuple	access:public
boost::accumulators::detail::make_accumulator_tuple::sorted_feature_vector	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            sorted_feature_vector;$/;"	t	struct:boost::accumulators::detail::make_accumulator_tuple	access:public
boost::accumulators::detail::make_accumulator_tuple::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            type;$/;"	t	struct:boost::accumulators::detail::make_accumulator_tuple	access:public
boost::accumulators::detail::make_accumulator_visitor	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    inline accumulator_visitor<Args> const make_accumulator_visitor(Args const &args)$/;"	f	namespace:boost::accumulators::detail	signature:(Args const &args)
boost::accumulators::detail::make_add_ref_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        add_ref_visitor<Args> make_add_ref_visitor(Args const &args)$/;"	f	namespace:boost::accumulators::detail	signature:(Args const &args)
boost::accumulators::detail::make_drop_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        drop_visitor<Args> make_drop_visitor(Args const &args)$/;"	f	namespace:boost::accumulators::detail	signature:(Args const &args)
boost::accumulators::detail::make_tail_range	/usr/include/boost/accumulators/statistics/tail.hpp	/^    make_tail_range(ElementIterator elem_begin, IndexIterator index_begin, IndexIterator index_end)$/;"	f	namespace:boost::accumulators::detail	signature:(ElementIterator elem_begin, IndexIterator index_begin, IndexIterator index_end)
boost::accumulators::detail::make_times2_iterator	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^    inline times2_iterator make_times2_iterator(std::size_t i)$/;"	f	namespace:boost::accumulators::detail	signature:(std::size_t i)
boost::accumulators::detail::matches_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct matches_feature$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::matches_feature::apply	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            struct apply$/;"	s	struct:boost::accumulators::detail::matches_feature	inherits:is_same	access:public
boost::accumulators::detail::meta	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        namespace meta$/;"	n	namespace:boost::accumulators::detail
boost::accumulators::detail::meta::make_acc_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            struct make_acc_list$/;"	s	namespace:boost::accumulators::detail::meta	inherits:build_acc_list
boost::accumulators::detail::set_insert_range	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct set_insert_range$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::fold
boost::accumulators::detail::stat_assign	/usr/include/boost/accumulators/statistics/tail.hpp	/^    inline stat_assign_visitor<Args> const stat_assign(Args const &args, std::size_t index)$/;"	f	namespace:boost::accumulators::detail	signature:(Args const &args, std::size_t index)
boost::accumulators::detail::stat_assign_visitor	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct stat_assign_visitor$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::stat_assign_visitor::args	/usr/include/boost/accumulators/statistics/tail.hpp	/^        Args const &args;$/;"	m	struct:boost::accumulators::detail::stat_assign_visitor	access:private
boost::accumulators::detail::stat_assign_visitor::index	/usr/include/boost/accumulators/statistics/tail.hpp	/^        std::size_t index;$/;"	m	struct:boost::accumulators::detail::stat_assign_visitor	access:private
boost::accumulators::detail::stat_assign_visitor::operator ()	/usr/include/boost/accumulators/statistics/tail.hpp	/^        void operator ()(Stat &stat) const$/;"	f	struct:boost::accumulators::detail::stat_assign_visitor	access:public	signature:(Stat &stat) const
boost::accumulators::detail::stat_assign_visitor::operator =	/usr/include/boost/accumulators/statistics/tail.hpp	/^        stat_assign_visitor &operator =(stat_assign_visitor const &);$/;"	p	struct:boost::accumulators::detail::stat_assign_visitor	access:private	signature:(stat_assign_visitor const &)
boost::accumulators::detail::stat_assign_visitor::stat_assign_visitor	/usr/include/boost/accumulators/statistics/tail.hpp	/^        stat_assign_visitor(Args const &a, std::size_t i)$/;"	f	struct:boost::accumulators::detail::stat_assign_visitor	access:public	signature:(Args const &a, std::size_t i)
boost::accumulators::detail::tail_range	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct tail_range$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::tail_range::type	/usr/include/boost/accumulators/statistics/tail.hpp	/^        > type;$/;"	t	struct:boost::accumulators::detail::tail_range	access:public
boost::accumulators::detail::times2_iterator	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^    > times2_iterator;$/;"	t	namespace:boost::accumulators::detail
boost::accumulators::detail::to_accumulator	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct to_accumulator$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::to_accumulator	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct to_accumulator<Feature, Sample, tag::external<Weight, Tag, AccumulatorSet> >$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::to_accumulator::BOOST_MPL_ASSERT	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            BOOST_MPL_ASSERT((is_same<AccumulatorSet, void>));$/;"	p	struct:boost::accumulators::detail::to_accumulator	access:public	signature:(is_same<AccumulatorSet, void>)
boost::accumulators::detail::to_accumulator::BOOST_MPL_ASSERT	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            BOOST_MPL_ASSERT((is_same<Tag, void>));$/;"	p	struct:boost::accumulators::detail::to_accumulator	access:public	signature:(is_same<Tag, void>)
boost::accumulators::detail::to_accumulator::accumulator_type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            accumulator_type;$/;"	t	struct:boost::accumulators::detail::to_accumulator	access:public
boost::accumulators::detail::to_accumulator::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            type;$/;"	t	struct:boost::accumulators::detail::to_accumulator	access:public
boost::accumulators::detail::undroppable	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct undroppable$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::undroppable	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct undroppable<tag::droppable<Feature> >$/;"	s	namespace:boost::accumulators::detail
boost::accumulators::detail::undroppable::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef Feature type;$/;"	t	struct:boost::accumulators::detail::undroppable	access:public
boost::accumulators::detail::void_	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    typedef void void_;$/;"	t	namespace:boost::accumulators::detail
boost::accumulators::dont_care	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^struct dont_care$/;"	s	namespace:boost::accumulators
boost::accumulators::dont_care::dont_care	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    dont_care(Args const &)$/;"	f	struct:boost::accumulators::dont_care	access:public	signature:(Args const &)
boost::accumulators::droppable_accumulator	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct droppable_accumulator$/;"	s	namespace:boost::accumulators	inherits:droppable_accumulator_base
boost::accumulators::droppable_accumulator::droppable_accumulator	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        droppable_accumulator(Args const &args)$/;"	f	struct:boost::accumulators::droppable_accumulator	access:public	signature:(Args const &args)
boost::accumulators::droppable_accumulator::droppable_accumulator	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        droppable_accumulator(droppable_accumulator const &that)$/;"	f	struct:boost::accumulators::droppable_accumulator	access:public	signature:(droppable_accumulator const &that)
boost::accumulators::droppable_accumulator_base	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct droppable_accumulator_base$/;"	s	namespace:boost::accumulators	inherits:Accumulator
boost::accumulators::droppable_accumulator_base::add_ref	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        void add_ref(Args const &)$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:(Args const &)
boost::accumulators::droppable_accumulator_base::base	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef droppable_accumulator_base base;$/;"	t	struct:boost::accumulators::droppable_accumulator_base	access:public
boost::accumulators::droppable_accumulator_base::drop	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        void drop(Args const &args)$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:(Args const &args)
boost::accumulators::droppable_accumulator_base::droppable_accumulator_base	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        droppable_accumulator_base(Args const &args)$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:(Args const &args)
boost::accumulators::droppable_accumulator_base::droppable_accumulator_base	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        droppable_accumulator_base(droppable_accumulator_base const &that)$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:(droppable_accumulator_base const &that)
boost::accumulators::droppable_accumulator_base::is_droppable	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef mpl::true_ is_droppable;$/;"	t	struct:boost::accumulators::droppable_accumulator_base	access:public
boost::accumulators::droppable_accumulator_base::is_dropped	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        bool is_dropped() const$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:() const
boost::accumulators::droppable_accumulator_base::operator ()	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:(Args const &args)
boost::accumulators::droppable_accumulator_base::ref_count_	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        int ref_count_;$/;"	m	struct:boost::accumulators::droppable_accumulator_base	access:private
boost::accumulators::droppable_accumulator_base::result_type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef typename Accumulator::result_type result_type;$/;"	t	struct:boost::accumulators::droppable_accumulator_base	access:public
boost::accumulators::extract	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/count.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/density.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/error_of.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/max.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/mean.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/median.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/min.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/skewness.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/sum.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/tail.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/variance.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract	/usr/include/boost/accumulators/statistics_fwd.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
boost::accumulators::extract::coherent_tail_mean	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    extractor<tag::tail_mean> const coherent_tail_mean = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::count	/usr/include/boost/accumulators/statistics/count.hpp	/^    extractor<tag::count> const count = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::covariance	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    extractor<tag::abstract_covariance> const covariance = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::density	/usr/include/boost/accumulators/statistics/density.hpp	/^    extractor<tag::density> const density = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::extended_p_square	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^    extractor<tag::extended_p_square> const extended_p_square = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::extended_p_square_quantile	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    extractor<tag::extended_p_square_quantile> const extended_p_square_quantile = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::extended_p_square_quantile_quadratic	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    extractor<tag::extended_p_square_quantile_quadratic> const extended_p_square_quantile_quadratic = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::kurtosis	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^    extractor<tag::kurtosis> const kurtosis = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::lazy_variance	/usr/include/boost/accumulators/statistics/variance.hpp	/^    extractor<tag::lazy_variance> const lazy_variance = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::lazy_weighted_variance	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    extractor<tag::lazy_weighted_variance> const lazy_weighted_variance = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::max	/usr/include/boost/accumulators/statistics/max.hpp	/^    extractor<tag::max> const max = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::mean	/usr/include/boost/accumulators/statistics/mean.hpp	/^    extractor<tag::mean> const mean = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::mean_of_weights	/usr/include/boost/accumulators/statistics/mean.hpp	/^    extractor<tag::mean_of_weights> const mean_of_weights = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::median	/usr/include/boost/accumulators/statistics/median.hpp	/^    extractor<tag::median> const median = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::min	/usr/include/boost/accumulators/statistics/min.hpp	/^    extractor<tag::min> const min = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::non_coherent_tail_mean	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    extractor<tag::abstract_non_coherent_tail_mean> const non_coherent_tail_mean = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::non_coherent_weighted_tail_mean	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^    extractor<tag::abstract_non_coherent_tail_mean> const non_coherent_weighted_tail_mean = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::p_square_cumulative_distribution	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^    extractor<tag::p_square_cumulative_distribution> const p_square_cumulative_distribution = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::p_square_quantile	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    extractor<tag::p_square_quantile> const p_square_quantile = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::p_square_quantile_for_median	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    extractor<tag::p_square_quantile_for_median> const p_square_quantile_for_median = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::peaks_over_threshold	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    extractor<tag::abstract_peaks_over_threshold> const peaks_over_threshold = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::quantile	/usr/include/boost/accumulators/statistics_fwd.hpp	/^    extractor<tag::quantile> const quantile = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::relative_tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    extractor<tag::abstract_relative_tail_variate_means> const relative_tail_variate_means = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::relative_weighted_tail_variate_means	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    extractor<tag::abstract_relative_tail_variate_means> const relative_weighted_tail_variate_means = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::rolling_count	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^    extractor<tag::rolling_count> const rolling_count = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::rolling_mean	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^    extractor<tag::rolling_mean> const rolling_mean = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::rolling_sum	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^    extractor<tag::rolling_sum> const rolling_sum = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::rolling_window	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    extractor<tag::rolling_window> const rolling_window = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::rolling_window_plus1	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    extractor<tag::rolling_window_plus1> const rolling_window_plus1 = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::skewness	/usr/include/boost/accumulators/statistics/skewness.hpp	/^    extractor<tag::skewness> const skewness = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::sum	/usr/include/boost/accumulators/statistics/sum.hpp	/^    extractor<tag::sum> const sum = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::sum_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    extractor<tag::sum_kahan> const sum_kahan = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::sum_of_variates	/usr/include/boost/accumulators/statistics/sum.hpp	/^    extractor<tag::abstract_sum_of_variates> const sum_of_variates = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::sum_of_variates_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    extractor<tag::abstract_sum_of_variates> const sum_of_variates_kahan = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::sum_of_weights	/usr/include/boost/accumulators/statistics/sum.hpp	/^    extractor<tag::sum_of_weights> const sum_of_weights = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::sum_of_weights_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    extractor<tag::sum_of_weights_kahan> const sum_of_weights_kahan = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::tail	/usr/include/boost/accumulators/statistics/tail.hpp	/^    extractor<tag::abstract_tail> const tail = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::tail_mean	/usr/include/boost/accumulators/statistics_fwd.hpp	/^    extractor<tag::tail_mean> const tail_mean = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::tail_quantile	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^    extractor<tag::quantile> const tail_quantile = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::tail_variate	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    extractor<tag::abstract_tail_variate> const tail_variate = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    extractor<tag::abstract_absolute_tail_variate_means> const tail_variate_means = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::tail_weights	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    extractor<tag::abstract_tail_weights> const tail_weights = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::variance	/usr/include/boost/accumulators/statistics/variance.hpp	/^    extractor<tag::variance> const variance = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_covariance	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^    extractor<tag::abstract_covariance> const weighted_covariance = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_density	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^    extractor<tag::density> const weighted_density = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_extended_p_square	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^    extractor<tag::weighted_extended_p_square> const weighted_extended_p_square = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_extended_p_square_quantile	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    extractor<tag::weighted_extended_p_square_quantile> const weighted_extended_p_square_quantile = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_extended_p_square_quantile_quadratic	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    extractor<tag::weighted_extended_p_square_quantile_quadratic> const weighted_extended_p_square_quantile_quadratic = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_kurtosis	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^    extractor<tag::weighted_kurtosis> const weighted_kurtosis = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_mean	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    extractor<tag::mean> const weighted_mean = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    extractor<tag::median> const weighted_median = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_p_square_cumulative_distribution	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^    extractor<tag::weighted_p_square_cumulative_distribution> const weighted_p_square_cumulative_distribution = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_p_square_quantile	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^    extractor<tag::weighted_p_square_quantile> const weighted_p_square_quantile = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_p_square_quantile_for_median	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^    extractor<tag::weighted_p_square_quantile_for_median> const weighted_p_square_quantile_for_median = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_peaks_over_threshold	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    extractor<tag::abstract_peaks_over_threshold> const weighted_peaks_over_threshold = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_skewness	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^    extractor<tag::weighted_skewness> const weighted_skewness = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_sum	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    extractor<tag::weighted_sum> const weighted_sum = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_sum_kahan	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    extractor<tag::weighted_sum_kahan> const weighted_sum_kahan = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_sum_of_variates	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    extractor<tag::abstract_weighted_sum_of_variates> const weighted_sum_of_variates = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_sum_of_variates_kahan	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    extractor<tag::abstract_weighted_sum_of_variates> const weighted_sum_of_variates_kahan = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_tail_quantile	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^    extractor<tag::quantile> const weighted_tail_quantile = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_tail_variate_means	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    extractor<tag::abstract_absolute_tail_variate_means> const weighted_tail_variate_means = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::weighted_variance	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    extractor<tag::weighted_variance> const weighted_variance = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::with_density_median	/usr/include/boost/accumulators/statistics/median.hpp	/^    extractor<tag::with_density_median> const with_density_median = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract::with_p_square_cumulative_distribution_median	/usr/include/boost/accumulators/statistics/median.hpp	/^    extractor<tag::with_p_square_cumulative_distribution_median> const with_p_square_cumulative_distribution_median = {};$/;"	m	namespace:boost::accumulators::extract
boost::accumulators::extract_result	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^extract_result(AccumulatorSet const &acc);$/;"	p	namespace:boost::accumulators	signature:(AccumulatorSet const &acc)
boost::accumulators::extract_result	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^extract_result(AccumulatorSet const &acc, A1 const &a1);$/;"	p	namespace:boost::accumulators	signature:(AccumulatorSet const &acc, A1 const &a1)
boost::accumulators::extract_result	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^extract_result(AccumulatorSet const &acc, A1 const &a1, A2 const &a2 ...);$/;"	p	namespace:boost::accumulators	signature:(AccumulatorSet const &acc, A1 const &a1, A2 const &a2 ...)
boost::accumulators::extractor	/usr/include/boost/accumulators/framework/extractor.hpp	/^struct extractor$/;"	s	namespace:boost::accumulators
boost::accumulators::extractor::operator ()	/usr/include/boost/accumulators/framework/extractor.hpp	/^    operator ()(AccumulatorSet const &acc, A1 const &a1) const$/;"	f	struct:boost::accumulators::extractor	access:public	signature:(AccumulatorSet const &acc, A1 const &a1) const
boost::accumulators::extractor::operator ()	/usr/include/boost/accumulators/framework/extractor.hpp	/^    operator ()(AccumulatorSet const &acc, A1 const &a1, A2 const &a2, ...);$/;"	p	struct:boost::accumulators::extractor	access:public	signature:(AccumulatorSet const &acc, A1 const &a1, A2 const &a2, ...)
boost::accumulators::extractor::operator ()	/usr/include/boost/accumulators/framework/extractor.hpp	/^    operator ()(Arg1 const &arg1) const$/;"	f	struct:boost::accumulators::extractor	access:public	signature:(Arg1 const &arg1) const
boost::accumulators::extractor::result	/usr/include/boost/accumulators/framework/extractor.hpp	/^    struct result<this_type(A1)>$/;"	s	struct:boost::accumulators::extractor	inherits:detail::extractor_result	access:public
boost::accumulators::extractor::this_type	/usr/include/boost/accumulators/framework/extractor.hpp	/^    typedef extractor<Feature> this_type;$/;"	t	struct:boost::accumulators::extractor	access:public
boost::accumulators::feature_of	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct feature_of<tag::droppable<Feature> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^struct feature_of<tag::external<Feature, Tag, AccumulatorSet> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^struct feature_of<tag::reference<ValueType, Tag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^struct feature_of<tag::value<ValueType, Tag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/framework/depends_on.hpp	/^    struct feature_of$/;"	s	namespace:boost::accumulators
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/covariance.hpp	/^struct feature_of<tag::covariance<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/covariance.hpp	/^struct feature_of<tag::weighted_covariance<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/density.hpp	/^struct feature_of<tag::weighted_density>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^struct feature_of<tag::weighted_extended_p_square>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct feature_of<tag::extended_p_square_quantile>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct feature_of<tag::extended_p_square_quantile_quadratic>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct feature_of<tag::weighted_extended_p_square_quantile>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct feature_of<tag::weighted_extended_p_square_quantile_quadratic>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^struct feature_of<tag::weighted_kurtosis>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::immediate_mean>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::immediate_mean_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::immediate_mean_of_weights>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::immediate_weighted_mean>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::immediate_weighted_mean_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::weighted_mean>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::weighted_mean_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/median.hpp	/^struct feature_of<tag::weighted_median>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/median.hpp	/^struct feature_of<tag::with_density_median>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/median.hpp	/^struct feature_of<tag::with_density_weighted_median>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/median.hpp	/^struct feature_of<tag::with_p_square_cumulative_distribution_median>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/median.hpp	/^struct feature_of<tag::with_p_square_cumulative_distribution_weighted_median>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/moment.hpp	/^struct feature_of<tag::weighted_moment<N> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^struct feature_of<tag::weighted_p_square_cumulative_distribution>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^struct feature_of<tag::weighted_p_square_quantile>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct feature_of<tag::peaks_over_threshold<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct feature_of<tag::peaks_over_threshold_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct feature_of<tag::weighted_peaks_over_threshold<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct feature_of<tag::weighted_peaks_over_threshold_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct feature_of<tag::pot_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct feature_of<tag::pot_quantile_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct feature_of<tag::weighted_pot_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct feature_of<tag::weighted_pot_quantile_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct feature_of<tag::pot_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct feature_of<tag::pot_tail_mean_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct feature_of<tag::weighted_pot_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct feature_of<tag::weighted_pot_tail_mean_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/skewness.hpp	/^struct feature_of<tag::weighted_skewness>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/sum.hpp	/^struct feature_of<tag::sum_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/sum.hpp	/^struct feature_of<tag::weighted_sum>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct feature_of<tag::sum_kahan>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct feature_of<tag::sum_of_variates_kahan<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct feature_of<tag::sum_of_weights_kahan>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct feature_of<tag::weighted_sum_kahan>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail.hpp	/^struct feature_of<tag::tail<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^struct feature_of<tag::coherent_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^struct feature_of<tag::non_coherent_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^struct feature_of<tag::non_coherent_weighted_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^struct feature_of<tag::tail_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^struct feature_of<tag::weighted_tail_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^struct feature_of<tag::tail_variate<VariateType, VariateTag, LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^struct feature_of<tag::tail_weights<LeftRight> >$/;"	s	namespace:boost::accumulators
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct feature_of<tag::absolute_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct feature_of<tag::absolute_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct feature_of<tag::relative_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct feature_of<tag::relative_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct feature_of<tag::lazy_variance>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct feature_of<tag::lazy_weighted_variance>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct feature_of<tag::weighted_variance>$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^struct feature_of<tag::weighted_sum_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^struct feature_of<tag::weighted_sum_of_variates_kahan<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
boost::accumulators::feature_of::type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        typedef Feature type;$/;"	t	struct:boost::accumulators::feature_of	access:public
boost::accumulators::feature_of::type	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    typedef tag::abstract_tail_weights type;$/;"	t	struct:boost::accumulators::feature_of	access:public
boost::accumulators::features	/usr/include/boost/accumulators/framework/features.hpp	/^struct features$/;"	s	namespace:boost::accumulators	inherits:mpl::vector
boost::accumulators::for_median	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct for_median {};$/;"	s	namespace:boost::accumulators
boost::accumulators::immediate	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct immediate {};$/;"	s	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^namespace boost { namespace accumulators { namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/count.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/density.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/error_of.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/max.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/median.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/min.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/skewness.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/tail.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^namespace impl {$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl	/usr/include/boost/accumulators/statistics_fwd.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
boost::accumulators::impl::coherent_tail_mean_impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    struct coherent_tail_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::coherent_tail_mean_impl::coherent_tail_mean_impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        coherent_tail_mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::coherent_tail_mean_impl	access:public	signature:(dont_care)
boost::accumulators::impl::coherent_tail_mean_impl::float_type	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::coherent_tail_mean_impl	access:public
boost::accumulators::impl::coherent_tail_mean_impl::result	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::coherent_tail_mean_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::coherent_tail_mean_impl::result_type	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::coherent_tail_mean_impl	access:public
boost::accumulators::impl::count_impl	/usr/include/boost/accumulators/statistics/count.hpp	/^    struct count_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::count_impl::cnt	/usr/include/boost/accumulators/statistics/count.hpp	/^        std::size_t cnt;$/;"	m	struct:boost::accumulators::impl::count_impl	access:private
boost::accumulators::impl::count_impl::count_impl	/usr/include/boost/accumulators/statistics/count.hpp	/^        count_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::count_impl	access:public	signature:(dont_care)
boost::accumulators::impl::count_impl::operator ()	/usr/include/boost/accumulators/statistics/count.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::count_impl	access:public	signature:(dont_care)
boost::accumulators::impl::count_impl::result	/usr/include/boost/accumulators/statistics/count.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::count_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::count_impl::result_type	/usr/include/boost/accumulators/statistics/count.hpp	/^        typedef std::size_t result_type;$/;"	t	struct:boost::accumulators::impl::count_impl	access:public
boost::accumulators::impl::covariance_impl	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    struct covariance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::covariance_impl::cov_	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        result_type cov_;$/;"	m	struct:boost::accumulators::impl::covariance_impl	access:private
boost::accumulators::impl::covariance_impl::covariance_impl	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        covariance_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::covariance_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::covariance_impl::operator ()	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::covariance_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::covariance_impl::result	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::covariance_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::covariance_impl::result_type	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        typedef typename numeric::functional::outer_product<sample_type, variate_type>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::covariance_impl	access:public
boost::accumulators::impl::covariance_impl::sample_type	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type sample_type;$/;"	t	struct:boost::accumulators::impl::covariance_impl	access:public
boost::accumulators::impl::covariance_impl::variate_type	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        typedef typename numeric::functional::average<VariateType, std::size_t>::result_type variate_type;$/;"	t	struct:boost::accumulators::impl::covariance_impl	access:public
boost::accumulators::impl::density_impl	/usr/include/boost/accumulators/statistics/density.hpp	/^    struct density_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::density_impl::array_type	/usr/include/boost/accumulators/statistics/density.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::density_impl	access:public
boost::accumulators::impl::density_impl::bin_positions	/usr/include/boost/accumulators/statistics/density.hpp	/^        array_type             bin_positions;   \/\/ lower bounds of bins$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
boost::accumulators::impl::density_impl::cache	/usr/include/boost/accumulators/statistics/density.hpp	/^        array_type             cache;           \/\/ cache to store the first cache_size samples$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
boost::accumulators::impl::density_impl::cache_size	/usr/include/boost/accumulators/statistics/density.hpp	/^        std::size_t            cache_size;      \/\/ number of cached samples$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
boost::accumulators::impl::density_impl::density_impl	/usr/include/boost/accumulators/statistics/density.hpp	/^        density_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::density_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::density_impl::float_type	/usr/include/boost/accumulators/statistics/density.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::density_impl	access:public
boost::accumulators::impl::density_impl::histogram	/usr/include/boost/accumulators/statistics/density.hpp	/^        mutable histogram_type histogram;       \/\/ histogram$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
boost::accumulators::impl::density_impl::histogram_type	/usr/include/boost/accumulators/statistics/density.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::density_impl	access:public
boost::accumulators::impl::density_impl::is_dirty	/usr/include/boost/accumulators/statistics/density.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
boost::accumulators::impl::density_impl::num_bins	/usr/include/boost/accumulators/statistics/density.hpp	/^        std::size_t            num_bins;        \/\/ number of bins$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
boost::accumulators::impl::density_impl::operator ()	/usr/include/boost/accumulators/statistics/density.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::density_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::density_impl::result	/usr/include/boost/accumulators/statistics/density.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::density_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::density_impl::result_type	/usr/include/boost/accumulators/statistics/density.hpp	/^        typedef iterator_range<typename histogram_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::density_impl	access:public
boost::accumulators::impl::density_impl::samples_in_bin	/usr/include/boost/accumulators/statistics/density.hpp	/^        array_type             samples_in_bin;  \/\/ number of samples in each bin$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
boost::accumulators::impl::error_of_impl	/usr/include/boost/accumulators/statistics/error_of.hpp	/^    struct error_of_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::error_of_impl::BOOST_MPL_ASSERT	/usr/include/boost/accumulators/statistics/error_of.hpp	/^        BOOST_MPL_ASSERT((this_feature_has_no_error_calculation<Feature>));$/;"	p	struct:boost::accumulators::impl::error_of_impl	access:public	signature:(this_feature_has_no_error_calculation<Feature>)
boost::accumulators::impl::error_of_impl::error_of_impl	/usr/include/boost/accumulators/statistics/error_of.hpp	/^        error_of_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::error_of_impl	access:public	signature:(dont_care)
boost::accumulators::impl::error_of_impl::result	/usr/include/boost/accumulators/statistics/error_of.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::error_of_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::error_of_impl::result_type	/usr/include/boost/accumulators/statistics/error_of.hpp	/^        typedef int result_type;$/;"	t	struct:boost::accumulators::impl::error_of_impl	access:public
boost::accumulators::impl::error_of_mean_impl	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^    struct error_of_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::error_of_mean_impl::error_of_mean_impl	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^        error_of_mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::error_of_mean_impl	access:public	signature:(dont_care)
boost::accumulators::impl::error_of_mean_impl::result	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::error_of_mean_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::error_of_mean_impl::result_type	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::error_of_mean_impl	access:public
boost::accumulators::impl::extended_p_square_impl	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^    struct extended_p_square_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::extended_p_square_impl::actual_positions	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        array_type actual_positions;      \/\/ n_i$/;"	m	struct:boost::accumulators::impl::extended_p_square_impl	access:private
boost::accumulators::impl::extended_p_square_impl::array_type	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_impl	access:public
boost::accumulators::impl::extended_p_square_impl::desired_positions	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        array_type desired_positions;     \/\/ d_i$/;"	m	struct:boost::accumulators::impl::extended_p_square_impl	access:private
boost::accumulators::impl::extended_p_square_impl::extended_p_square_impl	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        extended_p_square_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::extended_p_square_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::extended_p_square_impl::float_type	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_impl	access:public
boost::accumulators::impl::extended_p_square_impl::heights	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        array_type heights;               \/\/ q_i$/;"	m	struct:boost::accumulators::impl::extended_p_square_impl	access:private
boost::accumulators::impl::extended_p_square_impl::operator ()	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::extended_p_square_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::extended_p_square_impl::positions_increments	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        array_type positions_increments;  \/\/ f_i$/;"	m	struct:boost::accumulators::impl::extended_p_square_impl	access:private
boost::accumulators::impl::extended_p_square_impl::probabilities	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        array_type probabilities;         \/\/ the quantile probabilities$/;"	m	struct:boost::accumulators::impl::extended_p_square_impl	access:private
boost::accumulators::impl::extended_p_square_impl::result	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::extended_p_square_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::extended_p_square_impl::result_type	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        > result_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_impl	access:public
boost::accumulators::impl::extended_p_square_quantile_impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    struct extended_p_square_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::extended_p_square_quantile_impl::array_type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public
boost::accumulators::impl::extended_p_square_quantile_impl::extended_p_square_quantile_impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        extended_p_square_quantile_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::extended_p_square_quantile_impl::float_type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public
boost::accumulators::impl::extended_p_square_quantile_impl::probabilities	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        array_type probabilities;$/;"	m	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:private
boost::accumulators::impl::extended_p_square_quantile_impl::probability	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        mutable float_type probability;$/;"	m	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:private
boost::accumulators::impl::extended_p_square_quantile_impl::range_type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        > range_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public
boost::accumulators::impl::extended_p_square_quantile_impl::result	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::extended_p_square_quantile_impl::result_type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public
boost::accumulators::impl::external_impl	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^    struct external_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::external_impl::external_impl	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        external_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::external_impl	access:public	signature:(dont_care)
boost::accumulators::impl::external_impl::extract_	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        static result_type extract_(Args const &, AccumulatorSet const &acc)$/;"	f	struct:boost::accumulators::impl::external_impl	access:private	signature:(Args const &, AccumulatorSet const &acc)
boost::accumulators::impl::external_impl::extract_	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        static result_type extract_(Args const &args, int)$/;"	f	struct:boost::accumulators::impl::external_impl	access:private	signature:(Args const &args, int)
boost::accumulators::impl::external_impl::feature_tag	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        typedef typename detail::feature_tag<Accumulator>::type feature_tag;$/;"	t	struct:boost::accumulators::impl::external_impl	access:public
boost::accumulators::impl::external_impl::result	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::external_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::external_impl::result_type	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        typedef typename Accumulator::result_type result_type;$/;"	t	struct:boost::accumulators::impl::external_impl	access:public
boost::accumulators::impl::immediate_mean_impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct immediate_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::immediate_mean_impl::immediate_mean_impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        immediate_mean_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::immediate_mean_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::immediate_mean_impl::mean	/usr/include/boost/accumulators/statistics/mean.hpp	/^        result_type mean;$/;"	m	struct:boost::accumulators::impl::immediate_mean_impl	access:private
boost::accumulators::impl::immediate_mean_impl::operator ()	/usr/include/boost/accumulators/statistics/mean.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::immediate_mean_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::immediate_mean_impl::result	/usr/include/boost/accumulators/statistics/mean.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::immediate_mean_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::immediate_mean_impl::result_type	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::immediate_mean_impl	access:public
boost::accumulators::impl::immediate_weighted_mean_impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct immediate_weighted_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::immediate_weighted_mean_impl::immediate_weighted_mean_impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        immediate_weighted_mean_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::immediate_weighted_mean_impl::mean	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        result_type mean;$/;"	m	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:private
boost::accumulators::impl::immediate_weighted_mean_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::immediate_weighted_mean_impl::result	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::immediate_weighted_mean_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef typename numeric::functional::average<weighted_sample, Weight>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:public
boost::accumulators::impl::immediate_weighted_mean_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:public
boost::accumulators::impl::is_rolling_window_plus1_full	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    bool is_rolling_window_plus1_full(Args const &args)$/;"	f	namespace:boost::accumulators::impl	signature:(Args const &args)
boost::accumulators::impl::kurtosis_impl	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^    struct kurtosis_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::kurtosis_impl::kurtosis_impl	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^        kurtosis_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::kurtosis_impl	access:public	signature:(dont_care)
boost::accumulators::impl::kurtosis_impl::result	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::kurtosis_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::kurtosis_impl::result_type	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^        typedef typename numeric::functional::average<Sample, Sample>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::kurtosis_impl	access:public
boost::accumulators::impl::lazy_variance_impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^    struct lazy_variance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::lazy_variance_impl::lazy_variance_impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^        lazy_variance_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::lazy_variance_impl	access:public	signature:(dont_care)
boost::accumulators::impl::lazy_variance_impl::result	/usr/include/boost/accumulators/statistics/variance.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::lazy_variance_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::lazy_variance_impl::result_type	/usr/include/boost/accumulators/statistics/variance.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::lazy_variance_impl	access:public
boost::accumulators::impl::lazy_weighted_variance_impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    struct lazy_weighted_variance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::lazy_weighted_variance_impl::lazy_weighted_variance_impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        lazy_weighted_variance_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::lazy_weighted_variance_impl	access:public	signature:(dont_care)
boost::accumulators::impl::lazy_weighted_variance_impl::result	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::lazy_weighted_variance_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::lazy_weighted_variance_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef typename numeric::functional::average<weighted_sample, Weight>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::lazy_weighted_variance_impl	access:public
boost::accumulators::impl::lazy_weighted_variance_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::lazy_weighted_variance_impl	access:public
boost::accumulators::impl::max_impl	/usr/include/boost/accumulators/statistics/max.hpp	/^    struct max_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::max_impl::max_	/usr/include/boost/accumulators/statistics/max.hpp	/^        Sample max_;$/;"	m	struct:boost::accumulators::impl::max_impl	access:private
boost::accumulators::impl::max_impl::max_impl	/usr/include/boost/accumulators/statistics/max.hpp	/^        max_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::max_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::max_impl::operator ()	/usr/include/boost/accumulators/statistics/max.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::max_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::max_impl::result	/usr/include/boost/accumulators/statistics/max.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::max_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::max_impl::result_type	/usr/include/boost/accumulators/statistics/max.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::max_impl	access:public
boost::accumulators::impl::mean_impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::mean_impl::mean_impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::mean_impl	access:public	signature:(dont_care)
boost::accumulators::impl::mean_impl::result	/usr/include/boost/accumulators/statistics/mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::mean_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::mean_impl::result_type	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::mean_impl	access:public
boost::accumulators::impl::median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::median_impl::median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        median_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::median_impl	access:public	signature:(dont_care)
boost::accumulators::impl::median_impl::result	/usr/include/boost/accumulators/statistics/median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::median_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::median_impl::result_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::median_impl	access:public
boost::accumulators::impl::min_impl	/usr/include/boost/accumulators/statistics/min.hpp	/^    struct min_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::min_impl::min_	/usr/include/boost/accumulators/statistics/min.hpp	/^        Sample min_;$/;"	m	struct:boost::accumulators::impl::min_impl	access:private
boost::accumulators::impl::min_impl::min_impl	/usr/include/boost/accumulators/statistics/min.hpp	/^        min_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::min_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::min_impl::operator ()	/usr/include/boost/accumulators/statistics/min.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::min_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::min_impl::result	/usr/include/boost/accumulators/statistics/min.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::min_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::min_impl::result_type	/usr/include/boost/accumulators/statistics/min.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::min_impl	access:public
boost::accumulators::impl::moment_impl	/usr/include/boost/accumulators/statistics/moment.hpp	/^    struct moment_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::moment_impl::BOOST_MPL_ASSERT_RELATION	/usr/include/boost/accumulators/statistics/moment.hpp	/^        BOOST_MPL_ASSERT_RELATION(N::value, >, 0);$/;"	p	struct:boost::accumulators::impl::moment_impl	access:public	signature:(N::value, >, 0)
boost::accumulators::impl::moment_impl::moment_impl	/usr/include/boost/accumulators/statistics/moment.hpp	/^        moment_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::moment_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::moment_impl::operator ()	/usr/include/boost/accumulators/statistics/moment.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::moment_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::moment_impl::result	/usr/include/boost/accumulators/statistics/moment.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::moment_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::moment_impl::result_type	/usr/include/boost/accumulators/statistics/moment.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::moment_impl	access:public
boost::accumulators::impl::moment_impl::sum	/usr/include/boost/accumulators/statistics/moment.hpp	/^        Sample sum;$/;"	m	struct:boost::accumulators::impl::moment_impl	access:private
boost::accumulators::impl::non_coherent_tail_mean_impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    struct non_coherent_tail_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::non_coherent_tail_mean_impl::float_type	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::non_coherent_tail_mean_impl	access:public
boost::accumulators::impl::non_coherent_tail_mean_impl::non_coherent_tail_mean_impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        non_coherent_tail_mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::non_coherent_tail_mean_impl	access:public	signature:(dont_care)
boost::accumulators::impl::non_coherent_tail_mean_impl::result	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::non_coherent_tail_mean_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::non_coherent_tail_mean_impl::result_type	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::non_coherent_tail_mean_impl	access:public
boost::accumulators::impl::non_coherent_weighted_tail_mean_impl	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^    struct non_coherent_weighted_tail_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::non_coherent_weighted_tail_mean_impl::float_type	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        typedef typename numeric::functional::average<Weight, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::non_coherent_weighted_tail_mean_impl	access:public
boost::accumulators::impl::non_coherent_weighted_tail_mean_impl::non_coherent_weighted_tail_mean_impl	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        non_coherent_weighted_tail_mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::non_coherent_weighted_tail_mean_impl	access:public	signature:(dont_care)
boost::accumulators::impl::non_coherent_weighted_tail_mean_impl::result	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::non_coherent_weighted_tail_mean_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::non_coherent_weighted_tail_mean_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::non_coherent_weighted_tail_mean_impl	access:public
boost::accumulators::impl::non_coherent_weighted_tail_mean_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::non_coherent_weighted_tail_mean_impl	access:public
boost::accumulators::impl::p_square_cumulative_distribution_impl	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^    struct p_square_cumulative_distribution_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::p_square_cumulative_distribution_impl::actual_positions	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        array_type  actual_positions;     \/\/ n_i$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::p_square_cumulative_distribution_impl::array_type	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public
boost::accumulators::impl::p_square_cumulative_distribution_impl::desired_positions	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        array_type  desired_positions;    \/\/ n'_i$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::p_square_cumulative_distribution_impl::float_type	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public
boost::accumulators::impl::p_square_cumulative_distribution_impl::heights	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        array_type  heights;              \/\/ q_i$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::p_square_cumulative_distribution_impl::histogram	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        mutable histogram_type histogram; \/\/ histogram$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::p_square_cumulative_distribution_impl::histogram_type	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public
boost::accumulators::impl::p_square_cumulative_distribution_impl::is_dirty	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::p_square_cumulative_distribution_impl::num_cells	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        std::size_t num_cells;            \/\/ number of cells b$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::p_square_cumulative_distribution_impl::operator ()	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::p_square_cumulative_distribution_impl::p_square_cumulative_distribution_impl	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        p_square_cumulative_distribution_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::p_square_cumulative_distribution_impl::positions_increments	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        array_type  positions_increments; \/\/ dn'_i$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::p_square_cumulative_distribution_impl::result	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::p_square_cumulative_distribution_impl::result_type	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        typedef iterator_range<typename histogram_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public
boost::accumulators::impl::p_square_quantile_impl	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    struct p_square_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::p_square_quantile_impl::actual_positions	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        array_type actual_positions;     \/\/ n_i$/;"	m	struct:boost::accumulators::impl::p_square_quantile_impl	access:private
boost::accumulators::impl::p_square_quantile_impl::array_type	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        typedef array<float_type, 5> array_type;$/;"	t	struct:boost::accumulators::impl::p_square_quantile_impl	access:public
boost::accumulators::impl::p_square_quantile_impl::desired_positions	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        array_type desired_positions;    \/\/ n'_i$/;"	m	struct:boost::accumulators::impl::p_square_quantile_impl	access:private
boost::accumulators::impl::p_square_quantile_impl::float_type	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::p_square_quantile_impl	access:public
boost::accumulators::impl::p_square_quantile_impl::heights	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        array_type heights;              \/\/ q_i$/;"	m	struct:boost::accumulators::impl::p_square_quantile_impl	access:private
boost::accumulators::impl::p_square_quantile_impl::operator ()	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::p_square_quantile_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::p_square_quantile_impl::p	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        float_type p;                    \/\/ the quantile probability p$/;"	m	struct:boost::accumulators::impl::p_square_quantile_impl	access:private
boost::accumulators::impl::p_square_quantile_impl::p_square_quantile_impl	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        p_square_quantile_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::p_square_quantile_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::p_square_quantile_impl::positions_increments	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        array_type positions_increments; \/\/ dn'_i$/;"	m	struct:boost::accumulators::impl::p_square_quantile_impl	access:private
boost::accumulators::impl::p_square_quantile_impl::result	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::p_square_quantile_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::p_square_quantile_impl::result_type	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::p_square_quantile_impl	access:public
boost::accumulators::impl::peaks_over_threshold_impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    struct peaks_over_threshold_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::peaks_over_threshold_impl::Nu_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        std::size_t Nu_;                     \/\/ number of samples larger than threshold$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
boost::accumulators::impl::peaks_over_threshold_impl::fit_parameters_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable result_type fit_parameters_; \/\/ boost::tuple that stores fit parameters$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
boost::accumulators::impl::peaks_over_threshold_impl::float_type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public
boost::accumulators::impl::peaks_over_threshold_impl::is_dirty_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable bool is_dirty_;$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
boost::accumulators::impl::peaks_over_threshold_impl::mu_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable float_type mu_;              \/\/ mean of Nu_ largest samples$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
boost::accumulators::impl::peaks_over_threshold_impl::operator ()	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::peaks_over_threshold_impl::peaks_over_threshold_impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        peaks_over_threshold_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::peaks_over_threshold_impl::result	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::peaks_over_threshold_impl::result_type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef boost::tuple<float_type, float_type, float_type> result_type;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public
boost::accumulators::impl::peaks_over_threshold_impl::sigma2_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable float_type sigma2_;          \/\/ variance of Nu_ largest samples$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
boost::accumulators::impl::peaks_over_threshold_impl::sign	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef mpl::int_<is_same<LeftRight, left>::value ? -1 : 1> sign;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public
boost::accumulators::impl::peaks_over_threshold_impl::threshold_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        float_type threshold_;$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
boost::accumulators::impl::peaks_over_threshold_prob_impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    struct peaks_over_threshold_prob_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::peaks_over_threshold_prob_impl::fit_parameters_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable result_type fit_parameters_;        \/\/ boost::tuple that stores fit parameters$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:private
boost::accumulators::impl::peaks_over_threshold_prob_impl::float_type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public
boost::accumulators::impl::peaks_over_threshold_prob_impl::is_dirty_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable bool is_dirty_;$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:private
boost::accumulators::impl::peaks_over_threshold_prob_impl::mu_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable float_type mu_;                     \/\/ mean of samples above threshold u$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:private
boost::accumulators::impl::peaks_over_threshold_prob_impl::operator ()	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public	signature:(dont_care)
boost::accumulators::impl::peaks_over_threshold_prob_impl::peaks_over_threshold_prob_impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        peaks_over_threshold_prob_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::peaks_over_threshold_prob_impl::result	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::peaks_over_threshold_prob_impl::result_type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef boost::tuple<float_type, float_type, float_type> result_type;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public
boost::accumulators::impl::peaks_over_threshold_prob_impl::sigma2_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable float_type sigma2_;                 \/\/ variance of samples above threshold u$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:private
boost::accumulators::impl::peaks_over_threshold_prob_impl::sign	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef mpl::int_<is_same<LeftRight, left>::value ? -1 : 1> sign;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public
boost::accumulators::impl::peaks_over_threshold_prob_impl::threshold_probability_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable float_type threshold_probability_;$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:private
boost::accumulators::impl::pot_quantile_impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    struct pot_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::pot_quantile_impl::float_type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::pot_quantile_impl	access:public
boost::accumulators::impl::pot_quantile_impl::pot_quantile_impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        pot_quantile_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::pot_quantile_impl	access:public	signature:(dont_care)
boost::accumulators::impl::pot_quantile_impl::result	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::pot_quantile_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::pot_quantile_impl::result_type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::pot_quantile_impl	access:public
boost::accumulators::impl::pot_quantile_impl::sign_	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        short sign_; \/\/ if the fit parameters from the mirrored left tail extreme values are used, mirror back the result$/;"	m	struct:boost::accumulators::impl::pot_quantile_impl	access:private
boost::accumulators::impl::pot_tail_mean_impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    struct pot_tail_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::pot_tail_mean_impl::float_type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::pot_tail_mean_impl	access:public
boost::accumulators::impl::pot_tail_mean_impl::pot_tail_mean_impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        pot_tail_mean_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::pot_tail_mean_impl	access:public	signature:(dont_care)
boost::accumulators::impl::pot_tail_mean_impl::result	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::pot_tail_mean_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::pot_tail_mean_impl::result_type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::pot_tail_mean_impl	access:public
boost::accumulators::impl::pot_tail_mean_impl::sign_	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        short sign_; \/\/ if the fit parameters from the mirrored left tail extreme values are used, mirror back the result$/;"	m	struct:boost::accumulators::impl::pot_tail_mean_impl	access:private
boost::accumulators::impl::reference_accumulator_impl	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^    struct reference_accumulator_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::reference_accumulator_impl::ref	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^        reference_wrapper<Referent> ref;$/;"	m	struct:boost::accumulators::impl::reference_accumulator_impl	access:private
boost::accumulators::impl::reference_accumulator_impl::reference_accumulator_impl	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^        reference_accumulator_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::reference_accumulator_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::reference_accumulator_impl::result	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::reference_accumulator_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::reference_accumulator_impl::result_type	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^        typedef Referent &result_type;$/;"	t	struct:boost::accumulators::impl::reference_accumulator_impl	access:public
boost::accumulators::impl::rolling_count_impl	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^    struct rolling_count_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::rolling_count_impl::result	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::rolling_count_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::rolling_count_impl::result_type	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^        typedef std::size_t result_type;$/;"	t	struct:boost::accumulators::impl::rolling_count_impl	access:public
boost::accumulators::impl::rolling_count_impl::rolling_count_impl	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^        rolling_count_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::rolling_count_impl	access:public	signature:(dont_care)
boost::accumulators::impl::rolling_mean_impl	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^    struct rolling_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::rolling_mean_impl::result	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::rolling_mean_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::rolling_mean_impl::result_type	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::rolling_mean_impl	access:public
boost::accumulators::impl::rolling_mean_impl::rolling_mean_impl	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^        rolling_mean_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::rolling_mean_impl	access:public	signature:(dont_care)
boost::accumulators::impl::rolling_sum_impl	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^    struct rolling_sum_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::rolling_sum_impl::operator ()	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::rolling_sum_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::rolling_sum_impl::result	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::rolling_sum_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::rolling_sum_impl::result_type	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::rolling_sum_impl	access:public
boost::accumulators::impl::rolling_sum_impl::rolling_sum_impl	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        rolling_sum_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::rolling_sum_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::rolling_sum_impl::sum_	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        Sample sum_;$/;"	m	struct:boost::accumulators::impl::rolling_sum_impl	access:private
boost::accumulators::impl::rolling_window_impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    struct rolling_window_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::rolling_window_impl::const_iterator	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef typename circular_buffer<Sample>::const_iterator const_iterator;$/;"	t	struct:boost::accumulators::impl::rolling_window_impl	access:public
boost::accumulators::impl::rolling_window_impl::result	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::rolling_window_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::rolling_window_impl::result_type	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef iterator_range<const_iterator> result_type;$/;"	t	struct:boost::accumulators::impl::rolling_window_impl	access:public
boost::accumulators::impl::rolling_window_impl::rolling_window_impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        rolling_window_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::rolling_window_impl	access:public	signature:(dont_care)
boost::accumulators::impl::rolling_window_plus1_impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    struct rolling_window_plus1_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::rolling_window_plus1_impl::buffer_	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        circular_buffer<Sample> buffer_;$/;"	m	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:private
boost::accumulators::impl::rolling_window_plus1_impl::const_iterator	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef typename circular_buffer<Sample>::const_iterator const_iterator;$/;"	t	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public
boost::accumulators::impl::rolling_window_plus1_impl::full	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        bool full() const$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:() const
boost::accumulators::impl::rolling_window_plus1_impl::operator ()	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::rolling_window_plus1_impl::operator =	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        rolling_window_plus1_impl &operator =(rolling_window_plus1_impl const &that)$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:(rolling_window_plus1_impl const &that)
boost::accumulators::impl::rolling_window_plus1_impl::result	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::rolling_window_plus1_impl::result_type	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef iterator_range<const_iterator> result_type;$/;"	t	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public
boost::accumulators::impl::rolling_window_plus1_impl::rolling_window_plus1_impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        rolling_window_plus1_impl(Args const & args)$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:(Args const & args)
boost::accumulators::impl::rolling_window_plus1_impl::rolling_window_plus1_impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        rolling_window_plus1_impl(rolling_window_plus1_impl const &that)$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:(rolling_window_plus1_impl const &that)
boost::accumulators::impl::skewness_impl	/usr/include/boost/accumulators/statistics/skewness.hpp	/^    struct skewness_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::skewness_impl::result	/usr/include/boost/accumulators/statistics/skewness.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::skewness_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::skewness_impl::result_type	/usr/include/boost/accumulators/statistics/skewness.hpp	/^        typedef typename numeric::functional::average<Sample, Sample>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::skewness_impl	access:public
boost::accumulators::impl::skewness_impl::skewness_impl	/usr/include/boost/accumulators/statistics/skewness.hpp	/^        skewness_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::skewness_impl	access:public	signature:(dont_care)
boost::accumulators::impl::sum_impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^    struct sum_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::sum_impl::operator ()	/usr/include/boost/accumulators/statistics/sum.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::sum_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::sum_impl::result	/usr/include/boost/accumulators/statistics/sum.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::sum_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::sum_impl::result_type	/usr/include/boost/accumulators/statistics/sum.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::sum_impl	access:public
boost::accumulators::impl::sum_impl::sum	/usr/include/boost/accumulators/statistics/sum.hpp	/^        Sample sum;$/;"	m	struct:boost::accumulators::impl::sum_impl	access:private
boost::accumulators::impl::sum_impl::sum_impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^        sum_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::sum_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::sum_kahan_impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct sum_kahan_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::sum_kahan_impl::compensation	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    Sample compensation;$/;"	m	struct:boost::accumulators::impl::sum_kahan_impl	access:private
boost::accumulators::impl::sum_kahan_impl::operator ()	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    operator ()(Args const & args)$/;"	f	struct:boost::accumulators::impl::sum_kahan_impl	access:public	signature:(Args const & args)
boost::accumulators::impl::sum_kahan_impl::result	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::sum_kahan_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::sum_kahan_impl::result_type	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::sum_kahan_impl	access:public
boost::accumulators::impl::sum_kahan_impl::sum	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    Sample sum;$/;"	m	struct:boost::accumulators::impl::sum_kahan_impl	access:private
boost::accumulators::impl::sum_kahan_impl::sum_kahan_impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    sum_kahan_impl(Args const & args)$/;"	f	struct:boost::accumulators::impl::sum_kahan_impl	access:public	signature:(Args const & args)
boost::accumulators::impl::tail_impl	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct tail_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::tail_impl::BOOST_MPL_ASSERT	/usr/include/boost/accumulators/statistics/tail.hpp	/^        BOOST_MPL_ASSERT(($/;"	p	struct:boost::accumulators::impl::tail_impl	access:public	signature:( mpl::or_<is_same<LeftRight, right>, is_same<LeftRight, left> > )
boost::accumulators::impl::tail_impl::assign	/usr/include/boost/accumulators/statistics/tail.hpp	/^        void assign(Args const &args, std::size_t index)$/;"	f	struct:boost::accumulators::impl::tail_impl	access:private	signature:(Args const &args, std::size_t index)
boost::accumulators::impl::tail_impl::indices	/usr/include/boost/accumulators/statistics/tail.hpp	/^        mutable std::vector<std::size_t> indices;$/;"	m	struct:boost::accumulators::impl::tail_impl	access:private
boost::accumulators::impl::tail_impl::indirect_cmp	/usr/include/boost/accumulators/statistics/tail.hpp	/^        struct indirect_cmp$/;"	s	struct:boost::accumulators::impl::tail_impl	inherits:std::binary_function	access:private
boost::accumulators::impl::tail_impl::indirect_cmp::indirect_cmp	/usr/include/boost/accumulators/statistics/tail.hpp	/^            indirect_cmp(std::vector<Sample> const &s)$/;"	f	struct:boost::accumulators::impl::tail_impl::indirect_cmp	access:public	signature:(std::vector<Sample> const &s)
boost::accumulators::impl::tail_impl::indirect_cmp::operator ()	/usr/include/boost/accumulators/statistics/tail.hpp	/^            bool operator ()(std::size_t left, std::size_t right) const$/;"	f	struct:boost::accumulators::impl::tail_impl::indirect_cmp	access:public	signature:(std::size_t left, std::size_t right) const
boost::accumulators::impl::tail_impl::indirect_cmp::operator =	/usr/include/boost/accumulators/statistics/tail.hpp	/^            indirect_cmp &operator =(indirect_cmp const &);$/;"	p	struct:boost::accumulators::impl::tail_impl::indirect_cmp	access:private	signature:(indirect_cmp const &)
boost::accumulators::impl::tail_impl::indirect_cmp::std::samples	/usr/include/boost/accumulators/statistics/tail.hpp	/^            std::vector<Sample> const &samples;$/;"	m	class:boost::accumulators::impl::tail_impl::indirect_cmp::std	access:private
boost::accumulators::impl::tail_impl::is_sorted	/usr/include/boost/accumulators/statistics/tail.hpp	/^        mutable bool is_sorted;$/;"	m	struct:boost::accumulators::impl::tail_impl	access:private
boost::accumulators::impl::tail_impl::is_tail_variate	/usr/include/boost/accumulators/statistics/tail.hpp	/^        struct is_tail_variate$/;"	s	struct:boost::accumulators::impl::tail_impl	access:private
boost::accumulators::impl::tail_impl::is_tail_variate::apply	/usr/include/boost/accumulators/statistics/tail.hpp	/^            struct apply$/;"	s	struct:boost::accumulators::impl::tail_impl::is_tail_variate	inherits:detail::is_tail_variate_feature	access:public
boost::accumulators::impl::tail_impl::operator ()	/usr/include/boost/accumulators/statistics/tail.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::tail_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::tail_impl::predicate_type	/usr/include/boost/accumulators/statistics/tail.hpp	/^        predicate_type;$/;"	t	struct:boost::accumulators::impl::tail_impl	access:public
boost::accumulators::impl::tail_impl::result	/usr/include/boost/accumulators/statistics/tail.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::tail_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::tail_impl::result_type	/usr/include/boost/accumulators/statistics/tail.hpp	/^        >::type result_type;$/;"	t	struct:boost::accumulators::impl::tail_impl	access:public
boost::accumulators::impl::tail_impl::samples	/usr/include/boost/accumulators/statistics/tail.hpp	/^        std::vector<Sample> samples;$/;"	m	struct:boost::accumulators::impl::tail_impl	access:private
boost::accumulators::impl::tail_impl::tail_impl	/usr/include/boost/accumulators/statistics/tail.hpp	/^        tail_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::tail_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::tail_impl::tail_impl	/usr/include/boost/accumulators/statistics/tail.hpp	/^        tail_impl(tail_impl const &that)$/;"	f	struct:boost::accumulators::impl::tail_impl	access:public	signature:(tail_impl const &that)
boost::accumulators::impl::tail_quantile_impl	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^    struct tail_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::tail_quantile_impl::result	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::tail_quantile_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::tail_quantile_impl::result_type	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::tail_quantile_impl	access:public
boost::accumulators::impl::tail_quantile_impl::tail_quantile_impl	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^        tail_quantile_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::tail_quantile_impl	access:public	signature:(dont_care)
boost::accumulators::impl::tail_variate_impl	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    struct tail_variate_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::tail_variate_impl::assign	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        void assign(Args const &args, std::size_t index)$/;"	f	struct:boost::accumulators::impl::tail_variate_impl	access:public	signature:(Args const &args, std::size_t index)
boost::accumulators::impl::tail_variate_impl::do_result	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        result_type do_result(TailRng const &rng) const$/;"	f	struct:boost::accumulators::impl::tail_variate_impl	access:private	signature:(TailRng const &rng) const
boost::accumulators::impl::tail_variate_impl::result	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::tail_variate_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::tail_variate_impl::result_type	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        result_type;$/;"	t	struct:boost::accumulators::impl::tail_variate_impl	access:public
boost::accumulators::impl::tail_variate_impl::tail_variate_impl	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        tail_variate_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::tail_variate_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::tail_variate_impl::variates	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        std::vector<VariateType> variates;$/;"	m	struct:boost::accumulators::impl::tail_variate_impl	access:private
boost::accumulators::impl::tail_variate_means_impl	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    struct tail_variate_means_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::tail_variate_means_impl::array_type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::tail_variate_means_impl	access:public
boost::accumulators::impl::tail_variate_means_impl::float_type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::tail_variate_means_impl	access:public
boost::accumulators::impl::tail_variate_means_impl::result	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::tail_variate_means_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::tail_variate_means_impl::result_type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        typedef iterator_range<typename array_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::tail_variate_means_impl	access:public
boost::accumulators::impl::tail_variate_means_impl::tail_means_	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        mutable array_type tail_means_;$/;"	m	struct:boost::accumulators::impl::tail_variate_means_impl	access:private
boost::accumulators::impl::tail_variate_means_impl::tail_variate_means_impl	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        tail_variate_means_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::tail_variate_means_impl	access:public	signature:(dont_care)
boost::accumulators::impl::this_feature_has_no_error_calculation	/usr/include/boost/accumulators/statistics/error_of.hpp	/^    struct this_feature_has_no_error_calculation$/;"	s	namespace:boost::accumulators::impl	inherits:mpl::false_
boost::accumulators::impl::value_accumulator_impl	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^    struct value_accumulator_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::value_accumulator_impl::result	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::value_accumulator_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::value_accumulator_impl::result_type	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^        typedef ValueType result_type;$/;"	t	struct:boost::accumulators::impl::value_accumulator_impl	access:public
boost::accumulators::impl::value_accumulator_impl::val	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^        ValueType val;$/;"	m	struct:boost::accumulators::impl::value_accumulator_impl	access:private
boost::accumulators::impl::value_accumulator_impl::value_accumulator_impl	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^        value_accumulator_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::value_accumulator_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::variance_impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^    struct variance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::variance_impl::operator ()	/usr/include/boost/accumulators/statistics/variance.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::variance_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::variance_impl::result	/usr/include/boost/accumulators/statistics/variance.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::variance_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::variance_impl::result_type	/usr/include/boost/accumulators/statistics/variance.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::variance_impl	access:public
boost::accumulators::impl::variance_impl::variance	/usr/include/boost/accumulators/statistics/variance.hpp	/^        result_type variance;$/;"	m	struct:boost::accumulators::impl::variance_impl	access:private
boost::accumulators::impl::variance_impl::variance_impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^        variance_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::variance_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_covariance_impl	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^    struct weighted_covariance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_covariance_impl::cov_	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        result_type cov_;$/;"	m	struct:boost::accumulators::impl::weighted_covariance_impl	access:private
boost::accumulators::impl::weighted_covariance_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_covariance_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_covariance_impl::result	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_covariance_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::weighted_covariance_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        typedef typename numeric::functional::outer_product<weighted_sample_type, weighted_variate_type>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_covariance_impl	access:public
boost::accumulators::impl::weighted_covariance_impl::weighted_covariance_impl	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        weighted_covariance_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_covariance_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_covariance_impl::weighted_sample_type	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        typedef typename numeric::functional::multiplies<Weight, typename numeric::functional::average<Sample, std::size_t>::result_type>::result_type weighted_sample_type;$/;"	t	struct:boost::accumulators::impl::weighted_covariance_impl	access:public
boost::accumulators::impl::weighted_covariance_impl::weighted_variate_type	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        typedef typename numeric::functional::multiplies<Weight, typename numeric::functional::average<VariateType, std::size_t>::result_type>::result_type weighted_variate_type;$/;"	t	struct:boost::accumulators::impl::weighted_covariance_impl	access:public
boost::accumulators::impl::weighted_density_impl	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^    struct weighted_density_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_density_impl::array_type	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::weighted_density_impl	access:public
boost::accumulators::impl::weighted_density_impl::bin_positions	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        array_type             bin_positions;   \/\/ lower bounds of bins$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
boost::accumulators::impl::weighted_density_impl::cache	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        histogram_type         cache;           \/\/ cache to store the first cache_size samples with their weights as std::pair$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
boost::accumulators::impl::weighted_density_impl::cache_size	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        std::size_t            cache_size;      \/\/ number of cached samples$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
boost::accumulators::impl::weighted_density_impl::float_type	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        typedef typename numeric::functional::average<Weight, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_density_impl	access:public
boost::accumulators::impl::weighted_density_impl::histogram	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        mutable histogram_type histogram;       \/\/ histogram$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
boost::accumulators::impl::weighted_density_impl::histogram_type	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::weighted_density_impl	access:public
boost::accumulators::impl::weighted_density_impl::is_dirty	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
boost::accumulators::impl::weighted_density_impl::num_bins	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        std::size_t            num_bins;        \/\/ number of bins$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
boost::accumulators::impl::weighted_density_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_density_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_density_impl::result	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_density_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::weighted_density_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        typedef iterator_range<typename histogram_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::weighted_density_impl	access:public
boost::accumulators::impl::weighted_density_impl::samples_in_bin	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        array_type             samples_in_bin;  \/\/ number of samples in each bin$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
boost::accumulators::impl::weighted_density_impl::weighted_density_impl	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        weighted_density_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_density_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_extended_p_square_impl	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^    struct weighted_extended_p_square_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_extended_p_square_impl::actual_positions	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        array_type actual_positions;      \/\/ n_i$/;"	m	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:private
boost::accumulators::impl::weighted_extended_p_square_impl::array_type	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public
boost::accumulators::impl::weighted_extended_p_square_impl::desired_positions	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        array_type desired_positions;     \/\/ d_i$/;"	m	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:private
boost::accumulators::impl::weighted_extended_p_square_impl::float_type	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public
boost::accumulators::impl::weighted_extended_p_square_impl::heights	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        array_type heights;               \/\/ q_i$/;"	m	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:private
boost::accumulators::impl::weighted_extended_p_square_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_extended_p_square_impl::probabilities	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        array_type probabilities;         \/\/ the quantile probabilities$/;"	m	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:private
boost::accumulators::impl::weighted_extended_p_square_impl::result	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::weighted_extended_p_square_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        > result_type;$/;"	t	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public
boost::accumulators::impl::weighted_extended_p_square_impl::weighted_extended_p_square_impl	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        weighted_extended_p_square_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_extended_p_square_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public
boost::accumulators::impl::weighted_kurtosis_impl	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^    struct weighted_kurtosis_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_kurtosis_impl::result	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_kurtosis_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::weighted_kurtosis_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^        typedef typename numeric::functional::average<weighted_sample, weighted_sample>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_kurtosis_impl	access:public
boost::accumulators::impl::weighted_kurtosis_impl::weighted_kurtosis_impl	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^        weighted_kurtosis_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::weighted_kurtosis_impl	access:public	signature:(dont_care)
boost::accumulators::impl::weighted_kurtosis_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_kurtosis_impl	access:public
boost::accumulators::impl::weighted_mean_impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct weighted_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_mean_impl::result	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_mean_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::weighted_mean_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef typename numeric::functional::average<weighted_sample, Weight>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_mean_impl	access:public
boost::accumulators::impl::weighted_mean_impl::weighted_mean_impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        weighted_mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::weighted_mean_impl	access:public	signature:(dont_care)
boost::accumulators::impl::weighted_mean_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_mean_impl	access:public
boost::accumulators::impl::weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct weighted_median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_median_impl::result	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_median_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::weighted_median_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_median_impl	access:public
boost::accumulators::impl::weighted_median_impl::weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        weighted_median_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::weighted_median_impl	access:public	signature:(dont_care)
boost::accumulators::impl::weighted_moment_impl	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^    struct weighted_moment_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_moment_impl::BOOST_MPL_ASSERT_RELATION	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        BOOST_MPL_ASSERT_RELATION(N::value, >, 0);$/;"	p	struct:boost::accumulators::impl::weighted_moment_impl	access:public	signature:(N::value, >, 0)
boost::accumulators::impl::weighted_moment_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_moment_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_moment_impl::result	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_moment_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::weighted_moment_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        typedef typename numeric::functional::average<weighted_sample, Weight>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_moment_impl	access:public
boost::accumulators::impl::weighted_moment_impl::sum	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        weighted_sample sum;$/;"	m	struct:boost::accumulators::impl::weighted_moment_impl	access:private
boost::accumulators::impl::weighted_moment_impl::weighted_moment_impl	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        weighted_moment_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_moment_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_moment_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_moment_impl	access:public
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^    struct weighted_p_square_cumulative_distribution_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::actual_positions	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        array_type  actual_positions;     \/\/ n_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::array_type	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef std::vector<float_type> array_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::desired_positions	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        array_type  desired_positions;    \/\/ n'_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::float_type	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::heights	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        array_type  heights;              \/\/ q_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::histogram	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        mutable histogram_type histogram; \/\/ histogram$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::histogram_type	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::is_dirty	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::num_cells	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        std::size_t num_cells;            \/\/ number of cells b$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::result	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef iterator_range<typename histogram_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::weighted_p_square_cumulative_distribution_impl	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        weighted_p_square_cumulative_distribution_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public
boost::accumulators::impl::weighted_p_square_quantile_impl	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^    struct weighted_p_square_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_p_square_quantile_impl::actual_positions	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        array_type actual_positions;     \/\/ n_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:private
boost::accumulators::impl::weighted_p_square_quantile_impl::array_type	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef array<float_type, 5> array_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public
boost::accumulators::impl::weighted_p_square_quantile_impl::desired_positions	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        array_type desired_positions;    \/\/ n'_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:private
boost::accumulators::impl::weighted_p_square_quantile_impl::float_type	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public
boost::accumulators::impl::weighted_p_square_quantile_impl::heights	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        array_type heights;              \/\/ q_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:private
boost::accumulators::impl::weighted_p_square_quantile_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_p_square_quantile_impl::p	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        float_type p;                    \/\/ the quantile probability p$/;"	m	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:private
boost::accumulators::impl::weighted_p_square_quantile_impl::result	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::weighted_p_square_quantile_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public
boost::accumulators::impl::weighted_p_square_quantile_impl::weighted_p_square_quantile_impl	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        weighted_p_square_quantile_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_p_square_quantile_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public
boost::accumulators::impl::weighted_peaks_over_threshold_impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    struct weighted_peaks_over_threshold_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_peaks_over_threshold_impl::fit_parameters_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable result_type fit_parameters_; \/\/ boost::tuple that stores fit parameters$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_impl::float_type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public
boost::accumulators::impl::weighted_peaks_over_threshold_impl::is_dirty_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable bool is_dirty_;$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_impl::mu_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type mu_;              \/\/ mean of samples above threshold$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_peaks_over_threshold_impl::result	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::weighted_peaks_over_threshold_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef boost::tuple<float_type, float_type, float_type> result_type;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public
boost::accumulators::impl::weighted_peaks_over_threshold_impl::sigma2_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type sigma2_;          \/\/ variance of samples above threshold$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_impl::sign_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        short sign_;                         \/\/ for left tail fitting, mirror the extreme values$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_impl::threshold_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        float_type threshold_;$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_impl::w_sum_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type w_sum_;           \/\/ sum of weights of samples above threshold$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_impl::weighted_peaks_over_threshold_impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        weighted_peaks_over_threshold_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_peaks_over_threshold_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef typename numeric::functional::multiplies<Weight, Sample>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    struct weighted_peaks_over_threshold_prob_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::fit_parameters_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable result_type fit_parameters_;        \/\/ boost::tuple that stores fit parameters$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::float_type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::is_dirty_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable bool is_dirty_;$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::mu_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type mu_;                     \/\/ mean of samples above threshold u$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public	signature:(dont_care)
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::result	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef boost::tuple<float_type, float_type, float_type> result_type;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::sigma2_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type sigma2_;                 \/\/ variance of samples above threshold u$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::sign_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        short sign_;                                \/\/ for left tail fitting, mirror the extreme values$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::threshold_probability_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type threshold_probability_;$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::weighted_peaks_over_threshold_prob_impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        weighted_peaks_over_threshold_prob_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef typename numeric::functional::multiplies<Weight, Sample>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public
boost::accumulators::impl::weighted_skewness_impl	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^    struct weighted_skewness_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_skewness_impl::result	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_skewness_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::weighted_skewness_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^        typedef typename numeric::functional::average<weighted_sample, weighted_sample>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_skewness_impl	access:public
boost::accumulators::impl::weighted_skewness_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_skewness_impl	access:public
boost::accumulators::impl::weighted_skewness_impl::weighted_skewness_impl	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^        weighted_skewness_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::weighted_skewness_impl	access:public	signature:(dont_care)
boost::accumulators::impl::weighted_sum_impl	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    struct weighted_sum_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_sum_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_sum_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_sum_impl::result	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_sum_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::weighted_sum_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        typedef weighted_sample result_type;$/;"	t	struct:boost::accumulators::impl::weighted_sum_impl	access:public
boost::accumulators::impl::weighted_sum_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_sum_impl	access:public
boost::accumulators::impl::weighted_sum_impl::weighted_sum_	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        weighted_sample weighted_sum_;$/;"	m	struct:boost::accumulators::impl::weighted_sum_impl	access:private
boost::accumulators::impl::weighted_sum_impl::weighted_sum_impl	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        weighted_sum_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_sum_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_sum_kahan_impl	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    struct weighted_sum_kahan_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_sum_kahan_impl::compensation	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        weighted_sample compensation;$/;"	m	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:private
boost::accumulators::impl::weighted_sum_kahan_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_sum_kahan_impl::result	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::weighted_sum_kahan_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        typedef weighted_sample result_type;$/;"	t	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:public
boost::accumulators::impl::weighted_sum_kahan_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:public
boost::accumulators::impl::weighted_sum_kahan_impl::weighted_sum_	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        weighted_sample weighted_sum_;$/;"	m	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:private
boost::accumulators::impl::weighted_sum_kahan_impl::weighted_sum_kahan_impl	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        weighted_sum_kahan_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_tail_quantile_impl	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^    struct weighted_tail_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_tail_quantile_impl::float_type	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^        typedef typename numeric::functional::average<Weight, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_tail_quantile_impl	access:public
boost::accumulators::impl::weighted_tail_quantile_impl::result	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_tail_quantile_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::weighted_tail_quantile_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::weighted_tail_quantile_impl	access:public
boost::accumulators::impl::weighted_tail_quantile_impl::weighted_tail_quantile_impl	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^        weighted_tail_quantile_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::weighted_tail_quantile_impl	access:public	signature:(dont_care)
boost::accumulators::impl::weighted_tail_variate_means_impl	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    struct weighted_tail_variate_means_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_tail_variate_means_impl::array_type	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        typedef typename numeric::functional::average<typename numeric::functional::multiplies<VariateType, Weight>::result_type, Weight>::result_type array_type;$/;"	t	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:public
boost::accumulators::impl::weighted_tail_variate_means_impl::float_type	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        typedef typename numeric::functional::average<Weight, Weight>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:public
boost::accumulators::impl::weighted_tail_variate_means_impl::result	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::weighted_tail_variate_means_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        typedef iterator_range<typename array_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:public
boost::accumulators::impl::weighted_tail_variate_means_impl::tail_means_	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        mutable array_type tail_means_;$/;"	m	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:private
boost::accumulators::impl::weighted_tail_variate_means_impl::weighted_tail_variate_means_impl	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        weighted_tail_variate_means_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:public	signature:(dont_care)
boost::accumulators::impl::weighted_variance_impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    struct weighted_variance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::weighted_variance_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_variance_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::weighted_variance_impl::result	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_variance_impl	access:public	signature:(dont_care) const
boost::accumulators::impl::weighted_variance_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef typename numeric::functional::average<weighted_sample, Weight>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_variance_impl	access:public
boost::accumulators::impl::weighted_variance_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_variance_impl	access:public
boost::accumulators::impl::weighted_variance_impl::weighted_variance	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        result_type weighted_variance;$/;"	m	struct:boost::accumulators::impl::weighted_variance_impl	access:private
boost::accumulators::impl::weighted_variance_impl::weighted_variance_impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        weighted_variance_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_variance_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::with_density_median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct with_density_median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::with_density_median_impl::float_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::with_density_median_impl	access:public
boost::accumulators::impl::with_density_median_impl::histogram_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::with_density_median_impl	access:public
boost::accumulators::impl::with_density_median_impl::is_dirty	/usr/include/boost/accumulators/statistics/median.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::with_density_median_impl	access:private
boost::accumulators::impl::with_density_median_impl::median	/usr/include/boost/accumulators/statistics/median.hpp	/^        mutable float_type median;$/;"	m	struct:boost::accumulators::impl::with_density_median_impl	access:private
boost::accumulators::impl::with_density_median_impl::operator ()	/usr/include/boost/accumulators/statistics/median.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::with_density_median_impl	access:public	signature:(dont_care)
boost::accumulators::impl::with_density_median_impl::range_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef iterator_range<typename histogram_type::iterator> range_type;$/;"	t	struct:boost::accumulators::impl::with_density_median_impl	access:public
boost::accumulators::impl::with_density_median_impl::result	/usr/include/boost/accumulators/statistics/median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::with_density_median_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::with_density_median_impl::result_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::with_density_median_impl	access:public
boost::accumulators::impl::with_density_median_impl::sum	/usr/include/boost/accumulators/statistics/median.hpp	/^        mutable float_type sum;$/;"	m	struct:boost::accumulators::impl::with_density_median_impl	access:private
boost::accumulators::impl::with_density_median_impl::with_density_median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        with_density_median_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::with_density_median_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::with_density_weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct with_density_weighted_median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::with_density_weighted_median_impl::float_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public
boost::accumulators::impl::with_density_weighted_median_impl::histogram_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public
boost::accumulators::impl::with_density_weighted_median_impl::is_dirty	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:private
boost::accumulators::impl::with_density_weighted_median_impl::median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        mutable float_type median;$/;"	m	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:private
boost::accumulators::impl::with_density_weighted_median_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public	signature:(dont_care)
boost::accumulators::impl::with_density_weighted_median_impl::range_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef iterator_range<typename histogram_type::iterator> range_type;$/;"	t	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public
boost::accumulators::impl::with_density_weighted_median_impl::result	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::with_density_weighted_median_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public
boost::accumulators::impl::with_density_weighted_median_impl::sum	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        mutable float_type sum;$/;"	m	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:private
boost::accumulators::impl::with_density_weighted_median_impl::with_density_weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        with_density_weighted_median_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public	signature:(Args const &args)
boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct with_p_square_cumulative_distribution_median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl::float_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public
boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl::histogram_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public
boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl::is_dirty	/usr/include/boost/accumulators/statistics/median.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:private
boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl::median	/usr/include/boost/accumulators/statistics/median.hpp	/^        mutable float_type median;$/;"	m	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:private
boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl::operator ()	/usr/include/boost/accumulators/statistics/median.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public	signature:(dont_care)
boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl::range_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef iterator_range<typename histogram_type::iterator> range_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public
boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl::result	/usr/include/boost/accumulators/statistics/median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl::result_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public
boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl::with_p_square_cumulative_distribution_median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        with_p_square_cumulative_distribution_median_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public	signature:(dont_care)
boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct with_p_square_cumulative_distribution_weighted_median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl::float_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public
boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl::histogram_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public
boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl::is_dirty	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:private
boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl::median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        mutable float_type median;$/;"	m	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:private
boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl::operator ()	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public	signature:(dont_care)
boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl::range_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef iterator_range<typename histogram_type::iterator> range_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public
boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl::result	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public	signature:(Args const &args) const
boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl::result_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public
boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl::weighted_sample	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public
boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl::with_p_square_cumulative_distribution_weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        with_p_square_cumulative_distribution_weighted_median_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public	signature:(dont_care)
boost::accumulators::kahan	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct kahan {};$/;"	s	namespace:boost::accumulators
boost::accumulators::lazy	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct lazy {};$/;"	s	namespace:boost::accumulators
boost::accumulators::left	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct left {};$/;"	s	namespace:boost::accumulators
boost::accumulators::linear	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct linear {};$/;"	s	namespace:boost::accumulators
boost::accumulators::mpl::apply::find_accumulator	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^find_accumulator(AccumulatorSet const &acc);$/;"	p	class:boost::accumulators::mpl::apply	signature:(AccumulatorSet const &acc)
boost::accumulators::mpl::apply::find_accumulator	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^find_accumulator(AccumulatorSet const &acc)$/;"	f	class:boost::accumulators::mpl::apply	signature:(AccumulatorSet const &acc)
boost::accumulators::quadratic	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct quadratic {};$/;"	s	namespace:boost::accumulators
boost::accumulators::regular	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct regular {};$/;"	s	namespace:boost::accumulators
boost::accumulators::relative	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct relative {};$/;"	s	namespace:boost::accumulators
boost::accumulators::right	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct right {};$/;"	s	namespace:boost::accumulators
boost::accumulators::stats	/usr/include/boost/accumulators/statistics/stats.hpp	/^struct stats$/;"	s	namespace:boost::accumulators	inherits:mpl::vector
boost::accumulators::tag	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/count.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/density.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/error_of.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/max.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/median.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/min.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/skewness.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/sum.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/tail.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/variance.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag	/usr/include/boost/accumulators/statistics_fwd.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
boost::accumulators::tag::absolute_tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    struct absolute_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::absolute_tail_variate_means::impl	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        typedef accumulators::impl::tail_variate_means_impl<mpl::_1, absolute, LeftRight, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::absolute_tail_variate_means	access:public
boost::accumulators::tag::absolute_weighted_tail_variate_means	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    struct absolute_weighted_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::absolute_weighted_tail_variate_means::impl	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        typedef accumulators::impl::weighted_tail_variate_means_impl<mpl::_1, mpl::_2, absolute, LeftRight, VariateType> impl;$/;"	t	struct:boost::accumulators::tag::absolute_weighted_tail_variate_means	access:public
boost::accumulators::tag::abstract_absolute_tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    struct abstract_absolute_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::abstract_covariance	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    struct abstract_covariance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::abstract_non_coherent_tail_mean	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    struct abstract_non_coherent_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::abstract_peaks_over_threshold	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    struct abstract_peaks_over_threshold$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::abstract_relative_tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    struct abstract_relative_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::abstract_sum_of_variates	/usr/include/boost/accumulators/statistics/sum.hpp	/^    struct abstract_sum_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::abstract_tail	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct abstract_tail$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::abstract_tail_variate	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    struct abstract_tail_variate$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::abstract_tail_weights	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    struct abstract_tail_weights$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::abstract_weighted_sum_of_variates	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    struct abstract_weighted_sum_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::as_droppable	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        struct as_droppable$/;"	s	namespace:boost::accumulators::tag
boost::accumulators::tag::as_droppable	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        struct as_droppable<droppable<Feature> >$/;"	s	namespace:boost::accumulators::tag
boost::accumulators::tag::as_droppable::type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            typedef droppable<Feature> type;$/;"	t	struct:boost::accumulators::tag::as_droppable	access:public
boost::accumulators::tag::coherent_tail_mean	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    struct coherent_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::coherent_tail_mean::impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef accumulators::impl::coherent_tail_mean_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::coherent_tail_mean	access:public
boost::accumulators::tag::count	/usr/include/boost/accumulators/statistics/count.hpp	/^    struct count$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::count::impl	/usr/include/boost/accumulators/statistics/count.hpp	/^        typedef mpl::always<accumulators::impl::count_impl> impl;$/;"	t	struct:boost::accumulators::tag::count	access:public
boost::accumulators::tag::covariance	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    struct covariance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::covariance::impl	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        typedef accumulators::impl::covariance_impl<mpl::_1, VariateType, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::covariance	access:public
boost::accumulators::tag::density	/usr/include/boost/accumulators/statistics/density.hpp	/^    struct density$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,density_cache_size,density_num_bins
boost::accumulators::tag::density::boost::parameter::cache_size	/usr/include/boost/accumulators/statistics/density.hpp	/^        static boost::parameter::keyword<density_cache_size> const cache_size;$/;"	m	class:boost::accumulators::tag::density::boost::parameter	access:public
boost::accumulators::tag::density::boost::parameter::num_bins	/usr/include/boost/accumulators/statistics/density.hpp	/^        static boost::parameter::keyword<density_num_bins> const num_bins;$/;"	m	class:boost::accumulators::tag::density::boost::parameter	access:public
boost::accumulators::tag::density::impl	/usr/include/boost/accumulators/statistics/density.hpp	/^        typedef accumulators::impl::density_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::density	access:public
boost::accumulators::tag::droppable	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        struct droppable$/;"	s	namespace:boost::accumulators::tag	inherits:as_feature::type
boost::accumulators::tag::droppable::dependencies	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            dependencies;$/;"	t	struct:boost::accumulators::tag::droppable	access:public
boost::accumulators::tag::droppable::feature_type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            typedef typename as_feature<Feature>::type feature_type;$/;"	t	struct:boost::accumulators::tag::droppable	access:public
boost::accumulators::tag::droppable::impl	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            struct impl$/;"	s	struct:boost::accumulators::tag::droppable	access:public
boost::accumulators::tag::droppable::impl::apply	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^                struct apply$/;"	s	struct:boost::accumulators::tag::droppable::impl	access:public
boost::accumulators::tag::droppable::impl::apply::type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^                    type;$/;"	t	struct:boost::accumulators::tag::droppable::impl::apply	access:public
boost::accumulators::tag::droppable::tmp_dependencies_	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            typedef typename feature_type::dependencies tmp_dependencies_;$/;"	t	struct:boost::accumulators::tag::droppable	access:public
boost::accumulators::tag::error_of	/usr/include/boost/accumulators/statistics/error_of.hpp	/^    struct error_of$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::error_of	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^    struct error_of<immediate_mean>$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::error_of	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^    struct error_of<mean>$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::error_of::impl	/usr/include/boost/accumulators/statistics/error_of.hpp	/^        typedef accumulators::impl::error_of_impl<mpl::_1, Feature> impl;$/;"	t	struct:boost::accumulators::tag::error_of	access:public
boost::accumulators::tag::error_of::impl	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^        typedef accumulators::impl::error_of_mean_impl<mpl::_1, lazy_variance> impl;$/;"	t	struct:boost::accumulators::tag::error_of	access:public
boost::accumulators::tag::error_of::impl	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^        typedef accumulators::impl::error_of_mean_impl<mpl::_1, variance> impl;$/;"	t	struct:boost::accumulators::tag::error_of	access:public
boost::accumulators::tag::extended_p_square	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^    struct extended_p_square$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,extended_p_square_probabilities
boost::accumulators::tag::extended_p_square::boost::parameter::probabilities	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        static boost::parameter::keyword<tag::probabilities> const probabilities;$/;"	m	class:boost::accumulators::tag::extended_p_square::boost::parameter	access:public
boost::accumulators::tag::extended_p_square::impl	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        typedef accumulators::impl::extended_p_square_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::extended_p_square	access:public
boost::accumulators::tag::extended_p_square_quantile	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    struct extended_p_square_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::extended_p_square_quantile::impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef accumulators::impl::extended_p_square_quantile_impl<mpl::_1, unweighted, linear> impl;$/;"	t	struct:boost::accumulators::tag::extended_p_square_quantile	access:public
boost::accumulators::tag::extended_p_square_quantile_quadratic	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    struct extended_p_square_quantile_quadratic$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::extended_p_square_quantile_quadratic::impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef accumulators::impl::extended_p_square_quantile_impl<mpl::_1, unweighted, quadratic> impl;$/;"	t	struct:boost::accumulators::tag::extended_p_square_quantile_quadratic	access:public
boost::accumulators::tag::external	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^    struct external$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::external	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^    struct external<Feature, Tag, void>$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::external::impl	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        impl;$/;"	t	struct:boost::accumulators::tag::external	access:public
boost::accumulators::tag::immediate_mean	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct immediate_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::immediate_mean::impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef accumulators::impl::immediate_mean_impl<mpl::_1, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::immediate_mean	access:public
boost::accumulators::tag::immediate_mean_of_variates	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct immediate_mean_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::immediate_mean_of_variates::impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef mpl::always<accumulators::impl::immediate_mean_impl<VariateType, VariateTag> > impl;$/;"	t	struct:boost::accumulators::tag::immediate_mean_of_variates	access:public
boost::accumulators::tag::immediate_mean_of_weights	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct immediate_mean_of_weights$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::immediate_mean_of_weights::impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef accumulators::impl::immediate_mean_impl<mpl::_2, tag::weight> impl;$/;"	t	struct:boost::accumulators::tag::immediate_mean_of_weights	access:public
boost::accumulators::tag::immediate_mean_of_weights::is_weight_accumulator	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef mpl::true_ is_weight_accumulator;$/;"	t	struct:boost::accumulators::tag::immediate_mean_of_weights	access:public
boost::accumulators::tag::immediate_weighted_mean	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct immediate_weighted_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::immediate_weighted_mean::impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef accumulators::impl::immediate_weighted_mean_impl<mpl::_1, mpl::_2, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::immediate_weighted_mean	access:public
boost::accumulators::tag::immediate_weighted_mean_of_variates	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct immediate_weighted_mean_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::immediate_weighted_mean_of_variates::impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef accumulators::impl::immediate_weighted_mean_impl<VariateType, mpl::_2, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::immediate_weighted_mean_of_variates	access:public
boost::accumulators::tag::kurtosis	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^    struct kurtosis$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::kurtosis::impl	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^        typedef accumulators::impl::kurtosis_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::kurtosis	access:public
boost::accumulators::tag::lazy_variance	/usr/include/boost/accumulators/statistics/variance.hpp	/^    struct lazy_variance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::lazy_variance::impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^        typedef accumulators::impl::lazy_variance_impl<mpl::_1, mean> impl;$/;"	t	struct:boost::accumulators::tag::lazy_variance	access:public
boost::accumulators::tag::lazy_weighted_variance	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    struct lazy_weighted_variance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::lazy_weighted_variance::impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef accumulators::impl::lazy_weighted_variance_impl<mpl::_1, mpl::_2, weighted_mean> impl;$/;"	t	struct:boost::accumulators::tag::lazy_weighted_variance	access:public
boost::accumulators::tag::max	/usr/include/boost/accumulators/statistics/max.hpp	/^    struct max$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::max::impl	/usr/include/boost/accumulators/statistics/max.hpp	/^        typedef accumulators::impl::max_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::max	access:public
boost::accumulators::tag::mean	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::mean::impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef accumulators::impl::mean_impl<mpl::_1, sum> impl;$/;"	t	struct:boost::accumulators::tag::mean	access:public
boost::accumulators::tag::mean_of_variates	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct mean_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::mean_of_variates::impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef mpl::always<accumulators::impl::mean_impl<VariateType, sum_of_variates<VariateType, VariateTag> > > impl;$/;"	t	struct:boost::accumulators::tag::mean_of_variates	access:public
boost::accumulators::tag::mean_of_weights	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct mean_of_weights$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::mean_of_weights::impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef accumulators::impl::mean_impl<mpl::_2, sum_of_weights> impl;$/;"	t	struct:boost::accumulators::tag::mean_of_weights	access:public
boost::accumulators::tag::mean_of_weights::is_weight_accumulator	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef mpl::true_ is_weight_accumulator;$/;"	t	struct:boost::accumulators::tag::mean_of_weights	access:public
boost::accumulators::tag::median	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::median::impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef accumulators::impl::median_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::median	access:public
boost::accumulators::tag::min	/usr/include/boost/accumulators/statistics/min.hpp	/^    struct min$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::min::impl	/usr/include/boost/accumulators/statistics/min.hpp	/^        typedef accumulators::impl::min_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::min	access:public
boost::accumulators::tag::moment	/usr/include/boost/accumulators/statistics/moment.hpp	/^    struct moment$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::moment::impl	/usr/include/boost/accumulators/statistics/moment.hpp	/^        typedef accumulators::impl::moment_impl<mpl::int_<N>, mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::moment	access:public
boost::accumulators::tag::non_coherent_tail_mean	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    struct non_coherent_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::non_coherent_tail_mean::impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef accumulators::impl::non_coherent_tail_mean_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::non_coherent_tail_mean	access:public
boost::accumulators::tag::non_coherent_weighted_tail_mean	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^    struct non_coherent_weighted_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::non_coherent_weighted_tail_mean::impl	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        typedef accumulators::impl::non_coherent_weighted_tail_mean_impl<mpl::_1, mpl::_2, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::non_coherent_weighted_tail_mean	access:public
boost::accumulators::tag::p_square_cumulative_distribution	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^    struct p_square_cumulative_distribution$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,p_square_cumulative_distribution_num_cells
boost::accumulators::tag::p_square_cumulative_distribution::impl	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        typedef accumulators::impl::p_square_cumulative_distribution_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::p_square_cumulative_distribution	access:public
boost::accumulators::tag::p_square_quantile	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    struct p_square_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::p_square_quantile::impl	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        typedef accumulators::impl::p_square_quantile_impl<mpl::_1, regular> impl;$/;"	t	struct:boost::accumulators::tag::p_square_quantile	access:public
boost::accumulators::tag::p_square_quantile_for_median	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    struct p_square_quantile_for_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::p_square_quantile_for_median::impl	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        typedef accumulators::impl::p_square_quantile_impl<mpl::_1, for_median> impl;$/;"	t	struct:boost::accumulators::tag::p_square_quantile_for_median	access:public
boost::accumulators::tag::peaks_over_threshold	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    struct peaks_over_threshold$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,pot_threshold_value
boost::accumulators::tag::peaks_over_threshold::impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef accumulators::impl::peaks_over_threshold_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::peaks_over_threshold	access:public
boost::accumulators::tag::peaks_over_threshold_prob	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    struct peaks_over_threshold_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,pot_threshold_probability
boost::accumulators::tag::peaks_over_threshold_prob::impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef accumulators::impl::peaks_over_threshold_prob_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::peaks_over_threshold_prob	access:public
boost::accumulators::tag::pot_quantile	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    struct pot_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::pot_quantile::impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef accumulators::impl::pot_quantile_impl<mpl::_1, unweighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::pot_quantile	access:public
boost::accumulators::tag::pot_quantile_prob	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    struct pot_quantile_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::pot_quantile_prob::impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef accumulators::impl::pot_quantile_impl<mpl::_1, unweighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::pot_quantile_prob	access:public
boost::accumulators::tag::pot_tail_mean	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    struct pot_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::pot_tail_mean::impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef accumulators::impl::pot_tail_mean_impl<mpl::_1, unweighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::pot_tail_mean	access:public
boost::accumulators::tag::pot_tail_mean_prob	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    struct pot_tail_mean_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::pot_tail_mean_prob::impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef accumulators::impl::pot_tail_mean_impl<mpl::_1, unweighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::pot_tail_mean_prob	access:public
boost::accumulators::tag::quantile	/usr/include/boost/accumulators/statistics_fwd.hpp	/^    struct quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::quantile::impl	/usr/include/boost/accumulators/statistics_fwd.hpp	/^        typedef mpl::print<class ____MISSING_SPECIFIC_QUANTILE_FEATURE_IN_ACCUMULATOR_SET____ > impl;$/;"	t	struct:boost::accumulators::tag::quantile	access:public
boost::accumulators::tag::reference	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^    struct reference$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::reference::impl	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^        typedef mpl::always<accumulators::impl::reference_accumulator_impl<Referent, Tag> > impl;$/;"	t	struct:boost::accumulators::tag::reference	access:public
boost::accumulators::tag::reference_tag	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^    struct reference_tag$/;"	s	namespace:boost::accumulators::tag
boost::accumulators::tag::relative_tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    struct relative_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::relative_tail_variate_means::impl	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        typedef accumulators::impl::tail_variate_means_impl<mpl::_1, relative, LeftRight, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::relative_tail_variate_means	access:public
boost::accumulators::tag::relative_weighted_tail_variate_means	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    struct relative_weighted_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::relative_weighted_tail_variate_means::impl	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        typedef accumulators::impl::weighted_tail_variate_means_impl<mpl::_1, mpl::_2, relative, LeftRight, VariateType> impl;$/;"	t	struct:boost::accumulators::tag::relative_weighted_tail_variate_means	access:public
boost::accumulators::tag::rolling_count	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^    struct rolling_count$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::rolling_count::boost::parameter::window_size	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^        static boost::parameter::keyword<tag::rolling_window_size> const window_size;$/;"	m	class:boost::accumulators::tag::rolling_count::boost::parameter	access:public
boost::accumulators::tag::rolling_count::impl	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^        typedef accumulators::impl::rolling_count_impl< mpl::_1 > impl;$/;"	t	struct:boost::accumulators::tag::rolling_count	access:public
boost::accumulators::tag::rolling_mean	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^    struct rolling_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::rolling_mean::boost::parameter::window_size	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^        static boost::parameter::keyword<tag::rolling_window_size> const window_size;$/;"	m	class:boost::accumulators::tag::rolling_mean::boost::parameter	access:public
boost::accumulators::tag::rolling_mean::impl	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^        typedef accumulators::impl::rolling_mean_impl< mpl::_1 > impl;$/;"	t	struct:boost::accumulators::tag::rolling_mean	access:public
boost::accumulators::tag::rolling_sum	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^    struct rolling_sum$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::rolling_sum::boost::parameter::window_size	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        static boost::parameter::keyword<tag::rolling_window_size> const window_size;$/;"	m	class:boost::accumulators::tag::rolling_sum::boost::parameter	access:public
boost::accumulators::tag::rolling_sum::impl	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        typedef accumulators::impl::rolling_sum_impl< mpl::_1 > impl;$/;"	t	struct:boost::accumulators::tag::rolling_sum	access:public
boost::accumulators::tag::rolling_window	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    struct rolling_window$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::rolling_window::boost::parameter::window_size	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        static boost::parameter::keyword<tag::rolling_window_size> const window_size;$/;"	m	class:boost::accumulators::tag::rolling_window::boost::parameter	access:public
boost::accumulators::tag::rolling_window::impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef accumulators::impl::rolling_window_impl< mpl::_1 > impl;$/;"	t	struct:boost::accumulators::tag::rolling_window	access:public
boost::accumulators::tag::rolling_window_plus1	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    struct rolling_window_plus1$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,tag::rolling_window_size
boost::accumulators::tag::rolling_window_plus1::boost::parameter::window_size	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        static boost::parameter::keyword<tag::rolling_window_size> const window_size;$/;"	m	class:boost::accumulators::tag::rolling_window_plus1::boost::parameter	access:public
boost::accumulators::tag::rolling_window_plus1::impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef accumulators::impl::rolling_window_plus1_impl< mpl::_1 > impl;$/;"	t	struct:boost::accumulators::tag::rolling_window_plus1	access:public
boost::accumulators::tag::skewness	/usr/include/boost/accumulators/statistics/skewness.hpp	/^    struct skewness$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::skewness::impl	/usr/include/boost/accumulators/statistics/skewness.hpp	/^        typedef accumulators::impl::skewness_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::skewness	access:public
boost::accumulators::tag::sum	/usr/include/boost/accumulators/statistics/sum.hpp	/^    struct sum$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::sum::impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^        typedef accumulators::impl::sum_impl<mpl::_1, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::sum	access:public
boost::accumulators::tag::sum_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    struct sum_kahan$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::sum_kahan::impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^        typedef impl::sum_kahan_impl< mpl::_1, tag::sample > impl;$/;"	t	struct:boost::accumulators::tag::sum_kahan	access:public
boost::accumulators::tag::sum_of_variates	/usr/include/boost/accumulators/statistics/sum.hpp	/^    struct sum_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::sum_of_variates::impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^        typedef mpl::always<accumulators::impl::sum_impl<VariateType, VariateTag> > impl;$/;"	t	struct:boost::accumulators::tag::sum_of_variates	access:public
boost::accumulators::tag::sum_of_variates_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    struct sum_of_variates_kahan$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::sum_of_variates_kahan::impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^        typedef mpl::always<accumulators::impl::sum_kahan_impl<VariateType, VariateTag> > impl;$/;"	t	struct:boost::accumulators::tag::sum_of_variates_kahan	access:public
boost::accumulators::tag::sum_of_weights	/usr/include/boost/accumulators/statistics/sum.hpp	/^    struct sum_of_weights$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::sum_of_weights::impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^        typedef accumulators::impl::sum_impl<mpl::_2, tag::weight> impl;$/;"	t	struct:boost::accumulators::tag::sum_of_weights	access:public
boost::accumulators::tag::sum_of_weights::is_weight_accumulator	/usr/include/boost/accumulators/statistics/sum.hpp	/^        typedef mpl::true_ is_weight_accumulator;$/;"	t	struct:boost::accumulators::tag::sum_of_weights	access:public
boost::accumulators::tag::sum_of_weights_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    struct sum_of_weights_kahan$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::sum_of_weights_kahan::impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^        typedef accumulators::impl::sum_kahan_impl<mpl::_2, tag::weight> impl;$/;"	t	struct:boost::accumulators::tag::sum_of_weights_kahan	access:public
boost::accumulators::tag::sum_of_weights_kahan::is_weight_accumulator	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^        typedef mpl::true_ is_weight_accumulator;$/;"	t	struct:boost::accumulators::tag::sum_of_weights_kahan	access:public
boost::accumulators::tag::tail	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct tail$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,tail_cache_size_named_arg
boost::accumulators::tag::tail::boost::parameter::cache_size	/usr/include/boost/accumulators/statistics/tail.hpp	/^        static boost::parameter::keyword<tail_cache_size_named_arg<LeftRight> > const cache_size;$/;"	m	class:boost::accumulators::tag::tail::boost::parameter	access:public
boost::accumulators::tag::tail::impl	/usr/include/boost/accumulators/statistics/tail.hpp	/^        typedef accumulators::impl::tail_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::tail	access:public
boost::accumulators::tag::tail_mean	/usr/include/boost/accumulators/statistics_fwd.hpp	/^    struct tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::tail_mean::impl	/usr/include/boost/accumulators/statistics_fwd.hpp	/^        typedef mpl::print<class ____MISSING_SPECIFIC_TAIL_MEAN_FEATURE_IN_ACCUMULATOR_SET____ > impl;$/;"	t	struct:boost::accumulators::tag::tail_mean	access:public
boost::accumulators::tag::tail_quantile	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^    struct tail_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::tail_quantile::impl	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^        typedef accumulators::impl::tail_quantile_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::tail_quantile	access:public
boost::accumulators::tag::tail_variate	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    struct tail_variate$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::tail_variate::impl	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        typedef mpl::always<accumulators::impl::tail_variate_impl<VariateType, VariateTag, LeftRight> > impl;$/;"	t	struct:boost::accumulators::tag::tail_variate	access:public
boost::accumulators::tag::tail_weights	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    struct tail_weights$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::tail_weights::impl	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        typedef accumulators::impl::tail_variate_impl<mpl::_2, tag::weight, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::tail_weights	access:public
boost::accumulators::tag::value	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^    struct value$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::value::impl	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^        typedef mpl::always<accumulators::impl::value_accumulator_impl<ValueType, Tag> > impl;$/;"	t	struct:boost::accumulators::tag::value	access:public
boost::accumulators::tag::value_tag	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^    struct value_tag$/;"	s	namespace:boost::accumulators::tag
boost::accumulators::tag::variance	/usr/include/boost/accumulators/statistics/variance.hpp	/^    struct variance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::variance::impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^        typedef accumulators::impl::variance_impl<mpl::_1, mean, sample> impl;$/;"	t	struct:boost::accumulators::tag::variance	access:public
boost::accumulators::tag::weighted_covariance	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^    struct weighted_covariance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_covariance::impl	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        typedef accumulators::impl::weighted_covariance_impl<mpl::_1, mpl::_2, VariateType, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::weighted_covariance	access:public
boost::accumulators::tag::weighted_density	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^    struct weighted_density$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,density_cache_size,density_num_bins
boost::accumulators::tag::weighted_density::boost::parameter::cache_size	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        static boost::parameter::keyword<density_cache_size> const cache_size;$/;"	m	class:boost::accumulators::tag::weighted_density::boost::parameter	access:public
boost::accumulators::tag::weighted_density::boost::parameter::num_bins	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        static boost::parameter::keyword<density_num_bins> const num_bins;$/;"	m	class:boost::accumulators::tag::weighted_density::boost::parameter	access:public
boost::accumulators::tag::weighted_density::impl	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        typedef accumulators::impl::weighted_density_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_density	access:public
boost::accumulators::tag::weighted_extended_p_square	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^    struct weighted_extended_p_square$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,extended_p_square_probabilities
boost::accumulators::tag::weighted_extended_p_square::impl	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        typedef accumulators::impl::weighted_extended_p_square_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_extended_p_square	access:public
boost::accumulators::tag::weighted_extended_p_square_quantile	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    struct weighted_extended_p_square_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_extended_p_square_quantile::impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef accumulators::impl::extended_p_square_quantile_impl<mpl::_1, weighted, linear> impl;$/;"	t	struct:boost::accumulators::tag::weighted_extended_p_square_quantile	access:public
boost::accumulators::tag::weighted_extended_p_square_quantile_quadratic	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    struct weighted_extended_p_square_quantile_quadratic$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_extended_p_square_quantile_quadratic::impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef accumulators::impl::extended_p_square_quantile_impl<mpl::_1, weighted, quadratic> impl;$/;"	t	struct:boost::accumulators::tag::weighted_extended_p_square_quantile_quadratic	access:public
boost::accumulators::tag::weighted_kurtosis	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^    struct weighted_kurtosis$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_kurtosis::impl	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^        typedef accumulators::impl::weighted_kurtosis_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_kurtosis	access:public
boost::accumulators::tag::weighted_mean	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct weighted_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_mean::impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef accumulators::impl::weighted_mean_impl<mpl::_1, mpl::_2, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::weighted_mean	access:public
boost::accumulators::tag::weighted_mean_of_variates	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct weighted_mean_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_mean_of_variates::impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef accumulators::impl::weighted_mean_impl<VariateType, mpl::_2, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::weighted_mean_of_variates	access:public
boost::accumulators::tag::weighted_median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct weighted_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_median::impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef accumulators::impl::weighted_median_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::weighted_median	access:public
boost::accumulators::tag::weighted_moment	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^    struct weighted_moment$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_moment::impl	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        typedef accumulators::impl::weighted_moment_impl<mpl::int_<N>, mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_moment	access:public
boost::accumulators::tag::weighted_p_square_cumulative_distribution	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^    struct weighted_p_square_cumulative_distribution$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,p_square_cumulative_distribution_num_cells
boost::accumulators::tag::weighted_p_square_cumulative_distribution::impl	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef accumulators::impl::weighted_p_square_cumulative_distribution_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_p_square_cumulative_distribution	access:public
boost::accumulators::tag::weighted_p_square_quantile	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^    struct weighted_p_square_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_p_square_quantile::impl	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef accumulators::impl::weighted_p_square_quantile_impl<mpl::_1, mpl::_2, regular> impl;$/;"	t	struct:boost::accumulators::tag::weighted_p_square_quantile	access:public
boost::accumulators::tag::weighted_p_square_quantile_for_median	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^    struct weighted_p_square_quantile_for_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_p_square_quantile_for_median::impl	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef accumulators::impl::weighted_p_square_quantile_impl<mpl::_1, mpl::_2, for_median> impl;$/;"	t	struct:boost::accumulators::tag::weighted_p_square_quantile_for_median	access:public
boost::accumulators::tag::weighted_peaks_over_threshold	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    struct weighted_peaks_over_threshold$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,pot_threshold_value
boost::accumulators::tag::weighted_peaks_over_threshold::impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef accumulators::impl::weighted_peaks_over_threshold_impl<mpl::_1, mpl::_2, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_peaks_over_threshold	access:public
boost::accumulators::tag::weighted_peaks_over_threshold_prob	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    struct weighted_peaks_over_threshold_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,pot_threshold_probability
boost::accumulators::tag::weighted_peaks_over_threshold_prob::impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef accumulators::impl::weighted_peaks_over_threshold_prob_impl<mpl::_1, mpl::_2, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_peaks_over_threshold_prob	access:public
boost::accumulators::tag::weighted_pot_quantile	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    struct weighted_pot_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_pot_quantile::impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef accumulators::impl::pot_quantile_impl<mpl::_1, weighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_pot_quantile	access:public
boost::accumulators::tag::weighted_pot_quantile_prob	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    struct weighted_pot_quantile_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_pot_quantile_prob::impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef accumulators::impl::pot_quantile_impl<mpl::_1, weighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_pot_quantile_prob	access:public
boost::accumulators::tag::weighted_pot_tail_mean	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    struct weighted_pot_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_pot_tail_mean::impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef accumulators::impl::pot_tail_mean_impl<mpl::_1, weighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_pot_tail_mean	access:public
boost::accumulators::tag::weighted_pot_tail_mean_prob	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    struct weighted_pot_tail_mean_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_pot_tail_mean_prob::impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef accumulators::impl::pot_tail_mean_impl<mpl::_1, weighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_pot_tail_mean_prob	access:public
boost::accumulators::tag::weighted_skewness	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^    struct weighted_skewness$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_skewness::impl	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^        typedef accumulators::impl::weighted_skewness_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_skewness	access:public
boost::accumulators::tag::weighted_sum	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    struct weighted_sum$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_sum::impl	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        typedef accumulators::impl::weighted_sum_impl<mpl::_1, mpl::_2, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::weighted_sum	access:public
boost::accumulators::tag::weighted_sum_kahan	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    struct weighted_sum_kahan$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_sum_kahan::impl	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        typedef accumulators::impl::weighted_sum_kahan_impl<mpl::_1, mpl::_2, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::weighted_sum_kahan	access:public
boost::accumulators::tag::weighted_sum_of_variates	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    struct weighted_sum_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_sum_of_variates::impl	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        typedef accumulators::impl::weighted_sum_impl<VariateType, mpl::_2, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::weighted_sum_of_variates	access:public
boost::accumulators::tag::weighted_sum_of_variates_kahan	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    struct weighted_sum_of_variates_kahan$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_sum_of_variates_kahan::impl	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        typedef accumulators::impl::weighted_sum_kahan_impl<VariateType, mpl::_2, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::weighted_sum_of_variates_kahan	access:public
boost::accumulators::tag::weighted_tail_quantile	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^    struct weighted_tail_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_tail_quantile::impl	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^        typedef accumulators::impl::weighted_tail_quantile_impl<mpl::_1, mpl::_2, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_tail_quantile	access:public
boost::accumulators::tag::weighted_variance	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    struct weighted_variance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::weighted_variance::impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef accumulators::impl::weighted_variance_impl<mpl::_1, mpl::_2, immediate_weighted_mean, sample> impl;$/;"	t	struct:boost::accumulators::tag::weighted_variance	access:public
boost::accumulators::tag::with_density_median	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct with_density_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::with_density_median::impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef accumulators::impl::with_density_median_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::with_density_median	access:public
boost::accumulators::tag::with_density_weighted_median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct with_density_weighted_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::with_density_weighted_median::impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef accumulators::impl::with_density_weighted_median_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::with_density_weighted_median	access:public
boost::accumulators::tag::with_p_square_cumulative_distribution_median	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct with_p_square_cumulative_distribution_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::with_p_square_cumulative_distribution_median::impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef accumulators::impl::with_p_square_cumulative_distribution_median_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::with_p_square_cumulative_distribution_median	access:public
boost::accumulators::tag::with_p_square_cumulative_distribution_weighted_median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct with_p_square_cumulative_distribution_weighted_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
boost::accumulators::tag::with_p_square_cumulative_distribution_weighted_median::impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::with_p_square_cumulative_distribution_weighted_median	access:public
boost::accumulators::tail_cache_size_named_arg	/usr/include/boost/accumulators/statistics/tail.hpp	/^struct tail_cache_size_named_arg$/;"	s	namespace:boost::accumulators
boost::accumulators::tail_cache_size_named_arg	/usr/include/boost/accumulators/statistics/tail.hpp	/^struct tail_cache_size_named_arg<left>$/;"	s	namespace:boost::accumulators	inherits:tag::left_tail_cache_size
boost::accumulators::tail_cache_size_named_arg	/usr/include/boost/accumulators/statistics/tail.hpp	/^struct tail_cache_size_named_arg<right>$/;"	s	namespace:boost::accumulators	inherits:tag::right_tail_cache_size
boost::accumulators::unweighted	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct unweighted {};$/;"	s	namespace:boost::accumulators
boost::accumulators::weighted	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct weighted {};$/;"	s	namespace:boost::accumulators
boost::accumulators::with_cached_result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct with_cached_result$/;"	s	namespace:boost::accumulators	inherits:Accumulator
boost::accumulators::with_cached_result::cache	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        aligned_storage<sizeof(result_type)> cache;$/;"	m	struct:boost::accumulators::with_cached_result	access:private
boost::accumulators::with_cached_result::get	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        result_type const &get() const$/;"	f	struct:boost::accumulators::with_cached_result	access:private	signature:() const
boost::accumulators::with_cached_result::has_result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        bool has_result() const$/;"	f	struct:boost::accumulators::with_cached_result	access:private	signature:() const
boost::accumulators::with_cached_result::on_drop	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        void on_drop(Args const &args)$/;"	f	struct:boost::accumulators::with_cached_result	access:public	signature:(Args const &args)
boost::accumulators::with_cached_result::operator =	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        with_cached_result &operator =(with_cached_result const &);$/;"	p	struct:boost::accumulators::with_cached_result	access:private	signature:(with_cached_result const &)
boost::accumulators::with_cached_result::result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::with_cached_result	access:public	signature:(Args const &args) const
boost::accumulators::with_cached_result::result_type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef typename Accumulator::result_type result_type;$/;"	t	struct:boost::accumulators::with_cached_result	access:public
boost::accumulators::with_cached_result::set	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        void set(result_type const &r)$/;"	f	struct:boost::accumulators::with_cached_result	access:private	signature:(result_type const &r)
boost::accumulators::with_cached_result::with_cached_result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        with_cached_result(Args const &args)$/;"	f	struct:boost::accumulators::with_cached_result	access:public	signature:(Args const &args)
boost::accumulators::with_cached_result::with_cached_result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        with_cached_result(with_cached_result const &that)$/;"	f	struct:boost::accumulators::with_cached_result	access:public	signature:(with_cached_result const &that)
boost::accumulators::with_cached_result::~with_cached_result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        ~with_cached_result()$/;"	f	struct:boost::accumulators::with_cached_result	access:public	signature:()
boost::accumulators::with_density	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct with_density {};$/;"	s	namespace:boost::accumulators
boost::accumulators::with_error	/usr/include/boost/accumulators/statistics/with_error.hpp	/^struct with_error$/;"	s	namespace:boost::accumulators	inherits:mpl::transform_view
boost::accumulators::with_p_square_cumulative_distribution	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct with_p_square_cumulative_distribution {};$/;"	s	namespace:boost::accumulators
boost::accumulators::with_p_square_quantile	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct with_p_square_quantile {};$/;"	s	namespace:boost::accumulators
boost::accumulators::with_threshold_probability	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct with_threshold_probability {};$/;"	s	namespace:boost::accumulators
boost::accumulators::with_threshold_value	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct with_threshold_value {};$/;"	s	namespace:boost::accumulators
boost::detail	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^namespace boost { namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	/^namespace boost { namespace detail {$/;"	n	namespace:boost
boost::detail	/usr/include/boost/accumulators/numeric/detail/pod_singleton.hpp	/^namespace boost { namespace detail {$/;"	n	namespace:boost
boost::detail::function1	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^struct function1$/;"	s	namespace:boost::detail
boost::detail::function1::operator ()	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^    operator ()(A0 &a0) const$/;"	f	struct:boost::detail::function1	access:public	signature:(A0 &a0) const
boost::detail::function1::operator ()	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^    operator ()(A0 const &a0) const$/;"	f	struct:boost::detail::function1	access:public	signature:(A0 const &a0) const
boost::detail::function1::result	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^    struct result$/;"	s	struct:boost::detail::function1	access:public
boost::detail::function1::result	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^    struct result<This(A0)>$/;"	s	struct:boost::detail::function1	access:public
boost::detail::function1::result::arg0	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^        >::type arg0;$/;"	t	struct:boost::detail::function1::result	access:public
boost::detail::function1::result::impl	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^        typedef typename mpl::apply1<F, arg0>::type impl;$/;"	t	struct:boost::detail::function1::result	access:public
boost::detail::function1::result::type	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^        typedef typename impl::result_type type;$/;"	t	struct:boost::detail::function1::result	access:public
boost::detail::function_name	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	/^struct function_name$/;"	s	namespace:boost::detail
boost::detail::function_name::result	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	/^    struct result {};$/;"	s	struct:boost::detail::function_name	access:public
boost::detail::pod_singleton	/usr/include/boost/accumulators/numeric/detail/pod_singleton.hpp	/^struct pod_singleton$/;"	s	namespace:boost::detail
boost::detail::pod_singleton::instance	/usr/include/boost/accumulators/numeric/detail/pod_singleton.hpp	/^    static T instance;$/;"	m	struct:boost::detail::pod_singleton	access:public
boost::detail::pod_singleton::instance	/usr/include/boost/accumulators/numeric/detail/pod_singleton.hpp	/^T pod_singleton<T>::instance;$/;"	m	class:boost::detail::pod_singleton
boost::numeric	/usr/include/boost/accumulators/numeric/functional.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
boost::numeric	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^namespace boost { namespace numeric { namespace operators$/;"	n	namespace:boost
boost::numeric	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
boost::numeric	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
boost::numeric	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
boost::numeric	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
boost::numeric	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
boost::numeric	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
boost::numeric	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    namespace numeric { namespace functional$/;"	n	namespace:boost
boost::numeric::__anon1::op::as_max	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::as_max const &as_max = boost::detail::pod_singleton<op::as_max>::instance;$/;"	m	class:boost::numeric::__anon1::op
boost::numeric::__anon1::op::as_min	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::as_min const &as_min = boost::detail::pod_singleton<op::as_min>::instance;$/;"	m	class:boost::numeric::__anon1::op
boost::numeric::__anon1::op::as_one	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::as_one const &as_one = boost::detail::pod_singleton<op::as_one>::instance;$/;"	m	class:boost::numeric::__anon1::op
boost::numeric::__anon1::op::as_zero	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::as_zero const &as_zero = boost::detail::pod_singleton<op::as_zero>::instance;$/;"	m	class:boost::numeric::__anon1::op
boost::numeric::__anon1::op::average	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::average const &average = boost::detail::pod_singleton<op::average>::instance;$/;"	m	class:boost::numeric::__anon1::op
boost::numeric::__anon1::op::max_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::max_assign const &max_assign = boost::detail::pod_singleton<op::max_assign>::instance;$/;"	m	class:boost::numeric::__anon1::op
boost::numeric::__anon1::op::min_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::min_assign const &min_assign = boost::detail::pod_singleton<op::min_assign>::instance;$/;"	m	class:boost::numeric::__anon1::op
boost::numeric::__anon3::op::outer_product	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        op::outer_product const &outer_product = boost::detail::pod_singleton<op::outer_product>::instance;$/;"	m	class:boost::numeric::__anon3::op
boost::numeric::default_	/usr/include/boost/accumulators/numeric/functional.hpp	/^    struct default_$/;"	s	namespace:boost::numeric
boost::numeric::default_::operator T const &	/usr/include/boost/accumulators/numeric/functional.hpp	/^        operator T const & () const$/;"	f	struct:boost::numeric::default_	access:public	signature:() const
boost::numeric::default_::type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef default_ type;$/;"	t	struct:boost::numeric::default_	access:public
boost::numeric::default_::value	/usr/include/boost/accumulators/numeric/functional.hpp	/^        static T const value;$/;"	m	struct:boost::numeric::default_	access:public
boost::numeric::default_::value	/usr/include/boost/accumulators/numeric/functional.hpp	/^    T const default_<T>::value = T();$/;"	m	class:boost::numeric::default_
boost::numeric::default_::value_type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef T value_type;$/;"	t	struct:boost::numeric::default_	access:public
boost::numeric::detail	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^    namespace detail$/;"	n	namespace:boost::numeric
boost::numeric::detail::one_complex	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^        struct one_complex$/;"	s	namespace:boost::numeric::detail
boost::numeric::detail::one_complex::std::value	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^            static std::complex<T> const value;$/;"	m	class:boost::numeric::detail::one_complex::std	access:public
boost::numeric::detail::std::one_complex::value	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^        std::complex<T> const one_complex<T>::value$/;"	m	class:boost::numeric::detail::std::one_complex
boost::numeric::functional	/usr/include/boost/accumulators/numeric/functional.hpp	/^    namespace functional$/;"	n	namespace:boost::numeric
boost::numeric::functional	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^    namespace functional$/;"	n	namespace:boost::numeric
boost::numeric::functional	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^    namespace functional$/;"	n	namespace:boost::numeric
boost::numeric::functional	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^    namespace functional$/;"	n	namespace:boost::numeric
boost::numeric::functional	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    namespace functional$/;"	n	namespace:boost::numeric
boost::numeric::functional	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    namespace numeric { namespace functional$/;"	n	namespace:boost::numeric
boost::numeric::functional::are_integral	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct are_integral$/;"	s	namespace:boost::numeric::functional	inherits:mpl::and_
boost::numeric::functional::as_max	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_max$/;"	s	namespace:boost::numeric::functional	inherits:as_max_base
boost::numeric::functional::as_max	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct as_max<T, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_max	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct as_max<T, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_max::operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_max	access:public	signature:(T &arr) const
boost::numeric::functional::as_max::operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_max	access:public	signature:(T &arr) const
boost::numeric::functional::as_max_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_max_base$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_max_base::BOOST_STATIC_ASSERT	/usr/include/boost/accumulators/numeric/functional.hpp	/^            BOOST_STATIC_ASSERT(std::numeric_limits<typename remove_const<Arg>::type>::is_specialized);$/;"	p	struct:boost::numeric::functional::as_max_base	access:public	signature:(std::numeric_limits<typename remove_const<Arg>::type>::is_specialized)
boost::numeric::functional::as_max_base::operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            typename remove_const<Arg>::type operator ()(Arg &) const$/;"	f	struct:boost::numeric::functional::as_max_base	access:public	signature:(Arg &) const
boost::numeric::functional::as_min	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_min$/;"	s	namespace:boost::numeric::functional	inherits:as_min_base
boost::numeric::functional::as_min	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct as_min<T, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_min	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct as_min<T, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_min::operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_min	access:public	signature:(T &arr) const
boost::numeric::functional::as_min::operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_min	access:public	signature:(T &arr) const
boost::numeric::functional::as_min_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_min_base$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_min_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_min_base<Arg, typename enable_if<is_floating_point<Arg> >::type>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_min_base::BOOST_STATIC_ASSERT	/usr/include/boost/accumulators/numeric/functional.hpp	/^            BOOST_STATIC_ASSERT(std::numeric_limits<typename remove_const<Arg>::type>::is_specialized);$/;"	p	struct:boost::numeric::functional::as_min_base	access:public	signature:(std::numeric_limits<typename remove_const<Arg>::type>::is_specialized)
boost::numeric::functional::as_min_base::operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            typename remove_const<Arg>::type operator ()(Arg &) const$/;"	f	struct:boost::numeric::functional::as_min_base	access:public	signature:(Arg &) const
boost::numeric::functional::as_one	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_one$/;"	s	namespace:boost::numeric::functional	inherits:as_one_base
boost::numeric::functional::as_one	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct as_one<T, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_one	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct as_one<T, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_one::operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_one	access:public	signature:(T &arr) const
boost::numeric::functional::as_one::operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_one	access:public	signature:(T &arr) const
boost::numeric::functional::as_one_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_one_base$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_one_base::operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            typename remove_const<Arg>::type operator ()(Arg &) const$/;"	f	struct:boost::numeric::functional::as_one_base	access:public	signature:(Arg &) const
boost::numeric::functional::as_zero	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_zero$/;"	s	namespace:boost::numeric::functional	inherits:as_zero_base
boost::numeric::functional::as_zero	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct as_zero<T, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_zero	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct as_zero<T, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_zero::operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_zero	access:public	signature:(T &arr) const
boost::numeric::functional::as_zero::operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_zero	access:public	signature:(T &arr) const
boost::numeric::functional::as_zero_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_zero_base$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::as_zero_base::operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            typename remove_const<Arg>::type operator ()(Arg &) const$/;"	f	struct:boost::numeric::functional::as_zero_base	access:public	signature:(Arg &) const
boost::numeric::functional::average	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct average$/;"	s	namespace:boost::numeric::functional	inherits:average_base
boost::numeric::functional::average	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct average<Left, Right, std_valarray_tag, RightTag>$/;"	s	namespace:boost::numeric::functional	inherits:mpl::if_::type
boost::numeric::functional::average	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct average<Left, Right, std_vector_tag, void>$/;"	s	namespace:boost::numeric::functional	inherits:mpl::if_::type
boost::numeric::functional::average_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct average_base$/;"	s	namespace:boost::numeric::functional	inherits:functional::divides
boost::numeric::functional::average_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct average_base<Left, Right, typename enable_if<are_integral<Left, Right> >::type>$/;"	s	namespace:boost::numeric::functional	inherits:functional::divides
boost::numeric::functional::detail	/usr/include/boost/accumulators/numeric/functional.hpp	/^        namespace detail$/;"	n	namespace:boost::numeric::functional
boost::numeric::functional::detail::lvalue_of	/usr/include/boost/accumulators/numeric/functional.hpp	/^            T &lvalue_of();$/;"	p	namespace:boost::numeric::functional::detail	signature:()
boost::numeric::functional::left_ref	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct left_ref$/;"	s	namespace:boost::numeric::functional
boost::numeric::functional::left_ref::type	/usr/include/boost/accumulators/numeric/functional.hpp	/^            typedef Left &type;$/;"	t	struct:boost::numeric::functional::left_ref	access:public
boost::numeric::functional::max_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct max_assign$/;"	s	namespace:boost::numeric::functional	inherits:max_assign_base
boost::numeric::functional::max_assign	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct max_assign<Left, Right, std_valarray_tag, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
boost::numeric::functional::max_assign	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct max_assign<Left, Right, std_vector_tag, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
boost::numeric::functional::max_assign::operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::max_assign	access:public	signature:(Left &left, Right &right) const
boost::numeric::functional::max_assign::operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::max_assign	access:public	signature:(Left &left, Right &right) const
boost::numeric::functional::max_assign_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct max_assign_base$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
boost::numeric::functional::max_assign_base::operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::max_assign_base	access:public	signature:(Left &left, Right &right) const
boost::numeric::functional::min_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct min_assign$/;"	s	namespace:boost::numeric::functional	inherits:min_assign_base
boost::numeric::functional::min_assign	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct min_assign<Left, Right, std_valarray_tag, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
boost::numeric::functional::min_assign	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct min_assign<Left, Right, std_vector_tag, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
boost::numeric::functional::min_assign::operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::min_assign	access:public	signature:(Left &left, Right &right) const
boost::numeric::functional::min_assign::operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::min_assign	access:public	signature:(Left &left, Right &right) const
boost::numeric::functional::min_assign_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct min_assign_base$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
boost::numeric::functional::min_assign_base::operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::min_assign_base	access:public	signature:(Left &left, Right &right) const
boost::numeric::functional::multiply_and_promote_to_double	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        struct multiply_and_promote_to_double$/;"	s	namespace:boost::numeric::functional	inherits:multiplies
boost::numeric::functional::outer_product	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        struct outer_product$/;"	s	namespace:boost::numeric::functional	inherits:outer_product_base
boost::numeric::functional::outer_product	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        struct outer_product<Left, Right, std_vector_tag, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
boost::numeric::functional::outer_product::operator ()	/usr/include/boost/accumulators/statistics/covariance.hpp	/^            operator ()(Left & left, Right & right) const$/;"	f	struct:boost::numeric::functional::outer_product	access:public	signature:(Left & left, Right & right) const
boost::numeric::functional::outer_product::result_type	/usr/include/boost/accumulators/statistics/covariance.hpp	/^            result_type;$/;"	t	struct:boost::numeric::functional::outer_product	access:public
boost::numeric::functional::outer_product_base	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        struct outer_product_base$/;"	s	namespace:boost::numeric::functional	inherits:functional::multiplies
boost::numeric::functional::promote	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct promote$/;"	s	namespace:boost::numeric::functional	inherits:promote_base
boost::numeric::functional::promote	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct promote<To, From, std_valarray_tag, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::promote	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct promote<ToFrom, ToFrom, std_valarray_tag, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::promote	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct promote<bool const, From, void, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:promote
boost::numeric::functional::promote	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct promote<bool, From, void, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::promote	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct promote<To, From, std_vector_tag, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::promote	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct promote<ToFrom, ToFrom, std_vector_tag, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::promote::operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            To operator ()(From &arr) const$/;"	f	struct:boost::numeric::functional::promote	access:public	signature:(From &arr) const
boost::numeric::functional::promote::operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            ToFrom &operator ()(ToFrom &tofrom) const$/;"	f	struct:boost::numeric::functional::promote	access:public	signature:(ToFrom &tofrom) const
boost::numeric::functional::promote::operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            bool operator ()(From &arr) const$/;"	f	struct:boost::numeric::functional::promote	access:public	signature:(From &arr) const
boost::numeric::functional::promote::operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            To operator ()(From &arr) const$/;"	f	struct:boost::numeric::functional::promote	access:public	signature:(From &arr) const
boost::numeric::functional::promote::operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            ToFrom &operator ()(ToFrom &tofrom) const$/;"	f	struct:boost::numeric::functional::promote	access:public	signature:(ToFrom &tofrom) const
boost::numeric::functional::promote_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct promote_base$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::promote_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct promote_base<ToFrom, ToFrom, void>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
boost::numeric::functional::promote_base::operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            To operator ()(From &from) const$/;"	f	struct:boost::numeric::functional::promote_base	access:public	signature:(From &from) const
boost::numeric::functional::promote_base::operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            ToFrom &operator ()(ToFrom &tofrom)$/;"	f	struct:boost::numeric::functional::promote_base	access:public	signature:(ToFrom &tofrom)
boost::numeric::functional::tag	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct tag<std::_Expr<T, U> >$/;"	s	namespace:boost::numeric::functional
boost::numeric::functional::tag	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct tag<std::valarray<T> >$/;"	s	namespace:boost::numeric::functional
boost::numeric::functional::tag	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct tag<std::vector<T, Al> >$/;"	s	namespace:boost::numeric::functional
boost::numeric::functional::tag	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^        struct tag$/;"	s	namespace:boost::numeric::functional
boost::numeric::functional::tag	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^        struct tag<T const volatile>$/;"	s	namespace:boost::numeric::functional	inherits:tag
boost::numeric::functional::tag	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^        struct tag<T const>$/;"	s	namespace:boost::numeric::functional	inherits:tag
boost::numeric::functional::tag	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^        struct tag<T volatile>$/;"	s	namespace:boost::numeric::functional	inherits:tag
boost::numeric::functional::tag::type	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            typedef std_valarray_tag type;$/;"	t	struct:boost::numeric::functional::tag	access:public
boost::numeric::functional::tag::type	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            typedef std_vector_tag type;$/;"	t	struct:boost::numeric::functional::tag	access:public
boost::numeric::functional::tag::type	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^            typedef void type;$/;"	t	struct:boost::numeric::functional::tag	access:public
boost::numeric::one	/usr/include/boost/accumulators/numeric/functional.hpp	/^    struct one$/;"	s	namespace:boost::numeric
boost::numeric::one	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^    struct one<std::complex<T> >$/;"	s	namespace:boost::numeric	inherits:detail::one_complex
boost::numeric::one::operator T const &	/usr/include/boost/accumulators/numeric/functional.hpp	/^        operator T const & () const$/;"	f	struct:boost::numeric::one	access:public	signature:() const
boost::numeric::one::operator value_type const &	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^        operator value_type const & () const$/;"	f	struct:boost::numeric::one	access:public	signature:() const
boost::numeric::one::type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef one type;$/;"	t	struct:boost::numeric::one	access:public
boost::numeric::one::type	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^        typedef one type;$/;"	t	struct:boost::numeric::one	access:public
boost::numeric::one::value	/usr/include/boost/accumulators/numeric/functional.hpp	/^        static T const value;$/;"	m	struct:boost::numeric::one	access:public
boost::numeric::one::value	/usr/include/boost/accumulators/numeric/functional.hpp	/^    T const one<T>::value = T(1);$/;"	m	class:boost::numeric::one
boost::numeric::one::value_type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef T value_type;$/;"	t	struct:boost::numeric::one	access:public
boost::numeric::one::value_type	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^        typedef std::complex<T> value_type;$/;"	t	struct:boost::numeric::one	access:public
boost::numeric::one_or_default	/usr/include/boost/accumulators/numeric/functional.hpp	/^    struct one_or_default$/;"	s	namespace:boost::numeric	inherits:mpl::if_::type
boost::numeric::op	/usr/include/boost/accumulators/numeric/functional.hpp	/^    namespace op$/;"	n	namespace:boost::numeric
boost::numeric::op	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^    namespace op$/;"	n	namespace:boost::numeric
boost::numeric::op	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    namespace op$/;"	n	namespace:boost::numeric
boost::numeric::op::as_max	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_max$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function1
boost::numeric::op::as_min	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_min$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function1
boost::numeric::op::as_one	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_one$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function1
boost::numeric::op::as_zero	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct as_zero$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function1
boost::numeric::op::average	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct average$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function2
boost::numeric::op::max_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct max_assign$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function2
boost::numeric::op::min_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct min_assign$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function2
boost::numeric::op::outer_product	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        struct outer_product$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function2
boost::numeric::op::promote	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct promote$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function1
boost::numeric::operators	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^namespace boost { namespace numeric { namespace operators$/;"	n	namespace:boost::numeric
boost::numeric::operators	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^    namespace operators$/;"	n	namespace:boost::numeric
boost::numeric::operators	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^    namespace operators$/;"	n	namespace:boost::numeric
boost::numeric::operators	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^    namespace operators$/;"	n	namespace:boost::numeric
boost::numeric::operators::acc_detail	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        namespace acc_detail$/;"	n	namespace:boost::numeric::operators
boost::numeric::operators::acc_detail	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        namespace acc_detail$/;"	n	namespace:boost::numeric::operators
boost::numeric::operators::acc_detail::make_valarray	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            struct make_valarray$/;"	s	namespace:boost::numeric::operators::acc_detail
boost::numeric::operators::acc_detail::make_valarray::type	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^                typedef std::valarray<typename Fun::result_type> type;$/;"	t	struct:boost::numeric::operators::acc_detail::make_valarray	access:public
boost::numeric::operators::acc_detail::make_vector	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            struct make_vector$/;"	s	namespace:boost::numeric::operators::acc_detail
boost::numeric::operators::acc_detail::make_vector::type	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^                typedef std::vector<typename Fun::result_type> type;$/;"	t	struct:boost::numeric::operators::acc_detail::make_vector	access:public
boost::numeric::operators::operator *	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^    operator *(std::complex<T> ri, U const &u)$/;"	f	namespace:boost::numeric::operators	signature:(std::complex<T> ri, U const &u)
boost::numeric::operators::operator *	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        operator *(std::valarray<Left> const &left, Right const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::valarray<Left> const &left, Right const &right)
boost::numeric::operators::operator *	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator *(Left const &left, std::vector<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(Left const &left, std::vector<Right> const &right)
boost::numeric::operators::operator *	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator *(std::vector<Left> const &left, Right const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, Right const &right)
boost::numeric::operators::operator *	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator *(std::vector<Left> const &left, std::vector<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, std::vector<Right> const &right)
boost::numeric::operators::operator +	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        operator +(std::valarray<Left> const &left, std::valarray<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::valarray<Left> const &left, std::valarray<Right> const &right)
boost::numeric::operators::operator +	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator +(std::vector<Left> const &left, std::vector<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, std::vector<Right> const &right)
boost::numeric::operators::operator +=	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator +=(std::vector<Left> &left, std::vector<Left> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> &left, std::vector<Left> const &right)
boost::numeric::operators::operator -	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator -(std::vector<Arg> const &arg)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Arg> const &arg)
boost::numeric::operators::operator -	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator -(std::vector<Left> const &left, std::vector<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, std::vector<Right> const &right)
boost::numeric::operators::operator /	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^    operator \/(std::complex<T> ri, U const &u)$/;"	f	namespace:boost::numeric::operators	signature:(std::complex<T> ri, U const &u)
boost::numeric::operators::operator /	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        operator \/(std::valarray<Left> const &left, Right const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::valarray<Left> const &left, Right const &right)
boost::numeric::operators::operator /	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator \/(std::vector<Left> const &left, Right const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, Right const &right)
boost::numeric::operators::operator /	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator \/(std::vector<Left> const &left, std::vector<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, std::vector<Right> const &right)
boost::numeric::pow	/usr/include/boost/accumulators/statistics/moment.hpp	/^    T const &pow(T const &x, mpl::int_<1>)$/;"	f	namespace:boost::numeric	signature:(T const &x, mpl::int_<1>)
boost::numeric::pow	/usr/include/boost/accumulators/statistics/moment.hpp	/^    T pow(T const &x, mpl::int_<N>)$/;"	f	namespace:boost::numeric	signature:(T const &x, mpl::int_<N>)
boost::numeric::promote	/usr/include/boost/accumulators/numeric/functional.hpp	/^    promote(From &from)$/;"	f	namespace:boost::numeric	signature:(From &from)
boost::numeric::promote	/usr/include/boost/accumulators/numeric/functional.hpp	/^    promote(From const &from)$/;"	f	namespace:boost::numeric	signature:(From const &from)
boost::numeric::promote	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^    promote(From const &from);$/;"	p	namespace:boost::numeric	signature:(From const &from)
boost::numeric::zero	/usr/include/boost/accumulators/numeric/functional.hpp	/^    struct zero$/;"	s	namespace:boost::numeric
boost::numeric::zero::operator T const &	/usr/include/boost/accumulators/numeric/functional.hpp	/^        operator T const & () const$/;"	f	struct:boost::numeric::zero	access:public	signature:() const
boost::numeric::zero::type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef zero type;$/;"	t	struct:boost::numeric::zero	access:public
boost::numeric::zero::value	/usr/include/boost/accumulators/numeric/functional.hpp	/^        static T const value;$/;"	m	struct:boost::numeric::zero	access:public
boost::numeric::zero::value	/usr/include/boost/accumulators/numeric/functional.hpp	/^    T const zero<T>::value = T();$/;"	m	class:boost::numeric::zero
boost::numeric::zero::value_type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef T value_type;$/;"	t	struct:boost::numeric::zero	access:public
boost::numeric::zero_or_default	/usr/include/boost/accumulators/numeric/functional.hpp	/^    struct zero_or_default$/;"	s	namespace:boost::numeric	inherits:mpl::if_::type
buffer_	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        circular_buffer<Sample> buffer_;$/;"	m	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:private
build_acc_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct build_acc_list<First, Last, false>$/;"	s	namespace:boost::accumulators::detail
build_acc_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct build_acc_list<First, Last, true>$/;"	s	namespace:boost::accumulators::detail
cache	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        aligned_storage<sizeof(result_type)> cache;$/;"	m	struct:boost::accumulators::with_cached_result	access:private
cache	/usr/include/boost/accumulators/statistics/density.hpp	/^        array_type             cache;           \/\/ cache to store the first cache_size samples$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
cache	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        histogram_type         cache;           \/\/ cache to store the first cache_size samples with their weights as std::pair$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
cache_size	/usr/include/boost/accumulators/statistics/density.hpp	/^        static boost::parameter::keyword<density_cache_size> const cache_size;$/;"	m	class:boost::accumulators::tag::density::boost::parameter	access:public
cache_size	/usr/include/boost/accumulators/statistics/density.hpp	/^        std::size_t            cache_size;      \/\/ number of cached samples$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
cache_size	/usr/include/boost/accumulators/statistics/tail.hpp	/^        static boost::parameter::keyword<tail_cache_size_named_arg<LeftRight> > const cache_size;$/;"	m	class:boost::accumulators::tag::tail::boost::parameter	access:public
cache_size	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        static boost::parameter::keyword<density_cache_size> const cache_size;$/;"	m	class:boost::accumulators::tag::weighted_density::boost::parameter	access:public
cache_size	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        std::size_t            cache_size;      \/\/ number of cached samples$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
call	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            call(Args const &, First const&, Last const&)$/;"	f	struct:boost::accumulators::detail::build_acc_list	access:public	signature:(Args const &, First const&, Last const&)
call	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            call(Args const &args, First const& f, Last const& l)$/;"	f	struct:boost::accumulators::detail::build_acc_list	access:public	signature:(Args const &args, First const& f, Last const& l)
call_operator	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	102;"	d
call_operator	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	134;"	d
checked_as_weighted_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct checked_as_weighted_feature$/;"	s	namespace:boost::accumulators::detail
cnt	/usr/include/boost/accumulators/statistics/count.hpp	/^        std::size_t cnt;$/;"	m	struct:boost::accumulators::impl::count_impl	access:private
coherent_tail_mean	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    extractor<tag::tail_mean> const coherent_tail_mean = {};$/;"	m	namespace:boost::accumulators::extract
coherent_tail_mean	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    struct coherent_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
coherent_tail_mean_impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        coherent_tail_mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::coherent_tail_mean_impl	access:public	signature:(dont_care)
coherent_tail_mean_impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    struct coherent_tail_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
collect_abstract_features	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct collect_abstract_features$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::fold
compensation	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    Sample compensation;$/;"	m	struct:boost::accumulators::impl::sum_kahan_impl	access:private
compensation	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        weighted_sample compensation;$/;"	m	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:private
const_if0	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	112;"	d
const_if0	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	133;"	d
const_if1	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	113;"	d
const_if1	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	132;"	d
const_iterator	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef typename circular_buffer<Sample>::const_iterator const_iterator;$/;"	t	struct:boost::accumulators::impl::rolling_window_impl	access:public
const_iterator	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef typename circular_buffer<Sample>::const_iterator const_iterator;$/;"	t	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public
constraints	/usr/include/boost/accumulators/framework/accumulator_concept.hpp	/^    void constraints()$/;"	f	struct:boost::accumulators::accumulator_concept	access:public	signature:()
contains_feature_of	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct contains_feature_of$/;"	s	namespace:boost::accumulators::detail
contains_feature_of_	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct contains_feature_of_$/;"	s	namespace:boost::accumulators::detail
count	/usr/include/boost/accumulators/statistics/count.hpp	/^    extractor<tag::count> const count = {};$/;"	m	namespace:boost::accumulators::extract
count	/usr/include/boost/accumulators/statistics/count.hpp	/^    struct count$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
count_impl	/usr/include/boost/accumulators/statistics/count.hpp	/^        count_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::count_impl	access:public	signature:(dont_care)
count_impl	/usr/include/boost/accumulators/statistics/count.hpp	/^    struct count_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
cov_	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        result_type cov_;$/;"	m	struct:boost::accumulators::impl::covariance_impl	access:private
cov_	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        result_type cov_;$/;"	m	struct:boost::accumulators::impl::weighted_covariance_impl	access:private
covariance	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    extractor<tag::abstract_covariance> const covariance = {};$/;"	m	namespace:boost::accumulators::extract
covariance	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    struct covariance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
covariance_impl	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        covariance_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::covariance_impl	access:public	signature:(Args const &args)
covariance_impl	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    struct covariance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
default_	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	138;"	d
default_	/usr/include/boost/accumulators/numeric/functional.hpp	/^    struct default_$/;"	s	namespace:boost::numeric
density	/usr/include/boost/accumulators/statistics/density.hpp	/^    extractor<tag::density> const density = {};$/;"	m	namespace:boost::accumulators::extract
density	/usr/include/boost/accumulators/statistics/density.hpp	/^    struct density$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,density_cache_size,density_num_bins
density_impl	/usr/include/boost/accumulators/statistics/density.hpp	/^        density_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::density_impl	access:public	signature:(Args const &args)
density_impl	/usr/include/boost/accumulators/statistics/density.hpp	/^    struct density_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
dependencies	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            dependencies;$/;"	t	struct:boost::accumulators::tag::droppable	access:public
dependencies	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        dependencies;$/;"	t	struct:boost::accumulators::depends_on	access:public
dependencies_of	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct dependencies_of$/;"	s	namespace:boost::accumulators::detail
depends_on	/usr/include/boost/accumulators/framework/depends_on.hpp	/^    struct depends_on$/;"	s	namespace:boost::accumulators	inherits:detail::depends_on_base
depends_on_base	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct depends_on_base$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::inherit_linearly::type
desired_positions	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        array_type desired_positions;     \/\/ d_i$/;"	m	struct:boost::accumulators::impl::extended_p_square_impl	access:private
desired_positions	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        array_type  desired_positions;    \/\/ n'_i$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
desired_positions	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        array_type desired_positions;    \/\/ n'_i$/;"	m	struct:boost::accumulators::impl::p_square_quantile_impl	access:private
desired_positions	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        array_type desired_positions;     \/\/ d_i$/;"	m	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:private
desired_positions	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        array_type  desired_positions;    \/\/ n'_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
desired_positions	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        array_type desired_positions;    \/\/ n'_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:private
detail	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
detail	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
detail	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
detail	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    namespace detail$/;"	n	namespace:boost::accumulators
detail	/usr/include/boost/accumulators/framework/depends_on.hpp	/^    namespace detail$/;"	n	namespace:boost::accumulators
detail	/usr/include/boost/accumulators/framework/extractor.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
detail	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^namespace boost { namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	/^namespace boost { namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/accumulators/numeric/detail/pod_singleton.hpp	/^namespace boost { namespace detail {$/;"	n	namespace:boost
detail	/usr/include/boost/accumulators/numeric/functional.hpp	/^        namespace detail$/;"	n	namespace:boost::numeric::functional
detail	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^    namespace detail$/;"	n	namespace:boost::numeric
detail	/usr/include/boost/accumulators/statistics/tail.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
detail	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
detail	/usr/include/boost/accumulators/statistics/with_error.hpp	/^namespace detail$/;"	n	namespace:boost::accumulators
do_extract	/usr/include/boost/accumulators/framework/extractor.hpp	/^    do_extract(AccumulatorSet const &acc, mpl::true_)$/;"	f	namespace:boost::accumulators::detail	signature:(AccumulatorSet const &acc, mpl::true_)
do_extract	/usr/include/boost/accumulators/framework/extractor.hpp	/^    do_extract(Args const &args, mpl::false_)$/;"	f	namespace:boost::accumulators::detail	signature:(Args const &args, mpl::false_)
do_result	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        result_type do_result(TailRng const &rng) const$/;"	f	struct:boost::accumulators::impl::tail_variate_impl	access:private	signature:(TailRng const &rng) const
dont_care	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    dont_care(Args const &)$/;"	f	struct:boost::accumulators::dont_care	access:public	signature:(Args const &)
dont_care	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^struct dont_care$/;"	s	namespace:boost::accumulators
drop	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    detail::void_ drop(dont_care)$/;"	f	struct:boost::accumulators::accumulator_base	access:public	signature:(dont_care)
drop	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void drop()$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:()
drop	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        void drop(Args const &args)$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:(Args const &args)
drop_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            explicit drop_visitor(Args const &args)$/;"	f	struct:boost::accumulators::detail::drop_visitor	access:public	signature:(Args const &args)
drop_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        struct drop_visitor$/;"	s	namespace:boost::accumulators::detail
droppable	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        struct droppable$/;"	s	namespace:boost::accumulators::tag	inherits:as_feature::type
droppable_accumulator	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        droppable_accumulator(Args const &args)$/;"	f	struct:boost::accumulators::droppable_accumulator	access:public	signature:(Args const &args)
droppable_accumulator	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        droppable_accumulator(droppable_accumulator const &that)$/;"	f	struct:boost::accumulators::droppable_accumulator	access:public	signature:(droppable_accumulator const &that)
droppable_accumulator	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct droppable_accumulator$/;"	s	namespace:boost::accumulators	inherits:droppable_accumulator_base
droppable_accumulator_base	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        droppable_accumulator_base(Args const &args)$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:(Args const &args)
droppable_accumulator_base	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        droppable_accumulator_base(droppable_accumulator_base const &that)$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:(droppable_accumulator_base const &that)
droppable_accumulator_base	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct droppable_accumulator_base$/;"	s	namespace:boost::accumulators	inherits:Accumulator
error_of	/usr/include/boost/accumulators/statistics/error_of.hpp	/^    struct error_of$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
error_of	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^    struct error_of<immediate_mean>$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
error_of	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^    struct error_of<mean>$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
error_of_impl	/usr/include/boost/accumulators/statistics/error_of.hpp	/^        error_of_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::error_of_impl	access:public	signature:(dont_care)
error_of_impl	/usr/include/boost/accumulators/statistics/error_of.hpp	/^    struct error_of_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
error_of_mean_impl	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^        error_of_mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::error_of_mean_impl	access:public	signature:(dont_care)
error_of_mean_impl	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^    struct error_of_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
error_of_tag	/usr/include/boost/accumulators/statistics/with_error.hpp	/^    struct error_of_tag$/;"	s	namespace:boost::accumulators::detail
extended_p_square	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^    extractor<tag::extended_p_square> const extended_p_square = {};$/;"	m	namespace:boost::accumulators::extract
extended_p_square	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^    struct extended_p_square$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,extended_p_square_probabilities
extended_p_square_impl	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        extended_p_square_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::extended_p_square_impl	access:public	signature:(Args const &args)
extended_p_square_impl	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^    struct extended_p_square_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
extended_p_square_quantile	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    extractor<tag::extended_p_square_quantile> const extended_p_square_quantile = {};$/;"	m	namespace:boost::accumulators::extract
extended_p_square_quantile	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    struct extended_p_square_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
extended_p_square_quantile_impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        extended_p_square_quantile_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public	signature:(Args const &args)
extended_p_square_quantile_impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    struct extended_p_square_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
extended_p_square_quantile_quadratic	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    extractor<tag::extended_p_square_quantile_quadratic> const extended_p_square_quantile_quadratic = {};$/;"	m	namespace:boost::accumulators::extract
extended_p_square_quantile_quadratic	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    struct extended_p_square_quantile_quadratic$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
external	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^    struct external$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
external	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^    struct external<Feature, Tag, void>$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
external_impl	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        external_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::external_impl	access:public	signature:(dont_care)
external_impl	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^    struct external_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
extract	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typename apply<Feature>::type &extract()$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:()
extract	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typename apply<Feature>::type const &extract() const$/;"	f	class:boost::accumulators::accumulator_set::apply	access:public	signature:() const
extract	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/count.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/density.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/error_of.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/max.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/mean.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/median.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/min.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/skewness.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/sum.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/tail.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/variance.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract	/usr/include/boost/accumulators/statistics_fwd.hpp	/^namespace extract$/;"	n	namespace:boost::accumulators
extract_	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        static result_type extract_(Args const &, AccumulatorSet const &acc)$/;"	f	struct:boost::accumulators::impl::external_impl	access:private	signature:(Args const &, AccumulatorSet const &acc)
extract_	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        static result_type extract_(Args const &args, int)$/;"	f	struct:boost::accumulators::impl::external_impl	access:private	signature:(Args const &args, int)
extract_result	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^extract_result(AccumulatorSet const &acc);$/;"	p	namespace:boost::accumulators	signature:(AccumulatorSet const &acc)
extract_result	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^extract_result(AccumulatorSet const &acc, A1 const &a1);$/;"	p	namespace:boost::accumulators	signature:(AccumulatorSet const &acc, A1 const &a1)
extract_result	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^extract_result(AccumulatorSet const &acc, A1 const &a1, A2 const &a2 ...);$/;"	p	namespace:boost::accumulators	signature:(AccumulatorSet const &acc, A1 const &a1, A2 const &a2 ...)
extractor	/usr/include/boost/accumulators/framework/extractor.hpp	/^struct extractor$/;"	s	namespace:boost::accumulators
extractor_result	/usr/include/boost/accumulators/framework/extractor.hpp	/^    struct extractor_result$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::eval_if
feature_map	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            feature_map;$/;"	t	struct:boost::accumulators::detail::make_accumulator_tuple	access:public
feature_map_with_dependencies	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            feature_map_with_dependencies;$/;"	t	struct:boost::accumulators::detail::make_accumulator_tuple	access:public
feature_of	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct feature_of<tag::droppable<Feature> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^struct feature_of<tag::external<Feature, Tag, AccumulatorSet> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^struct feature_of<tag::reference<ValueType, Tag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^struct feature_of<tag::value<ValueType, Tag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/framework/depends_on.hpp	/^    struct feature_of$/;"	s	namespace:boost::accumulators
feature_of	/usr/include/boost/accumulators/statistics/covariance.hpp	/^struct feature_of<tag::covariance<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/covariance.hpp	/^struct feature_of<tag::weighted_covariance<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/density.hpp	/^struct feature_of<tag::weighted_density>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^struct feature_of<tag::weighted_extended_p_square>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct feature_of<tag::extended_p_square_quantile>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct feature_of<tag::extended_p_square_quantile_quadratic>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct feature_of<tag::weighted_extended_p_square_quantile>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^struct feature_of<tag::weighted_extended_p_square_quantile_quadratic>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^struct feature_of<tag::weighted_kurtosis>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::immediate_mean>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::immediate_mean_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::immediate_mean_of_weights>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::immediate_weighted_mean>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::immediate_weighted_mean_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::weighted_mean>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/mean.hpp	/^struct feature_of<tag::weighted_mean_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/median.hpp	/^struct feature_of<tag::weighted_median>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/median.hpp	/^struct feature_of<tag::with_density_median>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/median.hpp	/^struct feature_of<tag::with_density_weighted_median>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/median.hpp	/^struct feature_of<tag::with_p_square_cumulative_distribution_median>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/median.hpp	/^struct feature_of<tag::with_p_square_cumulative_distribution_weighted_median>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/moment.hpp	/^struct feature_of<tag::weighted_moment<N> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^struct feature_of<tag::weighted_p_square_cumulative_distribution>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^struct feature_of<tag::weighted_p_square_quantile>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct feature_of<tag::peaks_over_threshold<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct feature_of<tag::peaks_over_threshold_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct feature_of<tag::weighted_peaks_over_threshold<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^struct feature_of<tag::weighted_peaks_over_threshold_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct feature_of<tag::pot_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct feature_of<tag::pot_quantile_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct feature_of<tag::weighted_pot_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^struct feature_of<tag::weighted_pot_quantile_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct feature_of<tag::pot_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct feature_of<tag::pot_tail_mean_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct feature_of<tag::weighted_pot_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^struct feature_of<tag::weighted_pot_tail_mean_prob<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/skewness.hpp	/^struct feature_of<tag::weighted_skewness>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/sum.hpp	/^struct feature_of<tag::sum_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/sum.hpp	/^struct feature_of<tag::weighted_sum>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct feature_of<tag::sum_kahan>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct feature_of<tag::sum_of_variates_kahan<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct feature_of<tag::sum_of_weights_kahan>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct feature_of<tag::weighted_sum_kahan>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/tail.hpp	/^struct feature_of<tag::tail<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^struct feature_of<tag::coherent_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^struct feature_of<tag::non_coherent_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^struct feature_of<tag::non_coherent_weighted_tail_mean<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^struct feature_of<tag::tail_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^struct feature_of<tag::weighted_tail_quantile<LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^struct feature_of<tag::tail_variate<VariateType, VariateTag, LeftRight> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^struct feature_of<tag::tail_weights<LeftRight> >$/;"	s	namespace:boost::accumulators
feature_of	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct feature_of<tag::absolute_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct feature_of<tag::absolute_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct feature_of<tag::relative_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^struct feature_of<tag::relative_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct feature_of<tag::lazy_variance>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct feature_of<tag::lazy_weighted_variance>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/variance.hpp	/^struct feature_of<tag::weighted_variance>$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^struct feature_of<tag::weighted_sum_of_variates<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_of	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^struct feature_of<tag::weighted_sum_of_variates_kahan<VariateType, VariateTag> >$/;"	s	namespace:boost::accumulators	inherits:feature_of
feature_tag	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        typedef typename detail::feature_tag<Accumulator>::type feature_tag;$/;"	t	struct:boost::accumulators::impl::external_impl	access:public
feature_tag	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef Feature feature_tag;$/;"	t	struct:boost::accumulators::detail::accumulator_wrapper	access:public
feature_tag	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct feature_tag$/;"	s	namespace:boost::accumulators::detail
feature_type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            typedef typename as_feature<Feature>::type feature_type;$/;"	t	struct:boost::accumulators::tag::droppable	access:public
feature_type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef typename as_feature<Feature>::type feature_type;$/;"	t	struct:boost::accumulators::detail::checked_as_weighted_feature	access:public
feature_type	/usr/include/boost/accumulators/framework/extractor.hpp	/^        typedef typename as_feature<Feature>::type feature_type;$/;"	t	struct:boost::accumulators::detail::accumulator_set_result	access:public
feature_vector_with_dependencies	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            feature_vector_with_dependencies;$/;"	t	struct:boost::accumulators::detail::make_accumulator_tuple	access:public
features	/usr/include/boost/accumulators/framework/features.hpp	/^struct features$/;"	s	namespace:boost::accumulators	inherits:mpl::vector
features_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            features_list;$/;"	t	struct:boost::accumulators::detail::contains_feature_of	access:public
features_type	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typedef Features features_type; \/\/\/< An MPL sequence of the features that should be accumulated.$/;"	t	struct:boost::accumulators::accumulator_set	access:public
find_accumulator	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^find_accumulator(AccumulatorSet const &acc);$/;"	p	class:boost::accumulators::mpl::apply	signature:(AccumulatorSet const &acc)
find_accumulator	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^find_accumulator(AccumulatorSet const &acc)$/;"	f	class:boost::accumulators::mpl::apply	signature:(AccumulatorSet const &acc)
fit_parameters_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable result_type fit_parameters_;        \/\/ boost::tuple that stores fit parameters$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:private
fit_parameters_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable result_type fit_parameters_; \/\/ boost::tuple that stores fit parameters$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
fit_parameters_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable result_type fit_parameters_;        \/\/ boost::tuple that stores fit parameters$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
fit_parameters_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable result_type fit_parameters_; \/\/ boost::tuple that stores fit parameters$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
float_type	/usr/include/boost/accumulators/statistics/density.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::density_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::with_density_median_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::p_square_quantile_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::pot_quantile_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::pot_tail_mean_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::coherent_tail_mean_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::non_coherent_tail_mean_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::tail_variate_means_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        typedef typename numeric::functional::average<Weight, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_density_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        typedef typename numeric::functional::average<Weight, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::non_coherent_weighted_tail_mean_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^        typedef typename numeric::functional::average<Weight, std::size_t>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_tail_quantile_impl	access:public
float_type	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        typedef typename numeric::functional::average<Weight, Weight>::result_type float_type;$/;"	t	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:public
for_median	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct for_median {};$/;"	s	namespace:boost::accumulators
full	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        bool full() const$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:() const
function1	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^struct function1$/;"	s	namespace:boost::detail
function_name	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	/^struct function_name$/;"	s	namespace:boost::detail
function_name	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	141;"	d
function_name	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	45;"	d
functional	/usr/include/boost/accumulators/numeric/functional.hpp	/^    namespace functional$/;"	n	namespace:boost::numeric
functional	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^    namespace functional$/;"	n	namespace:boost::numeric
functional	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^    namespace functional$/;"	n	namespace:boost::numeric
functional	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^    namespace functional$/;"	n	namespace:boost::numeric
functional	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    namespace functional$/;"	n	namespace:boost::numeric
functional	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    namespace numeric { namespace functional$/;"	n	namespace:boost::numeric
gen_operator	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	117;"	d
gen_operator	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	140;"	d
get	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        result_type const &get() const$/;"	f	struct:boost::accumulators::with_cached_result	access:private	signature:() const
has_result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        bool has_result() const$/;"	f	struct:boost::accumulators::with_cached_result	access:private	signature:() const
heights	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        array_type heights;               \/\/ q_i$/;"	m	struct:boost::accumulators::impl::extended_p_square_impl	access:private
heights	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        array_type  heights;              \/\/ q_i$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
heights	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        array_type heights;              \/\/ q_i$/;"	m	struct:boost::accumulators::impl::p_square_quantile_impl	access:private
heights	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        array_type heights;               \/\/ q_i$/;"	m	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:private
heights	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        array_type  heights;              \/\/ q_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
heights	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        array_type heights;              \/\/ q_i$/;"	m	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:private
histogram	/usr/include/boost/accumulators/statistics/density.hpp	/^        mutable histogram_type histogram;       \/\/ histogram$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
histogram	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        mutable histogram_type histogram; \/\/ histogram$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
histogram	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        mutable histogram_type histogram;       \/\/ histogram$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
histogram	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        mutable histogram_type histogram; \/\/ histogram$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
histogram_type	/usr/include/boost/accumulators/statistics/density.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::density_impl	access:public
histogram_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::with_density_median_impl	access:public
histogram_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public
histogram_type	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public
histogram_type	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::weighted_density_impl	access:public
histogram_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public
histogram_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public
histogram_type	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef std::vector<std::pair<float_type, float_type> > histogram_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public
ignore_variable	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^    inline void ignore_variable(void const *) {}$/;"	f	namespace:boost::accumulators::detail	signature:(void const *)
immediate	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct immediate {};$/;"	s	namespace:boost::accumulators
immediate_mean	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct immediate_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
immediate_mean_impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        immediate_mean_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::immediate_mean_impl	access:public	signature:(Args const &args)
immediate_mean_impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct immediate_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
immediate_mean_of_variates	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct immediate_mean_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
immediate_mean_of_weights	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct immediate_mean_of_weights$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
immediate_weighted_mean	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct immediate_weighted_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
immediate_weighted_mean_impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        immediate_weighted_mean_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:public	signature:(Args const &args)
immediate_weighted_mean_impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct immediate_weighted_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
immediate_weighted_mean_of_variates	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct immediate_weighted_mean_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
impl	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            struct impl$/;"	s	struct:boost::accumulators::tag::droppable	access:public
impl	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        impl;$/;"	t	struct:boost::accumulators::tag::external	access:public
impl	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^namespace boost { namespace accumulators { namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^        typedef mpl::always<accumulators::impl::reference_accumulator_impl<Referent, Tag> > impl;$/;"	t	struct:boost::accumulators::tag::reference	access:public
impl	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^        typedef mpl::always<accumulators::impl::value_accumulator_impl<ValueType, Tag> > impl;$/;"	t	struct:boost::accumulators::tag::value	access:public
impl	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^        typedef typename mpl::apply1<F, arg0>::type impl;$/;"	t	struct:boost::detail::function1::result	access:public
impl	/usr/include/boost/accumulators/statistics/count.hpp	/^        typedef mpl::always<accumulators::impl::count_impl> impl;$/;"	t	struct:boost::accumulators::tag::count	access:public
impl	/usr/include/boost/accumulators/statistics/count.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        typedef accumulators::impl::covariance_impl<mpl::_1, VariateType, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::covariance	access:public
impl	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/density.hpp	/^        typedef accumulators::impl::density_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::density	access:public
impl	/usr/include/boost/accumulators/statistics/density.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/error_of.hpp	/^        typedef accumulators::impl::error_of_impl<mpl::_1, Feature> impl;$/;"	t	struct:boost::accumulators::tag::error_of	access:public
impl	/usr/include/boost/accumulators/statistics/error_of.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^        typedef accumulators::impl::error_of_mean_impl<mpl::_1, lazy_variance> impl;$/;"	t	struct:boost::accumulators::tag::error_of	access:public
impl	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^        typedef accumulators::impl::error_of_mean_impl<mpl::_1, variance> impl;$/;"	t	struct:boost::accumulators::tag::error_of	access:public
impl	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        typedef accumulators::impl::extended_p_square_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::extended_p_square	access:public
impl	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef accumulators::impl::extended_p_square_quantile_impl<mpl::_1, unweighted, linear> impl;$/;"	t	struct:boost::accumulators::tag::extended_p_square_quantile	access:public
impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef accumulators::impl::extended_p_square_quantile_impl<mpl::_1, unweighted, quadratic> impl;$/;"	t	struct:boost::accumulators::tag::extended_p_square_quantile_quadratic	access:public
impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef accumulators::impl::extended_p_square_quantile_impl<mpl::_1, weighted, linear> impl;$/;"	t	struct:boost::accumulators::tag::weighted_extended_p_square_quantile	access:public
impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef accumulators::impl::extended_p_square_quantile_impl<mpl::_1, weighted, quadratic> impl;$/;"	t	struct:boost::accumulators::tag::weighted_extended_p_square_quantile_quadratic	access:public
impl	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^        typedef accumulators::impl::kurtosis_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::kurtosis	access:public
impl	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/max.hpp	/^        typedef accumulators::impl::max_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::max	access:public
impl	/usr/include/boost/accumulators/statistics/max.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef accumulators::impl::immediate_mean_impl<mpl::_1, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::immediate_mean	access:public
impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef accumulators::impl::immediate_mean_impl<mpl::_2, tag::weight> impl;$/;"	t	struct:boost::accumulators::tag::immediate_mean_of_weights	access:public
impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef accumulators::impl::mean_impl<mpl::_1, sum> impl;$/;"	t	struct:boost::accumulators::tag::mean	access:public
impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef accumulators::impl::mean_impl<mpl::_2, sum_of_weights> impl;$/;"	t	struct:boost::accumulators::tag::mean_of_weights	access:public
impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef mpl::always<accumulators::impl::immediate_mean_impl<VariateType, VariateTag> > impl;$/;"	t	struct:boost::accumulators::tag::immediate_mean_of_variates	access:public
impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef mpl::always<accumulators::impl::mean_impl<VariateType, sum_of_variates<VariateType, VariateTag> > > impl;$/;"	t	struct:boost::accumulators::tag::mean_of_variates	access:public
impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef accumulators::impl::median_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::median	access:public
impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef accumulators::impl::with_density_median_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::with_density_median	access:public
impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef accumulators::impl::with_p_square_cumulative_distribution_median_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::with_p_square_cumulative_distribution_median	access:public
impl	/usr/include/boost/accumulators/statistics/median.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/min.hpp	/^        typedef accumulators::impl::min_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::min	access:public
impl	/usr/include/boost/accumulators/statistics/min.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/moment.hpp	/^        typedef accumulators::impl::moment_impl<mpl::int_<N>, mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::moment	access:public
impl	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        typedef accumulators::impl::p_square_cumulative_distribution_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::p_square_cumulative_distribution	access:public
impl	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        typedef accumulators::impl::p_square_quantile_impl<mpl::_1, for_median> impl;$/;"	t	struct:boost::accumulators::tag::p_square_quantile_for_median	access:public
impl	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        typedef accumulators::impl::p_square_quantile_impl<mpl::_1, regular> impl;$/;"	t	struct:boost::accumulators::tag::p_square_quantile	access:public
impl	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef accumulators::impl::peaks_over_threshold_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::peaks_over_threshold	access:public
impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef accumulators::impl::peaks_over_threshold_prob_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::peaks_over_threshold_prob	access:public
impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef accumulators::impl::pot_quantile_impl<mpl::_1, unweighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::pot_quantile	access:public
impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef accumulators::impl::pot_quantile_impl<mpl::_1, unweighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::pot_quantile_prob	access:public
impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef accumulators::impl::pot_quantile_impl<mpl::_1, weighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_pot_quantile	access:public
impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef accumulators::impl::pot_quantile_impl<mpl::_1, weighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_pot_quantile_prob	access:public
impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef accumulators::impl::pot_tail_mean_impl<mpl::_1, unweighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::pot_tail_mean	access:public
impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef accumulators::impl::pot_tail_mean_impl<mpl::_1, unweighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::pot_tail_mean_prob	access:public
impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef accumulators::impl::pot_tail_mean_impl<mpl::_1, weighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_pot_tail_mean	access:public
impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef accumulators::impl::pot_tail_mean_impl<mpl::_1, weighted, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_pot_tail_mean_prob	access:public
impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^        typedef accumulators::impl::rolling_count_impl< mpl::_1 > impl;$/;"	t	struct:boost::accumulators::tag::rolling_count	access:public
impl	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^        typedef accumulators::impl::rolling_mean_impl< mpl::_1 > impl;$/;"	t	struct:boost::accumulators::tag::rolling_mean	access:public
impl	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        typedef accumulators::impl::rolling_sum_impl< mpl::_1 > impl;$/;"	t	struct:boost::accumulators::tag::rolling_sum	access:public
impl	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef accumulators::impl::rolling_window_impl< mpl::_1 > impl;$/;"	t	struct:boost::accumulators::tag::rolling_window	access:public
impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef accumulators::impl::rolling_window_plus1_impl< mpl::_1 > impl;$/;"	t	struct:boost::accumulators::tag::rolling_window_plus1	access:public
impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/skewness.hpp	/^        typedef accumulators::impl::skewness_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::skewness	access:public
impl	/usr/include/boost/accumulators/statistics/skewness.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^        typedef accumulators::impl::sum_impl<mpl::_1, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::sum	access:public
impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^        typedef accumulators::impl::sum_impl<mpl::_2, tag::weight> impl;$/;"	t	struct:boost::accumulators::tag::sum_of_weights	access:public
impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^        typedef mpl::always<accumulators::impl::sum_impl<VariateType, VariateTag> > impl;$/;"	t	struct:boost::accumulators::tag::sum_of_variates	access:public
impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^        typedef accumulators::impl::sum_kahan_impl<mpl::_2, tag::weight> impl;$/;"	t	struct:boost::accumulators::tag::sum_of_weights_kahan	access:public
impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^        typedef impl::sum_kahan_impl< mpl::_1, tag::sample > impl;$/;"	t	struct:boost::accumulators::tag::sum_kahan	access:public
impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^        typedef mpl::always<accumulators::impl::sum_kahan_impl<VariateType, VariateTag> > impl;$/;"	t	struct:boost::accumulators::tag::sum_of_variates_kahan	access:public
impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/tail.hpp	/^        typedef accumulators::impl::tail_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::tail	access:public
impl	/usr/include/boost/accumulators/statistics/tail.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef accumulators::impl::coherent_tail_mean_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::coherent_tail_mean	access:public
impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef accumulators::impl::non_coherent_tail_mean_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::non_coherent_tail_mean	access:public
impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^        typedef accumulators::impl::tail_quantile_impl<mpl::_1, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::tail_quantile	access:public
impl	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        typedef accumulators::impl::tail_variate_impl<mpl::_2, tag::weight, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::tail_weights	access:public
impl	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        typedef mpl::always<accumulators::impl::tail_variate_impl<VariateType, VariateTag, LeftRight> > impl;$/;"	t	struct:boost::accumulators::tag::tail_variate	access:public
impl	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        typedef accumulators::impl::tail_variate_means_impl<mpl::_1, absolute, LeftRight, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::absolute_tail_variate_means	access:public
impl	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        typedef accumulators::impl::tail_variate_means_impl<mpl::_1, relative, LeftRight, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::relative_tail_variate_means	access:public
impl	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^        typedef accumulators::impl::lazy_variance_impl<mpl::_1, mean> impl;$/;"	t	struct:boost::accumulators::tag::lazy_variance	access:public
impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^        typedef accumulators::impl::variance_impl<mpl::_1, mean, sample> impl;$/;"	t	struct:boost::accumulators::tag::variance	access:public
impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        typedef accumulators::impl::weighted_covariance_impl<mpl::_1, mpl::_2, VariateType, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::weighted_covariance	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        typedef accumulators::impl::weighted_density_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_density	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        typedef accumulators::impl::weighted_extended_p_square_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_extended_p_square	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^        typedef accumulators::impl::weighted_kurtosis_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_kurtosis	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef accumulators::impl::immediate_weighted_mean_impl<VariateType, mpl::_2, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::immediate_weighted_mean_of_variates	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef accumulators::impl::immediate_weighted_mean_impl<mpl::_1, mpl::_2, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::immediate_weighted_mean	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef accumulators::impl::weighted_mean_impl<VariateType, mpl::_2, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::weighted_mean_of_variates	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef accumulators::impl::weighted_mean_impl<mpl::_1, mpl::_2, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::weighted_mean	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef accumulators::impl::weighted_median_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::weighted_median	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef accumulators::impl::with_density_weighted_median_impl<mpl::_1> impl;$/;"	t	struct:boost::accumulators::tag::with_density_weighted_median	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::with_p_square_cumulative_distribution_weighted_median	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        typedef accumulators::impl::weighted_moment_impl<mpl::int_<N>, mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_moment	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef accumulators::impl::weighted_p_square_cumulative_distribution_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_p_square_cumulative_distribution	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef accumulators::impl::weighted_p_square_quantile_impl<mpl::_1, mpl::_2, for_median> impl;$/;"	t	struct:boost::accumulators::tag::weighted_p_square_quantile_for_median	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef accumulators::impl::weighted_p_square_quantile_impl<mpl::_1, mpl::_2, regular> impl;$/;"	t	struct:boost::accumulators::tag::weighted_p_square_quantile	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^namespace impl {$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef accumulators::impl::weighted_peaks_over_threshold_impl<mpl::_1, mpl::_2, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_peaks_over_threshold	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef accumulators::impl::weighted_peaks_over_threshold_prob_impl<mpl::_1, mpl::_2, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_peaks_over_threshold_prob	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^        typedef accumulators::impl::weighted_skewness_impl<mpl::_1, mpl::_2> impl;$/;"	t	struct:boost::accumulators::tag::weighted_skewness	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        typedef accumulators::impl::weighted_sum_impl<VariateType, mpl::_2, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::weighted_sum_of_variates	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        typedef accumulators::impl::weighted_sum_impl<mpl::_1, mpl::_2, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::weighted_sum	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        typedef accumulators::impl::weighted_sum_kahan_impl<VariateType, mpl::_2, VariateTag> impl;$/;"	t	struct:boost::accumulators::tag::weighted_sum_of_variates_kahan	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        typedef accumulators::impl::weighted_sum_kahan_impl<mpl::_1, mpl::_2, tag::sample> impl;$/;"	t	struct:boost::accumulators::tag::weighted_sum_kahan	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        typedef accumulators::impl::non_coherent_weighted_tail_mean_impl<mpl::_1, mpl::_2, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::non_coherent_weighted_tail_mean	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^        typedef accumulators::impl::weighted_tail_quantile_impl<mpl::_1, mpl::_2, LeftRight> impl;$/;"	t	struct:boost::accumulators::tag::weighted_tail_quantile	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        typedef accumulators::impl::weighted_tail_variate_means_impl<mpl::_1, mpl::_2, absolute, LeftRight, VariateType> impl;$/;"	t	struct:boost::accumulators::tag::absolute_weighted_tail_variate_means	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        typedef accumulators::impl::weighted_tail_variate_means_impl<mpl::_1, mpl::_2, relative, LeftRight, VariateType> impl;$/;"	t	struct:boost::accumulators::tag::relative_weighted_tail_variate_means	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef accumulators::impl::lazy_weighted_variance_impl<mpl::_1, mpl::_2, weighted_mean> impl;$/;"	t	struct:boost::accumulators::tag::lazy_weighted_variance	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef accumulators::impl::weighted_variance_impl<mpl::_1, mpl::_2, immediate_weighted_mean, sample> impl;$/;"	t	struct:boost::accumulators::tag::weighted_variance	access:public
impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
impl	/usr/include/boost/accumulators/statistics_fwd.hpp	/^        typedef mpl::print<class ____MISSING_SPECIFIC_QUANTILE_FEATURE_IN_ACCUMULATOR_SET____ > impl;$/;"	t	struct:boost::accumulators::tag::quantile	access:public
impl	/usr/include/boost/accumulators/statistics_fwd.hpp	/^        typedef mpl::print<class ____MISSING_SPECIFIC_TAIL_MEAN_FEATURE_IN_ACCUMULATOR_SET____ > impl;$/;"	t	struct:boost::accumulators::tag::tail_mean	access:public
impl	/usr/include/boost/accumulators/statistics_fwd.hpp	/^namespace impl$/;"	n	namespace:boost::accumulators
index	/usr/include/boost/accumulators/statistics/tail.hpp	/^        std::size_t index;$/;"	m	struct:boost::accumulators::detail::stat_assign_visitor	access:private
indices	/usr/include/boost/accumulators/statistics/tail.hpp	/^        mutable std::vector<std::size_t> indices;$/;"	m	struct:boost::accumulators::impl::tail_impl	access:private
indirect_cmp	/usr/include/boost/accumulators/statistics/tail.hpp	/^            indirect_cmp(std::vector<Sample> const &s)$/;"	f	struct:boost::accumulators::impl::tail_impl::indirect_cmp	access:public	signature:(std::vector<Sample> const &s)
indirect_cmp	/usr/include/boost/accumulators/statistics/tail.hpp	/^        struct indirect_cmp$/;"	s	struct:boost::accumulators::impl::tail_impl	inherits:std::binary_function	access:private
insert_dependencies	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct insert_dependencies$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::fold
insert_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct insert_feature$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::eval_if
insert_sequence	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct insert_sequence$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::fold
instance	/usr/include/boost/accumulators/numeric/detail/pod_singleton.hpp	/^    static T instance;$/;"	m	struct:boost::detail::pod_singleton	access:public
instance	/usr/include/boost/accumulators/numeric/detail/pod_singleton.hpp	/^T pod_singleton<T>::instance;$/;"	m	class:boost::detail::pod_singleton
is_accumulator_set	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    struct is_accumulator_set$/;"	s	namespace:boost::accumulators::detail	inherits:is_base_and_derived
is_dependent_on	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct is_dependent_on$/;"	s	namespace:boost::accumulators::detail	inherits:is_base_and_derived
is_dirty	/usr/include/boost/accumulators/statistics/density.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
is_dirty	/usr/include/boost/accumulators/statistics/median.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::with_density_median_impl	access:private
is_dirty	/usr/include/boost/accumulators/statistics/median.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:private
is_dirty	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
is_dirty	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
is_dirty	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:private
is_dirty	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:private
is_dirty	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        mutable bool is_dirty;$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
is_dirty_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable bool is_dirty_;$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
is_dirty_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable bool is_dirty_;$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:private
is_dirty_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable bool is_dirty_;$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
is_dirty_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable bool is_dirty_;$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
is_droppable	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    typedef mpl::false_ is_droppable;$/;"	t	struct:boost::accumulators::accumulator_base	access:public
is_droppable	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef mpl::true_ is_droppable;$/;"	t	struct:boost::accumulators::droppable_accumulator_base	access:public
is_dropped	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        bool is_dropped() const$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:() const
is_rolling_window_plus1_full	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    bool is_rolling_window_plus1_full(Args const &args)$/;"	f	namespace:boost::accumulators::impl	signature:(Args const &args)
is_sorted	/usr/include/boost/accumulators/statistics/tail.hpp	/^        mutable bool is_sorted;$/;"	m	struct:boost::accumulators::impl::tail_impl	access:private
is_tail_variate	/usr/include/boost/accumulators/statistics/tail.hpp	/^        struct is_tail_variate$/;"	s	struct:boost::accumulators::impl::tail_impl	access:private
is_tail_variate_feature	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct is_tail_variate_feature$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::false_
is_tail_variate_feature	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct is_tail_variate_feature<tag::tail_variate<VariateType, VariateTag, LeftRight>, LeftRight>$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::true_
is_tail_variate_feature	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct is_tail_variate_feature<tag::tail_weights<LeftRight>, LeftRight>$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::true_
is_weight_accumulator	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        typedef mpl::false_ is_weight_accumulator;$/;"	t	struct:boost::accumulators::depends_on	access:public
is_weight_accumulator	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef mpl::true_ is_weight_accumulator;$/;"	t	struct:boost::accumulators::tag::immediate_mean_of_weights	access:public
is_weight_accumulator	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef mpl::true_ is_weight_accumulator;$/;"	t	struct:boost::accumulators::tag::mean_of_weights	access:public
is_weight_accumulator	/usr/include/boost/accumulators/statistics/sum.hpp	/^        typedef mpl::true_ is_weight_accumulator;$/;"	t	struct:boost::accumulators::tag::sum_of_weights	access:public
is_weight_accumulator	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^        typedef mpl::true_ is_weight_accumulator;$/;"	t	struct:boost::accumulators::tag::sum_of_weights_kahan	access:public
kahan	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct kahan {};$/;"	s	namespace:boost::accumulators
kurtosis	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^    extractor<tag::kurtosis> const kurtosis = {};$/;"	m	namespace:boost::accumulators::extract
kurtosis	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^    struct kurtosis$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
kurtosis_impl	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^        kurtosis_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::kurtosis_impl	access:public	signature:(dont_care)
kurtosis_impl	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^    struct kurtosis_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
lazy	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct lazy {};$/;"	s	namespace:boost::accumulators
lazy_variance	/usr/include/boost/accumulators/statistics/variance.hpp	/^    extractor<tag::lazy_variance> const lazy_variance = {};$/;"	m	namespace:boost::accumulators::extract
lazy_variance	/usr/include/boost/accumulators/statistics/variance.hpp	/^    struct lazy_variance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
lazy_variance_impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^        lazy_variance_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::lazy_variance_impl	access:public	signature:(dont_care)
lazy_variance_impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^    struct lazy_variance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
lazy_weighted_variance	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    extractor<tag::lazy_weighted_variance> const lazy_weighted_variance = {};$/;"	m	namespace:boost::accumulators::extract
lazy_weighted_variance	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    struct lazy_weighted_variance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
lazy_weighted_variance_impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        lazy_weighted_variance_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::lazy_weighted_variance_impl	access:public	signature:(dont_care)
lazy_weighted_variance_impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    struct lazy_weighted_variance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
left	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct left {};$/;"	s	namespace:boost::accumulators
left_ref	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct left_ref$/;"	s	namespace:boost::numeric::functional
linear	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct linear {};$/;"	s	namespace:boost::accumulators
lvalue_index_iterator	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^        lvalue_index_iterator(Base base)$/;"	f	struct:boost::accumulators::detail::lvalue_index_iterator	access:public	signature:(Base base)
lvalue_index_iterator	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^    struct lvalue_index_iterator$/;"	s	namespace:boost::accumulators::detail	inherits:Base
lvalue_of	/usr/include/boost/accumulators/numeric/functional.hpp	/^            T &lvalue_of();$/;"	p	namespace:boost::numeric::functional::detail	signature:()
make_acc_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            struct make_acc_list$/;"	s	namespace:boost::accumulators::detail::meta	inherits:build_acc_list
make_acc_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        make_acc_list(Sequence const &seq, Args const &args)$/;"	f	namespace:boost::accumulators::detail	signature:(Sequence const &seq, Args const &args)
make_accumulator_tuple	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct make_accumulator_tuple$/;"	s	namespace:boost::accumulators::detail
make_accumulator_visitor	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    inline accumulator_visitor<Args> const make_accumulator_visitor(Args const &args)$/;"	f	namespace:boost::accumulators::detail	signature:(Args const &args)
make_add_ref_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        add_ref_visitor<Args> make_add_ref_visitor(Args const &args)$/;"	f	namespace:boost::accumulators::detail	signature:(Args const &args)
make_drop_visitor	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        drop_visitor<Args> make_drop_visitor(Args const &args)$/;"	f	namespace:boost::accumulators::detail	signature:(Args const &args)
make_tail_range	/usr/include/boost/accumulators/statistics/tail.hpp	/^    make_tail_range(ElementIterator elem_begin, IndexIterator index_begin, IndexIterator index_end)$/;"	f	namespace:boost::accumulators::detail	signature:(ElementIterator elem_begin, IndexIterator index_begin, IndexIterator index_end)
make_times2_iterator	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^    inline times2_iterator make_times2_iterator(std::size_t i)$/;"	f	namespace:boost::accumulators::detail	signature:(std::size_t i)
make_valarray	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            struct make_valarray$/;"	s	namespace:boost::numeric::operators::acc_detail
make_vector	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            struct make_vector$/;"	s	namespace:boost::numeric::operators::acc_detail
matches_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct matches_feature$/;"	s	namespace:boost::accumulators::detail
max	/usr/include/boost/accumulators/statistics/max.hpp	/^    extractor<tag::max> const max = {};$/;"	m	namespace:boost::accumulators::extract
max	/usr/include/boost/accumulators/statistics/max.hpp	/^    struct max$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
max_	/usr/include/boost/accumulators/statistics/max.hpp	/^        Sample max_;$/;"	m	struct:boost::accumulators::impl::max_impl	access:private
max_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::max_assign const &max_assign = boost::detail::pod_singleton<op::max_assign>::instance;$/;"	m	class:boost::numeric::__anon1::op
max_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct max_assign$/;"	s	namespace:boost::numeric::functional	inherits:max_assign_base
max_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct max_assign$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function2
max_assign	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct max_assign<Left, Right, std_valarray_tag, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
max_assign	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct max_assign<Left, Right, std_vector_tag, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
max_assign_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct max_assign_base$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
max_impl	/usr/include/boost/accumulators/statistics/max.hpp	/^        max_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::max_impl	access:public	signature:(Args const &args)
max_impl	/usr/include/boost/accumulators/statistics/max.hpp	/^    struct max_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
mean	/usr/include/boost/accumulators/statistics/mean.hpp	/^        result_type mean;$/;"	m	struct:boost::accumulators::impl::immediate_mean_impl	access:private
mean	/usr/include/boost/accumulators/statistics/mean.hpp	/^    extractor<tag::mean> const mean = {};$/;"	m	namespace:boost::accumulators::extract
mean	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
mean	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        result_type mean;$/;"	m	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:private
mean_impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^        mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::mean_impl	access:public	signature:(dont_care)
mean_impl	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
mean_of_variates	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct mean_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
mean_of_weights	/usr/include/boost/accumulators/statistics/mean.hpp	/^    extractor<tag::mean_of_weights> const mean_of_weights = {};$/;"	m	namespace:boost::accumulators::extract
mean_of_weights	/usr/include/boost/accumulators/statistics/mean.hpp	/^    struct mean_of_weights$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
median	/usr/include/boost/accumulators/statistics/median.hpp	/^        mutable float_type median;$/;"	m	struct:boost::accumulators::impl::with_density_median_impl	access:private
median	/usr/include/boost/accumulators/statistics/median.hpp	/^        mutable float_type median;$/;"	m	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:private
median	/usr/include/boost/accumulators/statistics/median.hpp	/^    extractor<tag::median> const median = {};$/;"	m	namespace:boost::accumulators::extract
median	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        mutable float_type median;$/;"	m	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:private
median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        mutable float_type median;$/;"	m	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:private
median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        median_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::median_impl	access:public	signature:(dont_care)
median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
meta	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        namespace meta$/;"	n	namespace:boost::accumulators::detail
min	/usr/include/boost/accumulators/statistics/min.hpp	/^    extractor<tag::min> const min = {};$/;"	m	namespace:boost::accumulators::extract
min	/usr/include/boost/accumulators/statistics/min.hpp	/^    struct min$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
min_	/usr/include/boost/accumulators/statistics/min.hpp	/^        Sample min_;$/;"	m	struct:boost::accumulators::impl::min_impl	access:private
min_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        op::min_assign const &min_assign = boost::detail::pod_singleton<op::min_assign>::instance;$/;"	m	class:boost::numeric::__anon1::op
min_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct min_assign$/;"	s	namespace:boost::numeric::functional	inherits:min_assign_base
min_assign	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct min_assign$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function2
min_assign	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct min_assign<Left, Right, std_valarray_tag, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
min_assign	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct min_assign<Left, Right, std_vector_tag, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
min_assign_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct min_assign_base$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
min_impl	/usr/include/boost/accumulators/statistics/min.hpp	/^        min_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::min_impl	access:public	signature:(Args const &args)
min_impl	/usr/include/boost/accumulators/statistics/min.hpp	/^    struct min_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
moment	/usr/include/boost/accumulators/statistics/moment.hpp	/^    struct moment$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
moment_impl	/usr/include/boost/accumulators/statistics/moment.hpp	/^        moment_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::moment_impl	access:public	signature:(Args const &args)
moment_impl	/usr/include/boost/accumulators/statistics/moment.hpp	/^    struct moment_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
mu_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable float_type mu_;                     \/\/ mean of samples above threshold u$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:private
mu_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable float_type mu_;              \/\/ mean of Nu_ largest samples$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
mu_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type mu_;                     \/\/ mean of samples above threshold u$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
mu_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type mu_;              \/\/ mean of samples above threshold$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
multiply_and_promote_to_double	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        struct multiply_and_promote_to_double$/;"	s	namespace:boost::numeric::functional	inherits:multiplies
next_build_acc_list	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            next_build_acc_list;$/;"	t	struct:boost::accumulators::detail::build_acc_list	access:public
non_coherent_tail_mean	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    extractor<tag::abstract_non_coherent_tail_mean> const non_coherent_tail_mean = {};$/;"	m	namespace:boost::accumulators::extract
non_coherent_tail_mean	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    struct non_coherent_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
non_coherent_tail_mean_impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        non_coherent_tail_mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::non_coherent_tail_mean_impl	access:public	signature:(dont_care)
non_coherent_tail_mean_impl	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    struct non_coherent_tail_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
non_coherent_weighted_tail_mean	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^    extractor<tag::abstract_non_coherent_tail_mean> const non_coherent_weighted_tail_mean = {};$/;"	m	namespace:boost::accumulators::extract
non_coherent_weighted_tail_mean	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^    struct non_coherent_weighted_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
non_coherent_weighted_tail_mean_impl	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        non_coherent_weighted_tail_mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::non_coherent_weighted_tail_mean_impl	access:public	signature:(dont_care)
non_coherent_weighted_tail_mean_impl	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^    struct non_coherent_weighted_tail_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
num_bins	/usr/include/boost/accumulators/statistics/density.hpp	/^        static boost::parameter::keyword<density_num_bins> const num_bins;$/;"	m	class:boost::accumulators::tag::density::boost::parameter	access:public
num_bins	/usr/include/boost/accumulators/statistics/density.hpp	/^        std::size_t            num_bins;        \/\/ number of bins$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
num_bins	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        static boost::parameter::keyword<density_num_bins> const num_bins;$/;"	m	class:boost::accumulators::tag::weighted_density::boost::parameter	access:public
num_bins	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        std::size_t            num_bins;        \/\/ number of bins$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
num_cells	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        std::size_t num_cells;            \/\/ number of cells b$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
num_cells	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        std::size_t num_cells;            \/\/ number of cells b$/;"	m	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:private
numeric	/usr/include/boost/accumulators/numeric/functional.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
numeric	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^namespace boost { namespace numeric { namespace operators$/;"	n	namespace:boost
numeric	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
numeric	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
numeric	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
numeric	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
numeric	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
numeric	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace boost { namespace numeric$/;"	n	namespace:boost
numeric	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    namespace numeric { namespace functional$/;"	n	namespace:boost
on_drop	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    detail::void_ on_drop(dont_care)$/;"	f	struct:boost::accumulators::accumulator_base	access:public	signature:(dont_care)
on_drop	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        void on_drop(Args const &args)$/;"	f	struct:boost::accumulators::with_cached_result	access:public	signature:(Args const &args)
one	/usr/include/boost/accumulators/numeric/functional.hpp	/^    struct one$/;"	s	namespace:boost::numeric
one	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^    struct one<std::complex<T> >$/;"	s	namespace:boost::numeric	inherits:detail::one_complex
one_complex	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^        struct one_complex$/;"	s	namespace:boost::numeric::detail
one_or_default	/usr/include/boost/accumulators/numeric/functional.hpp	/^    struct one_or_default$/;"	s	namespace:boost::numeric	inherits:mpl::if_::type
op	/usr/include/boost/accumulators/numeric/functional.hpp	/^    namespace op$/;"	n	namespace:boost::numeric
op	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^    namespace op$/;"	n	namespace:boost::numeric
op	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    namespace op$/;"	n	namespace:boost::numeric
operator ()	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    detail::void_ operator ()(dont_care)$/;"	f	struct:boost::accumulators::accumulator_base	access:public	signature:(dont_care)
operator ()	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^        void operator ()(Accumulator &accumulator) const$/;"	f	struct:boost::accumulators::detail::accumulator_visitor	access:public	signature:(Accumulator &accumulator) const
operator ()	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void operator ()()$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:()
operator ()	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void operator ()(A1 const &a1)$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:(A1 const &a1)
operator ()	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void operator ()(A1 const &a1, A2 const &a2, ...);$/;"	p	struct:boost::accumulators::accumulator_set	access:public	signature:(A1 const &a1, A2 const &a2, ...)
operator ()	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            void operator ()(Accumulator &acc) const$/;"	f	struct:boost::accumulators::detail::add_ref_visitor	access:public	signature:(Accumulator &acc) const
operator ()	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            void operator ()(Accumulator &acc) const$/;"	f	struct:boost::accumulators::detail::drop_visitor	access:public	signature:(Accumulator &acc) const
operator ()	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::droppable_accumulator_base	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/framework/extractor.hpp	/^    operator ()(AccumulatorSet const &acc, A1 const &a1) const$/;"	f	struct:boost::accumulators::extractor	access:public	signature:(AccumulatorSet const &acc, A1 const &a1) const
operator ()	/usr/include/boost/accumulators/framework/extractor.hpp	/^    operator ()(AccumulatorSet const &acc, A1 const &a1, A2 const &a2, ...);$/;"	p	struct:boost::accumulators::extractor	access:public	signature:(AccumulatorSet const &acc, A1 const &a1, A2 const &a2, ...)
operator ()	/usr/include/boost/accumulators/framework/extractor.hpp	/^    operator ()(Arg1 const &arg1) const$/;"	f	struct:boost::accumulators::extractor	access:public	signature:(Arg1 const &arg1) const
operator ()	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^    operator ()(A0 &a0) const$/;"	f	struct:boost::detail::function1	access:public	signature:(A0 &a0) const
operator ()	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^    operator ()(A0 const &a0) const$/;"	f	struct:boost::detail::function1	access:public	signature:(A0 const &a0) const
operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            To operator ()(From &from) const$/;"	f	struct:boost::numeric::functional::promote_base	access:public	signature:(From &from) const
operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            ToFrom &operator ()(ToFrom &tofrom)$/;"	f	struct:boost::numeric::functional::promote_base	access:public	signature:(ToFrom &tofrom)
operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            typename remove_const<Arg>::type operator ()(Arg &) const$/;"	f	struct:boost::numeric::functional::as_max_base	access:public	signature:(Arg &) const
operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            typename remove_const<Arg>::type operator ()(Arg &) const$/;"	f	struct:boost::numeric::functional::as_min_base	access:public	signature:(Arg &) const
operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            typename remove_const<Arg>::type operator ()(Arg &) const$/;"	f	struct:boost::numeric::functional::as_one_base	access:public	signature:(Arg &) const
operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            typename remove_const<Arg>::type operator ()(Arg &) const$/;"	f	struct:boost::numeric::functional::as_zero_base	access:public	signature:(Arg &) const
operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::max_assign_base	access:public	signature:(Left &left, Right &right) const
operator ()	/usr/include/boost/accumulators/numeric/functional.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::min_assign_base	access:public	signature:(Left &left, Right &right) const
operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            To operator ()(From &arr) const$/;"	f	struct:boost::numeric::functional::promote	access:public	signature:(From &arr) const
operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            ToFrom &operator ()(ToFrom &tofrom) const$/;"	f	struct:boost::numeric::functional::promote	access:public	signature:(ToFrom &tofrom) const
operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            bool operator ()(From &arr) const$/;"	f	struct:boost::numeric::functional::promote	access:public	signature:(From &arr) const
operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_max	access:public	signature:(T &arr) const
operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_min	access:public	signature:(T &arr) const
operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_one	access:public	signature:(T &arr) const
operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_zero	access:public	signature:(T &arr) const
operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::max_assign	access:public	signature:(Left &left, Right &right) const
operator ()	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::min_assign	access:public	signature:(Left &left, Right &right) const
operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            To operator ()(From &arr) const$/;"	f	struct:boost::numeric::functional::promote	access:public	signature:(From &arr) const
operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            ToFrom &operator ()(ToFrom &tofrom) const$/;"	f	struct:boost::numeric::functional::promote	access:public	signature:(ToFrom &tofrom) const
operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_max	access:public	signature:(T &arr) const
operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_min	access:public	signature:(T &arr) const
operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_one	access:public	signature:(T &arr) const
operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            typename remove_const<T>::type operator ()(T &arr) const$/;"	f	struct:boost::numeric::functional::as_zero	access:public	signature:(T &arr) const
operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::max_assign	access:public	signature:(Left &left, Right &right) const
operator ()	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            void operator ()(Left &left, Right &right) const$/;"	f	struct:boost::numeric::functional::min_assign	access:public	signature:(Left &left, Right &right) const
operator ()	/usr/include/boost/accumulators/statistics/count.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::count_impl	access:public	signature:(dont_care)
operator ()	/usr/include/boost/accumulators/statistics/covariance.hpp	/^            operator ()(Left & left, Right & right) const$/;"	f	struct:boost::numeric::functional::outer_product	access:public	signature:(Left & left, Right & right) const
operator ()	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::covariance_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/density.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::density_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::extended_p_square_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/max.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::max_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/mean.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::immediate_mean_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/median.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::with_density_median_impl	access:public	signature:(dont_care)
operator ()	/usr/include/boost/accumulators/statistics/median.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public	signature:(dont_care)
operator ()	/usr/include/boost/accumulators/statistics/min.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::min_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/moment.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::moment_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::p_square_quantile_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public	signature:(dont_care)
operator ()	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::rolling_sum_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/sum.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::sum_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    operator ()(Args const & args)$/;"	f	struct:boost::accumulators::impl::sum_kahan_impl	access:public	signature:(Args const & args)
operator ()	/usr/include/boost/accumulators/statistics/tail.hpp	/^            bool operator ()(std::size_t left, std::size_t right) const$/;"	f	struct:boost::accumulators::impl::tail_impl::indirect_cmp	access:public	signature:(std::size_t left, std::size_t right) const
operator ()	/usr/include/boost/accumulators/statistics/tail.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::tail_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/tail.hpp	/^        void operator ()(Stat &stat) const$/;"	f	struct:boost::accumulators::detail::stat_assign_visitor	access:public	signature:(Stat &stat) const
operator ()	/usr/include/boost/accumulators/statistics/variance.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::variance_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_covariance_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_density_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public	signature:(dont_care)
operator ()	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public	signature:(dont_care)
operator ()	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_moment_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        void operator ()(dont_care)$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public	signature:(dont_care)
operator ()	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_sum_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:public	signature:(Args const &args)
operator ()	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        void operator ()(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_variance_impl	access:public	signature:(Args const &args)
operator *	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^    operator *(std::complex<T> ri, U const &u)$/;"	f	namespace:boost::numeric::operators	signature:(std::complex<T> ri, U const &u)
operator *	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        operator *(std::valarray<Left> const &left, Right const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::valarray<Left> const &left, Right const &right)
operator *	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator *(Left const &left, std::vector<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(Left const &left, std::vector<Right> const &right)
operator *	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator *(std::vector<Left> const &left, Right const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, Right const &right)
operator *	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator *(std::vector<Left> const &left, std::vector<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, std::vector<Right> const &right)
operator +	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        operator +(std::valarray<Left> const &left, std::valarray<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::valarray<Left> const &left, std::valarray<Right> const &right)
operator +	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator +(std::vector<Left> const &left, std::vector<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, std::vector<Right> const &right)
operator +=	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator +=(std::vector<Left> &left, std::vector<Left> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> &left, std::vector<Left> const &right)
operator -	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator -(std::vector<Arg> const &arg)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Arg> const &arg)
operator -	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator -(std::vector<Left> const &left, std::vector<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, std::vector<Right> const &right)
operator /	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^    operator \/(std::complex<T> ri, U const &u)$/;"	f	namespace:boost::numeric::operators	signature:(std::complex<T> ri, U const &u)
operator /	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        operator \/(std::valarray<Left> const &left, Right const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::valarray<Left> const &left, Right const &right)
operator /	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator \/(std::vector<Left> const &left, Right const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, Right const &right)
operator /	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        operator \/(std::vector<Left> const &left, std::vector<Right> const &right)$/;"	f	namespace:boost::numeric::operators	signature:(std::vector<Left> const &left, std::vector<Right> const &right)
operator =	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^        accumulator_visitor &operator =(accumulator_visitor const &);$/;"	p	struct:boost::accumulators::detail::accumulator_visitor	access:private	signature:(accumulator_visitor const &)
operator =	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            add_ref_visitor &operator =(add_ref_visitor const &);$/;"	p	struct:boost::accumulators::detail::add_ref_visitor	access:private	signature:(add_ref_visitor const &)
operator =	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            drop_visitor &operator =(drop_visitor const &);$/;"	p	struct:boost::accumulators::detail::drop_visitor	access:private	signature:(drop_visitor const &)
operator =	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        with_cached_result &operator =(with_cached_result const &);$/;"	p	struct:boost::accumulators::with_cached_result	access:private	signature:(with_cached_result const &)
operator =	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        rolling_window_plus1_impl &operator =(rolling_window_plus1_impl const &that)$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:(rolling_window_plus1_impl const &that)
operator =	/usr/include/boost/accumulators/statistics/tail.hpp	/^            indirect_cmp &operator =(indirect_cmp const &);$/;"	p	struct:boost::accumulators::impl::tail_impl::indirect_cmp	access:private	signature:(indirect_cmp const &)
operator =	/usr/include/boost/accumulators/statistics/tail.hpp	/^        stat_assign_visitor &operator =(stat_assign_visitor const &);$/;"	p	struct:boost::accumulators::detail::stat_assign_visitor	access:private	signature:(stat_assign_visitor const &)
operator T const &	/usr/include/boost/accumulators/numeric/functional.hpp	/^        operator T const & () const$/;"	f	struct:boost::numeric::default_	access:public	signature:() const
operator T const &	/usr/include/boost/accumulators/numeric/functional.hpp	/^        operator T const & () const$/;"	f	struct:boost::numeric::one	access:public	signature:() const
operator T const &	/usr/include/boost/accumulators/numeric/functional.hpp	/^        operator T const & () const$/;"	f	struct:boost::numeric::zero	access:public	signature:() const
operator []	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^        typename Base::reference operator [](typename Base::difference_type n) const$/;"	f	struct:boost::accumulators::detail::lvalue_index_iterator	access:public	signature:(typename Base::difference_type n) const
operator value_type const &	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^        operator value_type const & () const$/;"	f	struct:boost::numeric::one	access:public	signature:() const
operators	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^namespace boost { namespace numeric { namespace operators$/;"	n	namespace:boost::numeric
operators	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^    namespace operators$/;"	n	namespace:boost::numeric
operators	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^    namespace operators$/;"	n	namespace:boost::numeric
operators	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^    namespace operators$/;"	n	namespace:boost::numeric
outer_product	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        op::outer_product const &outer_product = boost::detail::pod_singleton<op::outer_product>::instance;$/;"	m	class:boost::numeric::__anon3::op
outer_product	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        struct outer_product$/;"	s	namespace:boost::numeric::functional	inherits:outer_product_base
outer_product	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        struct outer_product$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function2
outer_product	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        struct outer_product<Left, Right, std_vector_tag, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::binary_function
outer_product_base	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        struct outer_product_base$/;"	s	namespace:boost::numeric::functional	inherits:functional::multiplies
p	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        float_type p;                    \/\/ the quantile probability p$/;"	m	struct:boost::accumulators::impl::p_square_quantile_impl	access:private
p	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        float_type p;                    \/\/ the quantile probability p$/;"	m	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:private
p_square_cumulative_distribution	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^    extractor<tag::p_square_cumulative_distribution> const p_square_cumulative_distribution = {};$/;"	m	namespace:boost::accumulators::extract
p_square_cumulative_distribution	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^    struct p_square_cumulative_distribution$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,p_square_cumulative_distribution_num_cells
p_square_cumulative_distribution_impl	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        p_square_cumulative_distribution_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public	signature:(Args const &args)
p_square_cumulative_distribution_impl	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^    struct p_square_cumulative_distribution_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
p_square_quantile	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    extractor<tag::p_square_quantile> const p_square_quantile = {};$/;"	m	namespace:boost::accumulators::extract
p_square_quantile	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    struct p_square_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
p_square_quantile_for_median	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    extractor<tag::p_square_quantile_for_median> const p_square_quantile_for_median = {};$/;"	m	namespace:boost::accumulators::extract
p_square_quantile_for_median	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    struct p_square_quantile_for_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
p_square_quantile_impl	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        p_square_quantile_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::p_square_quantile_impl	access:public	signature:(Args const &args)
p_square_quantile_impl	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    struct p_square_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
param	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	136;"	d
param	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	96;"	d
param_list	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	135;"	d
param_list	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	99;"	d
peaks_over_threshold	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    extractor<tag::abstract_peaks_over_threshold> const peaks_over_threshold = {};$/;"	m	namespace:boost::accumulators::extract
peaks_over_threshold	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    struct peaks_over_threshold$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,pot_threshold_value
peaks_over_threshold_impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        peaks_over_threshold_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public	signature:(Args const &args)
peaks_over_threshold_impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    struct peaks_over_threshold_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
peaks_over_threshold_prob	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    struct peaks_over_threshold_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,pot_threshold_probability
peaks_over_threshold_prob_impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        peaks_over_threshold_prob_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public	signature:(Args const &args)
peaks_over_threshold_prob_impl	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    struct peaks_over_threshold_prob_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
pod_singleton	/usr/include/boost/accumulators/numeric/detail/pod_singleton.hpp	/^struct pod_singleton$/;"	s	namespace:boost::detail
positions_increments	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        array_type positions_increments;  \/\/ f_i$/;"	m	struct:boost::accumulators::impl::extended_p_square_impl	access:private
positions_increments	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        array_type  positions_increments; \/\/ dn'_i$/;"	m	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:private
positions_increments	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        array_type positions_increments; \/\/ dn'_i$/;"	m	struct:boost::accumulators::impl::p_square_quantile_impl	access:private
pot_quantile	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    struct pot_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
pot_quantile_impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        pot_quantile_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::pot_quantile_impl	access:public	signature:(dont_care)
pot_quantile_impl	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    struct pot_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
pot_quantile_prob	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    struct pot_quantile_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
pot_tail_mean	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    struct pot_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
pot_tail_mean_impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        pot_tail_mean_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::pot_tail_mean_impl	access:public	signature:(dont_care)
pot_tail_mean_impl	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    struct pot_tail_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
pot_tail_mean_prob	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    struct pot_tail_mean_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
pow	/usr/include/boost/accumulators/statistics/moment.hpp	/^    T const &pow(T const &x, mpl::int_<1>)$/;"	f	namespace:boost::numeric	signature:(T const &x, mpl::int_<1>)
pow	/usr/include/boost/accumulators/statistics/moment.hpp	/^    T pow(T const &x, mpl::int_<N>)$/;"	f	namespace:boost::numeric	signature:(T const &x, mpl::int_<N>)
predicate_type	/usr/include/boost/accumulators/statistics/tail.hpp	/^        predicate_type;$/;"	t	struct:boost::accumulators::impl::tail_impl	access:public
probabilities	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        array_type probabilities;         \/\/ the quantile probabilities$/;"	m	struct:boost::accumulators::impl::extended_p_square_impl	access:private
probabilities	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        static boost::parameter::keyword<tag::probabilities> const probabilities;$/;"	m	class:boost::accumulators::tag::extended_p_square::boost::parameter	access:public
probabilities	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        array_type probabilities;$/;"	m	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:private
probabilities	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        array_type probabilities;         \/\/ the quantile probabilities$/;"	m	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:private
probability	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        mutable float_type probability;$/;"	m	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:private
promote	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct promote$/;"	s	namespace:boost::numeric::functional	inherits:promote_base
promote	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct promote$/;"	s	namespace:boost::numeric::op	inherits:boost::detail::function1
promote	/usr/include/boost/accumulators/numeric/functional.hpp	/^    promote(From &from)$/;"	f	namespace:boost::numeric	signature:(From &from)
promote	/usr/include/boost/accumulators/numeric/functional.hpp	/^    promote(From const &from)$/;"	f	namespace:boost::numeric	signature:(From const &from)
promote	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct promote<To, From, std_valarray_tag, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
promote	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct promote<ToFrom, ToFrom, std_valarray_tag, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
promote	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct promote<bool const, From, void, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:promote
promote	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct promote<bool, From, void, std_valarray_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
promote	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct promote<To, From, std_vector_tag, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
promote	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct promote<ToFrom, ToFrom, std_vector_tag, std_vector_tag>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
promote	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^    promote(From const &from);$/;"	p	namespace:boost::numeric	signature:(From const &from)
promote_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct promote_base$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
promote_base	/usr/include/boost/accumulators/numeric/functional.hpp	/^        struct promote_base<ToFrom, ToFrom, void>$/;"	s	namespace:boost::numeric::functional	inherits:std::unary_function
quadratic	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct quadratic {};$/;"	s	namespace:boost::accumulators
quantile	/usr/include/boost/accumulators/statistics_fwd.hpp	/^    extractor<tag::quantile> const quantile = {};$/;"	m	namespace:boost::accumulators::extract
quantile	/usr/include/boost/accumulators/statistics_fwd.hpp	/^    struct quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
range_type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        > range_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public
range_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef iterator_range<typename histogram_type::iterator> range_type;$/;"	t	struct:boost::accumulators::impl::with_density_median_impl	access:public
range_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef iterator_range<typename histogram_type::iterator> range_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public
range_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef iterator_range<typename histogram_type::iterator> range_type;$/;"	t	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public
range_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef iterator_range<typename histogram_type::iterator> range_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public
ref	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^        reference_wrapper<Referent> ref;$/;"	m	struct:boost::accumulators::impl::reference_accumulator_impl	access:private
ref_count_	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        int ref_count_;$/;"	m	struct:boost::accumulators::droppable_accumulator_base	access:private
reference	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^    struct reference$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
reference_accumulator_impl	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^        reference_accumulator_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::reference_accumulator_impl	access:public	signature:(Args const &args)
reference_accumulator_impl	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^    struct reference_accumulator_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
reference_tag	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^    struct reference_tag$/;"	s	namespace:boost::accumulators::tag
regular	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct regular {};$/;"	s	namespace:boost::accumulators
relative	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct relative {};$/;"	s	namespace:boost::accumulators
relative_tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    extractor<tag::abstract_relative_tail_variate_means> const relative_tail_variate_means = {};$/;"	m	namespace:boost::accumulators::extract
relative_tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    struct relative_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
relative_weighted_tail_variate_means	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    extractor<tag::abstract_relative_tail_variate_means> const relative_weighted_tail_variate_means = {};$/;"	m	namespace:boost::accumulators::extract
relative_weighted_tail_variate_means	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    struct relative_weighted_tail_variate_means$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::with_cached_result	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::external_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::reference_accumulator_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::value_accumulator_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/framework/extractor.hpp	/^    struct result<this_type(A1)>$/;"	s	struct:boost::accumulators::extractor	inherits:detail::extractor_result	access:public
result	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^    struct result$/;"	s	struct:boost::detail::function1	access:public
result	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^    struct result<This(A0)>$/;"	s	struct:boost::detail::function1	access:public
result	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	/^    struct result {};$/;"	s	struct:boost::detail::function_name	access:public
result	/usr/include/boost/accumulators/statistics/count.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::count_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::covariance_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/density.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::density_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/error_of.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::error_of_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::error_of_mean_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::extended_p_square_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::kurtosis_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/max.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::max_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::mean_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/mean.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::immediate_mean_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::median_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::with_density_median_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/min.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::min_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/moment.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::moment_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::p_square_quantile_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::pot_quantile_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::pot_tail_mean_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::rolling_count_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::rolling_mean_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::rolling_sum_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::rolling_window_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/skewness.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::skewness_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/sum.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::sum_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::sum_kahan_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/tail.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::tail_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::coherent_tail_mean_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::non_coherent_tail_mean_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::tail_quantile_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::tail_variate_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::tail_variate_means_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/variance.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::lazy_variance_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/variance.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::variance_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_covariance_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_density_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_kurtosis_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_mean_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_median_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_moment_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_skewness_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_sum_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:public	signature:(dont_care) const
result	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::non_coherent_weighted_tail_mean_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_tail_quantile_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        result_type result(Args const &args) const$/;"	f	struct:boost::accumulators::impl::lazy_weighted_variance_impl	access:public	signature:(Args const &args) const
result	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        result_type result(dont_care) const$/;"	f	struct:boost::accumulators::impl::weighted_variance_impl	access:public	signature:(dont_care) const
result_	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	137;"	d
result_	/usr/include/boost/accumulators/numeric/detail/function_n.hpp	88;"	d
result_type	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typedef void result_type;$/;"	t	struct:boost::accumulators::accumulator_set	access:public
result_type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef typename Accumulator::result_type result_type;$/;"	t	struct:boost::accumulators::droppable_accumulator_base	access:public
result_type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef typename Accumulator::result_type result_type;$/;"	t	struct:boost::accumulators::with_cached_result	access:public
result_type	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^        typedef typename Accumulator::result_type result_type;$/;"	t	struct:boost::accumulators::impl::external_impl	access:public
result_type	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^        typedef Referent &result_type;$/;"	t	struct:boost::accumulators::impl::reference_accumulator_impl	access:public
result_type	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^        typedef ValueType result_type;$/;"	t	struct:boost::accumulators::impl::value_accumulator_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/count.hpp	/^        typedef std::size_t result_type;$/;"	t	struct:boost::accumulators::impl::count_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/covariance.hpp	/^            result_type;$/;"	t	struct:boost::numeric::functional::outer_product	access:public
result_type	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        typedef typename numeric::functional::outer_product<sample_type, variate_type>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::covariance_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/density.hpp	/^        typedef iterator_range<typename histogram_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::density_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/error_of.hpp	/^        typedef int result_type;$/;"	t	struct:boost::accumulators::impl::error_of_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::error_of_mean_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^        > result_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::extended_p_square_quantile_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^        typedef typename numeric::functional::average<Sample, Sample>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::kurtosis_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/max.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::max_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::immediate_mean_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::mean_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::with_density_median_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/median.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::median_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/min.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::min_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/moment.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::moment_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^        typedef iterator_range<typename histogram_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::p_square_cumulative_distribution_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::p_square_quantile_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef boost::tuple<float_type, float_type, float_type> result_type;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef boost::tuple<float_type, float_type, float_type> result_type;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::pot_quantile_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::pot_tail_mean_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^        typedef std::size_t result_type;$/;"	t	struct:boost::accumulators::impl::rolling_count_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::rolling_mean_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::rolling_sum_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef iterator_range<const_iterator> result_type;$/;"	t	struct:boost::accumulators::impl::rolling_window_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        typedef iterator_range<const_iterator> result_type;$/;"	t	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/skewness.hpp	/^        typedef typename numeric::functional::average<Sample, Sample>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::skewness_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/sum.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::sum_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::sum_kahan_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/tail.hpp	/^        >::type result_type;$/;"	t	struct:boost::accumulators::impl::tail_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::coherent_tail_mean_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::non_coherent_tail_mean_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::tail_quantile_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        result_type;$/;"	t	struct:boost::accumulators::impl::tail_variate_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        typedef iterator_range<typename array_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::tail_variate_means_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/variance.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::lazy_variance_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/variance.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::variance_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        typedef typename numeric::functional::outer_product<weighted_sample_type, weighted_variate_type>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_covariance_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        typedef iterator_range<typename histogram_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::weighted_density_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        > result_type;$/;"	t	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^        typedef typename numeric::functional::average<weighted_sample, weighted_sample>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_kurtosis_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef typename numeric::functional::average<weighted_sample, Weight>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef typename numeric::functional::average<weighted_sample, Weight>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_mean_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_median_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        typedef typename numeric::functional::average<weighted_sample, Weight>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_moment_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef iterator_range<typename histogram_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef float_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef boost::tuple<float_type, float_type, float_type> result_type;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef boost::tuple<float_type, float_type, float_type> result_type;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^        typedef typename numeric::functional::average<weighted_sample, weighted_sample>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_skewness_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        typedef weighted_sample result_type;$/;"	t	struct:boost::accumulators::impl::weighted_sum_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        typedef weighted_sample result_type;$/;"	t	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        typedef typename numeric::functional::average<weighted_sample, std::size_t>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::non_coherent_weighted_tail_mean_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^        typedef Sample result_type;$/;"	t	struct:boost::accumulators::impl::weighted_tail_quantile_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        typedef iterator_range<typename array_type::iterator> result_type;$/;"	t	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef typename numeric::functional::average<weighted_sample, Weight>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::lazy_weighted_variance_impl	access:public
result_type	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef typename numeric::functional::average<weighted_sample, Weight>::result_type result_type;$/;"	t	struct:boost::accumulators::impl::weighted_variance_impl	access:public
right	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct right {};$/;"	s	namespace:boost::accumulators
rolling_count	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^    extractor<tag::rolling_count> const rolling_count = {};$/;"	m	namespace:boost::accumulators::extract
rolling_count	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^    struct rolling_count$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
rolling_count_impl	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^        rolling_count_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::rolling_count_impl	access:public	signature:(dont_care)
rolling_count_impl	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^    struct rolling_count_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
rolling_mean	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^    extractor<tag::rolling_mean> const rolling_mean = {};$/;"	m	namespace:boost::accumulators::extract
rolling_mean	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^    struct rolling_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
rolling_mean_impl	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^        rolling_mean_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::rolling_mean_impl	access:public	signature:(dont_care)
rolling_mean_impl	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^    struct rolling_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
rolling_sum	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^    extractor<tag::rolling_sum> const rolling_sum = {};$/;"	m	namespace:boost::accumulators::extract
rolling_sum	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^    struct rolling_sum$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
rolling_sum_impl	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        rolling_sum_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::rolling_sum_impl	access:public	signature:(Args const &args)
rolling_sum_impl	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^    struct rolling_sum_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
rolling_window	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    extractor<tag::rolling_window> const rolling_window = {};$/;"	m	namespace:boost::accumulators::extract
rolling_window	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    struct rolling_window$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
rolling_window_impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        rolling_window_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::rolling_window_impl	access:public	signature:(dont_care)
rolling_window_impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    struct rolling_window_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
rolling_window_plus1	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    extractor<tag::rolling_window_plus1> const rolling_window_plus1 = {};$/;"	m	namespace:boost::accumulators::extract
rolling_window_plus1	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    struct rolling_window_plus1$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,tag::rolling_window_size
rolling_window_plus1_impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        rolling_window_plus1_impl(Args const & args)$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:(Args const & args)
rolling_window_plus1_impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        rolling_window_plus1_impl(rolling_window_plus1_impl const &that)$/;"	f	struct:boost::accumulators::impl::rolling_window_plus1_impl	access:public	signature:(rolling_window_plus1_impl const &that)
rolling_window_plus1_impl	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^    struct rolling_window_plus1_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
sample_type	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typedef Sample sample_type;     \/\/\/< The type of the samples that will be accumulated$/;"	t	struct:boost::accumulators::accumulator_set	access:public
sample_type	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        typedef typename numeric::functional::average<Sample, std::size_t>::result_type sample_type;$/;"	t	struct:boost::accumulators::impl::covariance_impl	access:public
samples	/usr/include/boost/accumulators/statistics/tail.hpp	/^            std::vector<Sample> const &samples;$/;"	m	class:boost::accumulators::impl::tail_impl::indirect_cmp::std	access:private
samples	/usr/include/boost/accumulators/statistics/tail.hpp	/^        std::vector<Sample> samples;$/;"	m	struct:boost::accumulators::impl::tail_impl	access:private
samples_in_bin	/usr/include/boost/accumulators/statistics/density.hpp	/^        array_type             samples_in_bin;  \/\/ number of samples in each bin$/;"	m	struct:boost::accumulators::impl::density_impl	access:private
samples_in_bin	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        array_type             samples_in_bin;  \/\/ number of samples in each bin$/;"	m	struct:boost::accumulators::impl::weighted_density_impl	access:private
set	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        void set(result_type const &r)$/;"	f	struct:boost::accumulators::with_cached_result	access:private	signature:(result_type const &r)
set_insert_range	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct set_insert_range$/;"	s	namespace:boost::accumulators::detail	inherits:mpl::fold
sigma2_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable float_type sigma2_;                 \/\/ variance of samples above threshold u$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:private
sigma2_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable float_type sigma2_;          \/\/ variance of Nu_ largest samples$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
sigma2_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type sigma2_;                 \/\/ variance of samples above threshold u$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
sigma2_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type sigma2_;          \/\/ variance of samples above threshold$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
sign	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef mpl::int_<is_same<LeftRight, left>::value ? -1 : 1> sign;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:public
sign	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        typedef mpl::int_<is_same<LeftRight, left>::value ? -1 : 1> sign;$/;"	t	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:public
sign_	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^        short sign_; \/\/ if the fit parameters from the mirrored left tail extreme values are used, mirror back the result$/;"	m	struct:boost::accumulators::impl::pot_quantile_impl	access:private
sign_	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^        short sign_; \/\/ if the fit parameters from the mirrored left tail extreme values are used, mirror back the result$/;"	m	struct:boost::accumulators::impl::pot_tail_mean_impl	access:private
sign_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        short sign_;                                \/\/ for left tail fitting, mirror the extreme values$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
sign_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        short sign_;                         \/\/ for left tail fitting, mirror the extreme values$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
skewness	/usr/include/boost/accumulators/statistics/skewness.hpp	/^    extractor<tag::skewness> const skewness = {};$/;"	m	namespace:boost::accumulators::extract
skewness	/usr/include/boost/accumulators/statistics/skewness.hpp	/^    struct skewness$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
skewness_impl	/usr/include/boost/accumulators/statistics/skewness.hpp	/^        skewness_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::skewness_impl	access:public	signature:(dont_care)
skewness_impl	/usr/include/boost/accumulators/statistics/skewness.hpp	/^    struct skewness_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
sorted_feature_vector	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            sorted_feature_vector;$/;"	t	struct:boost::accumulators::detail::make_accumulator_tuple	access:public
stat	/usr/include/boost/accumulators/framework/accumulator_concept.hpp	/^    Stat stat;$/;"	m	struct:boost::accumulators::accumulator_concept	access:public
stat_assign	/usr/include/boost/accumulators/statistics/tail.hpp	/^    inline stat_assign_visitor<Args> const stat_assign(Args const &args, std::size_t index)$/;"	f	namespace:boost::accumulators::detail	signature:(Args const &args, std::size_t index)
stat_assign_visitor	/usr/include/boost/accumulators/statistics/tail.hpp	/^        stat_assign_visitor(Args const &a, std::size_t i)$/;"	f	struct:boost::accumulators::detail::stat_assign_visitor	access:public	signature:(Args const &a, std::size_t i)
stat_assign_visitor	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct stat_assign_visitor$/;"	s	namespace:boost::accumulators::detail
stats	/usr/include/boost/accumulators/statistics/stats.hpp	/^struct stats$/;"	s	namespace:boost::accumulators	inherits:mpl::vector
std	/usr/include/boost/accumulators/numeric/functional.hpp	/^namespace std$/;"	n
std::binary_function	/usr/include/boost/accumulators/numeric/functional.hpp	/^    template<class Left, class Right, class Ret> struct binary_function {};$/;"	s	namespace:std
std::unary_function	/usr/include/boost/accumulators/numeric/functional.hpp	/^    template<class Arg, class Ret> struct unary_function {};$/;"	s	namespace:std
sum	/usr/include/boost/accumulators/statistics/median.hpp	/^        mutable float_type sum;$/;"	m	struct:boost::accumulators::impl::with_density_median_impl	access:private
sum	/usr/include/boost/accumulators/statistics/moment.hpp	/^        Sample sum;$/;"	m	struct:boost::accumulators::impl::moment_impl	access:private
sum	/usr/include/boost/accumulators/statistics/sum.hpp	/^        Sample sum;$/;"	m	struct:boost::accumulators::impl::sum_impl	access:private
sum	/usr/include/boost/accumulators/statistics/sum.hpp	/^    extractor<tag::sum> const sum = {};$/;"	m	namespace:boost::accumulators::extract
sum	/usr/include/boost/accumulators/statistics/sum.hpp	/^    struct sum$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
sum	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    Sample sum;$/;"	m	struct:boost::accumulators::impl::sum_kahan_impl	access:private
sum	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        mutable float_type sum;$/;"	m	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:private
sum	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        weighted_sample sum;$/;"	m	struct:boost::accumulators::impl::weighted_moment_impl	access:private
sum_	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        Sample sum_;$/;"	m	struct:boost::accumulators::impl::rolling_sum_impl	access:private
sum_impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^        sum_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::sum_impl	access:public	signature:(Args const &args)
sum_impl	/usr/include/boost/accumulators/statistics/sum.hpp	/^    struct sum_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
sum_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    extractor<tag::sum_kahan> const sum_kahan = {};$/;"	m	namespace:boost::accumulators::extract
sum_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    struct sum_kahan$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
sum_kahan_impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    sum_kahan_impl(Args const & args)$/;"	f	struct:boost::accumulators::impl::sum_kahan_impl	access:public	signature:(Args const & args)
sum_kahan_impl	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^struct sum_kahan_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
sum_of_variates	/usr/include/boost/accumulators/statistics/sum.hpp	/^    extractor<tag::abstract_sum_of_variates> const sum_of_variates = {};$/;"	m	namespace:boost::accumulators::extract
sum_of_variates	/usr/include/boost/accumulators/statistics/sum.hpp	/^    struct sum_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
sum_of_variates_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    extractor<tag::abstract_sum_of_variates> const sum_of_variates_kahan = {};$/;"	m	namespace:boost::accumulators::extract
sum_of_variates_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    struct sum_of_variates_kahan$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
sum_of_weights	/usr/include/boost/accumulators/statistics/sum.hpp	/^    extractor<tag::sum_of_weights> const sum_of_weights = {};$/;"	m	namespace:boost::accumulators::extract
sum_of_weights	/usr/include/boost/accumulators/statistics/sum.hpp	/^    struct sum_of_weights$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
sum_of_weights_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    extractor<tag::sum_of_weights_kahan> const sum_of_weights_kahan = {};$/;"	m	namespace:boost::accumulators::extract
sum_of_weights_kahan	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    struct sum_of_weights_kahan$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
tag	/usr/include/boost/accumulators/accumulators_fwd.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/framework/accumulators/external_accumulator.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/framework/accumulators/reference_accumulator.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct tag<std::_Expr<T, U> >$/;"	s	namespace:boost::numeric::functional
tag	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^        struct tag<std::valarray<T> >$/;"	s	namespace:boost::numeric::functional
tag	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^        struct tag<std::vector<T, Al> >$/;"	s	namespace:boost::numeric::functional
tag	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^        struct tag$/;"	s	namespace:boost::numeric::functional
tag	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^        struct tag<T const volatile>$/;"	s	namespace:boost::numeric::functional	inherits:tag
tag	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^        struct tag<T const>$/;"	s	namespace:boost::numeric::functional	inherits:tag
tag	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^        struct tag<T volatile>$/;"	s	namespace:boost::numeric::functional	inherits:tag
tag	/usr/include/boost/accumulators/statistics/count.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/covariance.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/density.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/error_of.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/error_of_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/max.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/median.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/min.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/moment.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/skewness.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/sum.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/tail.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/variance.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tag	/usr/include/boost/accumulators/statistics_fwd.hpp	/^namespace tag$/;"	n	namespace:boost::accumulators
tail	/usr/include/boost/accumulators/statistics/tail.hpp	/^    extractor<tag::abstract_tail> const tail = {};$/;"	m	namespace:boost::accumulators::extract
tail	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct tail$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,tail_cache_size_named_arg
tail_cache_size_named_arg	/usr/include/boost/accumulators/statistics/tail.hpp	/^struct tail_cache_size_named_arg$/;"	s	namespace:boost::accumulators
tail_cache_size_named_arg	/usr/include/boost/accumulators/statistics/tail.hpp	/^struct tail_cache_size_named_arg<left>$/;"	s	namespace:boost::accumulators	inherits:tag::left_tail_cache_size
tail_cache_size_named_arg	/usr/include/boost/accumulators/statistics/tail.hpp	/^struct tail_cache_size_named_arg<right>$/;"	s	namespace:boost::accumulators	inherits:tag::right_tail_cache_size
tail_impl	/usr/include/boost/accumulators/statistics/tail.hpp	/^        tail_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::tail_impl	access:public	signature:(Args const &args)
tail_impl	/usr/include/boost/accumulators/statistics/tail.hpp	/^        tail_impl(tail_impl const &that)$/;"	f	struct:boost::accumulators::impl::tail_impl	access:public	signature:(tail_impl const &that)
tail_impl	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct tail_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
tail_mean	/usr/include/boost/accumulators/statistics_fwd.hpp	/^    extractor<tag::tail_mean> const tail_mean = {};$/;"	m	namespace:boost::accumulators::extract
tail_mean	/usr/include/boost/accumulators/statistics_fwd.hpp	/^    struct tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
tail_means_	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        mutable array_type tail_means_;$/;"	m	struct:boost::accumulators::impl::tail_variate_means_impl	access:private
tail_means_	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        mutable array_type tail_means_;$/;"	m	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:private
tail_quantile	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^    extractor<tag::quantile> const tail_quantile = {};$/;"	m	namespace:boost::accumulators::extract
tail_quantile	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^    struct tail_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
tail_quantile_impl	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^        tail_quantile_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::tail_quantile_impl	access:public	signature:(dont_care)
tail_quantile_impl	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^    struct tail_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
tail_range	/usr/include/boost/accumulators/statistics/tail.hpp	/^    struct tail_range$/;"	s	namespace:boost::accumulators::detail
tail_variate	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    extractor<tag::abstract_tail_variate> const tail_variate = {};$/;"	m	namespace:boost::accumulators::extract
tail_variate	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    struct tail_variate$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
tail_variate_impl	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        tail_variate_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::tail_variate_impl	access:public	signature:(Args const &args)
tail_variate_impl	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    struct tail_variate_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
tail_variate_means	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    extractor<tag::abstract_absolute_tail_variate_means> const tail_variate_means = {};$/;"	m	namespace:boost::accumulators::extract
tail_variate_means_impl	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^        tail_variate_means_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::tail_variate_means_impl	access:public	signature:(dont_care)
tail_variate_means_impl	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    struct tail_variate_means_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
tail_weights	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    extractor<tag::abstract_tail_weights> const tail_weights = {};$/;"	m	namespace:boost::accumulators::extract
tail_weights	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    struct tail_weights$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
the_feature	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            the_feature;$/;"	t	struct:boost::accumulators::detail::contains_feature_of	access:public
this_feature_has_no_error_calculation	/usr/include/boost/accumulators/statistics/error_of.hpp	/^    struct this_feature_has_no_error_calculation$/;"	s	namespace:boost::accumulators::impl	inherits:mpl::false_
this_type	/usr/include/boost/accumulators/framework/extractor.hpp	/^    typedef extractor<Feature> this_type;$/;"	t	struct:boost::accumulators::extractor	access:public
threshold_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        float_type threshold_;$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_impl	access:private
threshold_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        float_type threshold_;$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
threshold_probability_	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^        mutable float_type threshold_probability_;$/;"	m	struct:boost::accumulators::impl::peaks_over_threshold_prob_impl	access:private
threshold_probability_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type threshold_probability_;$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:private
times2_iterator	/usr/include/boost/accumulators/statistics/times2_iterator.hpp	/^    > times2_iterator;$/;"	t	namespace:boost::accumulators::detail
tmp_dependencies_	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            typedef typename feature_type::dependencies tmp_dependencies_;$/;"	t	struct:boost::accumulators::tag::droppable	access:public
to_accumulator	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct to_accumulator$/;"	s	namespace:boost::accumulators::detail
to_accumulator	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct to_accumulator<Feature, Sample, tag::external<Weight, Tag, AccumulatorSet> >$/;"	s	namespace:boost::accumulators::detail
type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^                    type;$/;"	t	struct:boost::accumulators::tag::droppable::impl::apply	access:public
type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^            typedef droppable<Feature> type;$/;"	t	struct:boost::accumulators::tag::as_droppable	access:public
type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef tag::droppable<typename as_feature<Feature>::type> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        typedef tag::droppable<typename as_weighted_feature<Feature>::type> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            type;$/;"	t	struct:boost::accumulators::detail::build_acc_list	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            type;$/;"	t	struct:boost::accumulators::detail::contains_feature_of	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            type;$/;"	t	struct:boost::accumulators::detail::make_accumulator_tuple	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            type;$/;"	t	struct:boost::accumulators::detail::to_accumulator	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef Feature type;$/;"	t	struct:boost::accumulators::detail::undroppable	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef fusion::nil type;$/;"	t	struct:boost::accumulators::detail::build_acc_list	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef typename Accumulator::feature_tag type;$/;"	t	struct:boost::accumulators::detail::feature_tag	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef typename Feature::dependencies type;$/;"	t	struct:boost::accumulators::detail::dependencies_of	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^            typedef typename as_weighted_feature<feature_type>::type type;$/;"	t	struct:boost::accumulators::detail::checked_as_weighted_feature	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        typedef Feature type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        typedef Feature type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        typedef Feature type;$/;"	t	struct:boost::accumulators::feature_of	access:public
type	/usr/include/boost/accumulators/framework/extractor.hpp	/^        typedef typename mpl::apply<AccumulatorSet, feature_type>::type::result_type type;$/;"	t	struct:boost::accumulators::detail::accumulator_set_result	access:public
type	/usr/include/boost/accumulators/numeric/detail/function1.hpp	/^        typedef typename impl::result_type type;$/;"	t	struct:boost::detail::function1::result	access:public
type	/usr/include/boost/accumulators/numeric/functional.hpp	/^            typedef Left &type;$/;"	t	struct:boost::numeric::functional::left_ref	access:public
type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef default_ type;$/;"	t	struct:boost::numeric::default_	access:public
type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef one type;$/;"	t	struct:boost::numeric::one	access:public
type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef zero type;$/;"	t	struct:boost::numeric::zero	access:public
type	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^        typedef one type;$/;"	t	struct:boost::numeric::one	access:public
type	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^                typedef std::valarray<typename Fun::result_type> type;$/;"	t	struct:boost::numeric::operators::acc_detail::make_valarray	access:public
type	/usr/include/boost/accumulators/numeric/functional/valarray.hpp	/^            typedef std_valarray_tag type;$/;"	t	struct:boost::numeric::functional::tag	access:public
type	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^                typedef std::vector<typename Fun::result_type> type;$/;"	t	struct:boost::numeric::operators::acc_detail::make_vector	access:public
type	/usr/include/boost/accumulators/numeric/functional/vector.hpp	/^            typedef std_vector_tag type;$/;"	t	struct:boost::numeric::functional::tag	access:public
type	/usr/include/boost/accumulators/numeric/functional_fwd.hpp	/^            typedef void type;$/;"	t	struct:boost::numeric::functional::tag	access:public
type	/usr/include/boost/accumulators/statistics/covariance.hpp	/^    typedef tag::weighted_covariance<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/density.hpp	/^    typedef tag::weighted_density type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/error_of.hpp	/^    typedef tag::error_of<typename as_feature<Feature>::type> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/error_of.hpp	/^    typedef tag::error_of<typename as_weighted_feature<Feature>::type> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/extended_p_square.hpp	/^    typedef tag::weighted_extended_p_square type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::extended_p_square_quantile type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::extended_p_square_quantile_quadratic type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::weighted_extended_p_square_quantile type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::weighted_extended_p_square_quantile type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::weighted_extended_p_square_quantile_quadratic type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    typedef tag::weighted_extended_p_square_quantile_quadratic type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/kurtosis.hpp	/^    typedef tag::weighted_kurtosis type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::immediate_mean type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::immediate_mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::immediate_mean_of_weights type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::immediate_weighted_mean type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::immediate_weighted_mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::mean type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::mean_of_weights type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::weighted_mean type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/mean.hpp	/^    typedef tag::weighted_mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::weighted_median type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::with_density_median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::with_density_weighted_median type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::with_p_square_cumulative_distribution_median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/median.hpp	/^    typedef tag::with_p_square_cumulative_distribution_weighted_median type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/moment.hpp	/^    typedef tag::weighted_moment<N> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/p_square_cumul_dist.hpp	/^    typedef tag::weighted_p_square_cumulative_distribution type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/p_square_quantile.hpp	/^    typedef tag::weighted_p_square_quantile type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    typedef tag::peaks_over_threshold<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    typedef tag::peaks_over_threshold_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    typedef tag::weighted_peaks_over_threshold<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/peaks_over_threshold.hpp	/^    typedef tag::weighted_peaks_over_threshold_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::pot_quantile<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::pot_quantile_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::weighted_pot_quantile<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::weighted_pot_quantile<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::weighted_pot_quantile_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    typedef tag::weighted_pot_quantile_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::pot_tail_mean<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::pot_tail_mean_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::weighted_pot_tail_mean<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::weighted_pot_tail_mean<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::weighted_pot_tail_mean_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    typedef tag::weighted_pot_tail_mean_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/skewness.hpp	/^    typedef tag::weighted_skewness type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/sum.hpp	/^    typedef tag::weighted_sum type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    typedef tag::sum_kahan type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    typedef tag::sum_of_weights_kahan type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/sum_kahan.hpp	/^    typedef tag::weighted_sum_kahan type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/tail.hpp	/^        > type;$/;"	t	struct:boost::accumulators::detail::tail_range	access:public
type	/usr/include/boost/accumulators/statistics/tail_mean.hpp	/^    typedef tag::non_coherent_weighted_tail_mean<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/tail_quantile.hpp	/^    typedef tag::weighted_tail_quantile<LeftRight> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^    typedef tag::abstract_tail_weights type;$/;"	t	struct:boost::accumulators::feature_of	access:public
type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    typedef tag::absolute_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    typedef tag::absolute_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    typedef tag::relative_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/tail_variate_means.hpp	/^    typedef tag::relative_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/variance.hpp	/^    typedef tag::lazy_variance type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/variance.hpp	/^    typedef tag::lazy_weighted_variance type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/variance.hpp	/^    typedef tag::variance type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/variance.hpp	/^    typedef tag::weighted_variance type;$/;"	t	struct:boost::accumulators::as_weighted_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    typedef tag::immediate_weighted_mean type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    typedef tag::immediate_weighted_mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    typedef tag::weighted_mean type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    typedef tag::weighted_mean_of_variates<VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    typedef tag::weighted_median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    typedef tag::with_density_weighted_median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    typedef tag::with_p_square_cumulative_distribution_weighted_median type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    typedef tag::weighted_peaks_over_threshold<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    typedef tag::weighted_peaks_over_threshold_prob<LeftRight> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    typedef tag::weighted_sum_kahan type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    typedef tag::absolute_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    typedef tag::relative_weighted_tail_variate_means<LeftRight, VariateType, VariateTag> type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    typedef tag::lazy_weighted_variance type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    typedef tag::weighted_variance type;$/;"	t	struct:boost::accumulators::as_feature	access:public
type	/usr/include/boost/accumulators/statistics/with_error.hpp	/^        typedef tag::error_of<Feature> type;$/;"	t	struct:boost::accumulators::detail::error_of_tag	access:public
unary_function	/usr/include/boost/accumulators/numeric/functional.hpp	/^    template<class Arg, class Ret> struct unary_function {};$/;"	s	namespace:std
undroppable	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct undroppable$/;"	s	namespace:boost::accumulators::detail
undroppable	/usr/include/boost/accumulators/framework/depends_on.hpp	/^        struct undroppable<tag::droppable<Feature> >$/;"	s	namespace:boost::accumulators::detail
unweighted	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct unweighted {};$/;"	s	namespace:boost::accumulators
val	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^        ValueType val;$/;"	m	struct:boost::accumulators::impl::value_accumulator_impl	access:private
value	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^    struct value$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
value	/usr/include/boost/accumulators/numeric/functional.hpp	/^        static T const value;$/;"	m	struct:boost::numeric::default_	access:public
value	/usr/include/boost/accumulators/numeric/functional.hpp	/^        static T const value;$/;"	m	struct:boost::numeric::one	access:public
value	/usr/include/boost/accumulators/numeric/functional.hpp	/^        static T const value;$/;"	m	struct:boost::numeric::zero	access:public
value	/usr/include/boost/accumulators/numeric/functional.hpp	/^    T const default_<T>::value = T();$/;"	m	class:boost::numeric::default_
value	/usr/include/boost/accumulators/numeric/functional.hpp	/^    T const one<T>::value = T(1);$/;"	m	class:boost::numeric::one
value	/usr/include/boost/accumulators/numeric/functional.hpp	/^    T const zero<T>::value = T();$/;"	m	class:boost::numeric::zero
value	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^            static std::complex<T> const value;$/;"	m	class:boost::numeric::detail::one_complex::std	access:public
value	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^        std::complex<T> const one_complex<T>::value$/;"	m	class:boost::numeric::detail::std::one_complex
value_accumulator_impl	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^        value_accumulator_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::value_accumulator_impl	access:public	signature:(Args const &args)
value_accumulator_impl	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^    struct value_accumulator_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
value_tag	/usr/include/boost/accumulators/framework/accumulators/value_accumulator.hpp	/^    struct value_tag$/;"	s	namespace:boost::accumulators::tag
value_type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef T value_type;$/;"	t	struct:boost::numeric::default_	access:public
value_type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef T value_type;$/;"	t	struct:boost::numeric::one	access:public
value_type	/usr/include/boost/accumulators/numeric/functional.hpp	/^        typedef T value_type;$/;"	t	struct:boost::numeric::zero	access:public
value_type	/usr/include/boost/accumulators/numeric/functional/complex.hpp	/^        typedef std::complex<T> value_type;$/;"	t	struct:boost::numeric::one	access:public
variance	/usr/include/boost/accumulators/statistics/variance.hpp	/^        result_type variance;$/;"	m	struct:boost::accumulators::impl::variance_impl	access:private
variance	/usr/include/boost/accumulators/statistics/variance.hpp	/^    extractor<tag::variance> const variance = {};$/;"	m	namespace:boost::accumulators::extract
variance	/usr/include/boost/accumulators/statistics/variance.hpp	/^    struct variance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
variance_impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^        variance_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::variance_impl	access:public	signature:(Args const &args)
variance_impl	/usr/include/boost/accumulators/statistics/variance.hpp	/^    struct variance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
variate_type	/usr/include/boost/accumulators/statistics/covariance.hpp	/^        typedef typename numeric::functional::average<VariateType, std::size_t>::result_type variate_type;$/;"	t	struct:boost::accumulators::impl::covariance_impl	access:public
variates	/usr/include/boost/accumulators/statistics/tail_variate.hpp	/^        std::vector<VariateType> variates;$/;"	m	struct:boost::accumulators::impl::tail_variate_impl	access:private
visit	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void visit(UnaryFunction const &func)$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:(UnaryFunction const &func)
visit_if	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    void visit_if(UnaryFunction const &func)$/;"	f	struct:boost::accumulators::accumulator_set	access:public	signature:(UnaryFunction const &func)
void_	/usr/include/boost/accumulators/framework/accumulator_base.hpp	/^    typedef void void_;$/;"	t	namespace:boost::accumulators::detail
w_sum_	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        mutable float_type w_sum_;           \/\/ sum of weights of samples above threshold$/;"	m	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:private
weight_type	/usr/include/boost/accumulators/framework/accumulator_set.hpp	/^    typedef Weight weight_type;     \/\/\/< The type of the weight parameter. Must be a scalar. Defaults to void.$/;"	t	struct:boost::accumulators::accumulator_set	access:public
weighted	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct weighted {};$/;"	s	namespace:boost::accumulators
weighted_covariance	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^    extractor<tag::abstract_covariance> const weighted_covariance = {};$/;"	m	namespace:boost::accumulators::extract
weighted_covariance	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^    struct weighted_covariance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_covariance_impl	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        weighted_covariance_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_covariance_impl	access:public	signature:(Args const &args)
weighted_covariance_impl	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^    struct weighted_covariance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_density	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^    extractor<tag::density> const weighted_density = {};$/;"	m	namespace:boost::accumulators::extract
weighted_density	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^    struct weighted_density$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,density_cache_size,density_num_bins
weighted_density_impl	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^        weighted_density_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_density_impl	access:public	signature:(Args const &args)
weighted_density_impl	/usr/include/boost/accumulators/statistics/weighted_density.hpp	/^    struct weighted_density_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_extended_p_square	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^    extractor<tag::weighted_extended_p_square> const weighted_extended_p_square = {};$/;"	m	namespace:boost::accumulators::extract
weighted_extended_p_square	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^    struct weighted_extended_p_square$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,extended_p_square_probabilities
weighted_extended_p_square_impl	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        weighted_extended_p_square_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public	signature:(Args const &args)
weighted_extended_p_square_impl	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^    struct weighted_extended_p_square_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_extended_p_square_quantile	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    extractor<tag::weighted_extended_p_square_quantile> const weighted_extended_p_square_quantile = {};$/;"	m	namespace:boost::accumulators::extract
weighted_extended_p_square_quantile	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    struct weighted_extended_p_square_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_extended_p_square_quantile_quadratic	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    extractor<tag::weighted_extended_p_square_quantile_quadratic> const weighted_extended_p_square_quantile_quadratic = {};$/;"	m	namespace:boost::accumulators::extract
weighted_extended_p_square_quantile_quadratic	/usr/include/boost/accumulators/statistics/extended_p_square_quantile.hpp	/^    struct weighted_extended_p_square_quantile_quadratic$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_kurtosis	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^    extractor<tag::weighted_kurtosis> const weighted_kurtosis = {};$/;"	m	namespace:boost::accumulators::extract
weighted_kurtosis	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^    struct weighted_kurtosis$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_kurtosis_impl	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^        weighted_kurtosis_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::weighted_kurtosis_impl	access:public	signature:(dont_care)
weighted_kurtosis_impl	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^    struct weighted_kurtosis_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_mean	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    extractor<tag::mean> const weighted_mean = {};$/;"	m	namespace:boost::accumulators::extract
weighted_mean	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct weighted_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_mean_impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        weighted_mean_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::weighted_mean_impl	access:public	signature:(dont_care)
weighted_mean_impl	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct weighted_mean_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_mean_of_variates	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^    struct weighted_mean_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    extractor<tag::median> const weighted_median = {};$/;"	m	namespace:boost::accumulators::extract
weighted_median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct weighted_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        weighted_median_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::weighted_median_impl	access:public	signature:(dont_care)
weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct weighted_median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_moment	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^    struct weighted_moment$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_moment_impl	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        weighted_moment_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_moment_impl	access:public	signature:(Args const &args)
weighted_moment_impl	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^    struct weighted_moment_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_p_square_cumulative_distribution	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^    extractor<tag::weighted_p_square_cumulative_distribution> const weighted_p_square_cumulative_distribution = {};$/;"	m	namespace:boost::accumulators::extract
weighted_p_square_cumulative_distribution	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^    struct weighted_p_square_cumulative_distribution$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,p_square_cumulative_distribution_num_cells
weighted_p_square_cumulative_distribution_impl	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        weighted_p_square_cumulative_distribution_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public	signature:(Args const &args)
weighted_p_square_cumulative_distribution_impl	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^    struct weighted_p_square_cumulative_distribution_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_p_square_quantile	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^    extractor<tag::weighted_p_square_quantile> const weighted_p_square_quantile = {};$/;"	m	namespace:boost::accumulators::extract
weighted_p_square_quantile	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^    struct weighted_p_square_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_p_square_quantile_for_median	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^    extractor<tag::weighted_p_square_quantile_for_median> const weighted_p_square_quantile_for_median = {};$/;"	m	namespace:boost::accumulators::extract
weighted_p_square_quantile_for_median	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^    struct weighted_p_square_quantile_for_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_p_square_quantile_impl	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        weighted_p_square_quantile_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public	signature:(Args const &args)
weighted_p_square_quantile_impl	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^    struct weighted_p_square_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_peaks_over_threshold	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    extractor<tag::abstract_peaks_over_threshold> const weighted_peaks_over_threshold = {};$/;"	m	namespace:boost::accumulators::extract
weighted_peaks_over_threshold	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    struct weighted_peaks_over_threshold$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,pot_threshold_value
weighted_peaks_over_threshold_impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        weighted_peaks_over_threshold_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public	signature:(Args const &args)
weighted_peaks_over_threshold_impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    struct weighted_peaks_over_threshold_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_peaks_over_threshold_prob	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    struct weighted_peaks_over_threshold_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on,pot_threshold_probability
weighted_peaks_over_threshold_prob_impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        weighted_peaks_over_threshold_prob_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public	signature:(Args const &args)
weighted_peaks_over_threshold_prob_impl	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^    struct weighted_peaks_over_threshold_prob_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_pot_quantile	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    struct weighted_pot_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_pot_quantile_prob	/usr/include/boost/accumulators/statistics/pot_quantile.hpp	/^    struct weighted_pot_quantile_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_pot_tail_mean	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    struct weighted_pot_tail_mean$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_pot_tail_mean_prob	/usr/include/boost/accumulators/statistics/pot_tail_mean.hpp	/^    struct weighted_pot_tail_mean_prob$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_extended_p_square.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_extended_p_square_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_kurtosis.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_kurtosis_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::immediate_weighted_mean_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_mean.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_mean_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_moment.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_moment_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_p_square_cumul_dist.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_cumulative_distribution_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_p_square_quantile.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_p_square_quantile_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef typename numeric::functional::multiplies<Weight, Sample>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_peaks_over_threshold.hpp	/^        typedef typename numeric::functional::multiplies<Weight, Sample>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_peaks_over_threshold_prob_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_skewness_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_sum_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_tail_mean.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::non_coherent_weighted_tail_mean_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::lazy_weighted_variance_impl	access:public
weighted_sample	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        typedef typename numeric::functional::multiplies<Sample, Weight>::result_type weighted_sample;$/;"	t	struct:boost::accumulators::impl::weighted_variance_impl	access:public
weighted_sample_type	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        typedef typename numeric::functional::multiplies<Weight, typename numeric::functional::average<Sample, std::size_t>::result_type>::result_type weighted_sample_type;$/;"	t	struct:boost::accumulators::impl::weighted_covariance_impl	access:public
weighted_skewness	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^    extractor<tag::weighted_skewness> const weighted_skewness = {};$/;"	m	namespace:boost::accumulators::extract
weighted_skewness	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^    struct weighted_skewness$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_skewness_impl	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^        weighted_skewness_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::weighted_skewness_impl	access:public	signature:(dont_care)
weighted_skewness_impl	/usr/include/boost/accumulators/statistics/weighted_skewness.hpp	/^    struct weighted_skewness_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_sum	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    extractor<tag::weighted_sum> const weighted_sum = {};$/;"	m	namespace:boost::accumulators::extract
weighted_sum	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    struct weighted_sum$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_sum_	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        weighted_sample weighted_sum_;$/;"	m	struct:boost::accumulators::impl::weighted_sum_impl	access:private
weighted_sum_	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        weighted_sample weighted_sum_;$/;"	m	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:private
weighted_sum_impl	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^        weighted_sum_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_sum_impl	access:public	signature:(Args const &args)
weighted_sum_impl	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    struct weighted_sum_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_sum_kahan	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    extractor<tag::weighted_sum_kahan> const weighted_sum_kahan = {};$/;"	m	namespace:boost::accumulators::extract
weighted_sum_kahan	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    struct weighted_sum_kahan$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_sum_kahan_impl	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^        weighted_sum_kahan_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_sum_kahan_impl	access:public	signature:(Args const &args)
weighted_sum_kahan_impl	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    struct weighted_sum_kahan_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_sum_of_variates	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    extractor<tag::abstract_weighted_sum_of_variates> const weighted_sum_of_variates = {};$/;"	m	namespace:boost::accumulators::extract
weighted_sum_of_variates	/usr/include/boost/accumulators/statistics/weighted_sum.hpp	/^    struct weighted_sum_of_variates$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_sum_of_variates_kahan	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    extractor<tag::abstract_weighted_sum_of_variates> const weighted_sum_of_variates_kahan = {};$/;"	m	namespace:boost::accumulators::extract
weighted_sum_of_variates_kahan	/usr/include/boost/accumulators/statistics/weighted_sum_kahan.hpp	/^    struct weighted_sum_of_variates_kahan$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_tail_quantile	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^    extractor<tag::quantile> const weighted_tail_quantile = {};$/;"	m	namespace:boost::accumulators::extract
weighted_tail_quantile	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^    struct weighted_tail_quantile$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_tail_quantile_impl	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^        weighted_tail_quantile_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::weighted_tail_quantile_impl	access:public	signature:(dont_care)
weighted_tail_quantile_impl	/usr/include/boost/accumulators/statistics/weighted_tail_quantile.hpp	/^    struct weighted_tail_quantile_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_tail_variate_means	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    extractor<tag::abstract_absolute_tail_variate_means> const weighted_tail_variate_means = {};$/;"	m	namespace:boost::accumulators::extract
weighted_tail_variate_means_impl	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^        weighted_tail_variate_means_impl(dont_care) {}$/;"	f	struct:boost::accumulators::impl::weighted_tail_variate_means_impl	access:public	signature:(dont_care)
weighted_tail_variate_means_impl	/usr/include/boost/accumulators/statistics/weighted_tail_variate_means.hpp	/^    struct weighted_tail_variate_means_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_variance	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        result_type weighted_variance;$/;"	m	struct:boost::accumulators::impl::weighted_variance_impl	access:private
weighted_variance	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    extractor<tag::weighted_variance> const weighted_variance = {};$/;"	m	namespace:boost::accumulators::extract
weighted_variance	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    struct weighted_variance$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
weighted_variance_impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^        weighted_variance_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::weighted_variance_impl	access:public	signature:(Args const &args)
weighted_variance_impl	/usr/include/boost/accumulators/statistics/weighted_variance.hpp	/^    struct weighted_variance_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
weighted_variate_type	/usr/include/boost/accumulators/statistics/weighted_covariance.hpp	/^        typedef typename numeric::functional::multiplies<Weight, typename numeric::functional::average<VariateType, std::size_t>::result_type>::result_type weighted_variate_type;$/;"	t	struct:boost::accumulators::impl::weighted_covariance_impl	access:public
window_size	/usr/include/boost/accumulators/statistics/rolling_count.hpp	/^        static boost::parameter::keyword<tag::rolling_window_size> const window_size;$/;"	m	class:boost::accumulators::tag::rolling_count::boost::parameter	access:public
window_size	/usr/include/boost/accumulators/statistics/rolling_mean.hpp	/^        static boost::parameter::keyword<tag::rolling_window_size> const window_size;$/;"	m	class:boost::accumulators::tag::rolling_mean::boost::parameter	access:public
window_size	/usr/include/boost/accumulators/statistics/rolling_sum.hpp	/^        static boost::parameter::keyword<tag::rolling_window_size> const window_size;$/;"	m	class:boost::accumulators::tag::rolling_sum::boost::parameter	access:public
window_size	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        static boost::parameter::keyword<tag::rolling_window_size> const window_size;$/;"	m	class:boost::accumulators::tag::rolling_window::boost::parameter	access:public
window_size	/usr/include/boost/accumulators/statistics/rolling_window.hpp	/^        static boost::parameter::keyword<tag::rolling_window_size> const window_size;$/;"	m	class:boost::accumulators::tag::rolling_window_plus1::boost::parameter	access:public
with_cached_result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        with_cached_result(Args const &args)$/;"	f	struct:boost::accumulators::with_cached_result	access:public	signature:(Args const &args)
with_cached_result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        with_cached_result(with_cached_result const &that)$/;"	f	struct:boost::accumulators::with_cached_result	access:public	signature:(with_cached_result const &that)
with_cached_result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^    struct with_cached_result$/;"	s	namespace:boost::accumulators	inherits:Accumulator
with_density	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct with_density {};$/;"	s	namespace:boost::accumulators
with_density_median	/usr/include/boost/accumulators/statistics/median.hpp	/^    extractor<tag::with_density_median> const with_density_median = {};$/;"	m	namespace:boost::accumulators::extract
with_density_median	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct with_density_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
with_density_median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        with_density_median_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::with_density_median_impl	access:public	signature:(Args const &args)
with_density_median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct with_density_median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
with_density_weighted_median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct with_density_weighted_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
with_density_weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        with_density_weighted_median_impl(Args const &args)$/;"	f	struct:boost::accumulators::impl::with_density_weighted_median_impl	access:public	signature:(Args const &args)
with_density_weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct with_density_weighted_median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
with_error	/usr/include/boost/accumulators/statistics/with_error.hpp	/^struct with_error$/;"	s	namespace:boost::accumulators	inherits:mpl::transform_view
with_p_square_cumulative_distribution	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct with_p_square_cumulative_distribution {};$/;"	s	namespace:boost::accumulators
with_p_square_cumulative_distribution_median	/usr/include/boost/accumulators/statistics/median.hpp	/^    extractor<tag::with_p_square_cumulative_distribution_median> const with_p_square_cumulative_distribution_median = {};$/;"	m	namespace:boost::accumulators::extract
with_p_square_cumulative_distribution_median	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct with_p_square_cumulative_distribution_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
with_p_square_cumulative_distribution_median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^        with_p_square_cumulative_distribution_median_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_median_impl	access:public	signature:(dont_care)
with_p_square_cumulative_distribution_median_impl	/usr/include/boost/accumulators/statistics/median.hpp	/^    struct with_p_square_cumulative_distribution_median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
with_p_square_cumulative_distribution_weighted_median	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct with_p_square_cumulative_distribution_weighted_median$/;"	s	namespace:boost::accumulators::tag	inherits:depends_on
with_p_square_cumulative_distribution_weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^        with_p_square_cumulative_distribution_weighted_median_impl(dont_care)$/;"	f	struct:boost::accumulators::impl::with_p_square_cumulative_distribution_weighted_median_impl	access:public	signature:(dont_care)
with_p_square_cumulative_distribution_weighted_median_impl	/usr/include/boost/accumulators/statistics/weighted_median.hpp	/^    struct with_p_square_cumulative_distribution_weighted_median_impl$/;"	s	namespace:boost::accumulators::impl	inherits:accumulator_base
with_p_square_quantile	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct with_p_square_quantile {};$/;"	s	namespace:boost::accumulators
with_threshold_probability	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct with_threshold_probability {};$/;"	s	namespace:boost::accumulators
with_threshold_value	/usr/include/boost/accumulators/statistics_fwd.hpp	/^struct with_threshold_value {};$/;"	s	namespace:boost::accumulators
zero	/usr/include/boost/accumulators/numeric/functional.hpp	/^    struct zero$/;"	s	namespace:boost::numeric
zero_or_default	/usr/include/boost/accumulators/numeric/functional.hpp	/^    struct zero_or_default$/;"	s	namespace:boost::numeric	inherits:mpl::if_::type
~with_cached_result	/usr/include/boost/accumulators/framework/accumulators/droppable_accumulator.hpp	/^        ~with_cached_result()$/;"	f	struct:boost::accumulators::with_cached_result	access:public	signature:()
